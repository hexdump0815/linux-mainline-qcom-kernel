created via: https://github.com/99degree/linux/compare/59b723cd2adbac2a34fc8e12c74ae26ae45bf230...ede082ad8e7a7b4ed52b64a1beac1476e9a878a4.diff

this is from the 99degree tree for the xiaomi redmi note 9 pro joyeuse device
and the "working" version closest to v6.12 (the working-20241104 branch) to
maybe use as a reference for bringing the map22v a52/a72 to v6.12 ... i have no
real idea about the quality of this code and discovered it via
https://patchwork.kernel.org/project/linux-arm-msm/cover/20240621-b4-sc7180-camss-v1-0-14937929f30e@gmail.com/

diff --git a/Documentation/ABI/testing/sysfs-class-android_usb b/Documentation/ABI/testing/sysfs-class-android_usb
new file mode 100644
index 00000000000000..3f8131e2b0e429
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-class-android_usb
@@ -0,0 +1,16 @@
+Android USB devices (eg. /sys/class/android_usb/android0/)
+
+What:		/sys/class/android_usb/<android_device>/state
+Date:		Feb 2024
+Contact:	Neill Kapron <nkapron@google.com>
+Description:
+		The state of the USB connection. This attribute is likely
+		redundant with the /sys/class/UDC/state attribute, and should
+		be deprecated/removed when userspace can be refactored.
+		Change on the state will also generate uevent KOBJ_CHANGE on
+		the port with the new state included in the message as
+		"USB_STATE=<STATE>". Note this is not the correct usage of
+		uevents, but necessary due to the requirement to maintaine
+		userspace API compatibility.
+
+		Valid values: CONNECTED, DISCONNECTED, CONFIGURED
diff --git a/Documentation/devicetree/bindings/input/touchscreen/novatek,nt36xxx-spi.yaml b/Documentation/devicetree/bindings/input/touchscreen/novatek,nt36xxx-spi.yaml
new file mode 100644
index 00000000000000..ba851971e6906e
--- /dev/null
+++ b/Documentation/devicetree/bindings/input/touchscreen/novatek,nt36xxx-spi.yaml
@@ -0,0 +1,76 @@
+# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/input/touchscreen/novatek,nt36xxx-spi.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: Novatek NT36xxx series touchscreen controller
+
+maintainers:
+  - George Chan <gchan9527@gmail.com>
+
+allOf:
+  - $ref: touchscreen.yaml#
+
+properties:
+  compatible:
+    oneOf:
+      - description: Implements extra matching in bootargs for keywords like "tianma" or "nt36"
+        items:
+          - enum:
+              - novatek,nt36xxx-spi
+          - const: novatek,NVT-default-spi
+
+      - description: Implements simple compatible string to nt36xxx IC
+        enum:
+          - novatek,nt36xxx-i2c
+          - novatek,nt36xxx-spi
+          - novatek,NVT-default-spi
+
+  reg:
+    maxItems: 1
+
+  irq-gpio:
+    maxItems: 1
+
+  vdd-supply:
+    description: Power supply regulator for VDD pin
+
+  vio-supply:
+    description: Power supply regulator on VDD-IO pin
+
+  firmware-name:
+    description: Firmware name for device init, no needed if unspecify.
+                  For IC like nt36675, default fw file will be
+                  "novatek_ts_tianma_fw.bin" if unspecify.
+
+  spi-max-frequency:
+    description: Set max frequency to spi bus communication. This is optional.
+
+unevaluatedProperties: false
+
+required:
+  - compatible
+  - reg
+  - irq-gpio
+
+examples:
+  - |
+    #include <dt-bindings/interrupt-controller/irq.h>
+    #include <dt-bindings/gpio/gpio.h>
+
+    spi {
+      #address-cells = <1>;
+      #size-cells = <0>;
+      #ranges = <0>;
+
+      touchscreen@0 {
+        compatible = "novatek,nt36xxx-spi";
+        reg = <0>;
+        spi-max-frequency = <4000000>;
+        irq-gpio = <&tlmm 9 0x2001>;
+        firmware-name = "novatek_ts_tianma_fw.bin";
+      };
+    };
+
+...
diff --git a/Documentation/devicetree/bindings/media/qcom,sc7180-camss.yaml b/Documentation/devicetree/bindings/media/qcom,sc7180-camss.yaml
new file mode 100644
index 00000000000000..58ffa49448576d
--- /dev/null
+++ b/Documentation/devicetree/bindings/media/qcom,sc7180-camss.yaml
@@ -0,0 +1,328 @@
+# SPDX-License-Identifier: (GPL-2.0 OR BSD-2-Clause)
+
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/media/qcom,sc7180-camss.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: Qualcomm Camera SubSystem
+
+maintainers:
+  - Bryan O'Donoghue <bryan.odonoghue@linaro.org>
+
+description:
+  The CAMSS IP is a CSI decoder and ISP present on Qualcomm platforms
+
+properties:
+  compatible:
+    const: qcom,sc7180-camss
+
+  clocks:
+    maxItems: 24
+
+  clock-names:
+    items:
+      - const: camnoc_axi
+      - const: cpas_ahb
+      - const: csi0
+      - const: csi1
+      - const: csi2
+      - const: csiphy0
+      - const: csiphy0_timer
+      - const: csiphy1
+      - const: csiphy1_timer
+      - const: csiphy2
+      - const: csiphy2_timer
+      - const: csiphy3
+      - const: csiphy3_timer
+      - const: gcc_camera_ahb
+      - const: gcc_camera_axi
+      - const: soc_ahb
+      - const: vfe0_axi
+      - const: vfe0
+      - const: vfe0_cphy_rx
+      - const: vfe1_axi
+      - const: vfe1
+      - const: vfe1_cphy_rx
+      - const: vfe_lite
+      - const: vfe_lite_cphy_rx
+
+  interrupts:
+    maxItems: 10
+
+  interrupt-names:
+    items:
+      - const: csid0
+      - const: csid1
+      - const: csid2
+      - const: csiphy0
+      - const: csiphy1
+      - const: csiphy2
+      - const: csiphy3
+      - const: vfe0
+      - const: vfe1
+      - const: vfe_lite
+
+  iommus:
+    maxItems: 3
+
+  power-domains:
+    items:
+      - description: IFE0 GDSC - Image Front End, Global Distributed Switch Controller.
+      - description: IFE1 GDSC - Image Front End, Global Distributed Switch Controller.
+      - description: Titan GDSC - Titan ISP Block, Global Distributed Switch Controller.
+
+  power-domain-names:
+    items:
+      - const: ife0
+      - const: ife1
+      - const: top
+
+  ports:
+    $ref: /schemas/graph.yaml#/properties/ports
+
+    description:
+      CSI input ports.
+
+    properties:
+      port@0:
+        $ref: /schemas/graph.yaml#/$defs/port-base
+        unevaluatedProperties: false
+        description:
+          Input port for receiving CSI data.
+
+        properties:
+          endpoint:
+            $ref: video-interfaces.yaml#
+            unevaluatedProperties: false
+
+            properties:
+              data-lanes:
+                maxItems: 4
+
+            required:
+              - data-lanes
+
+      port@1:
+        $ref: /schemas/graph.yaml#/$defs/port-base
+        unevaluatedProperties: false
+        description:
+          Input port for receiving CSI data.
+
+        properties:
+          endpoint:
+            $ref: video-interfaces.yaml#
+            unevaluatedProperties: false
+
+            properties:
+              data-lanes:
+                maxItems: 4
+
+            required:
+              - data-lanes
+
+      port@2:
+        $ref: /schemas/graph.yaml#/$defs/port-base
+        unevaluatedProperties: false
+        description:
+          Input port for receiving CSI data.
+
+        properties:
+          endpoint:
+            $ref: video-interfaces.yaml#
+            unevaluatedProperties: false
+
+            properties:
+              data-lanes:
+                maxItems: 4
+
+            required:
+              - data-lanes
+
+      port@3:
+        $ref: /schemas/graph.yaml#/$defs/port-base
+        unevaluatedProperties: false
+        description:
+          Input port for receiving CSI data.
+
+        properties:
+          endpoint:
+            $ref: video-interfaces.yaml#
+            unevaluatedProperties: false
+
+            properties:
+              data-lanes:
+                maxItems: 4
+
+            required:
+              - data-lanes
+
+  reg:
+    maxItems: 10
+
+  reg-names:
+    items:
+      - const: csid0
+      - const: csid1
+      - const: csid2
+      - const: csiphy0
+      - const: csiphy1
+      - const: csiphy2
+      - const: csiphy3
+      - const: vfe0
+      - const: vfe1
+      - const: vfe_lite
+
+  vdda-phy-supply:
+    description:
+      Phandle to a regulator supply to PHY core block.
+
+  vdda-pll-supply:
+    description:
+      Phandle to 1.8V regulator supply to PHY refclk pll block.
+
+required:
+  - clock-names
+  - clocks
+  - compatible
+  - interrupt-names
+  - interrupts
+  - iommus
+  - power-domains
+  - power-domain-names
+  - reg
+  - reg-names
+  - vdda-phy-supply
+  - vdda-pll-supply
+
+additionalProperties: false
+
+examples:
+  - |
+    #include <dt-bindings/interrupt-controller/arm-gic.h>
+    #include <dt-bindings/clock/qcom,camcc-sc7180.h>
+    #include <dt-bindings/clock/qcom,gcc-sc7180.h>
+    #include <dt-bindings/power/qcom-rpmpd.h>
+
+    soc {
+      #address-cells = <2>;
+      #size-cells = <2>;
+
+      camss: camss@acb3000 {
+        compatible = "qcom,sc7180-camss";
+
+        reg = <0 0xacb3000 0 0x1000>,
+              <0 0xacba000 0 0x1000>,
+              <0 0xacc8000 0 0x1000>,
+              <0 0xac65000 0 0x1000>,
+              <0 0xac66000 0 0x1000>,
+              <0 0xac67000 0 0x1000>,
+              <0 0xac68000 0 0x1000>,
+              <0 0xacaf000 0 0x4000>,
+              <0 0xacb6000 0 0x4000>,
+              <0 0xacc4000 0 0x4000>;
+
+        reg-names = "csid0",
+                    "csid1",
+                    "csid2",
+                    "csiphy0",
+                    "csiphy1",
+                    "csiphy2",
+                    "csiphy3",
+                    "vfe0",
+                    "vfe1",
+                    "vfe_lite";
+
+        vdda-phy-supply = <&vreg_l1a_0p875>;
+        vdda-pll-supply = <&vreg_l26a_1p2>;
+
+        interrupts = <GIC_SPI 464 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 466 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 473 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 477 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 478 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 479 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 448 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 465 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 467 IRQ_TYPE_LEVEL_HIGH>,
+                     <GIC_SPI 472 IRQ_TYPE_LEVEL_HIGH>;
+
+        interrupt-names = "csid0",
+                          "csid1",
+                          "csid2",
+                          "csiphy0",
+                          "csiphy1",
+                          "csiphy2",
+                          "csiphy3",
+                          "vfe0",
+                          "vfe1",
+                          "vfe_lite";
+
+        power-domains = <&camcc IFE_0_GDSC>,
+                        <&camcc IFE_1_GDSC>,
+                        <&camcc TITAN_TOP_GDSC>;
+
+        power-domain-names = "ife0",
+                             "ife1",
+                             "top";
+
+        clocks = <&camcc CAM_CC_CAMNOC_AXI_CLK>,
+                 <&camcc CAM_CC_CPAS_AHB_CLK>,
+                 <&camcc CAM_CC_IFE_0_CSID_CLK>,
+                 <&camcc CAM_CC_IFE_1_CSID_CLK>,
+                 <&camcc CAM_CC_IFE_LITE_CSID_CLK>,
+                 <&camcc CAM_CC_CSIPHY0_CLK>,
+                 <&camcc CAM_CC_CSI0PHYTIMER_CLK>,
+                 <&camcc CAM_CC_CSIPHY1_CLK>,
+                 <&camcc CAM_CC_CSI1PHYTIMER_CLK>,
+                 <&camcc CAM_CC_CSIPHY2_CLK>,
+                 <&camcc CAM_CC_CSI2PHYTIMER_CLK>,
+                 <&camcc CAM_CC_CSIPHY3_CLK>,
+                 <&camcc CAM_CC_CSI3PHYTIMER_CLK>,
+                 <&gcc GCC_CAMERA_AHB_CLK>,
+                 <&gcc GCC_CAMERA_HF_AXI_CLK>,
+                 <&camcc CAM_CC_SOC_AHB_CLK>,
+                 <&camcc CAM_CC_IFE_0_AXI_CLK>,
+                 <&camcc CAM_CC_IFE_0_CLK>,
+                 <&camcc CAM_CC_IFE_0_CPHY_RX_CLK>,
+                 <&camcc CAM_CC_IFE_1_AXI_CLK>,
+                 <&camcc CAM_CC_IFE_1_CLK>,
+                 <&camcc CAM_CC_IFE_1_CPHY_RX_CLK>,
+                 <&camcc CAM_CC_IFE_LITE_CLK>,
+                 <&camcc CAM_CC_IFE_LITE_CPHY_RX_CLK>;
+
+        clock-names = "camnoc_axi",
+                      "cpas_ahb",
+                      "csi0",
+                      "csi1",
+                      "csi2",
+                      "csiphy0",
+                      "csiphy0_timer",
+                      "csiphy1",
+                      "csiphy1_timer",
+                      "csiphy2",
+                      "csiphy2_timer",
+                      "csiphy3",
+                      "csiphy3_timer",
+                      "gcc_camera_ahb",
+                      "gcc_camera_axi",
+                      "soc_ahb",
+                      "vfe0_axi",
+                      "vfe0",
+                      "vfe0_cphy_rx",
+                      "vfe1_axi",
+                      "vfe1",
+                      "vfe1_cphy_rx",
+                      "vfe_lite",
+                      "vfe_lite_cphy_rx";
+
+        iommus = <&apps_smmu 0x820 0x0>,
+                 <&apps_smmu 0x840 0x0>,
+                 <&apps_smmu 0x860 0x0>;
+
+        ports {
+          #address-cells = <1>;
+          #size-cells = <0>;
+        };
+      };
+    };
diff --git a/Makefile b/Makefile
index b8efbfe9da940b..3caa47b9388de3 100644
--- a/Makefile
+++ b/Makefile
@@ -5,6 +5,9 @@ SUBLEVEL = 0
 EXTRAVERSION = -rc6
 NAME = Baby Opossum Posse
 
+ARCH ?= arm64
+CROSS_COMPILE ?= aarch64-linux-gnu-
+
 # *DOCUMENTATION*
 # To see a list of typical targets execute "make help"
 # More info can be located in ./README
diff --git a/arch/arm64/boot/dts/qcom/Makefile b/arch/arm64/boot/dts/qcom/Makefile
index ae002c7cf1268a..66801d3cadaa01 100644
--- a/arch/arm64/boot/dts/qcom/Makefile
+++ b/arch/arm64/boot/dts/qcom/Makefile
@@ -234,6 +234,7 @@ dtb-$(CONFIG_ARCH_QCOM)	+= sm6350-sony-xperia-lena-pdx213.dtb
 dtb-$(CONFIG_ARCH_QCOM)	+= sm6375-sony-xperia-murray-pdx225.dtb
 dtb-$(CONFIG_ARCH_QCOM)	+= sm7125-xiaomi-curtana.dtb
 dtb-$(CONFIG_ARCH_QCOM)	+= sm7125-xiaomi-joyeuse.dtb
+dtb-$(CONFIG_ARCH_QCOM)	+= sm7125-xiaomi-joyeuse-cust.dtb
 dtb-$(CONFIG_ARCH_QCOM)	+= sm7225-fairphone-fp4.dtb
 dtb-$(CONFIG_ARCH_QCOM)	+= sm8150-hdk.dtb
 dtb-$(CONFIG_ARCH_QCOM)	+= sm8150-microsoft-surface-duo.dtb
diff --git a/arch/arm64/boot/dts/qcom/pm6150.dtsi b/arch/arm64/boot/dts/qcom/pm6150.dtsi
index 59524609fb1e8e..d878cc6ccc420f 100644
--- a/arch/arm64/boot/dts/qcom/pm6150.dtsi
+++ b/arch/arm64/boot/dts/qcom/pm6150.dtsi
@@ -45,6 +45,7 @@
 			reg = <0x800>;
 			mode-bootloader = <0x2>;
 			mode-recovery = <0x1>;
+			mode-system = <0>;
 
 			pm6150_pwrkey: pwrkey {
 				compatible = "qcom,pm8941-pwrkey";
@@ -130,6 +131,22 @@
 				reg = <ADC5_DIE_TEMP>;
 				label = "die_temp";
 			};
+
+			bat_therm@4a {
+				reg = <ADC5_BAT_THERM_100K_PU>;
+				label = "bat_therm";
+				qcom,ratiometric;
+				qcom,hw-settle-time = <200>;
+				qcom,pre-scaling = <1 1>;
+			};
+
+			bat_id@4b {
+				reg = <ADC5_BAT_ID_100K_PU>;
+				label = "bat_id";
+				qcom,ratiometric;
+				qcom,hw-settle-time = <200>;
+				qcom,pre-scaling = <1 1>;
+			};
 		};
 
 		pm6150_adc_tm: adc-tm@3500 {
@@ -142,6 +159,18 @@
 			status = "disabled";
 		};
 
+		pm6150_qgauge: qgauge@4800 {
+			compatible = "qcom,pm6150-qg";
+			reg = <0x4800>;
+
+			io-channels = <&pm6150_adc ADC5_BAT_THERM_100K_PU>,
+				      <&pm6150_adc ADC5_BAT_ID_100K_PU>;
+			io-channel-names = "batt-therm",
+					   "batt-id";
+
+			status = "disabled";
+		};
+
 		pm6150_rtc: rtc@6000 {
 			compatible = "qcom,pm8941-rtc";
 			reg = <0x6000>, <0x6100>;
diff --git a/arch/arm64/boot/dts/qcom/pm6150l.dtsi b/arch/arm64/boot/dts/qcom/pm6150l.dtsi
index 334f976f115431..20beeb3aadcc34 100644
--- a/arch/arm64/boot/dts/qcom/pm6150l.dtsi
+++ b/arch/arm64/boot/dts/qcom/pm6150l.dtsi
@@ -42,6 +42,31 @@
 		#address-cells = <1>;
 		#size-cells = <0>;
 
+		pm6150l_pon: pon@800 {
+			compatible = "qcom,pm8998-pon";
+			reg = <0x800>;
+			mode-bootloader = <0x2>;
+			mode-recovery = <0x1>;
+			mode-system = <0>;
+
+			pm6150l_pwrkey: pwrkey {
+				compatible = "qcom,pm8941-pwrkey";
+				interrupts = <0x0 0x8 0 IRQ_TYPE_EDGE_BOTH>;
+				debounce = <15625>;
+				bias-pull-up;
+				linux,code = <KEY_POWER>;
+				status = "disabled";
+			};
+
+			pm6150l_resin: resin {
+				compatible = "qcom,pm8941-resin";
+				interrupts = <0x0 0x8 1 IRQ_TYPE_EDGE_BOTH>;
+				debounce = <15625>;
+				bias-pull-up;
+				status = "disabled";
+			};
+		};
+
 		pm6150l_temp: temp-alarm@2400 {
 			compatible = "qcom,spmi-temp-alarm";
 			reg = <0x2400>;
diff --git a/arch/arm64/boot/dts/qcom/sc7180.dtsi b/arch/arm64/boot/dts/qcom/sc7180.dtsi
index b5ebf898032512..f34f0e431fe9f3 100644
--- a/arch/arm64/boot/dts/qcom/sc7180.dtsi
+++ b/arch/arm64/boot/dts/qcom/sc7180.dtsi
@@ -5,6 +5,7 @@
  * Copyright (c) 2019-2020, The Linux Foundation. All rights reserved.
  */
 
+#include <dt-bindings/clock/qcom,camcc-sc7180.h>
 #include <dt-bindings/clock/qcom,dispcc-sc7180.h>
 #include <dt-bindings/clock/qcom,gcc-sc7180.h>
 #include <dt-bindings/clock/qcom,gpucc-sc7180.h>
@@ -780,7 +781,7 @@
 		};
 	};
 
-	soc: soc@0 {
+	soc: soc {
 		#address-cells = <2>;
 		#size-cells = <2>;
 		ranges = <0 0 0 0 0x10 0>;
@@ -3150,6 +3151,138 @@
 			qcom,bcm-voters = <&apps_bcm_voter>;
 		};
 
+		camss: camss@acb3000 {
+			compatible = "qcom,sc7180-camss";
+
+			reg = <0 0xacb3000 0 0x1000>,
+			      <0 0xacba000 0 0x1000>,
+			      <0 0xacc8000 0 0x1000>,
+			      <0 0xac65000 0 0x1000>,
+			      <0 0xac66000 0 0x1000>,
+			      <0 0xac67000 0 0x1000>,
+			      <0 0xac68000 0 0x1000>,
+			      <0 0xacaf000 0 0x4000>,
+			      <0 0xacb6000 0 0x4000>,
+			      <0 0xacc4000 0 0x4000>;
+
+			reg-names = "csid0",
+				    "csid1",
+				    "csid2",
+				    "csiphy0",
+				    "csiphy1",
+				    "csiphy2",
+				    "csiphy3",
+				    "vfe0",
+				    "vfe1",
+				    "vfe_lite";
+
+			clocks = <&camcc CAM_CC_CAMNOC_AXI_CLK>,
+				 <&camcc CAM_CC_CPAS_AHB_CLK>,
+				 <&camcc CAM_CC_IFE_0_CSID_CLK>,
+				 <&camcc CAM_CC_IFE_1_CSID_CLK>,
+				 <&camcc CAM_CC_IFE_LITE_CSID_CLK>,
+				 <&camcc CAM_CC_CSIPHY0_CLK>,
+				 <&camcc CAM_CC_CSI0PHYTIMER_CLK>,
+				 <&camcc CAM_CC_CSIPHY1_CLK>,
+				 <&camcc CAM_CC_CSI1PHYTIMER_CLK>,
+				 <&camcc CAM_CC_CSIPHY2_CLK>,
+				 <&camcc CAM_CC_CSI2PHYTIMER_CLK>,
+				 <&camcc CAM_CC_CSIPHY3_CLK>,
+				 <&camcc CAM_CC_CSI3PHYTIMER_CLK>,
+				 <&gcc GCC_CAMERA_AHB_CLK>,
+				 <&gcc GCC_CAMERA_HF_AXI_CLK>,
+				 <&camcc CAM_CC_SOC_AHB_CLK>,
+				 <&camcc CAM_CC_IFE_0_AXI_CLK>,
+				 <&camcc CAM_CC_IFE_0_CLK>,
+				 <&camcc CAM_CC_IFE_0_CPHY_RX_CLK>,
+				 <&camcc CAM_CC_IFE_1_AXI_CLK>,
+				 <&camcc CAM_CC_IFE_1_CLK>,
+				 <&camcc CAM_CC_IFE_1_CPHY_RX_CLK>,
+				 <&camcc CAM_CC_IFE_LITE_CLK>,
+				 <&camcc CAM_CC_IFE_LITE_CPHY_RX_CLK>;
+
+			clock-names = "camnoc_axi",
+				      "cpas_ahb",
+				      "csi0",
+				      "csi1",
+				      "csi2",
+				      "csiphy0",
+				      "csiphy0_timer",
+				      "csiphy1",
+				      "csiphy1_timer",
+				      "csiphy2",
+				      "csiphy2_timer",
+				      "csiphy3",
+				      "csiphy3_timer",
+				      "gcc_camera_ahb",
+				      "gcc_camera_axi",
+				      "soc_ahb",
+				      "vfe0_axi",
+				      "vfe0",
+				      "vfe0_cphy_rx",
+				      "vfe1_axi",
+				      "vfe1",
+				      "vfe1_cphy_rx",
+				      "vfe_lite",
+				      "vfe_lite_cphy_rx";
+
+			interrupts = <GIC_SPI 464 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 466 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 473 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 477 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 478 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 479 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 448 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 465 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 467 IRQ_TYPE_LEVEL_HIGH>,
+				     <GIC_SPI 472 IRQ_TYPE_LEVEL_HIGH>;
+
+			interrupt-names = "csid0",
+					  "csid1",
+					  "csid2",
+					  "csiphy0",
+					  "csiphy1",
+					  "csiphy2",
+					  "csiphy3",
+					  "vfe0",
+					  "vfe1",
+					  "vfe_lite";
+
+			iommus = <&apps_smmu 0x820 0x0>,
+				 <&apps_smmu 0x840 0x0>,
+				 <&apps_smmu 0x860 0x0>;
+
+			power-domains = <&camcc IFE_0_GDSC>,
+					<&camcc IFE_1_GDSC>,
+					<&camcc TITAN_TOP_GDSC>;
+
+			power-domain-names = "ife0", "ife1", "top";
+
+			status = "disabled";
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				port@0 {
+					reg = <0>;
+				};
+
+				port@1 {
+					reg = <1>;
+				};
+
+				port@2 {
+					reg = <2>;
+				};
+
+				port@3 {
+					reg = <3>;
+				};
+
+			};
+		};
+
 		camcc: clock-controller@ad00000 {
 			compatible = "qcom,sc7180-camcc";
 			reg = <0 0x0ad00000 0 0x10000>;
diff --git a/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-camera.dts b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-camera.dts
new file mode 100644
index 00000000000000..1d824d1ac6a732
--- /dev/null
+++ b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-camera.dts
@@ -0,0 +1,1095 @@
+#ifndef SM7125_XIAOMI_JOYEUSE_CAMERA_DTS
+#define SM7125_XIAOMI_JOYEUSE_CAMERA_DTS
+
+#include <dt-bindings/clock/qcom,camcc-sc7180.h>
+
+#include "sm7125-xiaomi-joyeuse-display.dts"
+&soc {
+	/* TODO: check csid2 and csid-lite */
+
+#if 0
+	camss: camss@acb3000 {
+		compatible = "qcom,sc7180-camss";
+
+		reg = <0 0x0acb3000 0 0x1000>,
+			<0 0x0acba000 0 0x1000>,
+			<0 0x0acc8000 0 0x1000>,
+			<0 0x0ac65000 0 0x1000>,
+			<0 0x0ac66000 0 0x1000>,
+			<0 0x0ac67000 0 0x1000>,
+			<0 0x0ac68000 0 0x1000>,
+			<0 0x0acaf000 0 0x4000>,
+			<0 0x0acb6000 0 0x4000>,
+			<0 0x0acc4000 0 0x4000>;
+		reg-names = "csid0",
+			"csid1",
+			"csid2",
+			"csiphy0",
+			"csiphy1",
+			"csiphy2",
+			"csiphy3",
+			"vfe0",
+			"vfe1",
+			"vfe_lite";
+
+		interrupts = <GIC_SPI 464 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 466 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 473 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 477 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 478 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 479 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 448 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 465 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 467 IRQ_TYPE_EDGE_RISING>,
+			<GIC_SPI 472 IRQ_TYPE_EDGE_RISING>;
+		interrupt-names = "csid0",
+			"csid1",
+			"csid2",
+			"csiphy0",
+			"csiphy1",
+			"csiphy2",
+			"csiphy3",
+			"vfe0",
+			"vfe1",
+			"vfe_lite";
+
+		power-domains = <&camcc IFE_0_GDSC>,
+			<&camcc IFE_1_GDSC>,
+			<&camcc TITAN_TOP_GDSC>;
+
+                power-domain-names = "ife0",
+                                     "ife1",
+                                     "top";
+
+		required-opps = <&rpmhpd_opp_low_svs>;
+
+		clocks = <&camcc CAM_CC_CAMNOC_AXI_CLK>,
+				<&camcc CAM_CC_CPAS_AHB_CLK>,
+				<&camcc CAM_CC_CPHY_RX_CLK_SRC>,
+				<&camcc CAM_CC_IFE_0_CSID_CLK>,
+				<&camcc CAM_CC_IFE_0_CSID_CLK_SRC>,
+				<&camcc CAM_CC_IFE_1_CSID_CLK>,
+				<&camcc CAM_CC_IFE_1_CSID_CLK_SRC>,
+				<&camcc CAM_CC_IFE_LITE_CSID_CLK>,
+				<&camcc CAM_CC_IFE_LITE_CSID_CLK_SRC>,
+				<&camcc CAM_CC_CSIPHY0_CLK>,
+				<&camcc CAM_CC_CSI0PHYTIMER_CLK>,
+				<&camcc CAM_CC_CSI0PHYTIMER_CLK_SRC>,
+				<&camcc CAM_CC_CSIPHY1_CLK>,
+				<&camcc CAM_CC_CSI1PHYTIMER_CLK>,
+				<&camcc CAM_CC_CSI1PHYTIMER_CLK_SRC>,
+				<&camcc CAM_CC_CSIPHY2_CLK>,
+				<&camcc CAM_CC_CSI2PHYTIMER_CLK>,
+				<&camcc CAM_CC_CSI2PHYTIMER_CLK_SRC>,
+				<&camcc CAM_CC_CSIPHY3_CLK>,
+				<&camcc CAM_CC_CSI3PHYTIMER_CLK>,
+				<&camcc CAM_CC_CSI3PHYTIMER_CLK_SRC>,
+				<&gcc GCC_CAMERA_AHB_CLK>,
+				<&gcc GCC_CAMERA_HF_AXI_CLK>,
+				<&camcc CAM_CC_SLOW_AHB_CLK_SRC>,
+				<&camcc CAM_CC_SOC_AHB_CLK>,
+				<&camcc CAM_CC_IFE_0_AXI_CLK>,
+				<&camcc CAM_CC_IFE_0_CLK>,
+				<&camcc CAM_CC_IFE_0_CPHY_RX_CLK>,
+				<&camcc CAM_CC_IFE_0_CLK_SRC>,
+				<&camcc CAM_CC_IFE_1_AXI_CLK>,
+				<&camcc CAM_CC_IFE_1_CLK>,
+				<&camcc CAM_CC_IFE_1_CPHY_RX_CLK>,
+				<&camcc CAM_CC_IFE_1_CLK_SRC>,
+				<&camcc CAM_CC_IFE_LITE_CLK>,
+				<&camcc CAM_CC_IFE_LITE_CPHY_RX_CLK>,
+				<&camcc CAM_CC_IFE_LITE_CLK_SRC>;
+		clock-names = "camnoc_axi",
+				"cpas_ahb",
+				"cphy_rx_src",
+				"csi0",
+				"csi0_src",
+				"csi1",
+				"csi1_src",
+				"csi2",
+				"csi2_src",
+				"csiphy0",
+				"csiphy0_timer",
+				"csiphy0_timer_src",
+				"csiphy1",
+				"csiphy1_timer",
+				"csiphy1_timer_src",
+				"csiphy2",
+				"csiphy2_timer",
+				"csiphy2_timer_src",
+				"csiphy3",
+				"csiphy3_timer",
+				"csiphy3_timer_src",
+				"gcc_camera_ahb",
+				"gcc_camera_axi",
+				"slow_ahb_src",
+				"soc_ahb",
+				"vfe0_axi",
+				"vfe0",
+				"vfe0_cphy_rx",
+				"vfe0_src",
+				"vfe1_axi",
+				"vfe1",
+				"vfe1_cphy_rx",
+				"vfe1_src",
+				"vfe_lite",
+				"vfe_lite_cphy_rx",
+				"vfe_lite_src";
+
+		iommus = <&apps_smmu 0x820 0x0>,
+			<&apps_smmu 0x840 0x0>,
+			<&apps_smmu 0x860 0x0>;
+
+		status = "disabled";
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			port@0 {
+				reg = <0>;
+			};
+
+			port@1 {
+				reg = <1>;
+			};
+
+			port@2 {
+				reg = <2>;
+			};
+
+			port@3 {
+				reg = <3>;
+			};
+		};
+	};
+#endif
+
+	cci0:
+	cci: cci@ac4a000 {
+		compatible = "qcom,sdm845-cci", "qcom,msm8996-cci";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		reg = <0 0x0ac4a000 0 0x1000>;
+		interrupts = <GIC_SPI 468 IRQ_TYPE_EDGE_RISING>;
+		power-domains = <&camcc TITAN_TOP_GDSC>;
+
+		clocks = <&camcc CAM_CC_CAMNOC_AXI_CLK>,
+			<&camcc CAM_CC_SOC_AHB_CLK>,
+			<&camcc CAM_CC_SLOW_AHB_CLK_SRC>,
+			<&camcc CAM_CC_CPAS_AHB_CLK>,
+			<&camcc CAM_CC_CCI_0_CLK>,
+			<&camcc CAM_CC_CCI_0_CLK_SRC>;
+		clock-names = "camnoc_axi",
+			"soc_ahb",
+			"slow_ahb_src",
+			"cpas_ahb",
+			"cci",
+			"cci_src";
+
+		assigned-clocks = <&camcc CAM_CC_CAMNOC_AXI_CLK>,
+			<&camcc CAM_CC_CCI_0_CLK>;
+		assigned-clock-rates = <80000000>, <37500000>;
+
+		pinctrl-names = "default", "sleep";
+		pinctrl-0 = <&cci0_active>;
+		pinctrl-1 = <&cci0_suspend>;
+
+		status = "disabled";
+
+		cci0_i2c0:
+		cci_i2c0: i2c-bus@0 {
+			reg = <0>;
+			clock-frequency = <1000000>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
+		cci0_i2c1:
+		cci_i2c1: i2c-bus@1 {
+			reg = <1>;
+			clock-frequency = <1000000>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+	};
+
+	cci1: cci@ac4b000 {
+		compatible = "qcom,sdm845-cci", "qcom,msm8996-cci";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		reg = <0 0x0ac4b000 0 0x1000>;
+		interrupts = <GIC_SPI 462 IRQ_TYPE_EDGE_RISING>;
+		power-domains = <&camcc TITAN_TOP_GDSC>;
+
+		clocks = <&camcc CAM_CC_CAMNOC_AXI_CLK>,
+			<&camcc CAM_CC_SOC_AHB_CLK>,
+			<&camcc CAM_CC_SLOW_AHB_CLK_SRC>,
+			<&camcc CAM_CC_CPAS_AHB_CLK>,
+			<&camcc CAM_CC_CCI_1_CLK>,
+			<&camcc CAM_CC_CCI_1_CLK_SRC>;
+		clock-names = "camnoc_axi",
+			"soc_ahb",
+			"slow_ahb_src",
+			"cpas_ahb",
+			"cci",
+			"cci_src";
+
+		assigned-clocks = <&camcc CAM_CC_CAMNOC_AXI_CLK>,
+			<&camcc CAM_CC_CCI_1_CLK>;
+		assigned-clock-rates = <80000000>, <37500000>;
+
+		pinctrl-names = "default", "sleep";
+		pinctrl-0 = <&cci2_active>;
+		pinctrl-1 = <&cci2_suspend>;
+
+		status = "disabled";
+
+		cci1_i2c0: i2c-bus@0 {
+			reg = <0>;
+			clock-frequency = <1000000>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
+		cci1_i2c1: i2c-bus@1 {
+			reg = <1>;
+			clock-frequency = <1000000>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+	};
+
+};
+
+&soc {
+	vph_pwr: vph-pwr-regulator {
+		compatible = "regulator-fixed";
+		regulator-name = "vph_pwr";
+		regulator-min-microvolt = <3700000>;
+		regulator-max-microvolt = <3700000>;
+	};
+
+	vreg_s3a_0p8: smpa3-regulator {
+		compatible = "regulator-fixed";
+		regulator-name = "vreg_s3a_0p8";
+
+		regulator-min-microvolt = <800000>;
+		regulator-max-microvolt = <800000>;
+		regulator-always-on;
+		vin-supply = <&vph_pwr>;
+	};
+#if 1
+	wide_ldo_avdd0_regulator: gpio-regulator@99 { //AVDD0 2.9V //AVDD0_2.8V
+                compatible = "regulator-fixed";
+                regulator-name = "wide_ldo_avdd0_regulator";
+                regulator-min-microvolt = <2800000>;
+                regulator-max-microvolt = <2800000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&pm6150l_gpios 4 0>; /* schematic not connected */
+                vin-supply = <&vreg_bob>;
+        };
+
+        wide_ldo_avdd1_regulator: gpio-regulator@0 { //AVDD1 2.9V //AVDD0_2.8V
+                compatible = "regulator-fixed";
+                regulator-name = "wide_ldo_avdd1_regulator";
+                regulator-min-microvolt = <2800000>;
+                regulator-max-microvolt = <2800000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&pm6150l_gpios 9 0>; 
+		/* 
+		* another gpio4 called avdd1_2p8 but schematic not connected 
+		* and the name is swapped to avdd0 accordingly.
+		*/
+                vin-supply = <&vreg_bob>;
+        };
+
+        wide_ldo_avdd2_regulator: gpio-regulator@1 { //AVDD2 1.8V //2M_DVDDIO_1.8V?
+                compatible = "regulator-fixed";
+                regulator-name = "wide_ldo_avdd2_regulator";
+                regulator-min-microvolt = <1800000>;
+                regulator-max-microvolt = <1800000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&pm6150l_gpios 12 0>; //for P0,demo is tlmm 63 //TODO
+                vin-supply = <&vreg_bob>; //TODO
+        };
+
+        wide_ldo_dvdd_regulator: gpio-regulator@2 { //DVDD 1.2V
+                compatible = "regulator-fixed";
+                regulator-name = "wide_ldo_dvdd_regulator";
+                regulator-min-microvolt = <1200000>;
+                regulator-max-microvolt = <1200000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&tlmm 42 0>;
+                vin-supply = <&vreg_s5a_2p0>;//48M pm6150_s5
+        };
+
+        wide_ldo_dvdd2_regulator: gpio-regulator@7 { //DVDD2 1.05V
+                compatible = "regulator-fixed";
+                regulator-name = "wide_ldo_dvdd2_regulator";
+                regulator-min-microvolt = <1050000>;
+                regulator-max-microvolt = <1050000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&tlmm 42 0>;
+                vin-supply = <&vreg_s8c_1p3>;//64M pm6150l_s8 + pm6150_s5a
+        };
+
+        depth_ldo_avdd_regulator: gpio-regulator@3 { //depth AVDD 2.8V
+                compatible = "regulator-fixed";
+                regulator-name = "depth_ldo_avdd_regulator";
+                regulator-min-microvolt = <2800000>;
+                regulator-max-microvolt = <2800000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&tlmm 43 0>;
+                vin-supply = <&vreg_bob>;
+        };
+
+        ultra_ldo_avdd_regulator: gpio-regulator@4 { //ultra AVDD 2.8V
+                compatible = "regulator-fixed";
+                //reg = <0x04 0x00>;
+                regulator-name = "ultra_ldo_avdd_regulator";
+                regulator-min-microvolt = <2800000>;
+                regulator-max-microvolt = <2800000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&pm6150l_gpios 8 0>;//for p0 main band
+                vin-supply = <&vreg_bob>;
+        };
+
+        ultra_ldo_dvdd_regulator: gpio-regulator@5 { //ultra DVDD 2.8V
+                compatible = "regulator-fixed";
+                regulator-name = "ultra_ldo_dvdd_regulator";
+                regulator-min-microvolt = <1200000>;
+                regulator-max-microvolt = <1200000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&tlmm 72 0>;
+                vin-supply = <&vreg_s5a_2p0>;
+        };
+
+        wide_ldo_afvdd_regulator: gpio-regulator@6 { //AFVDD 2.8V
+                compatible = "regulator-fixed";
+                regulator-name = "wide_ldo_afvdd_regulator";
+                regulator-min-microvolt = <2800000>;
+                regulator-max-microvolt = <2800000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&pm6150l_gpios 6 0>;
+                vin-supply = <&vreg_bob>; //TODO
+        };
+
+        front_ldo_dvdd_regulator: gpio-regulator@8 { //dvdd1.1v-20
+                compatible = "regulator-fixed";
+                regulator-name = "front_ldo_dvdd_regulator";
+                regulator-min-microvolt = <1050000>;
+                regulator-max-microvolt = <1050000>;
+                regulator-enable-ramp-delay = <100>;
+                enable-active-high;
+                gpio = <&tlmm 117 0>;
+                vin-supply = <&vreg_s5a_2p0>;
+        };
+#endif
+        clk_titan_gdsc: gpio-regulator@100 { //dummy gdsc
+                compatible = "regulator-fixed";
+                //reg = <0x08 0x00>;
+                regulator-name = "clk_titan_gdsc";
+                regulator-min-microvolt = <1050000>;
+                regulator-max-microvolt = <1050000>;
+                regulator-enable-ramp-delay = <100>;
+        };
+};
+
+&reserved_memory {
+	camera_mem: camera_region@8e400000 {
+		compatible = "removed-dma-pool";
+		no-map;
+		reg = <0x00 0x8e400000 0x00 0x500000>;
+	};
+	
+	/* device tree reserve is not working atm */	
+	linux,cma {
+		compatible = "shared-dma-pool";
+		reusable;
+		size = <0 0x4000000>;
+		alignment = <0 0x4000>;
+		linux,cma-default;
+	};
+};
+
+&camcc {
+        status = "okay";
+};
+
+&camss {
+	vdda-phy-supply = <&vreg_l4a_0p88>;
+	vdda-pll-supply = <&vreg_l3c_1p23>;
+
+	status = "okay";
+
+	ports {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		//confirmed
+		port@0 {
+			csiphy0_ep0: endpoint@0 {
+				data-lanes = <0 1>;
+				remote-endpoint = <&gc8034_ep0>;
+				status = "disabled";
+			};		
+		};
+		
+		port@1 {
+			csiphy1_ep0: endpoint@0 {
+				/* TODO: check! */
+				data-lanes = <0 1 2>;
+				remote-endpoint = <&s5kgw1_ep0>;
+				status = "disabled";
+			};
+		};
+
+		//confirmed
+		port@2 {
+                        csiphy2_ep1: endpoint@1 {
+				link-frequencies = /bits/ 64 <480000000>;
+                                data-lanes = <0 1>;
+                                remote-endpoint = <&s5k5e9_ep0>;
+				status = "okay";
+                        };
+
+                        csiphy2_ep0: endpoint@0 {
+				/* TODO: check with log */
+                                data-lanes = <0 1>;
+                                remote-endpoint = <&gc02m1_ep0>;
+				status = "disabled";
+                        };
+		};
+
+		//confirmed
+		port@3 {
+			csiphy3_ep0: endpoint@0 {
+                                data-lanes = <0 1 2 3>;
+//                                remote-endpoint = <&ov16a1x_ep0>;
+				status = "disabled";
+                        };
+                };
+	};
+};
+
+&cci {
+        status = "okay";
+};
+
+&cci1 {
+        status = "okay";
+};
+
+#if 0
+
+gc8034/8044
+log.07.0x8044.txt:[ 2481.052641] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:2 res_sel:0x4001 Lane type:0 lane_num:2 dt:43 vc:0
+log.07.0x8044.txt:[ 2481.052657] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4001 Lane type:0 lane_num:2 dt:43 vc:0
+log.07.0x8044.txt:[ 2481.052793] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4001 Lane type:0 lane_num:2 dt:43 vc:0
+
+s5k5e9:
+log.09.0x559b.txt:[ 2497.969580] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:2 res_sel:0x4003 Lane type:0 lane_num:2 dt:43 vc:0
+log.09.0x559b.txt:[ 2497.969595] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4003 Lane type:0 lane_num:2 dt:43 vc:0
+log.09.0x559b.txt:[ 2497.969731] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4003 Lane type:0 lane_num:2 dt:43 vc:0
+
+
+s5kgw1:
+//  Lane type:1 is 
+#define CAM_ISP_LANE_TYPE_DPHY                  0
+#define CAM_ISP_LANE_TYPE_CPHY                  1
+log.09.0x971.txt:[ 2519.934996] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:2 res_sel:0x4002 Lane type:1 lane_num:3 dt:43 vc:0
+log.09.0x971.txt:[ 2519.935013] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4002 Lane type:1 lane_num:3 dt:43 vc:0
+log.09.0x971.txt:[ 2519.935034] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:0 res_sel:0x4002 Lane type:1 lane_num:3 dt:43 vc:0
+log.09.0x971.txt:[ 2519.935197] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4002 Lane type:1 lane_num:3 dt:43 vc:0
+log.09.0x971.txt:[ 2519.935858] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4002 Lane type:1 lane_num:3 dt:48 vc:1
+
+ov16a1x:
+log.front.txt:[ 2761.218699] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:2 res_sel:0x4004 Lane type:0 lane_num:4 dt:43 vc:0
+log.front.txt:[ 2761.218715] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4004 Lane type:0 lane_num:4 dt:43 vc:0
+log.front.txt:[ 2761.218852] CAM_DBG: CAM-ISP: cam_ife_csid_cid_reserve: 612: CSID:1 res_sel:0x4004 Lane type:0 lane_num:4 dt:43 vc:0
+
+[   18.731285] CAM_INFO: CAM-SENSOR: cam_sensor_driver_cmd: 742 Probe success,slot:0,slave_addr:0x7a,sensor_id:0x971
+[   19.064560] CAM_INFO: CAM-SENSOR: cam_sensor_driver_cmd: 742 Probe success,slot:1,slave_addr:0x6e,sensor_id:0x2e0
+[   18.954235] CAM_INFO: CAM-SENSOR: cam_sensor_driver_cmd: 742 Probe success,slot:2,slave_addr:0x20,sensor_id:0x1641
+[   19.162159] CAM_INFO: CAM-SENSOR: cam_sensor_driver_cmd: 742 Probe success,slot:3,slave_addr:0x6e,sensor_id:0x8044
+[   19.296172] CAM_INFO: CAM-SENSOR: cam_sensor_driver_cmd: 742 Probe success,slot:4,slave_addr:0x5a,sensor_id:0x559b
+
+ CAM_DBG: CAM-EEPROM: cam_eeprom_read_memory: 51: slave-addr = 0x0
+ CAM_DBG: CAM-EEPROM: cam_eeprom_read_memory: 51: slave-addr = 0x6E
+ CAM_DBG: CAM-EEPROM: cam_eeprom_read_memory: 51: slave-addr = 0xA0
+ CAM_DBG: CAM-EEPROM: cam_eeprom_read_memory: 51: slave-addr = 0xA2
+ CAM_DBG: CAM-EEPROM: cam_eeprom_read_memory: 51: slave-addr = 0xA8
+
+[   47.248726] CAM_DBG: CAM-ACTUATOR: cam_actuator_slaveInfo_pkt_parser: 237: Slave addr: 0x18 Freq Mode: 1
+#endif
+
+/* sensor 4 yyds */
+&cci0_i2c1 {
+        status = "okay";
+
+#if 0
+id:0x5a:0x559b//s5k5e9
+sensor:4 //reset3 //tlmm 24, //MCLK2 (gpio15)
+  cci-master = <1>; // port [0..1]
+  cci-device = <0>; //repersent to i2c_dev
+<&pm6150_l13>;
+<&ultra_ldo_avdd_regulator>;
+<&ultra_ldo_dvdd_regulator>;
+<&titan_top_gdsc>;
+regulator-names = "cam_vio", "cam_vana", "cam_vdig", "cam_clk";
+csiphy-sd-index = <2>;
+[   45.672624] CAM_DBG: CAM-ISP: cam_csid_ppi_init_hw: 212: lane_cfg  0x3210 | num_lanes  0x4 | lane_type 0x0
+[   37.714675] CAM_INFO: CAM-ISP: cam_ife_csid_set_csid_clock: 3248 CSID clock rate 96200000
+#endif
+	
+        s5k5e9_1: camera@2d {
+			compatible = "samsung,s5k5e9";
+			reg = <0x2d>;
+
+			pinctrl-names = "default", "suspend";
+			pinctrl-0 = <&cam_sensor_mclk2_active>;
+			pinctrl-1 = <&cam_sensor_mclk2_suspend>;
+
+			clocks = <&camcc CAM_CC_MCLK2_CLK>;
+			clock-names = "xvclk";
+			clock-frequency = <19200000>;
+			assigned-clocks = <&camcc CAM_CC_MCLK2_CLK>;
+			assigned-clock-rates = <19200000>;
+
+			vdda-supply = <&vreg_l13a_1p8>;
+			vddd-supply = <&ultra_ldo_avdd_regulator>;
+			vdddo-supply = <&ultra_ldo_dvdd_regulator>;
+
+                        enable-gpios = <&tlmm 24 GPIO_ACTIVE_LOW>;
+
+			status = "okay";
+
+	                port@0 {
+		                s5k5e9_ep0: endpoint {
+					link-frequencies = /bits/ 64 <480000000>;
+	                                data-lanes = <0 1>;
+	                                remote-endpoint = <&csiphy2_ep1>;
+					status = "okay";
+		                };
+		        };
+	};
+};
+
+/* sensor 2 */
+&cci1_i2c0 {
+	status = "okay";
+	/* cci 0 sensor 3 */
+
+#if 0
+/* front cam*/
+id:0x20:0x1641//ov16a1q
+sensor:2 //reset2 //tlmm 32 //mclk0 (gpio13)
+  cci-master = <0>;
+  cci-device = <1>;
+<&pm6150_l13>;
+<&ultra_ldo_avdd_regulator>;//AVDD 16M/20M
+<&ultra_ldo_dvdd_regulator>;//DVDD 16M
+<&wide_ldo_dvdd2_regulator>; //DVDD 20M
+<&front_ldo_dvdd_regulator>; //DVDD NEW-BOM 1.1V OV32
+<&titan_top_gdsc>;
+regulator-names = "cam_vio", "cam_vana", "cam_vdig","cam_v_custom1","cam_v_custom2",
+                        "cam_clk";
+<&pm6150l_gpios 4 0>;
+[  209.817067] CAM_DBG: CAM-ISP: cam_csid_ppi_init_hw: 212: lane_cfg  0x3210 | num_lanes  0x4 | lane_type 0x0
+[  154.501391] CAM_INFO: CAM-ISP: cam_ife_csid_set_csid_clock: 3248 CSID clock rate 96200000
+csiphy-sd-index = <3>;
+#endif
+	ov16a1x: camera@10 {
+		compatible = "ovti,ov16a1q", "ovti,ov16a1x", "ovti,ov16a10";
+		reg = <0x10>;
+
+		reset-gpios = <&tlmm 32 GPIO_ACTIVE_HIGH>;
+		enable-gpios = <&tlmm 32 GPIO_ACTIVE_HIGH>;
+
+		pinctrl-names = "default", "suspend";
+		pinctrl-0 = <&cam_sensor_mclk0_active>;
+		pinctrl-1 = <&cam_sensor_mclk0_suspend>;
+
+		clocks = <&camcc CAM_CC_MCLK0_CLK>;
+		clock-names = "xvclk";
+		clock-frequency = <19200000>;
+		assigned-clocks = <&camcc CAM_CC_MCLK0_CLK>;
+		assigned-clock-rates = <19200000>;
+
+		vdda-supply = <&vreg_l13a_1p8>;
+		vddd-supply = <&ultra_ldo_avdd_regulator>;//AVDD 16M/20M
+		vdddo-supply = <&ultra_ldo_dvdd_regulator>;//DVDD 16M
+		vddc-supply = <&wide_ldo_dvdd2_regulator>; //DVDD 20M
+		vddd1-supply = <&front_ldo_dvdd_regulator>; //DVDD NEW-BOM 1.1V OV32
+
+		//status = "okay";
+		status = "disabled";
+
+                port {
+                        ov16a1x_ep0: endpoint {
+                                link-frequencies = /bits/ 64
+					<24000000 480000000>;
+                                data-lanes = <0 1 2 3>;
+                                //remote-endpoint = <&csiphy3_ep0>;
+				status = "okay";
+                        };
+                };
+	};
+};
+
+/* sensor 3 */
+&cci0_i2c1 {
+	status = "okay";
+#if 0
+id:0x6e:0x8044//gc8034 >> i2cdetect as addr 0x51
+sensor:3 //reset0 //tlmm 30  //MCLK4 (gpio23)
+  cci-master = <1>;
+  cci-device = <0>;
+<&pm6150_l13>;
+<&ultra_ldo_avdd_regulator>;
+<&ultra_ldo_dvdd_regulator>;
+<&titan_top_gdsc>;
+regulator-names = "cam_vio", "cam_vana", "cam_vdig", "cam_clk";
+regulator : <&pm6150l_gpios 4 0>
+[   34.152935] CAM_DBG: CAM-ISP: cam_csid_ppi_init_hw: 212: lane_cfg  0x10 | num_lanes  0x2 | lane_type 0x0
+[   48.205835] CAM_INFO: CAM-ISP: cam_ife_csid_set_csid_clock: 3248 CSID clock rate 146400000
+[   48.214952] CAM_DBG: CAM-CPAS: cam_cpas_hw_start: 1057: client=[0][csiphy][0] streamon_clients=7
+csiphy-sd-index = <0>;
+#endif
+	gc8034: camera@28 {
+		compatible = "galaxycore,gc8034";
+		reg = <0x28>;
+
+		reset-gpios = <&tlmm 30 GPIO_ACTIVE_HIGH>;
+		enable-gpios = <&tlmm 30 GPIO_ACTIVE_HIGH>;
+		
+		pinctrl-names = "default", "suspend";
+		pinctrl-0 = <&cam_sensor_mclk4_active>;
+		pinctrl-1 = <&cam_sensor_mclk4_suspend>;
+
+		clocks = <&camcc CAM_CC_MCLK4_CLK >;
+		clock-names = "xvclk";
+		clock-frequency = <19200000>;
+		assigned-clocks = <&camcc CAM_CC_MCLK4_CLK>;
+		assigned-clock-rates = <19200000>;
+
+		vdda-supply = <&vreg_l13a_1p8>;
+		vddd-supply = <&ultra_ldo_avdd_regulator>;
+		vdddo-supply = <&ultra_ldo_dvdd_regulator>;
+		vddc-supply = <&wide_ldo_avdd0_regulator>;
+
+		status = "disabled";
+
+		port {
+				gc8034_ep0: endpoint {
+						link-frequencies = /bits/ 64
+								<360000000 180000000>;
+						data-lanes = <0 1>;
+						remote-endpoint = <&csiphy0_ep0>;
+				};
+		};
+	};
+};
+
+/* sensor 1 */
+&cci1_i2c0 {
+	status = "okay";
+#if 0
+id:0x6e:0x2e0//gc02m1 >> i2cdetect as addr 0x51
+sensor:1 //reset2 //tlmm 29 //mclk3 (gpio16)
+  cci-master = <0>;
+  cci-device = <1>;
+<&wide_ldo_avdd2_regulator>;
+<&depth_ldo_avdd_regulator>;
+<&titan_top_gdsc>;
+"cam_vio", "cam_vana","cam_clk";
+csiphy-sd-index = <2>;
+
+#endif
+	gc02m1: camera@28 {
+		compatible = "samsung,gc02m1";
+		reg = <0x28>;
+
+		reset-gpios = <&tlmm 29 GPIO_ACTIVE_HIGH>;
+		enable-gpios = <&tlmm 29 GPIO_ACTIVE_HIGH>;
+		
+		pinctrl-names = "default", "suspend";
+		pinctrl-0 = <&cam_sensor_mclk3_active>;
+		pinctrl-1 = <&cam_sensor_mclk3_suspend>;
+
+		clocks = <&camcc CAM_CC_MCLK3_CLK >;
+		clock-names = "xvclk";
+		clock-frequency = <19200000>;
+		assigned-clocks = <&camcc CAM_CC_MCLK3_CLK>;
+		assigned-clock-rates = <19200000>;
+
+		//vdda-supply = <&vreg_l13a_1p8>;
+		vddd-supply = <&wide_ldo_avdd2_regulator>;
+		vdda-supply = <&depth_ldo_avdd_regulator>;
+
+		status = "disabled";
+
+		port {
+			gc02m1_ep0: endpoint {
+				link-frequencies = /bits/ 64
+					<480000000 24000000>;
+				/* TODO: seemed 0x210, logged with gw1 sensor log */
+				data-lanes = <0 1>;
+				remote-endpoint = <&csiphy2_ep0>;
+			};
+		};
+	};
+};
+
+/* sensor 0 */
+&cci0_i2c0 {
+	status = "okay";
+#if 0
+id:0x7a:0x971
+sensor:0 //reset1 //tlmm 25 //mclk1 (gpio14)
+cci-master:0
+cci-dev:0
+<&wide_ldo_avdd1_regulator>; //AVDD1 48M/64M
+<&wide_ldo_dvdd_regulator>; //DVDD 48M
+<&pm6150_l13>;//IOVDD
+<&titan_top_gdsc>;
+<&wide_ldo_avdd2_regulator>; //AVDD 1.8V-48M
+<&wide_ldo_dvdd2_regulator>; //DVDD 64M
+regulator-names = "cam_vana", "cam_vdig", "cam_vio",
+                        "cam_clk", "cam_v_custom1", "cam_v_custom2";
+csiphy-sd-index = <1>;
+#endif
+        s5kgw1: camera@3d {
+                compatible = "samsung,s5kgw1";
+                reg = <0x3d>;
+
+                reset-gpios = <&tlmm 25 GPIO_ACTIVE_LOW>;
+                enable-gpios = <&tlmm 25 GPIO_ACTIVE_LOW>;
+
+                pinctrl-names = "default", "suspend";
+                pinctrl-0 = <&cam_sensor_mclk1_active>;
+                pinctrl-1 = <&cam_sensor_mclk1_suspend>;
+
+                clocks = <&camcc CAM_CC_MCLK1_CLK >;
+                clock-names = "xvclk";
+                clock-frequency = <19200000>;
+                assigned-clocks = <&camcc CAM_CC_MCLK1_CLK>;
+                assigned-clock-rates = <19200000>;
+
+		vdda-supply = <&vreg_l13a_1p8>;//IOVDD
+		vddd-supply = <&wide_ldo_avdd1_regulator>; //AVDD1 48M/64M
+		vdddo-supply = <&wide_ldo_dvdd_regulator>; //DVDD 48M
+		vddc-supply = <&wide_ldo_avdd2_regulator>; //AVDD 1.8V-48M
+		vdddo1-supply =<&wide_ldo_dvdd2_regulator>; //DVDD 64M
+
+                status = "disabled";
+
+                port {
+                        s5kgw1_ep0: endpoint {
+				/* TODO: check clk */
+                                link-frequencies = /bits/ 64
+                                        <480000000 24000000>;
+                                /* TODO: seemed 0x210, logged with gw1 sensor log */
+                                data-lanes = <0 1 2>;
+                                remote-endpoint = <&csiphy1_ep0>;
+                        };
+                };
+	};
+};
+
+&qupv3_id_0 {
+	status = "okay";
+};
+
+&qupv3_id_1 {
+	status = "okay";
+};
+
+&tlmm {
+        regulator_gpio42_default: regulator-default-state {
+                pins = "gpio42", "gpio43", "gpio72", "gpio117";
+                function = "gpio";
+		bias-pull-up;
+        };
+
+		cci0_active: cci0-default-state {
+				/* CLK, DATA */
+				function = "cci_i2c";
+				pins = "gpio17", "gpio18", "gpio19", "gpio20";
+				bias-pull-up; /* PULL UP*/
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cci0_suspend: cci0-sleep-state {
+				/* CLK, DATA */
+				function = "cci_i2c";
+				pins = "gpio17", "gpio18", "gpio19", "gpio20";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+		};
+#if 0
+		cci1_active: cci1-default-state {
+				/* CLK, DATA */
+				function = "cci_i2c";
+				pins = "gpio19", "gpio20";
+				bias-pull-up; /* PULL UP*/
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cci1_suspend: cci1-sleep-state {
+				/* CLK, DATA */
+				function = "cci_i2c";
+				pins = "gpio19", "gpio20";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+		};
+#endif
+		cci2_active: cci2-default-state {
+				/* CLK, DATA */
+				function = "cci_i2c";
+				pins = "gpio27", "gpio28";
+				bias-pull-up; /* PULL UP*/
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cci2_suspend: cci2-sleep-state {
+				/* CLK, DATA */
+				function = "cci_i2c";
+				pins = "gpio27", "gpio28";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cam_sensor_mclk0_active: cam_sensor_mclk0_active {
+			/* MCLK0 */
+			mux {
+				pins = "gpio13";
+				function = "cam_mclk";
+			};
+
+			config {
+				pins = "gpio13";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+			};
+		};
+
+		cam_sensor_mclk0_suspend: cam_sensor_mclk0_suspend {
+			/* MCLK0 */
+			mux {
+				pins = "gpio13";
+				function = "cam_mclk";
+			};
+
+			config {
+				pins = "gpio13";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+			};
+		};
+
+		cam_sensor_rear_active: cam_sensor_rear_active {
+			/* RESET */
+			mux {
+				pins = "gpio30";
+				function = "gpio";
+			};
+
+			config {
+				pins = "gpio30";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+			};
+		};
+
+		cam_sensor_rear_suspend: cam_sensor_rear_suspend {
+			/* RESET */
+			mux {
+				pins = "gpio30";
+				function = "gpio";
+			};
+
+			config {
+				pins = "gpio30";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+				output-low;
+			};
+		};
+
+		cam_sensor_front_active: cam_sensor_front_active {
+			/* RESET  */
+			mux {
+				pins = "gpio29";
+				function = "gpio";
+			};
+
+			config {
+				pins = "gpio29";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+			};
+		};
+
+		cam_sensor_front_suspend: cam_sensor_front_suspend {
+			/* RESET */
+			mux {
+				pins = "gpio29";
+				function = "gpio";
+			};
+
+			config {
+				pins = "gpio29";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+				output-low;
+			};
+		};
+
+		cam_sensor_rear2_active: cam_sensor_rear2_active {
+			/* RESET */
+			mux {
+				pins = "gpio25";
+				function = "gpio";
+			};
+
+			config {
+				pins = "gpio25";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+			};
+		};
+
+		cam_sensor_rear2_suspend: cam_sensor_rear2_suspend {
+			/* RESET */
+			mux {
+				pins = "gpio25";
+				function = "gpio";
+			};
+
+			config {
+				pins = "gpio25";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+				output-low;
+			};
+		};
+
+		cam_sensor_tof_active: cam_sensor_tof_active {
+			/* RESET */
+			mux {
+				pins = "gpio24";
+				function = "gpio";
+			};
+
+			config {
+				pins = "gpio24";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+			};
+		};
+
+		cam_sensor_tof_suspend: cam_sensor_tof_suspend {
+			/* RESET */
+			mux {
+				pins = "gpio24";
+				function = "gpio";
+			};
+
+			config {
+				pins = "gpio24";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+				output-low;
+			};
+		};
+
+		cam_sensor_mclk1_active: cam_sensor_mclk1_active {
+			/* MCLK1 */
+				function = "cam_mclk";
+				pins = "gpio14";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cam_sensor_mclk1_suspend: cam_sensor_mclk1_suspend {
+			/* MCLK1 */
+				function = "cam_mclk";
+				pins = "gpio14";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cam_sensor_mclk2_active: cam_sensor_mclk2_active {
+			/* MCLK2 */
+				function = "cam_mclk";
+				pins = "gpio15";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cam_sensor_mclk2_suspend: cam_sensor_mclk2_suspend {
+			/* MCLK2 */
+				function = "cam_mclk";
+				pins = "gpio15";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cam_sensor_mclk3_active: cam_sensor_mclk3_active {
+			/* MCLK3 */
+				function = "cam_mclk";
+				pins = "gpio16";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cam_sensor_mclk3_suspend: cam_sensor_mclk3_suspend {
+			/* MCLK3 */
+				function = "cam_mclk";
+				pins = "gpio16";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+		};
+
+		cam_sensor_mclk4_active: cam_sensor_mclk4_active {
+			/* MCLK4 */
+
+				pins = "gpio23";
+				function = "cam_mclk";
+				bias-disable; /* No PULL */
+				drive-strength = <2>; /* 2 MA */
+
+		};
+
+		cam_sensor_mclk4_suspend: cam_sensor_mclk4_suspend {
+			/* MCLK4 */
+				function = "cam_mclk";
+
+				pins = "gpio23";
+				bias-pull-down; /* PULL DOWN */
+				drive-strength = <2>; /* 2 MA */
+		};
+};
+
+&qupv3_id_0 {
+	status = "okay";
+};
+
+&qupv3_id_1 {
+	status = "okay";
+};
+
+#endif
diff --git a/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-cust.dts b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-cust.dts
new file mode 100644
index 00000000000000..2dc0106baf8c27
--- /dev/null
+++ b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-cust.dts
@@ -0,0 +1,61 @@
+#include "sm7125-xiaomi-joyeuse.dts"
+#include "sm7125-xiaomi-joyeuse-display.dts"
+#include "sm7125-xiaomi-joyeuse-touch.dts"
+#include "sm7125-xiaomi-joyeuse-camera.dts"
+
+&soc {
+        sound: sound { };
+};
+
+#include "sm7125-xiaomi-joyeuse-sound.dts"
+
+/* must add sc7180 into compatible machine or add cpu blocklist with sm7125 */
+/ {
+	compatible = "xiaomi,joyeuse", "qcom,sm7125", "qcom,sc7180";
+};
+
+/* that can protect ufs partition untouch */
+&ufs_mem_hc {
+	status = "disabled";
+};
+
+&ufs_mem_phy {
+	status = "disabled";
+};
+
+&pm6150_qgauge {
+	status = "okay";
+};
+
+&pm6150_rtc {
+	status = "okay";
+};
+
+&qupv3_id_0 {
+	status = "okay";
+};
+
+&qupv3_id_1 {
+	status = "okay";
+};
+
+&soc {
+        battery: battery {
+                compatible = "simple-battery";
+
+                voltage-min-design-microvolt = <3400000>;
+                voltage-max-design-microvolt = <4400000>;
+
+		charge-full-design-microamp-hours = <5160000>;
+        };
+};
+
+&pm6150_qgauge {
+        monitored-battery = <&battery>;
+        status = "okay";
+};
+
+&touchscreen {
+//	status = "disabled";
+};
+
diff --git a/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-display.dts b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-display.dts
new file mode 100644
index 00000000000000..f6e9ab1ca0f2fc
--- /dev/null
+++ b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-display.dts
@@ -0,0 +1,176 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+
+#ifndef SM7125_XIAOMI_JOYEUSE_DISPLAY_DTS
+#define SM7125_XIAOMI_JOYEUSE_DISPLAY_DTS
+
+#include <dt-bindings/pinctrl/qcom,pmic-gpio.h>
+#include "sm7125-xiaomi-joyeuse.dts"
+
+&adreno_smmu {
+        status = "okay";
+};
+
+&apps_smmu {
+        status = "okay";
+};
+
+&dispcc {
+	status = "okay";
+};
+
+&gpu {
+	compatible = "qcom,adreno-618.0", "qcom,adreno";
+	firmware-name = "qcom/sm7125/miatoll/a615_zap.mbn";
+
+	status = "okay";
+
+	zap-shader {
+			memory-region = <&gpu_mem>;
+			firmware-name = "qcom/sm7125/miatoll/a615_zap.mbn";
+	};
+};
+
+&gpu_opp_table {
+	/* those are too high freq */
+	/delete-node/ opp-825000000;
+	/delete-node/ opp-800000000;
+        /delete-node/ opp-650000000;
+
+	/* those are too slow */
+//        /delete-node/ opp-430000000 ;
+        /delete-node/ opp-355000000 ;
+        /delete-node/ opp-267000000 ;
+        /delete-node/ opp-180000000 ;
+};
+
+&gmu {
+	firmware-name = "qcom/a618_gmu.bin";
+	status = "okay";
+};
+
+&mdp {
+	// TODO: check if mdss or mdp hold this memory
+	/* there was a handover problem happened to mdss probe */
+	//memory-region = <&cont_splash_mem>;
+
+	status = "okay";
+};
+
+&mdss {
+	// TODO: check if mdss or mdp hold this memory
+	//memory-region = <&cont_splash_mem>;
+
+	status = "okay";
+};
+
+&mdss_dp {
+        status = "okay";
+};
+
+&mdss_dsi0 {
+	vdda-supply = <&vreg_l3c_1p23>;
+	status = "okay";
+
+        panel0: panel@0 {
+        };
+};
+
+&mdss_dsi0_out {
+	remote-endpoint = <&panel0_in>;
+	data-lanes = <0 1 2 3>;
+
+	status = "okay";
+};
+
+&mdss_dsi0_phy {
+	vdds-supply = <&vreg_l4a_0p88>;
+
+	status = "okay";
+};
+
+&panel0 {
+	compatible = "mdss,nt36675-tianma", "mdss,ft8756-huaxing",
+			"mdss,nt36675-tianma-fhd", "novatek,nt36675-tianma";
+
+	reg = <0>;
+	
+	/* TODO: check vreg l3c/l3a */
+	//vdda-supply = <&vreg_l3c_1p23>; //from downstream, need to double check
+	//vdd3p3-supply = <&vreg_l18a_3p0>;
+	//vddio-supply = <&vreg_l13a_1p8>; //from sm7150-xiaomi-common.dtsi
+	vddio-supply = <&vreg_l18a_3p0>;
+
+#if 0
+	/* 
+		display_sde.dtsi
+			vddio-supply = <&L13A>;
+			vdda-3p3-supply = <&L18A>;
+		---
+		cust-atoll-sde-display.dtsi
+			/delete-property/ vdda-3p3-supply;
+
+		        vddio-supply = <&L18A>;
+	*/
+
+	lab-supply = <&lab>;
+	ibb-supply = <&ibb>;
+#endif
+	backlight = <&pm6150l_wled>;
+
+	pinctrl-names = "default", "te_pin"; //TODO: need to figure out how to handle te_pin
+	pinctrl-0 = <&disp_pins>;
+        pinctrl-1 = <&te_gpio>;
+
+	/* according to panel-nt36675-tianma.c this gpio is finally set to low */
+	reset-gpios = <&pm6150l_gpios 3 GPIO_ACTIVE_LOW>;
+	//disp-te-gpio = <&tlmm 10 GPIO_ACTIVE_LOW>;
+
+	status = "okay";
+
+	ports {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		port@0 {
+			reg = <0>;
+			panel0_in: endpoint {
+				remote-endpoint = <&mdss_dsi0_out>;
+			};
+		};
+	};
+};
+
+&venus {
+	compatible = "qcom,sm7125-venus", "qcom,sc7180-venus";
+	memory-region = <&venus_mem>;
+	firmware-name = "qcom/sm7125/miatoll/venus.mbn";
+
+	status = "okay";
+};
+
+/* PINCTRL - additions to nodes defined in sc7180.dtsi */
+&pm6150l_gpios {
+	disp_pins: disp-state {
+		pins = "gpio3";
+		function = PMIC_GPIO_FUNC_FUNC1;
+		qcom,drive-strength = <PMIC_GPIO_STRENGTH_MED>;
+		power-source = <0>;
+		bias-disable;
+		output-low;
+	};
+
+};
+
+&pm6150l_wled {
+	status = "okay";
+};
+
+&tlmm {
+        te_gpio: te-default {
+                pins = "gpio10";
+                function = "mdp_vsync";
+                drive-strength = <2>;   /* 2 mA */
+                bias-pull-down;         /* PULL DOWN */
+        };
+};
+
+#endif
diff --git a/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-sound.dts b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-sound.dts
new file mode 100644
index 00000000000000..1f9f02eea76a4f
--- /dev/null
+++ b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-sound.dts
@@ -0,0 +1,174 @@
+#ifndef SM7125_XIAOMI_JOYEUSE_SOUND_DTS
+#define SM7125_XIAOMI_JOYEUSE_SOUND_DTS
+
+#include "dt-bindings/sound/qcom,q6asm.h"
+
+#include "sm7125-xiaomi-joyeuse.dts"
+
+/ {
+	reserved-memory {
+                adsp_mem: memory@91100000 {
+                        reg = <0x0 0x91100000 0x0 0x2800000>;
+                        no-map;
+                };		
+	};
+};
+
+&q6afedai {
+        qi2s@20 {
+                reg = <TERTIARY_MI2S_RX>;
+                qcom,sd-lines = <0>;
+        };
+};
+
+&q6asmdai {
+	status = "okay";
+
+        dai@0 {
+                reg = <0>;
+        };
+
+        dai@1 {
+                reg = <1>;
+        };
+
+        dai@2 {
+                reg = <2>;
+        };
+
+        dai@3 {
+                reg = <3>;
+        };
+};
+
+#if 1
+/* use cpu or adsp */
+
+&remoteproc_adsp {
+	memory-region = <&adsp_mem>;
+        firmware-name = "qcom/sm7125/miatoll/adsp.mbn";
+	status = "okay";
+};
+
+&sound {
+        compatible = "qcom,sm8250-sndcard";
+        pinctrl-0 = <&ter_mi2s_active>;
+        pinctrl-names = "default";
+        model = "POCO X3";
+
+        mm1-dai-link {
+                link-name = "MultiMedia1";
+                cpu {
+                        sound-dai = <&q6asmdai MSM_FRONTEND_DAI_MULTIMEDIA1>;
+                };
+        };
+
+        i2s-dai-link {
+                link-name = "I2S Playback";
+                cpu {
+                        sound-dai = <&q6afedai TERTIARY_MI2S_RX>;
+                };
+
+                platform {
+                        sound-dai = <&q6routing>;
+                };
+
+                codec {
+                        sound-dai = <&tas2562_9>;//, <&tas2562_4>;
+                };
+        };
+};
+
+#else
+
+&soc {
+    codec_dummy: codec_dummy {
+        compatible = "linux,snd-soc-dummy";
+        #sound-dai-cells = <0>;
+        status = "okay";
+    };
+
+    sound {
+        compatible = "simple-audio-card";
+        simple-audio-card,name = "DUMMY_SND";
+
+        simple-audio-card,format = "dsp_a";
+        simple-audio-card,bitclock-master = <&snd_cpu>;
+        simple-audio-card,frame-master = <&snd_cpu>;
+        simple-audio-card,mclk-fs = <512>;
+        status = "okay";
+
+        snd_cpu: simple-audio-card,cpu {
+            sound-dai = <&q6afedai TERTIARY_MI2S_RX>;
+            dai-tdm-slot-num = <2>;
+            dai-tdm-slot-width = <16>;
+        };
+
+        snd_codec: simple-audio-card,codec {
+		// sound-dai = <&codec_dummy>;
+            sound-dai = <&tas2562_9 0>, <&tas2562_4 0>;
+        };
+    };
+};
+
+#endif
+
+&i2c4 {
+        clock-frequency = <100000>;
+        status = "okay";
+
+        tas2562_4: codec@4c { /* SPK */
+		compatible = "ti,tas2562";
+		reg = <0x4c>;
+		#sound-dai-cells = <0>;
+		interrupt-parent = <&tlmm>;
+		interrupts = <33 IRQ_TYPE_NONE>;
+		shutdown-gpios = <&tlmm 51 GPIO_ACTIVE_HIGH>;
+		ti,imon-slot-no = <0>;
+		ti,vmon-slot-no = <2>;
+		sound-name-prefix = "Left";
+		status = "disabled";
+        };
+};
+
+&i2c9 {
+	clock-frequency = <100000>;
+	status = "okay";
+
+	tas2562_9: codec@4c { /* SPK */
+		compatible = "ti,tas2562";
+		reg = <0x4c>;
+		#sound-dai-cells = <0>;
+		interrupt-parent = <&tlmm>;
+		interrupts = <33 IRQ_TYPE_NONE>;
+		shutdown-gpios = <&tlmm 51 GPIO_ACTIVE_HIGH>;
+		ti,imon-slot-no = <0>;
+		ti,vmon-slot-no = <2>;
+		sound-name-prefix = "Right";
+	};
+
+};
+
+&i2c4 {
+        dmas = <&gpi_dma0 0 4 QCOM_GPI_I2C>,
+                <&gpi_dma0 1 4 QCOM_GPI_I2C>;
+        dma-names = "tx", "rx";
+        status = "okay";
+};
+
+&i2c9 {
+        dmas = <&gpi_dma1 0 3 QCOM_GPI_I2C>,
+                <&gpi_dma1 1 3 QCOM_GPI_I2C>;
+        dma-names = "tx", "rx";
+        status = "okay";
+};
+
+&qupv3_id_0 {
+        status = "okay";
+};
+
+&qupv3_id_1 {
+        status = "okay";
+};
+
+#endif
diff --git a/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-touch.dts b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-touch.dts
new file mode 100644
index 00000000000000..1d02bbedd386a6
--- /dev/null
+++ b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse-touch.dts
@@ -0,0 +1,193 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+
+#ifndef SM7125_XIAOMI_JOYEUSE_TOUCH_DTS
+#define SM7125_XIAOMI_JOYEUSE_TOUCH_DTS
+
+#include <dt-bindings/dma/qcom-gpi.h>
+#include <dt-bindings/gpio/gpio.h>
+
+#include "sm7125-xiaomi-joyeuse-display.dts"
+
+&soc {
+	gpi_dma0: dma-controller@800000  {
+		compatible = "qcom,sm7125-gpi-dma", "qcom,sm6350-gpi-dma";
+		reg = <0 0x00800000 0 0x60000>;
+		interrupts = <GIC_SPI 244 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 245 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 246 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 247 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 248 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 249 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 250 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 251 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 252 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 253 IRQ_TYPE_LEVEL_HIGH>;
+		dma-channels = <10>;
+		dma-channel-mask = <0x1f>;
+		iommus = <&apps_smmu 0x56 0x0>;
+		#dma-cells = <3>;
+		
+		status = "disabled";
+	};
+
+	gpi_dma1: dma-controller@a00000 {
+		compatible = "qcom,sm7125-gpi-dma", "qcom,sm6350-gpi-dma";
+		reg = <0 0x00a00000 0 0x60000>;
+		interrupts = <GIC_SPI 645 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 646 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 647 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 648 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 649 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 650 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 651 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 652 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 653 IRQ_TYPE_LEVEL_HIGH>,
+					<GIC_SPI 654 IRQ_TYPE_LEVEL_HIGH>;
+		dma-channels = <10>;
+		dma-channel-mask = <0x3f>;
+		iommus = <&apps_smmu 0x4d6 0x0>;
+		#dma-cells = <3>;
+		
+		status = "disabled";
+	};
+};
+
+//spi@880000
+&spi0 {
+	dmas = <&gpi_dma0 0 0 QCOM_GPI_SPI>,
+		<&gpi_dma0 1 0 QCOM_GPI_SPI>;
+	dma-names = "tx", "rx";
+};
+
+//spi@884000
+&spi1 {
+	dmas = <&gpi_dma0 0 1 QCOM_GPI_SPI>,
+		<&gpi_dma0 1 1 QCOM_GPI_SPI>;
+	dma-names = "tx", "rx";
+};
+//spi@88c000
+&spi3 {
+	dmas = <&gpi_dma0 0 3 QCOM_GPI_SPI>,
+		<&gpi_dma0 1 3 QCOM_GPI_SPI>;
+	dma-names = "tx", "rx";
+};
+
+//spi@88c000
+&spi3 {
+	dmas = <&gpi_dma0 0 3 QCOM_GPI_SPI>,
+		<&gpi_dma0 1 3 QCOM_GPI_SPI>;
+	dma-names = "tx", "rx";
+};
+
+//spi@894000
+&spi5 {
+        dmas = <&gpi_dma0 0 5 QCOM_GPI_SPI>,
+                <&gpi_dma0 1 5 QCOM_GPI_SPI>;
+        dma-names = "tx", "rx";
+};
+
+//spi@a80000
+&spi6 {
+	dmas = <&gpi_dma1 0 0 QCOM_GPI_SPI>,
+		<&gpi_dma1 1 0 QCOM_GPI_SPI>;
+	dma-names = "tx", "rx";
+};
+
+//spi@a88000
+&spi8 {
+	dmas = <&gpi_dma1 0 2 QCOM_GPI_SPI>,
+		<&gpi_dma1 1 2 QCOM_GPI_SPI>;
+	dma-names = "tx", "rx";
+};
+
+//spi@a90000
+&spi10 {
+	dma-names = "tx", "rx";
+        dmas = <&gpi_dma1 0 4 QCOM_GPI_SPI>,
+                <&gpi_dma1 1 4 QCOM_GPI_SPI>;
+};
+
+//spi@a94000
+&spi11 {
+	dma-names = "tx", "rx";
+	dmas = <&gpi_dma1 0 5 QCOM_GPI_SPI>,
+		<&gpi_dma1 1 5 QCOM_GPI_SPI>;
+};
+
+&spi11 {
+        status = "okay";
+
+        touchscreen: touchscreen@0 {
+                compatible = "novatek,nt36675-spi",
+				"novatek,nt36xxx-spi",
+				"focaltech,fts",
+				"novatek,NVT-ts-spi";
+			
+                reg = <0>;
+
+                /* caught from joyeuse dtb*/
+                spi-max-frequency = <4000000>;
+
+                /* ts->irq report 194 */
+                /* interrupts = <&tlmm 194 IRQ_TYPE_EDGE_FALLING>; */
+                /* interrupt= <&tlmm 13 2>; */ //dtb specified, but GPIO13 is CAM_MCLK0
+
+                novatek,reset-gpio = <&tlmm 8 0x00>;
+                novatek,irq-gpio = <&tlmm 9 0x2001>;
+
+                /* 672C */
+                novatek,swrst-n8-addr = <0x03F0FE>;
+                novatek,spi-rd-fast-addr = <0x03F310>;
+
+                reset-gpio = <&tlmm 8 0x00>;
+                /* dtb show <&tlmm 13 2>*/
+                irq-gpio = <&tlmm 9 0x2001>;
+
+/*
+                touch_ibb-supply = <0x241>; //lcdb_ncp
+                touch_lab-supply = <0x240>; //qcom,qpnp-lcdb-regulator ldo
+                touch_vddio-supply = <0x33c>; //pm6150_l18
+*/
+
+                /* Focaltech GPIO configuration */
+                focaltech,reset-gpio = <&tlmm 8 0x01>;
+                focaltech,irq-gpio = <&tlmm 9 0x02>;
+
+                focaltech,max-touch-number = <10>;
+                focaltech,display-coords = <0 0 1080 2400>;
+
+
+                vio-supply = <&vreg_l18a_3p0>;
+                vdd-supply = <&vreg_l18a_3p0>;
+
+                panel = <&panel0>;
+                firmware-name = "novatek_ts_tianma_fw.bin";
+                status = "okay";
+        };
+};
+
+
+&qup_spi11_spi {
+        drive-strength = <2>;
+        //bias-disable;
+};
+
+&qup_spi11_cs {
+        drive-strength = <2>;
+        //bias-disable;
+};
+
+&qup_spi11_cs_gpio {
+        drive-strength = <2>;
+        bias-disable;
+};
+
+&gpi_dma0 {
+	status = "okay";
+};
+
+&gpi_dma1 {
+        status = "okay";
+};
+
+#endif
diff --git a/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse.dts b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse.dts
index e010d195750936..808779218e46c6 100644
--- a/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse.dts
+++ b/arch/arm64/boot/dts/qcom/sm7125-xiaomi-joyeuse.dts
@@ -3,6 +3,9 @@
  * Copyright (c) 2021, The Linux Foundation. All rights reserved.
  */
 
+#ifndef SM7125_XIAOMI_JOYEUSE_DTS
+#define SM7125_XIAOMI_JOYEUSE_DTS
+
 /dts-v1/;
 
 #include "sm7125-xiaomi-common.dtsi"
@@ -14,3 +17,5 @@
 	/* required for bootloader to select correct board */
 	qcom,board-id = <0x50022 1>;
 };
+
+#endif
diff --git a/arch/arm64/boot/dts/qcom/sm7125.dtsi b/arch/arm64/boot/dts/qcom/sm7125.dtsi
index 12dd72859a433b..08493c10faeca2 100644
--- a/arch/arm64/boot/dts/qcom/sm7125.dtsi
+++ b/arch/arm64/boot/dts/qcom/sm7125.dtsi
@@ -14,3 +14,42 @@
 &CPU5 { compatible = "qcom,kryo465"; };
 &CPU6 { compatible = "qcom,kryo465"; };
 &CPU7 { compatible = "qcom,kryo465"; };
+
+
+/*
+ * SM7125 soc have slightly slower max freq,
+ * in order to exclude higher freq, introduce
+ * a higher fuse-hw bit 8.
+*/
+&gpu_opp_table {
+	opp-750000000 {
+		opp-hz = /bits/ 64 <750000000>;
+		opp-level = <RPMH_REGULATOR_LEVEL_NOM_L1>;
+		opp-peak-kBps = <7216000>;
+		opp-supported-hw = <0x08>;
+	};
+
+	opp-650000000 {
+		opp-supported-hw = <0x0f>;
+	};
+
+	opp-565000000 {
+		opp-supported-hw = <0x0f>;
+	};
+
+	opp-430000000 {
+		opp-supported-hw = <0x0f>;
+	};
+
+	opp-355000000 {
+		opp-supported-hw = <0x0f>;
+	};
+
+	opp-267000000 {
+		opp-supported-hw = <0x0f>;
+	};
+
+	opp-180000000 {
+		opp-supported-hw = <0x0f>;
+	};
+};
diff --git a/arch/arm64/configs/sm71xx-xiaomi.config b/arch/arm64/configs/sm71xx-xiaomi.config
new file mode 100644
index 00000000000000..0e5cdc011bf563
--- /dev/null
+++ b/arch/arm64/configs/sm71xx-xiaomi.config
@@ -0,0 +1,8010 @@
+#
+# Automatically generated file; DO NOT EDIT.
+# Linux/arm64 6.9.0-rc5 Kernel Configuration
+#
+CONFIG_CC_VERSION_TEXT="aarch64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
+CONFIG_CC_IS_GCC=y
+CONFIG_GCC_VERSION=110400
+CONFIG_CLANG_VERSION=0
+CONFIG_AS_IS_GNU=y
+CONFIG_AS_VERSION=23800
+CONFIG_LD_IS_BFD=y
+CONFIG_LD_VERSION=23800
+CONFIG_LLD_VERSION=0
+CONFIG_CC_CAN_LINK=y
+CONFIG_CC_CAN_LINK_STATIC=y
+CONFIG_CC_HAS_ASM_GOTO_OUTPUT=y
+CONFIG_CC_HAS_ASM_GOTO_TIED_OUTPUT=y
+CONFIG_GCC_ASM_GOTO_OUTPUT_WORKAROUND=y
+CONFIG_CC_HAS_ASM_INLINE=y
+CONFIG_CC_HAS_NO_PROFILE_FN_ATTR=y
+CONFIG_PAHOLE_VERSION=0
+CONFIG_CONSTRUCTORS=y
+CONFIG_IRQ_WORK=y
+CONFIG_BUILDTIME_TABLE_SORT=y
+CONFIG_THREAD_INFO_IN_TASK=y
+
+#
+# General setup
+#
+CONFIG_INIT_ENV_ARG_LIMIT=32
+# CONFIG_COMPILE_TEST is not set
+# CONFIG_WERROR is not set
+CONFIG_LOCALVERSION=""
+CONFIG_LOCALVERSION_AUTO=y
+CONFIG_BUILD_SALT=""
+CONFIG_DEFAULT_INIT=""
+CONFIG_DEFAULT_HOSTNAME="(none)"
+CONFIG_SYSVIPC=y
+CONFIG_SYSVIPC_SYSCTL=y
+CONFIG_SYSVIPC_COMPAT=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_POSIX_MQUEUE_SYSCTL=y
+CONFIG_WATCH_QUEUE=y
+CONFIG_CROSS_MEMORY_ATTACH=y
+# CONFIG_USELIB is not set
+CONFIG_AUDIT=y
+CONFIG_HAVE_ARCH_AUDITSYSCALL=y
+CONFIG_AUDITSYSCALL=y
+
+#
+# IRQ subsystem
+#
+CONFIG_GENERIC_IRQ_PROBE=y
+CONFIG_GENERIC_IRQ_SHOW=y
+CONFIG_GENERIC_IRQ_SHOW_LEVEL=y
+CONFIG_GENERIC_IRQ_EFFECTIVE_AFF_MASK=y
+CONFIG_GENERIC_IRQ_MIGRATION=y
+CONFIG_HARDIRQS_SW_RESEND=y
+CONFIG_IRQ_DOMAIN=y
+CONFIG_IRQ_DOMAIN_HIERARCHY=y
+CONFIG_IRQ_FASTEOI_HIERARCHY_HANDLERS=y
+CONFIG_GENERIC_IRQ_IPI=y
+CONFIG_GENERIC_MSI_IRQ=y
+CONFIG_IRQ_MSI_IOMMU=y
+CONFIG_IRQ_FORCED_THREADING=y
+CONFIG_SPARSE_IRQ=y
+# CONFIG_GENERIC_IRQ_DEBUGFS is not set
+# end of IRQ subsystem
+
+CONFIG_GENERIC_TIME_VSYSCALL=y
+CONFIG_GENERIC_CLOCKEVENTS=y
+CONFIG_ARCH_HAS_TICK_BROADCAST=y
+CONFIG_GENERIC_CLOCKEVENTS_BROADCAST=y
+CONFIG_HAVE_POSIX_CPU_TIMERS_TASK_WORK=y
+CONFIG_POSIX_CPU_TIMERS_TASK_WORK=y
+CONFIG_CONTEXT_TRACKING=y
+CONFIG_CONTEXT_TRACKING_IDLE=y
+
+#
+# Timers subsystem
+#
+CONFIG_TICK_ONESHOT=y
+CONFIG_NO_HZ_COMMON=y
+# CONFIG_HZ_PERIODIC is not set
+CONFIG_NO_HZ_IDLE=y
+# CONFIG_NO_HZ_FULL is not set
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+# end of Timers subsystem
+
+CONFIG_BPF=y
+CONFIG_HAVE_EBPF_JIT=y
+CONFIG_ARCH_WANT_DEFAULT_BPF_JIT=y
+
+#
+# BPF subsystem
+#
+CONFIG_BPF_SYSCALL=y
+CONFIG_BPF_JIT=y
+CONFIG_BPF_JIT_ALWAYS_ON=y
+CONFIG_BPF_JIT_DEFAULT_ON=y
+# CONFIG_BPF_UNPRIV_DEFAULT_OFF is not set
+# CONFIG_BPF_PRELOAD is not set
+# CONFIG_BPF_LSM is not set
+# end of BPF subsystem
+
+CONFIG_PREEMPT_BUILD=y
+# CONFIG_PREEMPT_NONE is not set
+# CONFIG_PREEMPT_VOLUNTARY is not set
+CONFIG_PREEMPT=y
+CONFIG_PREEMPT_COUNT=y
+CONFIG_PREEMPTION=y
+# CONFIG_PREEMPT_DYNAMIC is not set
+CONFIG_SCHED_CORE=y
+
+#
+# CPU/Task time and stats accounting
+#
+CONFIG_TICK_CPU_ACCOUNTING=y
+# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set
+CONFIG_IRQ_TIME_ACCOUNTING=y
+CONFIG_HAVE_SCHED_AVG_IRQ=y
+CONFIG_SCHED_THERMAL_PRESSURE=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+CONFIG_PSI=y
+# CONFIG_PSI_DEFAULT_DISABLED is not set
+# end of CPU/Task time and stats accounting
+
+CONFIG_CPU_ISOLATION=y
+
+#
+# RCU Subsystem
+#
+CONFIG_TREE_RCU=y
+CONFIG_PREEMPT_RCU=y
+# CONFIG_RCU_EXPERT is not set
+CONFIG_TREE_SRCU=y
+CONFIG_TASKS_RCU_GENERIC=y
+CONFIG_TASKS_RCU=y
+CONFIG_TASKS_TRACE_RCU=y
+CONFIG_RCU_STALL_COMMON=y
+CONFIG_RCU_NEED_SEGCBLIST=y
+# end of RCU Subsystem
+
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+# CONFIG_IKHEADERS is not set
+CONFIG_LOG_BUF_SHIFT=17
+CONFIG_LOG_CPU_MAX_BUF_SHIFT=12
+# CONFIG_PRINTK_INDEX is not set
+CONFIG_GENERIC_SCHED_CLOCK=y
+
+#
+# Scheduler features
+#
+CONFIG_UCLAMP_TASK=y
+CONFIG_UCLAMP_BUCKETS_COUNT=5
+# end of Scheduler features
+
+CONFIG_ARCH_SUPPORTS_NUMA_BALANCING=y
+CONFIG_ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH=y
+CONFIG_CC_HAS_INT128=y
+CONFIG_CC_IMPLICIT_FALLTHROUGH="-Wimplicit-fallthrough=5"
+CONFIG_GCC10_NO_ARRAY_BOUNDS=y
+CONFIG_CC_NO_ARRAY_BOUNDS=y
+CONFIG_GCC_NO_STRINGOP_OVERFLOW=y
+CONFIG_CC_NO_STRINGOP_OVERFLOW=y
+CONFIG_ARCH_SUPPORTS_INT128=y
+CONFIG_CGROUPS=y
+CONFIG_PAGE_COUNTER=y
+# CONFIG_CGROUP_FAVOR_DYNMODS is not set
+CONFIG_MEMCG=y
+CONFIG_MEMCG_KMEM=y
+CONFIG_BLK_CGROUP=y
+CONFIG_CGROUP_WRITEBACK=y
+CONFIG_CGROUP_SCHED=y
+CONFIG_FAIR_GROUP_SCHED=y
+CONFIG_CFS_BANDWIDTH=y
+CONFIG_RT_GROUP_SCHED=y
+CONFIG_SCHED_MM_CID=y
+CONFIG_UCLAMP_TASK_GROUP=y
+CONFIG_CGROUP_PIDS=y
+CONFIG_CGROUP_RDMA=y
+CONFIG_CGROUP_FREEZER=y
+CONFIG_CGROUP_HUGETLB=y
+CONFIG_CPUSETS=y
+CONFIG_PROC_PID_CPUSET=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_PERF=y
+CONFIG_CGROUP_BPF=y
+CONFIG_CGROUP_MISC=y
+CONFIG_CGROUP_DEBUG=y
+CONFIG_SOCK_CGROUP_DATA=y
+CONFIG_NAMESPACES=y
+CONFIG_UTS_NS=y
+CONFIG_TIME_NS=y
+CONFIG_IPC_NS=y
+CONFIG_USER_NS=y
+CONFIG_PID_NS=y
+CONFIG_NET_NS=y
+CONFIG_CHECKPOINT_RESTORE=y
+CONFIG_SCHED_AUTOGROUP=y
+CONFIG_RELAY=y
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_INITRAMFS_SOURCE=""
+CONFIG_RD_GZIP=y
+CONFIG_RD_BZIP2=y
+CONFIG_RD_LZMA=y
+CONFIG_RD_XZ=y
+CONFIG_RD_LZO=y
+CONFIG_RD_LZ4=y
+CONFIG_RD_ZSTD=y
+CONFIG_BOOT_CONFIG=y
+CONFIG_BOOT_CONFIG_FORCE=y
+# CONFIG_BOOT_CONFIG_EMBED is not set
+CONFIG_INITRAMFS_PRESERVE_MTIME=y
+CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
+# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set
+CONFIG_LD_ORPHAN_WARN=y
+CONFIG_LD_ORPHAN_WARN_LEVEL="warn"
+CONFIG_SYSCTL=y
+CONFIG_HAVE_UID16=y
+CONFIG_SYSCTL_EXCEPTION_TRACE=y
+CONFIG_EXPERT=y
+CONFIG_UID16=y
+CONFIG_MULTIUSER=y
+# CONFIG_SGETMASK_SYSCALL is not set
+CONFIG_SYSFS_SYSCALL=y
+# CONFIG_FHANDLE is not set
+CONFIG_POSIX_TIMERS=y
+CONFIG_PRINTK=y
+CONFIG_BUG=y
+CONFIG_ELF_CORE=y
+CONFIG_BASE_FULL=y
+CONFIG_FUTEX=y
+CONFIG_FUTEX_PI=y
+CONFIG_EPOLL=y
+CONFIG_SIGNALFD=y
+CONFIG_TIMERFD=y
+CONFIG_EVENTFD=y
+CONFIG_SHMEM=y
+CONFIG_AIO=y
+CONFIG_IO_URING=y
+CONFIG_ADVISE_SYSCALLS=y
+CONFIG_MEMBARRIER=y
+CONFIG_KCMP=y
+CONFIG_RSEQ=y
+# CONFIG_DEBUG_RSEQ is not set
+CONFIG_CACHESTAT_SYSCALL=y
+# CONFIG_PC104 is not set
+CONFIG_KALLSYMS=y
+# CONFIG_KALLSYMS_SELFTEST is not set
+CONFIG_KALLSYMS_ALL=y
+CONFIG_KALLSYMS_BASE_RELATIVE=y
+CONFIG_ARCH_HAS_MEMBARRIER_SYNC_CORE=y
+CONFIG_HAVE_PERF_EVENTS=y
+
+#
+# Kernel Performance Events And Counters
+#
+CONFIG_PERF_EVENTS=y
+# CONFIG_DEBUG_PERF_USE_VMALLOC is not set
+# end of Kernel Performance Events And Counters
+
+CONFIG_SYSTEM_DATA_VERIFICATION=y
+CONFIG_PROFILING=y
+CONFIG_TRACEPOINTS=y
+
+#
+# Kexec and crash features
+#
+CONFIG_CRASH_RESERVE=y
+CONFIG_VMCORE_INFO=y
+CONFIG_KEXEC_CORE=y
+CONFIG_KEXEC=y
+CONFIG_KEXEC_FILE=y
+# CONFIG_KEXEC_SIG is not set
+CONFIG_CRASH_DUMP=y
+# end of Kexec and crash features
+# end of General setup
+
+CONFIG_ARM64=y
+CONFIG_GCC_SUPPORTS_DYNAMIC_FTRACE_WITH_ARGS=y
+CONFIG_64BIT=y
+CONFIG_MMU=y
+CONFIG_ARM64_CONT_PTE_SHIFT=4
+CONFIG_ARM64_CONT_PMD_SHIFT=4
+CONFIG_ARCH_MMAP_RND_BITS_MIN=18
+CONFIG_ARCH_MMAP_RND_BITS_MAX=33
+CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MIN=11
+CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MAX=16
+CONFIG_STACKTRACE_SUPPORT=y
+CONFIG_ILLEGAL_POINTER_VALUE=0xdead000000000000
+CONFIG_LOCKDEP_SUPPORT=y
+CONFIG_GENERIC_BUG=y
+CONFIG_GENERIC_BUG_RELATIVE_POINTERS=y
+CONFIG_GENERIC_HWEIGHT=y
+CONFIG_GENERIC_CSUM=y
+CONFIG_GENERIC_CALIBRATE_DELAY=y
+CONFIG_SMP=y
+CONFIG_KERNEL_MODE_NEON=y
+CONFIG_FIX_EARLYCON_MEM=y
+CONFIG_PGTABLE_LEVELS=4
+CONFIG_ARCH_SUPPORTS_UPROBES=y
+CONFIG_ARCH_PROC_KCORE_TEXT=y
+CONFIG_BUILTIN_RETURN_ADDRESS_STRIPS_PAC=y
+
+#
+# Platform selection
+#
+# CONFIG_ARCH_ACTIONS is not set
+# CONFIG_ARCH_SUNXI is not set
+# CONFIG_ARCH_ALPINE is not set
+# CONFIG_ARCH_APPLE is not set
+# CONFIG_ARCH_BCM is not set
+# CONFIG_ARCH_BERLIN is not set
+# CONFIG_ARCH_BITMAIN is not set
+# CONFIG_ARCH_EXYNOS is not set
+# CONFIG_ARCH_SPARX5 is not set
+# CONFIG_ARCH_K3 is not set
+# CONFIG_ARCH_LG1K is not set
+# CONFIG_ARCH_HISI is not set
+# CONFIG_ARCH_KEEMBAY is not set
+# CONFIG_ARCH_MEDIATEK is not set
+# CONFIG_ARCH_MESON is not set
+# CONFIG_ARCH_MVEBU is not set
+# CONFIG_ARCH_NXP is not set
+# CONFIG_ARCH_MA35 is not set
+# CONFIG_ARCH_NPCM is not set
+# CONFIG_ARCH_PENSANDO is not set
+CONFIG_ARCH_QCOM=y
+# CONFIG_ARCH_REALTEK is not set
+# CONFIG_ARCH_RENESAS is not set
+# CONFIG_ARCH_ROCKCHIP is not set
+# CONFIG_ARCH_SEATTLE is not set
+# CONFIG_ARCH_INTEL_SOCFPGA is not set
+# CONFIG_ARCH_STM32 is not set
+# CONFIG_ARCH_SYNQUACER is not set
+# CONFIG_ARCH_TEGRA is not set
+# CONFIG_ARCH_SPRD is not set
+# CONFIG_ARCH_THUNDER is not set
+# CONFIG_ARCH_THUNDER2 is not set
+# CONFIG_ARCH_UNIPHIER is not set
+# CONFIG_ARCH_VEXPRESS is not set
+# CONFIG_ARCH_VISCONTI is not set
+# CONFIG_ARCH_XGENE is not set
+# CONFIG_ARCH_ZYNQMP is not set
+# end of Platform selection
+
+#
+# Kernel Features
+#
+
+#
+# ARM errata workarounds via the alternatives framework
+#
+CONFIG_AMPERE_ERRATUM_AC03_CPU_38=y
+CONFIG_ARM64_WORKAROUND_CLEAN_CACHE=y
+CONFIG_ARM64_ERRATUM_826319=y
+CONFIG_ARM64_ERRATUM_827319=y
+CONFIG_ARM64_ERRATUM_824069=y
+CONFIG_ARM64_ERRATUM_819472=y
+CONFIG_ARM64_ERRATUM_832075=y
+CONFIG_ARM64_ERRATUM_1742098=y
+CONFIG_ARM64_ERRATUM_845719=y
+CONFIG_ARM64_ERRATUM_843419=y
+CONFIG_ARM64_LD_HAS_FIX_ERRATUM_843419=y
+CONFIG_ARM64_ERRATUM_1024718=y
+CONFIG_ARM64_ERRATUM_1418040=y
+CONFIG_ARM64_WORKAROUND_SPECULATIVE_AT=y
+CONFIG_ARM64_ERRATUM_1165522=y
+CONFIG_ARM64_ERRATUM_1319367=y
+CONFIG_ARM64_ERRATUM_1530923=y
+CONFIG_ARM64_WORKAROUND_REPEAT_TLBI=y
+CONFIG_ARM64_ERRATUM_2441007=y
+CONFIG_ARM64_ERRATUM_1286807=y
+CONFIG_ARM64_ERRATUM_1463225=y
+CONFIG_ARM64_ERRATUM_1542419=y
+CONFIG_ARM64_ERRATUM_1508412=y
+CONFIG_ARM64_ERRATUM_2051678=y
+CONFIG_ARM64_ERRATUM_2077057=y
+CONFIG_ARM64_ERRATUM_2658417=y
+CONFIG_ARM64_WORKAROUND_TSB_FLUSH_FAILURE=y
+CONFIG_ARM64_ERRATUM_2054223=y
+CONFIG_ARM64_ERRATUM_2067961=y
+CONFIG_ARM64_ERRATUM_2441009=y
+CONFIG_ARM64_ERRATUM_2457168=y
+CONFIG_ARM64_ERRATUM_2645198=y
+CONFIG_ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD=y
+CONFIG_ARM64_ERRATUM_2966298=y
+CONFIG_ARM64_ERRATUM_3117295=y
+# CONFIG_CAVIUM_ERRATUM_22375 is not set
+# CONFIG_CAVIUM_ERRATUM_23154 is not set
+# CONFIG_CAVIUM_ERRATUM_27456 is not set
+# CONFIG_CAVIUM_ERRATUM_30115 is not set
+# CONFIG_CAVIUM_TX2_ERRATUM_219 is not set
+# CONFIG_FUJITSU_ERRATUM_010001 is not set
+CONFIG_HISILICON_ERRATUM_161600802=y
+CONFIG_QCOM_FALKOR_ERRATUM_1003=y
+CONFIG_QCOM_FALKOR_ERRATUM_1009=y
+CONFIG_QCOM_QDF2400_ERRATUM_0065=y
+CONFIG_QCOM_FALKOR_ERRATUM_E1041=y
+CONFIG_NVIDIA_CARMEL_CNP_ERRATUM=y
+CONFIG_ROCKCHIP_ERRATUM_3588001=y
+# CONFIG_SOCIONEXT_SYNQUACER_PREITS is not set
+# end of ARM errata workarounds via the alternatives framework
+
+CONFIG_ARM64_4K_PAGES=y
+# CONFIG_ARM64_16K_PAGES is not set
+# CONFIG_ARM64_64K_PAGES is not set
+# CONFIG_ARM64_VA_BITS_39 is not set
+CONFIG_ARM64_VA_BITS_48=y
+# CONFIG_ARM64_VA_BITS_52 is not set
+CONFIG_ARM64_VA_BITS=48
+CONFIG_ARM64_PA_BITS_48=y
+CONFIG_ARM64_PA_BITS=48
+# CONFIG_CPU_BIG_ENDIAN is not set
+CONFIG_CPU_LITTLE_ENDIAN=y
+CONFIG_SCHED_MC=y
+CONFIG_SCHED_CLUSTER=y
+CONFIG_SCHED_SMT=y
+CONFIG_NR_CPUS=8
+CONFIG_HOTPLUG_CPU=y
+# CONFIG_NUMA is not set
+CONFIG_HZ_100=y
+# CONFIG_HZ_250 is not set
+# CONFIG_HZ_300 is not set
+# CONFIG_HZ_1000 is not set
+CONFIG_HZ=100
+CONFIG_SCHED_HRTICK=y
+CONFIG_ARCH_SPARSEMEM_ENABLE=y
+CONFIG_HW_PERF_EVENTS=y
+# CONFIG_PARAVIRT is not set
+# CONFIG_PARAVIRT_TIME_ACCOUNTING is not set
+CONFIG_ARCH_SUPPORTS_KEXEC=y
+CONFIG_ARCH_SUPPORTS_KEXEC_FILE=y
+CONFIG_ARCH_SELECTS_KEXEC_FILE=y
+CONFIG_ARCH_SUPPORTS_KEXEC_SIG=y
+CONFIG_ARCH_SUPPORTS_KEXEC_IMAGE_VERIFY_SIG=y
+CONFIG_ARCH_DEFAULT_KEXEC_IMAGE_VERIFY_SIG=y
+CONFIG_ARCH_SUPPORTS_CRASH_DUMP=y
+CONFIG_ARCH_HAS_GENERIC_CRASHKERNEL_RESERVATION=y
+CONFIG_TRANS_TABLE=y
+# CONFIG_XEN is not set
+CONFIG_ARCH_FORCE_MAX_ORDER=10
+CONFIG_UNMAP_KERNEL_AT_EL0=y
+CONFIG_MITIGATE_SPECTRE_BRANCH_HISTORY=y
+CONFIG_RODATA_FULL_DEFAULT_ENABLED=y
+CONFIG_ARM64_SW_TTBR0_PAN=y
+CONFIG_ARM64_TAGGED_ADDR_ABI=y
+CONFIG_COMPAT=y
+CONFIG_KUSER_HELPERS=y
+# CONFIG_COMPAT_ALIGNMENT_FIXUPS is not set
+CONFIG_ARMV8_DEPRECATED=y
+CONFIG_SWP_EMULATION=y
+CONFIG_CP15_BARRIER_EMULATION=y
+CONFIG_SETEND_EMULATION=y
+
+#
+# ARMv8.1 architectural features
+#
+CONFIG_ARM64_HW_AFDBM=y
+CONFIG_ARM64_PAN=y
+CONFIG_AS_HAS_LSE_ATOMICS=y
+CONFIG_ARM64_LSE_ATOMICS=y
+CONFIG_ARM64_USE_LSE_ATOMICS=y
+# end of ARMv8.1 architectural features
+
+#
+# ARMv8.2 architectural features
+#
+CONFIG_AS_HAS_ARMV8_2=y
+CONFIG_AS_HAS_SHA3=y
+CONFIG_ARM64_PMEM=y
+CONFIG_ARM64_RAS_EXTN=y
+CONFIG_ARM64_CNP=y
+# end of ARMv8.2 architectural features
+
+#
+# ARMv8.3 architectural features
+#
+CONFIG_ARM64_PTR_AUTH=y
+CONFIG_ARM64_PTR_AUTH_KERNEL=y
+CONFIG_CC_HAS_BRANCH_PROT_PAC_RET=y
+CONFIG_CC_HAS_SIGN_RETURN_ADDRESS=y
+CONFIG_AS_HAS_ARMV8_3=y
+CONFIG_AS_HAS_CFI_NEGATE_RA_STATE=y
+CONFIG_AS_HAS_LDAPR=y
+# end of ARMv8.3 architectural features
+
+#
+# ARMv8.4 architectural features
+#
+CONFIG_ARM64_AMU_EXTN=y
+CONFIG_AS_HAS_ARMV8_4=y
+CONFIG_ARM64_TLB_RANGE=y
+# end of ARMv8.4 architectural features
+
+#
+# ARMv8.5 architectural features
+#
+CONFIG_AS_HAS_ARMV8_5=y
+CONFIG_ARM64_BTI=y
+CONFIG_CC_HAS_BRANCH_PROT_PAC_RET_BTI=y
+CONFIG_ARM64_E0PD=y
+CONFIG_ARM64_AS_HAS_MTE=y
+CONFIG_ARM64_MTE=y
+# end of ARMv8.5 architectural features
+
+#
+# ARMv8.7 architectural features
+#
+CONFIG_ARM64_EPAN=y
+# end of ARMv8.7 architectural features
+
+CONFIG_ARM64_SVE=y
+CONFIG_ARM64_SME=y
+# CONFIG_ARM64_PSEUDO_NMI is not set
+CONFIG_RELOCATABLE=y
+CONFIG_RANDOMIZE_BASE=y
+CONFIG_RANDOMIZE_MODULE_REGION_FULL=y
+CONFIG_CC_HAVE_STACKPROTECTOR_SYSREG=y
+CONFIG_STACKPROTECTOR_PER_TASK=y
+CONFIG_ARM64_CONTPTE=y
+# end of Kernel Features
+
+#
+# Boot options
+#
+CONFIG_CMDLINE=""
+# CONFIG_EFI is not set
+# end of Boot options
+
+#
+# Power management options
+#
+CONFIG_SUSPEND=y
+CONFIG_SUSPEND_FREEZER=y
+# CONFIG_SUSPEND_SKIP_SYNC is not set
+# CONFIG_HIBERNATION is not set
+CONFIG_PM_SLEEP=y
+CONFIG_PM_SLEEP_SMP=y
+CONFIG_PM_AUTOSLEEP=y
+CONFIG_PM_USERSPACE_AUTOSLEEP=y
+CONFIG_PM_WAKELOCKS=y
+CONFIG_PM_WAKELOCKS_LIMIT=0
+# CONFIG_PM_WAKELOCKS_GC is not set
+CONFIG_PM=y
+CONFIG_PM_DEBUG=y
+# CONFIG_PM_ADVANCED_DEBUG is not set
+# CONFIG_PM_TEST_SUSPEND is not set
+CONFIG_PM_SLEEP_DEBUG=y
+# CONFIG_DPM_WATCHDOG is not set
+CONFIG_PM_CLK=y
+CONFIG_PM_GENERIC_DOMAINS=y
+CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
+CONFIG_PM_GENERIC_DOMAINS_SLEEP=y
+CONFIG_PM_GENERIC_DOMAINS_OF=y
+CONFIG_CPU_PM=y
+CONFIG_ENERGY_MODEL=y
+CONFIG_ARCH_HIBERNATION_POSSIBLE=y
+CONFIG_ARCH_SUSPEND_POSSIBLE=y
+# end of Power management options
+
+#
+# CPU Power Management
+#
+
+#
+# CPU Idle
+#
+CONFIG_CPU_IDLE=y
+CONFIG_CPU_IDLE_MULTIPLE_DRIVERS=y
+CONFIG_CPU_IDLE_GOV_LADDER=y
+CONFIG_CPU_IDLE_GOV_MENU=y
+CONFIG_CPU_IDLE_GOV_TEO=y
+CONFIG_DT_IDLE_STATES=y
+CONFIG_DT_IDLE_GENPD=y
+
+#
+# ARM CPU Idle Drivers
+#
+CONFIG_ARM_PSCI_CPUIDLE=y
+CONFIG_ARM_PSCI_CPUIDLE_DOMAIN=y
+# end of ARM CPU Idle Drivers
+# end of CPU Idle
+
+#
+# CPU Frequency scaling
+#
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_ATTR_SET=y
+CONFIG_CPU_FREQ_GOV_COMMON=y
+CONFIG_CPU_FREQ_STAT=y
+# CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE is not set
+CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE=y
+# CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE is not set
+# CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND is not set
+# CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE is not set
+# CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL is not set
+CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y
+
+#
+# CPU frequency scaling drivers
+#
+CONFIG_CPUFREQ_DT=y
+CONFIG_CPUFREQ_DT_PLATDEV=y
+CONFIG_ARM_QCOM_CPUFREQ_NVMEM=y
+CONFIG_ARM_QCOM_CPUFREQ_HW=y
+# end of CPU Frequency scaling
+# end of CPU Power Management
+
+# CONFIG_VIRTUALIZATION is not set
+
+#
+# General architecture-dependent options
+#
+CONFIG_ARCH_HAS_SUBPAGE_FAULTS=y
+CONFIG_HOTPLUG_CORE_SYNC=y
+CONFIG_HOTPLUG_CORE_SYNC_DEAD=y
+# CONFIG_KPROBES is not set
+CONFIG_JUMP_LABEL=y
+# CONFIG_STATIC_KEYS_SELFTEST is not set
+CONFIG_UPROBES=y
+CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS=y
+CONFIG_HAVE_IOREMAP_PROT=y
+CONFIG_HAVE_KPROBES=y
+CONFIG_HAVE_KRETPROBES=y
+CONFIG_ARCH_CORRECT_STACKTRACE_ON_KRETPROBE=y
+CONFIG_HAVE_FUNCTION_ERROR_INJECTION=y
+CONFIG_HAVE_NMI=y
+CONFIG_TRACE_IRQFLAGS_SUPPORT=y
+CONFIG_TRACE_IRQFLAGS_NMI_SUPPORT=y
+CONFIG_HAVE_ARCH_TRACEHOOK=y
+CONFIG_HAVE_DMA_CONTIGUOUS=y
+CONFIG_GENERIC_SMP_IDLE_THREAD=y
+CONFIG_GENERIC_IDLE_POLL_SETUP=y
+CONFIG_ARCH_HAS_FORTIFY_SOURCE=y
+CONFIG_ARCH_HAS_KEEPINITRD=y
+CONFIG_ARCH_HAS_SET_MEMORY=y
+CONFIG_ARCH_HAS_SET_DIRECT_MAP=y
+CONFIG_HAVE_ARCH_THREAD_STRUCT_WHITELIST=y
+CONFIG_ARCH_WANTS_NO_INSTR=y
+CONFIG_HAVE_ASM_MODVERSIONS=y
+CONFIG_HAVE_REGS_AND_STACK_ACCESS_API=y
+CONFIG_HAVE_RSEQ=y
+CONFIG_HAVE_RUST=y
+CONFIG_HAVE_FUNCTION_ARG_ACCESS_API=y
+CONFIG_HAVE_HW_BREAKPOINT=y
+CONFIG_HAVE_PERF_REGS=y
+CONFIG_HAVE_PERF_USER_STACK_DUMP=y
+CONFIG_HAVE_ARCH_JUMP_LABEL=y
+CONFIG_HAVE_ARCH_JUMP_LABEL_RELATIVE=y
+CONFIG_MMU_GATHER_TABLE_FREE=y
+CONFIG_MMU_GATHER_RCU_TABLE_FREE=y
+CONFIG_MMU_LAZY_TLB_REFCOUNT=y
+CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG=y
+CONFIG_ARCH_HAS_NMI_SAFE_THIS_CPU_OPS=y
+CONFIG_HAVE_ALIGNED_STRUCT_PAGE=y
+CONFIG_HAVE_CMPXCHG_LOCAL=y
+CONFIG_HAVE_CMPXCHG_DOUBLE=y
+CONFIG_ARCH_WANT_COMPAT_IPC_PARSE_VERSION=y
+CONFIG_HAVE_ARCH_SECCOMP=y
+CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
+CONFIG_SECCOMP=y
+CONFIG_SECCOMP_FILTER=y
+# CONFIG_SECCOMP_CACHE_DEBUG is not set
+CONFIG_HAVE_ARCH_STACKLEAK=y
+CONFIG_HAVE_STACKPROTECTOR=y
+CONFIG_STACKPROTECTOR=y
+CONFIG_STACKPROTECTOR_STRONG=y
+CONFIG_ARCH_SUPPORTS_LTO_CLANG=y
+CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y
+CONFIG_LTO_NONE=y
+CONFIG_ARCH_SUPPORTS_CFI_CLANG=y
+CONFIG_HAVE_CONTEXT_TRACKING_USER=y
+CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN=y
+CONFIG_HAVE_IRQ_TIME_ACCOUNTING=y
+CONFIG_HAVE_MOVE_PUD=y
+CONFIG_HAVE_MOVE_PMD=y
+CONFIG_HAVE_ARCH_TRANSPARENT_HUGEPAGE=y
+CONFIG_HAVE_ARCH_HUGE_VMAP=y
+CONFIG_HAVE_ARCH_HUGE_VMALLOC=y
+CONFIG_ARCH_WANT_HUGE_PMD_SHARE=y
+CONFIG_ARCH_WANT_PMD_MKWRITE=y
+CONFIG_HAVE_MOD_ARCH_SPECIFIC=y
+CONFIG_MODULES_USE_ELF_RELA=y
+CONFIG_HAVE_SOFTIRQ_ON_OWN_STACK=y
+CONFIG_SOFTIRQ_ON_OWN_STACK=y
+CONFIG_ARCH_HAS_ELF_RANDOMIZE=y
+CONFIG_HAVE_ARCH_MMAP_RND_BITS=y
+CONFIG_ARCH_MMAP_RND_BITS=18
+CONFIG_HAVE_ARCH_MMAP_RND_COMPAT_BITS=y
+CONFIG_ARCH_MMAP_RND_COMPAT_BITS=11
+CONFIG_HAVE_PAGE_SIZE_4KB=y
+CONFIG_PAGE_SIZE_4KB=y
+CONFIG_PAGE_SIZE_LESS_THAN_64KB=y
+CONFIG_PAGE_SIZE_LESS_THAN_256KB=y
+CONFIG_PAGE_SHIFT=12
+CONFIG_ARCH_WANT_DEFAULT_TOPDOWN_MMAP_LAYOUT=y
+CONFIG_CLONE_BACKWARDS=y
+CONFIG_OLD_SIGSUSPEND3=y
+CONFIG_COMPAT_OLD_SIGACTION=y
+CONFIG_COMPAT_32BIT_TIME=y
+CONFIG_HAVE_ARCH_VMAP_STACK=y
+CONFIG_VMAP_STACK=y
+CONFIG_HAVE_ARCH_RANDOMIZE_KSTACK_OFFSET=y
+CONFIG_RANDOMIZE_KSTACK_OFFSET=y
+# CONFIG_RANDOMIZE_KSTACK_OFFSET_DEFAULT is not set
+CONFIG_ARCH_HAS_STRICT_KERNEL_RWX=y
+CONFIG_STRICT_KERNEL_RWX=y
+CONFIG_ARCH_HAS_STRICT_MODULE_RWX=y
+CONFIG_STRICT_MODULE_RWX=y
+CONFIG_HAVE_ARCH_COMPILER_H=y
+CONFIG_HAVE_ARCH_PREL32_RELOCATIONS=y
+# CONFIG_LOCK_EVENT_COUNTS is not set
+CONFIG_ARCH_HAS_RELR=y
+CONFIG_HAVE_PREEMPT_DYNAMIC=y
+CONFIG_HAVE_PREEMPT_DYNAMIC_KEY=y
+CONFIG_ARCH_WANT_LD_ORPHAN_WARN=y
+CONFIG_ARCH_SUPPORTS_DEBUG_PAGEALLOC=y
+CONFIG_ARCH_SUPPORTS_PAGE_TABLE_CHECK=y
+CONFIG_ARCH_HAVE_TRACE_MMIO_ACCESS=y
+CONFIG_ARCH_HAS_HW_PTE_YOUNG=y
+
+#
+# GCOV-based kernel profiling
+#
+CONFIG_GCOV_KERNEL=y
+CONFIG_ARCH_HAS_GCOV_PROFILE_ALL=y
+# CONFIG_GCOV_PROFILE_ALL is not set
+# end of GCOV-based kernel profiling
+
+CONFIG_HAVE_GCC_PLUGINS=y
+CONFIG_FUNCTION_ALIGNMENT_4B=y
+CONFIG_FUNCTION_ALIGNMENT=4
+# end of General architecture-dependent options
+
+CONFIG_RT_MUTEXES=y
+CONFIG_BASE_SMALL=0
+CONFIG_MODULES=y
+# CONFIG_MODULE_DEBUG is not set
+# CONFIG_MODULE_FORCE_LOAD is not set
+CONFIG_MODULE_UNLOAD=y
+# CONFIG_MODULE_FORCE_UNLOAD is not set
+# CONFIG_MODULE_UNLOAD_TAINT_TRACKING is not set
+CONFIG_MODVERSIONS=y
+CONFIG_ASM_MODVERSIONS=y
+CONFIG_MODULE_SRCVERSION_ALL=y
+# CONFIG_MODULE_SIG is not set
+CONFIG_MODULE_COMPRESS_NONE=y
+# CONFIG_MODULE_COMPRESS_GZIP is not set
+# CONFIG_MODULE_COMPRESS_XZ is not set
+# CONFIG_MODULE_COMPRESS_ZSTD is not set
+# CONFIG_MODULE_ALLOW_MISSING_NAMESPACE_IMPORTS is not set
+CONFIG_MODPROBE_PATH="/sbin/modprobe"
+# CONFIG_TRIM_UNUSED_KSYMS is not set
+CONFIG_MODULES_TREE_LOOKUP=y
+CONFIG_BLOCK=y
+CONFIG_BLOCK_LEGACY_AUTOLOAD=y
+CONFIG_BLK_CGROUP_RWSTAT=y
+CONFIG_BLK_DEV_BSG_COMMON=y
+CONFIG_BLK_ICQ=y
+CONFIG_BLK_DEV_BSGLIB=y
+# CONFIG_BLK_DEV_INTEGRITY is not set
+CONFIG_BLK_DEV_WRITE_MOUNTED=y
+# CONFIG_BLK_DEV_ZONED is not set
+CONFIG_BLK_DEV_THROTTLING=y
+# CONFIG_BLK_DEV_THROTTLING_LOW is not set
+# CONFIG_BLK_WBT is not set
+# CONFIG_BLK_CGROUP_IOLATENCY is not set
+# CONFIG_BLK_CGROUP_IOCOST is not set
+# CONFIG_BLK_CGROUP_IOPRIO is not set
+CONFIG_BLK_DEBUG_FS=y
+# CONFIG_BLK_SED_OPAL is not set
+# CONFIG_BLK_INLINE_ENCRYPTION is not set
+
+#
+# Partition Types
+#
+# CONFIG_PARTITION_ADVANCED is not set
+CONFIG_MSDOS_PARTITION=y
+CONFIG_EFI_PARTITION=y
+# end of Partition Types
+
+CONFIG_BLK_MQ_PCI=y
+CONFIG_BLK_MQ_VIRTIO=y
+CONFIG_BLK_PM=y
+CONFIG_BLOCK_HOLDER_DEPRECATED=y
+CONFIG_BLK_MQ_STACKING=y
+
+#
+# IO Schedulers
+#
+CONFIG_MQ_IOSCHED_DEADLINE=y
+CONFIG_MQ_IOSCHED_KYBER=y
+CONFIG_IOSCHED_BFQ=y
+CONFIG_BFQ_GROUP_IOSCHED=y
+# CONFIG_BFQ_CGROUP_DEBUG is not set
+# end of IO Schedulers
+
+CONFIG_PADATA=y
+CONFIG_ASN1=y
+CONFIG_UNINLINE_SPIN_UNLOCK=y
+CONFIG_ARCH_SUPPORTS_ATOMIC_RMW=y
+CONFIG_MUTEX_SPIN_ON_OWNER=y
+CONFIG_RWSEM_SPIN_ON_OWNER=y
+CONFIG_LOCK_SPIN_ON_OWNER=y
+CONFIG_ARCH_USE_QUEUED_SPINLOCKS=y
+CONFIG_QUEUED_SPINLOCKS=y
+CONFIG_ARCH_USE_QUEUED_RWLOCKS=y
+CONFIG_QUEUED_RWLOCKS=y
+CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE=y
+CONFIG_ARCH_HAS_SYSCALL_WRAPPER=y
+CONFIG_FREEZER=y
+
+#
+# Executable file formats
+#
+CONFIG_BINFMT_ELF=y
+CONFIG_COMPAT_BINFMT_ELF=y
+CONFIG_ARCH_BINFMT_ELF_STATE=y
+CONFIG_ARCH_BINFMT_ELF_EXTRA_PHDRS=y
+CONFIG_ARCH_HAVE_ELF_PROT=y
+CONFIG_ARCH_USE_GNU_PROPERTY=y
+CONFIG_ELFCORE=y
+# CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
+CONFIG_BINFMT_SCRIPT=y
+# CONFIG_BINFMT_MISC is not set
+CONFIG_COREDUMP=y
+# end of Executable file formats
+
+#
+# Memory Management options
+#
+CONFIG_SWAP=y
+# CONFIG_ZSWAP is not set
+CONFIG_ZSMALLOC=m
+CONFIG_ZSMALLOC_STAT=y
+CONFIG_ZSMALLOC_CHAIN_SIZE=8
+
+#
+# Slab allocator options
+#
+CONFIG_SLUB=y
+# CONFIG_SLUB_TINY is not set
+CONFIG_SLAB_MERGE_DEFAULT=y
+# CONFIG_SLAB_FREELIST_RANDOM is not set
+# CONFIG_SLAB_FREELIST_HARDENED is not set
+# CONFIG_SLUB_STATS is not set
+CONFIG_SLUB_CPU_PARTIAL=y
+# CONFIG_RANDOM_KMALLOC_CACHES is not set
+# end of Slab allocator options
+
+# CONFIG_SHUFFLE_PAGE_ALLOCATOR is not set
+# CONFIG_COMPAT_BRK is not set
+CONFIG_SPARSEMEM=y
+CONFIG_SPARSEMEM_EXTREME=y
+CONFIG_SPARSEMEM_VMEMMAP_ENABLE=y
+CONFIG_SPARSEMEM_VMEMMAP=y
+CONFIG_HAVE_FAST_GUP=y
+CONFIG_ARCH_KEEP_MEMBLOCK=y
+CONFIG_MEMORY_ISOLATION=y
+CONFIG_ARCH_ENABLE_MEMORY_HOTPLUG=y
+CONFIG_ARCH_ENABLE_MEMORY_HOTREMOVE=y
+# CONFIG_MEMORY_HOTPLUG is not set
+CONFIG_ARCH_MHP_MEMMAP_ON_MEMORY_ENABLE=y
+CONFIG_SPLIT_PTLOCK_CPUS=4
+CONFIG_ARCH_ENABLE_SPLIT_PMD_PTLOCK=y
+CONFIG_MEMORY_BALLOON=y
+CONFIG_BALLOON_COMPACTION=y
+CONFIG_COMPACTION=y
+CONFIG_COMPACT_UNEVICTABLE_DEFAULT=1
+CONFIG_PAGE_REPORTING=y
+CONFIG_MIGRATION=y
+CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION=y
+CONFIG_ARCH_ENABLE_THP_MIGRATION=y
+CONFIG_CONTIG_ALLOC=y
+CONFIG_PCP_BATCH_SCALE_MAX=5
+CONFIG_PHYS_ADDR_T_64BIT=y
+CONFIG_MMU_NOTIFIER=y
+CONFIG_KSM=y
+CONFIG_DEFAULT_MMAP_MIN_ADDR=4096
+CONFIG_ARCH_SUPPORTS_MEMORY_FAILURE=y
+CONFIG_MEMORY_FAILURE=y
+# CONFIG_HWPOISON_INJECT is not set
+CONFIG_ARCH_WANTS_THP_SWAP=y
+CONFIG_TRANSPARENT_HUGEPAGE=y
+CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS=y
+# CONFIG_TRANSPARENT_HUGEPAGE_MADVISE is not set
+# CONFIG_TRANSPARENT_HUGEPAGE_NEVER is not set
+CONFIG_THP_SWAP=y
+# CONFIG_READ_ONLY_THP_FOR_FS is not set
+CONFIG_CMA=y
+CONFIG_CMA_DEBUGFS=y
+CONFIG_CMA_SYSFS=y
+CONFIG_CMA_AREAS=7
+CONFIG_GENERIC_EARLY_IOREMAP=y
+# CONFIG_DEFERRED_STRUCT_PAGE_INIT is not set
+# CONFIG_IDLE_PAGE_TRACKING is not set
+CONFIG_ARCH_HAS_CACHE_LINE_SIZE=y
+CONFIG_ARCH_HAS_CURRENT_STACK_POINTER=y
+CONFIG_ARCH_HAS_PTE_DEVMAP=y
+CONFIG_ARCH_HAS_ZONE_DMA_SET=y
+CONFIG_ZONE_DMA=y
+CONFIG_ZONE_DMA32=y
+CONFIG_ARCH_USES_HIGH_VMA_FLAGS=y
+CONFIG_ARCH_USES_PG_ARCH_X=y
+CONFIG_VM_EVENT_COUNTERS=y
+# CONFIG_PERCPU_STATS is not set
+# CONFIG_GUP_TEST is not set
+# CONFIG_DMAPOOL_TEST is not set
+CONFIG_ARCH_HAS_PTE_SPECIAL=y
+CONFIG_MEMFD_CREATE=y
+CONFIG_SECRETMEM=y
+CONFIG_ANON_VMA_NAME=y
+# CONFIG_USERFAULTFD is not set
+CONFIG_LRU_GEN=y
+CONFIG_LRU_GEN_ENABLED=y
+# CONFIG_LRU_GEN_STATS is not set
+CONFIG_LRU_GEN_WALKS_MMU=y
+CONFIG_ARCH_SUPPORTS_PER_VMA_LOCK=y
+CONFIG_PER_VMA_LOCK=y
+CONFIG_LOCK_MM_AND_FIND_VMA=y
+CONFIG_IOMMU_MM_DATA=y
+
+#
+# Data Access Monitoring
+#
+# CONFIG_DAMON is not set
+# end of Data Access Monitoring
+# end of Memory Management options
+
+CONFIG_NET=y
+CONFIG_NET_INGRESS=y
+CONFIG_NET_EGRESS=y
+CONFIG_NET_XGRESS=y
+CONFIG_SKB_EXTENSIONS=y
+
+#
+# Networking options
+#
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=y
+CONFIG_UNIX=y
+CONFIG_AF_UNIX_OOB=y
+CONFIG_UNIX_DIAG=y
+# CONFIG_TLS is not set
+CONFIG_XFRM=y
+CONFIG_XFRM_ALGO=y
+CONFIG_XFRM_USER=y
+# CONFIG_XFRM_INTERFACE is not set
+# CONFIG_XFRM_SUB_POLICY is not set
+# CONFIG_XFRM_MIGRATE is not set
+# CONFIG_XFRM_STATISTICS is not set
+CONFIG_XFRM_AH=y
+CONFIG_XFRM_ESP=y
+CONFIG_XFRM_IPCOMP=y
+CONFIG_NET_KEY=y
+# CONFIG_NET_KEY_MIGRATE is not set
+# CONFIG_XDP_SOCKETS is not set
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+# CONFIG_IP_FIB_TRIE_STATS is not set
+CONFIG_IP_MULTIPLE_TABLES=y
+# CONFIG_IP_ROUTE_MULTIPATH is not set
+# CONFIG_IP_ROUTE_VERBOSE is not set
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+# CONFIG_IP_PNP_RARP is not set
+# CONFIG_NET_IPIP is not set
+# CONFIG_NET_IPGRE_DEMUX is not set
+CONFIG_NET_IP_TUNNEL=y
+# CONFIG_IP_MROUTE is not set
+CONFIG_SYN_COOKIES=y
+# CONFIG_NET_IPVTI is not set
+CONFIG_NET_UDP_TUNNEL=m
+# CONFIG_NET_FOU is not set
+# CONFIG_NET_FOU_IP_TUNNELS is not set
+# CONFIG_INET_AH is not set
+CONFIG_INET_ESP=y
+# CONFIG_INET_ESP_OFFLOAD is not set
+# CONFIG_INET_ESPINTCP is not set
+# CONFIG_INET_IPCOMP is not set
+CONFIG_INET_TABLE_PERTURB_ORDER=16
+CONFIG_INET_TUNNEL=y
+CONFIG_INET_DIAG=y
+CONFIG_INET_TCP_DIAG=y
+# CONFIG_INET_UDP_DIAG is not set
+# CONFIG_INET_RAW_DIAG is not set
+CONFIG_INET_DIAG_DESTROY=y
+CONFIG_TCP_CONG_ADVANCED=y
+CONFIG_TCP_CONG_BIC=m
+CONFIG_TCP_CONG_CUBIC=y
+CONFIG_TCP_CONG_WESTWOOD=y
+CONFIG_TCP_CONG_HTCP=m
+# CONFIG_TCP_CONG_HSTCP is not set
+# CONFIG_TCP_CONG_HYBLA is not set
+# CONFIG_TCP_CONG_VEGAS is not set
+# CONFIG_TCP_CONG_NV is not set
+# CONFIG_TCP_CONG_SCALABLE is not set
+# CONFIG_TCP_CONG_LP is not set
+# CONFIG_TCP_CONG_VENO is not set
+# CONFIG_TCP_CONG_YEAH is not set
+# CONFIG_TCP_CONG_ILLINOIS is not set
+# CONFIG_TCP_CONG_DCTCP is not set
+# CONFIG_TCP_CONG_CDG is not set
+# CONFIG_TCP_CONG_BBR is not set
+# CONFIG_DEFAULT_CUBIC is not set
+CONFIG_DEFAULT_WESTWOOD=y
+# CONFIG_DEFAULT_RENO is not set
+CONFIG_DEFAULT_TCP_CONG="westwood"
+# CONFIG_TCP_AO is not set
+# CONFIG_TCP_MD5SIG is not set
+CONFIG_IPV6=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_ROUTE_INFO=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=y
+CONFIG_INET6_ESP=y
+# CONFIG_INET6_ESP_OFFLOAD is not set
+# CONFIG_INET6_ESPINTCP is not set
+CONFIG_INET6_IPCOMP=y
+CONFIG_IPV6_MIP6=y
+# CONFIG_IPV6_ILA is not set
+CONFIG_INET6_XFRM_TUNNEL=y
+CONFIG_INET6_TUNNEL=y
+# CONFIG_IPV6_VTI is not set
+CONFIG_IPV6_SIT=y
+# CONFIG_IPV6_SIT_6RD is not set
+CONFIG_IPV6_NDISC_NODETYPE=y
+# CONFIG_IPV6_TUNNEL is not set
+CONFIG_IPV6_MULTIPLE_TABLES=y
+# CONFIG_IPV6_SUBTREES is not set
+# CONFIG_IPV6_MROUTE is not set
+# CONFIG_IPV6_SEG6_LWTUNNEL is not set
+# CONFIG_IPV6_SEG6_HMAC is not set
+# CONFIG_IPV6_RPL_LWTUNNEL is not set
+# CONFIG_IPV6_IOAM6_LWTUNNEL is not set
+# CONFIG_NETLABEL is not set
+# CONFIG_MPTCP is not set
+CONFIG_NETWORK_SECMARK=y
+CONFIG_NET_PTP_CLASSIFY=y
+# CONFIG_NETWORK_PHY_TIMESTAMPING is not set
+CONFIG_NETFILTER=y
+CONFIG_NETFILTER_ADVANCED=y
+CONFIG_BRIDGE_NETFILTER=y
+
+#
+# Core Netfilter Configuration
+#
+CONFIG_NETFILTER_INGRESS=y
+CONFIG_NETFILTER_EGRESS=y
+CONFIG_NETFILTER_NETLINK=y
+CONFIG_NETFILTER_FAMILY_BRIDGE=y
+CONFIG_NETFILTER_FAMILY_ARP=y
+CONFIG_NETFILTER_BPF_LINK=y
+# CONFIG_NETFILTER_NETLINK_HOOK is not set
+# CONFIG_NETFILTER_NETLINK_ACCT is not set
+CONFIG_NETFILTER_NETLINK_QUEUE=y
+CONFIG_NETFILTER_NETLINK_LOG=y
+# CONFIG_NETFILTER_NETLINK_OSF is not set
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_LOG_SYSLOG=y
+CONFIG_NETFILTER_CONNCOUNT=y
+CONFIG_NF_CONNTRACK_MARK=y
+CONFIG_NF_CONNTRACK_SECMARK=y
+# CONFIG_NF_CONNTRACK_ZONES is not set
+CONFIG_NF_CONNTRACK_PROCFS=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+# CONFIG_NF_CONNTRACK_TIMEOUT is not set
+# CONFIG_NF_CONNTRACK_TIMESTAMP is not set
+# CONFIG_NF_CONNTRACK_LABELS is not set
+CONFIG_NF_CT_PROTO_DCCP=y
+CONFIG_NF_CT_PROTO_GRE=y
+CONFIG_NF_CT_PROTO_SCTP=y
+CONFIG_NF_CT_PROTO_UDPLITE=y
+CONFIG_NF_CONNTRACK_AMANDA=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_H323=y
+CONFIG_NF_CONNTRACK_IRC=y
+CONFIG_NF_CONNTRACK_BROADCAST=y
+CONFIG_NF_CONNTRACK_NETBIOS_NS=y
+# CONFIG_NF_CONNTRACK_SNMP is not set
+CONFIG_NF_CONNTRACK_PPTP=y
+CONFIG_NF_CONNTRACK_SANE=y
+# CONFIG_NF_CONNTRACK_SIP is not set
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+# CONFIG_NETFILTER_NETLINK_GLUE_CT is not set
+CONFIG_NF_NAT=y
+CONFIG_NF_NAT_AMANDA=y
+CONFIG_NF_NAT_FTP=y
+CONFIG_NF_NAT_IRC=y
+CONFIG_NF_NAT_TFTP=y
+CONFIG_NF_NAT_REDIRECT=y
+CONFIG_NF_NAT_MASQUERADE=y
+CONFIG_NF_TABLES=m
+CONFIG_NF_TABLES_INET=y
+# CONFIG_NF_TABLES_NETDEV is not set
+# CONFIG_NFT_NUMGEN is not set
+CONFIG_NFT_CT=m
+# CONFIG_NFT_CONNLIMIT is not set
+CONFIG_NFT_LOG=m
+CONFIG_NFT_LIMIT=m
+CONFIG_NFT_MASQ=m
+# CONFIG_NFT_REDIR is not set
+CONFIG_NFT_NAT=m
+# CONFIG_NFT_TUNNEL is not set
+# CONFIG_NFT_QUEUE is not set
+# CONFIG_NFT_QUOTA is not set
+CONFIG_NFT_REJECT=m
+CONFIG_NFT_REJECT_INET=m
+# CONFIG_NFT_COMPAT is not set
+# CONFIG_NFT_HASH is not set
+# CONFIG_NFT_XFRM is not set
+# CONFIG_NFT_SOCKET is not set
+# CONFIG_NFT_OSF is not set
+# CONFIG_NFT_TPROXY is not set
+# CONFIG_NFT_SYNPROXY is not set
+# CONFIG_NF_FLOW_TABLE is not set
+CONFIG_NETFILTER_XTABLES=y
+CONFIG_NETFILTER_XTABLES_COMPAT=y
+
+#
+# Xtables combined modules
+#
+CONFIG_NETFILTER_XT_MARK=y
+CONFIG_NETFILTER_XT_CONNMARK=y
+
+#
+# Xtables targets
+#
+# CONFIG_NETFILTER_XT_TARGET_AUDIT is not set
+CONFIG_NETFILTER_XT_TARGET_CHECKSUM=y
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
+CONFIG_NETFILTER_XT_TARGET_CONNSECMARK=y
+CONFIG_NETFILTER_XT_TARGET_CT=y
+# CONFIG_NETFILTER_XT_TARGET_DSCP is not set
+# CONFIG_NETFILTER_XT_TARGET_HL is not set
+# CONFIG_NETFILTER_XT_TARGET_HMARK is not set
+CONFIG_NETFILTER_XT_TARGET_IDLETIMER=y
+# CONFIG_NETFILTER_XT_TARGET_LED is not set
+CONFIG_NETFILTER_XT_TARGET_LOG=y
+CONFIG_NETFILTER_XT_TARGET_MARK=y
+CONFIG_NETFILTER_XT_NAT=y
+CONFIG_NETFILTER_XT_TARGET_NETMAP=y
+CONFIG_NETFILTER_XT_TARGET_NFLOG=y
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
+# CONFIG_NETFILTER_XT_TARGET_NOTRACK is not set
+# CONFIG_NETFILTER_XT_TARGET_RATEEST is not set
+CONFIG_NETFILTER_XT_TARGET_REDIRECT=y
+CONFIG_NETFILTER_XT_TARGET_MASQUERADE=y
+# CONFIG_NETFILTER_XT_TARGET_TEE is not set
+CONFIG_NETFILTER_XT_TARGET_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_TRACE=y
+CONFIG_NETFILTER_XT_TARGET_SECMARK=y
+CONFIG_NETFILTER_XT_TARGET_TCPMSS=y
+# CONFIG_NETFILTER_XT_TARGET_TCPOPTSTRIP is not set
+
+#
+# Xtables matches
+#
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y
+CONFIG_NETFILTER_XT_MATCH_BPF=y
+# CONFIG_NETFILTER_XT_MATCH_CGROUP is not set
+# CONFIG_NETFILTER_XT_MATCH_CLUSTER is not set
+CONFIG_NETFILTER_XT_MATCH_COMMENT=m
+# CONFIG_NETFILTER_XT_MATCH_CONNBYTES is not set
+# CONFIG_NETFILTER_XT_MATCH_CONNLABEL is not set
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+# CONFIG_NETFILTER_XT_MATCH_CPU is not set
+# CONFIG_NETFILTER_XT_MATCH_DCCP is not set
+# CONFIG_NETFILTER_XT_MATCH_DEVGROUP is not set
+# CONFIG_NETFILTER_XT_MATCH_DSCP is not set
+CONFIG_NETFILTER_XT_MATCH_ECN=y
+# CONFIG_NETFILTER_XT_MATCH_ESP is not set
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_HELPER=y
+CONFIG_NETFILTER_XT_MATCH_HL=y
+# CONFIG_NETFILTER_XT_MATCH_IPCOMP is not set
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_IPVS=m
+# CONFIG_NETFILTER_XT_MATCH_L2TP is not set
+CONFIG_NETFILTER_XT_MATCH_LENGTH=y
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+# CONFIG_NETFILTER_XT_MATCH_MULTIPORT is not set
+# CONFIG_NETFILTER_XT_MATCH_NFACCT is not set
+# CONFIG_NETFILTER_XT_MATCH_OSF is not set
+CONFIG_NETFILTER_XT_MATCH_OWNER=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+# CONFIG_NETFILTER_XT_MATCH_PHYSDEV is not set
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA=y
+# CONFIG_NETFILTER_XT_MATCH_RATEEST is not set
+# CONFIG_NETFILTER_XT_MATCH_REALM is not set
+# CONFIG_NETFILTER_XT_MATCH_RECENT is not set
+# CONFIG_NETFILTER_XT_MATCH_SCTP is not set
+CONFIG_NETFILTER_XT_MATCH_SOCKET=y
+CONFIG_NETFILTER_XT_MATCH_STATE=y
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
+CONFIG_NETFILTER_XT_MATCH_STRING=y
+# CONFIG_NETFILTER_XT_MATCH_TCPMSS is not set
+CONFIG_NETFILTER_XT_MATCH_TIME=y
+CONFIG_NETFILTER_XT_MATCH_U32=y
+# end of Core Netfilter Configuration
+
+# CONFIG_IP_SET is not set
+CONFIG_IP_VS=m
+# CONFIG_IP_VS_IPV6 is not set
+# CONFIG_IP_VS_DEBUG is not set
+CONFIG_IP_VS_TAB_BITS=12
+
+#
+# IPVS transport protocol load balancing support
+#
+CONFIG_IP_VS_PROTO_TCP=y
+CONFIG_IP_VS_PROTO_UDP=y
+# CONFIG_IP_VS_PROTO_ESP is not set
+# CONFIG_IP_VS_PROTO_AH is not set
+# CONFIG_IP_VS_PROTO_SCTP is not set
+
+#
+# IPVS scheduler
+#
+CONFIG_IP_VS_RR=m
+# CONFIG_IP_VS_WRR is not set
+# CONFIG_IP_VS_LC is not set
+# CONFIG_IP_VS_WLC is not set
+# CONFIG_IP_VS_FO is not set
+# CONFIG_IP_VS_OVF is not set
+# CONFIG_IP_VS_LBLC is not set
+# CONFIG_IP_VS_LBLCR is not set
+# CONFIG_IP_VS_DH is not set
+# CONFIG_IP_VS_SH is not set
+# CONFIG_IP_VS_MH is not set
+# CONFIG_IP_VS_SED is not set
+# CONFIG_IP_VS_NQ is not set
+# CONFIG_IP_VS_TWOS is not set
+
+#
+# IPVS SH scheduler
+#
+CONFIG_IP_VS_SH_TAB_BITS=8
+
+#
+# IPVS MH scheduler
+#
+CONFIG_IP_VS_MH_TAB_INDEX=12
+
+#
+# IPVS application helper
+#
+# CONFIG_IP_VS_FTP is not set
+CONFIG_IP_VS_NFCT=y
+
+#
+# IP: Netfilter Configuration
+#
+CONFIG_NF_DEFRAG_IPV4=y
+CONFIG_IP_NF_IPTABLES_LEGACY=y
+CONFIG_NF_SOCKET_IPV4=y
+CONFIG_NF_TPROXY_IPV4=y
+CONFIG_NF_TABLES_IPV4=y
+CONFIG_NFT_REJECT_IPV4=m
+# CONFIG_NFT_DUP_IPV4 is not set
+# CONFIG_NFT_FIB_IPV4 is not set
+# CONFIG_NF_TABLES_ARP is not set
+# CONFIG_NF_DUP_IPV4 is not set
+# CONFIG_NF_LOG_ARP is not set
+# CONFIG_NF_LOG_IPV4 is not set
+CONFIG_NF_REJECT_IPV4=y
+CONFIG_NF_NAT_PPTP=y
+CONFIG_NF_NAT_H323=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_MATCH_ECN=y
+# CONFIG_IP_NF_MATCH_RPFILTER is not set
+CONFIG_IP_NF_MATCH_TTL=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+# CONFIG_IP_NF_TARGET_SYNPROXY is not set
+CONFIG_IP_NF_NAT=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_NETMAP=y
+CONFIG_IP_NF_TARGET_REDIRECT=m
+CONFIG_IP_NF_MANGLE=y
+# CONFIG_IP_NF_TARGET_ECN is not set
+# CONFIG_IP_NF_TARGET_TTL is not set
+CONFIG_IP_NF_RAW=y
+CONFIG_IP_NF_SECURITY=y
+CONFIG_IP_NF_ARPTABLES=y
+CONFIG_IP_NF_ARPFILTER=y
+CONFIG_IP_NF_ARP_MANGLE=y
+# end of IP: Netfilter Configuration
+
+#
+# IPv6: Netfilter Configuration
+#
+CONFIG_IP6_NF_IPTABLES_LEGACY=y
+CONFIG_NF_SOCKET_IPV6=y
+CONFIG_NF_TPROXY_IPV6=y
+CONFIG_NF_TABLES_IPV6=y
+CONFIG_NFT_REJECT_IPV6=m
+# CONFIG_NFT_DUP_IPV6 is not set
+# CONFIG_NFT_FIB_IPV6 is not set
+# CONFIG_NF_DUP_IPV6 is not set
+CONFIG_NF_REJECT_IPV6=y
+CONFIG_NF_LOG_IPV6=y
+CONFIG_IP6_NF_IPTABLES=y
+# CONFIG_IP6_NF_MATCH_AH is not set
+# CONFIG_IP6_NF_MATCH_EUI64 is not set
+# CONFIG_IP6_NF_MATCH_FRAG is not set
+# CONFIG_IP6_NF_MATCH_OPTS is not set
+# CONFIG_IP6_NF_MATCH_HL is not set
+# CONFIG_IP6_NF_MATCH_IPV6HEADER is not set
+# CONFIG_IP6_NF_MATCH_MH is not set
+# CONFIG_IP6_NF_MATCH_RPFILTER is not set
+# CONFIG_IP6_NF_MATCH_RT is not set
+# CONFIG_IP6_NF_MATCH_SRH is not set
+# CONFIG_IP6_NF_TARGET_HL is not set
+CONFIG_IP6_NF_FILTER=y
+CONFIG_IP6_NF_TARGET_REJECT=y
+# CONFIG_IP6_NF_TARGET_SYNPROXY is not set
+CONFIG_IP6_NF_MANGLE=y
+CONFIG_IP6_NF_RAW=y
+# CONFIG_IP6_NF_SECURITY is not set
+CONFIG_IP6_NF_NAT=y
+CONFIG_IP6_NF_TARGET_MASQUERADE=y
+# CONFIG_IP6_NF_TARGET_NPT is not set
+# end of IPv6: Netfilter Configuration
+
+CONFIG_NF_DEFRAG_IPV6=y
+# CONFIG_NF_TABLES_BRIDGE is not set
+# CONFIG_NF_CONNTRACK_BRIDGE is not set
+# CONFIG_BRIDGE_NF_EBTABLES is not set
+# CONFIG_IP_DCCP is not set
+# CONFIG_IP_SCTP is not set
+# CONFIG_RDS is not set
+# CONFIG_TIPC is not set
+# CONFIG_ATM is not set
+# CONFIG_L2TP is not set
+CONFIG_STP=y
+CONFIG_GARP=y
+CONFIG_MRP=y
+CONFIG_BRIDGE=y
+CONFIG_BRIDGE_IGMP_SNOOPING=y
+CONFIG_BRIDGE_VLAN_FILTERING=y
+# CONFIG_BRIDGE_MRP is not set
+# CONFIG_BRIDGE_CFM is not set
+# CONFIG_NET_DSA is not set
+CONFIG_VLAN_8021Q=y
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_VLAN_8021Q_MVRP=y
+CONFIG_LLC=y
+# CONFIG_LLC2 is not set
+# CONFIG_ATALK is not set
+# CONFIG_X25 is not set
+# CONFIG_LAPB is not set
+# CONFIG_PHONET is not set
+# CONFIG_6LOWPAN is not set
+# CONFIG_IEEE802154 is not set
+CONFIG_NET_SCHED=y
+
+#
+# Queueing/Scheduling
+#
+CONFIG_NET_SCH_HTB=y
+# CONFIG_NET_SCH_HFSC is not set
+CONFIG_NET_SCH_PRIO=y
+CONFIG_NET_SCH_MULTIQ=y
+# CONFIG_NET_SCH_RED is not set
+# CONFIG_NET_SCH_SFB is not set
+# CONFIG_NET_SCH_SFQ is not set
+# CONFIG_NET_SCH_TEQL is not set
+# CONFIG_NET_SCH_TBF is not set
+# CONFIG_NET_SCH_CBS is not set
+# CONFIG_NET_SCH_ETF is not set
+# CONFIG_NET_SCH_TAPRIO is not set
+# CONFIG_NET_SCH_GRED is not set
+# CONFIG_NET_SCH_NETEM is not set
+# CONFIG_NET_SCH_DRR is not set
+# CONFIG_NET_SCH_MQPRIO is not set
+# CONFIG_NET_SCH_SKBPRIO is not set
+# CONFIG_NET_SCH_CHOKE is not set
+# CONFIG_NET_SCH_QFQ is not set
+# CONFIG_NET_SCH_CODEL is not set
+# CONFIG_NET_SCH_FQ_CODEL is not set
+# CONFIG_NET_SCH_CAKE is not set
+# CONFIG_NET_SCH_FQ is not set
+# CONFIG_NET_SCH_HHF is not set
+# CONFIG_NET_SCH_PIE is not set
+# CONFIG_NET_SCH_PLUG is not set
+# CONFIG_NET_SCH_ETS is not set
+# CONFIG_NET_SCH_DEFAULT is not set
+
+#
+# Classification
+#
+CONFIG_NET_CLS=y
+# CONFIG_NET_CLS_BASIC is not set
+# CONFIG_NET_CLS_ROUTE4 is not set
+# CONFIG_NET_CLS_FW is not set
+CONFIG_NET_CLS_U32=y
+# CONFIG_CLS_U32_PERF is not set
+# CONFIG_CLS_U32_MARK is not set
+# CONFIG_NET_CLS_FLOW is not set
+CONFIG_NET_CLS_CGROUP=m
+CONFIG_NET_CLS_BPF=y
+# CONFIG_NET_CLS_FLOWER is not set
+# CONFIG_NET_CLS_MATCHALL is not set
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_STACK=32
+# CONFIG_NET_EMATCH_CMP is not set
+# CONFIG_NET_EMATCH_NBYTE is not set
+CONFIG_NET_EMATCH_U32=y
+# CONFIG_NET_EMATCH_META is not set
+# CONFIG_NET_EMATCH_TEXT is not set
+# CONFIG_NET_EMATCH_IPT is not set
+# CONFIG_NET_CLS_ACT is not set
+CONFIG_NET_SCH_FIFO=y
+# CONFIG_DCB is not set
+# CONFIG_DNS_RESOLVER is not set
+# CONFIG_BATMAN_ADV is not set
+# CONFIG_OPENVSWITCH is not set
+# CONFIG_VSOCKETS is not set
+CONFIG_NETLINK_DIAG=m
+# CONFIG_MPLS is not set
+# CONFIG_NET_NSH is not set
+# CONFIG_HSR is not set
+# CONFIG_NET_SWITCHDEV is not set
+CONFIG_NET_L3_MASTER_DEV=y
+CONFIG_QRTR=y
+CONFIG_QRTR_SMD=y
+CONFIG_QRTR_TUN=y
+CONFIG_QRTR_MHI=m
+# CONFIG_NET_NCSI is not set
+CONFIG_PCPU_DEV_REFCNT=y
+CONFIG_MAX_SKB_FRAGS=17
+CONFIG_RPS=y
+CONFIG_RFS_ACCEL=y
+CONFIG_SOCK_RX_QUEUE_MAPPING=y
+CONFIG_XPS=y
+CONFIG_CGROUP_NET_PRIO=y
+CONFIG_CGROUP_NET_CLASSID=y
+CONFIG_NET_RX_BUSY_POLL=y
+CONFIG_BQL=y
+# CONFIG_BPF_STREAM_PARSER is not set
+CONFIG_NET_FLOW_LIMIT=y
+
+#
+# Network testing
+#
+# CONFIG_NET_PKTGEN is not set
+# CONFIG_NET_DROP_MONITOR is not set
+# end of Network testing
+# end of Networking options
+
+# CONFIG_HAMRADIO is not set
+# CONFIG_CAN is not set
+CONFIG_BT=y
+CONFIG_BT_BREDR=y
+CONFIG_BT_RFCOMM=m
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=m
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=m
+CONFIG_BT_LE=y
+CONFIG_BT_LE_L2CAP_ECRED=y
+CONFIG_BT_LEDS=y
+# CONFIG_BT_MSFTEXT is not set
+CONFIG_BT_AOSPEXT=y
+CONFIG_BT_DEBUGFS=y
+# CONFIG_BT_SELFTEST is not set
+
+#
+# Bluetooth device drivers
+#
+CONFIG_BT_INTEL=y
+CONFIG_BT_BCM=y
+CONFIG_BT_RTL=y
+CONFIG_BT_QCA=y
+CONFIG_BT_HCIBTUSB=y
+# CONFIG_BT_HCIBTUSB_AUTOSUSPEND is not set
+CONFIG_BT_HCIBTUSB_POLL_SYNC=y
+CONFIG_BT_HCIBTUSB_BCM=y
+# CONFIG_BT_HCIBTUSB_MTK is not set
+CONFIG_BT_HCIBTUSB_RTL=y
+# CONFIG_BT_HCIBTSDIO is not set
+CONFIG_BT_HCIUART=y
+CONFIG_BT_HCIUART_SERDEV=y
+CONFIG_BT_HCIUART_H4=y
+# CONFIG_BT_HCIUART_NOKIA is not set
+# CONFIG_BT_HCIUART_BCSP is not set
+# CONFIG_BT_HCIUART_ATH3K is not set
+# CONFIG_BT_HCIUART_LL is not set
+# CONFIG_BT_HCIUART_3WIRE is not set
+# CONFIG_BT_HCIUART_INTEL is not set
+# CONFIG_BT_HCIUART_BCM is not set
+# CONFIG_BT_HCIUART_RTL is not set
+CONFIG_BT_HCIUART_QCA=y
+# CONFIG_BT_HCIUART_AG6XX is not set
+# CONFIG_BT_HCIUART_MRVL is not set
+# CONFIG_BT_HCIBCM203X is not set
+# CONFIG_BT_HCIBCM4377 is not set
+# CONFIG_BT_HCIBPA10X is not set
+# CONFIG_BT_HCIBFUSB is not set
+# CONFIG_BT_HCIVHCI is not set
+# CONFIG_BT_MRVL is not set
+# CONFIG_BT_ATH3K is not set
+# CONFIG_BT_MTKSDIO is not set
+# CONFIG_BT_MTKUART is not set
+CONFIG_BT_QCOMSMD=y
+CONFIG_BT_VIRTIO=y
+CONFIG_BT_NXPUART=y
+# end of Bluetooth device drivers
+
+# CONFIG_AF_RXRPC is not set
+# CONFIG_AF_KCM is not set
+# CONFIG_MCTP is not set
+CONFIG_FIB_RULES=y
+CONFIG_WIRELESS=y
+CONFIG_CFG80211=y
+# CONFIG_NL80211_TESTMODE is not set
+# CONFIG_CFG80211_DEVELOPER_WARNINGS is not set
+# CONFIG_CFG80211_CERTIFICATION_ONUS is not set
+CONFIG_CFG80211_REQUIRE_SIGNED_REGDB=y
+CONFIG_CFG80211_USE_KERNEL_REGDB_KEYS=y
+CONFIG_CFG80211_DEFAULT_PS=y
+CONFIG_CFG80211_DEBUGFS=y
+CONFIG_CFG80211_CRDA_SUPPORT=y
+# CONFIG_CFG80211_WEXT is not set
+CONFIG_MAC80211=y
+CONFIG_MAC80211_HAS_RC=y
+CONFIG_MAC80211_RC_MINSTREL=y
+CONFIG_MAC80211_RC_DEFAULT_MINSTREL=y
+CONFIG_MAC80211_RC_DEFAULT="minstrel_ht"
+# CONFIG_MAC80211_MESH is not set
+CONFIG_MAC80211_LEDS=y
+# CONFIG_MAC80211_DEBUGFS is not set
+# CONFIG_MAC80211_MESSAGE_TRACING is not set
+# CONFIG_MAC80211_DEBUG_MENU is not set
+CONFIG_MAC80211_STA_HASH_MAX_SIZE=0
+CONFIG_RFKILL=y
+CONFIG_RFKILL_LEDS=y
+# CONFIG_RFKILL_INPUT is not set
+# CONFIG_RFKILL_GPIO is not set
+# CONFIG_NET_9P is not set
+# CONFIG_CAIF is not set
+# CONFIG_CEPH_LIB is not set
+CONFIG_NFC=y
+CONFIG_NFC_DIGITAL=y
+CONFIG_NFC_NCI=y
+# CONFIG_NFC_NCI_SPI is not set
+# CONFIG_NFC_NCI_UART is not set
+CONFIG_NFC_HCI=y
+# CONFIG_NFC_SHDLC is not set
+
+#
+# Near Field Communication (NFC) devices
+#
+# CONFIG_NFC_TRF7970A is not set
+# CONFIG_NFC_SIM is not set
+# CONFIG_NFC_PORT100 is not set
+# CONFIG_NFC_VIRTUAL_NCI is not set
+# CONFIG_NFC_FDP is not set
+# CONFIG_NFC_PN533_USB is not set
+# CONFIG_NFC_PN533_I2C is not set
+# CONFIG_NFC_PN532_UART is not set
+# CONFIG_NFC_MRVL_USB is not set
+# CONFIG_NFC_ST_NCI_I2C is not set
+# CONFIG_NFC_ST_NCI_SPI is not set
+CONFIG_NFC_NXP_NCI=y
+CONFIG_NFC_NXP_NCI_I2C=y
+CONFIG_NFC_S3FWRN5=y
+CONFIG_NFC_S3FWRN5_I2C=y
+# CONFIG_NFC_S3FWRN82_UART is not set
+# CONFIG_NFC_ST95HF is not set
+# end of Near Field Communication (NFC) devices
+
+# CONFIG_PSAMPLE is not set
+# CONFIG_NET_IFE is not set
+# CONFIG_LWTUNNEL is not set
+CONFIG_DST_CACHE=y
+CONFIG_GRO_CELLS=y
+CONFIG_NET_SELFTESTS=y
+CONFIG_NET_SOCK_MSG=y
+CONFIG_PAGE_POOL=y
+CONFIG_PAGE_POOL_STATS=y
+CONFIG_FAILOVER=y
+CONFIG_ETHTOOL_NETLINK=y
+
+#
+# Device Drivers
+#
+CONFIG_ARM_AMBA=y
+CONFIG_HAVE_PCI=y
+CONFIG_GENERIC_PCI_IOMAP=y
+CONFIG_PCI=y
+CONFIG_PCI_DOMAINS=y
+CONFIG_PCI_DOMAINS_GENERIC=y
+CONFIG_PCI_SYSCALL=y
+CONFIG_PCIEPORTBUS=y
+CONFIG_PCIEAER=y
+# CONFIG_PCIEAER_INJECT is not set
+# CONFIG_PCIE_ECRC is not set
+CONFIG_PCIEASPM=y
+CONFIG_PCIEASPM_DEFAULT=y
+# CONFIG_PCIEASPM_POWERSAVE is not set
+# CONFIG_PCIEASPM_POWER_SUPERSAVE is not set
+# CONFIG_PCIEASPM_PERFORMANCE is not set
+CONFIG_PCIE_PME=y
+# CONFIG_PCIE_DPC is not set
+# CONFIG_PCIE_PTM is not set
+CONFIG_PCI_MSI=y
+CONFIG_PCI_QUIRKS=y
+# CONFIG_PCI_DEBUG is not set
+# CONFIG_PCI_STUB is not set
+# CONFIG_PCI_IOV is not set
+# CONFIG_PCI_PRI is not set
+# CONFIG_PCI_PASID is not set
+CONFIG_PCI_DYNAMIC_OF_NODES=y
+# CONFIG_PCIE_BUS_TUNE_OFF is not set
+CONFIG_PCIE_BUS_DEFAULT=y
+# CONFIG_PCIE_BUS_SAFE is not set
+# CONFIG_PCIE_BUS_PERFORMANCE is not set
+# CONFIG_PCIE_BUS_PEER2PEER is not set
+CONFIG_VGA_ARB=y
+CONFIG_VGA_ARB_MAX_GPUS=16
+# CONFIG_HOTPLUG_PCI is not set
+
+#
+# PCI controller drivers
+#
+# CONFIG_PCIE_ALTERA is not set
+# CONFIG_PCI_HOST_THUNDER_PEM is not set
+# CONFIG_PCI_HOST_THUNDER_ECAM is not set
+# CONFIG_PCI_FTPCI100 is not set
+# CONFIG_PCI_HOST_GENERIC is not set
+# CONFIG_PCIE_MICROCHIP_HOST is not set
+# CONFIG_PCI_XGENE is not set
+# CONFIG_PCIE_XILINX is not set
+
+#
+# Cadence-based PCIe controllers
+#
+# CONFIG_PCIE_CADENCE_PLAT_HOST is not set
+# CONFIG_PCIE_CADENCE_PLAT_EP is not set
+# end of Cadence-based PCIe controllers
+
+#
+# DesignWare-based PCIe controllers
+#
+CONFIG_PCIE_DW=y
+CONFIG_PCIE_DW_HOST=y
+# CONFIG_PCIE_AL is not set
+# CONFIG_PCI_MESON is not set
+# CONFIG_PCI_HISI is not set
+# CONFIG_PCIE_KIRIN is not set
+CONFIG_PCIE_DW_PLAT=y
+CONFIG_PCIE_DW_PLAT_HOST=y
+# CONFIG_PCIE_DW_PLAT_EP is not set
+CONFIG_PCIE_QCOM=y
+# CONFIG_PCIE_QCOM_EP is not set
+# end of DesignWare-based PCIe controllers
+
+#
+# Mobiveil-based PCIe controllers
+#
+# end of Mobiveil-based PCIe controllers
+# end of PCI controller drivers
+
+#
+# PCI Endpoint
+#
+CONFIG_PCI_ENDPOINT=y
+CONFIG_PCI_ENDPOINT_CONFIGFS=y
+# CONFIG_PCI_EPF_TEST is not set
+# CONFIG_PCI_EPF_NTB is not set
+# CONFIG_PCI_EPF_MHI is not set
+# end of PCI Endpoint
+
+#
+# PCI switch controller drivers
+#
+# CONFIG_PCI_SW_SWITCHTEC is not set
+# end of PCI switch controller drivers
+
+# CONFIG_CXL_BUS is not set
+# CONFIG_PCCARD is not set
+# CONFIG_RAPIDIO is not set
+
+#
+# Generic Driver Options
+#
+CONFIG_AUXILIARY_BUS=y
+CONFIG_UEVENT_HELPER=y
+CONFIG_UEVENT_HELPER_PATH=""
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+# CONFIG_DEVTMPFS_SAFE is not set
+CONFIG_STANDALONE=y
+CONFIG_PREVENT_FIRMWARE_BUILD=y
+
+#
+# Firmware loader
+#
+CONFIG_FW_LOADER=y
+CONFIG_FW_LOADER_DEBUG=y
+CONFIG_FW_LOADER_PAGED_BUF=y
+CONFIG_FW_LOADER_SYSFS=y
+CONFIG_EXTRA_FIRMWARE=""
+# CONFIG_FW_LOADER_USER_HELPER is not set
+CONFIG_FW_LOADER_COMPRESS=y
+CONFIG_FW_LOADER_COMPRESS_XZ=y
+CONFIG_FW_LOADER_COMPRESS_ZSTD=y
+CONFIG_FW_CACHE=y
+CONFIG_FW_UPLOAD=y
+# end of Firmware loader
+
+CONFIG_WANT_DEV_COREDUMP=y
+CONFIG_ALLOW_DEV_COREDUMP=y
+CONFIG_DEV_COREDUMP=y
+# CONFIG_DEBUG_DRIVER is not set
+# CONFIG_DEBUG_DEVRES is not set
+# CONFIG_DEBUG_TEST_DRIVER_REMOVE is not set
+# CONFIG_TEST_ASYNC_DRIVER_PROBE is not set
+CONFIG_GENERIC_CPU_DEVICES=y
+CONFIG_GENERIC_CPU_AUTOPROBE=y
+CONFIG_GENERIC_CPU_VULNERABILITIES=y
+CONFIG_SOC_BUS=y
+CONFIG_REGMAP=y
+CONFIG_REGMAP_I2C=y
+CONFIG_REGMAP_SLIMBUS=y
+CONFIG_REGMAP_SPI=y
+CONFIG_REGMAP_SPMI=y
+CONFIG_REGMAP_MMIO=y
+CONFIG_REGMAP_IRQ=y
+CONFIG_REGMAP_SOUNDWIRE=y
+CONFIG_DMA_SHARED_BUFFER=y
+# CONFIG_DMA_FENCE_TRACE is not set
+CONFIG_GENERIC_ARCH_TOPOLOGY=y
+# CONFIG_FW_DEVLINK_SYNC_STATE_TIMEOUT is not set
+# end of Generic Driver Options
+
+#
+# Bus devices
+#
+CONFIG_ARM_CCI=y
+CONFIG_ARM_CCI400_COMMON=y
+# CONFIG_MOXTET is not set
+CONFIG_QCOM_EBI2=y
+CONFIG_QCOM_SSC_BLOCK_BUS=y
+# CONFIG_VEXPRESS_CONFIG is not set
+CONFIG_MHI_BUS=y
+CONFIG_MHI_BUS_DEBUG=y
+CONFIG_MHI_BUS_PCI_GENERIC=y
+CONFIG_MHI_BUS_EP=y
+# end of Bus devices
+
+#
+# Cache Drivers
+#
+# end of Cache Drivers
+
+# CONFIG_CONNECTOR is not set
+
+#
+# Firmware Drivers
+#
+
+#
+# ARM System Control and Management Interface Protocol
+#
+# CONFIG_ARM_SCMI_PROTOCOL is not set
+# end of ARM System Control and Management Interface Protocol
+
+# CONFIG_ARM_SCPI_PROTOCOL is not set
+# CONFIG_FIRMWARE_MEMMAP is not set
+# CONFIG_FW_CFG_SYSFS is not set
+# CONFIG_ARM_FFA_TRANSPORT is not set
+# CONFIG_GOOGLE_FIRMWARE is not set
+CONFIG_ARM_PSCI_FW=y
+# CONFIG_ARM_PSCI_CHECKER is not set
+
+#
+# Qualcomm firmware drivers
+#
+CONFIG_QCOM_SCM=y
+CONFIG_QCOM_SCM_DOWNLOAD_MODE_DEFAULT=y
+CONFIG_QCOM_QSEECOM=y
+# end of Qualcomm firmware drivers
+
+CONFIG_HAVE_ARM_SMCCC=y
+CONFIG_HAVE_ARM_SMCCC_DISCOVERY=y
+CONFIG_ARM_SMCCC_SOC_ID=y
+
+#
+# Tegra firmware driver
+#
+# end of Tegra firmware driver
+# end of Firmware Drivers
+
+CONFIG_GNSS=y
+# CONFIG_GNSS_MTK_SERIAL is not set
+# CONFIG_GNSS_SIRF_SERIAL is not set
+# CONFIG_GNSS_UBX_SERIAL is not set
+# CONFIG_GNSS_USB is not set
+CONFIG_MTD=y
+# CONFIG_MTD_TESTS is not set
+
+#
+# Partition parsers
+#
+# CONFIG_MTD_CMDLINE_PARTS is not set
+CONFIG_MTD_OF_PARTS=y
+# CONFIG_MTD_AFS_PARTS is not set
+# CONFIG_MTD_REDBOOT_PARTS is not set
+CONFIG_MTD_QCOMSMEM_PARTS=y
+# end of Partition parsers
+
+#
+# User Modules And Translation Layers
+#
+# CONFIG_MTD_BLOCK is not set
+# CONFIG_MTD_BLOCK_RO is not set
+# CONFIG_FTL is not set
+# CONFIG_NFTL is not set
+# CONFIG_INFTL is not set
+# CONFIG_RFD_FTL is not set
+# CONFIG_SSFDC is not set
+# CONFIG_SM_FTL is not set
+# CONFIG_MTD_OOPS is not set
+# CONFIG_MTD_SWAP is not set
+# CONFIG_MTD_PARTITIONED_MASTER is not set
+
+#
+# RAM/ROM/Flash chip drivers
+#
+# CONFIG_MTD_CFI is not set
+# CONFIG_MTD_JEDECPROBE is not set
+CONFIG_MTD_MAP_BANK_WIDTH_1=y
+CONFIG_MTD_MAP_BANK_WIDTH_2=y
+CONFIG_MTD_MAP_BANK_WIDTH_4=y
+CONFIG_MTD_CFI_I1=y
+CONFIG_MTD_CFI_I2=y
+# CONFIG_MTD_RAM is not set
+# CONFIG_MTD_ROM is not set
+# CONFIG_MTD_ABSENT is not set
+# end of RAM/ROM/Flash chip drivers
+
+#
+# Mapping drivers for chip access
+#
+# CONFIG_MTD_COMPLEX_MAPPINGS is not set
+# CONFIG_MTD_PLATRAM is not set
+# end of Mapping drivers for chip access
+
+#
+# Self-contained MTD device drivers
+#
+# CONFIG_MTD_PMC551 is not set
+# CONFIG_MTD_DATAFLASH is not set
+# CONFIG_MTD_MCHP23K256 is not set
+# CONFIG_MTD_MCHP48L640 is not set
+# CONFIG_MTD_SST25L is not set
+# CONFIG_MTD_SLRAM is not set
+# CONFIG_MTD_PHRAM is not set
+# CONFIG_MTD_MTDRAM is not set
+# CONFIG_MTD_BLOCK2MTD is not set
+
+#
+# Disk-On-Chip Device Drivers
+#
+# CONFIG_MTD_DOCG3 is not set
+# end of Self-contained MTD device drivers
+
+#
+# NAND
+#
+# CONFIG_MTD_ONENAND is not set
+# CONFIG_MTD_RAW_NAND is not set
+# CONFIG_MTD_SPI_NAND is not set
+
+#
+# ECC engine support
+#
+# CONFIG_MTD_NAND_ECC_SW_HAMMING is not set
+# CONFIG_MTD_NAND_ECC_SW_BCH is not set
+# CONFIG_MTD_NAND_ECC_MXIC is not set
+# end of ECC engine support
+# end of NAND
+
+#
+# LPDDR & LPDDR2 PCM memory drivers
+#
+# CONFIG_MTD_LPDDR is not set
+# end of LPDDR & LPDDR2 PCM memory drivers
+
+# CONFIG_MTD_SPI_NOR is not set
+# CONFIG_MTD_UBI is not set
+# CONFIG_MTD_HYPERBUS is not set
+CONFIG_DTC=y
+CONFIG_OF=y
+# CONFIG_OF_UNITTEST is not set
+CONFIG_OF_FLATTREE=y
+CONFIG_OF_EARLY_FLATTREE=y
+CONFIG_OF_KOBJ=y
+CONFIG_OF_DYNAMIC=y
+CONFIG_OF_ADDRESS=y
+CONFIG_OF_IRQ=y
+CONFIG_OF_RESERVED_MEM=y
+CONFIG_OF_RESOLVE=y
+CONFIG_OF_OVERLAY=y
+# CONFIG_PARPORT is not set
+CONFIG_BLK_DEV=y
+# CONFIG_BLK_DEV_NULL_BLK is not set
+CONFIG_CDROM=y
+# CONFIG_BLK_DEV_PCIESSD_MTIP32XX is not set
+CONFIG_ZRAM=m
+CONFIG_ZRAM_DEF_COMP_LZORLE=y
+# CONFIG_ZRAM_DEF_COMP_ZSTD is not set
+# CONFIG_ZRAM_DEF_COMP_LZ4 is not set
+# CONFIG_ZRAM_DEF_COMP_LZO is not set
+# CONFIG_ZRAM_DEF_COMP_LZ4HC is not set
+# CONFIG_ZRAM_DEF_COMP_842 is not set
+CONFIG_ZRAM_DEF_COMP="lzo-rle"
+CONFIG_ZRAM_WRITEBACK=y
+CONFIG_ZRAM_TRACK_ENTRY_ACTIME=y
+CONFIG_ZRAM_MEMORY_TRACKING=y
+# CONFIG_ZRAM_MULTI_COMP is not set
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_BLK_DEV_LOOP_MIN_COUNT=8
+# CONFIG_BLK_DEV_DRBD is not set
+# CONFIG_BLK_DEV_NBD is not set
+CONFIG_BLK_DEV_RAM=y
+CONFIG_BLK_DEV_RAM_COUNT=16
+CONFIG_BLK_DEV_RAM_SIZE=8192
+CONFIG_CDROM_PKTCDVD=y
+CONFIG_CDROM_PKTCDVD_BUFFERS=8
+CONFIG_CDROM_PKTCDVD_WCACHE=y
+# CONFIG_ATA_OVER_ETH is not set
+CONFIG_VIRTIO_BLK=y
+# CONFIG_BLK_DEV_RBD is not set
+# CONFIG_BLK_DEV_UBLK is not set
+
+#
+# NVME Support
+#
+CONFIG_NVME_CORE=y
+CONFIG_BLK_DEV_NVME=y
+# CONFIG_NVME_MULTIPATH is not set
+# CONFIG_NVME_VERBOSE_ERRORS is not set
+# CONFIG_NVME_HWMON is not set
+# CONFIG_NVME_FC is not set
+# CONFIG_NVME_TCP is not set
+# CONFIG_NVME_HOST_AUTH is not set
+# CONFIG_NVME_TARGET is not set
+# end of NVME Support
+
+#
+# Misc devices
+#
+# CONFIG_AD525X_DPOT is not set
+# CONFIG_DUMMY_IRQ is not set
+# CONFIG_PHANTOM is not set
+# CONFIG_TIFM_CORE is not set
+# CONFIG_ICS932S401 is not set
+# CONFIG_ENCLOSURE_SERVICES is not set
+# CONFIG_HI6421V600_IRQ is not set
+# CONFIG_HP_ILO is not set
+CONFIG_QCOM_COINCELL=y
+CONFIG_QCOM_FASTRPC=y
+# CONFIG_APDS9802ALS is not set
+# CONFIG_ISL29003 is not set
+# CONFIG_ISL29020 is not set
+# CONFIG_SENSORS_TSL2550 is not set
+# CONFIG_SENSORS_BH1770 is not set
+# CONFIG_SENSORS_APDS990X is not set
+# CONFIG_HMC6352 is not set
+# CONFIG_DS1682 is not set
+# CONFIG_LATTICE_ECP3_CONFIG is not set
+# CONFIG_SRAM is not set
+# CONFIG_DW_XDATA_PCIE is not set
+# CONFIG_PCI_ENDPOINT_TEST is not set
+# CONFIG_XILINX_SDFEC is not set
+# CONFIG_HISI_HIKEY_USB is not set
+# CONFIG_OPEN_DICE is not set
+CONFIG_VCPU_STALL_DETECTOR=y
+# CONFIG_NSM is not set
+# CONFIG_C2PORT is not set
+
+#
+# EEPROM support
+#
+# CONFIG_EEPROM_AT24 is not set
+# CONFIG_EEPROM_AT25 is not set
+# CONFIG_EEPROM_MAX6875 is not set
+# CONFIG_EEPROM_93CX6 is not set
+# CONFIG_EEPROM_93XX46 is not set
+# CONFIG_EEPROM_IDT_89HPESX is not set
+# CONFIG_EEPROM_EE1004 is not set
+# end of EEPROM support
+
+# CONFIG_CB710_CORE is not set
+
+#
+# Texas Instruments shared transport line discipline
+#
+# CONFIG_TI_ST is not set
+# end of Texas Instruments shared transport line discipline
+
+# CONFIG_SENSORS_LIS3_SPI is not set
+# CONFIG_SENSORS_LIS3_I2C is not set
+# CONFIG_ALTERA_STAPL is not set
+# CONFIG_VMWARE_VMCI is not set
+# CONFIG_GENWQE is not set
+# CONFIG_ECHO is not set
+# CONFIG_BCM_VK is not set
+# CONFIG_MISC_ALCOR_PCI is not set
+# CONFIG_MISC_RTSX_PCI is not set
+# CONFIG_MISC_RTSX_USB is not set
+# CONFIG_UACCE is not set
+# CONFIG_PVPANIC is not set
+# CONFIG_GP_PCI1XXXX is not set
+# end of Misc devices
+
+#
+# SCSI device support
+#
+CONFIG_SCSI_MOD=y
+# CONFIG_RAID_ATTRS is not set
+CONFIG_SCSI_COMMON=y
+CONFIG_SCSI=y
+CONFIG_SCSI_DMA=y
+CONFIG_SCSI_PROC_FS=y
+
+#
+# SCSI support type (disk, tape, CD-ROM)
+#
+CONFIG_BLK_DEV_SD=y
+# CONFIG_CHR_DEV_ST is not set
+# CONFIG_BLK_DEV_SR is not set
+CONFIG_CHR_DEV_SG=y
+CONFIG_BLK_DEV_BSG=y
+CONFIG_CHR_DEV_SCH=y
+# CONFIG_SCSI_CONSTANTS is not set
+# CONFIG_SCSI_LOGGING is not set
+CONFIG_SCSI_SCAN_ASYNC=y
+
+#
+# SCSI Transports
+#
+# CONFIG_SCSI_SPI_ATTRS is not set
+# CONFIG_SCSI_FC_ATTRS is not set
+# CONFIG_SCSI_ISCSI_ATTRS is not set
+# CONFIG_SCSI_SAS_ATTRS is not set
+# CONFIG_SCSI_SAS_LIBSAS is not set
+# CONFIG_SCSI_SRP_ATTRS is not set
+# end of SCSI Transports
+
+CONFIG_SCSI_LOWLEVEL=y
+# CONFIG_ISCSI_TCP is not set
+# CONFIG_ISCSI_BOOT_SYSFS is not set
+# CONFIG_SCSI_CXGB3_ISCSI is not set
+# CONFIG_SCSI_BNX2_ISCSI is not set
+# CONFIG_BE2ISCSI is not set
+# CONFIG_BLK_DEV_3W_XXXX_RAID is not set
+# CONFIG_SCSI_HPSA is not set
+# CONFIG_SCSI_3W_9XXX is not set
+# CONFIG_SCSI_3W_SAS is not set
+# CONFIG_SCSI_ACARD is not set
+# CONFIG_SCSI_AACRAID is not set
+# CONFIG_SCSI_AIC7XXX is not set
+# CONFIG_SCSI_AIC79XX is not set
+# CONFIG_SCSI_AIC94XX is not set
+# CONFIG_SCSI_MVSAS is not set
+# CONFIG_SCSI_MVUMI is not set
+# CONFIG_SCSI_ADVANSYS is not set
+# CONFIG_SCSI_ARCMSR is not set
+# CONFIG_SCSI_ESAS2R is not set
+# CONFIG_MEGARAID_NEWGEN is not set
+# CONFIG_MEGARAID_LEGACY is not set
+# CONFIG_MEGARAID_SAS is not set
+# CONFIG_SCSI_MPT3SAS is not set
+# CONFIG_SCSI_MPT2SAS is not set
+# CONFIG_SCSI_MPI3MR is not set
+# CONFIG_SCSI_SMARTPQI is not set
+# CONFIG_SCSI_HPTIOP is not set
+# CONFIG_SCSI_BUSLOGIC is not set
+# CONFIG_SCSI_MYRB is not set
+# CONFIG_SCSI_MYRS is not set
+# CONFIG_SCSI_SNIC is not set
+# CONFIG_SCSI_DMX3191D is not set
+# CONFIG_SCSI_FDOMAIN_PCI is not set
+# CONFIG_SCSI_IPS is not set
+# CONFIG_SCSI_INITIO is not set
+# CONFIG_SCSI_INIA100 is not set
+# CONFIG_SCSI_STEX is not set
+# CONFIG_SCSI_SYM53C8XX_2 is not set
+# CONFIG_SCSI_IPR is not set
+# CONFIG_SCSI_QLOGIC_1280 is not set
+# CONFIG_SCSI_QLA_ISCSI is not set
+# CONFIG_SCSI_DC395x is not set
+# CONFIG_SCSI_AM53C974 is not set
+# CONFIG_SCSI_WD719X is not set
+# CONFIG_SCSI_DEBUG is not set
+# CONFIG_SCSI_PMCRAID is not set
+# CONFIG_SCSI_PM8001 is not set
+CONFIG_SCSI_VIRTIO=y
+CONFIG_SCSI_DH=y
+# CONFIG_SCSI_DH_RDAC is not set
+# CONFIG_SCSI_DH_HP_SW is not set
+# CONFIG_SCSI_DH_EMC is not set
+# CONFIG_SCSI_DH_ALUA is not set
+# end of SCSI device support
+
+# CONFIG_ATA is not set
+CONFIG_MD=y
+CONFIG_BLK_DEV_MD=y
+CONFIG_MD_AUTODETECT=y
+# CONFIG_MD_BITMAP_FILE is not set
+# CONFIG_MD_RAID0 is not set
+# CONFIG_MD_RAID1 is not set
+# CONFIG_MD_RAID10 is not set
+# CONFIG_MD_RAID456 is not set
+# CONFIG_BCACHE is not set
+CONFIG_BLK_DEV_DM_BUILTIN=y
+CONFIG_BLK_DEV_DM=y
+CONFIG_DM_DEBUG=y
+CONFIG_DM_BUFIO=y
+# CONFIG_DM_DEBUG_BLOCK_MANAGER_LOCKING is not set
+CONFIG_DM_BIO_PRISON=y
+CONFIG_DM_PERSISTENT_DATA=y
+# CONFIG_DM_UNSTRIPED is not set
+CONFIG_DM_CRYPT=y
+CONFIG_DM_SNAPSHOT=y
+CONFIG_DM_THIN_PROVISIONING=y
+# CONFIG_DM_CACHE is not set
+# CONFIG_DM_WRITECACHE is not set
+# CONFIG_DM_EBS is not set
+# CONFIG_DM_ERA is not set
+# CONFIG_DM_CLONE is not set
+# CONFIG_DM_MIRROR is not set
+# CONFIG_DM_RAID is not set
+# CONFIG_DM_ZERO is not set
+# CONFIG_DM_MULTIPATH is not set
+# CONFIG_DM_DELAY is not set
+# CONFIG_DM_DUST is not set
+# CONFIG_DM_INIT is not set
+CONFIG_DM_UEVENT=y
+# CONFIG_DM_FLAKEY is not set
+CONFIG_DM_VERITY=y
+CONFIG_DM_VERITY_VERIFY_ROOTHASH_SIG=y
+CONFIG_DM_VERITY_FEC=y
+# CONFIG_DM_SWITCH is not set
+# CONFIG_DM_LOG_WRITES is not set
+# CONFIG_DM_INTEGRITY is not set
+CONFIG_DM_AUDIT=y
+# CONFIG_DM_VDO is not set
+CONFIG_DM_USER=y
+# CONFIG_TARGET_CORE is not set
+# CONFIG_FUSION is not set
+
+#
+# IEEE 1394 (FireWire) support
+#
+# CONFIG_FIREWIRE is not set
+# CONFIG_FIREWIRE_NOSY is not set
+# end of IEEE 1394 (FireWire) support
+
+CONFIG_NETDEVICES=y
+CONFIG_NET_CORE=y
+# CONFIG_BONDING is not set
+CONFIG_DUMMY=m
+CONFIG_WIREGUARD=m
+# CONFIG_WIREGUARD_DEBUG is not set
+# CONFIG_EQUALIZER is not set
+# CONFIG_NET_FC is not set
+# CONFIG_NET_TEAM is not set
+CONFIG_MACVLAN=y
+CONFIG_MACVTAP=y
+CONFIG_IPVLAN_L3S=y
+CONFIG_IPVLAN=m
+# CONFIG_IPVTAP is not set
+CONFIG_VXLAN=m
+# CONFIG_GENEVE is not set
+# CONFIG_BAREUDP is not set
+# CONFIG_GTP is not set
+# CONFIG_AMT is not set
+# CONFIG_MACSEC is not set
+# CONFIG_NETCONSOLE is not set
+CONFIG_TUN=y
+CONFIG_TAP=y
+# CONFIG_TUN_VNET_CROSS_LE is not set
+CONFIG_VETH=y
+CONFIG_VIRTIO_NET=y
+# CONFIG_NLMON is not set
+# CONFIG_NETKIT is not set
+# CONFIG_NET_VRF is not set
+CONFIG_MHI_NET=y
+# CONFIG_ARCNET is not set
+# CONFIG_ETHERNET is not set
+# CONFIG_FDDI is not set
+# CONFIG_HIPPI is not set
+CONFIG_QCOM_IPA=y
+CONFIG_PHYLIB=y
+CONFIG_SWPHY=y
+# CONFIG_LED_TRIGGER_PHY is not set
+CONFIG_PHYLIB_LEDS=y
+CONFIG_FIXED_PHY=y
+
+#
+# MII PHY device drivers
+#
+# CONFIG_AMD_PHY is not set
+# CONFIG_ADIN_PHY is not set
+# CONFIG_ADIN1100_PHY is not set
+# CONFIG_AQUANTIA_PHY is not set
+CONFIG_AX88796B_PHY=y
+# CONFIG_BROADCOM_PHY is not set
+# CONFIG_BCM54140_PHY is not set
+# CONFIG_BCM7XXX_PHY is not set
+# CONFIG_BCM84881_PHY is not set
+# CONFIG_BCM87XX_PHY is not set
+# CONFIG_CICADA_PHY is not set
+# CONFIG_CORTINA_PHY is not set
+# CONFIG_DAVICOM_PHY is not set
+# CONFIG_ICPLUS_PHY is not set
+# CONFIG_LXT_PHY is not set
+# CONFIG_INTEL_XWAY_PHY is not set
+# CONFIG_LSI_ET1011C_PHY is not set
+# CONFIG_MARVELL_PHY is not set
+# CONFIG_MARVELL_10G_PHY is not set
+# CONFIG_MARVELL_88Q2XXX_PHY is not set
+# CONFIG_MARVELL_88X2222_PHY is not set
+# CONFIG_MAXLINEAR_GPHY is not set
+# CONFIG_MEDIATEK_GE_PHY is not set
+# CONFIG_MICREL_PHY is not set
+# CONFIG_MICROCHIP_T1S_PHY is not set
+# CONFIG_MICROCHIP_PHY is not set
+# CONFIG_MICROCHIP_T1_PHY is not set
+# CONFIG_MICROSEMI_PHY is not set
+# CONFIG_MOTORCOMM_PHY is not set
+# CONFIG_NATIONAL_PHY is not set
+# CONFIG_NXP_CBTX_PHY is not set
+# CONFIG_NXP_C45_TJA11XX_PHY is not set
+# CONFIG_NXP_TJA11XX_PHY is not set
+# CONFIG_NCN26000_PHY is not set
+# CONFIG_AT803X_PHY is not set
+# CONFIG_QCA83XX_PHY is not set
+# CONFIG_QCA808X_PHY is not set
+# CONFIG_QCA807X_PHY is not set
+# CONFIG_QSEMI_PHY is not set
+# CONFIG_REALTEK_PHY is not set
+# CONFIG_RENESAS_PHY is not set
+# CONFIG_ROCKCHIP_PHY is not set
+# CONFIG_SMSC_PHY is not set
+# CONFIG_STE10XP is not set
+# CONFIG_TERANETICS_PHY is not set
+# CONFIG_DP83822_PHY is not set
+# CONFIG_DP83TC811_PHY is not set
+# CONFIG_DP83848_PHY is not set
+# CONFIG_DP83867_PHY is not set
+# CONFIG_DP83869_PHY is not set
+# CONFIG_DP83TD510_PHY is not set
+# CONFIG_DP83TG720_PHY is not set
+# CONFIG_VITESSE_PHY is not set
+# CONFIG_XILINX_GMII2RGMII is not set
+# CONFIG_MICREL_KS8995MA is not set
+# CONFIG_PSE_CONTROLLER is not set
+CONFIG_MDIO_DEVICE=y
+CONFIG_MDIO_BUS=y
+CONFIG_FWNODE_MDIO=y
+CONFIG_OF_MDIO=y
+CONFIG_MDIO_DEVRES=y
+# CONFIG_MDIO_BITBANG is not set
+# CONFIG_MDIO_BCM_UNIMAC is not set
+# CONFIG_MDIO_HISI_FEMAC is not set
+# CONFIG_MDIO_MVUSB is not set
+# CONFIG_MDIO_MSCC_MIIM is not set
+# CONFIG_MDIO_OCTEON is not set
+# CONFIG_MDIO_IPQ4019 is not set
+# CONFIG_MDIO_IPQ8064 is not set
+# CONFIG_MDIO_THUNDER is not set
+
+#
+# MDIO Multiplexers
+#
+# CONFIG_MDIO_BUS_MUX_GPIO is not set
+# CONFIG_MDIO_BUS_MUX_MULTIPLEXER is not set
+# CONFIG_MDIO_BUS_MUX_MMIOREG is not set
+
+#
+# PCS device drivers
+#
+# end of PCS device drivers
+
+CONFIG_PPP=y
+CONFIG_PPP_BSDCOMP=y
+CONFIG_PPP_DEFLATE=y
+CONFIG_PPP_FILTER=y
+CONFIG_PPP_MPPE=y
+# CONFIG_PPP_MULTILINK is not set
+# CONFIG_PPPOE is not set
+CONFIG_PPPOE_HASH_BITS=4
+CONFIG_PPP_ASYNC=y
+# CONFIG_PPP_SYNC_TTY is not set
+# CONFIG_SLIP is not set
+CONFIG_SLHC=y
+# CONFIG_USB_NET_DRIVERS is not set
+CONFIG_WLAN=y
+CONFIG_WLAN_VENDOR_ADMTEK=y
+# CONFIG_ADM8211 is not set
+CONFIG_ATH_COMMON=y
+CONFIG_WLAN_VENDOR_ATH=y
+# CONFIG_ATH_DEBUG is not set
+# CONFIG_ATH5K is not set
+# CONFIG_ATH5K_PCI is not set
+# CONFIG_ATH9K is not set
+# CONFIG_ATH9K_HTC is not set
+# CONFIG_CARL9170 is not set
+# CONFIG_ATH6KL is not set
+# CONFIG_AR5523 is not set
+# CONFIG_WIL6210 is not set
+CONFIG_ATH10K=y
+CONFIG_ATH10K_CE=y
+# CONFIG_ATH10K_PCI is not set
+# CONFIG_ATH10K_SDIO is not set
+# CONFIG_ATH10K_USB is not set
+CONFIG_ATH10K_SNOC=y
+CONFIG_ATH10K_DEBUG=y
+CONFIG_ATH10K_DEBUGFS=y
+CONFIG_ATH10K_SPECTRAL=y
+# CONFIG_ATH10K_TRACING is not set
+CONFIG_WCN36XX=y
+CONFIG_WCN36XX_DEBUGFS=y
+CONFIG_ATH11K=m
+CONFIG_ATH11K_AHB=m
+CONFIG_ATH11K_PCI=m
+# CONFIG_ATH11K_DEBUG is not set
+# CONFIG_ATH11K_TRACING is not set
+# CONFIG_ATH12K is not set
+# CONFIG_WLAN_VENDOR_ATMEL is not set
+# CONFIG_WLAN_VENDOR_BROADCOM is not set
+# CONFIG_WLAN_VENDOR_INTEL is not set
+# CONFIG_WLAN_VENDOR_INTERSIL is not set
+# CONFIG_WLAN_VENDOR_MARVELL is not set
+# CONFIG_WLAN_VENDOR_MEDIATEK is not set
+# CONFIG_WLAN_VENDOR_MICROCHIP is not set
+CONFIG_WLAN_VENDOR_PURELIFI=y
+# CONFIG_PLFXLC is not set
+# CONFIG_WLAN_VENDOR_RALINK is not set
+# CONFIG_WLAN_VENDOR_REALTEK is not set
+# CONFIG_WLAN_VENDOR_RSI is not set
+# CONFIG_WLAN_VENDOR_SILABS is not set
+# CONFIG_WLAN_VENDOR_ST is not set
+# CONFIG_WLAN_VENDOR_TI is not set
+# CONFIG_WLAN_VENDOR_ZYDAS is not set
+# CONFIG_WLAN_VENDOR_QUANTENNA is not set
+# CONFIG_MAC80211_HWSIM is not set
+# CONFIG_VIRT_WIFI is not set
+# CONFIG_WAN is not set
+
+#
+# Wireless WAN
+#
+CONFIG_WWAN=y
+CONFIG_WWAN_DEBUGFS=y
+# CONFIG_WWAN_HWSIM is not set
+CONFIG_MHI_WWAN_CTRL=y
+CONFIG_MHI_WWAN_MBIM=y
+CONFIG_QCOM_BAM_DMUX=y
+CONFIG_RPMSG_WWAN_CTRL=y
+# CONFIG_IOSM is not set
+# CONFIG_MTK_T7XX is not set
+# end of Wireless WAN
+
+# CONFIG_VMXNET3 is not set
+# CONFIG_USB4_NET is not set
+# CONFIG_NETDEVSIM is not set
+CONFIG_NET_FAILOVER=y
+# CONFIG_ISDN is not set
+
+#
+# Input device support
+#
+CONFIG_INPUT=y
+CONFIG_INPUT_LEDS=y
+CONFIG_INPUT_FF_MEMLESS=y
+# CONFIG_INPUT_SPARSEKMAP is not set
+CONFIG_INPUT_MATRIXKMAP=y
+
+#
+# Userland interfaces
+#
+# CONFIG_INPUT_MOUSEDEV is not set
+# CONFIG_INPUT_JOYDEV is not set
+CONFIG_INPUT_EVDEV=y
+# CONFIG_INPUT_EVBUG is not set
+
+#
+# Input Device Drivers
+#
+CONFIG_INPUT_KEYBOARD=y
+# CONFIG_KEYBOARD_ADC is not set
+# CONFIG_KEYBOARD_ADP5588 is not set
+# CONFIG_KEYBOARD_ADP5589 is not set
+# CONFIG_KEYBOARD_ATKBD is not set
+# CONFIG_KEYBOARD_QT1050 is not set
+# CONFIG_KEYBOARD_QT1070 is not set
+# CONFIG_KEYBOARD_QT2160 is not set
+# CONFIG_KEYBOARD_DLINK_DIR685 is not set
+# CONFIG_KEYBOARD_LKKBD is not set
+CONFIG_KEYBOARD_GPIO=y
+# CONFIG_KEYBOARD_GPIO_POLLED is not set
+# CONFIG_KEYBOARD_TCA6416 is not set
+# CONFIG_KEYBOARD_TCA8418 is not set
+# CONFIG_KEYBOARD_MATRIX is not set
+# CONFIG_KEYBOARD_LM8323 is not set
+# CONFIG_KEYBOARD_LM8333 is not set
+# CONFIG_KEYBOARD_MAX7359 is not set
+# CONFIG_KEYBOARD_MCS is not set
+# CONFIG_KEYBOARD_MPR121 is not set
+# CONFIG_KEYBOARD_NEWTON is not set
+# CONFIG_KEYBOARD_OPENCORES is not set
+# CONFIG_KEYBOARD_PINEPHONE is not set
+# CONFIG_KEYBOARD_SAMSUNG is not set
+# CONFIG_KEYBOARD_STOWAWAY is not set
+# CONFIG_KEYBOARD_SUNKBD is not set
+# CONFIG_KEYBOARD_OMAP4 is not set
+CONFIG_KEYBOARD_TM2_TOUCHKEY=y
+# CONFIG_KEYBOARD_XTKBD is not set
+# CONFIG_KEYBOARD_CAP11XX is not set
+# CONFIG_KEYBOARD_BCM is not set
+# CONFIG_KEYBOARD_CYPRESS_SF is not set
+# CONFIG_INPUT_MOUSE is not set
+CONFIG_INPUT_JOYSTICK=y
+# CONFIG_JOYSTICK_ANALOG is not set
+# CONFIG_JOYSTICK_A3D is not set
+# CONFIG_JOYSTICK_ADC is not set
+# CONFIG_JOYSTICK_ADI is not set
+# CONFIG_JOYSTICK_COBRA is not set
+# CONFIG_JOYSTICK_GF2K is not set
+# CONFIG_JOYSTICK_GRIP is not set
+# CONFIG_JOYSTICK_GRIP_MP is not set
+# CONFIG_JOYSTICK_GUILLEMOT is not set
+# CONFIG_JOYSTICK_INTERACT is not set
+# CONFIG_JOYSTICK_SIDEWINDER is not set
+# CONFIG_JOYSTICK_TMDC is not set
+# CONFIG_JOYSTICK_IFORCE is not set
+# CONFIG_JOYSTICK_WARRIOR is not set
+# CONFIG_JOYSTICK_MAGELLAN is not set
+# CONFIG_JOYSTICK_SPACEORB is not set
+# CONFIG_JOYSTICK_SPACEBALL is not set
+# CONFIG_JOYSTICK_STINGER is not set
+# CONFIG_JOYSTICK_TWIDJOY is not set
+# CONFIG_JOYSTICK_ZHENHUA is not set
+# CONFIG_JOYSTICK_AS5011 is not set
+# CONFIG_JOYSTICK_JOYDUMP is not set
+# CONFIG_JOYSTICK_XPAD is not set
+# CONFIG_JOYSTICK_PSXPAD_SPI is not set
+# CONFIG_JOYSTICK_PXRC is not set
+# CONFIG_JOYSTICK_QWIIC is not set
+# CONFIG_JOYSTICK_FSIA6B is not set
+# CONFIG_JOYSTICK_SENSEHAT is not set
+# CONFIG_JOYSTICK_SEESAW is not set
+# CONFIG_INPUT_TABLET is not set
+CONFIG_INPUT_TOUCHSCREEN=y
+# CONFIG_TOUCHSCREEN_ADS7846 is not set
+# CONFIG_TOUCHSCREEN_AD7877 is not set
+# CONFIG_TOUCHSCREEN_AD7879 is not set
+# CONFIG_TOUCHSCREEN_ADC is not set
+# CONFIG_TOUCHSCREEN_AR1021_I2C is not set
+# CONFIG_TOUCHSCREEN_ATMEL_MXT is not set
+# CONFIG_TOUCHSCREEN_AUO_PIXCIR is not set
+# CONFIG_TOUCHSCREEN_BU21013 is not set
+# CONFIG_TOUCHSCREEN_BU21029 is not set
+# CONFIG_TOUCHSCREEN_CHIPONE_ICN8318 is not set
+# CONFIG_TOUCHSCREEN_CY8CTMA140 is not set
+# CONFIG_TOUCHSCREEN_CY8CTMG110 is not set
+# CONFIG_TOUCHSCREEN_CYTTSP_CORE is not set
+# CONFIG_TOUCHSCREEN_CYTTSP4_CORE is not set
+# CONFIG_TOUCHSCREEN_CYTTSP5 is not set
+# CONFIG_TOUCHSCREEN_DYNAPRO is not set
+# CONFIG_TOUCHSCREEN_HAMPSHIRE is not set
+# CONFIG_TOUCHSCREEN_EETI is not set
+# CONFIG_TOUCHSCREEN_EGALAX is not set
+# CONFIG_TOUCHSCREEN_EGALAX_SERIAL is not set
+# CONFIG_TOUCHSCREEN_EXC3000 is not set
+# CONFIG_TOUCHSCREEN_FUJITSU is not set
+CONFIG_TOUCHSCREEN_GOODIX=y
+CONFIG_TOUCHSCREEN_GOODIX_BERLIN_CORE=y
+CONFIG_TOUCHSCREEN_GOODIX_BERLIN_I2C=y
+CONFIG_TOUCHSCREEN_GOODIX_BERLIN_SPI=y
+# CONFIG_TOUCHSCREEN_HIDEEP is not set
+# CONFIG_TOUCHSCREEN_HYCON_HY46XX is not set
+# CONFIG_TOUCHSCREEN_HYNITRON_CSTXXX is not set
+# CONFIG_TOUCHSCREEN_ILI210X is not set
+# CONFIG_TOUCHSCREEN_ILITEK is not set
+# CONFIG_TOUCHSCREEN_S6SY761 is not set
+# CONFIG_TOUCHSCREEN_GUNZE is not set
+# CONFIG_TOUCHSCREEN_EKTF2127 is not set
+# CONFIG_TOUCHSCREEN_ELAN is not set
+# CONFIG_TOUCHSCREEN_ELO is not set
+# CONFIG_TOUCHSCREEN_WACOM_W8001 is not set
+# CONFIG_TOUCHSCREEN_WACOM_I2C is not set
+# CONFIG_TOUCHSCREEN_MAX11801 is not set
+# CONFIG_TOUCHSCREEN_MCS5000 is not set
+# CONFIG_TOUCHSCREEN_MMS114 is not set
+# CONFIG_TOUCHSCREEN_MELFAS_MIP4 is not set
+# CONFIG_TOUCHSCREEN_MSG2638 is not set
+# CONFIG_TOUCHSCREEN_MTOUCH is not set
+CONFIG_TOUCHSCREEN_NOVATEK_NVT_TS=m
+# CONFIG_TOUCHSCREEN_IMAGIS is not set
+CONFIG_TOUCHSCREEN_NT36XXX=m
+CONFIG_TOUCHSCREEN_NT36XXX_SPI=y
+# CONFIG_TOUCHSCREEN_IMX6UL_TSC is not set
+# CONFIG_TOUCHSCREEN_INEXIO is not set
+# CONFIG_TOUCHSCREEN_PENMOUNT is not set
+CONFIG_TOUCHSCREEN_EDT_FT5X06=y
+# CONFIG_TOUCHSCREEN_TOUCHRIGHT is not set
+# CONFIG_TOUCHSCREEN_TOUCHWIN is not set
+# CONFIG_TOUCHSCREEN_PIXCIR is not set
+# CONFIG_TOUCHSCREEN_WDT87XX_I2C is not set
+# CONFIG_TOUCHSCREEN_USB_COMPOSITE is not set
+# CONFIG_TOUCHSCREEN_TOUCHIT213 is not set
+# CONFIG_TOUCHSCREEN_TSC_SERIO is not set
+# CONFIG_TOUCHSCREEN_TSC2004 is not set
+# CONFIG_TOUCHSCREEN_TSC2005 is not set
+# CONFIG_TOUCHSCREEN_TSC2007 is not set
+# CONFIG_TOUCHSCREEN_RM_TS is not set
+# CONFIG_TOUCHSCREEN_SILEAD is not set
+# CONFIG_TOUCHSCREEN_SIS_I2C is not set
+# CONFIG_TOUCHSCREEN_ST1232 is not set
+# CONFIG_TOUCHSCREEN_STMFTS is not set
+# CONFIG_TOUCHSCREEN_SURFACE3_SPI is not set
+# CONFIG_TOUCHSCREEN_SX8654 is not set
+# CONFIG_TOUCHSCREEN_TPS6507X is not set
+# CONFIG_TOUCHSCREEN_ZET6223 is not set
+# CONFIG_TOUCHSCREEN_ZFORCE is not set
+# CONFIG_TOUCHSCREEN_COLIBRI_VF50 is not set
+# CONFIG_TOUCHSCREEN_ROHM_BU21023 is not set
+# CONFIG_TOUCHSCREEN_IQS5XX is not set
+# CONFIG_TOUCHSCREEN_IQS7211 is not set
+# CONFIG_TOUCHSCREEN_ZINITIX is not set
+# CONFIG_TOUCHSCREEN_HIMAX_HX83112B is not set
+CONFIG_INPUT_MISC=y
+# CONFIG_INPUT_AD714X is not set
+# CONFIG_INPUT_ATMEL_CAPTOUCH is not set
+# CONFIG_INPUT_BMA150 is not set
+# CONFIG_INPUT_E3X0_BUTTON is not set
+CONFIG_INPUT_PM8941_PWRKEY=y
+CONFIG_INPUT_PM8XXX_VIBRATOR=y
+# CONFIG_INPUT_MMA8450 is not set
+# CONFIG_INPUT_GPIO_BEEPER is not set
+# CONFIG_INPUT_GPIO_DECODER is not set
+CONFIG_INPUT_GPIO_VIBRA=y
+# CONFIG_INPUT_ATI_REMOTE2 is not set
+# CONFIG_INPUT_KEYSPAN_REMOTE is not set
+# CONFIG_INPUT_KXTJ9 is not set
+# CONFIG_INPUT_POWERMATE is not set
+# CONFIG_INPUT_YEALINK is not set
+# CONFIG_INPUT_CM109 is not set
+# CONFIG_INPUT_REGULATOR_HAPTIC is not set
+CONFIG_INPUT_UINPUT=m
+# CONFIG_INPUT_PCF8574 is not set
+# CONFIG_INPUT_PWM_BEEPER is not set
+# CONFIG_INPUT_PWM_VIBRA is not set
+# CONFIG_INPUT_GPIO_ROTARY_ENCODER is not set
+# CONFIG_INPUT_DA7280_HAPTICS is not set
+# CONFIG_INPUT_ADXL34X is not set
+# CONFIG_INPUT_IBM_PANEL is not set
+# CONFIG_INPUT_IMS_PCU is not set
+# CONFIG_INPUT_IQS269A is not set
+# CONFIG_INPUT_IQS626A is not set
+# CONFIG_INPUT_IQS7222 is not set
+# CONFIG_INPUT_CMA3000 is not set
+# CONFIG_INPUT_DRV260X_HAPTICS is not set
+# CONFIG_INPUT_DRV2665_HAPTICS is not set
+# CONFIG_INPUT_DRV2667_HAPTICS is not set
+CONFIG_RMI4_CORE=y
+CONFIG_RMI4_I2C=y
+# CONFIG_RMI4_SPI is not set
+# CONFIG_RMI4_SMB is not set
+# CONFIG_RMI4_F03 is not set
+CONFIG_RMI4_2D_SENSOR=y
+CONFIG_RMI4_F11=y
+CONFIG_RMI4_F12=y
+# CONFIG_RMI4_F30 is not set
+# CONFIG_RMI4_F34 is not set
+# CONFIG_RMI4_F3A is not set
+# CONFIG_RMI4_F54 is not set
+# CONFIG_RMI4_F55 is not set
+
+#
+# Hardware I/O ports
+#
+# CONFIG_SERIO is not set
+# CONFIG_GAMEPORT is not set
+# end of Hardware I/O ports
+# end of Input device support
+
+#
+# Character devices
+#
+CONFIG_TTY=y
+CONFIG_VT=y
+CONFIG_CONSOLE_TRANSLATIONS=y
+CONFIG_VT_CONSOLE=y
+CONFIG_VT_CONSOLE_SLEEP=y
+CONFIG_VT_HW_CONSOLE_BINDING=y
+CONFIG_UNIX98_PTYS=y
+# CONFIG_LEGACY_PTYS is not set
+CONFIG_LEGACY_TIOCSTI=y
+CONFIG_LDISC_AUTOLOAD=y
+
+#
+# Serial drivers
+#
+CONFIG_SERIAL_EARLYCON=y
+# CONFIG_SERIAL_8250 is not set
+
+#
+# Non-8250 serial port support
+#
+CONFIG_SERIAL_AMBA_PL010=y
+CONFIG_SERIAL_AMBA_PL010_CONSOLE=y
+CONFIG_SERIAL_AMBA_PL011=y
+CONFIG_SERIAL_AMBA_PL011_CONSOLE=y
+# CONFIG_SERIAL_EARLYCON_SEMIHOST is not set
+# CONFIG_SERIAL_MAX3100 is not set
+# CONFIG_SERIAL_MAX310X is not set
+# CONFIG_SERIAL_UARTLITE is not set
+CONFIG_SERIAL_CORE=y
+CONFIG_SERIAL_CORE_CONSOLE=y
+# CONFIG_SERIAL_JSM is not set
+CONFIG_SERIAL_MSM=y
+CONFIG_SERIAL_MSM_CONSOLE=y
+CONFIG_SERIAL_QCOM_GENI=y
+CONFIG_SERIAL_QCOM_GENI_CONSOLE=y
+# CONFIG_SERIAL_SIFIVE is not set
+# CONFIG_SERIAL_SCCNXP is not set
+# CONFIG_SERIAL_SC16IS7XX is not set
+# CONFIG_SERIAL_ALTERA_JTAGUART is not set
+# CONFIG_SERIAL_ALTERA_UART is not set
+# CONFIG_SERIAL_XILINX_PS_UART is not set
+# CONFIG_SERIAL_ARC is not set
+# CONFIG_SERIAL_RP2 is not set
+# CONFIG_SERIAL_FSL_LPUART is not set
+# CONFIG_SERIAL_FSL_LINFLEXUART is not set
+# CONFIG_SERIAL_CONEXANT_DIGICOLOR is not set
+# CONFIG_SERIAL_SPRD is not set
+# end of Serial drivers
+
+# CONFIG_SERIAL_NONSTANDARD is not set
+# CONFIG_N_GSM is not set
+# CONFIG_NOZOMI is not set
+# CONFIG_NULL_TTY is not set
+CONFIG_HVC_DRIVER=y
+# CONFIG_HVC_DCC is not set
+# CONFIG_RPMSG_TTY is not set
+CONFIG_SERIAL_DEV_BUS=y
+CONFIG_SERIAL_DEV_CTRL_TTYPORT=y
+# CONFIG_TTY_PRINTK is not set
+CONFIG_VIRTIO_CONSOLE=y
+# CONFIG_IPMI_HANDLER is not set
+# CONFIG_SSIF_IPMI_BMC is not set
+# CONFIG_IPMB_DEVICE_INTERFACE is not set
+CONFIG_HW_RANDOM=y
+# CONFIG_HW_RANDOM_TIMERIOMEM is not set
+# CONFIG_HW_RANDOM_BA431 is not set
+# CONFIG_HW_RANDOM_VIRTIO is not set
+# CONFIG_HW_RANDOM_CCTRNG is not set
+# CONFIG_HW_RANDOM_XIPHERA is not set
+CONFIG_HW_RANDOM_ARM_SMCCC_TRNG=y
+CONFIG_HW_RANDOM_CN10K=y
+# CONFIG_APPLICOM is not set
+CONFIG_DEVMEM=y
+CONFIG_DEVPORT=y
+# CONFIG_TCG_TPM is not set
+# CONFIG_XILLYBUS is not set
+# CONFIG_XILLYUSB is not set
+# end of Character devices
+
+#
+# I2C support
+#
+CONFIG_I2C=y
+CONFIG_I2C_BOARDINFO=y
+CONFIG_I2C_COMPAT=y
+CONFIG_I2C_CHARDEV=y
+# CONFIG_I2C_MUX is not set
+CONFIG_I2C_HELPER_AUTO=y
+CONFIG_I2C_ALGOBIT=y
+
+#
+# I2C Hardware Bus support
+#
+
+#
+# PC SMBus host controller drivers
+#
+# CONFIG_I2C_ALI1535 is not set
+# CONFIG_I2C_ALI1563 is not set
+# CONFIG_I2C_ALI15X3 is not set
+# CONFIG_I2C_AMD756 is not set
+# CONFIG_I2C_AMD8111 is not set
+# CONFIG_I2C_I801 is not set
+# CONFIG_I2C_ISCH is not set
+# CONFIG_I2C_PIIX4 is not set
+# CONFIG_I2C_NFORCE2 is not set
+# CONFIG_I2C_NVIDIA_GPU is not set
+# CONFIG_I2C_SIS5595 is not set
+# CONFIG_I2C_SIS630 is not set
+# CONFIG_I2C_SIS96X is not set
+# CONFIG_I2C_VIA is not set
+# CONFIG_I2C_VIAPRO is not set
+
+#
+# I2C system bus drivers (mostly embedded / system-on-chip)
+#
+# CONFIG_I2C_CADENCE is not set
+# CONFIG_I2C_CBUS_GPIO is not set
+# CONFIG_I2C_DESIGNWARE_PLATFORM is not set
+# CONFIG_I2C_DESIGNWARE_PCI is not set
+# CONFIG_I2C_EMEV2 is not set
+CONFIG_I2C_GPIO=y
+# CONFIG_I2C_GPIO_FAULT_INJECTOR is not set
+# CONFIG_I2C_HISI is not set
+# CONFIG_I2C_NOMADIK is not set
+# CONFIG_I2C_OCORES is not set
+# CONFIG_I2C_PCA_PLATFORM is not set
+CONFIG_I2C_QCOM_CCI=y
+CONFIG_I2C_QCOM_GENI=y
+CONFIG_I2C_QUP=y
+# CONFIG_I2C_RK3X is not set
+# CONFIG_I2C_SIMTEC is not set
+# CONFIG_I2C_THUNDERX is not set
+# CONFIG_I2C_XILINX is not set
+
+#
+# External I2C/SMBus adapter drivers
+#
+# CONFIG_I2C_DIOLAN_U2C is not set
+# CONFIG_I2C_CP2615 is not set
+# CONFIG_I2C_PCI1XXXX is not set
+# CONFIG_I2C_ROBOTFUZZ_OSIF is not set
+# CONFIG_I2C_TAOS_EVM is not set
+# CONFIG_I2C_TINY_USB is not set
+
+#
+# Other I2C/SMBus bus drivers
+#
+# CONFIG_I2C_VIRTIO is not set
+# end of I2C Hardware Bus support
+
+# CONFIG_I2C_STUB is not set
+CONFIG_I2C_SLAVE=y
+# CONFIG_I2C_SLAVE_EEPROM is not set
+# CONFIG_I2C_SLAVE_TESTUNIT is not set
+# CONFIG_I2C_DEBUG_CORE is not set
+# CONFIG_I2C_DEBUG_ALGO is not set
+# CONFIG_I2C_DEBUG_BUS is not set
+# end of I2C support
+
+# CONFIG_I3C is not set
+CONFIG_SPI=y
+CONFIG_SPI_DEBUG=y
+CONFIG_SPI_MASTER=y
+CONFIG_SPI_MEM=y
+
+#
+# SPI Master Controller Drivers
+#
+# CONFIG_SPI_ALTERA is not set
+# CONFIG_SPI_AXI_SPI_ENGINE is not set
+CONFIG_SPI_BITBANG=y
+# CONFIG_SPI_CADENCE is not set
+# CONFIG_SPI_CADENCE_QUADSPI is not set
+# CONFIG_SPI_CADENCE_XSPI is not set
+# CONFIG_SPI_DESIGNWARE is not set
+# CONFIG_SPI_GPIO is not set
+# CONFIG_SPI_FSL_SPI is not set
+# CONFIG_SPI_MICROCHIP_CORE is not set
+# CONFIG_SPI_MICROCHIP_CORE_QSPI is not set
+# CONFIG_SPI_OC_TINY is not set
+# CONFIG_SPI_PCI1XXXX is not set
+# CONFIG_SPI_PL022 is not set
+# CONFIG_SPI_PXA2XX is not set
+CONFIG_SPI_QCOM_QSPI=y
+CONFIG_SPI_QUP=y
+CONFIG_SPI_QCOM_GENI=y
+# CONFIG_SPI_SC18IS602 is not set
+# CONFIG_SPI_SIFIVE is not set
+# CONFIG_SPI_SN_F_OSPI is not set
+# CONFIG_SPI_MXIC is not set
+# CONFIG_SPI_THUNDERX is not set
+# CONFIG_SPI_XCOMM is not set
+# CONFIG_SPI_XILINX is not set
+# CONFIG_SPI_ZYNQMP_GQSPI is not set
+# CONFIG_SPI_AMD is not set
+
+#
+# SPI Multiplexer support
+#
+# CONFIG_SPI_MUX is not set
+
+#
+# SPI Protocol Masters
+#
+CONFIG_SPI_SPIDEV=y
+# CONFIG_SPI_LOOPBACK_TEST is not set
+# CONFIG_SPI_TLE62X0 is not set
+# CONFIG_SPI_SLAVE is not set
+CONFIG_SPI_DYNAMIC=y
+CONFIG_SPMI=y
+# CONFIG_SPMI_HISI3670 is not set
+CONFIG_SPMI_MSM_PMIC_ARB=y
+# CONFIG_HSI is not set
+CONFIG_PPS=y
+# CONFIG_PPS_DEBUG is not set
+
+#
+# PPS clients support
+#
+# CONFIG_PPS_CLIENT_KTIMER is not set
+# CONFIG_PPS_CLIENT_LDISC is not set
+# CONFIG_PPS_CLIENT_GPIO is not set
+
+#
+# PPS generators support
+#
+
+#
+# PTP clock support
+#
+CONFIG_PTP_1588_CLOCK=y
+CONFIG_PTP_1588_CLOCK_OPTIONAL=y
+
+#
+# Enable PHYLIB and NETWORK_PHY_TIMESTAMPING to see the additional clocks.
+#
+CONFIG_PTP_1588_CLOCK_KVM=y
+# CONFIG_PTP_1588_CLOCK_IDT82P33 is not set
+# CONFIG_PTP_1588_CLOCK_IDTCM is not set
+# CONFIG_PTP_1588_CLOCK_FC3W is not set
+# CONFIG_PTP_1588_CLOCK_MOCK is not set
+# end of PTP clock support
+
+CONFIG_PINCTRL=y
+CONFIG_GENERIC_PINCTRL_GROUPS=y
+CONFIG_PINMUX=y
+CONFIG_GENERIC_PINMUX_FUNCTIONS=y
+CONFIG_PINCONF=y
+CONFIG_GENERIC_PINCONF=y
+# CONFIG_DEBUG_PINCTRL is not set
+# CONFIG_PINCTRL_AW9523 is not set
+# CONFIG_PINCTRL_CY8C95X0 is not set
+# CONFIG_PINCTRL_MCP23S08 is not set
+# CONFIG_PINCTRL_MICROCHIP_SGPIO is not set
+# CONFIG_PINCTRL_OCELOT is not set
+CONFIG_PINCTRL_SINGLE=y
+# CONFIG_PINCTRL_STMFX is not set
+# CONFIG_PINCTRL_SX150X is not set
+CONFIG_PINCTRL_MSM=y
+# CONFIG_PINCTRL_IPQ5018 is not set
+# CONFIG_PINCTRL_IPQ5332 is not set
+# CONFIG_PINCTRL_IPQ8074 is not set
+# CONFIG_PINCTRL_IPQ6018 is not set
+# CONFIG_PINCTRL_IPQ9574 is not set
+# CONFIG_PINCTRL_MDM9607 is not set
+# CONFIG_PINCTRL_MSM8916 is not set
+# CONFIG_PINCTRL_MSM8953 is not set
+CONFIG_PINCTRL_MSM8976=y
+# CONFIG_PINCTRL_MSM8994 is not set
+CONFIG_PINCTRL_MSM8996=y
+CONFIG_PINCTRL_MSM8998=y
+# CONFIG_PINCTRL_QCM2290 is not set
+# CONFIG_PINCTRL_QCS404 is not set
+# CONFIG_PINCTRL_QDU1000 is not set
+# CONFIG_PINCTRL_SA8775P is not set
+CONFIG_PINCTRL_SC7180=y
+CONFIG_PINCTRL_SC7280=y
+# CONFIG_PINCTRL_SC8180X is not set
+# CONFIG_PINCTRL_SC8280XP is not set
+CONFIG_PINCTRL_SDM660=y
+# CONFIG_PINCTRL_SDM670 is not set
+# CONFIG_PINCTRL_SDM845 is not set
+# CONFIG_PINCTRL_SDX75 is not set
+CONFIG_PINCTRL_SM4450=y
+# CONFIG_PINCTRL_SM6115 is not set
+# CONFIG_PINCTRL_SM6125 is not set
+# CONFIG_PINCTRL_SM6350 is not set
+# CONFIG_PINCTRL_SM6375 is not set
+CONFIG_PINCTRL_SM7150=y
+# CONFIG_PINCTRL_SM8150 is not set
+# CONFIG_PINCTRL_SM8250 is not set
+# CONFIG_PINCTRL_SM8350 is not set
+# CONFIG_PINCTRL_SM8450 is not set
+# CONFIG_PINCTRL_SM8550 is not set
+CONFIG_PINCTRL_SM8650=y
+CONFIG_PINCTRL_X1E80100=y
+CONFIG_PINCTRL_QCOM_SPMI_PMIC=y
+CONFIG_PINCTRL_QCOM_SSBI_PMIC=y
+CONFIG_PINCTRL_LPASS_LPI=y
+CONFIG_PINCTRL_SC7280_LPASS_LPI=y
+CONFIG_PINCTRL_SM6115_LPASS_LPI=y
+# CONFIG_PINCTRL_SM8250_LPASS_LPI is not set
+CONFIG_PINCTRL_SM8350_LPASS_LPI=y
+# CONFIG_PINCTRL_SM8450_LPASS_LPI is not set
+# CONFIG_PINCTRL_SC8280XP_LPASS_LPI is not set
+# CONFIG_PINCTRL_SM8550_LPASS_LPI is not set
+# CONFIG_PINCTRL_SM8650_LPASS_LPI is not set
+
+#
+# Renesas pinctrl drivers
+#
+# end of Renesas pinctrl drivers
+
+CONFIG_GPIOLIB=y
+CONFIG_GPIOLIB_FASTPATH_LIMIT=512
+CONFIG_OF_GPIO=y
+CONFIG_GPIOLIB_IRQCHIP=y
+# CONFIG_DEBUG_GPIO is not set
+# CONFIG_GPIO_SYSFS is not set
+CONFIG_GPIO_CDEV=y
+CONFIG_GPIO_CDEV_V1=y
+
+#
+# Memory mapped GPIO drivers
+#
+# CONFIG_GPIO_74XX_MMIO is not set
+# CONFIG_GPIO_ALTERA is not set
+# CONFIG_GPIO_CADENCE is not set
+# CONFIG_GPIO_DWAPB is not set
+# CONFIG_GPIO_FTGPIO010 is not set
+# CONFIG_GPIO_GENERIC_PLATFORM is not set
+# CONFIG_GPIO_GRGPIO is not set
+# CONFIG_GPIO_HISI is not set
+# CONFIG_GPIO_HLWD is not set
+# CONFIG_GPIO_LOGICVC is not set
+# CONFIG_GPIO_MB86S7X is not set
+# CONFIG_GPIO_PL061 is not set
+# CONFIG_GPIO_SIFIVE is not set
+# CONFIG_GPIO_SYSCON is not set
+CONFIG_GPIO_WCD934X=y
+# CONFIG_GPIO_XGENE is not set
+# CONFIG_GPIO_XILINX is not set
+# CONFIG_GPIO_AMD_FCH is not set
+# end of Memory mapped GPIO drivers
+
+#
+# I2C GPIO expanders
+#
+# CONFIG_GPIO_ADNP is not set
+# CONFIG_GPIO_FXL6408 is not set
+# CONFIG_GPIO_DS4520 is not set
+# CONFIG_GPIO_GW_PLD is not set
+# CONFIG_GPIO_MAX7300 is not set
+# CONFIG_GPIO_MAX732X is not set
+# CONFIG_GPIO_PCA953X is not set
+# CONFIG_GPIO_PCA9570 is not set
+# CONFIG_GPIO_PCF857X is not set
+# CONFIG_GPIO_TPIC2810 is not set
+# end of I2C GPIO expanders
+
+#
+# MFD GPIO expanders
+#
+# end of MFD GPIO expanders
+
+#
+# PCI GPIO expanders
+#
+# CONFIG_GPIO_BT8XX is not set
+# CONFIG_GPIO_PCI_IDIO_16 is not set
+# CONFIG_GPIO_PCIE_IDIO_24 is not set
+# CONFIG_GPIO_RDC321X is not set
+# end of PCI GPIO expanders
+
+#
+# SPI GPIO expanders
+#
+# CONFIG_GPIO_74X164 is not set
+# CONFIG_GPIO_MAX3191X is not set
+# CONFIG_GPIO_MAX7301 is not set
+# CONFIG_GPIO_MC33880 is not set
+# CONFIG_GPIO_PISOSR is not set
+# CONFIG_GPIO_XRA1403 is not set
+# end of SPI GPIO expanders
+
+#
+# USB GPIO expanders
+#
+# end of USB GPIO expanders
+
+#
+# Virtual GPIO drivers
+#
+# CONFIG_GPIO_AGGREGATOR is not set
+# CONFIG_GPIO_LATCH is not set
+# CONFIG_GPIO_MOCKUP is not set
+# CONFIG_GPIO_VIRTIO is not set
+# CONFIG_GPIO_SIM is not set
+# end of Virtual GPIO drivers
+
+# CONFIG_W1 is not set
+CONFIG_POWER_RESET=y
+# CONFIG_POWER_RESET_GPIO is not set
+# CONFIG_POWER_RESET_GPIO_RESTART is not set
+CONFIG_POWER_RESET_MSM=y
+CONFIG_POWER_RESET_QCOM_PON=y
+# CONFIG_POWER_RESET_LTC2952 is not set
+# CONFIG_POWER_RESET_REGULATOR is not set
+# CONFIG_POWER_RESET_RESTART is not set
+# CONFIG_POWER_RESET_XGENE is not set
+# CONFIG_POWER_RESET_SYSCON is not set
+# CONFIG_POWER_RESET_SYSCON_POWEROFF is not set
+CONFIG_REBOOT_MODE=y
+# CONFIG_SYSCON_REBOOT_MODE is not set
+# CONFIG_NVMEM_REBOOT_MODE is not set
+CONFIG_POWER_SUPPLY=y
+# CONFIG_POWER_SUPPLY_DEBUG is not set
+CONFIG_POWER_SUPPLY_HWMON=y
+# CONFIG_GENERIC_ADC_BATTERY is not set
+# CONFIG_IP5XXX_POWER is not set
+# CONFIG_TEST_POWER is not set
+# CONFIG_CHARGER_ADP5061 is not set
+# CONFIG_BATTERY_CW2015 is not set
+# CONFIG_BATTERY_DS2780 is not set
+# CONFIG_BATTERY_DS2781 is not set
+# CONFIG_BATTERY_DS2782 is not set
+CONFIG_BATTERY_QCOM_BATTMGR=y
+CONFIG_BATTERY_QCOM_QG=y
+# CONFIG_BATTERY_SAMSUNG_SDI is not set
+# CONFIG_BATTERY_SBS is not set
+# CONFIG_CHARGER_SBS is not set
+# CONFIG_BATTERY_BQ27XXX is not set
+# CONFIG_BATTERY_MAX17040 is not set
+# CONFIG_BATTERY_MAX17042 is not set
+# CONFIG_CHARGER_ISP1704 is not set
+# CONFIG_CHARGER_MAX8903 is not set
+# CONFIG_CHARGER_LP8727 is not set
+# CONFIG_CHARGER_GPIO is not set
+# CONFIG_CHARGER_MANAGER is not set
+# CONFIG_CHARGER_LT3651 is not set
+# CONFIG_CHARGER_LTC4162L is not set
+# CONFIG_CHARGER_DETECTOR_MAX14656 is not set
+# CONFIG_CHARGER_MAX77976 is not set
+CONFIG_CHARGER_QCOM_SMB5=y
+CONFIG_CHARGER_QCOM_SMBB=y
+# CONFIG_BATTERY_PM8916_BMS_VM is not set
+# CONFIG_CHARGER_PM8916_LBC is not set
+# CONFIG_CHARGER_BQ2415X is not set
+# CONFIG_CHARGER_BQ24190 is not set
+# CONFIG_CHARGER_BQ24257 is not set
+# CONFIG_CHARGER_BQ24735 is not set
+# CONFIG_CHARGER_BQ2515X is not set
+# CONFIG_CHARGER_BQ25890 is not set
+# CONFIG_CHARGER_BQ25980 is not set
+# CONFIG_CHARGER_BQ256XX is not set
+# CONFIG_CHARGER_SMB347 is not set
+# CONFIG_BATTERY_GAUGE_LTC2941 is not set
+# CONFIG_BATTERY_GOLDFISH is not set
+# CONFIG_BATTERY_RT5033 is not set
+# CONFIG_CHARGER_RT5033 is not set
+# CONFIG_CHARGER_RT9455 is not set
+# CONFIG_CHARGER_RT9467 is not set
+# CONFIG_CHARGER_RT9471 is not set
+# CONFIG_CHARGER_UCS1002 is not set
+# CONFIG_CHARGER_BD99954 is not set
+# CONFIG_BATTERY_UG3105 is not set
+CONFIG_CHARGER_QCOM_SMB2=y
+# CONFIG_FUEL_GAUGE_MM8013 is not set
+CONFIG_HWMON=y
+# CONFIG_HWMON_DEBUG_CHIP is not set
+
+#
+# Native drivers
+#
+# CONFIG_SENSORS_AD7314 is not set
+# CONFIG_SENSORS_AD7414 is not set
+# CONFIG_SENSORS_AD7418 is not set
+# CONFIG_SENSORS_ADM1021 is not set
+# CONFIG_SENSORS_ADM1025 is not set
+# CONFIG_SENSORS_ADM1026 is not set
+# CONFIG_SENSORS_ADM1029 is not set
+# CONFIG_SENSORS_ADM1031 is not set
+# CONFIG_SENSORS_ADM1177 is not set
+# CONFIG_SENSORS_ADM9240 is not set
+# CONFIG_SENSORS_ADT7310 is not set
+# CONFIG_SENSORS_ADT7410 is not set
+# CONFIG_SENSORS_ADT7411 is not set
+# CONFIG_SENSORS_ADT7462 is not set
+# CONFIG_SENSORS_ADT7470 is not set
+# CONFIG_SENSORS_ADT7475 is not set
+# CONFIG_SENSORS_AHT10 is not set
+# CONFIG_SENSORS_AQUACOMPUTER_D5NEXT is not set
+# CONFIG_SENSORS_AS370 is not set
+# CONFIG_SENSORS_ASC7621 is not set
+# CONFIG_SENSORS_ASUS_ROG_RYUJIN is not set
+# CONFIG_SENSORS_AXI_FAN_CONTROL is not set
+# CONFIG_SENSORS_ATXP1 is not set
+# CONFIG_SENSORS_CHIPCAP2 is not set
+# CONFIG_SENSORS_CORSAIR_CPRO is not set
+# CONFIG_SENSORS_CORSAIR_PSU is not set
+# CONFIG_SENSORS_DS620 is not set
+# CONFIG_SENSORS_DS1621 is not set
+# CONFIG_SENSORS_I5K_AMB is not set
+# CONFIG_SENSORS_F71805F is not set
+# CONFIG_SENSORS_F71882FG is not set
+# CONFIG_SENSORS_F75375S is not set
+# CONFIG_SENSORS_FTSTEUTATES is not set
+# CONFIG_SENSORS_GIGABYTE_WATERFORCE is not set
+# CONFIG_SENSORS_GL518SM is not set
+# CONFIG_SENSORS_GL520SM is not set
+# CONFIG_SENSORS_G760A is not set
+# CONFIG_SENSORS_G762 is not set
+# CONFIG_SENSORS_GPIO_FAN is not set
+# CONFIG_SENSORS_HIH6130 is not set
+# CONFIG_SENSORS_HS3001 is not set
+# CONFIG_SENSORS_IIO_HWMON is not set
+# CONFIG_SENSORS_IT87 is not set
+# CONFIG_SENSORS_JC42 is not set
+# CONFIG_SENSORS_POWERZ is not set
+# CONFIG_SENSORS_POWR1220 is not set
+# CONFIG_SENSORS_LINEAGE is not set
+# CONFIG_SENSORS_LTC2945 is not set
+# CONFIG_SENSORS_LTC2947_I2C is not set
+# CONFIG_SENSORS_LTC2947_SPI is not set
+# CONFIG_SENSORS_LTC2990 is not set
+# CONFIG_SENSORS_LTC2991 is not set
+# CONFIG_SENSORS_LTC2992 is not set
+# CONFIG_SENSORS_LTC4151 is not set
+# CONFIG_SENSORS_LTC4215 is not set
+# CONFIG_SENSORS_LTC4222 is not set
+# CONFIG_SENSORS_LTC4245 is not set
+# CONFIG_SENSORS_LTC4260 is not set
+# CONFIG_SENSORS_LTC4261 is not set
+# CONFIG_SENSORS_LTC4282 is not set
+# CONFIG_SENSORS_MAX1111 is not set
+# CONFIG_SENSORS_MAX127 is not set
+# CONFIG_SENSORS_MAX16065 is not set
+# CONFIG_SENSORS_MAX1619 is not set
+# CONFIG_SENSORS_MAX1668 is not set
+# CONFIG_SENSORS_MAX197 is not set
+# CONFIG_SENSORS_MAX31722 is not set
+# CONFIG_SENSORS_MAX31730 is not set
+# CONFIG_SENSORS_MAX31760 is not set
+# CONFIG_MAX31827 is not set
+# CONFIG_SENSORS_MAX6620 is not set
+# CONFIG_SENSORS_MAX6621 is not set
+# CONFIG_SENSORS_MAX6639 is not set
+# CONFIG_SENSORS_MAX6642 is not set
+# CONFIG_SENSORS_MAX6650 is not set
+# CONFIG_SENSORS_MAX6697 is not set
+# CONFIG_SENSORS_MAX31790 is not set
+# CONFIG_SENSORS_MC34VR500 is not set
+# CONFIG_SENSORS_MCP3021 is not set
+# CONFIG_SENSORS_TC654 is not set
+# CONFIG_SENSORS_TPS23861 is not set
+# CONFIG_SENSORS_MR75203 is not set
+# CONFIG_SENSORS_ADCXX is not set
+# CONFIG_SENSORS_LM63 is not set
+# CONFIG_SENSORS_LM70 is not set
+# CONFIG_SENSORS_LM73 is not set
+# CONFIG_SENSORS_LM75 is not set
+# CONFIG_SENSORS_LM77 is not set
+# CONFIG_SENSORS_LM78 is not set
+# CONFIG_SENSORS_LM80 is not set
+# CONFIG_SENSORS_LM83 is not set
+# CONFIG_SENSORS_LM85 is not set
+# CONFIG_SENSORS_LM87 is not set
+# CONFIG_SENSORS_LM90 is not set
+# CONFIG_SENSORS_LM92 is not set
+# CONFIG_SENSORS_LM93 is not set
+# CONFIG_SENSORS_LM95234 is not set
+# CONFIG_SENSORS_LM95241 is not set
+# CONFIG_SENSORS_LM95245 is not set
+# CONFIG_SENSORS_PC87360 is not set
+# CONFIG_SENSORS_PC87427 is not set
+# CONFIG_SENSORS_NTC_THERMISTOR is not set
+# CONFIG_SENSORS_NCT6683 is not set
+# CONFIG_SENSORS_NCT6775 is not set
+# CONFIG_SENSORS_NCT6775_I2C is not set
+# CONFIG_SENSORS_NCT7802 is not set
+# CONFIG_SENSORS_NCT7904 is not set
+# CONFIG_SENSORS_NPCM7XX is not set
+# CONFIG_SENSORS_NZXT_KRAKEN2 is not set
+# CONFIG_SENSORS_NZXT_KRAKEN3 is not set
+# CONFIG_SENSORS_NZXT_SMART2 is not set
+# CONFIG_SENSORS_OCC_P8_I2C is not set
+# CONFIG_SENSORS_PCF8591 is not set
+# CONFIG_PMBUS is not set
+# CONFIG_SENSORS_PT5161L is not set
+# CONFIG_SENSORS_PWM_FAN is not set
+# CONFIG_SENSORS_SBTSI is not set
+# CONFIG_SENSORS_SBRMI is not set
+# CONFIG_SENSORS_SHT15 is not set
+# CONFIG_SENSORS_SHT21 is not set
+# CONFIG_SENSORS_SHT3x is not set
+# CONFIG_SENSORS_SHT4x is not set
+# CONFIG_SENSORS_SHTC1 is not set
+# CONFIG_SENSORS_SIS5595 is not set
+# CONFIG_SENSORS_DME1737 is not set
+# CONFIG_SENSORS_EMC1403 is not set
+# CONFIG_SENSORS_EMC2103 is not set
+# CONFIG_SENSORS_EMC2305 is not set
+# CONFIG_SENSORS_EMC6W201 is not set
+# CONFIG_SENSORS_SMSC47M1 is not set
+# CONFIG_SENSORS_SMSC47M192 is not set
+# CONFIG_SENSORS_SMSC47B397 is not set
+# CONFIG_SENSORS_SCH5627 is not set
+# CONFIG_SENSORS_SCH5636 is not set
+# CONFIG_SENSORS_STTS751 is not set
+# CONFIG_SENSORS_ADC128D818 is not set
+# CONFIG_SENSORS_ADS7828 is not set
+# CONFIG_SENSORS_ADS7871 is not set
+# CONFIG_SENSORS_AMC6821 is not set
+# CONFIG_SENSORS_INA209 is not set
+# CONFIG_SENSORS_INA2XX is not set
+# CONFIG_SENSORS_INA238 is not set
+# CONFIG_SENSORS_INA3221 is not set
+# CONFIG_SENSORS_TC74 is not set
+# CONFIG_SENSORS_THMC50 is not set
+# CONFIG_SENSORS_TMP102 is not set
+# CONFIG_SENSORS_TMP103 is not set
+# CONFIG_SENSORS_TMP108 is not set
+# CONFIG_SENSORS_TMP401 is not set
+# CONFIG_SENSORS_TMP421 is not set
+# CONFIG_SENSORS_TMP464 is not set
+# CONFIG_SENSORS_TMP513 is not set
+# CONFIG_SENSORS_VIA686A is not set
+# CONFIG_SENSORS_VT1211 is not set
+# CONFIG_SENSORS_VT8231 is not set
+# CONFIG_SENSORS_W83773G is not set
+# CONFIG_SENSORS_W83781D is not set
+# CONFIG_SENSORS_W83791D is not set
+# CONFIG_SENSORS_W83792D is not set
+# CONFIG_SENSORS_W83793 is not set
+# CONFIG_SENSORS_W83795 is not set
+# CONFIG_SENSORS_W83L785TS is not set
+# CONFIG_SENSORS_W83L786NG is not set
+# CONFIG_SENSORS_W83627HF is not set
+# CONFIG_SENSORS_W83627EHF is not set
+CONFIG_THERMAL=y
+CONFIG_THERMAL_NETLINK=y
+# CONFIG_THERMAL_STATISTICS is not set
+# CONFIG_THERMAL_DEBUGFS is not set
+CONFIG_THERMAL_EMERGENCY_POWEROFF_DELAY_MS=0
+CONFIG_THERMAL_HWMON=y
+CONFIG_THERMAL_OF=y
+# CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE is not set
+CONFIG_THERMAL_DEFAULT_GOV_FAIR_SHARE=y
+# CONFIG_THERMAL_DEFAULT_GOV_USER_SPACE is not set
+CONFIG_THERMAL_GOV_FAIR_SHARE=y
+CONFIG_THERMAL_GOV_STEP_WISE=y
+# CONFIG_THERMAL_GOV_BANG_BANG is not set
+# CONFIG_THERMAL_GOV_USER_SPACE is not set
+# CONFIG_THERMAL_GOV_POWER_ALLOCATOR is not set
+CONFIG_CPU_THERMAL=y
+CONFIG_CPU_FREQ_THERMAL=y
+CONFIG_CPU_IDLE_THERMAL=y
+CONFIG_DEVFREQ_THERMAL=y
+CONFIG_THERMAL_EMULATION=y
+CONFIG_THERMAL_MMIO=y
+CONFIG_GENERIC_ADC_THERMAL=y
+
+#
+# Qualcomm thermal drivers
+#
+CONFIG_QCOM_TSENS=y
+CONFIG_QCOM_SPMI_ADC_TM5=y
+CONFIG_QCOM_SPMI_TEMP_ALARM=y
+CONFIG_QCOM_LMH=y
+# end of Qualcomm thermal drivers
+
+CONFIG_WATCHDOG=y
+CONFIG_WATCHDOG_CORE=y
+# CONFIG_WATCHDOG_NOWAYOUT is not set
+# CONFIG_WATCHDOG_HANDLE_BOOT_ENABLED is not set
+CONFIG_WATCHDOG_OPEN_TIMEOUT=35
+# CONFIG_WATCHDOG_SYSFS is not set
+CONFIG_WATCHDOG_HRTIMER_PRETIMEOUT=y
+
+#
+# Watchdog Pretimeout Governors
+#
+# CONFIG_WATCHDOG_PRETIMEOUT_GOV is not set
+
+#
+# Watchdog Device Drivers
+#
+CONFIG_SOFT_WATCHDOG=y
+# CONFIG_GPIO_WATCHDOG is not set
+# CONFIG_XILINX_WATCHDOG is not set
+# CONFIG_XILINX_WINDOW_WATCHDOG is not set
+# CONFIG_ZIIRAVE_WATCHDOG is not set
+# CONFIG_ARM_SP805_WATCHDOG is not set
+# CONFIG_ARM_SBSA_WATCHDOG is not set
+# CONFIG_CADENCE_WATCHDOG is not set
+# CONFIG_DW_WATCHDOG is not set
+# CONFIG_MAX63XX_WATCHDOG is not set
+CONFIG_QCOM_WDT=y
+# CONFIG_ARM_SMC_WATCHDOG is not set
+CONFIG_PM8916_WATCHDOG=y
+# CONFIG_ALIM7101_WDT is not set
+# CONFIG_I6300ESB_WDT is not set
+# CONFIG_HP_WATCHDOG is not set
+# CONFIG_MEN_A21_WDT is not set
+
+#
+# PCI-based Watchdog Cards
+#
+# CONFIG_PCIPCWATCHDOG is not set
+# CONFIG_WDTPCI is not set
+
+#
+# USB-based Watchdog Cards
+#
+# CONFIG_USBPCWATCHDOG is not set
+CONFIG_SSB_POSSIBLE=y
+# CONFIG_SSB is not set
+CONFIG_BCMA_POSSIBLE=y
+# CONFIG_BCMA is not set
+
+#
+# Multifunction device drivers
+#
+CONFIG_MFD_CORE=y
+# CONFIG_MFD_ACT8945A is not set
+# CONFIG_MFD_AS3711 is not set
+# CONFIG_MFD_SMPRO is not set
+# CONFIG_MFD_AS3722 is not set
+# CONFIG_PMIC_ADP5520 is not set
+# CONFIG_MFD_AAT2870_CORE is not set
+# CONFIG_MFD_ATMEL_FLEXCOM is not set
+# CONFIG_MFD_ATMEL_HLCDC is not set
+# CONFIG_MFD_BCM590XX is not set
+# CONFIG_MFD_BD9571MWV is not set
+# CONFIG_MFD_AXP20X_I2C is not set
+# CONFIG_MFD_CS42L43_I2C is not set
+# CONFIG_MFD_CS42L43_SDW is not set
+# CONFIG_MFD_MADERA is not set
+# CONFIG_MFD_MAX5970 is not set
+# CONFIG_PMIC_DA903X is not set
+# CONFIG_MFD_DA9052_SPI is not set
+# CONFIG_MFD_DA9052_I2C is not set
+# CONFIG_MFD_DA9055 is not set
+# CONFIG_MFD_DA9062 is not set
+# CONFIG_MFD_DA9063 is not set
+# CONFIG_MFD_DA9150 is not set
+# CONFIG_MFD_DLN2 is not set
+# CONFIG_MFD_GATEWORKS_GSC is not set
+# CONFIG_MFD_MC13XXX_SPI is not set
+# CONFIG_MFD_MC13XXX_I2C is not set
+# CONFIG_MFD_MP2629 is not set
+# CONFIG_MFD_HI6421_PMIC is not set
+# CONFIG_MFD_HI6421_SPMI is not set
+# CONFIG_LPC_ICH is not set
+# CONFIG_LPC_SCH is not set
+# CONFIG_MFD_IQS62X is not set
+# CONFIG_MFD_JANZ_CMODIO is not set
+# CONFIG_MFD_KEMPLD is not set
+# CONFIG_MFD_88PM800 is not set
+# CONFIG_MFD_88PM805 is not set
+# CONFIG_MFD_88PM860X is not set
+# CONFIG_MFD_MAX14577 is not set
+# CONFIG_MFD_MAX77541 is not set
+# CONFIG_MFD_MAX77620 is not set
+# CONFIG_MFD_MAX77650 is not set
+# CONFIG_MFD_MAX77686 is not set
+# CONFIG_MFD_MAX77693 is not set
+# CONFIG_MFD_MAX77714 is not set
+# CONFIG_MFD_MAX77843 is not set
+# CONFIG_MFD_MAX8907 is not set
+# CONFIG_MFD_MAX8925 is not set
+# CONFIG_MFD_MAX8997 is not set
+# CONFIG_MFD_MAX8998 is not set
+# CONFIG_MFD_MT6360 is not set
+# CONFIG_MFD_MT6370 is not set
+# CONFIG_MFD_MT6397 is not set
+# CONFIG_MFD_MENF21BMC is not set
+# CONFIG_MFD_OCELOT is not set
+# CONFIG_EZX_PCAP is not set
+# CONFIG_MFD_CPCAP is not set
+# CONFIG_MFD_VIPERBOARD is not set
+# CONFIG_MFD_NTXEC is not set
+# CONFIG_MFD_RETU is not set
+# CONFIG_MFD_PCF50633 is not set
+CONFIG_MFD_QCOM_RPM=y
+CONFIG_MFD_SPMI_PMIC=y
+# CONFIG_MFD_SY7636A is not set
+# CONFIG_MFD_RDC321X is not set
+# CONFIG_MFD_RT4831 is not set
+CONFIG_MFD_RT5033=y
+# CONFIG_MFD_RT5120 is not set
+# CONFIG_MFD_RC5T583 is not set
+# CONFIG_MFD_RK8XX_I2C is not set
+# CONFIG_MFD_RK8XX_SPI is not set
+# CONFIG_MFD_RN5T618 is not set
+# CONFIG_MFD_SEC_CORE is not set
+# CONFIG_MFD_SI476X_CORE is not set
+# CONFIG_MFD_SM501 is not set
+# CONFIG_MFD_SKY81452 is not set
+# CONFIG_MFD_STMPE is not set
+CONFIG_MFD_SYSCON=y
+# CONFIG_MFD_LP3943 is not set
+# CONFIG_MFD_LP8788 is not set
+# CONFIG_MFD_TI_LMU is not set
+# CONFIG_MFD_PALMAS is not set
+# CONFIG_TPS6105X is not set
+# CONFIG_TPS65010 is not set
+# CONFIG_TPS6507X is not set
+# CONFIG_MFD_TPS65086 is not set
+# CONFIG_MFD_TPS65090 is not set
+# CONFIG_MFD_TPS65217 is not set
+# CONFIG_MFD_TI_LP873X is not set
+# CONFIG_MFD_TI_LP87565 is not set
+# CONFIG_MFD_TPS65218 is not set
+# CONFIG_MFD_TPS65219 is not set
+# CONFIG_MFD_TPS6586X is not set
+# CONFIG_MFD_TPS65910 is not set
+# CONFIG_MFD_TPS65912_I2C is not set
+# CONFIG_MFD_TPS65912_SPI is not set
+# CONFIG_MFD_TPS6594_I2C is not set
+# CONFIG_MFD_TPS6594_SPI is not set
+# CONFIG_TWL4030_CORE is not set
+# CONFIG_TWL6040_CORE is not set
+# CONFIG_MFD_WL1273_CORE is not set
+# CONFIG_MFD_LM3533 is not set
+# CONFIG_MFD_TC3589X is not set
+# CONFIG_MFD_TQMX86 is not set
+# CONFIG_MFD_VX855 is not set
+# CONFIG_MFD_LOCHNAGAR is not set
+# CONFIG_MFD_ARIZONA_I2C is not set
+# CONFIG_MFD_ARIZONA_SPI is not set
+# CONFIG_MFD_WM8400 is not set
+# CONFIG_MFD_WM831X_I2C is not set
+# CONFIG_MFD_WM831X_SPI is not set
+# CONFIG_MFD_WM8350_I2C is not set
+# CONFIG_MFD_WM8994 is not set
+# CONFIG_MFD_ROHM_BD718XX is not set
+# CONFIG_MFD_ROHM_BD71828 is not set
+# CONFIG_MFD_ROHM_BD957XMUF is not set
+# CONFIG_MFD_STPMIC1 is not set
+# CONFIG_MFD_STMFX is not set
+CONFIG_MFD_WCD934X=y
+# CONFIG_MFD_ATC260X_I2C is not set
+CONFIG_MFD_QCOM_PM8008=y
+# CONFIG_RAVE_SP_CORE is not set
+# CONFIG_MFD_INTEL_M10_BMC_SPI is not set
+# CONFIG_MFD_RSMU_I2C is not set
+# CONFIG_MFD_RSMU_SPI is not set
+# end of Multifunction device drivers
+
+CONFIG_REGULATOR=y
+# CONFIG_REGULATOR_DEBUG is not set
+CONFIG_REGULATOR_FIXED_VOLTAGE=y
+CONFIG_REGULATOR_VIRTUAL_CONSUMER=y
+CONFIG_REGULATOR_USERSPACE_CONSUMER=y
+# CONFIG_REGULATOR_NETLINK_EVENTS is not set
+# CONFIG_REGULATOR_88PG86X is not set
+# CONFIG_REGULATOR_ACT8865 is not set
+# CONFIG_REGULATOR_AD5398 is not set
+# CONFIG_REGULATOR_AW37503 is not set
+# CONFIG_REGULATOR_DA9121 is not set
+# CONFIG_REGULATOR_DA9210 is not set
+# CONFIG_REGULATOR_DA9211 is not set
+# CONFIG_REGULATOR_FAN53555 is not set
+# CONFIG_REGULATOR_FAN53880 is not set
+CONFIG_REGULATOR_GPIO=y
+# CONFIG_REGULATOR_ISL9305 is not set
+# CONFIG_REGULATOR_ISL6271A is not set
+# CONFIG_REGULATOR_LP3971 is not set
+# CONFIG_REGULATOR_LP3972 is not set
+# CONFIG_REGULATOR_LP872X is not set
+# CONFIG_REGULATOR_LP8755 is not set
+# CONFIG_REGULATOR_LTC3589 is not set
+# CONFIG_REGULATOR_LTC3676 is not set
+# CONFIG_REGULATOR_MAX1586 is not set
+# CONFIG_REGULATOR_MAX77503 is not set
+# CONFIG_REGULATOR_MAX77857 is not set
+# CONFIG_REGULATOR_MAX8649 is not set
+# CONFIG_REGULATOR_MAX8660 is not set
+# CONFIG_REGULATOR_MAX8893 is not set
+# CONFIG_REGULATOR_MAX8952 is not set
+# CONFIG_REGULATOR_MAX8973 is not set
+# CONFIG_REGULATOR_MAX20086 is not set
+# CONFIG_REGULATOR_MAX20411 is not set
+# CONFIG_REGULATOR_MAX77826 is not set
+# CONFIG_REGULATOR_MCP16502 is not set
+# CONFIG_REGULATOR_MP5416 is not set
+# CONFIG_REGULATOR_MP8859 is not set
+# CONFIG_REGULATOR_MP886X is not set
+# CONFIG_REGULATOR_MPQ7920 is not set
+# CONFIG_REGULATOR_MT6311 is not set
+# CONFIG_REGULATOR_MT6315 is not set
+# CONFIG_REGULATOR_PCA9450 is not set
+# CONFIG_REGULATOR_PF8X00 is not set
+# CONFIG_REGULATOR_PFUZE100 is not set
+# CONFIG_REGULATOR_PV88060 is not set
+# CONFIG_REGULATOR_PV88080 is not set
+# CONFIG_REGULATOR_PV88090 is not set
+# CONFIG_REGULATOR_PWM is not set
+CONFIG_REGULATOR_QCOM_REFGEN=y
+CONFIG_REGULATOR_QCOM_RPM=y
+CONFIG_REGULATOR_QCOM_RPMH=y
+CONFIG_REGULATOR_QCOM_SMD_RPM=y
+CONFIG_REGULATOR_QCOM_SPMI=y
+CONFIG_REGULATOR_QCOM_USB_VBUS=y
+# CONFIG_REGULATOR_RAA215300 is not set
+# CONFIG_REGULATOR_RASPBERRYPI_TOUCHSCREEN_ATTINY is not set
+# CONFIG_REGULATOR_RT4801 is not set
+# CONFIG_REGULATOR_RT4803 is not set
+# CONFIG_REGULATOR_RT5033 is not set
+# CONFIG_REGULATOR_RT5190A is not set
+# CONFIG_REGULATOR_RT5739 is not set
+# CONFIG_REGULATOR_RT5759 is not set
+# CONFIG_REGULATOR_RT6160 is not set
+# CONFIG_REGULATOR_RT6190 is not set
+# CONFIG_REGULATOR_RT6245 is not set
+# CONFIG_REGULATOR_RTQ2134 is not set
+# CONFIG_REGULATOR_RTMV20 is not set
+# CONFIG_REGULATOR_RTQ6752 is not set
+# CONFIG_REGULATOR_RTQ2208 is not set
+# CONFIG_REGULATOR_SLG51000 is not set
+# CONFIG_REGULATOR_SY8106A is not set
+# CONFIG_REGULATOR_SY8824X is not set
+# CONFIG_REGULATOR_SY8827N is not set
+# CONFIG_REGULATOR_TPS51632 is not set
+# CONFIG_REGULATOR_TPS62360 is not set
+# CONFIG_REGULATOR_TPS6286X is not set
+# CONFIG_REGULATOR_TPS6287X is not set
+# CONFIG_REGULATOR_TPS65023 is not set
+# CONFIG_REGULATOR_TPS6507X is not set
+# CONFIG_REGULATOR_TPS65132 is not set
+# CONFIG_REGULATOR_TPS6524X is not set
+CONFIG_REGULATOR_VCTRL=y
+# CONFIG_REGULATOR_VQMMC_IPQ4019 is not set
+CONFIG_REGULATOR_QCOM_LABIBB=y
+CONFIG_RC_CORE=y
+# CONFIG_LIRC is not set
+CONFIG_RC_MAP=y
+# CONFIG_RC_DECODERS is not set
+# CONFIG_RC_DEVICES is not set
+
+#
+# CEC support
+#
+CONFIG_MEDIA_CEC_SUPPORT=y
+# CONFIG_CEC_CH7322 is not set
+# CONFIG_CEC_GPIO is not set
+# CONFIG_USB_PULSE8_CEC is not set
+# CONFIG_USB_RAINSHADOW_CEC is not set
+# end of CEC support
+
+CONFIG_MEDIA_SUPPORT=y
+# CONFIG_MEDIA_SUPPORT_FILTER is not set
+# CONFIG_MEDIA_SUBDRV_AUTOSELECT is not set
+
+#
+# Media device types
+#
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_MEDIA_ANALOG_TV_SUPPORT=y
+CONFIG_MEDIA_DIGITAL_TV_SUPPORT=y
+CONFIG_MEDIA_RADIO_SUPPORT=y
+CONFIG_MEDIA_SDR_SUPPORT=y
+CONFIG_MEDIA_PLATFORM_SUPPORT=y
+CONFIG_MEDIA_TEST_SUPPORT=y
+# end of Media device types
+
+#
+# Media core support
+#
+CONFIG_VIDEO_DEV=y
+CONFIG_MEDIA_CONTROLLER=y
+CONFIG_DVB_CORE=y
+# end of Media core support
+
+#
+# Video4Linux options
+#
+CONFIG_VIDEO_V4L2_I2C=y
+CONFIG_VIDEO_V4L2_SUBDEV_API=y
+# CONFIG_VIDEO_ADV_DEBUG is not set
+# CONFIG_VIDEO_FIXED_MINOR_RANGES is not set
+CONFIG_V4L2_MEM2MEM_DEV=y
+# CONFIG_V4L2_FLASH_LED_CLASS is not set
+CONFIG_V4L2_FWNODE=y
+CONFIG_V4L2_ASYNC=y
+CONFIG_V4L2_CCI=y
+CONFIG_V4L2_CCI_I2C=y
+# end of Video4Linux options
+
+#
+# Media controller options
+#
+# CONFIG_MEDIA_CONTROLLER_DVB is not set
+# end of Media controller options
+
+#
+# Digital TV options
+#
+# CONFIG_DVB_MMAP is not set
+CONFIG_DVB_NET=y
+CONFIG_DVB_MAX_ADAPTERS=16
+CONFIG_DVB_DYNAMIC_MINORS=y
+# CONFIG_DVB_DEMUX_SECTION_LOSS_LOG is not set
+# CONFIG_DVB_ULE_DEBUG is not set
+# end of Digital TV options
+
+#
+# Media drivers
+#
+
+#
+# Media drivers
+#
+# CONFIG_MEDIA_USB_SUPPORT is not set
+# CONFIG_MEDIA_PCI_SUPPORT is not set
+CONFIG_RADIO_ADAPTERS=y
+# CONFIG_RADIO_MAXIRADIO is not set
+# CONFIG_RADIO_SAA7706H is not set
+# CONFIG_RADIO_SHARK is not set
+# CONFIG_RADIO_SHARK2 is not set
+# CONFIG_RADIO_SI4713 is not set
+# CONFIG_RADIO_TEA5764 is not set
+# CONFIG_RADIO_TEF6862 is not set
+# CONFIG_RADIO_WL1273 is not set
+# CONFIG_USB_DSBR is not set
+# CONFIG_USB_KEENE is not set
+# CONFIG_USB_MA901 is not set
+# CONFIG_USB_MR800 is not set
+# CONFIG_USB_RAREMONO is not set
+# CONFIG_RADIO_SI470X is not set
+CONFIG_MEDIA_PLATFORM_DRIVERS=y
+CONFIG_V4L_PLATFORM_DRIVERS=y
+# CONFIG_SDR_PLATFORM_DRIVERS is not set
+# CONFIG_DVB_PLATFORM_DRIVERS is not set
+CONFIG_V4L_MEM2MEM_DRIVERS=y
+CONFIG_VIDEO_MEM2MEM_DEINTERLACE=y
+# CONFIG_VIDEO_MUX is not set
+
+#
+# Allegro DVT media platform drivers
+#
+
+#
+# Amlogic media platform drivers
+#
+
+#
+# Amphion drivers
+#
+
+#
+# Aspeed media platform drivers
+#
+
+#
+# Atmel media platform drivers
+#
+
+#
+# Cadence media platform drivers
+#
+# CONFIG_VIDEO_CADENCE_CSI2RX is not set
+# CONFIG_VIDEO_CADENCE_CSI2TX is not set
+
+#
+# Chips&Media media platform drivers
+#
+
+#
+# Intel media platform drivers
+#
+
+#
+# Marvell media platform drivers
+#
+# CONFIG_VIDEO_CAFE_CCIC is not set
+
+#
+# Mediatek media platform drivers
+#
+
+#
+# Microchip Technology, Inc. media platform drivers
+#
+
+#
+# Nuvoton media platform drivers
+#
+
+#
+# NVidia media platform drivers
+#
+
+#
+# NXP media platform drivers
+#
+
+#
+# Qualcomm media platform drivers
+#
+CONFIG_VIDEO_QCOM_CAMSS=y
+CONFIG_VIDEO_QCOM_VENUS=y
+
+#
+# Renesas media platform drivers
+#
+
+#
+# Rockchip media platform drivers
+#
+
+#
+# Samsung media platform drivers
+#
+
+#
+# STMicroelectronics media platform drivers
+#
+
+#
+# Sunxi media platform drivers
+#
+
+#
+# Texas Instruments drivers
+#
+
+#
+# Verisilicon media platform drivers
+#
+
+#
+# VIA media platform drivers
+#
+
+#
+# Xilinx media platform drivers
+#
+# CONFIG_VIDEO_XILINX is not set
+
+#
+# MMC/SDIO DVB adapters
+#
+# CONFIG_SMS_SDIO_DRV is not set
+# CONFIG_V4L_TEST_DRIVERS is not set
+# CONFIG_DVB_TEST_DRIVERS is not set
+CONFIG_VIDEOBUF2_CORE=y
+CONFIG_VIDEOBUF2_V4L2=y
+CONFIG_VIDEOBUF2_MEMOPS=y
+CONFIG_VIDEOBUF2_DMA_CONTIG=y
+CONFIG_VIDEOBUF2_DMA_SG=y
+# end of Media drivers
+
+#
+# Media ancillary drivers
+#
+CONFIG_MEDIA_ATTACH=y
+CONFIG_VIDEO_IR_I2C=y
+CONFIG_VIDEO_CAMERA_SENSOR=y
+# CONFIG_VIDEO_ALVIUM_CSI2 is not set
+# CONFIG_VIDEO_AR0521 is not set
+# CONFIG_VIDEO_GC02M1 is not set
+CONFIG_VIDEO_GC8034=y
+# CONFIG_VIDEO_GC0308 is not set
+# CONFIG_VIDEO_GC2145 is not set
+# CONFIG_VIDEO_HI556 is not set
+# CONFIG_VIDEO_HI846 is not set
+# CONFIG_VIDEO_HI847 is not set
+# CONFIG_VIDEO_IMX208 is not set
+# CONFIG_VIDEO_IMX214 is not set
+# CONFIG_VIDEO_IMX219 is not set
+# CONFIG_VIDEO_IMX258 is not set
+# CONFIG_VIDEO_IMX274 is not set
+# CONFIG_VIDEO_IMX290 is not set
+CONFIG_VIDEO_IMX296=m
+# CONFIG_VIDEO_IMX319 is not set
+# CONFIG_VIDEO_IMX334 is not set
+# CONFIG_VIDEO_IMX335 is not set
+# CONFIG_VIDEO_IMX355 is not set
+# CONFIG_VIDEO_IMX412 is not set
+CONFIG_VIDEO_IMX415=m
+# CONFIG_VIDEO_MT9M001 is not set
+# CONFIG_VIDEO_MT9M111 is not set
+# CONFIG_VIDEO_MT9M114 is not set
+# CONFIG_VIDEO_MT9P031 is not set
+# CONFIG_VIDEO_MT9T112 is not set
+# CONFIG_VIDEO_MT9V011 is not set
+# CONFIG_VIDEO_MT9V032 is not set
+# CONFIG_VIDEO_MT9V111 is not set
+# CONFIG_VIDEO_OG01A1B is not set
+# CONFIG_VIDEO_OV01A10 is not set
+# CONFIG_VIDEO_OV02A10 is not set
+# CONFIG_VIDEO_OV08D10 is not set
+# CONFIG_VIDEO_OV08X40 is not set
+# CONFIG_VIDEO_OV13858 is not set
+# CONFIG_VIDEO_OV13B10 is not set
+CONFIG_VIDEO_OV16A1X=m
+# CONFIG_VIDEO_OV2640 is not set
+# CONFIG_VIDEO_OV2659 is not set
+# CONFIG_VIDEO_OV2680 is not set
+# CONFIG_VIDEO_OV2685 is not set
+# CONFIG_VIDEO_OV4689 is not set
+# CONFIG_VIDEO_OV5640 is not set
+# CONFIG_VIDEO_OV5645 is not set
+# CONFIG_VIDEO_OV5647 is not set
+# CONFIG_VIDEO_OV5648 is not set
+# CONFIG_VIDEO_OV5670 is not set
+# CONFIG_VIDEO_OV5675 is not set
+# CONFIG_VIDEO_OV5693 is not set
+# CONFIG_VIDEO_OV5695 is not set
+# CONFIG_VIDEO_OV64A40 is not set
+# CONFIG_VIDEO_OV6650 is not set
+# CONFIG_VIDEO_OV7251 is not set
+# CONFIG_VIDEO_OV7640 is not set
+# CONFIG_VIDEO_OV7670 is not set
+# CONFIG_VIDEO_OV772X is not set
+# CONFIG_VIDEO_OV7740 is not set
+# CONFIG_VIDEO_OV8856 is not set
+CONFIG_VIDEO_OV8858=m
+# CONFIG_VIDEO_OV8865 is not set
+# CONFIG_VIDEO_OV9282 is not set
+# CONFIG_VIDEO_OV9640 is not set
+# CONFIG_VIDEO_OV9650 is not set
+# CONFIG_VIDEO_RDACM20 is not set
+# CONFIG_VIDEO_RDACM21 is not set
+# CONFIG_VIDEO_RJ54N1 is not set
+# CONFIG_VIDEO_S5C73M3 is not set
+# CONFIG_VIDEO_S5K5BAF is not set
+CONFIG_VIDEO_S5K5E9=y
+# CONFIG_VIDEO_S5K6A3 is not set
+# CONFIG_VIDEO_ST_VGXY61 is not set
+# CONFIG_VIDEO_CCS is not set
+# CONFIG_VIDEO_ET8EK8 is not set
+
+#
+# Camera ISPs
+#
+# CONFIG_VIDEO_THP7312 is not set
+# end of Camera ISPs
+
+#
+# Lens drivers
+#
+# CONFIG_VIDEO_AD5820 is not set
+# CONFIG_VIDEO_AK7375 is not set
+# CONFIG_VIDEO_DW9714 is not set
+# CONFIG_VIDEO_DW9719 is not set
+# CONFIG_VIDEO_DW9768 is not set
+# CONFIG_VIDEO_DW9807_VCM is not set
+# end of Lens drivers
+
+#
+# Flash devices
+#
+# CONFIG_VIDEO_ADP1653 is not set
+# CONFIG_VIDEO_LM3560 is not set
+# CONFIG_VIDEO_LM3646 is not set
+# end of Flash devices
+
+#
+# Audio decoders, processors and mixers
+#
+# CONFIG_VIDEO_CS3308 is not set
+# CONFIG_VIDEO_CS5345 is not set
+# CONFIG_VIDEO_CS53L32A is not set
+# CONFIG_VIDEO_MSP3400 is not set
+# CONFIG_VIDEO_SONY_BTF_MPX is not set
+# CONFIG_VIDEO_TDA1997X is not set
+# CONFIG_VIDEO_TDA7432 is not set
+# CONFIG_VIDEO_TDA9840 is not set
+# CONFIG_VIDEO_TEA6415C is not set
+# CONFIG_VIDEO_TEA6420 is not set
+# CONFIG_VIDEO_TLV320AIC23B is not set
+# CONFIG_VIDEO_TVAUDIO is not set
+# CONFIG_VIDEO_UDA1342 is not set
+# CONFIG_VIDEO_VP27SMPX is not set
+# CONFIG_VIDEO_WM8739 is not set
+# CONFIG_VIDEO_WM8775 is not set
+# end of Audio decoders, processors and mixers
+
+#
+# RDS decoders
+#
+# CONFIG_VIDEO_SAA6588 is not set
+# end of RDS decoders
+
+#
+# Video decoders
+#
+# CONFIG_VIDEO_ADV7180 is not set
+# CONFIG_VIDEO_ADV7183 is not set
+# CONFIG_VIDEO_ADV748X is not set
+# CONFIG_VIDEO_ADV7604 is not set
+# CONFIG_VIDEO_ADV7842 is not set
+# CONFIG_VIDEO_BT819 is not set
+# CONFIG_VIDEO_BT856 is not set
+# CONFIG_VIDEO_BT866 is not set
+# CONFIG_VIDEO_ISL7998X is not set
+# CONFIG_VIDEO_KS0127 is not set
+# CONFIG_VIDEO_ML86V7667 is not set
+# CONFIG_VIDEO_SAA7110 is not set
+# CONFIG_VIDEO_SAA711X is not set
+# CONFIG_VIDEO_TC358743 is not set
+# CONFIG_VIDEO_TC358746 is not set
+# CONFIG_VIDEO_TVP514X is not set
+# CONFIG_VIDEO_TVP5150 is not set
+# CONFIG_VIDEO_TVP7002 is not set
+# CONFIG_VIDEO_TW2804 is not set
+# CONFIG_VIDEO_TW9900 is not set
+# CONFIG_VIDEO_TW9903 is not set
+# CONFIG_VIDEO_TW9906 is not set
+# CONFIG_VIDEO_TW9910 is not set
+# CONFIG_VIDEO_VPX3220 is not set
+
+#
+# Video and audio decoders
+#
+# CONFIG_VIDEO_SAA717X is not set
+# CONFIG_VIDEO_CX25840 is not set
+# end of Video decoders
+
+#
+# Video encoders
+#
+# CONFIG_VIDEO_ADV7170 is not set
+# CONFIG_VIDEO_ADV7175 is not set
+# CONFIG_VIDEO_ADV7343 is not set
+# CONFIG_VIDEO_ADV7393 is not set
+# CONFIG_VIDEO_ADV7511 is not set
+# CONFIG_VIDEO_AK881X is not set
+# CONFIG_VIDEO_SAA7127 is not set
+# CONFIG_VIDEO_SAA7185 is not set
+# CONFIG_VIDEO_THS8200 is not set
+# end of Video encoders
+
+#
+# Video improvement chips
+#
+# CONFIG_VIDEO_UPD64031A is not set
+# CONFIG_VIDEO_UPD64083 is not set
+# end of Video improvement chips
+
+#
+# Audio/Video compression chips
+#
+# CONFIG_VIDEO_SAA6752HS is not set
+# end of Audio/Video compression chips
+
+#
+# SDR tuner chips
+#
+# CONFIG_SDR_MAX2175 is not set
+# end of SDR tuner chips
+
+#
+# Miscellaneous helper chips
+#
+# CONFIG_VIDEO_I2C is not set
+# CONFIG_VIDEO_M52790 is not set
+# CONFIG_VIDEO_ST_MIPID02 is not set
+# CONFIG_VIDEO_THS7303 is not set
+# end of Miscellaneous helper chips
+
+#
+# Video serializers and deserializers
+#
+# CONFIG_VIDEO_DS90UB913 is not set
+# CONFIG_VIDEO_DS90UB953 is not set
+# CONFIG_VIDEO_DS90UB960 is not set
+# end of Video serializers and deserializers
+
+#
+# Media SPI Adapters
+#
+# CONFIG_CXD2880_SPI_DRV is not set
+# CONFIG_VIDEO_GS1662 is not set
+# end of Media SPI Adapters
+
+CONFIG_MEDIA_TUNER=y
+
+#
+# Customize TV tuners
+#
+# CONFIG_MEDIA_TUNER_E4000 is not set
+# CONFIG_MEDIA_TUNER_FC0011 is not set
+# CONFIG_MEDIA_TUNER_FC0012 is not set
+# CONFIG_MEDIA_TUNER_FC0013 is not set
+# CONFIG_MEDIA_TUNER_FC2580 is not set
+# CONFIG_MEDIA_TUNER_IT913X is not set
+# CONFIG_MEDIA_TUNER_M88RS6000T is not set
+# CONFIG_MEDIA_TUNER_MAX2165 is not set
+# CONFIG_MEDIA_TUNER_MC44S803 is not set
+# CONFIG_MEDIA_TUNER_MSI001 is not set
+# CONFIG_MEDIA_TUNER_MT2060 is not set
+# CONFIG_MEDIA_TUNER_MT2063 is not set
+# CONFIG_MEDIA_TUNER_MT20XX is not set
+# CONFIG_MEDIA_TUNER_MT2131 is not set
+# CONFIG_MEDIA_TUNER_MT2266 is not set
+# CONFIG_MEDIA_TUNER_MXL301RF is not set
+# CONFIG_MEDIA_TUNER_MXL5005S is not set
+# CONFIG_MEDIA_TUNER_MXL5007T is not set
+# CONFIG_MEDIA_TUNER_QM1D1B0004 is not set
+# CONFIG_MEDIA_TUNER_QM1D1C0042 is not set
+# CONFIG_MEDIA_TUNER_QT1010 is not set
+# CONFIG_MEDIA_TUNER_R820T is not set
+# CONFIG_MEDIA_TUNER_SI2157 is not set
+# CONFIG_MEDIA_TUNER_SIMPLE is not set
+# CONFIG_MEDIA_TUNER_TDA18212 is not set
+# CONFIG_MEDIA_TUNER_TDA18218 is not set
+# CONFIG_MEDIA_TUNER_TDA18250 is not set
+# CONFIG_MEDIA_TUNER_TDA18271 is not set
+# CONFIG_MEDIA_TUNER_TDA827X is not set
+# CONFIG_MEDIA_TUNER_TDA8290 is not set
+# CONFIG_MEDIA_TUNER_TDA9887 is not set
+# CONFIG_MEDIA_TUNER_TEA5761 is not set
+# CONFIG_MEDIA_TUNER_TEA5767 is not set
+# CONFIG_MEDIA_TUNER_TUA9001 is not set
+# CONFIG_MEDIA_TUNER_XC2028 is not set
+# CONFIG_MEDIA_TUNER_XC4000 is not set
+# CONFIG_MEDIA_TUNER_XC5000 is not set
+# end of Customize TV tuners
+
+#
+# Customise DVB Frontends
+#
+
+#
+# Multistandard (satellite) frontends
+#
+# CONFIG_DVB_MXL5XX is not set
+# CONFIG_DVB_STB0899 is not set
+# CONFIG_DVB_STB6100 is not set
+# CONFIG_DVB_STV090x is not set
+# CONFIG_DVB_STV0910 is not set
+# CONFIG_DVB_STV6110x is not set
+# CONFIG_DVB_STV6111 is not set
+
+#
+# Multistandard (cable + terrestrial) frontends
+#
+# CONFIG_DVB_DRXK is not set
+# CONFIG_DVB_MN88472 is not set
+# CONFIG_DVB_MN88473 is not set
+# CONFIG_DVB_SI2165 is not set
+# CONFIG_DVB_TDA18271C2DD is not set
+
+#
+# DVB-S (satellite) frontends
+#
+# CONFIG_DVB_CX24110 is not set
+# CONFIG_DVB_CX24116 is not set
+# CONFIG_DVB_CX24117 is not set
+# CONFIG_DVB_CX24120 is not set
+# CONFIG_DVB_CX24123 is not set
+# CONFIG_DVB_DS3000 is not set
+# CONFIG_DVB_MB86A16 is not set
+# CONFIG_DVB_MT312 is not set
+# CONFIG_DVB_S5H1420 is not set
+# CONFIG_DVB_SI21XX is not set
+# CONFIG_DVB_STB6000 is not set
+# CONFIG_DVB_STV0288 is not set
+# CONFIG_DVB_STV0299 is not set
+# CONFIG_DVB_STV0900 is not set
+# CONFIG_DVB_STV6110 is not set
+# CONFIG_DVB_TDA10071 is not set
+# CONFIG_DVB_TDA10086 is not set
+# CONFIG_DVB_TDA8083 is not set
+# CONFIG_DVB_TDA8261 is not set
+# CONFIG_DVB_TDA826X is not set
+# CONFIG_DVB_TS2020 is not set
+# CONFIG_DVB_TUA6100 is not set
+# CONFIG_DVB_TUNER_CX24113 is not set
+# CONFIG_DVB_TUNER_ITD1000 is not set
+# CONFIG_DVB_VES1X93 is not set
+# CONFIG_DVB_ZL10036 is not set
+# CONFIG_DVB_ZL10039 is not set
+
+#
+# DVB-T (terrestrial) frontends
+#
+# CONFIG_DVB_CX22700 is not set
+# CONFIG_DVB_CX22702 is not set
+# CONFIG_DVB_CXD2820R is not set
+# CONFIG_DVB_CXD2841ER is not set
+# CONFIG_DVB_DIB3000MB is not set
+# CONFIG_DVB_DIB3000MC is not set
+# CONFIG_DVB_DIB7000M is not set
+# CONFIG_DVB_DIB7000P is not set
+# CONFIG_DVB_DIB9000 is not set
+# CONFIG_DVB_DRXD is not set
+# CONFIG_DVB_EC100 is not set
+# CONFIG_DVB_L64781 is not set
+# CONFIG_DVB_MT352 is not set
+# CONFIG_DVB_NXT6000 is not set
+# CONFIG_DVB_S5H1432 is not set
+# CONFIG_DVB_SP887X is not set
+# CONFIG_DVB_STV0367 is not set
+# CONFIG_DVB_TDA10048 is not set
+# CONFIG_DVB_TDA1004X is not set
+# CONFIG_DVB_ZD1301_DEMOD is not set
+# CONFIG_DVB_ZL10353 is not set
+# CONFIG_DVB_CXD2880 is not set
+
+#
+# DVB-C (cable) frontends
+#
+# CONFIG_DVB_STV0297 is not set
+# CONFIG_DVB_TDA10021 is not set
+# CONFIG_DVB_TDA10023 is not set
+# CONFIG_DVB_VES1820 is not set
+
+#
+# ATSC (North American/Korean Terrestrial/Cable DTV) frontends
+#
+# CONFIG_DVB_AU8522_DTV is not set
+# CONFIG_DVB_AU8522_V4L is not set
+# CONFIG_DVB_BCM3510 is not set
+# CONFIG_DVB_LG2160 is not set
+# CONFIG_DVB_LGDT3305 is not set
+# CONFIG_DVB_LGDT330X is not set
+# CONFIG_DVB_MXL692 is not set
+# CONFIG_DVB_NXT200X is not set
+# CONFIG_DVB_OR51132 is not set
+# CONFIG_DVB_OR51211 is not set
+# CONFIG_DVB_S5H1409 is not set
+# CONFIG_DVB_S5H1411 is not set
+
+#
+# ISDB-T (terrestrial) frontends
+#
+# CONFIG_DVB_DIB8000 is not set
+# CONFIG_DVB_MB86A20S is not set
+# CONFIG_DVB_S921 is not set
+
+#
+# ISDB-S (satellite) & ISDB-T (terrestrial) frontends
+#
+# CONFIG_DVB_MN88443X is not set
+# CONFIG_DVB_TC90522 is not set
+
+#
+# Digital terrestrial only tuners/PLL
+#
+# CONFIG_DVB_PLL is not set
+# CONFIG_DVB_TUNER_DIB0070 is not set
+# CONFIG_DVB_TUNER_DIB0090 is not set
+
+#
+# SEC control devices for DVB-S
+#
+# CONFIG_DVB_A8293 is not set
+# CONFIG_DVB_AF9033 is not set
+# CONFIG_DVB_ASCOT2E is not set
+# CONFIG_DVB_ATBM8830 is not set
+# CONFIG_DVB_HELENE is not set
+# CONFIG_DVB_HORUS3A is not set
+# CONFIG_DVB_ISL6405 is not set
+# CONFIG_DVB_ISL6421 is not set
+# CONFIG_DVB_ISL6423 is not set
+# CONFIG_DVB_IX2505V is not set
+# CONFIG_DVB_LGS8GL5 is not set
+# CONFIG_DVB_LGS8GXX is not set
+# CONFIG_DVB_LNBH25 is not set
+# CONFIG_DVB_LNBH29 is not set
+# CONFIG_DVB_LNBP21 is not set
+# CONFIG_DVB_LNBP22 is not set
+# CONFIG_DVB_M88RS2000 is not set
+# CONFIG_DVB_TDA665x is not set
+# CONFIG_DVB_DRX39XYJ is not set
+
+#
+# Common Interface (EN50221) controller drivers
+#
+# CONFIG_DVB_CXD2099 is not set
+# CONFIG_DVB_SP2 is not set
+# end of Customise DVB Frontends
+
+#
+# Tools to develop new frontends
+#
+# CONFIG_DVB_DUMMY_FE is not set
+# end of Media ancillary drivers
+
+#
+# Graphics support
+#
+CONFIG_APERTURE_HELPERS=y
+CONFIG_VIDEO=y
+# CONFIG_AUXDISPLAY is not set
+CONFIG_DRM=y
+CONFIG_DRM_MIPI_DBI=y
+CONFIG_DRM_MIPI_DSI=y
+CONFIG_DRM_DEBUG_MM=y
+CONFIG_DRM_KMS_HELPER=y
+# CONFIG_DRM_DEBUG_DP_MST_TOPOLOGY_REFS is not set
+# CONFIG_DRM_DEBUG_MODESET_LOCK is not set
+CONFIG_DRM_FBDEV_EMULATION=y
+CONFIG_DRM_FBDEV_OVERALLOC=100
+# CONFIG_DRM_FBDEV_LEAK_PHYS_SMEM is not set
+# CONFIG_DRM_LOAD_EDID_FIRMWARE is not set
+CONFIG_DRM_DP_AUX_BUS=y
+CONFIG_DRM_DISPLAY_HELPER=y
+CONFIG_DRM_DISPLAY_DP_HELPER=y
+# CONFIG_DRM_DP_AUX_CHARDEV is not set
+# CONFIG_DRM_DP_CEC is not set
+CONFIG_DRM_EXEC=y
+CONFIG_DRM_GPUVM=m
+CONFIG_DRM_GEM_DMA_HELPER=y
+CONFIG_DRM_GEM_SHMEM_HELPER=y
+CONFIG_DRM_SCHED=y
+
+#
+# I2C encoder or helper chips
+#
+# CONFIG_DRM_I2C_CH7006 is not set
+# CONFIG_DRM_I2C_SIL164 is not set
+# CONFIG_DRM_I2C_NXP_TDA998X is not set
+# CONFIG_DRM_I2C_NXP_TDA9950 is not set
+# end of I2C encoder or helper chips
+
+#
+# ARM devices
+#
+# CONFIG_DRM_HDLCD is not set
+# CONFIG_DRM_MALI_DISPLAY is not set
+# CONFIG_DRM_KOMEDA is not set
+# end of ARM devices
+
+# CONFIG_DRM_RADEON is not set
+# CONFIG_DRM_AMDGPU is not set
+# CONFIG_DRM_NOUVEAU is not set
+# CONFIG_DRM_XE is not set
+# CONFIG_DRM_VGEM is not set
+# CONFIG_DRM_VKMS is not set
+# CONFIG_DRM_VMWGFX is not set
+# CONFIG_DRM_UDL is not set
+# CONFIG_DRM_AST is not set
+# CONFIG_DRM_MGAG200 is not set
+# CONFIG_DRM_QXL is not set
+CONFIG_DRM_VIRTIO_GPU=y
+CONFIG_DRM_VIRTIO_GPU_KMS=y
+CONFIG_DRM_MSM=y
+CONFIG_DRM_MSM_GPU_STATE=y
+# CONFIG_DRM_MSM_GPU_SUDO is not set
+CONFIG_DRM_MSM_MDSS=y
+# CONFIG_DRM_MSM_MDP4 is not set
+# CONFIG_DRM_MSM_MDP5 is not set
+CONFIG_DRM_MSM_DPU=y
+CONFIG_DRM_MSM_DP=y
+CONFIG_DRM_MSM_DSI=y
+CONFIG_DRM_MSM_DSI_28NM_PHY=y
+CONFIG_DRM_MSM_DSI_20NM_PHY=y
+CONFIG_DRM_MSM_DSI_28NM_8960_PHY=y
+CONFIG_DRM_MSM_DSI_14NM_PHY=y
+CONFIG_DRM_MSM_DSI_10NM_PHY=y
+CONFIG_DRM_MSM_DSI_7NM_PHY=y
+# CONFIG_DRM_MSM_HDMI is not set
+CONFIG_DRM_PANEL=y
+
+#
+# Display Panels
+#
+# CONFIG_DRM_PANEL_ABT_Y030XX067A is not set
+# CONFIG_DRM_PANEL_ARM_VERSATILE is not set
+# CONFIG_DRM_PANEL_ASUS_Z00T_TM5P5_NT35596 is not set
+CONFIG_DRM_PANEL_AUO_A030JTN01=y
+# CONFIG_DRM_PANEL_BOE_BF060Y8M_AJ0 is not set
+# CONFIG_DRM_PANEL_BOE_HIMAX8279D is not set
+# CONFIG_DRM_PANEL_BOE_TH101MB31UIG002_28A is not set
+# CONFIG_DRM_PANEL_BOE_TV101WUM_NL6 is not set
+# CONFIG_DRM_PANEL_EBBG_FT8719 is not set
+# CONFIG_DRM_PANEL_ELIDA_KD35T133 is not set
+# CONFIG_DRM_PANEL_FEIXIN_K101_IM2BA02 is not set
+# CONFIG_DRM_PANEL_FEIYANG_FY07024DI26A30D is not set
+CONFIG_DRM_PANEL_DSI_CM=y
+# CONFIG_DRM_PANEL_LVDS is not set
+# CONFIG_DRM_PANEL_HIMAX_HX83112A is not set
+CONFIG_DRM_PANEL_HIMAX_HX8394=y
+# CONFIG_DRM_PANEL_ILITEK_IL9322 is not set
+# CONFIG_DRM_PANEL_ILITEK_ILI9341 is not set
+# CONFIG_DRM_PANEL_ILITEK_ILI9805 is not set
+# CONFIG_DRM_PANEL_ILITEK_ILI9881C is not set
+CONFIG_DRM_PANEL_ILITEK_ILI9882T=m
+# CONFIG_DRM_PANEL_INNOLUX_EJ030NA is not set
+# CONFIG_DRM_PANEL_INNOLUX_P079ZCA is not set
+# CONFIG_DRM_PANEL_JADARD_JD9365DA_H3 is not set
+# CONFIG_DRM_PANEL_JDI_LPM102A188A is not set
+# CONFIG_DRM_PANEL_JDI_LT070ME05000 is not set
+# CONFIG_DRM_PANEL_JDI_R63452 is not set
+# CONFIG_DRM_PANEL_KHADAS_TS050 is not set
+# CONFIG_DRM_PANEL_KINGDISPLAY_KD097D04 is not set
+# CONFIG_DRM_PANEL_LEADTEK_LTK050H3146W is not set
+# CONFIG_DRM_PANEL_LEADTEK_LTK500HD1829 is not set
+# CONFIG_DRM_PANEL_LG_LB035Q02 is not set
+# CONFIG_DRM_PANEL_LG_LG4573 is not set
+# CONFIG_DRM_PANEL_MAGNACHIP_D53E6EA8966 is not set
+# CONFIG_DRM_PANEL_MANTIX_MLAF057WE51 is not set
+# CONFIG_DRM_PANEL_NEC_NL8048HL11 is not set
+# CONFIG_DRM_PANEL_NEWVISION_NV3051D is not set
+# CONFIG_DRM_PANEL_NEWVISION_NV3052C is not set
+# CONFIG_DRM_PANEL_NOVATEK_NT35510 is not set
+# CONFIG_DRM_PANEL_NOVATEK_NT35560 is not set
+# CONFIG_DRM_PANEL_NOVATEK_NT35950 is not set
+# CONFIG_DRM_PANEL_NOVATEK_NT36523 is not set
+# CONFIG_DRM_PANEL_NOVATEK_NT36672A is not set
+# CONFIG_DRM_PANEL_NOVATEK_NT36672E is not set
+# CONFIG_DRM_PANEL_NOVATEK_NT39016 is not set
+# CONFIG_DRM_PANEL_OLIMEX_LCD_OLINUXINO is not set
+# CONFIG_DRM_PANEL_ORISETECH_OTA5601A is not set
+# CONFIG_DRM_PANEL_ORISETECH_OTM8009A is not set
+# CONFIG_DRM_PANEL_OSD_OSD101T2587_53TS is not set
+# CONFIG_DRM_PANEL_PANASONIC_VVX10F034N00 is not set
+# CONFIG_DRM_PANEL_RASPBERRYPI_TOUCHSCREEN is not set
+# CONFIG_DRM_PANEL_RAYDIUM_RM67191 is not set
+# CONFIG_DRM_PANEL_RAYDIUM_RM68200 is not set
+# CONFIG_DRM_PANEL_RAYDIUM_RM692E5 is not set
+# CONFIG_DRM_PANEL_RONBO_RB070D30 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_S6E88A0_AMS452EF01 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_ATNA33XC20 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_DB7430 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_LD9040 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_S6D16D0 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_S6D27A1 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_S6D7AA0 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_S6E3HA2 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_S6E63J0X03 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_S6E63M0 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_S6E8AA0 is not set
+# CONFIG_DRM_PANEL_SAMSUNG_SOFEF00 is not set
+# CONFIG_DRM_PANEL_SEIKO_43WVF1G is not set
+# CONFIG_DRM_PANEL_SHARP_LQ101R1SX01 is not set
+# CONFIG_DRM_PANEL_SHARP_LS037V7DW01 is not set
+# CONFIG_DRM_PANEL_SHARP_LS043T1LE01 is not set
+# CONFIG_DRM_PANEL_SHARP_LS060T1SX01 is not set
+# CONFIG_DRM_PANEL_SITRONIX_ST7701 is not set
+# CONFIG_DRM_PANEL_SITRONIX_ST7703 is not set
+# CONFIG_DRM_PANEL_SITRONIX_ST7789V is not set
+# CONFIG_DRM_PANEL_SONY_ACX565AKM is not set
+# CONFIG_DRM_PANEL_SONY_TD4353_JDI is not set
+# CONFIG_DRM_PANEL_SONY_TULIP_TRULY_NT35521 is not set
+# CONFIG_DRM_PANEL_STARTEK_KD070FHFID015 is not set
+CONFIG_DRM_PANEL_EDP=y
+CONFIG_DRM_PANEL_SIMPLE=y
+# CONFIG_DRM_PANEL_SYNAPTICS_R63353 is not set
+# CONFIG_DRM_PANEL_TDO_TL070WSH30 is not set
+# CONFIG_DRM_PANEL_TPO_TD028TTEC1 is not set
+# CONFIG_DRM_PANEL_TPO_TD043MTEA1 is not set
+# CONFIG_DRM_PANEL_TPO_TPG110 is not set
+# CONFIG_DRM_PANEL_TRULY_NT35597_WQXGA is not set
+# CONFIG_DRM_PANEL_VISIONOX_R66451 is not set
+# CONFIG_DRM_PANEL_VISIONOX_RM69299 is not set
+# CONFIG_DRM_PANEL_VISIONOX_VTDR6130 is not set
+# CONFIG_DRM_PANEL_WIDECHIPS_WS2401 is not set
+# CONFIG_DRM_PANEL_XINPENG_XPP055C272 is not set
+# end of Display Panels
+
+CONFIG_DRM_BRIDGE=y
+CONFIG_DRM_PANEL_BRIDGE=y
+CONFIG_DRM_AUX_BRIDGE=y
+CONFIG_DRM_AUX_HPD_BRIDGE=y
+
+#
+# Display Interface Bridges
+#
+# CONFIG_DRM_CHIPONE_ICN6211 is not set
+# CONFIG_DRM_CHRONTEL_CH7033 is not set
+CONFIG_DRM_DISPLAY_CONNECTOR=y
+# CONFIG_DRM_ITE_IT6505 is not set
+# CONFIG_DRM_LONTIUM_LT8912B is not set
+# CONFIG_DRM_LONTIUM_LT9211 is not set
+# CONFIG_DRM_LONTIUM_LT9611 is not set
+# CONFIG_DRM_LONTIUM_LT9611UXC is not set
+# CONFIG_DRM_ITE_IT66121 is not set
+# CONFIG_DRM_LVDS_CODEC is not set
+# CONFIG_DRM_MEGACHIPS_STDPXXXX_GE_B850V3_FW is not set
+# CONFIG_DRM_NWL_MIPI_DSI is not set
+# CONFIG_DRM_NXP_PTN3460 is not set
+# CONFIG_DRM_PARADE_PS8622 is not set
+# CONFIG_DRM_PARADE_PS8640 is not set
+# CONFIG_DRM_SAMSUNG_DSIM is not set
+# CONFIG_DRM_SIL_SII8620 is not set
+# CONFIG_DRM_SII902X is not set
+# CONFIG_DRM_SII9234 is not set
+CONFIG_DRM_SIMPLE_BRIDGE=y
+# CONFIG_DRM_THINE_THC63LVD1024 is not set
+# CONFIG_DRM_TOSHIBA_TC358762 is not set
+# CONFIG_DRM_TOSHIBA_TC358764 is not set
+# CONFIG_DRM_TOSHIBA_TC358767 is not set
+# CONFIG_DRM_TOSHIBA_TC358768 is not set
+# CONFIG_DRM_TOSHIBA_TC358775 is not set
+# CONFIG_DRM_TI_DLPC3433 is not set
+# CONFIG_DRM_TI_TFP410 is not set
+# CONFIG_DRM_TI_SN65DSI83 is not set
+# CONFIG_DRM_TI_SN65DSI86 is not set
+# CONFIG_DRM_TI_TPD12S015 is not set
+# CONFIG_DRM_ANALOGIX_ANX6345 is not set
+# CONFIG_DRM_ANALOGIX_ANX78XX is not set
+# CONFIG_DRM_ANALOGIX_ANX7625 is not set
+# CONFIG_DRM_I2C_ADV7511 is not set
+# CONFIG_DRM_CDNS_DSI is not set
+# CONFIG_DRM_CDNS_MHDP8546 is not set
+# end of Display Interface Bridges
+
+# CONFIG_DRM_ETNAVIV is not set
+# CONFIG_DRM_HISI_HIBMC is not set
+# CONFIG_DRM_HISI_KIRIN is not set
+# CONFIG_DRM_LOGICVC is not set
+# CONFIG_DRM_ARCPGU is not set
+# CONFIG_DRM_BOCHS is not set
+# CONFIG_DRM_CIRRUS_QEMU is not set
+# CONFIG_DRM_GM12U320 is not set
+CONFIG_DRM_PANEL_MIPI_DBI=y
+CONFIG_DRM_SIMPLEDRM=y
+# CONFIG_TINYDRM_HX8357D is not set
+# CONFIG_TINYDRM_ILI9163 is not set
+# CONFIG_TINYDRM_ILI9225 is not set
+# CONFIG_TINYDRM_ILI9341 is not set
+# CONFIG_TINYDRM_ILI9486 is not set
+# CONFIG_TINYDRM_MI0283QT is not set
+# CONFIG_TINYDRM_REPAPER is not set
+# CONFIG_TINYDRM_ST7586 is not set
+# CONFIG_TINYDRM_ST7735R is not set
+# CONFIG_DRM_PL111 is not set
+# CONFIG_DRM_LIMA is not set
+# CONFIG_DRM_PANFROST is not set
+# CONFIG_DRM_TIDSS is not set
+CONFIG_DRM_GUD=m
+# CONFIG_DRM_SSD130X is not set
+CONFIG_DRM_POWERVR=m
+CONFIG_DRM_PANEL_ORIENTATION_QUIRKS=y
+
+#
+# Frame buffer Devices
+#
+# CONFIG_FB is not set
+CONFIG_FB_CORE=y
+CONFIG_FB_DEVICE=y
+CONFIG_FB_SYS_FILLRECT=y
+CONFIG_FB_SYS_COPYAREA=y
+CONFIG_FB_SYS_IMAGEBLIT=y
+CONFIG_FB_SYSMEM_FOPS=y
+CONFIG_FB_DEFERRED_IO=y
+CONFIG_FB_DMAMEM_HELPERS=y
+CONFIG_FB_SYSMEM_HELPERS=y
+CONFIG_FB_SYSMEM_HELPERS_DEFERRED=y
+# end of Frame buffer Devices
+
+#
+# Backlight & LCD device support
+#
+CONFIG_LCD_CLASS_DEVICE=y
+# CONFIG_LCD_L4F00242T03 is not set
+# CONFIG_LCD_LMS283GF05 is not set
+# CONFIG_LCD_LTV350QV is not set
+# CONFIG_LCD_ILI922X is not set
+# CONFIG_LCD_ILI9320 is not set
+# CONFIG_LCD_TDO24M is not set
+# CONFIG_LCD_VGG2432A4 is not set
+CONFIG_LCD_PLATFORM=y
+# CONFIG_LCD_AMS369FG06 is not set
+# CONFIG_LCD_LMS501KF03 is not set
+# CONFIG_LCD_HX8357 is not set
+# CONFIG_LCD_OTM3225A is not set
+CONFIG_BACKLIGHT_CLASS_DEVICE=y
+# CONFIG_BACKLIGHT_KTD253 is not set
+# CONFIG_BACKLIGHT_KTD2801 is not set
+# CONFIG_BACKLIGHT_KTZ8866 is not set
+CONFIG_BACKLIGHT_PWM=y
+CONFIG_BACKLIGHT_QCOM_WLED=y
+# CONFIG_BACKLIGHT_ADP8860 is not set
+# CONFIG_BACKLIGHT_ADP8870 is not set
+# CONFIG_BACKLIGHT_LM3630A is not set
+# CONFIG_BACKLIGHT_LM3639 is not set
+# CONFIG_BACKLIGHT_LP855X is not set
+# CONFIG_BACKLIGHT_MP3309C is not set
+CONFIG_BACKLIGHT_GPIO=y
+# CONFIG_BACKLIGHT_LV5207LP is not set
+# CONFIG_BACKLIGHT_BD6107 is not set
+# CONFIG_BACKLIGHT_ARCXCNN is not set
+CONFIG_BACKLIGHT_LED=y
+# end of Backlight & LCD device support
+
+CONFIG_VIDEOMODE_HELPERS=y
+CONFIG_HDMI=y
+
+#
+# Console display driver support
+#
+CONFIG_DUMMY_CONSOLE=y
+CONFIG_DUMMY_CONSOLE_COLUMNS=80
+CONFIG_DUMMY_CONSOLE_ROWS=25
+CONFIG_FRAMEBUFFER_CONSOLE=y
+# CONFIG_FRAMEBUFFER_CONSOLE_LEGACY_ACCELERATION is not set
+CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
+# CONFIG_FRAMEBUFFER_CONSOLE_ROTATION is not set
+# end of Console display driver support
+
+CONFIG_LOGO=y
+CONFIG_LOGO_LINUX_MONO=y
+CONFIG_LOGO_LINUX_VGA16=y
+CONFIG_LOGO_LINUX_CLUT224=y
+# end of Graphics support
+
+CONFIG_DRM_ACCEL=y
+CONFIG_DRM_ACCEL_QAIC=y
+CONFIG_SOUND=y
+CONFIG_SND=y
+CONFIG_SND_TIMER=y
+CONFIG_SND_PCM=y
+CONFIG_SND_PCM_ELD=y
+CONFIG_SND_PCM_IEC958=y
+CONFIG_SND_RAWMIDI=y
+CONFIG_SND_UMP=y
+CONFIG_SND_UMP_LEGACY_RAWMIDI=y
+CONFIG_SND_COMPRESS_OFFLOAD=y
+CONFIG_SND_JACK=y
+CONFIG_SND_JACK_INPUT_DEV=y
+# CONFIG_SND_OSSEMUL is not set
+CONFIG_SND_PCM_TIMER=y
+# CONFIG_SND_HRTIMER is not set
+CONFIG_SND_DYNAMIC_MINORS=y
+CONFIG_SND_MAX_CARDS=32
+CONFIG_SND_SUPPORT_OLD_API=y
+CONFIG_SND_PROC_FS=y
+CONFIG_SND_VERBOSE_PROCFS=y
+# CONFIG_SND_VERBOSE_PRINTK is not set
+CONFIG_SND_CTL_FAST_LOOKUP=y
+# CONFIG_SND_DEBUG is not set
+# CONFIG_SND_CTL_INPUT_VALIDATION is not set
+# CONFIG_SND_SEQUENCER is not set
+CONFIG_SND_DRIVERS=y
+# CONFIG_SND_DUMMY is not set
+# CONFIG_SND_ALOOP is not set
+# CONFIG_SND_PCMTEST is not set
+# CONFIG_SND_MTPAV is not set
+# CONFIG_SND_SERIAL_U16550 is not set
+# CONFIG_SND_SERIAL_GENERIC is not set
+# CONFIG_SND_MPU401 is not set
+CONFIG_SND_PCI=y
+# CONFIG_SND_AD1889 is not set
+# CONFIG_SND_ALS300 is not set
+# CONFIG_SND_ALI5451 is not set
+# CONFIG_SND_ATIIXP is not set
+# CONFIG_SND_ATIIXP_MODEM is not set
+# CONFIG_SND_AU8810 is not set
+# CONFIG_SND_AU8820 is not set
+# CONFIG_SND_AU8830 is not set
+# CONFIG_SND_AW2 is not set
+# CONFIG_SND_AZT3328 is not set
+# CONFIG_SND_BT87X is not set
+# CONFIG_SND_CA0106 is not set
+# CONFIG_SND_CMIPCI is not set
+# CONFIG_SND_OXYGEN is not set
+# CONFIG_SND_CS4281 is not set
+# CONFIG_SND_CS46XX is not set
+# CONFIG_SND_CTXFI is not set
+# CONFIG_SND_DARLA20 is not set
+# CONFIG_SND_GINA20 is not set
+# CONFIG_SND_LAYLA20 is not set
+# CONFIG_SND_DARLA24 is not set
+# CONFIG_SND_GINA24 is not set
+# CONFIG_SND_LAYLA24 is not set
+# CONFIG_SND_MONA is not set
+# CONFIG_SND_MIA is not set
+# CONFIG_SND_ECHO3G is not set
+# CONFIG_SND_INDIGO is not set
+# CONFIG_SND_INDIGOIO is not set
+# CONFIG_SND_INDIGODJ is not set
+# CONFIG_SND_INDIGOIOX is not set
+# CONFIG_SND_INDIGODJX is not set
+# CONFIG_SND_EMU10K1 is not set
+# CONFIG_SND_EMU10K1X is not set
+# CONFIG_SND_ENS1370 is not set
+# CONFIG_SND_ENS1371 is not set
+# CONFIG_SND_ES1938 is not set
+# CONFIG_SND_ES1968 is not set
+# CONFIG_SND_FM801 is not set
+# CONFIG_SND_HDSP is not set
+# CONFIG_SND_HDSPM is not set
+# CONFIG_SND_ICE1712 is not set
+# CONFIG_SND_ICE1724 is not set
+# CONFIG_SND_INTEL8X0 is not set
+# CONFIG_SND_INTEL8X0M is not set
+# CONFIG_SND_KORG1212 is not set
+# CONFIG_SND_LOLA is not set
+# CONFIG_SND_LX6464ES is not set
+# CONFIG_SND_MAESTRO3 is not set
+# CONFIG_SND_MIXART is not set
+# CONFIG_SND_NM256 is not set
+# CONFIG_SND_PCXHR is not set
+# CONFIG_SND_RIPTIDE is not set
+# CONFIG_SND_RME32 is not set
+# CONFIG_SND_RME96 is not set
+# CONFIG_SND_RME9652 is not set
+# CONFIG_SND_SE6X is not set
+# CONFIG_SND_SONICVIBES is not set
+# CONFIG_SND_TRIDENT is not set
+# CONFIG_SND_VIA82XX is not set
+# CONFIG_SND_VIA82XX_MODEM is not set
+# CONFIG_SND_VIRTUOSO is not set
+# CONFIG_SND_VX222 is not set
+# CONFIG_SND_YMFPCI is not set
+
+#
+# HD-Audio
+#
+# CONFIG_SND_HDA_INTEL is not set
+# end of HD-Audio
+
+CONFIG_SND_HDA_PREALLOC_SIZE=64
+CONFIG_SND_SPI=y
+CONFIG_SND_USB=y
+# CONFIG_SND_USB_AUDIO is not set
+# CONFIG_SND_USB_UA101 is not set
+# CONFIG_SND_USB_CAIAQ is not set
+# CONFIG_SND_USB_6FIRE is not set
+# CONFIG_SND_USB_HIFACE is not set
+# CONFIG_SND_BCD2000 is not set
+# CONFIG_SND_USB_POD is not set
+# CONFIG_SND_USB_PODHD is not set
+# CONFIG_SND_USB_TONEPORT is not set
+# CONFIG_SND_USB_VARIAX is not set
+CONFIG_SND_SOC=y
+CONFIG_SND_SOC_COMPRESS=y
+CONFIG_SND_SOC_TOPOLOGY=y
+# CONFIG_SND_SOC_ADI is not set
+# CONFIG_SND_SOC_AMD_ACP is not set
+# CONFIG_SND_AMD_ACP_CONFIG is not set
+# CONFIG_SND_ATMEL_SOC is not set
+# CONFIG_SND_BCM63XX_I2S_WHISTLER is not set
+# CONFIG_SND_DESIGNWARE_I2S is not set
+
+#
+# SoC Audio for Freescale CPUs
+#
+
+#
+# Common SoC Audio options for Freescale CPUs:
+#
+# CONFIG_SND_SOC_FSL_ASRC is not set
+# CONFIG_SND_SOC_FSL_SAI is not set
+# CONFIG_SND_SOC_FSL_AUDMIX is not set
+# CONFIG_SND_SOC_FSL_SSI is not set
+# CONFIG_SND_SOC_FSL_SPDIF is not set
+# CONFIG_SND_SOC_FSL_ESAI is not set
+# CONFIG_SND_SOC_FSL_MICFIL is not set
+# CONFIG_SND_SOC_FSL_XCVR is not set
+# CONFIG_SND_SOC_FSL_RPMSG is not set
+# CONFIG_SND_SOC_IMX_AUDMUX is not set
+# end of SoC Audio for Freescale CPUs
+
+# CONFIG_SND_SOC_CHV3_I2S is not set
+# CONFIG_SND_I2S_HI6210_I2S is not set
+# CONFIG_SND_SOC_IMG is not set
+# CONFIG_SND_SOC_MTK_BTCVSD is not set
+CONFIG_SND_SOC_QCOM=y
+CONFIG_SND_SOC_LPASS_CPU=y
+CONFIG_SND_SOC_LPASS_HDMI=y
+CONFIG_SND_SOC_LPASS_PLATFORM=y
+CONFIG_SND_SOC_LPASS_CDC_DMA=y
+CONFIG_SND_SOC_LPASS_SC7180=y
+CONFIG_SND_SOC_LPASS_SC7280=y
+# CONFIG_SND_SOC_STORM is not set
+# CONFIG_SND_SOC_APQ8016_SBC is not set
+CONFIG_SND_SOC_QCOM_COMMON=y
+CONFIG_SND_SOC_QCOM_SDW=y
+CONFIG_SND_SOC_QDSP6_COMMON=y
+CONFIG_SND_SOC_QDSP6_CORE=y
+CONFIG_SND_SOC_QDSP6_AFE=y
+CONFIG_SND_SOC_QDSP6_AFE_DAI=y
+CONFIG_SND_SOC_QDSP6_AFE_CLOCKS=y
+CONFIG_SND_SOC_QDSP6_ADM=y
+CONFIG_SND_SOC_QDSP6_ROUTING=y
+CONFIG_SND_SOC_QDSP6_ASM=y
+CONFIG_SND_SOC_QDSP6_ASM_DAI=y
+CONFIG_SND_SOC_QDSP6_APM_DAI=y
+CONFIG_SND_SOC_QDSP6_APM_LPASS_DAI=y
+CONFIG_SND_SOC_QDSP6_APM=y
+CONFIG_SND_SOC_QDSP6_PRM_LPASS_CLOCKS=y
+CONFIG_SND_SOC_QDSP6_PRM=y
+CONFIG_SND_SOC_QDSP6=y
+# CONFIG_SND_SOC_MSM8996 is not set
+CONFIG_SND_SOC_SDM845=y
+CONFIG_SND_SOC_SM8250=y
+# CONFIG_SND_SOC_SC8280XP is not set
+CONFIG_SND_SOC_SC7180=y
+CONFIG_SND_SOC_SC7280=y
+# CONFIG_SND_SOC_X1E80100 is not set
+# CONFIG_SND_SOC_SOF_TOPLEVEL is not set
+
+#
+# STMicroelectronics STM32 SOC audio support
+#
+# end of STMicroelectronics STM32 SOC audio support
+
+# CONFIG_SND_SOC_XILINX_I2S is not set
+# CONFIG_SND_SOC_XILINX_AUDIO_FORMATTER is not set
+# CONFIG_SND_SOC_XILINX_SPDIF is not set
+# CONFIG_SND_SOC_XTFPGA_I2S is not set
+CONFIG_SND_SOC_I2C_AND_SPI=y
+
+#
+# CODEC drivers
+#
+# CONFIG_SND_SOC_AC97_CODEC is not set
+# CONFIG_SND_SOC_ADAU1372_I2C is not set
+# CONFIG_SND_SOC_ADAU1372_SPI is not set
+# CONFIG_SND_SOC_ADAU1701 is not set
+# CONFIG_SND_SOC_ADAU1761_I2C is not set
+# CONFIG_SND_SOC_ADAU1761_SPI is not set
+CONFIG_SND_SOC_ADAU7002=y
+# CONFIG_SND_SOC_ADAU7118_HW is not set
+# CONFIG_SND_SOC_ADAU7118_I2C is not set
+# CONFIG_SND_SOC_AK4104 is not set
+# CONFIG_SND_SOC_AK4118 is not set
+# CONFIG_SND_SOC_AK4375 is not set
+# CONFIG_SND_SOC_AK4458 is not set
+# CONFIG_SND_SOC_AK4554 is not set
+# CONFIG_SND_SOC_AK4613 is not set
+# CONFIG_SND_SOC_AK4642 is not set
+# CONFIG_SND_SOC_AK5386 is not set
+# CONFIG_SND_SOC_AK5558 is not set
+# CONFIG_SND_SOC_ALC5623 is not set
+CONFIG_SND_SOC_AUDIO_IIO_AUX=y
+# CONFIG_SND_SOC_AW8738 is not set
+# CONFIG_SND_SOC_AW88395 is not set
+# CONFIG_SND_SOC_AW88261 is not set
+# CONFIG_SND_SOC_AW87390 is not set
+# CONFIG_SND_SOC_AW88399 is not set
+# CONFIG_SND_SOC_BD28623 is not set
+# CONFIG_SND_SOC_BT_SCO is not set
+# CONFIG_SND_SOC_CHV3_CODEC is not set
+# CONFIG_SND_SOC_CROS_EC_CODEC is not set
+# CONFIG_SND_SOC_CS35L32 is not set
+# CONFIG_SND_SOC_CS35L33 is not set
+# CONFIG_SND_SOC_CS35L34 is not set
+# CONFIG_SND_SOC_CS35L35 is not set
+# CONFIG_SND_SOC_CS35L36 is not set
+# CONFIG_SND_SOC_CS35L41_SPI is not set
+# CONFIG_SND_SOC_CS35L41_I2C is not set
+# CONFIG_SND_SOC_CS35L45_SPI is not set
+# CONFIG_SND_SOC_CS35L45_I2C is not set
+# CONFIG_SND_SOC_CS35L56_I2C is not set
+# CONFIG_SND_SOC_CS35L56_SPI is not set
+# CONFIG_SND_SOC_CS35L56_SDW is not set
+CONFIG_SND_SOC_CS42L42_CORE=y
+# CONFIG_SND_SOC_CS42L42 is not set
+CONFIG_SND_SOC_CS42L42_SDW=y
+# CONFIG_SND_SOC_CS42L51_I2C is not set
+# CONFIG_SND_SOC_CS42L52 is not set
+# CONFIG_SND_SOC_CS42L56 is not set
+# CONFIG_SND_SOC_CS42L73 is not set
+# CONFIG_SND_SOC_CS42L83 is not set
+# CONFIG_SND_SOC_CS4234 is not set
+# CONFIG_SND_SOC_CS4265 is not set
+# CONFIG_SND_SOC_CS4270 is not set
+# CONFIG_SND_SOC_CS4271_I2C is not set
+# CONFIG_SND_SOC_CS4271_SPI is not set
+# CONFIG_SND_SOC_CS42XX8_I2C is not set
+# CONFIG_SND_SOC_CS43130 is not set
+# CONFIG_SND_SOC_CS4341 is not set
+# CONFIG_SND_SOC_CS4349 is not set
+# CONFIG_SND_SOC_CS53L30 is not set
+# CONFIG_SND_SOC_CX2072X is not set
+# CONFIG_SND_SOC_DA7213 is not set
+# CONFIG_SND_SOC_DMIC is not set
+CONFIG_SND_SOC_HDMI_CODEC=y
+# CONFIG_SND_SOC_ES7134 is not set
+# CONFIG_SND_SOC_ES7241 is not set
+# CONFIG_SND_SOC_ES8316 is not set
+# CONFIG_SND_SOC_ES8326 is not set
+# CONFIG_SND_SOC_ES8328_I2C is not set
+# CONFIG_SND_SOC_ES8328_SPI is not set
+# CONFIG_SND_SOC_GTM601 is not set
+# CONFIG_SND_SOC_HDA is not set
+# CONFIG_SND_SOC_ICS43432 is not set
+# CONFIG_SND_SOC_IDT821034 is not set
+# CONFIG_SND_SOC_INNO_RK3036 is not set
+# CONFIG_SND_SOC_MAX98088 is not set
+# CONFIG_SND_SOC_MAX98090 is not set
+CONFIG_SND_SOC_MAX98357A=y
+# CONFIG_SND_SOC_MAX98504 is not set
+# CONFIG_SND_SOC_MAX9867 is not set
+CONFIG_SND_SOC_MAX98927=y
+# CONFIG_SND_SOC_MAX98520 is not set
+# CONFIG_SND_SOC_MAX98363 is not set
+# CONFIG_SND_SOC_MAX98373_I2C is not set
+# CONFIG_SND_SOC_MAX98373_SDW is not set
+# CONFIG_SND_SOC_MAX98388 is not set
+# CONFIG_SND_SOC_MAX98390 is not set
+# CONFIG_SND_SOC_MAX98396 is not set
+# CONFIG_SND_SOC_MAX9860 is not set
+CONFIG_SND_SOC_MSM8916_WCD_ANALOG=y
+CONFIG_SND_SOC_MSM8916_WCD_DIGITAL=y
+# CONFIG_SND_SOC_PCM1681 is not set
+# CONFIG_SND_SOC_PCM1789_I2C is not set
+# CONFIG_SND_SOC_PCM179X_I2C is not set
+# CONFIG_SND_SOC_PCM179X_SPI is not set
+# CONFIG_SND_SOC_PCM186X_I2C is not set
+# CONFIG_SND_SOC_PCM186X_SPI is not set
+# CONFIG_SND_SOC_PCM3060_I2C is not set
+# CONFIG_SND_SOC_PCM3060_SPI is not set
+# CONFIG_SND_SOC_PCM3168A_I2C is not set
+# CONFIG_SND_SOC_PCM3168A_SPI is not set
+# CONFIG_SND_SOC_PCM5102A is not set
+# CONFIG_SND_SOC_PCM512x_I2C is not set
+# CONFIG_SND_SOC_PCM512x_SPI is not set
+# CONFIG_SND_SOC_PEB2466 is not set
+# CONFIG_SND_SOC_RK3328 is not set
+CONFIG_SND_SOC_RL6231=y
+# CONFIG_SND_SOC_RT1017_SDCA_SDW is not set
+# CONFIG_SND_SOC_RT1308_SDW is not set
+# CONFIG_SND_SOC_RT1316_SDW is not set
+# CONFIG_SND_SOC_RT1318_SDW is not set
+# CONFIG_SND_SOC_RT5616 is not set
+# CONFIG_SND_SOC_RT5631 is not set
+# CONFIG_SND_SOC_RT5640 is not set
+# CONFIG_SND_SOC_RT5659 is not set
+CONFIG_SND_SOC_RT5663=y
+CONFIG_SND_SOC_RT5682=y
+CONFIG_SND_SOC_RT5682_I2C=y
+# CONFIG_SND_SOC_RT5682_SDW is not set
+CONFIG_SND_SOC_RT5682S=y
+# CONFIG_SND_SOC_RT700_SDW is not set
+# CONFIG_SND_SOC_RT711_SDW is not set
+# CONFIG_SND_SOC_RT711_SDCA_SDW is not set
+# CONFIG_SND_SOC_RT712_SDCA_SDW is not set
+# CONFIG_SND_SOC_RT712_SDCA_DMIC_SDW is not set
+# CONFIG_SND_SOC_RT722_SDCA_SDW is not set
+# CONFIG_SND_SOC_RT715_SDW is not set
+# CONFIG_SND_SOC_RT715_SDCA_SDW is not set
+# CONFIG_SND_SOC_RT9120 is not set
+# CONFIG_SND_SOC_RTQ9128 is not set
+# CONFIG_SND_SOC_SDW_MOCKUP is not set
+# CONFIG_SND_SOC_SGTL5000 is not set
+# CONFIG_SND_SOC_SIMPLE_AMPLIFIER is not set
+# CONFIG_SND_SOC_SIMPLE_MUX is not set
+# CONFIG_SND_SOC_SMA1303 is not set
+# CONFIG_SND_SOC_SPDIF is not set
+# CONFIG_SND_SOC_SRC4XXX_I2C is not set
+# CONFIG_SND_SOC_SSM2305 is not set
+# CONFIG_SND_SOC_SSM2518 is not set
+# CONFIG_SND_SOC_SSM2602_SPI is not set
+# CONFIG_SND_SOC_SSM2602_I2C is not set
+# CONFIG_SND_SOC_SSM3515 is not set
+# CONFIG_SND_SOC_SSM4567 is not set
+# CONFIG_SND_SOC_STA32X is not set
+# CONFIG_SND_SOC_STA350 is not set
+# CONFIG_SND_SOC_STI_SAS is not set
+# CONFIG_SND_SOC_TAS2552 is not set
+CONFIG_SND_SOC_TAS2562=m
+# CONFIG_SND_SOC_TAS2764 is not set
+# CONFIG_SND_SOC_TAS2770 is not set
+# CONFIG_SND_SOC_TAS2780 is not set
+# CONFIG_SND_SOC_TAS2781_I2C is not set
+# CONFIG_SND_SOC_TAS5086 is not set
+# CONFIG_SND_SOC_TAS571X is not set
+# CONFIG_SND_SOC_TAS5720 is not set
+# CONFIG_SND_SOC_TAS5805M is not set
+# CONFIG_SND_SOC_TAS6424 is not set
+# CONFIG_SND_SOC_TDA7419 is not set
+# CONFIG_SND_SOC_TFA9879 is not set
+# CONFIG_SND_SOC_TFA989X is not set
+# CONFIG_SND_SOC_TLV320ADC3XXX is not set
+# CONFIG_SND_SOC_TLV320AIC23_I2C is not set
+# CONFIG_SND_SOC_TLV320AIC23_SPI is not set
+# CONFIG_SND_SOC_TLV320AIC31XX is not set
+# CONFIG_SND_SOC_TLV320AIC32X4_I2C is not set
+# CONFIG_SND_SOC_TLV320AIC32X4_SPI is not set
+# CONFIG_SND_SOC_TLV320AIC3X_I2C is not set
+# CONFIG_SND_SOC_TLV320AIC3X_SPI is not set
+# CONFIG_SND_SOC_TLV320ADCX140 is not set
+# CONFIG_SND_SOC_TS3A227E is not set
+# CONFIG_SND_SOC_TSCS42XX is not set
+# CONFIG_SND_SOC_TSCS454 is not set
+# CONFIG_SND_SOC_UDA1334 is not set
+CONFIG_SND_SOC_WCD_CLASSH=y
+CONFIG_SND_SOC_WCD9335=y
+CONFIG_SND_SOC_WCD_MBHC=y
+CONFIG_SND_SOC_WCD934X=y
+CONFIG_SND_SOC_WCD938X=y
+CONFIG_SND_SOC_WCD938X_SDW=y
+CONFIG_SND_SOC_WCD939X=y
+CONFIG_SND_SOC_WCD939X_SDW=y
+# CONFIG_SND_SOC_WM8510 is not set
+# CONFIG_SND_SOC_WM8523 is not set
+# CONFIG_SND_SOC_WM8524 is not set
+# CONFIG_SND_SOC_WM8580 is not set
+# CONFIG_SND_SOC_WM8711 is not set
+# CONFIG_SND_SOC_WM8728 is not set
+# CONFIG_SND_SOC_WM8731_I2C is not set
+# CONFIG_SND_SOC_WM8731_SPI is not set
+# CONFIG_SND_SOC_WM8737 is not set
+# CONFIG_SND_SOC_WM8741 is not set
+# CONFIG_SND_SOC_WM8750 is not set
+# CONFIG_SND_SOC_WM8753 is not set
+# CONFIG_SND_SOC_WM8770 is not set
+# CONFIG_SND_SOC_WM8776 is not set
+# CONFIG_SND_SOC_WM8782 is not set
+# CONFIG_SND_SOC_WM8804_I2C is not set
+# CONFIG_SND_SOC_WM8804_SPI is not set
+# CONFIG_SND_SOC_WM8903 is not set
+# CONFIG_SND_SOC_WM8904 is not set
+# CONFIG_SND_SOC_WM8940 is not set
+# CONFIG_SND_SOC_WM8960 is not set
+# CONFIG_SND_SOC_WM8961 is not set
+# CONFIG_SND_SOC_WM8962 is not set
+# CONFIG_SND_SOC_WM8974 is not set
+# CONFIG_SND_SOC_WM8978 is not set
+# CONFIG_SND_SOC_WM8985 is not set
+# CONFIG_SND_SOC_WSA881X is not set
+# CONFIG_SND_SOC_WSA883X is not set
+# CONFIG_SND_SOC_WSA884X is not set
+# CONFIG_SND_SOC_ZL38060 is not set
+# CONFIG_SND_SOC_MAX9759 is not set
+# CONFIG_SND_SOC_MT6351 is not set
+# CONFIG_SND_SOC_MT6358 is not set
+# CONFIG_SND_SOC_MT6660 is not set
+# CONFIG_SND_SOC_NAU8315 is not set
+# CONFIG_SND_SOC_NAU8540 is not set
+# CONFIG_SND_SOC_NAU8810 is not set
+# CONFIG_SND_SOC_NAU8821 is not set
+# CONFIG_SND_SOC_NAU8822 is not set
+# CONFIG_SND_SOC_NAU8824 is not set
+# CONFIG_SND_SOC_TPA6130A2 is not set
+CONFIG_SND_SOC_LPASS_MACRO_COMMON=y
+CONFIG_SND_SOC_LPASS_WSA_MACRO=y
+CONFIG_SND_SOC_LPASS_VA_MACRO=y
+CONFIG_SND_SOC_LPASS_RX_MACRO=y
+CONFIG_SND_SOC_LPASS_TX_MACRO=y
+# end of CODEC drivers
+
+CONFIG_SND_SIMPLE_CARD_UTILS=y
+CONFIG_SND_SIMPLE_CARD=y
+CONFIG_SND_AUDIO_GRAPH_CARD=y
+CONFIG_SND_AUDIO_GRAPH_CARD2=y
+CONFIG_SND_AUDIO_GRAPH_CARD2_CUSTOM_SAMPLE=y
+# CONFIG_SND_TEST_COMPONENT is not set
+CONFIG_SND_VIRTIO=y
+CONFIG_HID_SUPPORT=y
+CONFIG_HID=y
+CONFIG_HID_BATTERY_STRENGTH=y
+CONFIG_HIDRAW=y
+CONFIG_UHID=m
+CONFIG_HID_GENERIC=y
+
+#
+# Special HID drivers
+#
+# CONFIG_HID_A4TECH is not set
+# CONFIG_HID_ACCUTOUCH is not set
+# CONFIG_HID_ACRUX is not set
+# CONFIG_HID_APPLE is not set
+# CONFIG_HID_APPLEIR is not set
+# CONFIG_HID_ASUS is not set
+# CONFIG_HID_AUREAL is not set
+# CONFIG_HID_BELKIN is not set
+# CONFIG_HID_BETOP_FF is not set
+# CONFIG_HID_BIGBEN_FF is not set
+# CONFIG_HID_CHERRY is not set
+# CONFIG_HID_CHICONY is not set
+# CONFIG_HID_CORSAIR is not set
+# CONFIG_HID_COUGAR is not set
+# CONFIG_HID_MACALLY is not set
+# CONFIG_HID_PRODIKEYS is not set
+# CONFIG_HID_CMEDIA is not set
+# CONFIG_HID_CP2112 is not set
+# CONFIG_HID_CREATIVE_SB0540 is not set
+# CONFIG_HID_CYPRESS is not set
+# CONFIG_HID_DRAGONRISE is not set
+# CONFIG_HID_EMS_FF is not set
+# CONFIG_HID_ELAN is not set
+# CONFIG_HID_ELECOM is not set
+# CONFIG_HID_ELO is not set
+# CONFIG_HID_EVISION is not set
+# CONFIG_HID_EZKEY is not set
+# CONFIG_HID_FT260 is not set
+# CONFIG_HID_GEMBIRD is not set
+# CONFIG_HID_GFRM is not set
+# CONFIG_HID_GLORIOUS is not set
+# CONFIG_HID_HOLTEK is not set
+# CONFIG_HID_GOOGLE_STADIA_FF is not set
+# CONFIG_HID_VIVALDI is not set
+# CONFIG_HID_GT683R is not set
+# CONFIG_HID_KEYTOUCH is not set
+# CONFIG_HID_KYE is not set
+# CONFIG_HID_UCLOGIC is not set
+# CONFIG_HID_WALTOP is not set
+# CONFIG_HID_VIEWSONIC is not set
+# CONFIG_HID_VRC2 is not set
+# CONFIG_HID_XIAOMI is not set
+# CONFIG_HID_GYRATION is not set
+# CONFIG_HID_ICADE is not set
+# CONFIG_HID_ITE is not set
+# CONFIG_HID_JABRA is not set
+# CONFIG_HID_TWINHAN is not set
+# CONFIG_HID_KENSINGTON is not set
+# CONFIG_HID_LCPOWER is not set
+# CONFIG_HID_LED is not set
+# CONFIG_HID_LENOVO is not set
+# CONFIG_HID_LETSKETCH is not set
+# CONFIG_HID_LOGITECH is not set
+# CONFIG_HID_MAGICMOUSE is not set
+# CONFIG_HID_MALTRON is not set
+# CONFIG_HID_MAYFLASH is not set
+# CONFIG_HID_MEGAWORLD_FF is not set
+# CONFIG_HID_REDRAGON is not set
+# CONFIG_HID_MICROSOFT is not set
+# CONFIG_HID_MONTEREY is not set
+# CONFIG_HID_MULTITOUCH is not set
+# CONFIG_HID_NINTENDO is not set
+# CONFIG_HID_NTI is not set
+# CONFIG_HID_NTRIG is not set
+# CONFIG_HID_NVIDIA_SHIELD is not set
+# CONFIG_HID_ORTEK is not set
+# CONFIG_HID_PANTHERLORD is not set
+# CONFIG_HID_PENMOUNT is not set
+# CONFIG_HID_PETALYNX is not set
+# CONFIG_HID_PICOLCD is not set
+# CONFIG_HID_PLANTRONICS is not set
+# CONFIG_HID_PLAYSTATION is not set
+# CONFIG_HID_PXRC is not set
+# CONFIG_HID_RAZER is not set
+# CONFIG_HID_PRIMAX is not set
+# CONFIG_HID_RETRODE is not set
+# CONFIG_HID_ROCCAT is not set
+# CONFIG_HID_SAITEK is not set
+# CONFIG_HID_SAMSUNG is not set
+# CONFIG_HID_SEMITEK is not set
+# CONFIG_HID_SIGMAMICRO is not set
+# CONFIG_HID_SONY is not set
+# CONFIG_HID_SPEEDLINK is not set
+# CONFIG_HID_STEAM is not set
+# CONFIG_HID_STEELSERIES is not set
+# CONFIG_HID_SUNPLUS is not set
+# CONFIG_HID_RMI is not set
+# CONFIG_HID_GREENASIA is not set
+# CONFIG_HID_SMARTJOYPLUS is not set
+# CONFIG_HID_TIVO is not set
+# CONFIG_HID_TOPSEED is not set
+# CONFIG_HID_TOPRE is not set
+# CONFIG_HID_THINGM is not set
+# CONFIG_HID_THRUSTMASTER is not set
+# CONFIG_HID_UDRAW_PS3 is not set
+# CONFIG_HID_U2FZERO is not set
+# CONFIG_HID_WACOM is not set
+# CONFIG_HID_WIIMOTE is not set
+# CONFIG_HID_XINMO is not set
+# CONFIG_HID_ZEROPLUS is not set
+# CONFIG_HID_ZYDACRON is not set
+# CONFIG_HID_SENSOR_HUB is not set
+# CONFIG_HID_ALPS is not set
+# CONFIG_HID_MCP2200 is not set
+# CONFIG_HID_MCP2221 is not set
+# end of Special HID drivers
+
+#
+# HID-BPF support
+#
+# end of HID-BPF support
+
+#
+# USB HID support
+#
+CONFIG_USB_HID=m
+# CONFIG_HID_PID is not set
+CONFIG_USB_HIDDEV=y
+
+#
+# USB HID Boot Protocol drivers
+#
+# CONFIG_USB_KBD is not set
+# CONFIG_USB_MOUSE is not set
+# end of USB HID Boot Protocol drivers
+# end of USB HID support
+
+CONFIG_I2C_HID=y
+# CONFIG_I2C_HID_OF is not set
+CONFIG_I2C_HID_OF_ELAN=y
+# CONFIG_I2C_HID_OF_GOODIX is not set
+CONFIG_I2C_HID_CORE=y
+CONFIG_USB_OHCI_LITTLE_ENDIAN=y
+CONFIG_USB_SUPPORT=y
+CONFIG_USB_COMMON=y
+CONFIG_USB_LED_TRIG=y
+CONFIG_USB_ULPI_BUS=y
+# CONFIG_USB_CONN_GPIO is not set
+CONFIG_USB_ARCH_HAS_HCD=y
+CONFIG_USB=y
+CONFIG_USB_PCI=y
+# CONFIG_USB_PCI_AMD is not set
+CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
+
+#
+# Miscellaneous USB options
+#
+CONFIG_USB_DEFAULT_PERSIST=y
+# CONFIG_USB_FEW_INIT_RETRIES is not set
+# CONFIG_USB_DYNAMIC_MINORS is not set
+CONFIG_USB_OTG=y
+# CONFIG_USB_OTG_PRODUCTLIST is not set
+# CONFIG_USB_OTG_DISABLE_EXTERNAL_HUB is not set
+CONFIG_USB_OTG_FSM=y
+# CONFIG_USB_LEDS_TRIGGER_USBPORT is not set
+CONFIG_USB_AUTOSUSPEND_DELAY=2
+CONFIG_USB_DEFAULT_AUTHORIZATION_MODE=1
+# CONFIG_USB_MON is not set
+
+#
+# USB Host Controller Drivers
+#
+# CONFIG_USB_C67X00_HCD is not set
+CONFIG_USB_XHCI_HCD=y
+# CONFIG_USB_XHCI_DBGCAP is not set
+CONFIG_USB_XHCI_PCI=y
+# CONFIG_USB_XHCI_PCI_RENESAS is not set
+CONFIG_USB_XHCI_PLATFORM=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_ROOT_HUB_TT=y
+CONFIG_USB_EHCI_TT_NEWSCHED=y
+CONFIG_USB_EHCI_PCI=y
+# CONFIG_USB_EHCI_FSL is not set
+CONFIG_USB_EHCI_HCD_PLATFORM=y
+# CONFIG_USB_OXU210HP_HCD is not set
+# CONFIG_USB_ISP116X_HCD is not set
+# CONFIG_USB_MAX3421_HCD is not set
+# CONFIG_USB_OHCI_HCD is not set
+# CONFIG_USB_UHCI_HCD is not set
+# CONFIG_USB_SL811_HCD is not set
+# CONFIG_USB_R8A66597_HCD is not set
+# CONFIG_USB_HCD_TEST_MODE is not set
+
+#
+# USB Device Class drivers
+#
+# CONFIG_USB_ACM is not set
+# CONFIG_USB_PRINTER is not set
+# CONFIG_USB_WDM is not set
+# CONFIG_USB_TMC is not set
+
+#
+# NOTE: USB_STORAGE depends on SCSI but BLK_DEV_SD may
+#
+
+#
+# also be needed; see USB_STORAGE Help for more info
+#
+# CONFIG_USB_STORAGE is not set
+
+#
+# USB Imaging devices
+#
+# CONFIG_USB_MDC800 is not set
+# CONFIG_USB_MICROTEK is not set
+# CONFIG_USBIP_CORE is not set
+
+#
+# USB dual-mode controller drivers
+#
+CONFIG_USB_CDNS_SUPPORT=y
+CONFIG_USB_CDNS_HOST=y
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_CDNS3_HOST=y
+# CONFIG_USB_MUSB_HDRC is not set
+CONFIG_USB_DWC3=y
+CONFIG_USB_DWC3_ULPI=y
+# CONFIG_USB_DWC3_HOST is not set
+# CONFIG_USB_DWC3_GADGET is not set
+CONFIG_USB_DWC3_DUAL_ROLE=y
+
+#
+# Platform Glue Driver Support
+#
+CONFIG_USB_DWC3_HAPS=y
+CONFIG_USB_DWC3_OF_SIMPLE=y
+CONFIG_USB_DWC3_QCOM=y
+# CONFIG_USB_DWC2 is not set
+# CONFIG_USB_CHIPIDEA is not set
+# CONFIG_USB_ISP1760 is not set
+
+#
+# USB port drivers
+#
+# CONFIG_USB_SERIAL is not set
+
+#
+# USB Miscellaneous drivers
+#
+# CONFIG_USB_EMI62 is not set
+# CONFIG_USB_EMI26 is not set
+# CONFIG_USB_ADUTUX is not set
+# CONFIG_USB_SEVSEG is not set
+# CONFIG_USB_LEGOTOWER is not set
+# CONFIG_USB_LCD is not set
+# CONFIG_USB_CYPRESS_CY7C63 is not set
+# CONFIG_USB_CYTHERM is not set
+# CONFIG_USB_IDMOUSE is not set
+# CONFIG_USB_APPLEDISPLAY is not set
+CONFIG_USB_QCOM_EUD=y
+# CONFIG_APPLE_MFI_FASTCHARGE is not set
+# CONFIG_USB_SISUSBVGA is not set
+# CONFIG_USB_LD is not set
+# CONFIG_USB_TRANCEVIBRATOR is not set
+# CONFIG_USB_IOWARRIOR is not set
+# CONFIG_USB_TEST is not set
+# CONFIG_USB_EHSET_TEST_FIXTURE is not set
+# CONFIG_USB_ISIGHTFW is not set
+# CONFIG_USB_YUREX is not set
+# CONFIG_USB_EZUSB_FX2 is not set
+# CONFIG_USB_HUB_USB251XB is not set
+# CONFIG_USB_HSIC_USB3503 is not set
+# CONFIG_USB_HSIC_USB4604 is not set
+# CONFIG_USB_LINK_LAYER_TEST is not set
+# CONFIG_USB_CHAOSKEY is not set
+CONFIG_USB_ONBOARD_HUB=y
+
+#
+# USB Physical Layer drivers
+#
+CONFIG_USB_PHY=y
+# CONFIG_NOP_USB_XCEIV is not set
+# CONFIG_USB_GPIO_VBUS is not set
+# CONFIG_USB_ISP1301 is not set
+CONFIG_USB_ULPI=y
+CONFIG_USB_ULPI_VIEWPORT=y
+# end of USB Physical Layer drivers
+
+CONFIG_USB_GADGET=y
+# CONFIG_USB_GADGET_DEBUG is not set
+# CONFIG_USB_GADGET_DEBUG_FILES is not set
+# CONFIG_USB_GADGET_DEBUG_FS is not set
+CONFIG_USB_GADGET_VBUS_DRAW=500
+CONFIG_USB_GADGET_STORAGE_NUM_BUFFERS=2
+# CONFIG_U_SERIAL_CONSOLE is not set
+
+#
+# USB Peripheral Controller
+#
+# CONFIG_USB_GR_UDC is not set
+# CONFIG_USB_R8A66597 is not set
+# CONFIG_USB_PXA27X is not set
+# CONFIG_USB_MV_UDC is not set
+# CONFIG_USB_MV_U3D is not set
+# CONFIG_USB_SNP_UDC_PLAT is not set
+# CONFIG_USB_M66592 is not set
+# CONFIG_USB_BDC_UDC is not set
+# CONFIG_USB_AMD5536UDC is not set
+# CONFIG_USB_NET2272 is not set
+# CONFIG_USB_NET2280 is not set
+# CONFIG_USB_GOKU is not set
+# CONFIG_USB_EG20T is not set
+# CONFIG_USB_GADGET_XILINX is not set
+# CONFIG_USB_MAX3420_UDC is not set
+CONFIG_USB_DUMMY_HCD=y
+# end of USB Peripheral Controller
+
+CONFIG_USB_LIBCOMPOSITE=y
+CONFIG_USB_F_ACM=y
+CONFIG_USB_F_SS_LB=y
+CONFIG_USB_U_SERIAL=y
+CONFIG_USB_U_ETHER=y
+CONFIG_USB_U_AUDIO=y
+CONFIG_USB_F_SERIAL=y
+CONFIG_USB_F_OBEX=y
+CONFIG_USB_F_NCM=y
+CONFIG_USB_F_ECM=y
+CONFIG_USB_F_EEM=y
+CONFIG_USB_F_SUBSET=y
+CONFIG_USB_F_RNDIS=y
+CONFIG_USB_F_MASS_STORAGE=y
+CONFIG_USB_F_FS=y
+CONFIG_USB_F_UAC1=y
+CONFIG_USB_F_UAC2=y
+CONFIG_USB_F_MIDI=y
+CONFIG_USB_F_MIDI2=y
+CONFIG_USB_F_HID=y
+CONFIG_USB_CONFIGFS=y
+CONFIG_USB_CONFIGFS_SERIAL=y
+CONFIG_USB_CONFIGFS_ACM=y
+CONFIG_USB_CONFIGFS_OBEX=y
+CONFIG_USB_CONFIGFS_NCM=y
+CONFIG_USB_CONFIGFS_ECM=y
+CONFIG_USB_CONFIGFS_ECM_SUBSET=y
+CONFIG_USB_CONFIGFS_RNDIS=y
+CONFIG_USB_CONFIGFS_EEM=y
+CONFIG_USB_CONFIGFS_MASS_STORAGE=y
+CONFIG_USB_CONFIGFS_F_LB_SS=y
+CONFIG_USB_CONFIGFS_F_FS=y
+CONFIG_USB_CONFIGFS_F_UAC1=y
+# CONFIG_USB_CONFIGFS_F_UAC1_LEGACY is not set
+CONFIG_USB_CONFIGFS_F_UAC2=y
+CONFIG_USB_CONFIGFS_F_MIDI=y
+CONFIG_USB_CONFIGFS_F_MIDI2=y
+CONFIG_USB_CONFIGFS_F_HID=y
+# CONFIG_USB_CONFIGFS_F_UVC is not set
+# CONFIG_USB_CONFIGFS_F_PRINTER is not set
+
+#
+# USB Gadget precomposed configurations
+#
+# CONFIG_USB_ZERO is not set
+# CONFIG_USB_AUDIO is not set
+# CONFIG_USB_ETH is not set
+# CONFIG_USB_G_NCM is not set
+# CONFIG_USB_GADGETFS is not set
+# CONFIG_USB_FUNCTIONFS is not set
+# CONFIG_USB_MASS_STORAGE is not set
+# CONFIG_USB_G_SERIAL is not set
+# CONFIG_USB_MIDI_GADGET is not set
+# CONFIG_USB_G_PRINTER is not set
+# CONFIG_USB_CDC_COMPOSITE is not set
+# CONFIG_USB_G_ACM_MS is not set
+# CONFIG_USB_G_MULTI is not set
+# CONFIG_USB_G_HID is not set
+# CONFIG_USB_G_DBGP is not set
+# CONFIG_USB_G_WEBCAM is not set
+# CONFIG_USB_RAW_GADGET is not set
+# end of USB Gadget precomposed configurations
+
+CONFIG_TYPEC=y
+CONFIG_TYPEC_TCPM=y
+CONFIG_TYPEC_TCPCI=y
+# CONFIG_TYPEC_RT1711H is not set
+# CONFIG_TYPEC_TCPCI_MAXIM is not set
+# CONFIG_TYPEC_FUSB302 is not set
+CONFIG_TYPEC_QCOM_PMIC=y
+CONFIG_TYPEC_UCSI=y
+# CONFIG_UCSI_CCG is not set
+# CONFIG_UCSI_STM32G0 is not set
+CONFIG_UCSI_PMIC_GLINK=y
+# CONFIG_TYPEC_TPS6598X is not set
+# CONFIG_TYPEC_ANX7411 is not set
+# CONFIG_TYPEC_RT1719 is not set
+# CONFIG_TYPEC_HD3SS3220 is not set
+# CONFIG_TYPEC_STUSB160X is not set
+# CONFIG_TYPEC_WUSB3801 is not set
+
+#
+# USB Type-C Multiplexer/DeMultiplexer Switch support
+#
+CONFIG_TYPEC_MUX_FSA4480=m
+CONFIG_TYPEC_MUX_GPIO_SBU=y
+# CONFIG_TYPEC_MUX_PI3USB30532 is not set
+# CONFIG_TYPEC_MUX_IT5205 is not set
+# CONFIG_TYPEC_MUX_NB7VPQ904M is not set
+# CONFIG_TYPEC_MUX_PTN36502 is not set
+# CONFIG_TYPEC_MUX_WCD939X_USBSS is not set
+# end of USB Type-C Multiplexer/DeMultiplexer Switch support
+
+#
+# USB Type-C Alternate Mode drivers
+#
+CONFIG_TYPEC_DP_ALTMODE=y
+# CONFIG_TYPEC_NVIDIA_ALTMODE is not set
+# end of USB Type-C Alternate Mode drivers
+
+CONFIG_USB_ROLE_SWITCH=y
+CONFIG_MMC=y
+CONFIG_PWRSEQ_EMMC=y
+CONFIG_PWRSEQ_SIMPLE=y
+CONFIG_MMC_BLOCK=y
+CONFIG_MMC_BLOCK_MINORS=64
+CONFIG_SDIO_UART=y
+# CONFIG_MMC_TEST is not set
+
+#
+# MMC/SD/SDIO Host Controller Drivers
+#
+CONFIG_MMC_DEBUG=y
+CONFIG_MMC_ARMMMCI=y
+CONFIG_MMC_QCOM_DML=y
+CONFIG_MMC_STM32_SDMMC=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_IO_ACCESSORS=y
+# CONFIG_MMC_SDHCI_PCI is not set
+CONFIG_MMC_SDHCI_PLTFM=y
+# CONFIG_MMC_SDHCI_OF_ARASAN is not set
+# CONFIG_MMC_SDHCI_OF_AT91 is not set
+CONFIG_MMC_SDHCI_OF_DWCMSHC=y
+CONFIG_MMC_SDHCI_CADENCE=y
+# CONFIG_MMC_SDHCI_F_SDH30 is not set
+# CONFIG_MMC_SDHCI_MILBEAUT is not set
+CONFIG_MMC_SDHCI_MSM=y
+# CONFIG_MMC_TIFM_SD is not set
+# CONFIG_MMC_SPI is not set
+# CONFIG_MMC_CB710 is not set
+# CONFIG_MMC_VIA_SDMMC is not set
+CONFIG_MMC_DW=y
+CONFIG_MMC_DW_PLTFM=y
+# CONFIG_MMC_DW_BLUEFIELD is not set
+# CONFIG_MMC_DW_EXYNOS is not set
+# CONFIG_MMC_DW_HI3798CV200 is not set
+# CONFIG_MMC_DW_HI3798MV200 is not set
+# CONFIG_MMC_DW_K3 is not set
+# CONFIG_MMC_DW_PCI is not set
+# CONFIG_MMC_VUB300 is not set
+CONFIG_MMC_USHC=y
+# CONFIG_MMC_USDHI6ROL0 is not set
+CONFIG_MMC_CQHCI=y
+CONFIG_MMC_HSQ=y
+# CONFIG_MMC_TOSHIBA_PCI is not set
+# CONFIG_MMC_MTK is not set
+# CONFIG_MMC_SDHCI_XENON is not set
+CONFIG_SCSI_UFSHCD=y
+CONFIG_SCSI_UFS_BSG=y
+CONFIG_SCSI_UFS_HWMON=y
+# CONFIG_SCSI_UFSHCD_PCI is not set
+CONFIG_SCSI_UFSHCD_PLATFORM=y
+CONFIG_SCSI_UFS_CDNS_PLATFORM=y
+# CONFIG_SCSI_UFS_DWC_TC_PLATFORM is not set
+CONFIG_SCSI_UFS_QCOM=y
+# CONFIG_MEMSTICK is not set
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_CLASS_FLASH=y
+CONFIG_LEDS_CLASS_MULTICOLOR=y
+# CONFIG_LEDS_BRIGHTNESS_HW_CHANGED is not set
+
+#
+# LED drivers
+#
+# CONFIG_LEDS_AN30259A is not set
+# CONFIG_LEDS_AW200XX is not set
+# CONFIG_LEDS_AW2013 is not set
+# CONFIG_LEDS_BCM6328 is not set
+# CONFIG_LEDS_BCM6358 is not set
+# CONFIG_LEDS_CR0014114 is not set
+# CONFIG_LEDS_EL15203000 is not set
+# CONFIG_LEDS_LM3530 is not set
+# CONFIG_LEDS_LM3532 is not set
+# CONFIG_LEDS_LM3642 is not set
+# CONFIG_LEDS_LM3692X is not set
+# CONFIG_LEDS_PCA9532 is not set
+# CONFIG_LEDS_GPIO is not set
+# CONFIG_LEDS_LP3944 is not set
+# CONFIG_LEDS_LP3952 is not set
+# CONFIG_LEDS_LP50XX is not set
+# CONFIG_LEDS_LP55XX_COMMON is not set
+# CONFIG_LEDS_LP8860 is not set
+# CONFIG_LEDS_PCA955X is not set
+# CONFIG_LEDS_PCA963X is not set
+# CONFIG_LEDS_PCA995X is not set
+# CONFIG_LEDS_DAC124S085 is not set
+# CONFIG_LEDS_PWM is not set
+# CONFIG_LEDS_REGULATOR is not set
+# CONFIG_LEDS_BD2606MVV is not set
+# CONFIG_LEDS_BD2802 is not set
+# CONFIG_LEDS_LT3593 is not set
+# CONFIG_LEDS_TCA6507 is not set
+# CONFIG_LEDS_TLC591XX is not set
+# CONFIG_LEDS_LM355x is not set
+# CONFIG_LEDS_IS31FL319X is not set
+# CONFIG_LEDS_IS31FL32XX is not set
+
+#
+# LED driver for blink(1) USB RGB LED is under Special HID drivers (HID_THINGM)
+#
+# CONFIG_LEDS_BLINKM is not set
+# CONFIG_LEDS_SYSCON is not set
+# CONFIG_LEDS_MLXREG is not set
+# CONFIG_LEDS_USER is not set
+# CONFIG_LEDS_SPI_BYTE is not set
+# CONFIG_LEDS_LM3697 is not set
+
+#
+# Flash and Torch LED drivers
+#
+# CONFIG_LEDS_AAT1290 is not set
+# CONFIG_LEDS_AS3645A is not set
+# CONFIG_LEDS_KTD2692 is not set
+# CONFIG_LEDS_LM3601X is not set
+CONFIG_LEDS_QCOM_FLASH=y
+# CONFIG_LEDS_RT4505 is not set
+# CONFIG_LEDS_RT8515 is not set
+# CONFIG_LEDS_SGM3140 is not set
+
+#
+# RGB LED drivers
+#
+# CONFIG_LEDS_GROUP_MULTICOLOR is not set
+# CONFIG_LEDS_KTD202X is not set
+# CONFIG_LEDS_NCP5623 is not set
+# CONFIG_LEDS_PWM_MULTICOLOR is not set
+CONFIG_LEDS_QCOM_LPG=y
+
+#
+# LED Triggers
+#
+CONFIG_LEDS_TRIGGERS=y
+CONFIG_LEDS_TRIGGER_TIMER=y
+CONFIG_LEDS_TRIGGER_ONESHOT=y
+# CONFIG_LEDS_TRIGGER_MTD is not set
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_BACKLIGHT=y
+CONFIG_LEDS_TRIGGER_CPU=y
+CONFIG_LEDS_TRIGGER_ACTIVITY=y
+# CONFIG_LEDS_TRIGGER_GPIO is not set
+CONFIG_LEDS_TRIGGER_DEFAULT_ON=y
+
+#
+# iptables trigger is under Netfilter config (LED target)
+#
+CONFIG_LEDS_TRIGGER_TRANSIENT=y
+CONFIG_LEDS_TRIGGER_CAMERA=y
+CONFIG_LEDS_TRIGGER_PANIC=y
+CONFIG_LEDS_TRIGGER_NETDEV=y
+CONFIG_LEDS_TRIGGER_PATTERN=y
+CONFIG_LEDS_TRIGGER_AUDIO=y
+CONFIG_LEDS_TRIGGER_TTY=y
+
+#
+# Simple LED drivers
+#
+# CONFIG_ACCESSIBILITY is not set
+# CONFIG_INFINIBAND is not set
+CONFIG_EDAC_SUPPORT=y
+# CONFIG_EDAC is not set
+CONFIG_RTC_LIB=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_HCTOSYS=y
+CONFIG_RTC_HCTOSYS_DEVICE="rtc0"
+CONFIG_RTC_SYSTOHC=y
+CONFIG_RTC_SYSTOHC_DEVICE="rtc0"
+# CONFIG_RTC_DEBUG is not set
+CONFIG_RTC_NVMEM=y
+
+#
+# RTC interfaces
+#
+CONFIG_RTC_INTF_SYSFS=y
+CONFIG_RTC_INTF_PROC=y
+CONFIG_RTC_INTF_DEV=y
+# CONFIG_RTC_INTF_DEV_UIE_EMUL is not set
+# CONFIG_RTC_DRV_TEST is not set
+
+#
+# I2C RTC drivers
+#
+# CONFIG_RTC_DRV_ABB5ZES3 is not set
+# CONFIG_RTC_DRV_ABEOZ9 is not set
+# CONFIG_RTC_DRV_ABX80X is not set
+# CONFIG_RTC_DRV_DS1307 is not set
+# CONFIG_RTC_DRV_DS1374 is not set
+# CONFIG_RTC_DRV_DS1672 is not set
+# CONFIG_RTC_DRV_HYM8563 is not set
+# CONFIG_RTC_DRV_MAX6900 is not set
+# CONFIG_RTC_DRV_MAX31335 is not set
+# CONFIG_RTC_DRV_NCT3018Y is not set
+# CONFIG_RTC_DRV_RS5C372 is not set
+# CONFIG_RTC_DRV_ISL1208 is not set
+# CONFIG_RTC_DRV_ISL12022 is not set
+# CONFIG_RTC_DRV_ISL12026 is not set
+# CONFIG_RTC_DRV_X1205 is not set
+# CONFIG_RTC_DRV_PCF8523 is not set
+# CONFIG_RTC_DRV_PCF85063 is not set
+# CONFIG_RTC_DRV_PCF85363 is not set
+# CONFIG_RTC_DRV_PCF8563 is not set
+# CONFIG_RTC_DRV_PCF8583 is not set
+# CONFIG_RTC_DRV_M41T80 is not set
+# CONFIG_RTC_DRV_BQ32K is not set
+# CONFIG_RTC_DRV_S35390A is not set
+# CONFIG_RTC_DRV_FM3130 is not set
+# CONFIG_RTC_DRV_RX8010 is not set
+# CONFIG_RTC_DRV_RX8581 is not set
+# CONFIG_RTC_DRV_RX8025 is not set
+# CONFIG_RTC_DRV_EM3027 is not set
+# CONFIG_RTC_DRV_RV3028 is not set
+# CONFIG_RTC_DRV_RV3032 is not set
+# CONFIG_RTC_DRV_RV8803 is not set
+# CONFIG_RTC_DRV_SD3078 is not set
+
+#
+# SPI RTC drivers
+#
+# CONFIG_RTC_DRV_M41T93 is not set
+# CONFIG_RTC_DRV_M41T94 is not set
+# CONFIG_RTC_DRV_DS1302 is not set
+# CONFIG_RTC_DRV_DS1305 is not set
+# CONFIG_RTC_DRV_DS1343 is not set
+# CONFIG_RTC_DRV_DS1347 is not set
+# CONFIG_RTC_DRV_DS1390 is not set
+# CONFIG_RTC_DRV_MAX6916 is not set
+# CONFIG_RTC_DRV_R9701 is not set
+# CONFIG_RTC_DRV_RX4581 is not set
+# CONFIG_RTC_DRV_RS5C348 is not set
+# CONFIG_RTC_DRV_MAX6902 is not set
+# CONFIG_RTC_DRV_PCF2123 is not set
+# CONFIG_RTC_DRV_MCP795 is not set
+CONFIG_RTC_I2C_AND_SPI=y
+
+#
+# SPI and I2C RTC drivers
+#
+# CONFIG_RTC_DRV_DS3232 is not set
+# CONFIG_RTC_DRV_PCF2127 is not set
+# CONFIG_RTC_DRV_RV3029C2 is not set
+# CONFIG_RTC_DRV_RX6110 is not set
+
+#
+# Platform RTC drivers
+#
+# CONFIG_RTC_DRV_DS1286 is not set
+# CONFIG_RTC_DRV_DS1511 is not set
+# CONFIG_RTC_DRV_DS1553 is not set
+# CONFIG_RTC_DRV_DS1685_FAMILY is not set
+# CONFIG_RTC_DRV_DS1742 is not set
+# CONFIG_RTC_DRV_DS2404 is not set
+# CONFIG_RTC_DRV_STK17TA8 is not set
+# CONFIG_RTC_DRV_M48T86 is not set
+# CONFIG_RTC_DRV_M48T35 is not set
+# CONFIG_RTC_DRV_M48T59 is not set
+# CONFIG_RTC_DRV_MSM6242 is not set
+# CONFIG_RTC_DRV_RP5C01 is not set
+# CONFIG_RTC_DRV_ZYNQMP is not set
+
+#
+# on-CPU RTC drivers
+#
+# CONFIG_RTC_DRV_PL030 is not set
+# CONFIG_RTC_DRV_PL031 is not set
+# CONFIG_RTC_DRV_CADENCE is not set
+# CONFIG_RTC_DRV_FTRTC010 is not set
+CONFIG_RTC_DRV_PM8XXX=y
+# CONFIG_RTC_DRV_R7301 is not set
+
+#
+# HID Sensor RTC drivers
+#
+# CONFIG_RTC_DRV_GOLDFISH is not set
+CONFIG_DMADEVICES=y
+# CONFIG_DMADEVICES_DEBUG is not set
+
+#
+# DMA Devices
+#
+CONFIG_DMA_ENGINE=y
+CONFIG_DMA_VIRTUAL_CHANNELS=y
+CONFIG_DMA_OF=y
+# CONFIG_ALTERA_MSGDMA is not set
+# CONFIG_AMBA_PL08X is not set
+# CONFIG_DW_AXI_DMAC is not set
+# CONFIG_FSL_EDMA is not set
+# CONFIG_FSL_QDMA is not set
+# CONFIG_INTEL_IDMA64 is not set
+# CONFIG_MV_XOR_V2 is not set
+# CONFIG_PL330_DMA is not set
+# CONFIG_PLX_DMA is not set
+# CONFIG_XILINX_DMA is not set
+# CONFIG_XILINX_XDMA is not set
+# CONFIG_XILINX_ZYNQMP_DMA is not set
+# CONFIG_XILINX_ZYNQMP_DPDMA is not set
+CONFIG_QCOM_BAM_DMA=y
+CONFIG_QCOM_GPI_DMA=y
+CONFIG_QCOM_HIDMA_MGMT=y
+CONFIG_QCOM_HIDMA=y
+# CONFIG_DW_DMAC is not set
+# CONFIG_DW_DMAC_PCI is not set
+# CONFIG_DW_EDMA is not set
+# CONFIG_SF_PDMA is not set
+
+#
+# DMA Clients
+#
+# CONFIG_ASYNC_TX_DMA is not set
+# CONFIG_DMATEST is not set
+
+#
+# DMABUF options
+#
+CONFIG_SYNC_FILE=y
+CONFIG_SW_SYNC=y
+CONFIG_UDMABUF=y
+# CONFIG_DMABUF_MOVE_NOTIFY is not set
+# CONFIG_DMABUF_DEBUG is not set
+# CONFIG_DMABUF_SELFTESTS is not set
+CONFIG_DMABUF_HEAPS=y
+CONFIG_DMABUF_SYSFS_STATS=y
+CONFIG_DMABUF_HEAPS_SYSTEM=y
+CONFIG_DMABUF_HEAPS_CMA=y
+# end of DMABUF options
+
+CONFIG_UIO=y
+# CONFIG_UIO_CIF is not set
+CONFIG_UIO_PDRV_GENIRQ=y
+CONFIG_UIO_DMEM_GENIRQ=y
+# CONFIG_UIO_AEC is not set
+# CONFIG_UIO_SERCOS3 is not set
+# CONFIG_UIO_PCI_GENERIC is not set
+# CONFIG_UIO_NETX is not set
+# CONFIG_UIO_PRUSS is not set
+# CONFIG_UIO_MF624 is not set
+# CONFIG_VFIO is not set
+# CONFIG_VIRT_DRIVERS is not set
+CONFIG_VIRTIO_ANCHOR=y
+CONFIG_VIRTIO=y
+CONFIG_VIRTIO_PCI_LIB=y
+CONFIG_VIRTIO_PCI_LIB_LEGACY=y
+CONFIG_VIRTIO_MENU=y
+CONFIG_VIRTIO_PCI=y
+CONFIG_VIRTIO_PCI_LEGACY=y
+# CONFIG_VIRTIO_PMEM is not set
+CONFIG_VIRTIO_BALLOON=y
+CONFIG_VIRTIO_INPUT=y
+CONFIG_VIRTIO_MMIO=y
+CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES=y
+CONFIG_VIRTIO_DMA_SHARED_BUFFER=y
+# CONFIG_VDPA is not set
+# CONFIG_VHOST_MENU is not set
+
+#
+# Microsoft Hyper-V guest support
+#
+# end of Microsoft Hyper-V guest support
+
+# CONFIG_GREYBUS is not set
+# CONFIG_COMEDI is not set
+CONFIG_STAGING=y
+# CONFIG_PRISM2_USB is not set
+# CONFIG_RTLLIB is not set
+# CONFIG_RTL8723BS is not set
+# CONFIG_R8712U is not set
+# CONFIG_RTS5208 is not set
+# CONFIG_VT6655 is not set
+# CONFIG_VT6656 is not set
+
+#
+# IIO staging drivers
+#
+
+#
+# Accelerometers
+#
+# CONFIG_ADIS16203 is not set
+# CONFIG_ADIS16240 is not set
+# end of Accelerometers
+
+#
+# Analog to digital converters
+#
+# CONFIG_AD7816 is not set
+# end of Analog to digital converters
+
+#
+# Analog digital bi-direction converters
+#
+# CONFIG_ADT7316 is not set
+# end of Analog digital bi-direction converters
+
+#
+# Direct Digital Synthesis
+#
+# CONFIG_AD9832 is not set
+# CONFIG_AD9834 is not set
+# end of Direct Digital Synthesis
+
+#
+# Network Analyzer, Impedance Converters
+#
+# CONFIG_AD5933 is not set
+# end of Network Analyzer, Impedance Converters
+# end of IIO staging drivers
+
+# CONFIG_STAGING_MEDIA is not set
+# CONFIG_LTE_GDM724X is not set
+# CONFIG_KS7010 is not set
+# CONFIG_PI433 is not set
+# CONFIG_XIL_AXIS_FIFO is not set
+# CONFIG_FIELDBUS_DEV is not set
+# CONFIG_VME_BUS is not set
+# CONFIG_GOLDFISH is not set
+# CONFIG_CHROME_PLATFORMS is not set
+# CONFIG_MELLANOX_PLATFORM is not set
+# CONFIG_SURFACE_PLATFORMS is not set
+CONFIG_HAVE_CLK=y
+CONFIG_HAVE_CLK_PREPARE=y
+CONFIG_COMMON_CLK=y
+
+#
+# Clock driver for ARM Reference designs
+#
+# CONFIG_CLK_ICST is not set
+# CONFIG_CLK_SP810 is not set
+# end of Clock driver for ARM Reference designs
+
+# CONFIG_LMK04832 is not set
+# CONFIG_COMMON_CLK_MAX9485 is not set
+# CONFIG_COMMON_CLK_SI5341 is not set
+# CONFIG_COMMON_CLK_SI5351 is not set
+# CONFIG_COMMON_CLK_SI514 is not set
+# CONFIG_COMMON_CLK_SI544 is not set
+# CONFIG_COMMON_CLK_SI570 is not set
+# CONFIG_COMMON_CLK_CDCE706 is not set
+# CONFIG_COMMON_CLK_CDCE925 is not set
+# CONFIG_COMMON_CLK_CS2000_CP is not set
+# CONFIG_COMMON_CLK_AXI_CLKGEN is not set
+# CONFIG_COMMON_CLK_XGENE is not set
+# CONFIG_COMMON_CLK_PWM is not set
+# CONFIG_COMMON_CLK_RS9_PCIE is not set
+# CONFIG_COMMON_CLK_SI521XX is not set
+# CONFIG_COMMON_CLK_VC3 is not set
+# CONFIG_COMMON_CLK_VC5 is not set
+# CONFIG_COMMON_CLK_VC7 is not set
+# CONFIG_COMMON_CLK_FIXED_MMIO is not set
+CONFIG_QCOM_GDSC=y
+CONFIG_QCOM_RPMCC=y
+CONFIG_COMMON_CLK_QCOM=y
+# CONFIG_CLK_X1E80100_CAMCC is not set
+# CONFIG_CLK_X1E80100_DISPCC is not set
+CONFIG_CLK_X1E80100_GCC=y
+# CONFIG_CLK_X1E80100_GPUCC is not set
+# CONFIG_CLK_X1E80100_TCSRCC is not set
+# CONFIG_QCOM_A53PLL is not set
+# CONFIG_QCOM_A7PLL is not set
+# CONFIG_QCOM_CLK_APCS_MSM8916 is not set
+# CONFIG_QCOM_CLK_APCC_MSM8996 is not set
+CONFIG_QCOM_CLK_RPM=y
+CONFIG_QCOM_CLK_SMD_RPM=y
+CONFIG_QCOM_CLK_RPMH=y
+# CONFIG_IPQ_APSS_PLL is not set
+# CONFIG_IPQ_APSS_6018 is not set
+# CONFIG_IPQ_GCC_4019 is not set
+# CONFIG_IPQ_GCC_5018 is not set
+# CONFIG_IPQ_GCC_5332 is not set
+# CONFIG_IPQ_GCC_6018 is not set
+# CONFIG_IPQ_GCC_8074 is not set
+# CONFIG_IPQ_GCC_9574 is not set
+# CONFIG_MSM_GCC_8916 is not set
+# CONFIG_MSM_GCC_8917 is not set
+# CONFIG_MSM_GCC_8939 is not set
+# CONFIG_MSM_GCC_8953 is not set
+# CONFIG_MSM_GCC_8976 is not set
+# CONFIG_MSM_MMCC_8994 is not set
+# CONFIG_MSM_GCC_8994 is not set
+# CONFIG_MSM_GCC_8996 is not set
+# CONFIG_MSM_MMCC_8996 is not set
+# CONFIG_MSM_GCC_8998 is not set
+# CONFIG_MSM_GPUCC_8998 is not set
+# CONFIG_MSM_MMCC_8998 is not set
+# CONFIG_QCM_GCC_2290 is not set
+# CONFIG_QCM_DISPCC_2290 is not set
+# CONFIG_QCS_GCC_404 is not set
+CONFIG_SC_CAMCC_7180=y
+CONFIG_SC_CAMCC_7280=y
+CONFIG_SC_CAMCC_8280XP=m
+CONFIG_SC_DISPCC_7180=y
+CONFIG_SC_DISPCC_7280=y
+# CONFIG_SC_DISPCC_8280XP is not set
+# CONFIG_SA_GCC_8775P is not set
+# CONFIG_SA_GPUCC_8775P is not set
+CONFIG_SC_GCC_7180=y
+CONFIG_SC_GCC_7280=y
+# CONFIG_SC_GCC_8180X is not set
+CONFIG_SC_GCC_8280XP=m
+CONFIG_SC_GPUCC_7180=y
+CONFIG_SC_GPUCC_7280=y
+# CONFIG_SC_GPUCC_8280XP is not set
+CONFIG_SC_LPASSCC_7280=y
+# CONFIG_SC_LPASSCC_8280XP is not set
+CONFIG_SC_LPASS_CORECC_7180=y
+CONFIG_SC_LPASS_CORECC_7280=y
+CONFIG_SC_VIDEOCC_7180=y
+CONFIG_SC_VIDEOCC_7280=y
+# CONFIG_SDM_CAMCC_845 is not set
+CONFIG_SDM_GCC_660=y
+CONFIG_SDM_MMCC_660=y
+CONFIG_SDM_GPUCC_660=y
+# CONFIG_QCS_TURING_404 is not set
+# CONFIG_QCS_Q6SSTOP_404 is not set
+# CONFIG_QDU_GCC_1000 is not set
+# CONFIG_QDU_ECPRICC_1000 is not set
+# CONFIG_SDM_GCC_845 is not set
+# CONFIG_SDM_GPUCC_845 is not set
+# CONFIG_SDM_VIDEOCC_845 is not set
+# CONFIG_SDM_DISPCC_845 is not set
+# CONFIG_SDM_LPASSCC_845 is not set
+# CONFIG_SDX_GCC_75 is not set
+# CONFIG_SM_CAMCC_6350 is not set
+# CONFIG_SM_CAMCC_8250 is not set
+# CONFIG_SM_CAMCC_8450 is not set
+# CONFIG_SM_CAMCC_8550 is not set
+CONFIG_SM_DISPCC_8650=m
+CONFIG_SM_GCC_4450=y
+# CONFIG_SM_GCC_6115 is not set
+# CONFIG_SM_GCC_6125 is not set
+# CONFIG_SM_GCC_6350 is not set
+# CONFIG_SM_GCC_6375 is not set
+CONFIG_SM_GCC_7150=y
+# CONFIG_SM_GCC_8150 is not set
+# CONFIG_SM_GCC_8250 is not set
+# CONFIG_SM_GCC_8350 is not set
+# CONFIG_SM_GCC_8450 is not set
+# CONFIG_SM_GCC_8550 is not set
+CONFIG_SM_GCC_8650=y
+# CONFIG_SM_GPUCC_6115 is not set
+# CONFIG_SM_GPUCC_6125 is not set
+# CONFIG_SM_GPUCC_6375 is not set
+# CONFIG_SM_GPUCC_6350 is not set
+# CONFIG_SM_GPUCC_8150 is not set
+# CONFIG_SM_GPUCC_8250 is not set
+# CONFIG_SM_GPUCC_8350 is not set
+# CONFIG_SM_GPUCC_8450 is not set
+# CONFIG_SM_GPUCC_8550 is not set
+CONFIG_SM_GPUCC_8650=m
+# CONFIG_SM_TCSRCC_8550 is not set
+CONFIG_SM_TCSRCC_8650=y
+# CONFIG_SM_VIDEOCC_8150 is not set
+# CONFIG_SM_VIDEOCC_8250 is not set
+# CONFIG_SM_VIDEOCC_8350 is not set
+# CONFIG_SM_VIDEOCC_8550 is not set
+CONFIG_SPMI_PMIC_CLKDIV=y
+CONFIG_QCOM_HFPLL=y
+# CONFIG_KPSS_XCC is not set
+CONFIG_CLK_GFM_LPASS_SM8250=y
+# CONFIG_SM_VIDEOCC_8450 is not set
+# CONFIG_XILINX_VCU is not set
+# CONFIG_COMMON_CLK_XLNX_CLKWZRD is not set
+CONFIG_HWSPINLOCK=y
+CONFIG_HWSPINLOCK_QCOM=y
+
+#
+# Clock Source drivers
+#
+CONFIG_TIMER_OF=y
+CONFIG_TIMER_PROBE=y
+CONFIG_ARM_ARCH_TIMER=y
+CONFIG_ARM_ARCH_TIMER_EVTSTREAM=y
+CONFIG_ARM_ARCH_TIMER_OOL_WORKAROUND=y
+CONFIG_FSL_ERRATUM_A008585=y
+CONFIG_HISILICON_ERRATUM_161010101=y
+CONFIG_ARM64_ERRATUM_858921=y
+# end of Clock Source drivers
+
+CONFIG_MAILBOX=y
+# CONFIG_ARM_MHU is not set
+# CONFIG_ARM_MHU_V2 is not set
+# CONFIG_PLATFORM_MHU is not set
+# CONFIG_PL320_MBOX is not set
+# CONFIG_ALTERA_MBOX is not set
+# CONFIG_MAILBOX_TEST is not set
+CONFIG_QCOM_APCS_IPC=y
+CONFIG_QCOM_IPCC=y
+CONFIG_IOMMU_IOVA=y
+CONFIG_IOMMU_API=y
+CONFIG_IOMMU_SUPPORT=y
+
+#
+# Generic IOMMU Pagetable Support
+#
+CONFIG_IOMMU_IO_PGTABLE=y
+CONFIG_IOMMU_IO_PGTABLE_LPAE=y
+# CONFIG_IOMMU_IO_PGTABLE_LPAE_SELFTEST is not set
+CONFIG_IOMMU_IO_PGTABLE_ARMV7S=y
+# CONFIG_IOMMU_IO_PGTABLE_ARMV7S_SELFTEST is not set
+# CONFIG_IOMMU_IO_PGTABLE_DART is not set
+# end of Generic IOMMU Pagetable Support
+
+CONFIG_IOMMU_DEBUGFS=y
+CONFIG_IOMMU_DEFAULT_DMA_STRICT=y
+# CONFIG_IOMMU_DEFAULT_DMA_LAZY is not set
+# CONFIG_IOMMU_DEFAULT_PASSTHROUGH is not set
+CONFIG_OF_IOMMU=y
+CONFIG_IOMMU_DMA=y
+CONFIG_IOMMU_SVA=y
+CONFIG_IOMMU_IOPF=y
+# CONFIG_IOMMUFD is not set
+CONFIG_ARM_SMMU=y
+# CONFIG_ARM_SMMU_LEGACY_DT_BINDINGS is not set
+CONFIG_ARM_SMMU_DISABLE_BYPASS_BY_DEFAULT=y
+CONFIG_ARM_SMMU_QCOM=y
+CONFIG_ARM_SMMU_QCOM_DEBUG=y
+CONFIG_ARM_SMMU_V3=y
+CONFIG_ARM_SMMU_V3_SVA=y
+CONFIG_QCOM_IOMMU=y
+CONFIG_VIRTIO_IOMMU=y
+
+#
+# Remoteproc drivers
+#
+CONFIG_REMOTEPROC=y
+CONFIG_REMOTEPROC_CDEV=y
+CONFIG_QCOM_PIL_INFO=y
+CONFIG_QCOM_RPROC_COMMON=y
+CONFIG_QCOM_Q6V5_COMMON=y
+CONFIG_QCOM_Q6V5_ADSP=y
+CONFIG_QCOM_Q6V5_MSS=y
+CONFIG_QCOM_Q6V5_PAS=y
+CONFIG_QCOM_Q6V5_WCSS=y
+CONFIG_QCOM_SYSMON=y
+CONFIG_QCOM_WCNSS_PIL=y
+# end of Remoteproc drivers
+
+#
+# Rpmsg drivers
+#
+CONFIG_RPMSG=y
+CONFIG_RPMSG_CHAR=y
+CONFIG_RPMSG_CTRL=y
+CONFIG_RPMSG_NS=y
+CONFIG_RPMSG_QCOM_GLINK=y
+CONFIG_RPMSG_QCOM_GLINK_RPM=y
+CONFIG_RPMSG_QCOM_GLINK_SMEM=y
+CONFIG_RPMSG_QCOM_SMD=y
+CONFIG_RPMSG_VIRTIO=y
+# end of Rpmsg drivers
+
+CONFIG_SOUNDWIRE=y
+
+#
+# SoundWire Devices
+#
+CONFIG_SOUNDWIRE_QCOM=y
+
+#
+# SOC (System On Chip) specific Drivers
+#
+
+#
+# Amlogic SoC drivers
+#
+# end of Amlogic SoC drivers
+
+#
+# Broadcom SoC drivers
+#
+# end of Broadcom SoC drivers
+
+#
+# NXP/Freescale QorIQ SoC drivers
+#
+# CONFIG_QUICC_ENGINE is not set
+# CONFIG_FSL_RCPM is not set
+# end of NXP/Freescale QorIQ SoC drivers
+
+#
+# fujitsu SoC drivers
+#
+# end of fujitsu SoC drivers
+
+#
+# i.MX SoC drivers
+#
+# end of i.MX SoC drivers
+
+#
+# Enable LiteX SoC Builder specific drivers
+#
+# CONFIG_LITEX_SOC_CONTROLLER is not set
+# end of Enable LiteX SoC Builder specific drivers
+
+# CONFIG_WPCM450_SOC is not set
+
+#
+# Qualcomm SoC drivers
+#
+CONFIG_QCOM_AOSS_QMP=y
+CONFIG_QCOM_COMMAND_DB=y
+CONFIG_QCOM_GENI_SE=y
+CONFIG_QCOM_GSBI=y
+CONFIG_QCOM_LLCC=y
+CONFIG_QCOM_MDT_LOADER=y
+CONFIG_QCOM_OCMEM=y
+CONFIG_QCOM_PD_MAPPER=y
+CONFIG_QCOM_PDR_HELPERS=y
+CONFIG_QCOM_PDR_MSG=y
+# CONFIG_QCOM_PMIC_PDCHARGER_ULOG is not set
+CONFIG_QCOM_PMIC_GLINK=y
+CONFIG_QCOM_QMI_HELPERS=y
+CONFIG_QCOM_RAMP_CTRL=y
+CONFIG_QCOM_RMTFS_MEM=y
+CONFIG_QCOM_RPM_MASTER_STATS=y
+CONFIG_QCOM_RPMH=y
+CONFIG_QCOM_SMEM=y
+CONFIG_QCOM_SMD_RPM=y
+CONFIG_QCOM_SMEM_STATE=y
+CONFIG_QCOM_SMP2P=y
+CONFIG_QCOM_SMSM=y
+CONFIG_QCOM_SOCINFO=y
+CONFIG_QCOM_SPM=y
+CONFIG_QCOM_STATS=y
+CONFIG_QCOM_WCNSS_CTRL=y
+CONFIG_QCOM_APR=y
+CONFIG_QCOM_ICC_BWMON=y
+CONFIG_QCOM_PBS=y
+# end of Qualcomm SoC drivers
+
+# CONFIG_SOC_TI is not set
+
+#
+# Xilinx SoC drivers
+#
+# end of Xilinx SoC drivers
+# end of SOC (System On Chip) specific Drivers
+
+#
+# PM Domains
+#
+
+#
+# Amlogic PM Domains
+#
+# end of Amlogic PM Domains
+
+#
+# Broadcom PM Domains
+#
+# end of Broadcom PM Domains
+
+#
+# i.MX PM Domains
+#
+# end of i.MX PM Domains
+
+#
+# Qualcomm PM Domains
+#
+CONFIG_QCOM_CPR=y
+CONFIG_QCOM_RPMHPD=y
+CONFIG_QCOM_RPMPD=y
+# end of Qualcomm PM Domains
+# end of PM Domains
+
+CONFIG_PM_DEVFREQ=y
+
+#
+# DEVFREQ Governors
+#
+CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND=y
+CONFIG_DEVFREQ_GOV_PERFORMANCE=y
+CONFIG_DEVFREQ_GOV_POWERSAVE=y
+CONFIG_DEVFREQ_GOV_USERSPACE=y
+CONFIG_DEVFREQ_GOV_PASSIVE=y
+
+#
+# DEVFREQ Drivers
+#
+CONFIG_PM_DEVFREQ_EVENT=y
+CONFIG_EXTCON=y
+
+#
+# Extcon Device Drivers
+#
+CONFIG_EXTCON_ADC_JACK=y
+# CONFIG_EXTCON_FSA9480 is not set
+CONFIG_EXTCON_GPIO=y
+# CONFIG_EXTCON_MAX3355 is not set
+# CONFIG_EXTCON_PTN5150 is not set
+CONFIG_EXTCON_QCOM_SPMI_MISC=y
+# CONFIG_EXTCON_RT8973A is not set
+CONFIG_EXTCON_SM5502=y
+CONFIG_EXTCON_USB_GPIO=y
+# CONFIG_EXTCON_USBC_TUSB320 is not set
+CONFIG_MEMORY=y
+# CONFIG_ARM_PL172_MPMC is not set
+CONFIG_IIO=y
+CONFIG_IIO_BUFFER=y
+# CONFIG_IIO_BUFFER_CB is not set
+# CONFIG_IIO_BUFFER_DMA is not set
+# CONFIG_IIO_BUFFER_DMAENGINE is not set
+# CONFIG_IIO_BUFFER_HW_CONSUMER is not set
+CONFIG_IIO_KFIFO_BUF=y
+CONFIG_IIO_TRIGGERED_BUFFER=y
+# CONFIG_IIO_CONFIGFS is not set
+CONFIG_IIO_TRIGGER=y
+CONFIG_IIO_CONSUMERS_PER_TRIGGER=2
+# CONFIG_IIO_SW_DEVICE is not set
+# CONFIG_IIO_SW_TRIGGER is not set
+# CONFIG_IIO_TRIGGERED_EVENT is not set
+
+#
+# Accelerometers
+#
+# CONFIG_ADIS16201 is not set
+# CONFIG_ADIS16209 is not set
+# CONFIG_ADXL313_I2C is not set
+# CONFIG_ADXL313_SPI is not set
+# CONFIG_ADXL345_I2C is not set
+# CONFIG_ADXL345_SPI is not set
+# CONFIG_ADXL355_I2C is not set
+# CONFIG_ADXL355_SPI is not set
+# CONFIG_ADXL367_SPI is not set
+# CONFIG_ADXL367_I2C is not set
+# CONFIG_ADXL372_SPI is not set
+# CONFIG_ADXL372_I2C is not set
+CONFIG_BMA180=y
+# CONFIG_BMA220 is not set
+# CONFIG_BMA400 is not set
+CONFIG_BMC150_ACCEL=y
+CONFIG_BMC150_ACCEL_I2C=y
+CONFIG_BMC150_ACCEL_SPI=y
+# CONFIG_BMI088_ACCEL is not set
+# CONFIG_DA280 is not set
+# CONFIG_DA311 is not set
+# CONFIG_DMARD06 is not set
+# CONFIG_DMARD09 is not set
+# CONFIG_DMARD10 is not set
+# CONFIG_FXLS8962AF_I2C is not set
+# CONFIG_FXLS8962AF_SPI is not set
+# CONFIG_IIO_ST_ACCEL_3AXIS is not set
+# CONFIG_IIO_KX022A_SPI is not set
+# CONFIG_IIO_KX022A_I2C is not set
+# CONFIG_KXSD9 is not set
+# CONFIG_KXCJK1013 is not set
+# CONFIG_MC3230 is not set
+# CONFIG_MMA7455_I2C is not set
+# CONFIG_MMA7455_SPI is not set
+# CONFIG_MMA7660 is not set
+# CONFIG_MMA8452 is not set
+# CONFIG_MMA9551 is not set
+# CONFIG_MMA9553 is not set
+# CONFIG_MSA311 is not set
+# CONFIG_MXC4005 is not set
+# CONFIG_MXC6255 is not set
+# CONFIG_SCA3000 is not set
+# CONFIG_SCA3300 is not set
+# CONFIG_STK8312 is not set
+# CONFIG_STK8BA50 is not set
+# end of Accelerometers
+
+#
+# Analog to digital converters
+#
+# CONFIG_AD4130 is not set
+# CONFIG_AD7091R5 is not set
+# CONFIG_AD7091R8 is not set
+# CONFIG_AD7124 is not set
+# CONFIG_AD7192 is not set
+# CONFIG_AD7266 is not set
+# CONFIG_AD7280 is not set
+# CONFIG_AD7291 is not set
+# CONFIG_AD7292 is not set
+# CONFIG_AD7298 is not set
+# CONFIG_AD7476 is not set
+# CONFIG_AD7606_IFACE_PARALLEL is not set
+# CONFIG_AD7606_IFACE_SPI is not set
+# CONFIG_AD7766 is not set
+# CONFIG_AD7768_1 is not set
+# CONFIG_AD7780 is not set
+# CONFIG_AD7791 is not set
+# CONFIG_AD7793 is not set
+# CONFIG_AD7887 is not set
+# CONFIG_AD7923 is not set
+# CONFIG_AD7949 is not set
+# CONFIG_AD799X is not set
+# CONFIG_AD9467 is not set
+# CONFIG_ADI_AXI_ADC is not set
+# CONFIG_CC10001_ADC is not set
+# CONFIG_ENVELOPE_DETECTOR is not set
+# CONFIG_HI8435 is not set
+# CONFIG_HX711 is not set
+# CONFIG_INA2XX_ADC is not set
+# CONFIG_LTC2309 is not set
+# CONFIG_LTC2471 is not set
+# CONFIG_LTC2485 is not set
+# CONFIG_LTC2496 is not set
+# CONFIG_LTC2497 is not set
+# CONFIG_MAX1027 is not set
+# CONFIG_MAX11100 is not set
+# CONFIG_MAX1118 is not set
+# CONFIG_MAX11205 is not set
+# CONFIG_MAX11410 is not set
+# CONFIG_MAX1241 is not set
+# CONFIG_MAX1363 is not set
+# CONFIG_MAX34408 is not set
+# CONFIG_MAX9611 is not set
+# CONFIG_MCP320X is not set
+# CONFIG_MCP3422 is not set
+# CONFIG_MCP3564 is not set
+# CONFIG_MCP3911 is not set
+# CONFIG_NAU7802 is not set
+# CONFIG_PAC1934 is not set
+CONFIG_QCOM_VADC_COMMON=y
+CONFIG_QCOM_SPMI_RRADC=y
+CONFIG_QCOM_SPMI_IADC=y
+CONFIG_QCOM_SPMI_VADC=y
+CONFIG_QCOM_SPMI_ADC5=y
+# CONFIG_RICHTEK_RTQ6056 is not set
+# CONFIG_SD_ADC_MODULATOR is not set
+# CONFIG_TI_ADC081C is not set
+# CONFIG_TI_ADC0832 is not set
+# CONFIG_TI_ADC084S021 is not set
+# CONFIG_TI_ADC12138 is not set
+# CONFIG_TI_ADC108S102 is not set
+# CONFIG_TI_ADC128S052 is not set
+# CONFIG_TI_ADC161S626 is not set
+# CONFIG_TI_ADS1015 is not set
+# CONFIG_TI_ADS7924 is not set
+# CONFIG_TI_ADS1100 is not set
+# CONFIG_TI_ADS1298 is not set
+# CONFIG_TI_ADS7950 is not set
+# CONFIG_TI_ADS8344 is not set
+# CONFIG_TI_ADS8688 is not set
+# CONFIG_TI_ADS124S08 is not set
+# CONFIG_TI_ADS131E08 is not set
+# CONFIG_TI_LMP92064 is not set
+# CONFIG_TI_TLC4541 is not set
+# CONFIG_TI_TSC2046 is not set
+# CONFIG_VF610_ADC is not set
+# CONFIG_XILINX_XADC is not set
+# end of Analog to digital converters
+
+#
+# Analog to digital and digital to analog converters
+#
+# CONFIG_AD74115 is not set
+# CONFIG_AD74413R is not set
+# end of Analog to digital and digital to analog converters
+
+#
+# Analog Front Ends
+#
+# CONFIG_IIO_RESCALE is not set
+# end of Analog Front Ends
+
+#
+# Amplifiers
+#
+# CONFIG_AD8366 is not set
+# CONFIG_ADA4250 is not set
+# CONFIG_HMC425 is not set
+# end of Amplifiers
+
+#
+# Capacitance to digital converters
+#
+# CONFIG_AD7150 is not set
+# CONFIG_AD7746 is not set
+# end of Capacitance to digital converters
+
+#
+# Chemical Sensors
+#
+# CONFIG_AOSONG_AGS02MA is not set
+# CONFIG_ATLAS_PH_SENSOR is not set
+# CONFIG_ATLAS_EZO_SENSOR is not set
+# CONFIG_BME680 is not set
+# CONFIG_CCS811 is not set
+# CONFIG_IAQCORE is not set
+# CONFIG_PMS7003 is not set
+# CONFIG_SCD30_CORE is not set
+# CONFIG_SCD4X is not set
+# CONFIG_SENSIRION_SGP30 is not set
+# CONFIG_SENSIRION_SGP40 is not set
+# CONFIG_SPS30_I2C is not set
+# CONFIG_SPS30_SERIAL is not set
+# CONFIG_SENSEAIR_SUNRISE_CO2 is not set
+# CONFIG_VZ89X is not set
+# end of Chemical Sensors
+
+#
+# Hid Sensor IIO Common
+#
+# end of Hid Sensor IIO Common
+
+CONFIG_IIO_INV_SENSORS_TIMESTAMP=y
+
+#
+# IIO SCMI Sensors
+#
+# end of IIO SCMI Sensors
+
+#
+# SSP Sensor Common
+#
+# CONFIG_IIO_SSP_SENSORHUB is not set
+# end of SSP Sensor Common
+
+#
+# Digital to analog converters
+#
+# CONFIG_AD3552R is not set
+# CONFIG_AD5064 is not set
+# CONFIG_AD5360 is not set
+# CONFIG_AD5380 is not set
+# CONFIG_AD5421 is not set
+# CONFIG_AD5446 is not set
+# CONFIG_AD5449 is not set
+# CONFIG_AD5592R is not set
+# CONFIG_AD5593R is not set
+# CONFIG_AD5504 is not set
+# CONFIG_AD5624R_SPI is not set
+# CONFIG_LTC2688 is not set
+# CONFIG_AD5686_SPI is not set
+# CONFIG_AD5696_I2C is not set
+# CONFIG_AD5755 is not set
+# CONFIG_AD5758 is not set
+# CONFIG_AD5761 is not set
+# CONFIG_AD5764 is not set
+# CONFIG_AD5766 is not set
+# CONFIG_AD5770R is not set
+# CONFIG_AD5791 is not set
+# CONFIG_AD7293 is not set
+# CONFIG_AD7303 is not set
+# CONFIG_AD8801 is not set
+# CONFIG_DPOT_DAC is not set
+# CONFIG_DS4424 is not set
+# CONFIG_LTC1660 is not set
+# CONFIG_LTC2632 is not set
+# CONFIG_M62332 is not set
+# CONFIG_MAX517 is not set
+# CONFIG_MAX5522 is not set
+# CONFIG_MAX5821 is not set
+# CONFIG_MCP4725 is not set
+# CONFIG_MCP4728 is not set
+# CONFIG_MCP4821 is not set
+# CONFIG_MCP4922 is not set
+# CONFIG_TI_DAC082S085 is not set
+# CONFIG_TI_DAC5571 is not set
+# CONFIG_TI_DAC7311 is not set
+# CONFIG_TI_DAC7612 is not set
+# CONFIG_VF610_DAC is not set
+# end of Digital to analog converters
+
+#
+# IIO dummy driver
+#
+# end of IIO dummy driver
+
+#
+# Filters
+#
+# CONFIG_ADMV8818 is not set
+# end of Filters
+
+#
+# Frequency Synthesizers DDS/PLL
+#
+
+#
+# Clock Generator/Distribution
+#
+# CONFIG_AD9523 is not set
+# end of Clock Generator/Distribution
+
+#
+# Phase-Locked Loop (PLL) frequency synthesizers
+#
+# CONFIG_ADF4350 is not set
+# CONFIG_ADF4371 is not set
+# CONFIG_ADF4377 is not set
+# CONFIG_ADMFM2000 is not set
+# CONFIG_ADMV1013 is not set
+# CONFIG_ADMV1014 is not set
+# CONFIG_ADMV4420 is not set
+# CONFIG_ADRF6780 is not set
+# end of Phase-Locked Loop (PLL) frequency synthesizers
+# end of Frequency Synthesizers DDS/PLL
+
+#
+# Digital gyroscope sensors
+#
+# CONFIG_ADIS16080 is not set
+# CONFIG_ADIS16130 is not set
+# CONFIG_ADIS16136 is not set
+# CONFIG_ADIS16260 is not set
+# CONFIG_ADXRS290 is not set
+# CONFIG_ADXRS450 is not set
+CONFIG_BMG160=y
+CONFIG_BMG160_I2C=y
+CONFIG_BMG160_SPI=y
+# CONFIG_FXAS21002C is not set
+# CONFIG_MPU3050_I2C is not set
+# CONFIG_IIO_ST_GYRO_3AXIS is not set
+# CONFIG_ITG3200 is not set
+# end of Digital gyroscope sensors
+
+#
+# Health Sensors
+#
+
+#
+# Heart Rate Monitors
+#
+# CONFIG_AFE4403 is not set
+# CONFIG_AFE4404 is not set
+# CONFIG_MAX30100 is not set
+# CONFIG_MAX30102 is not set
+# end of Heart Rate Monitors
+# end of Health Sensors
+
+#
+# Humidity sensors
+#
+# CONFIG_AM2315 is not set
+# CONFIG_DHT11 is not set
+# CONFIG_HDC100X is not set
+# CONFIG_HDC2010 is not set
+# CONFIG_HDC3020 is not set
+# CONFIG_HTS221 is not set
+# CONFIG_HTU21 is not set
+# CONFIG_SI7005 is not set
+# CONFIG_SI7020 is not set
+# end of Humidity sensors
+
+#
+# Inertial measurement units
+#
+# CONFIG_ADIS16400 is not set
+# CONFIG_ADIS16460 is not set
+# CONFIG_ADIS16475 is not set
+# CONFIG_ADIS16480 is not set
+# CONFIG_BMI160_I2C is not set
+# CONFIG_BMI160_SPI is not set
+# CONFIG_BMI323_I2C is not set
+# CONFIG_BMI323_SPI is not set
+# CONFIG_BOSCH_BNO055_SERIAL is not set
+# CONFIG_BOSCH_BNO055_I2C is not set
+# CONFIG_FXOS8700_I2C is not set
+# CONFIG_FXOS8700_SPI is not set
+# CONFIG_KMX61 is not set
+# CONFIG_INV_ICM42600_I2C is not set
+# CONFIG_INV_ICM42600_SPI is not set
+CONFIG_INV_MPU6050_IIO=y
+# CONFIG_INV_MPU6050_I2C is not set
+CONFIG_INV_MPU6050_SPI=y
+CONFIG_IIO_ST_LSM6DSX=y
+CONFIG_IIO_ST_LSM6DSX_I2C=y
+CONFIG_IIO_ST_LSM6DSX_SPI=y
+# CONFIG_IIO_ST_LSM9DS0 is not set
+# end of Inertial measurement units
+
+#
+# Light sensors
+#
+# CONFIG_ADJD_S311 is not set
+# CONFIG_ADUX1020 is not set
+# CONFIG_AL3010 is not set
+# CONFIG_AL3320A is not set
+# CONFIG_APDS9300 is not set
+# CONFIG_APDS9960 is not set
+# CONFIG_AS73211 is not set
+# CONFIG_BH1750 is not set
+# CONFIG_BH1780 is not set
+# CONFIG_CM32181 is not set
+# CONFIG_CM3232 is not set
+# CONFIG_CM3323 is not set
+# CONFIG_CM3605 is not set
+# CONFIG_CM36651 is not set
+# CONFIG_GP2AP002 is not set
+# CONFIG_GP2AP020A00F is not set
+# CONFIG_SENSORS_ISL29018 is not set
+# CONFIG_SENSORS_ISL29028 is not set
+# CONFIG_ISL29125 is not set
+# CONFIG_ISL76682 is not set
+# CONFIG_JSA1212 is not set
+# CONFIG_ROHM_BU27008 is not set
+# CONFIG_ROHM_BU27034 is not set
+# CONFIG_RPR0521 is not set
+# CONFIG_LTR390 is not set
+CONFIG_LTR501=y
+# CONFIG_LTRF216A is not set
+# CONFIG_LV0104CS is not set
+# CONFIG_MAX44000 is not set
+# CONFIG_MAX44009 is not set
+# CONFIG_NOA1305 is not set
+# CONFIG_OPT3001 is not set
+# CONFIG_OPT4001 is not set
+# CONFIG_PA12203001 is not set
+# CONFIG_SI1133 is not set
+# CONFIG_SI1145 is not set
+# CONFIG_STK3310 is not set
+# CONFIG_ST_UVIS25 is not set
+# CONFIG_TCS3414 is not set
+# CONFIG_TCS3472 is not set
+# CONFIG_SENSORS_TSL2563 is not set
+# CONFIG_TSL2583 is not set
+# CONFIG_TSL2591 is not set
+# CONFIG_TSL2772 is not set
+# CONFIG_TSL4531 is not set
+# CONFIG_US5182D is not set
+# CONFIG_VCNL4000 is not set
+# CONFIG_VCNL4035 is not set
+# CONFIG_VEML6030 is not set
+# CONFIG_VEML6070 is not set
+# CONFIG_VEML6075 is not set
+# CONFIG_VL6180 is not set
+# CONFIG_ZOPT2201 is not set
+# end of Light sensors
+
+#
+# Magnetometer sensors
+#
+# CONFIG_AF8133J is not set
+# CONFIG_AK8974 is not set
+CONFIG_AK8975=y
+CONFIG_AK09911=y
+CONFIG_BMC150_MAGN=y
+CONFIG_BMC150_MAGN_I2C=y
+# CONFIG_BMC150_MAGN_SPI is not set
+# CONFIG_MAG3110 is not set
+# CONFIG_MMC35240 is not set
+# CONFIG_IIO_ST_MAGN_3AXIS is not set
+# CONFIG_SENSORS_HMC5843_I2C is not set
+# CONFIG_SENSORS_HMC5843_SPI is not set
+# CONFIG_SENSORS_RM3100_I2C is not set
+# CONFIG_SENSORS_RM3100_SPI is not set
+# CONFIG_TI_TMAG5273 is not set
+# CONFIG_YAMAHA_YAS530 is not set
+# end of Magnetometer sensors
+
+#
+# Multiplexers
+#
+# CONFIG_IIO_MUX is not set
+# end of Multiplexers
+
+#
+# Inclinometer sensors
+#
+# end of Inclinometer sensors
+
+#
+# Triggers - standalone
+#
+# CONFIG_IIO_INTERRUPT_TRIGGER is not set
+# CONFIG_IIO_SYSFS_TRIGGER is not set
+# end of Triggers - standalone
+
+#
+# Linear and angular position sensors
+#
+# end of Linear and angular position sensors
+
+#
+# Digital potentiometers
+#
+# CONFIG_AD5110 is not set
+# CONFIG_AD5272 is not set
+# CONFIG_DS1803 is not set
+# CONFIG_MAX5432 is not set
+# CONFIG_MAX5481 is not set
+# CONFIG_MAX5487 is not set
+# CONFIG_MCP4018 is not set
+# CONFIG_MCP4131 is not set
+# CONFIG_MCP4531 is not set
+# CONFIG_MCP41010 is not set
+# CONFIG_TPL0102 is not set
+# CONFIG_X9250 is not set
+# end of Digital potentiometers
+
+#
+# Digital potentiostats
+#
+# CONFIG_LMP91000 is not set
+# end of Digital potentiostats
+
+#
+# Pressure sensors
+#
+# CONFIG_ABP060MG is not set
+# CONFIG_ROHM_BM1390 is not set
+# CONFIG_BMP280 is not set
+# CONFIG_DLHL60D is not set
+# CONFIG_DPS310 is not set
+# CONFIG_HP03 is not set
+# CONFIG_HSC030PA is not set
+# CONFIG_ICP10100 is not set
+# CONFIG_MPL115_I2C is not set
+# CONFIG_MPL115_SPI is not set
+# CONFIG_MPL3115 is not set
+# CONFIG_MPRLS0025PA is not set
+# CONFIG_MS5611 is not set
+# CONFIG_MS5637 is not set
+# CONFIG_IIO_ST_PRESS is not set
+# CONFIG_T5403 is not set
+# CONFIG_HP206C is not set
+# CONFIG_ZPA2326 is not set
+# end of Pressure sensors
+
+#
+# Lightning sensors
+#
+# CONFIG_AS3935 is not set
+# end of Lightning sensors
+
+#
+# Proximity and distance sensors
+#
+# CONFIG_IRSD200 is not set
+# CONFIG_ISL29501 is not set
+# CONFIG_LIDAR_LITE_V2 is not set
+# CONFIG_MB1232 is not set
+# CONFIG_PING is not set
+# CONFIG_RFD77402 is not set
+# CONFIG_SRF04 is not set
+# CONFIG_SX9310 is not set
+# CONFIG_SX9324 is not set
+# CONFIG_SX9360 is not set
+# CONFIG_SX9500 is not set
+# CONFIG_SRF08 is not set
+# CONFIG_VCNL3020 is not set
+# CONFIG_VL53L0X_I2C is not set
+# end of Proximity and distance sensors
+
+#
+# Resolver to digital converters
+#
+# CONFIG_AD2S90 is not set
+# CONFIG_AD2S1200 is not set
+# CONFIG_AD2S1210 is not set
+# end of Resolver to digital converters
+
+#
+# Temperature sensors
+#
+# CONFIG_LTC2983 is not set
+# CONFIG_MAXIM_THERMOCOUPLE is not set
+# CONFIG_MLX90614 is not set
+# CONFIG_MLX90632 is not set
+# CONFIG_MLX90635 is not set
+# CONFIG_TMP006 is not set
+# CONFIG_TMP007 is not set
+# CONFIG_TMP117 is not set
+# CONFIG_TSYS01 is not set
+# CONFIG_TSYS02D is not set
+# CONFIG_MAX30208 is not set
+# CONFIG_MAX31856 is not set
+# CONFIG_MAX31865 is not set
+# CONFIG_MCP9600 is not set
+# end of Temperature sensors
+
+# CONFIG_NTB is not set
+CONFIG_PWM=y
+CONFIG_PWM_SYSFS=y
+# CONFIG_PWM_DEBUG is not set
+# CONFIG_PWM_ATMEL_TCB is not set
+# CONFIG_PWM_CLK is not set
+# CONFIG_PWM_DWC is not set
+# CONFIG_PWM_FSL_FTM is not set
+# CONFIG_PWM_PCA9685 is not set
+# CONFIG_PWM_XILINX is not set
+
+#
+# IRQ chip support
+#
+CONFIG_IRQCHIP=y
+CONFIG_ARM_GIC=y
+CONFIG_ARM_GIC_MAX_NR=1
+CONFIG_ARM_GIC_V2M=y
+CONFIG_ARM_GIC_V3=y
+CONFIG_ARM_GIC_V3_ITS=y
+CONFIG_ARM_GIC_V3_ITS_PCI=y
+# CONFIG_AL_FIC is not set
+# CONFIG_XILINX_INTC is not set
+CONFIG_PARTITION_PERCPU=y
+CONFIG_QCOM_PDC=y
+CONFIG_QCOM_MPM=y
+# end of IRQ chip support
+
+# CONFIG_IPACK_BUS is not set
+CONFIG_RESET_CONTROLLER=y
+CONFIG_RESET_GPIO=y
+CONFIG_RESET_QCOM_AOSS=y
+CONFIG_RESET_QCOM_PDC=y
+CONFIG_RESET_SIMPLE=y
+# CONFIG_RESET_TI_SYSCON is not set
+# CONFIG_RESET_TI_TPS380X is not set
+
+#
+# PHY Subsystem
+#
+CONFIG_GENERIC_PHY=y
+# CONFIG_PHY_CAN_TRANSCEIVER is not set
+
+#
+# PHY drivers for Broadcom platforms
+#
+# CONFIG_BCM_KONA_USB2_PHY is not set
+# end of PHY drivers for Broadcom platforms
+
+# CONFIG_PHY_CADENCE_TORRENT is not set
+# CONFIG_PHY_CADENCE_DPHY is not set
+# CONFIG_PHY_CADENCE_DPHY_RX is not set
+# CONFIG_PHY_CADENCE_SIERRA is not set
+# CONFIG_PHY_CADENCE_SALVO is not set
+# CONFIG_PHY_PXA_28NM_HSIC is not set
+# CONFIG_PHY_PXA_28NM_USB2 is not set
+# CONFIG_PHY_LAN966X_SERDES is not set
+# CONFIG_PHY_CPCAP_USB is not set
+# CONFIG_PHY_MAPPHONE_MDM6600 is not set
+# CONFIG_PHY_OCELOT_SERDES is not set
+CONFIG_PHY_QCOM_APQ8064_SATA=y
+CONFIG_PHY_QCOM_EDP=y
+CONFIG_PHY_QCOM_IPQ4019_USB=y
+CONFIG_PHY_QCOM_IPQ806X_SATA=y
+CONFIG_PHY_QCOM_PCIE2=y
+CONFIG_PHY_QCOM_QMP=y
+CONFIG_PHY_QCOM_QMP_COMBO=y
+CONFIG_PHY_QCOM_QMP_PCIE=y
+CONFIG_PHY_QCOM_QMP_PCIE_8996=y
+CONFIG_PHY_QCOM_QMP_UFS=y
+CONFIG_PHY_QCOM_QMP_USB=y
+CONFIG_PHY_QCOM_QMP_USB_LEGACY=y
+CONFIG_PHY_QCOM_QUSB2=y
+CONFIG_PHY_QCOM_SNPS_EUSB2=y
+CONFIG_PHY_QCOM_EUSB2_REPEATER=y
+CONFIG_PHY_QCOM_M31_USB=y
+CONFIG_PHY_QCOM_USB_HS=y
+CONFIG_PHY_QCOM_USB_SNPS_FEMTO_V2=y
+CONFIG_PHY_QCOM_USB_HSIC=y
+CONFIG_PHY_QCOM_USB_HS_28NM=y
+CONFIG_PHY_QCOM_USB_SS=y
+CONFIG_PHY_QCOM_IPQ806X_USB=y
+CONFIG_PHY_QCOM_SGMII_ETH=y
+# CONFIG_PHY_TUSB1210 is not set
+# end of PHY Subsystem
+
+CONFIG_POWERCAP=y
+CONFIG_IDLE_INJECT=y
+# CONFIG_DTPM is not set
+# CONFIG_MCB is not set
+
+#
+# Performance monitor support
+#
+CONFIG_ARM_CCI_PMU=y
+CONFIG_ARM_CCI400_PMU=y
+CONFIG_ARM_CCI5xx_PMU=y
+CONFIG_ARM_CCN=y
+CONFIG_ARM_CMN=y
+CONFIG_ARM_PMU=y
+CONFIG_ARM_SMMU_V3_PMU=y
+CONFIG_ARM_PMUV3=y
+CONFIG_ARM_DSU_PMU=y
+CONFIG_ARM_SPE_PMU=y
+# CONFIG_HISI_PCIE_PMU is not set
+# CONFIG_HNS3_PMU is not set
+# CONFIG_DWC_PCIE_PMU is not set
+CONFIG_ARM_CORESIGHT_PMU_ARCH_SYSTEM_PMU=y
+# CONFIG_NVIDIA_CORESIGHT_PMU_ARCH_SYSTEM_PMU is not set
+# CONFIG_AMPERE_CORESIGHT_PMU_ARCH_SYSTEM_PMU is not set
+# end of Performance monitor support
+
+CONFIG_RAS=y
+CONFIG_USB4=y
+# CONFIG_USB4_DEBUGFS_WRITE is not set
+# CONFIG_USB4_DMA_TEST is not set
+
+#
+# Android
+#
+CONFIG_ANDROID_BINDER_IPC=y
+CONFIG_ANDROID_BINDERFS=y
+CONFIG_ANDROID_BINDER_DEVICES="binder,hwbinder,vndbinder"
+# CONFIG_ANDROID_BINDER_IPC_SELFTEST is not set
+# end of Android
+
+CONFIG_LIBNVDIMM=y
+CONFIG_BLK_DEV_PMEM=y
+CONFIG_ND_CLAIM=y
+CONFIG_ND_BTT=y
+CONFIG_BTT=y
+CONFIG_OF_PMEM=y
+CONFIG_DAX=y
+# CONFIG_DEV_DAX is not set
+CONFIG_NVMEM=y
+CONFIG_NVMEM_SYSFS=y
+CONFIG_NVMEM_LAYOUTS=y
+
+#
+# Layout Types
+#
+CONFIG_NVMEM_LAYOUT_SL28_VPD=y
+CONFIG_NVMEM_LAYOUT_ONIE_TLV=y
+# end of Layout Types
+
+CONFIG_NVMEM_QCOM_QFPROM=y
+CONFIG_NVMEM_QCOM_SEC_QFPROM=y
+CONFIG_NVMEM_RMEM=y
+CONFIG_NVMEM_SPMI_SDAM=y
+# CONFIG_NVMEM_U_BOOT_ENV is not set
+
+#
+# HW tracing support
+#
+# CONFIG_STM is not set
+# CONFIG_INTEL_TH is not set
+# CONFIG_HISI_PTT is not set
+# end of HW tracing support
+
+# CONFIG_FPGA is not set
+# CONFIG_FSI is not set
+CONFIG_TEE=y
+# CONFIG_OPTEE is not set
+CONFIG_PM_OPP=y
+# CONFIG_SIOX is not set
+CONFIG_SLIMBUS=y
+CONFIG_SLIM_QCOM_CTRL=y
+CONFIG_SLIM_QCOM_NGD_CTRL=y
+CONFIG_INTERCONNECT=y
+CONFIG_INTERCONNECT_QCOM=y
+CONFIG_INTERCONNECT_QCOM_BCM_VOTER=y
+# CONFIG_INTERCONNECT_QCOM_MSM8909 is not set
+# CONFIG_INTERCONNECT_QCOM_MSM8916 is not set
+# CONFIG_INTERCONNECT_QCOM_MSM8939 is not set
+# CONFIG_INTERCONNECT_QCOM_MSM8974 is not set
+# CONFIG_INTERCONNECT_QCOM_MSM8996 is not set
+CONFIG_INTERCONNECT_QCOM_OSM_L3=y
+# CONFIG_INTERCONNECT_QCOM_QCM2290 is not set
+# CONFIG_INTERCONNECT_QCOM_QCS404 is not set
+# CONFIG_INTERCONNECT_QCOM_QDU1000 is not set
+CONFIG_INTERCONNECT_QCOM_RPMH_POSSIBLE=y
+CONFIG_INTERCONNECT_QCOM_RPMH=y
+# CONFIG_INTERCONNECT_QCOM_SA8775P is not set
+CONFIG_INTERCONNECT_QCOM_SC7180=y
+CONFIG_INTERCONNECT_QCOM_SC7280=y
+# CONFIG_INTERCONNECT_QCOM_SC8180X is not set
+# CONFIG_INTERCONNECT_QCOM_SC8280XP is not set
+CONFIG_INTERCONNECT_QCOM_SDM660=y
+# CONFIG_INTERCONNECT_QCOM_SDM670 is not set
+# CONFIG_INTERCONNECT_QCOM_SDM845 is not set
+# CONFIG_INTERCONNECT_QCOM_SDX55 is not set
+# CONFIG_INTERCONNECT_QCOM_SDX65 is not set
+CONFIG_INTERCONNECT_QCOM_SDX75=y
+# CONFIG_INTERCONNECT_QCOM_SM6115 is not set
+# CONFIG_INTERCONNECT_QCOM_SM6350 is not set
+CONFIG_INTERCONNECT_QCOM_SM7150=y
+# CONFIG_INTERCONNECT_QCOM_SM8150 is not set
+# CONFIG_INTERCONNECT_QCOM_SM8250 is not set
+# CONFIG_INTERCONNECT_QCOM_SM8350 is not set
+# CONFIG_INTERCONNECT_QCOM_SM8450 is not set
+# CONFIG_INTERCONNECT_QCOM_SM8550 is not set
+CONFIG_INTERCONNECT_QCOM_SM8650=y
+CONFIG_INTERCONNECT_QCOM_X1E80100=y
+CONFIG_INTERCONNECT_QCOM_SMD_RPM=y
+CONFIG_COUNTER=y
+CONFIG_INTERRUPT_CNT=y
+# CONFIG_MOST is not set
+# CONFIG_PECI is not set
+# CONFIG_HTE is not set
+# CONFIG_CDX_BUS is not set
+# end of Device Drivers
+
+#
+# File systems
+#
+CONFIG_DCACHE_WORD_ACCESS=y
+# CONFIG_VALIDATE_FS_PARSER is not set
+CONFIG_FS_IOMAP=y
+CONFIG_FS_STACK=y
+CONFIG_BUFFER_HEAD=y
+CONFIG_LEGACY_DIRECT_IO=y
+# CONFIG_EXT2_FS is not set
+# CONFIG_EXT3_FS is not set
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_USE_FOR_EXT2=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+# CONFIG_EXT4_DEBUG is not set
+CONFIG_JBD2=y
+# CONFIG_JBD2_DEBUG is not set
+CONFIG_FS_MBCACHE=y
+# CONFIG_REISERFS_FS is not set
+# CONFIG_JFS_FS is not set
+# CONFIG_XFS_FS is not set
+# CONFIG_GFS2_FS is not set
+# CONFIG_OCFS2_FS is not set
+# CONFIG_BTRFS_FS is not set
+# CONFIG_NILFS2_FS is not set
+CONFIG_F2FS_FS=y
+CONFIG_F2FS_STAT_FS=y
+CONFIG_F2FS_FS_XATTR=y
+CONFIG_F2FS_FS_POSIX_ACL=y
+# CONFIG_F2FS_FS_SECURITY is not set
+# CONFIG_F2FS_CHECK_FS is not set
+# CONFIG_F2FS_FAULT_INJECTION is not set
+CONFIG_F2FS_FS_COMPRESSION=y
+CONFIG_F2FS_FS_LZO=y
+CONFIG_F2FS_FS_LZORLE=y
+CONFIG_F2FS_FS_LZ4=y
+CONFIG_F2FS_FS_LZ4HC=y
+CONFIG_F2FS_FS_ZSTD=y
+CONFIG_F2FS_IOSTAT=y
+# CONFIG_F2FS_UNFAIR_RWSEM is not set
+# CONFIG_BCACHEFS_FS is not set
+CONFIG_FS_POSIX_ACL=y
+CONFIG_EXPORTFS=y
+CONFIG_EXPORTFS_BLOCK_OPS=y
+CONFIG_FILE_LOCKING=y
+CONFIG_FS_ENCRYPTION=y
+CONFIG_FS_ENCRYPTION_ALGS=y
+CONFIG_FS_VERITY=y
+CONFIG_FS_VERITY_BUILTIN_SIGNATURES=y
+CONFIG_FSNOTIFY=y
+CONFIG_DNOTIFY=y
+CONFIG_INOTIFY_USER=y
+CONFIG_FANOTIFY=y
+CONFIG_FANOTIFY_ACCESS_PERMISSIONS=y
+CONFIG_QUOTA=y
+# CONFIG_QUOTA_NETLINK_INTERFACE is not set
+# CONFIG_QUOTA_DEBUG is not set
+CONFIG_QUOTA_TREE=y
+CONFIG_QFMT_V1=y
+CONFIG_QFMT_V2=y
+CONFIG_QUOTACTL=y
+CONFIG_AUTOFS_FS=y
+CONFIG_FUSE_FS=y
+CONFIG_CUSE=y
+CONFIG_VIRTIO_FS=y
+CONFIG_FUSE_PASSTHROUGH=y
+CONFIG_OVERLAY_FS=y
+# CONFIG_OVERLAY_FS_REDIRECT_DIR is not set
+CONFIG_OVERLAY_FS_REDIRECT_ALWAYS_FOLLOW=y
+# CONFIG_OVERLAY_FS_INDEX is not set
+# CONFIG_OVERLAY_FS_XINO_AUTO is not set
+# CONFIG_OVERLAY_FS_METACOPY is not set
+# CONFIG_OVERLAY_FS_DEBUG is not set
+
+#
+# Caches
+#
+# end of Caches
+
+#
+# CD-ROM/DVD Filesystems
+#
+# CONFIG_ISO9660_FS is not set
+# CONFIG_UDF_FS is not set
+# end of CD-ROM/DVD Filesystems
+
+#
+# DOS/FAT/EXFAT/NT Filesystems
+#
+CONFIG_FAT_FS=y
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_FAT_DEFAULT_CODEPAGE=437
+CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-1"
+CONFIG_FAT_DEFAULT_UTF8=y
+CONFIG_EXFAT_FS=y
+CONFIG_EXFAT_DEFAULT_IOCHARSET="utf8"
+# CONFIG_NTFS3_FS is not set
+# end of DOS/FAT/EXFAT/NT Filesystems
+
+#
+# Pseudo filesystems
+#
+CONFIG_PROC_FS=y
+# CONFIG_PROC_KCORE is not set
+CONFIG_PROC_VMCORE=y
+# CONFIG_PROC_VMCORE_DEVICE_DUMP is not set
+CONFIG_PROC_SYSCTL=y
+CONFIG_PROC_PAGE_MONITOR=y
+CONFIG_PROC_CHILDREN=y
+CONFIG_KERNFS=y
+CONFIG_SYSFS=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_TMPFS_XATTR=y
+CONFIG_TMPFS_INODE64=y
+CONFIG_TMPFS_QUOTA=y
+CONFIG_ARCH_SUPPORTS_HUGETLBFS=y
+CONFIG_HUGETLBFS=y
+CONFIG_HUGETLB_PAGE=y
+CONFIG_ARCH_HAS_GIGANTIC_PAGE=y
+CONFIG_CONFIGFS_FS=y
+# end of Pseudo filesystems
+
+CONFIG_MISC_FILESYSTEMS=y
+# CONFIG_ORANGEFS_FS is not set
+# CONFIG_ADFS_FS is not set
+# CONFIG_AFFS_FS is not set
+# CONFIG_ECRYPT_FS is not set
+# CONFIG_HFS_FS is not set
+# CONFIG_HFSPLUS_FS is not set
+# CONFIG_BEFS_FS is not set
+# CONFIG_BFS_FS is not set
+# CONFIG_EFS_FS is not set
+# CONFIG_JFFS2_FS is not set
+# CONFIG_CRAMFS is not set
+# CONFIG_SQUASHFS is not set
+# CONFIG_VXFS_FS is not set
+# CONFIG_MINIX_FS is not set
+# CONFIG_OMFS_FS is not set
+# CONFIG_HPFS_FS is not set
+# CONFIG_QNX4FS_FS is not set
+# CONFIG_QNX6FS_FS is not set
+# CONFIG_ROMFS_FS is not set
+CONFIG_PSTORE=y
+CONFIG_PSTORE_DEFAULT_KMSG_BYTES=10240
+CONFIG_PSTORE_COMPRESS=y
+CONFIG_PSTORE_CONSOLE=y
+CONFIG_PSTORE_PMSG=y
+CONFIG_PSTORE_RAM=y
+# CONFIG_PSTORE_BLK is not set
+# CONFIG_SYSV_FS is not set
+# CONFIG_UFS_FS is not set
+CONFIG_EROFS_FS=y
+# CONFIG_EROFS_FS_DEBUG is not set
+CONFIG_EROFS_FS_XATTR=y
+CONFIG_EROFS_FS_POSIX_ACL=y
+CONFIG_EROFS_FS_SECURITY=y
+CONFIG_EROFS_FS_ZIP=y
+CONFIG_EROFS_FS_ZIP_LZMA=y
+CONFIG_EROFS_FS_ZIP_DEFLATE=y
+# CONFIG_EROFS_FS_ONDEMAND is not set
+# CONFIG_EROFS_FS_PCPU_KTHREAD is not set
+CONFIG_NETWORK_FILESYSTEMS=y
+# CONFIG_NFS_FS is not set
+# CONFIG_NFSD is not set
+# CONFIG_CEPH_FS is not set
+# CONFIG_CIFS is not set
+# CONFIG_SMB_SERVER is not set
+# CONFIG_CODA_FS is not set
+# CONFIG_AFS_FS is not set
+CONFIG_NLS=y
+CONFIG_NLS_DEFAULT="utf8"
+CONFIG_NLS_CODEPAGE_437=y
+# CONFIG_NLS_CODEPAGE_737 is not set
+# CONFIG_NLS_CODEPAGE_775 is not set
+# CONFIG_NLS_CODEPAGE_850 is not set
+# CONFIG_NLS_CODEPAGE_852 is not set
+# CONFIG_NLS_CODEPAGE_855 is not set
+# CONFIG_NLS_CODEPAGE_857 is not set
+# CONFIG_NLS_CODEPAGE_860 is not set
+# CONFIG_NLS_CODEPAGE_861 is not set
+# CONFIG_NLS_CODEPAGE_862 is not set
+# CONFIG_NLS_CODEPAGE_863 is not set
+# CONFIG_NLS_CODEPAGE_864 is not set
+# CONFIG_NLS_CODEPAGE_865 is not set
+# CONFIG_NLS_CODEPAGE_866 is not set
+# CONFIG_NLS_CODEPAGE_869 is not set
+# CONFIG_NLS_CODEPAGE_936 is not set
+# CONFIG_NLS_CODEPAGE_950 is not set
+# CONFIG_NLS_CODEPAGE_932 is not set
+# CONFIG_NLS_CODEPAGE_949 is not set
+# CONFIG_NLS_CODEPAGE_874 is not set
+# CONFIG_NLS_ISO8859_8 is not set
+# CONFIG_NLS_CODEPAGE_1250 is not set
+# CONFIG_NLS_CODEPAGE_1251 is not set
+# CONFIG_NLS_ASCII is not set
+CONFIG_NLS_ISO8859_1=y
+# CONFIG_NLS_ISO8859_2 is not set
+# CONFIG_NLS_ISO8859_3 is not set
+# CONFIG_NLS_ISO8859_4 is not set
+# CONFIG_NLS_ISO8859_5 is not set
+# CONFIG_NLS_ISO8859_6 is not set
+# CONFIG_NLS_ISO8859_7 is not set
+# CONFIG_NLS_ISO8859_9 is not set
+# CONFIG_NLS_ISO8859_13 is not set
+# CONFIG_NLS_ISO8859_14 is not set
+# CONFIG_NLS_ISO8859_15 is not set
+# CONFIG_NLS_KOI8_R is not set
+# CONFIG_NLS_KOI8_U is not set
+# CONFIG_NLS_MAC_ROMAN is not set
+# CONFIG_NLS_MAC_CELTIC is not set
+# CONFIG_NLS_MAC_CENTEURO is not set
+# CONFIG_NLS_MAC_CROATIAN is not set
+# CONFIG_NLS_MAC_CYRILLIC is not set
+# CONFIG_NLS_MAC_GAELIC is not set
+# CONFIG_NLS_MAC_GREEK is not set
+# CONFIG_NLS_MAC_ICELAND is not set
+# CONFIG_NLS_MAC_INUIT is not set
+# CONFIG_NLS_MAC_ROMANIAN is not set
+# CONFIG_NLS_MAC_TURKISH is not set
+CONFIG_NLS_UTF8=y
+# CONFIG_DLM is not set
+# CONFIG_UNICODE is not set
+CONFIG_IO_WQ=y
+# end of File systems
+
+#
+# Security options
+#
+CONFIG_KEYS=y
+# CONFIG_KEYS_REQUEST_CACHE is not set
+# CONFIG_PERSISTENT_KEYRINGS is not set
+CONFIG_TRUSTED_KEYS=y
+CONFIG_TRUSTED_KEYS_TEE=y
+# CONFIG_ENCRYPTED_KEYS is not set
+CONFIG_KEY_DH_OPERATIONS=y
+# CONFIG_KEY_NOTIFICATIONS is not set
+# CONFIG_SECURITY_DMESG_RESTRICT is not set
+CONFIG_SECURITY=y
+CONFIG_SECURITYFS=y
+CONFIG_SECURITY_NETWORK=y
+# CONFIG_SECURITY_NETWORK_XFRM is not set
+# CONFIG_SECURITY_PATH is not set
+CONFIG_LSM_MMAP_MIN_ADDR=32768
+CONFIG_HARDENED_USERCOPY=y
+# CONFIG_FORTIFY_SOURCE is not set
+CONFIG_STATIC_USERMODEHELPER=y
+CONFIG_STATIC_USERMODEHELPER_PATH="/sbin/usermode-helper"
+CONFIG_SECURITY_SELINUX=y
+CONFIG_SECURITY_SELINUX_BOOTPARAM=y
+CONFIG_SECURITY_SELINUX_DEVELOP=y
+CONFIG_SECURITY_SELINUX_AVC_STATS=y
+CONFIG_SECURITY_SELINUX_SIDTAB_HASH_BITS=9
+CONFIG_SECURITY_SELINUX_SID2STR_CACHE_SIZE=256
+# CONFIG_SECURITY_SELINUX_DEBUG is not set
+# CONFIG_SECURITY_SMACK is not set
+# CONFIG_SECURITY_TOMOYO is not set
+# CONFIG_SECURITY_APPARMOR is not set
+# CONFIG_SECURITY_LOADPIN is not set
+# CONFIG_SECURITY_YAMA is not set
+# CONFIG_SECURITY_SAFESETID is not set
+# CONFIG_SECURITY_LOCKDOWN_LSM is not set
+# CONFIG_SECURITY_LANDLOCK is not set
+CONFIG_INTEGRITY=y
+# CONFIG_INTEGRITY_SIGNATURE is not set
+CONFIG_INTEGRITY_AUDIT=y
+# CONFIG_IMA is not set
+# CONFIG_EVM is not set
+CONFIG_DEFAULT_SECURITY_SELINUX=y
+# CONFIG_DEFAULT_SECURITY_DAC is not set
+CONFIG_LSM="selinux"
+
+#
+# Kernel hardening options
+#
+
+#
+# Memory initialization
+#
+CONFIG_INIT_STACK_NONE=y
+# CONFIG_INIT_ON_ALLOC_DEFAULT_ON is not set
+# CONFIG_INIT_ON_FREE_DEFAULT_ON is not set
+CONFIG_CC_HAS_ZERO_CALL_USED_REGS=y
+# CONFIG_ZERO_CALL_USED_REGS is not set
+# end of Memory initialization
+
+#
+# Hardening of kernel data structures
+#
+CONFIG_LIST_HARDENED=y
+# CONFIG_BUG_ON_DATA_CORRUPTION is not set
+# end of Hardening of kernel data structures
+
+CONFIG_RANDSTRUCT_NONE=y
+# end of Kernel hardening options
+# end of Security options
+
+CONFIG_CRYPTO=y
+
+#
+# Crypto core or helper
+#
+CONFIG_CRYPTO_ALGAPI=y
+CONFIG_CRYPTO_ALGAPI2=y
+CONFIG_CRYPTO_AEAD=y
+CONFIG_CRYPTO_AEAD2=y
+CONFIG_CRYPTO_SIG2=y
+CONFIG_CRYPTO_SKCIPHER=y
+CONFIG_CRYPTO_SKCIPHER2=y
+CONFIG_CRYPTO_HASH=y
+CONFIG_CRYPTO_HASH2=y
+CONFIG_CRYPTO_RNG=y
+CONFIG_CRYPTO_RNG2=y
+CONFIG_CRYPTO_RNG_DEFAULT=y
+CONFIG_CRYPTO_AKCIPHER2=y
+CONFIG_CRYPTO_AKCIPHER=y
+CONFIG_CRYPTO_KPP2=y
+CONFIG_CRYPTO_KPP=y
+CONFIG_CRYPTO_ACOMP2=y
+CONFIG_CRYPTO_MANAGER=y
+CONFIG_CRYPTO_MANAGER2=y
+# CONFIG_CRYPTO_USER is not set
+CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
+CONFIG_CRYPTO_NULL=y
+CONFIG_CRYPTO_NULL2=y
+# CONFIG_CRYPTO_PCRYPT is not set
+# CONFIG_CRYPTO_CRYPTD is not set
+CONFIG_CRYPTO_AUTHENC=y
+# CONFIG_CRYPTO_TEST is not set
+# end of Crypto core or helper
+
+#
+# Public-key cryptography
+#
+CONFIG_CRYPTO_RSA=y
+CONFIG_CRYPTO_DH=y
+# CONFIG_CRYPTO_DH_RFC7919_GROUPS is not set
+CONFIG_CRYPTO_ECC=y
+CONFIG_CRYPTO_ECDH=y
+# CONFIG_CRYPTO_ECDSA is not set
+# CONFIG_CRYPTO_ECRDSA is not set
+# CONFIG_CRYPTO_SM2 is not set
+# CONFIG_CRYPTO_CURVE25519 is not set
+# end of Public-key cryptography
+
+#
+# Block ciphers
+#
+CONFIG_CRYPTO_AES=y
+# CONFIG_CRYPTO_AES_TI is not set
+# CONFIG_CRYPTO_ANUBIS is not set
+# CONFIG_CRYPTO_ARIA is not set
+# CONFIG_CRYPTO_BLOWFISH is not set
+# CONFIG_CRYPTO_CAMELLIA is not set
+# CONFIG_CRYPTO_CAST5 is not set
+# CONFIG_CRYPTO_CAST6 is not set
+# CONFIG_CRYPTO_DES is not set
+# CONFIG_CRYPTO_FCRYPT is not set
+# CONFIG_CRYPTO_KHAZAD is not set
+# CONFIG_CRYPTO_SEED is not set
+# CONFIG_CRYPTO_SERPENT is not set
+CONFIG_CRYPTO_SM4=y
+# CONFIG_CRYPTO_SM4_GENERIC is not set
+# CONFIG_CRYPTO_TEA is not set
+# CONFIG_CRYPTO_TWOFISH is not set
+# end of Block ciphers
+
+#
+# Length-preserving ciphers and modes
+#
+# CONFIG_CRYPTO_ADIANTUM is not set
+# CONFIG_CRYPTO_ARC4 is not set
+# CONFIG_CRYPTO_CHACHA20 is not set
+CONFIG_CRYPTO_CBC=y
+CONFIG_CRYPTO_CTR=y
+# CONFIG_CRYPTO_CTS is not set
+CONFIG_CRYPTO_ECB=y
+# CONFIG_CRYPTO_HCTR2 is not set
+# CONFIG_CRYPTO_KEYWRAP is not set
+# CONFIG_CRYPTO_LRW is not set
+# CONFIG_CRYPTO_PCBC is not set
+CONFIG_CRYPTO_XTS=y
+CONFIG_CRYPTO_NHPOLY1305=y
+# end of Length-preserving ciphers and modes
+
+#
+# AEAD (authenticated encryption with associated data) ciphers
+#
+# CONFIG_CRYPTO_AEGIS128 is not set
+# CONFIG_CRYPTO_CHACHA20POLY1305 is not set
+CONFIG_CRYPTO_CCM=y
+CONFIG_CRYPTO_GCM=y
+CONFIG_CRYPTO_GENIV=y
+CONFIG_CRYPTO_SEQIV=y
+CONFIG_CRYPTO_ECHAINIV=y
+CONFIG_CRYPTO_ESSIV=y
+# end of AEAD (authenticated encryption with associated data) ciphers
+
+#
+# Hashes, digests, and MACs
+#
+# CONFIG_CRYPTO_BLAKE2B is not set
+CONFIG_CRYPTO_CMAC=y
+CONFIG_CRYPTO_GHASH=y
+CONFIG_CRYPTO_HMAC=y
+# CONFIG_CRYPTO_MD4 is not set
+# CONFIG_CRYPTO_MD5 is not set
+CONFIG_CRYPTO_MICHAEL_MIC=m
+CONFIG_CRYPTO_POLY1305=y
+# CONFIG_CRYPTO_RMD160 is not set
+CONFIG_CRYPTO_SHA1=y
+CONFIG_CRYPTO_SHA256=y
+CONFIG_CRYPTO_SHA512=y
+CONFIG_CRYPTO_SHA3=y
+CONFIG_CRYPTO_SM3=y
+# CONFIG_CRYPTO_SM3_GENERIC is not set
+# CONFIG_CRYPTO_STREEBOG is not set
+# CONFIG_CRYPTO_VMAC is not set
+# CONFIG_CRYPTO_WP512 is not set
+# CONFIG_CRYPTO_XCBC is not set
+# CONFIG_CRYPTO_XXHASH is not set
+# end of Hashes, digests, and MACs
+
+#
+# CRCs (cyclic redundancy checks)
+#
+CONFIG_CRYPTO_CRC32C=y
+CONFIG_CRYPTO_CRC32=y
+# CONFIG_CRYPTO_CRCT10DIF is not set
+# end of CRCs (cyclic redundancy checks)
+
+#
+# Compression
+#
+CONFIG_CRYPTO_DEFLATE=y
+CONFIG_CRYPTO_LZO=y
+CONFIG_CRYPTO_842=y
+CONFIG_CRYPTO_LZ4=y
+CONFIG_CRYPTO_LZ4HC=y
+CONFIG_CRYPTO_ZSTD=y
+# end of Compression
+
+#
+# Random number generation
+#
+CONFIG_CRYPTO_ANSI_CPRNG=y
+CONFIG_CRYPTO_DRBG_MENU=y
+CONFIG_CRYPTO_DRBG_HMAC=y
+# CONFIG_CRYPTO_DRBG_HASH is not set
+# CONFIG_CRYPTO_DRBG_CTR is not set
+CONFIG_CRYPTO_DRBG=y
+CONFIG_CRYPTO_JITTERENTROPY=y
+CONFIG_CRYPTO_JITTERENTROPY_MEMORY_BLOCKS=64
+CONFIG_CRYPTO_JITTERENTROPY_MEMORY_BLOCKSIZE=32
+CONFIG_CRYPTO_JITTERENTROPY_OSR=1
+CONFIG_CRYPTO_KDF800108_CTR=y
+# end of Random number generation
+
+#
+# Userspace interface
+#
+CONFIG_CRYPTO_USER_API=y
+CONFIG_CRYPTO_USER_API_HASH=m
+CONFIG_CRYPTO_USER_API_SKCIPHER=m
+CONFIG_CRYPTO_USER_API_RNG=y
+# CONFIG_CRYPTO_USER_API_RNG_CAVP is not set
+CONFIG_CRYPTO_USER_API_AEAD=y
+CONFIG_CRYPTO_USER_API_ENABLE_OBSOLETE=y
+# end of Userspace interface
+
+CONFIG_CRYPTO_HASH_INFO=y
+CONFIG_CRYPTO_NHPOLY1305_NEON=y
+CONFIG_CRYPTO_CHACHA20_NEON=m
+
+#
+# Accelerated Cryptographic Algorithms for CPU (arm64)
+#
+CONFIG_CRYPTO_GHASH_ARM64_CE=y
+CONFIG_CRYPTO_POLY1305_NEON=y
+CONFIG_CRYPTO_SHA1_ARM64_CE=y
+CONFIG_CRYPTO_SHA256_ARM64=y
+CONFIG_CRYPTO_SHA2_ARM64_CE=y
+CONFIG_CRYPTO_SHA512_ARM64=y
+CONFIG_CRYPTO_SHA512_ARM64_CE=y
+CONFIG_CRYPTO_SHA3_ARM64=y
+# CONFIG_CRYPTO_SM3_NEON is not set
+CONFIG_CRYPTO_SM3_ARM64_CE=y
+# CONFIG_CRYPTO_POLYVAL_ARM64_CE is not set
+# CONFIG_CRYPTO_AES_ARM64 is not set
+CONFIG_CRYPTO_AES_ARM64_CE=y
+CONFIG_CRYPTO_AES_ARM64_CE_BLK=y
+CONFIG_CRYPTO_AES_ARM64_NEON_BLK=y
+CONFIG_CRYPTO_AES_ARM64_BS=y
+CONFIG_CRYPTO_SM4_ARM64_CE=y
+# CONFIG_CRYPTO_SM4_ARM64_CE_BLK is not set
+# CONFIG_CRYPTO_SM4_ARM64_NEON_BLK is not set
+CONFIG_CRYPTO_AES_ARM64_CE_CCM=y
+# CONFIG_CRYPTO_SM4_ARM64_CE_CCM is not set
+# CONFIG_CRYPTO_SM4_ARM64_CE_GCM is not set
+# end of Accelerated Cryptographic Algorithms for CPU (arm64)
+
+CONFIG_CRYPTO_HW=y
+# CONFIG_CRYPTO_DEV_ATMEL_ECC is not set
+# CONFIG_CRYPTO_DEV_ATMEL_SHA204A is not set
+# CONFIG_CRYPTO_DEV_CCP is not set
+# CONFIG_CRYPTO_DEV_NITROX_CNN55XX is not set
+# CONFIG_CRYPTO_DEV_QAT_DH895xCC is not set
+# CONFIG_CRYPTO_DEV_QAT_C3XXX is not set
+# CONFIG_CRYPTO_DEV_QAT_C62X is not set
+# CONFIG_CRYPTO_DEV_QAT_4XXX is not set
+# CONFIG_CRYPTO_DEV_QAT_420XX is not set
+# CONFIG_CRYPTO_DEV_QAT_DH895xCCVF is not set
+# CONFIG_CRYPTO_DEV_QAT_C3XXXVF is not set
+# CONFIG_CRYPTO_DEV_QAT_C62XVF is not set
+# CONFIG_CRYPTO_DEV_CAVIUM_ZIP is not set
+# CONFIG_CRYPTO_DEV_QCE is not set
+CONFIG_CRYPTO_DEV_QCOM_RNG=y
+# CONFIG_CRYPTO_DEV_VIRTIO is not set
+# CONFIG_CRYPTO_DEV_SAFEXCEL is not set
+# CONFIG_CRYPTO_DEV_CCREE is not set
+# CONFIG_CRYPTO_DEV_HISI_SEC is not set
+# CONFIG_CRYPTO_DEV_AMLOGIC_GXL is not set
+CONFIG_ASYMMETRIC_KEY_TYPE=y
+CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y
+CONFIG_X509_CERTIFICATE_PARSER=y
+CONFIG_PKCS8_PRIVATE_KEY_PARSER=y
+CONFIG_PKCS7_MESSAGE_PARSER=y
+# CONFIG_PKCS7_TEST_KEY is not set
+# CONFIG_SIGNED_PE_FILE_VERIFICATION is not set
+# CONFIG_FIPS_SIGNATURE_SELFTEST is not set
+
+#
+# Certificates for signature checking
+#
+CONFIG_SYSTEM_TRUSTED_KEYRING=y
+CONFIG_SYSTEM_TRUSTED_KEYS=""
+# CONFIG_SYSTEM_EXTRA_CERTIFICATE is not set
+# CONFIG_SECONDARY_TRUSTED_KEYRING is not set
+# CONFIG_SYSTEM_BLACKLIST_KEYRING is not set
+# end of Certificates for signature checking
+
+CONFIG_BINARY_PRINTF=y
+
+#
+# Library routines
+#
+CONFIG_LINEAR_RANGES=y
+# CONFIG_PACKING is not set
+CONFIG_BITREVERSE=y
+CONFIG_HAVE_ARCH_BITREVERSE=y
+CONFIG_GENERIC_STRNCPY_FROM_USER=y
+CONFIG_GENERIC_STRNLEN_USER=y
+CONFIG_GENERIC_NET_UTILS=y
+# CONFIG_CORDIC is not set
+CONFIG_PRIME_NUMBERS=m
+CONFIG_RATIONAL=y
+CONFIG_ARCH_USE_CMPXCHG_LOCKREF=y
+CONFIG_ARCH_HAS_FAST_MULTIPLIER=y
+CONFIG_ARCH_USE_SYM_ANNOTATIONS=y
+# CONFIG_INDIRECT_PIO is not set
+CONFIG_TRACE_MMIO_ACCESS=y
+
+#
+# Crypto library routines
+#
+CONFIG_CRYPTO_LIB_UTILS=y
+CONFIG_CRYPTO_LIB_AES=y
+CONFIG_CRYPTO_LIB_ARC4=y
+CONFIG_CRYPTO_LIB_GF128MUL=y
+CONFIG_CRYPTO_LIB_BLAKE2S_GENERIC=y
+CONFIG_CRYPTO_ARCH_HAVE_LIB_CHACHA=m
+CONFIG_CRYPTO_LIB_CHACHA_GENERIC=m
+CONFIG_CRYPTO_LIB_CHACHA=m
+CONFIG_CRYPTO_LIB_CURVE25519_GENERIC=m
+CONFIG_CRYPTO_LIB_CURVE25519=m
+CONFIG_CRYPTO_LIB_POLY1305_RSIZE=9
+CONFIG_CRYPTO_ARCH_HAVE_LIB_POLY1305=y
+CONFIG_CRYPTO_LIB_POLY1305_GENERIC=y
+CONFIG_CRYPTO_LIB_POLY1305=y
+CONFIG_CRYPTO_LIB_CHACHA20POLY1305=m
+CONFIG_CRYPTO_LIB_SHA1=y
+CONFIG_CRYPTO_LIB_SHA256=y
+# end of Crypto library routines
+
+CONFIG_CRC_CCITT=y
+CONFIG_CRC16=y
+# CONFIG_CRC_T10DIF is not set
+# CONFIG_CRC64_ROCKSOFT is not set
+CONFIG_CRC_ITU_T=y
+CONFIG_CRC32=y
+# CONFIG_CRC32_SELFTEST is not set
+CONFIG_CRC32_SLICEBY8=y
+# CONFIG_CRC32_SLICEBY4 is not set
+# CONFIG_CRC32_SARWATE is not set
+# CONFIG_CRC32_BIT is not set
+# CONFIG_CRC64 is not set
+# CONFIG_CRC4 is not set
+# CONFIG_CRC7 is not set
+CONFIG_LIBCRC32C=y
+CONFIG_CRC8=y
+CONFIG_XXHASH=y
+CONFIG_AUDIT_GENERIC=y
+CONFIG_AUDIT_ARCH_COMPAT_GENERIC=y
+CONFIG_AUDIT_COMPAT_GENERIC=y
+# CONFIG_RANDOM32_SELFTEST is not set
+CONFIG_842_COMPRESS=y
+CONFIG_842_DECOMPRESS=y
+CONFIG_ZLIB_INFLATE=y
+CONFIG_ZLIB_DEFLATE=y
+CONFIG_LZO_COMPRESS=y
+CONFIG_LZO_DECOMPRESS=y
+CONFIG_LZ4_COMPRESS=y
+CONFIG_LZ4HC_COMPRESS=y
+CONFIG_LZ4_DECOMPRESS=y
+CONFIG_ZSTD_COMMON=y
+CONFIG_ZSTD_COMPRESS=y
+CONFIG_ZSTD_DECOMPRESS=y
+CONFIG_XZ_DEC=y
+CONFIG_XZ_DEC_X86=y
+CONFIG_XZ_DEC_POWERPC=y
+CONFIG_XZ_DEC_ARM=y
+CONFIG_XZ_DEC_ARMTHUMB=y
+CONFIG_XZ_DEC_SPARC=y
+CONFIG_XZ_DEC_MICROLZMA=y
+CONFIG_XZ_DEC_BCJ=y
+# CONFIG_XZ_DEC_TEST is not set
+CONFIG_DECOMPRESS_GZIP=y
+CONFIG_DECOMPRESS_BZIP2=y
+CONFIG_DECOMPRESS_LZMA=y
+CONFIG_DECOMPRESS_XZ=y
+CONFIG_DECOMPRESS_LZO=y
+CONFIG_DECOMPRESS_LZ4=y
+CONFIG_DECOMPRESS_ZSTD=y
+CONFIG_GENERIC_ALLOCATOR=y
+CONFIG_REED_SOLOMON=y
+CONFIG_REED_SOLOMON_ENC8=y
+CONFIG_REED_SOLOMON_DEC8=y
+CONFIG_TEXTSEARCH=y
+CONFIG_TEXTSEARCH_KMP=y
+CONFIG_TEXTSEARCH_BM=y
+CONFIG_TEXTSEARCH_FSM=y
+CONFIG_INTERVAL_TREE=y
+CONFIG_XARRAY_MULTI=y
+CONFIG_ASSOCIATIVE_ARRAY=y
+CONFIG_HAS_IOMEM=y
+CONFIG_HAS_IOPORT=y
+CONFIG_HAS_IOPORT_MAP=y
+CONFIG_HAS_DMA=y
+CONFIG_DMA_OPS=y
+CONFIG_NEED_SG_DMA_FLAGS=y
+CONFIG_NEED_SG_DMA_LENGTH=y
+CONFIG_NEED_DMA_MAP_STATE=y
+CONFIG_ARCH_DMA_ADDR_T_64BIT=y
+CONFIG_DMA_DECLARE_COHERENT=y
+CONFIG_ARCH_HAS_SETUP_DMA_OPS=y
+CONFIG_ARCH_HAS_TEARDOWN_DMA_OPS=y
+CONFIG_ARCH_HAS_SYNC_DMA_FOR_DEVICE=y
+CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU=y
+CONFIG_ARCH_HAS_DMA_PREP_COHERENT=y
+CONFIG_SWIOTLB=y
+# CONFIG_SWIOTLB_DYNAMIC is not set
+CONFIG_DMA_BOUNCE_UNALIGNED_KMALLOC=y
+# CONFIG_DMA_RESTRICTED_POOL is not set
+CONFIG_DMA_NONCOHERENT_MMAP=y
+CONFIG_DMA_COHERENT_POOL=y
+CONFIG_DMA_DIRECT_REMAP=y
+CONFIG_DMA_CMA=y
+
+#
+# Default contiguous memory area size:
+#
+CONFIG_CMA_SIZE_MBYTES=32
+CONFIG_CMA_SIZE_SEL_MBYTES=y
+# CONFIG_CMA_SIZE_SEL_PERCENTAGE is not set
+# CONFIG_CMA_SIZE_SEL_MIN is not set
+# CONFIG_CMA_SIZE_SEL_MAX is not set
+CONFIG_CMA_ALIGNMENT=8
+# CONFIG_DMA_API_DEBUG is not set
+# CONFIG_DMA_MAP_BENCHMARK is not set
+CONFIG_SGL_ALLOC=y
+# CONFIG_FORCE_NR_CPUS is not set
+CONFIG_CPU_RMAP=y
+CONFIG_DQL=y
+CONFIG_GLOB=y
+# CONFIG_GLOB_SELFTEST is not set
+CONFIG_NLATTR=y
+CONFIG_CLZ_TAB=y
+# CONFIG_IRQ_POLL is not set
+CONFIG_MPILIB=y
+CONFIG_DIMLIB=y
+CONFIG_LIBFDT=y
+CONFIG_OID_REGISTRY=y
+CONFIG_HAVE_GENERIC_VDSO=y
+CONFIG_GENERIC_GETTIMEOFDAY=y
+CONFIG_GENERIC_VDSO_TIME_NS=y
+CONFIG_FONT_SUPPORT=y
+CONFIG_FONTS=y
+# CONFIG_FONT_8x8 is not set
+CONFIG_FONT_8x16=y
+# CONFIG_FONT_6x11 is not set
+# CONFIG_FONT_7x14 is not set
+# CONFIG_FONT_PEARL_8x8 is not set
+# CONFIG_FONT_ACORN_8x8 is not set
+# CONFIG_FONT_MINI_4x6 is not set
+# CONFIG_FONT_6x10 is not set
+# CONFIG_FONT_10x18 is not set
+# CONFIG_FONT_SUN8x16 is not set
+# CONFIG_FONT_SUN12x22 is not set
+# CONFIG_FONT_TER16x32 is not set
+# CONFIG_FONT_6x8 is not set
+CONFIG_FONT_AUTOSELECT=y
+CONFIG_SG_POOL=y
+CONFIG_ARCH_HAS_PMEM_API=y
+CONFIG_MEMREGION=y
+CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE=y
+CONFIG_ARCH_STACKWALK=y
+CONFIG_STACKDEPOT=y
+CONFIG_STACKDEPOT_MAX_FRAMES=64
+CONFIG_SBITMAP=y
+# CONFIG_LWQ_TEST is not set
+# end of Library routines
+
+CONFIG_GENERIC_IOREMAP=y
+CONFIG_GENERIC_LIB_DEVMEM_IS_ALLOWED=y
+
+#
+# Kernel hacking
+#
+
+#
+# printk and dmesg options
+#
+CONFIG_PRINTK_TIME=y
+CONFIG_PRINTK_CALLER=y
+CONFIG_STACKTRACE_BUILD_ID=y
+CONFIG_CONSOLE_LOGLEVEL_DEFAULT=7
+CONFIG_CONSOLE_LOGLEVEL_QUIET=4
+CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4
+# CONFIG_BOOT_PRINTK_DELAY is not set
+CONFIG_DYNAMIC_DEBUG=y
+CONFIG_DYNAMIC_DEBUG_CORE=y
+CONFIG_SYMBOLIC_ERRNAME=y
+CONFIG_DEBUG_BUGVERBOSE=y
+# end of printk and dmesg options
+
+CONFIG_DEBUG_KERNEL=y
+CONFIG_DEBUG_MISC=y
+
+#
+# Compile-time checks and compiler options
+#
+CONFIG_AS_HAS_NON_CONST_ULEB128=y
+CONFIG_DEBUG_INFO_NONE=y
+# CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT is not set
+# CONFIG_DEBUG_INFO_DWARF4 is not set
+# CONFIG_DEBUG_INFO_DWARF5 is not set
+CONFIG_FRAME_WARN=2048
+# CONFIG_STRIP_ASM_SYMS is not set
+# CONFIG_READABLE_ASM is not set
+# CONFIG_HEADERS_INSTALL is not set
+# CONFIG_DEBUG_SECTION_MISMATCH is not set
+CONFIG_SECTION_MISMATCH_WARN_ONLY=y
+# CONFIG_DEBUG_FORCE_FUNCTION_ALIGN_64B is not set
+CONFIG_ARCH_WANT_FRAME_POINTERS=y
+CONFIG_FRAME_POINTER=y
+# CONFIG_VMLINUX_MAP is not set
+# CONFIG_DEBUG_FORCE_WEAK_PER_CPU is not set
+# end of Compile-time checks and compiler options
+
+#
+# Generic Kernel Debugging Instruments
+#
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE=0x1
+CONFIG_MAGIC_SYSRQ_SERIAL=y
+CONFIG_MAGIC_SYSRQ_SERIAL_SEQUENCE=""
+CONFIG_DEBUG_FS=y
+CONFIG_DEBUG_FS_ALLOW_ALL=y
+# CONFIG_DEBUG_FS_DISALLOW_MOUNT is not set
+# CONFIG_DEBUG_FS_ALLOW_NONE is not set
+CONFIG_HAVE_ARCH_KGDB=y
+# CONFIG_KGDB is not set
+CONFIG_ARCH_HAS_UBSAN=y
+# CONFIG_UBSAN is not set
+CONFIG_HAVE_ARCH_KCSAN=y
+CONFIG_HAVE_KCSAN_COMPILER=y
+# CONFIG_KCSAN is not set
+# end of Generic Kernel Debugging Instruments
+
+#
+# Networking Debugging
+#
+# CONFIG_NET_DEV_REFCNT_TRACKER is not set
+# CONFIG_NET_NS_REFCNT_TRACKER is not set
+# CONFIG_DEBUG_NET is not set
+# end of Networking Debugging
+
+#
+# Memory Debugging
+#
+CONFIG_PAGE_EXTENSION=y
+# CONFIG_DEBUG_PAGEALLOC is not set
+CONFIG_SLUB_DEBUG=y
+# CONFIG_SLUB_DEBUG_ON is not set
+# CONFIG_PAGE_OWNER is not set
+# CONFIG_PAGE_POISONING is not set
+# CONFIG_DEBUG_PAGE_REF is not set
+# CONFIG_DEBUG_RODATA_TEST is not set
+CONFIG_ARCH_HAS_DEBUG_WX=y
+# CONFIG_DEBUG_WX is not set
+CONFIG_GENERIC_PTDUMP=y
+# CONFIG_PTDUMP_DEBUGFS is not set
+CONFIG_HAVE_DEBUG_KMEMLEAK=y
+# CONFIG_DEBUG_KMEMLEAK is not set
+CONFIG_PER_VMA_LOCK_STATS=y
+# CONFIG_DEBUG_OBJECTS is not set
+CONFIG_SHRINKER_DEBUG=y
+# CONFIG_DEBUG_STACK_USAGE is not set
+CONFIG_SCHED_STACK_END_CHECK=y
+CONFIG_ARCH_HAS_DEBUG_VM_PGTABLE=y
+# CONFIG_DEBUG_VM is not set
+# CONFIG_DEBUG_VM_PGTABLE is not set
+CONFIG_ARCH_HAS_DEBUG_VIRTUAL=y
+# CONFIG_DEBUG_VIRTUAL is not set
+# CONFIG_DEBUG_MEMORY_INIT is not set
+# CONFIG_DEBUG_PER_CPU_MAPS is not set
+CONFIG_HAVE_ARCH_KASAN=y
+CONFIG_HAVE_ARCH_KASAN_SW_TAGS=y
+CONFIG_HAVE_ARCH_KASAN_HW_TAGS=y
+CONFIG_HAVE_ARCH_KASAN_VMALLOC=y
+CONFIG_CC_HAS_KASAN_GENERIC=y
+CONFIG_CC_HAS_KASAN_SW_TAGS=y
+CONFIG_CC_HAS_WORKING_NOSANITIZE_ADDRESS=y
+# CONFIG_KASAN is not set
+CONFIG_HAVE_ARCH_KFENCE=y
+# CONFIG_KFENCE is not set
+# end of Memory Debugging
+
+CONFIG_DEBUG_SHIRQ=y
+
+#
+# Debug Oops, Lockups and Hangs
+#
+# CONFIG_PANIC_ON_OOPS is not set
+CONFIG_PANIC_ON_OOPS_VALUE=0
+CONFIG_PANIC_TIMEOUT=5
+CONFIG_LOCKUP_DETECTOR=y
+CONFIG_SOFTLOCKUP_DETECTOR=y
+CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC=y
+CONFIG_HAVE_HARDLOCKUP_DETECTOR_BUDDY=y
+# CONFIG_HARDLOCKUP_DETECTOR is not set
+# CONFIG_DETECT_HUNG_TASK is not set
+CONFIG_WQ_WATCHDOG=y
+# CONFIG_WQ_CPU_INTENSIVE_REPORT is not set
+# CONFIG_TEST_LOCKUP is not set
+# end of Debug Oops, Lockups and Hangs
+
+#
+# Scheduler Debugging
+#
+# CONFIG_SCHED_DEBUG is not set
+CONFIG_SCHED_INFO=y
+CONFIG_SCHEDSTATS=y
+# end of Scheduler Debugging
+
+# CONFIG_DEBUG_TIMEKEEPING is not set
+# CONFIG_DEBUG_PREEMPT is not set
+
+#
+# Lock Debugging (spinlocks, mutexes, etc...)
+#
+CONFIG_LOCK_DEBUGGING_SUPPORT=y
+CONFIG_PROVE_LOCKING=y
+# CONFIG_PROVE_RAW_LOCK_NESTING is not set
+# CONFIG_LOCK_STAT is not set
+CONFIG_DEBUG_RT_MUTEXES=y
+CONFIG_DEBUG_SPINLOCK=y
+CONFIG_DEBUG_MUTEXES=y
+CONFIG_DEBUG_WW_MUTEX_SLOWPATH=y
+CONFIG_DEBUG_RWSEMS=y
+CONFIG_DEBUG_LOCK_ALLOC=y
+CONFIG_LOCKDEP=y
+CONFIG_LOCKDEP_BITS=15
+CONFIG_LOCKDEP_CHAINS_BITS=16
+CONFIG_LOCKDEP_STACK_TRACE_BITS=19
+CONFIG_LOCKDEP_STACK_TRACE_HASH_BITS=14
+CONFIG_LOCKDEP_CIRCULAR_QUEUE_BITS=12
+# CONFIG_DEBUG_LOCKDEP is not set
+# CONFIG_DEBUG_ATOMIC_SLEEP is not set
+# CONFIG_DEBUG_LOCKING_API_SELFTESTS is not set
+# CONFIG_LOCK_TORTURE_TEST is not set
+# CONFIG_WW_MUTEX_SELFTEST is not set
+# CONFIG_SCF_TORTURE_TEST is not set
+# CONFIG_CSD_LOCK_WAIT_DEBUG is not set
+# end of Lock Debugging (spinlocks, mutexes, etc...)
+
+CONFIG_TRACE_IRQFLAGS=y
+CONFIG_TRACE_IRQFLAGS_NMI=y
+# CONFIG_DEBUG_IRQFLAGS is not set
+CONFIG_STACKTRACE=y
+# CONFIG_WARN_ALL_UNSEEDED_RANDOM is not set
+# CONFIG_DEBUG_KOBJECT is not set
+
+#
+# Debug kernel data structures
+#
+# CONFIG_DEBUG_LIST is not set
+# CONFIG_DEBUG_PLIST is not set
+# CONFIG_DEBUG_SG is not set
+# CONFIG_DEBUG_NOTIFIERS is not set
+# CONFIG_DEBUG_MAPLE_TREE is not set
+# end of Debug kernel data structures
+
+#
+# RCU Debugging
+#
+CONFIG_PROVE_RCU=y
+# CONFIG_RCU_SCALE_TEST is not set
+# CONFIG_RCU_TORTURE_TEST is not set
+# CONFIG_RCU_REF_SCALE_TEST is not set
+CONFIG_RCU_CPU_STALL_TIMEOUT=21
+CONFIG_RCU_EXP_CPU_STALL_TIMEOUT=20
+# CONFIG_RCU_CPU_STALL_CPUTIME is not set
+CONFIG_RCU_TRACE=y
+CONFIG_RCU_EQS_DEBUG=y
+# end of RCU Debugging
+
+# CONFIG_DEBUG_WQ_FORCE_RR_CPU is not set
+# CONFIG_CPU_HOTPLUG_STATE_CONTROL is not set
+# CONFIG_LATENCYTOP is not set
+CONFIG_NOP_TRACER=y
+CONFIG_HAVE_FUNCTION_TRACER=y
+CONFIG_HAVE_FUNCTION_GRAPH_TRACER=y
+CONFIG_HAVE_FUNCTION_GRAPH_RETVAL=y
+CONFIG_HAVE_DYNAMIC_FTRACE=y
+CONFIG_HAVE_DYNAMIC_FTRACE_WITH_ARGS=y
+CONFIG_HAVE_FTRACE_MCOUNT_RECORD=y
+CONFIG_HAVE_SYSCALL_TRACEPOINTS=y
+CONFIG_HAVE_C_RECORDMCOUNT=y
+CONFIG_TRACE_CLOCK=y
+CONFIG_RING_BUFFER=y
+CONFIG_EVENT_TRACING=y
+CONFIG_CONTEXT_SWITCH_TRACER=y
+CONFIG_PREEMPTIRQ_TRACEPOINTS=y
+CONFIG_TRACING=y
+CONFIG_TRACING_SUPPORT=y
+CONFIG_FTRACE=y
+# CONFIG_BOOTTIME_TRACING is not set
+# CONFIG_FUNCTION_TRACER is not set
+# CONFIG_STACK_TRACER is not set
+# CONFIG_IRQSOFF_TRACER is not set
+# CONFIG_PREEMPT_TRACER is not set
+# CONFIG_SCHED_TRACER is not set
+# CONFIG_HWLAT_TRACER is not set
+# CONFIG_OSNOISE_TRACER is not set
+# CONFIG_TIMERLAT_TRACER is not set
+# CONFIG_ENABLE_DEFAULT_TRACERS is not set
+# CONFIG_FTRACE_SYSCALLS is not set
+# CONFIG_TRACER_SNAPSHOT is not set
+CONFIG_BRANCH_PROFILE_NONE=y
+# CONFIG_PROFILE_ANNOTATED_BRANCHES is not set
+# CONFIG_PROFILE_ALL_BRANCHES is not set
+# CONFIG_BLK_DEV_IO_TRACE is not set
+CONFIG_UPROBE_EVENTS=y
+CONFIG_BPF_EVENTS=y
+CONFIG_DYNAMIC_EVENTS=y
+CONFIG_PROBE_EVENTS=y
+# CONFIG_SYNTH_EVENTS is not set
+# CONFIG_USER_EVENTS is not set
+# CONFIG_HIST_TRIGGERS is not set
+# CONFIG_TRACE_EVENT_INJECT is not set
+# CONFIG_TRACEPOINT_BENCHMARK is not set
+# CONFIG_RING_BUFFER_BENCHMARK is not set
+# CONFIG_TRACE_EVAL_MAP_FILE is not set
+# CONFIG_GCOV_PROFILE_FTRACE is not set
+# CONFIG_RING_BUFFER_STARTUP_TEST is not set
+# CONFIG_RING_BUFFER_VALIDATE_TIME_DELTAS is not set
+# CONFIG_PREEMPTIRQ_DELAY_TEST is not set
+# CONFIG_RV is not set
+# CONFIG_SAMPLES is not set
+CONFIG_HAVE_SAMPLE_FTRACE_DIRECT=y
+CONFIG_HAVE_SAMPLE_FTRACE_DIRECT_MULTI=y
+# CONFIG_STRICT_DEVMEM is not set
+
+#
+# arm64 Debugging
+#
+# CONFIG_PID_IN_CONTEXTIDR is not set
+# CONFIG_ARM64_RELOC_TEST is not set
+# CONFIG_CORESIGHT is not set
+# end of arm64 Debugging
+
+#
+# Kernel Testing and Coverage
+#
+# CONFIG_KUNIT is not set
+# CONFIG_NOTIFIER_ERROR_INJECTION is not set
+# CONFIG_FAULT_INJECTION is not set
+CONFIG_ARCH_HAS_KCOV=y
+CONFIG_CC_HAS_SANCOV_TRACE_PC=y
+CONFIG_RUNTIME_TESTING_MENU=y
+# CONFIG_TEST_DHRY is not set
+# CONFIG_LKDTM is not set
+# CONFIG_TEST_MIN_HEAP is not set
+# CONFIG_TEST_DIV64 is not set
+# CONFIG_BACKTRACE_SELF_TEST is not set
+# CONFIG_TEST_REF_TRACKER is not set
+# CONFIG_RBTREE_TEST is not set
+# CONFIG_REED_SOLOMON_TEST is not set
+# CONFIG_INTERVAL_TREE_TEST is not set
+# CONFIG_PERCPU_TEST is not set
+# CONFIG_ATOMIC64_SELFTEST is not set
+# CONFIG_TEST_HEXDUMP is not set
+# CONFIG_TEST_KSTRTOX is not set
+# CONFIG_TEST_PRINTF is not set
+# CONFIG_TEST_SCANF is not set
+# CONFIG_TEST_BITMAP is not set
+# CONFIG_TEST_UUID is not set
+# CONFIG_TEST_XARRAY is not set
+# CONFIG_TEST_MAPLE_TREE is not set
+# CONFIG_TEST_RHASHTABLE is not set
+# CONFIG_TEST_IDA is not set
+# CONFIG_TEST_LKM is not set
+# CONFIG_TEST_BITOPS is not set
+# CONFIG_TEST_VMALLOC is not set
+# CONFIG_TEST_USER_COPY is not set
+# CONFIG_TEST_BPF is not set
+# CONFIG_TEST_BLACKHOLE_DEV is not set
+# CONFIG_FIND_BIT_BENCHMARK is not set
+# CONFIG_TEST_FIRMWARE is not set
+# CONFIG_TEST_SYSCTL is not set
+# CONFIG_TEST_UDELAY is not set
+# CONFIG_TEST_STATIC_KEYS is not set
+# CONFIG_TEST_DYNAMIC_DEBUG is not set
+# CONFIG_TEST_KMOD is not set
+# CONFIG_TEST_MEMCAT_P is not set
+# CONFIG_TEST_MEMINIT is not set
+# CONFIG_TEST_FREE_PAGES is not set
+# CONFIG_TEST_OBJPOOL is not set
+CONFIG_ARCH_USE_MEMTEST=y
+# CONFIG_MEMTEST is not set
+# end of Kernel Testing and Coverage
+
+#
+# Rust hacking
+#
+# end of Rust hacking
+# end of Kernel hacking
diff --git a/arch/arm64/kernel/head.S b/arch/arm64/kernel/head.S
index cb68adcabe0789..67bd8956459cb0 100644
--- a/arch/arm64/kernel/head.S
+++ b/arch/arm64/kernel/head.S
@@ -59,7 +59,7 @@
 	 */
 	efi_signature_nop			// special NOP to identity as PE/COFF executable
 	b	primary_entry			// branch to kernel start, magic
-	.quad	0				// Image load offset from start of RAM, little-endian
+	le64sym	_kernel_offset_le		// Image load offset from start of RAM, little-endian
 	le64sym	_kernel_size_le			// Effective size of kernel image, little-endian
 	le64sym	_kernel_flags_le		// Informative flags, little-endian
 	.quad	0				// reserved
diff --git a/arch/arm64/kernel/image.h b/arch/arm64/kernel/image.h
index 7bc3ba89790191..0297e5d3e9af4d 100644
--- a/arch/arm64/kernel/image.h
+++ b/arch/arm64/kernel/image.h
@@ -62,6 +62,7 @@
  */
 #define HEAD_SYMBOLS						\
 	DEFINE_IMAGE_LE64(_kernel_size_le, _end - _text);	\
+	DEFINE_IMAGE_LE64(_kernel_offset_le, 0x00080000);	\
 	DEFINE_IMAGE_LE64(_kernel_flags_le, __HEAD_FLAGS);
 
 #endif /* __ARM64_KERNEL_IMAGE_H */
diff --git a/drivers/clk/qcom/dispcc-sc7180.c b/drivers/clk/qcom/dispcc-sc7180.c
index 4710247be53069..0814f6b0babf63 100644
--- a/drivers/clk/qcom/dispcc-sc7180.c
+++ b/drivers/clk/qcom/dispcc-sc7180.c
@@ -6,6 +6,7 @@
 #include <linux/clk-provider.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
 #include <linux/regmap.h>
 
 #include <dt-bindings/clock/qcom,dispcc-sc7180.h>
@@ -700,6 +701,7 @@ static int disp_cc_sc7180_probe(struct platform_device *pdev)
 {
 	struct regmap *regmap;
 	struct alpha_pll_config disp_cc_pll_config = {};
+	int ret;
 
 	regmap = qcom_cc_map(pdev, &disp_cc_sc7180_desc);
 	if (IS_ERR(regmap))
@@ -713,7 +715,11 @@ static int disp_cc_sc7180_probe(struct platform_device *pdev)
 
 	clk_fabia_pll_configure(&disp_cc_pll0, regmap, &disp_cc_pll_config);
 
-	return qcom_cc_really_probe(&pdev->dev, &disp_cc_sc7180_desc, regmap);
+	ret = qcom_cc_really_probe(&pdev->dev, &disp_cc_sc7180_desc, regmap);
+	if (ret)
+		return ret;
+
+	return devm_pm_runtime_enable(&pdev->dev);
 }
 
 static struct platform_driver disp_cc_sc7180_driver = {
diff --git a/drivers/clk/qcom/gcc-sc7180.c b/drivers/clk/qcom/gcc-sc7180.c
index 4a49ad7a9e5be6..30689b12f676a5 100644
--- a/drivers/clk/qcom/gcc-sc7180.c
+++ b/drivers/clk/qcom/gcc-sc7180.c
@@ -9,6 +9,7 @@
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
 #include <linux/regmap.h>
 
 #include <dt-bindings/clock/qcom,gcc-sc7180.h>
@@ -2458,7 +2459,11 @@ static int gcc_sc7180_probe(struct platform_device *pdev)
 	if (ret)
 		return ret;
 
-	return qcom_cc_really_probe(&pdev->dev, &gcc_sc7180_desc, regmap);
+	ret = qcom_cc_really_probe(&pdev->dev, &gcc_sc7180_desc, regmap);
+	if (ret)
+		return ret;
+
+	return devm_pm_runtime_enable(&pdev->dev);
 }
 
 static struct platform_driver gcc_sc7180_driver = {
diff --git a/drivers/clk/qcom/gpucc-sc7180.c b/drivers/clk/qcom/gpucc-sc7180.c
index 08f3983d016f3f..0567232c4ed668 100644
--- a/drivers/clk/qcom/gpucc-sc7180.c
+++ b/drivers/clk/qcom/gpucc-sc7180.c
@@ -6,6 +6,7 @@
 #include <linux/clk-provider.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
 #include <linux/regmap.h>
 
 #include <dt-bindings/clock/qcom,gpucc-sc7180.h>
@@ -219,6 +220,7 @@ static int gpu_cc_sc7180_probe(struct platform_device *pdev)
 	struct regmap *regmap;
 	struct alpha_pll_config gpu_cc_pll_config = {};
 	unsigned int value, mask;
+	int ret;
 
 	regmap = qcom_cc_map(pdev, &gpu_cc_sc7180_desc);
 	if (IS_ERR(regmap))
@@ -241,7 +243,11 @@ static int gpu_cc_sc7180_probe(struct platform_device *pdev)
 	value = 0xF << CX_GMU_CBCR_WAKE_SHIFT | 0xF << CX_GMU_CBCR_SLEEP_SHIFT;
 	regmap_update_bits(regmap, 0x1098, mask, value);
 
-	return qcom_cc_really_probe(&pdev->dev, &gpu_cc_sc7180_desc, regmap);
+	ret = qcom_cc_really_probe(&pdev->dev, &gpu_cc_sc7180_desc, regmap);
+	if (ret)
+		return ret;
+
+	return devm_pm_runtime_enable(&pdev->dev);
 }
 
 static struct platform_driver gpu_cc_sc7180_driver = {
diff --git a/drivers/clk/qcom/videocc-sc7180.c b/drivers/clk/qcom/videocc-sc7180.c
index d7f84548039699..caabf3730251ed 100644
--- a/drivers/clk/qcom/videocc-sc7180.c
+++ b/drivers/clk/qcom/videocc-sc7180.c
@@ -6,6 +6,7 @@
 #include <linux/clk-provider.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
 #include <linux/regmap.h>
 
 #include <dt-bindings/clock/qcom,videocc-sc7180.h>
@@ -211,6 +212,7 @@ static int video_cc_sc7180_probe(struct platform_device *pdev)
 {
 	struct regmap *regmap;
 	struct alpha_pll_config video_pll0_config = {};
+	int ret;
 
 	regmap = qcom_cc_map(pdev, &video_cc_sc7180_desc);
 	if (IS_ERR(regmap))
@@ -226,7 +228,11 @@ static int video_cc_sc7180_probe(struct platform_device *pdev)
 	/* Keep VIDEO_CC_XO_CLK ALWAYS-ON */
 	regmap_update_bits(regmap, 0x984, 0x1, 0x1);
 
-	return qcom_cc_really_probe(&pdev->dev, &video_cc_sc7180_desc, regmap);
+	ret = qcom_cc_really_probe(&pdev->dev, &video_cc_sc7180_desc, regmap);
+	if (ret)
+		return ret;
+
+	return devm_pm_runtime_enable(&pdev->dev);
 }
 
 static struct platform_driver video_cc_sc7180_driver = {
diff --git a/drivers/cpufreq/cpufreq-dt-platdev.c b/drivers/cpufreq/cpufreq-dt-platdev.c
index 18942bfe9c95f7..4e68a1e7155a57 100644
--- a/drivers/cpufreq/cpufreq-dt-platdev.c
+++ b/drivers/cpufreq/cpufreq-dt-platdev.c
@@ -165,6 +165,7 @@ static const struct of_device_id blocklist[] __initconst = {
 	{ .compatible = "qcom,sm6115", },
 	{ .compatible = "qcom,sm6350", },
 	{ .compatible = "qcom,sm6375", },
+	{ .compatible = "qcom,sm7125", },
 	{ .compatible = "qcom,sm7225", },
 	{ .compatible = "qcom,sm7325", },
 	{ .compatible = "qcom,sm8150", },
diff --git a/drivers/firmware/qcom/qcom_tzmem.c b/drivers/firmware/qcom/qcom_tzmem.c
index 92b3651782355f..4788be3257672f 100644
--- a/drivers/firmware/qcom/qcom_tzmem.c
+++ b/drivers/firmware/qcom/qcom_tzmem.c
@@ -79,6 +79,7 @@ static const char *const qcom_tzmem_blacklist[] = {
 	"qcom,sc8180x",
 	"qcom,sdm670", /* failure in GPU firmware loading */
 	"qcom,sdm845", /* reset in rmtfs memory assignment */
+	"qcom,sm7125", /* leave it as old code works fine */
 	"qcom,sm8150", /* reset in rmtfs memory assignment */
 	NULL
 };
diff --git a/drivers/gpu/drm/msm/adreno/a6xx_catalog.c b/drivers/gpu/drm/msm/adreno/a6xx_catalog.c
index 0312b6ee0356be..1ee8fdedc69159 100644
--- a/drivers/gpu/drm/msm/adreno/a6xx_catalog.c
+++ b/drivers/gpu/drm/msm/adreno/a6xx_catalog.c
@@ -778,6 +778,7 @@ static const struct adreno_info a6xx_gpus[] = {
 		},
 		.speedbins = ADRENO_SPEEDBINS(
 			{ 0,   0 },
+			{ 159, 3 },
 			{ 169, 1 },
 			{ 174, 2 },
 		),
diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_util.c b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_util.c
index 486be346d40d8b..870a61fb32da93 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_util.c
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_util.c
@@ -90,17 +90,20 @@ static u32 dpu_hw_util_log_mask = DPU_DBG_MASK_NONE;
 void dpu_reg_write(struct dpu_hw_blk_reg_map *c,
 		u32 reg_off,
 		u32 val,
-		const char *name)
+		const char *name, const char *fname, int line)
 {
 	/* don't need to mutex protect this */
 	if (c->log_mask & dpu_hw_util_log_mask)
-		DPU_DEBUG_DRIVER("[%s:0x%X] <= 0x%X\n",
-				name, reg_off, val);
+		DPU_DEBUG_DRIVER("[%s:0x%X] <= 0x%X fname:%s line:%d\n",
+				name, reg_off, val, fname, line);
 	writel_relaxed(val, c->blk_addr + reg_off);
 }
 
-int dpu_reg_read(struct dpu_hw_blk_reg_map *c, u32 reg_off)
+int dpu_reg_read(struct dpu_hw_blk_reg_map *c, u32 reg_off, const char *name, const char *fname, int line)
 {
+	if (c->log_mask & dpu_hw_util_log_mask)
+		DPU_DEBUG_DRIVER("[%s: 0x%p 0x%X] <= 0x%X  %s:%d\n",
+                               name, (void *)c->blk_addr, reg_off, 0, fname, line);
 	return readl_relaxed(c->blk_addr + reg_off);
 }
 
diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_util.h b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_util.h
index 67b08e99335dcf..30961a44890691 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_util.h
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_hw_util.h
@@ -333,11 +333,11 @@ u32 *dpu_hw_util_get_log_mask_ptr(void);
 void dpu_reg_write(struct dpu_hw_blk_reg_map *c,
 		u32 reg_off,
 		u32 val,
-		const char *name);
-int dpu_reg_read(struct dpu_hw_blk_reg_map *c, u32 reg_off);
+		const char *name, const char *fname, int line);
+int dpu_reg_read(struct dpu_hw_blk_reg_map *c, u32 reg_off, const char *name, const char *fname, int line);
 
-#define DPU_REG_WRITE(c, off, val) dpu_reg_write(c, off, val, #off)
-#define DPU_REG_READ(c, off) dpu_reg_read(c, off)
+#define DPU_REG_WRITE(c, off, val) dpu_reg_write(c, off, val, #off, __func__, __LINE__)
+#define DPU_REG_READ(c, off) dpu_reg_read(c, off, #off, __func__, __LINE__)
 
 void *dpu_hw_util_get_dir(void);
 
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 987a0870241035..4b5fbe29130207 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -11,6 +11,10 @@ obj-$(CONFIG_DRM_PANEL_BOE_TV101WUM_NL6) += panel-boe-tv101wum-nl6.o
 obj-$(CONFIG_DRM_PANEL_DSI_CM) += panel-dsi-cm.o
 obj-$(CONFIG_DRM_PANEL_LVDS) += panel-lvds.o
 obj-$(CONFIG_DRM_PANEL_SIMPLE) += panel-simple.o
+obj-$(CONFIG_DRM_PANEL_SIMPLE) += panel-nt36675-tianma.o
+obj-$(CONFIG_DRM_PANEL_SIMPLE) += panel-k9d-36-02-0a-dsc.o
+obj-$(CONFIG_DRM_PANEL_SIMPLE) += panel-s6d6ft0-tianma-fhd.o
+obj-$(CONFIG_DRM_PANEL_SIMPLE) += panel-ft8756-huaxing.o
 obj-$(CONFIG_DRM_PANEL_EDP) += panel-edp.o
 obj-$(CONFIG_DRM_PANEL_EBBG_FT8719) += panel-ebbg-ft8719.o
 obj-$(CONFIG_DRM_PANEL_ELIDA_KD35T133) += panel-elida-kd35t133.o
diff --git a/drivers/gpu/drm/panel/panel-ft8756-huaxing.c b/drivers/gpu/drm/panel/panel-ft8756-huaxing.c
new file mode 100644
index 00000000000000..5ae75989f80f58
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-ft8756-huaxing.c
@@ -0,0 +1,276 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// Copyright (c) 2024 FIXME
+// Generated with linux-mdss-dsi-panel-driver-generator from vendor device tree:
+//   Copyright (c) 2013, The Linux Foundation. All rights reserved. (FIXME)
+
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+
+#include <video/mipi_display.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+#include <drm/drm_probe_helper.h>
+
+struct ft8756_huaxing {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+	struct gpio_desc *reset_gpio;
+};
+
+struct ft8756_match_data {
+	int parse_cmdline;
+};
+
+static inline struct ft8756_huaxing *to_ft8756_huaxing(struct drm_panel *panel)
+{
+	return container_of(panel, struct ft8756_huaxing, panel);
+}
+
+static void ft8756_huaxing_reset(struct ft8756_huaxing *ctx)
+{
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	usleep_range(4000, 5000);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	usleep_range(1000, 2000);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	usleep_range(10000, 11000);
+}
+
+static int ft8756_huaxing_on(struct ft8756_huaxing *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	mipi_dsi_dcs_write_seq(dsi, 0x00, 0x00);
+	mipi_dsi_dcs_write_seq(dsi, 0xff, 0x87, 0x56, 0x01);
+	mipi_dsi_dcs_write_seq(dsi, 0x00, 0x80);
+	mipi_dsi_dcs_write_seq(dsi, 0xff, 0x87, 0x56);
+	mipi_dsi_dcs_write_seq(dsi, 0x00, 0x80);
+	mipi_dsi_dcs_write_seq(dsi, 0xca,
+			       0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
+			       0x80, 0x80, 0x80, 0x80);
+	mipi_dsi_dcs_write_seq(dsi, 0x00, 0x90);
+	mipi_dsi_dcs_write_seq(dsi, 0xca,
+			       0xfe, 0xff, 0x66, 0xf6, 0xff, 0x66, 0xfb, 0xff,
+			       0x32);
+
+	ret = mipi_dsi_dcs_set_display_brightness(dsi, 0x00b8);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display brightness: %d\n", ret);
+		return ret;
+	}
+
+	mipi_dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x24);
+	mipi_dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_POWER_SAVE, 0x00);
+	mipi_dsi_dcs_write_seq(dsi, 0x00, 0xb5);
+	mipi_dsi_dcs_write_seq(dsi, 0xca, 0x04);
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(90);
+
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display on: %d\n", ret);
+		return ret;
+	}
+	usleep_range(5000, 6000);
+
+	return 0;
+}
+
+static int ft8756_huaxing_off(struct ft8756_huaxing *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display off: %d\n", ret);
+		return ret;
+	}
+	usleep_range(10000, 11000);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(150);
+
+	mipi_dsi_dcs_write_seq(dsi, 0x00, 0x00);
+	mipi_dsi_dcs_write_seq(dsi, 0xf7, 0x5a, 0xa5, 0x95, 0x27);
+
+	return 0;
+}
+
+static int ft8756_huaxing_prepare(struct drm_panel *panel)
+{
+	struct ft8756_huaxing *ctx = to_ft8756_huaxing(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	ft8756_huaxing_reset(ctx);
+
+	ret = ft8756_huaxing_on(ctx);
+	if (ret < 0) {
+		dev_err(dev, "Failed to initialize panel: %d\n", ret);
+		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int ft8756_huaxing_unprepare(struct drm_panel *panel)
+{
+	struct ft8756_huaxing *ctx = to_ft8756_huaxing(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	ret = ft8756_huaxing_off(ctx);
+	if (ret < 0)
+		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+
+	return 0;
+}
+
+static const struct drm_display_mode ft8756_huaxing_mode = {
+	.clock = (1080 + 20 + 4 + 20) * (2400 + 8 + 4 + 32) * 60 / 1000,
+	.hdisplay = 1080,
+	.hsync_start = 1080 + 20,
+	.hsync_end = 1080 + 20 + 4,
+	.htotal = 1080 + 20 + 4 + 20,
+	.vdisplay = 2400,
+	.vsync_start = 2400 + 8,
+	.vsync_end = 2400 + 8 + 4,
+	.vtotal = 2400 + 8 + 4 + 32,
+	.width_mm = 69,
+	.height_mm = 154,
+	.type = DRM_MODE_TYPE_DRIVER,
+};
+
+static int ft8756_huaxing_get_modes(struct drm_panel *panel,
+				    struct drm_connector *connector)
+{
+	return drm_connector_helper_get_modes_fixed(connector, &ft8756_huaxing_mode);
+}
+
+static const struct drm_panel_funcs ft8756_huaxing_panel_funcs = {
+	.prepare = ft8756_huaxing_prepare,
+	.unprepare = ft8756_huaxing_unprepare,
+	.get_modes = ft8756_huaxing_get_modes,
+};
+
+static int ft8756_huaxing_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	static const struct ft8756_match_data *match_data;
+	struct ft8756_huaxing *ctx;
+	int ret;
+
+	match_data = of_device_get_match_data(dev);
+        if (match_data && match_data->parse_cmdline) {
+                char *path = "/chosen";
+                struct device_node *dt_node;
+                const char *bootargs;
+
+                dt_node = of_find_node_by_path(path);
+                if (!dt_node) {
+                        dev_err(dev, "Failed to find device-tree node: %s\n", path);
+                        return -ENODEV;
+                }
+
+                if (!of_property_read_string(dt_node, "bootargs", &bootargs))
+                        if (!strstr(bootargs, "ft87"))
+				return -ENODEV;
+
+		dev_info(dev, "Found focaltech/huaxing panel as specified in chosen/bootargs.");
+	}
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(ctx->reset_gpio))
+		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+				     "Failed to get reset-gpios\n");
+
+	ctx->dsi = dsi;
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO;
+
+	drm_panel_init(&ctx->panel, dev, &ft8756_huaxing_panel_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+	ctx->panel.prepare_prev_first = true;
+
+	ret = drm_panel_of_backlight(&ctx->panel);
+	if (ret)
+		return dev_err_probe(dev, ret, "Failed to get backlight\n");
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		drm_panel_remove(&ctx->panel);
+		return dev_err_probe(dev, ret, "Failed to attach to DSI host\n");
+	}
+
+	return 0;
+}
+
+static void ft8756_huaxing_remove(struct mipi_dsi_device *dsi)
+{
+	struct ft8756_huaxing *ctx = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		dev_err(&dsi->dev, "Failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&ctx->panel);
+}
+
+static const struct ft8756_match_data cmdline_data = {
+        .parse_cmdline = true,
+};
+
+static const struct of_device_id ft8756_huaxing_of_match[] = {
+	{ .compatible = "mdss,ft8756-huaxing", .data = &cmdline_data }, // FIXME
+	{ .compatible = "focaltech,ft8756-huaxing", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, ft8756_huaxing_of_match);
+
+static struct mipi_dsi_driver ft8756_huaxing_driver = {
+	.probe = ft8756_huaxing_probe,
+	.remove = ft8756_huaxing_remove,
+	.driver = {
+		.name = "panel-ft8756-huaxing",
+		.of_match_table = ft8756_huaxing_of_match,
+	},
+};
+module_mipi_dsi_driver(ft8756_huaxing_driver);
+
+MODULE_AUTHOR("linux-mdss-dsi-panel-driver-generator <fix@me>"); // FIXME
+MODULE_DESCRIPTION("DRM driver for ft8756 video mode dsi huaxing panel");
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpu/drm/panel/panel-k9d-36-02-0a-dsc.c b/drivers/gpu/drm/panel/panel-k9d-36-02-0a-dsc.c
new file mode 100644
index 00000000000000..fc40d3bbaddb81
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-k9d-36-02-0a-dsc.c
@@ -0,0 +1,482 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// Copyright (c) 2022 FIXME
+// Generated with linux-mdss-dsi-panel-driver-generator from vendor device tree:
+//   Copyright (c) 2013, The Linux Foundation. All rights reserved. (FIXME)
+
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+
+#include <video/mipi_display.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+struct k9d_36_02_0a_dsc {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+	struct gpio_desc *reset_gpio;
+	bool prepared;
+};
+
+static inline
+struct k9d_36_02_0a_dsc *to_k9d_36_02_0a_dsc(struct drm_panel *panel)
+{
+	return container_of(panel, struct k9d_36_02_0a_dsc, panel);
+}
+
+#define dsi_dcs_write_seq(dsi, seq...) do {				\
+		static const u8 d[] = { seq };				\
+		int ret;						\
+		ret = mipi_dsi_dcs_write_buffer(dsi, d, ARRAY_SIZE(d));	\
+		if (ret < 0)						\
+			return ret;					\
+	} while (0)
+
+static void k9d_36_02_0a_dsc_reset(struct k9d_36_02_0a_dsc *ctx)
+{
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	usleep_range(11000, 12000);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	usleep_range(1000, 2000);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	usleep_range(11000, 12000);
+}
+
+static int k9d_36_02_0a_dsc_on(struct k9d_36_02_0a_dsc *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x00);
+	dsi_dcs_write_seq(dsi, 0xba,
+			  0x01, 0xe6, 0x00, 0x10, 0x00, 0x30, 0x00, 0x01);
+	dsi_dcs_write_seq(dsi, 0xb2, 0x58);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x02);
+	dsi_dcs_write_seq(dsi, 0xb2, 0x0c, 0x0c);
+	dsi_dcs_write_seq(dsi, 0xbe, 0x0e, 0x0b, 0x14, 0x13);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x05);
+	dsi_dcs_write_seq(dsi, 0xbe, 0x8a);
+	dsi_dcs_write_seq(dsi, 0xc0, 0x66);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x08);
+	dsi_dcs_write_seq(dsi, 0xb5, 0x32);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x07);
+	dsi_dcs_write_seq(dsi, 0xc0, 0x01);
+	dsi_dcs_write_seq(dsi, 0xc1,
+			  0x30, 0x0f, 0x04, 0xc9, 0x0f, 0x81, 0xee, 0xc6, 0x3f,
+			  0xfb, 0xb3, 0x6a, 0x3f, 0xf6, 0xd1, 0x42, 0x80, 0x00,
+			  0xf7, 0x33, 0xb1, 0x00, 0x18, 0x00, 0x00, 0x8b, 0x23,
+			  0x33, 0xc0, 0x0f, 0xb9, 0x0f, 0xdd, 0x8d, 0x00, 0x00,
+			  0x00, 0x0d, 0x08, 0x00, 0x17, 0x23, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc2,
+			  0x38, 0x0f, 0x0b, 0x64, 0x02, 0x11, 0xf6, 0x4c, 0x3f,
+			  0xfa, 0xe2, 0x14, 0xff, 0xfe, 0x41, 0xa8, 0x00, 0x00,
+			  0x5e, 0x26, 0x90, 0x00, 0x00, 0x24, 0x00, 0x17, 0x90,
+			  0x33, 0xc0, 0x09, 0xb4, 0x0f, 0x94, 0xe9, 0x00, 0x00,
+			  0x90, 0x0d, 0x3c, 0x90, 0x17, 0x57, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc3,
+			  0x3c, 0x00, 0x04, 0xc9, 0x0f, 0x81, 0x11, 0x3a, 0x3f,
+			  0xf9, 0x58, 0x7c, 0x00, 0x04, 0xf1, 0x78, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x90, 0x18, 0x3c, 0x90, 0x8b, 0x5f,
+			  0x33, 0x60, 0x00, 0x00, 0x0c, 0xdd, 0x73, 0x00, 0x00,
+			  0x04, 0x20, 0x08, 0x04, 0x2a, 0x23, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc4,
+			  0x3c, 0x00, 0x0b, 0x64, 0x02, 0x11, 0x09, 0xb4, 0x3f,
+			  0xf6, 0xca, 0x24, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x80, 0x00, 0xcf, 0x90, 0x17, 0x3b,
+			  0x33, 0xc0, 0x00, 0x00, 0x0c, 0x94, 0x17, 0x00, 0x00,
+			  0x94, 0x20, 0x3c, 0x94, 0x2a, 0x57, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc5,
+			  0x26, 0x00, 0x04, 0xc9, 0x0f, 0x81, 0x11, 0x3a, 0x00,
+			  0x00, 0x00, 0x00, 0x3f, 0xef, 0x14, 0x34, 0x80, 0x00,
+			  0x00, 0x00, 0x00, 0x03, 0xac, 0x00, 0x04, 0x1f, 0x23,
+			  0x33, 0xc0, 0x00, 0x00, 0x03, 0x23, 0x8d, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc6,
+			  0x2e, 0x00, 0x0b, 0x64, 0x02, 0x11, 0x09, 0xb4, 0x00,
+			  0x03, 0x11, 0xf4, 0xff, 0xfd, 0x62, 0x7c, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x04, 0x20, 0x24, 0x04, 0x37, 0x90,
+			  0x33, 0xc0, 0x00, 0x00, 0x03, 0x6c, 0xe9, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc7,
+			  0x2a, 0x0f, 0x04, 0xc9, 0x0f, 0x81, 0xee, 0xc6, 0x00,
+			  0x02, 0x5a, 0xee, 0x00, 0x0c, 0xae, 0x86, 0x7f, 0xfd,
+			  0xf9, 0xf3, 0x65, 0x93, 0xac, 0x3c, 0x94, 0x1f, 0x5f,
+			  0x33, 0x6f, 0xf0, 0x47, 0x00, 0x23, 0x73, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc8,
+			  0x2a, 0x0f, 0x0b, 0x64, 0x02, 0x11, 0xf6, 0x4c, 0x00,
+			  0x07, 0x29, 0xe4, 0xc0, 0x00, 0xdf, 0x2c, 0x7f, 0xff,
+			  0x43, 0xb2, 0xe0, 0x84, 0x20, 0xcf, 0x94, 0x37, 0x3b,
+			  0x33, 0xcf, 0xf6, 0x4c, 0x00, 0x6c, 0x17, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc9,
+			  0x27, 0x00, 0x03, 0xc1, 0x04, 0x41, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x3f, 0xfe, 0xf8, 0x42, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x63, 0x24, 0x00, 0x84, 0x43,
+			  0x33, 0x90, 0x00, 0x00, 0x03, 0x1f, 0xdf, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xca,
+			  0x21, 0x00, 0x03, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x3f,
+			  0xff, 0x0f, 0xc0, 0x3f, 0xff, 0x08, 0x00, 0x00, 0x00,
+			  0x0f, 0x04, 0x00, 0x00, 0x42, 0x24, 0x00, 0x62, 0x43,
+			  0x33, 0x90, 0x03, 0xe0, 0x0f, 0xe1, 0xe0, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xcb,
+			  0x2d, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3f,
+			  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x42, 0x44, 0x00, 0x62, 0x64,
+			  0x33, 0x60, 0x00, 0x00, 0x0c, 0xe0, 0x20, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xcc,
+			  0x2b, 0x00, 0x04, 0x00, 0x04, 0x41, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
+			  0xee, 0xfc, 0x00, 0x00, 0x63, 0x44, 0x00, 0x84, 0x64,
+			  0x33, 0x6f, 0xfb, 0xe0, 0x00, 0x20, 0x21, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xb4, 0xc0);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x01);
+	dsi_dcs_write_seq(dsi, 0xb4, 0x00, 0x80, 0x80);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x01);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x01);
+	dsi_dcs_write_seq(dsi, 0xd2, 0x00, 0x00, 0x11);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x06);
+	dsi_dcs_write_seq(dsi, 0xd2, 0x05);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x0f);
+	dsi_dcs_write_seq(dsi, 0xd2, 0x00);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x09);
+	dsi_dcs_write_seq(dsi, 0xd2, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xce, 0x00);
+	dsi_dcs_write_seq(dsi, 0xff, 0xaa, 0x55, 0xa5, 0x80);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x61);
+	dsi_dcs_write_seq(dsi, 0xf3, 0x80);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x00);
+	dsi_dcs_write_seq(dsi, 0xc0, 0x46);
+	dsi_dcs_write_seq(dsi, 0xbe, 0x0e, 0x0b);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x05);
+	dsi_dcs_write_seq(dsi, 0xbe, 0x88);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x08);
+	dsi_dcs_write_seq(dsi, 0xb5, 0x32);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x0b);
+	dsi_dcs_write_seq(dsi, 0xb5, 0x33, 0x23, 0x2b);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x01);
+	dsi_dcs_write_seq(dsi, 0xd1, 0x07, 0x00, 0x04);
+	dsi_dcs_write_seq(dsi, 0x3b, 0x00, 0x10, 0x00, 0x30);
+	dsi_dcs_write_seq(dsi, 0xd9, 0xc8);
+	dsi_dcs_write_seq(dsi, 0x90, 0x01);
+	dsi_dcs_write_seq(dsi, 0x91,
+			  0xab, 0x28, 0x00, 0x0c, 0xc2, 0x00, 0x03, 0x1c, 0x01,
+			  0x7e, 0x00, 0x0f, 0x08, 0xbb, 0x04, 0x3d, 0x10, 0xf0);
+	dsi_dcs_write_seq(dsi, 0x03, 0x01);
+	dsi_dcs_write_seq(dsi, 0x51, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x20);
+
+	ret = mipi_dsi_dcs_set_tear_on(dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set tear on: %d\n", ret);
+		return ret;
+	}
+
+	ret = mipi_dsi_dcs_set_column_address(dsi, 0x0000, 0x0437);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set column address: %d\n", ret);
+		return ret;
+	}
+
+	ret = mipi_dsi_dcs_set_page_address(dsi, 0x0000, 0x095f);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set page address: %d\n", ret);
+		return ret;
+	}
+
+	dsi_dcs_write_seq(dsi, 0x2f, 0x02);
+	dsi_dcs_write_seq(dsi, 0xff, 0xaa, 0x55, 0xa5, 0x81);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x0f);
+	dsi_dcs_write_seq(dsi, 0xfd, 0x01, 0x5a);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x04);
+	dsi_dcs_write_seq(dsi, 0xfd, 0x5f);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x1a);
+	dsi_dcs_write_seq(dsi, 0xfd, 0x5f);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_MEMORY_START);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x00);
+	dsi_dcs_write_seq(dsi, 0xca, 0x12, 0x00, 0x92, 0x02);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x02);
+	dsi_dcs_write_seq(dsi, 0xec, 0x80, 0x10);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x01);
+	dsi_dcs_write_seq(dsi, 0xcd, 0x05, 0x31);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x10);
+	dsi_dcs_write_seq(dsi, 0xd8, 0x0c);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x05);
+	dsi_dcs_write_seq(dsi, 0xb3, 0x86, 0x80);
+	dsi_dcs_write_seq(dsi, 0xb5, 0x85, 0x81);
+	dsi_dcs_write_seq(dsi, 0xb7, 0x85, 0x00, 0x00, 0x81);
+	dsi_dcs_write_seq(dsi, 0xb8, 0x05, 0x00, 0x00, 0x81);
+	dsi_dcs_write_seq(dsi, 0xec, 0x0d, 0x11);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x02);
+	dsi_dcs_write_seq(dsi, 0xec,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x00);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x08);
+	dsi_dcs_write_seq(dsi, 0xb5, 0x32);
+	dsi_dcs_write_seq(dsi, 0x6f, 0x0b);
+	dsi_dcs_write_seq(dsi, 0xb5, 0x33, 0x23, 0x2b);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x01);
+	dsi_dcs_write_seq(dsi, 0xce, 0x00);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x55, 0xaa, 0x52, 0x08, 0x01);
+	dsi_dcs_write_seq(dsi, 0xc3, 0x94, 0x01, 0x97, 0xd0, 0x22, 0x02, 0x00);
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(50);
+
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display on: %d\n", ret);
+		return ret;
+	}
+	usleep_range(16000, 17000);
+
+	return 0;
+}
+
+static int k9d_36_02_0a_dsc_off(struct k9d_36_02_0a_dsc *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display off: %d\n", ret);
+		return ret;
+	}
+	msleep(20);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(80);
+
+	return 0;
+}
+
+static int k9d_36_02_0a_dsc_prepare(struct drm_panel *panel)
+{
+	struct k9d_36_02_0a_dsc *ctx = to_k9d_36_02_0a_dsc(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (ctx->prepared)
+		return 0;
+
+	k9d_36_02_0a_dsc_reset(ctx);
+
+	ret = k9d_36_02_0a_dsc_on(ctx);
+	if (ret < 0) {
+		dev_err(dev, "Failed to initialize panel: %d\n", ret);
+		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+		return ret;
+	}
+
+	ctx->prepared = true;
+	return 0;
+}
+
+static int k9d_36_02_0a_dsc_unprepare(struct drm_panel *panel)
+{
+	struct k9d_36_02_0a_dsc *ctx = to_k9d_36_02_0a_dsc(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (!ctx->prepared)
+		return 0;
+
+	ret = k9d_36_02_0a_dsc_off(ctx);
+	if (ret < 0)
+		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+
+	ctx->prepared = false;
+	return 0;
+}
+
+static const struct drm_display_mode k9d_36_02_0a_dsc_mode = {
+	.clock = (1080 + 16 + 8 + 8) * (2400 + 1212 + 4 + 8) * 60 / 1000,
+	.hdisplay = 1080,
+	.hsync_start = 1080 + 16,
+	.hsync_end = 1080 + 16 + 8,
+	.htotal = 1080 + 16 + 8 + 8,
+	.vdisplay = 2400,
+	.vsync_start = 2400 + 1212,
+	.vsync_end = 2400 + 1212 + 4,
+	.vtotal = 2400 + 1212 + 4 + 8,
+	.width_mm = 683,
+	.height_mm = 1517,
+};
+
+static int k9d_36_02_0a_dsc_get_modes(struct drm_panel *panel,
+				      struct drm_connector *connector)
+{
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, &k9d_36_02_0a_dsc_mode);
+	if (!mode)
+		return -ENOMEM;
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+static const struct drm_panel_funcs k9d_36_02_0a_dsc_panel_funcs = {
+	.prepare = k9d_36_02_0a_dsc_prepare,
+	.unprepare = k9d_36_02_0a_dsc_unprepare,
+	.get_modes = k9d_36_02_0a_dsc_get_modes,
+};
+
+static int k9d_36_02_0a_dsc_bl_update_status(struct backlight_device *bl)
+{
+	struct mipi_dsi_device *dsi = bl_get_data(bl);
+	u16 brightness = backlight_get_brightness(bl);
+	int ret;
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_set_display_brightness(dsi, brightness);
+	if (ret < 0)
+		return ret;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	return 0;
+}
+
+// TODO: Check if /sys/class/backlight/.../actual_brightness actually returns
+// correct values. If not, remove this function.
+static int k9d_36_02_0a_dsc_bl_get_brightness(struct backlight_device *bl)
+{
+	struct mipi_dsi_device *dsi = bl_get_data(bl);
+	u16 brightness;
+	int ret;
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_get_display_brightness(dsi, &brightness);
+	if (ret < 0)
+		return ret;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	return brightness;
+}
+
+static const struct backlight_ops k9d_36_02_0a_dsc_bl_ops = {
+	.update_status = k9d_36_02_0a_dsc_bl_update_status,
+	.get_brightness = k9d_36_02_0a_dsc_bl_get_brightness,
+};
+
+static struct backlight_device *
+k9d_36_02_0a_dsc_create_backlight(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	const struct backlight_properties props = {
+		.type = BACKLIGHT_RAW,
+		.brightness = 4095,
+		.max_brightness = 4095,
+	};
+
+	return devm_backlight_device_register(dev, dev_name(dev), dev, dsi,
+					      &k9d_36_02_0a_dsc_bl_ops, &props);
+}
+
+static int k9d_36_02_0a_dsc_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct k9d_36_02_0a_dsc *ctx;
+	int ret;
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(ctx->reset_gpio))
+		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+				     "Failed to get reset-gpios\n");
+
+	ctx->dsi = dsi;
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO_BURST |
+			  MIPI_DSI_CLOCK_NON_CONTINUOUS | MIPI_DSI_MODE_LPM;
+
+	drm_panel_init(&ctx->panel, dev, &k9d_36_02_0a_dsc_panel_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
+	ctx->panel.backlight = k9d_36_02_0a_dsc_create_backlight(dsi);
+	if (IS_ERR(ctx->panel.backlight))
+		return dev_err_probe(dev, PTR_ERR(ctx->panel.backlight),
+				     "Failed to create backlight\n");
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to attach to DSI host: %d\n", ret);
+		drm_panel_remove(&ctx->panel);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void k9d_36_02_0a_dsc_remove(struct mipi_dsi_device *dsi)
+{
+	struct k9d_36_02_0a_dsc *ctx = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		dev_err(&dsi->dev, "Failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&ctx->panel);
+
+}
+
+static const struct of_device_id k9d_36_02_0a_dsc_of_match[] = {
+	{ .compatible = "mdss,k9d-36-02-0a-dsc" }, // FIXME
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, k9d_36_02_0a_dsc_of_match);
+
+static struct mipi_dsi_driver k9d_36_02_0a_dsc_driver = {
+	.probe = k9d_36_02_0a_dsc_probe,
+	.remove = k9d_36_02_0a_dsc_remove,
+	.driver = {
+		.name = "panel-k9d-36-02-0a-dsc",
+		.of_match_table = k9d_36_02_0a_dsc_of_match,
+	},
+};
+module_mipi_dsi_driver(k9d_36_02_0a_dsc_driver);
+
+MODULE_AUTHOR("linux-mdss-dsi-panel-driver-generator <fix@me>"); // FIXME
+MODULE_DESCRIPTION("DRM driver for xiaomi 36 02 0a cmd mode dsc dsi panel");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/gpu/drm/panel/panel-nt36675-tianma.c b/drivers/gpu/drm/panel/panel-nt36675-tianma.c
new file mode 100644
index 00000000000000..68bde6a87557a2
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-nt36675-tianma.c
@@ -0,0 +1,485 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// Copyright (c) 2022 FIXME
+// Generated with linux-mdss-dsi-panel-driver-generator from vendor device tree:
+//   Copyright (c) 2013, The Linux Foundation. All rights reserved. (FIXME)
+
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/regulator/consumer.h>
+
+#include <video/mipi_display.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#define NUM_GAMMA_LEVELS        256
+
+#define MAX_BRIGHTNESS          (NUM_GAMMA_LEVELS - 1)
+#define NORMAL_BRIGHTNESS	0x00b8
+
+struct nt36675_tianma {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+	struct gpio_desc *reset_gpio;
+	struct backlight_device *backlight;
+	bool prepared;
+	bool enabled;
+};
+
+struct nt36675_match_data {
+        int parse_cmdline;
+};
+
+static inline struct nt36675_tianma *to_nt36675_tianma(struct drm_panel *panel)
+{
+	return container_of(panel, struct nt36675_tianma, panel);
+}
+
+static int nt36675_tianma_init_vregs(struct device *dev)
+{
+        int ret;
+        const char * vregs[] = { "vdda", "vddio" };
+
+        ret = devm_regulator_bulk_get_enable(dev, ARRAY_SIZE(vregs),
+                                      vregs);
+        if (ret < 0) {
+		dev_err(dev, "Fail to enable regulators %s and %s", vregs[0], vregs[1]);
+                return ret;
+	}
+
+        return 0;
+}
+
+#define dsi_dcs_write_seq(dsi, seq...) do {				\
+		static const u8 d[] = { seq };				\
+		int ret;						\
+		ret = mipi_dsi_dcs_write_buffer(dsi, d, ARRAY_SIZE(d));	\
+		if (ret < 0) {						\
+			dev_err(dev, "%s %d", __func__, __LINE__);	\
+			return ret;					\
+		}							\
+	} while (0)
+
+static void nt36675_tianma_reset(struct nt36675_tianma *ctx)
+{
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	usleep_range(10000, 11000);
+        gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+        usleep_range(10000, 11000);
+}
+
+static int nt36675_tianma_on(struct nt36675_tianma *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	dsi_dcs_write_seq(dsi, 0xff, 0x10);
+	dsi_dcs_write_seq(dsi, 0xfb, 0x01);
+	dsi_dcs_write_seq(dsi, 0x3b, 0x03, 0x1e, 0x0a, 0x04, 0x04);
+	dsi_dcs_write_seq(dsi, 0xb0, 0x00);
+
+	ret = mipi_dsi_dcs_set_tear_on(dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set tear on: %d\n", ret);
+		return ret;
+	}
+
+	ret = mipi_dsi_dcs_set_display_brightness(dsi, 0x00b8);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display brightness: %d\n", ret);
+		return ret;
+	}
+
+	dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x24);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_POWER_SAVE, 0x00);
+	dsi_dcs_write_seq(dsi, 0xff, 0x27);
+	dsi_dcs_write_seq(dsi, 0xfb, 0x01);
+	dsi_dcs_write_seq(dsi, 0x07, 0x01);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_SET_VSYNC_TIMING, 0x25);
+	dsi_dcs_write_seq(dsi, 0xff, 0x23);
+	dsi_dcs_write_seq(dsi, 0xfb, 0x01);
+	dsi_dcs_write_seq(dsi, 0x0a, 0x20);
+	dsi_dcs_write_seq(dsi, 0x0b, 0x20);
+	dsi_dcs_write_seq(dsi, 0x0c, 0x20);
+	dsi_dcs_write_seq(dsi, 0x0d, 0x2a);
+	dsi_dcs_write_seq(dsi, 0x10, 0x50);
+	dsi_dcs_write_seq(dsi, 0x11, 0x01);
+	dsi_dcs_write_seq(dsi, 0x12, 0x95);
+	dsi_dcs_write_seq(dsi, 0x15, 0x68);
+	dsi_dcs_write_seq(dsi, 0x16, 0x0b);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_SET_PARTIAL_ROWS, 0xff);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_SET_PARTIAL_COLUMNS, 0xff);
+	dsi_dcs_write_seq(dsi, 0x32, 0xff);
+	dsi_dcs_write_seq(dsi, 0x33, 0xfe);
+	dsi_dcs_write_seq(dsi, 0x34, 0xfd);
+	dsi_dcs_write_seq(dsi, 0x35, 0xfa);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_SET_ADDRESS_MODE, 0xf6);
+	dsi_dcs_write_seq(dsi, 0x37, 0xf2);
+	dsi_dcs_write_seq(dsi, 0x38, 0xf0);
+	dsi_dcs_write_seq(dsi, 0x39, 0xee);
+
+	ret = mipi_dsi_dcs_set_pixel_format(dsi, 0xec);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set pixel format: %d\n", ret);
+		return ret;
+	}
+
+	dsi_dcs_write_seq(dsi, 0x3b, 0xea);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_SET_3D_CONTROL, 0xe8);
+	dsi_dcs_write_seq(dsi, 0x3f, 0xe7);
+	dsi_dcs_write_seq(dsi, MIPI_DCS_SET_VSYNC_TIMING, 0xe6);
+	dsi_dcs_write_seq(dsi, 0x41, 0xe5);
+	dsi_dcs_write_seq(dsi, 0xa0, 0x11);
+	dsi_dcs_write_seq(dsi, 0xff, 0x10);
+	dsi_dcs_write_seq(dsi, 0xfb, 0x01);
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(80);
+
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display on: %d\n", ret);
+		return ret;
+	}
+	usleep_range(5000, 6000);
+
+	dsi_dcs_write_seq(dsi, 0xff, 0x27);
+	dsi_dcs_write_seq(dsi, 0xfb, 0x01);
+	dsi_dcs_write_seq(dsi, 0x3f, 0x01);
+	dsi_dcs_write_seq(dsi, 0x43, 0x08);
+	dsi_dcs_write_seq(dsi, 0xff, 0x10);
+
+	return 0;
+}
+
+static int nt36675_tianma_off(struct nt36675_tianma *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	dsi_dcs_write_seq(dsi, 0xff, 0x10);
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display off: %d\n", ret);
+		return ret;
+	}
+	usleep_range(10000, 11000);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(140);
+
+	return 0;
+}
+
+static int nt36675_tianma_prepare(struct drm_panel *panel)
+{
+	struct nt36675_tianma *ctx = to_nt36675_tianma(panel);
+	struct device *dev = &ctx->dsi->dev;
+
+	if (ctx->prepared)
+		return 0;
+
+	dev_dbg(dev, "%s %d", __func__, __LINE__);
+
+	nt36675_tianma_reset(ctx);
+
+	ctx->prepared = true;
+	return 0;
+}
+
+static int nt36675_tianma_enable(struct drm_panel *panel)
+{
+        struct nt36675_tianma *ctx = to_nt36675_tianma(panel);
+        struct device *dev = &ctx->dsi->dev;
+        int ret;
+
+	dev_dbg(dev, "%s %d", __func__, __LINE__);
+
+        if (ctx->enabled)
+                return 0;
+
+        ret = nt36675_tianma_on(ctx);
+        if (ret < 0) {
+                dev_err(dev, "Failed to initialize panel: %d\n", ret);
+                gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+		usleep_range(10000, 11000);
+                return ret;
+        }
+
+        if (ctx->backlight) {
+                ret = backlight_enable(ctx->backlight);
+                if (ret < 0)
+                        dev_err(dev, "backlight enable failed %d\n", ret);
+        }
+
+        ctx->enabled = true;
+
+        return 0;
+}
+
+static int nt36675_tianma_unprepare(struct drm_panel *panel)
+{
+	struct nt36675_tianma *ctx = to_nt36675_tianma(panel);
+	struct device *dev = &ctx->dsi->dev;
+
+	dev_dbg(dev, "%s %d", __func__, __LINE__);
+
+	if (!ctx->prepared)
+		return 0;
+
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	usleep_range(10000, 11000);
+
+	ctx->prepared = false;
+	return 0;
+}
+
+static int nt36675_tianma_disable(struct drm_panel *panel)
+{
+        struct nt36675_tianma *ctx = to_nt36675_tianma(panel);
+        struct device *dev = &ctx->dsi->dev;
+        int ret = 0;
+
+	dev_dbg(dev, "%s %d", __func__, __LINE__);
+
+        if (!ctx->enabled)
+                return 0;
+
+        if (ctx->backlight) {
+                ret = backlight_disable(ctx->backlight);
+                if (ret < 0)
+                        dev_err(dev, "backlight disable failed %d\n", ret);
+        }
+
+        ret = nt36675_tianma_off(ctx);
+        if (ret < 0)
+                dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+
+
+        ctx->enabled = false;
+        return 0;
+}
+
+
+static const struct drm_display_mode nt36675_tianma_mode = {
+	.clock = (1080 + 20 + 4 + 22) * (2400 + 10 + 2 + 30) * 60 / 1000,
+	.hdisplay = 1080,
+	.hsync_start = 1080 + 20,
+	.hsync_end = 1080 + 20 + 4,
+	.htotal = 1080 + 20 + 4 + 22,
+	.vdisplay = 2400,
+	.vsync_start = 2400 + 10,
+	.vsync_end = 2400 + 10 + 2,
+	.vtotal = 2400 + 10 + 2 + 30,
+	.width_mm = 69,
+	.height_mm = 154,
+};
+
+static int nt36675_tianma_get_modes(struct drm_panel *panel,
+				    struct drm_connector *connector)
+{
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, &nt36675_tianma_mode);
+	if (!mode)
+		return -ENOMEM;
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+static int nt36675_set_brightness(struct backlight_device *bdev)
+{
+	struct nt36675_tianma *ctx = bl_get_data(bdev);
+	struct device *dev = &ctx->dsi->dev;
+        struct mipi_dsi_device *dsi = ctx->dsi;
+        int brightness = bdev->props.brightness;
+	int ret;
+
+	dev_dbg(dev, "%s %d %d", __func__, __LINE__, brightness);
+
+        dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+        ret = mipi_dsi_dcs_set_display_brightness(dsi, brightness);
+        if (ret < 0) {
+                dev_err(dev, "Failed to set display brightness: %d\n", ret);
+                return ret;
+        }
+
+        return 0;
+}
+
+static const struct backlight_ops nt36675_backlight_ops = {
+        .update_status  = nt36675_set_brightness,
+};
+
+static int nt36675_backlight_register(struct nt36675_tianma *ctx, u32 max_brightness)
+{
+        struct backlight_properties props = {
+                .type           = BACKLIGHT_RAW,
+                .brightness     = NORMAL_BRIGHTNESS,
+                .max_brightness = max_brightness,
+        };
+        struct device *dev = &ctx->dsi->dev;
+        int ret = 0;
+
+        ctx->backlight = devm_backlight_device_register(dev, "panel", dev, ctx,
+                                                     &nt36675_backlight_ops,
+                                                     &props);
+        if (IS_ERR(ctx->backlight)) {
+                ret = PTR_ERR(ctx->backlight);
+                dev_err(dev, "error registering backlight device (%d)\n", ret);
+        }
+
+        return ret;
+}
+
+static const struct drm_panel_funcs nt36675_tianma_panel_funcs = {
+	.prepare = nt36675_tianma_prepare,
+	.unprepare = nt36675_tianma_unprepare,
+	.enable = nt36675_tianma_enable,
+	.disable = nt36675_tianma_disable,
+	.get_modes = nt36675_tianma_get_modes,
+};
+
+static int nt36675_tianma_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct nt36675_tianma *ctx;
+	static const struct nt36675_match_data *match_data;
+	u32 max_brightness;
+	int ret;
+
+	match_data = of_device_get_match_data(dev);
+	if (match_data && match_data->parse_cmdline) {
+		char *path = "/chosen";
+		struct device_node *dt_node;
+		const char *bootargs;
+
+		dt_node = of_find_node_by_path(path);
+		if (!dt_node) {
+			dev_err(dev, "Failed to find device-tree node: %s\n", path);
+			return -ENODEV;
+		}
+
+		if (!of_property_read_string(dt_node, "bootargs", &bootargs))
+			if (!strstr(bootargs, "tianma") && !strstr(bootargs, "nt36"))
+				return -ENODEV;
+
+		dev_info(dev, "Found novatek/tianma panel as specified in chosen/bootargs.");
+	}
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+        ret = nt36675_tianma_init_vregs(dev);
+        if (ret)
+                return dev_err_probe(dev, ret, "Regulator init failure.\n");
+
+	/* since reset = 0 is the after reset state, inorder to reduce flickering */
+	/* let reset to be 0 after bootloader is the best choice */
+	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->reset_gpio))
+		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+				     "Failed to get reset-gpios\n");
+
+	ctx->dsi = dsi;
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS;
+
+	drm_panel_init(&ctx->panel, dev, &nt36675_tianma_panel_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_of_backlight(&ctx->panel);
+	if (ret)
+		return dev_err_probe(dev, ret, "Failed to get backlight\n");
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to attach to DSI host: %d\n", ret);
+		drm_panel_remove(&ctx->panel);
+		return ret;
+	}
+
+        ret = device_property_read_u32(dev, "max-brightness", &max_brightness);
+        if (ret)
+                max_brightness = MAX_BRIGHTNESS;
+        if (max_brightness > MAX_BRIGHTNESS) {
+                dev_err(dev, "illegal max brightness specified\n");
+                max_brightness = MAX_BRIGHTNESS;
+        }
+
+	nt36675_backlight_register(ctx, max_brightness);
+
+	dev_dbg(dev, "nt36675_tianma_probe ok!\n");
+	return 0;
+}
+
+static void nt36675_tianma_remove(struct mipi_dsi_device *dsi)
+{
+	struct nt36675_tianma *ctx = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		dev_err(&dsi->dev, "Failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&ctx->panel);
+
+}
+
+static const struct nt36675_match_data cmdline_data = {
+	.parse_cmdline = true,
+};
+
+static const struct of_device_id nt36675_tianma_of_match[] = {
+	{ .compatible = "mdss,nt36675-tianma", .data = &cmdline_data },
+	{ .compatible = "novatek,nt36675-tianma" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, nt36675_tianma_of_match);
+
+static struct mipi_dsi_driver nt36675_tianma_driver = {
+	.probe = nt36675_tianma_probe,
+	.remove = nt36675_tianma_remove,
+	.driver = {
+		.name = "panel-nt36675-tianma",
+		.of_match_table = nt36675_tianma_of_match,
+	},
+};
+module_mipi_dsi_driver(nt36675_tianma_driver);
+
+MODULE_AUTHOR("linux-mdss-dsi-panel-driver-generator <fix@me>"); // FIXME
+MODULE_DESCRIPTION("DRM driver for nt36675 video mode dsi tianma panel");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/gpu/drm/panel/panel-s6d6ft0-tianma-fhd.c b/drivers/gpu/drm/panel/panel-s6d6ft0-tianma-fhd.c
new file mode 100644
index 00000000000000..9073f07a3d0b8a
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-s6d6ft0-tianma-fhd.c
@@ -0,0 +1,275 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// Copyright (c) 2022 FIXME
+// Generated with linux-mdss-dsi-panel-driver-generator from vendor device tree:
+//   Copyright (c) 2013, The Linux Foundation. All rights reserved. (FIXME)
+
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+struct s6d6ft0_tianma_fhd {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+	struct gpio_desc *reset_gpio;
+	bool prepared;
+};
+
+static inline
+struct s6d6ft0_tianma_fhd *to_s6d6ft0_tianma_fhd(struct drm_panel *panel)
+{
+	return container_of(panel, struct s6d6ft0_tianma_fhd, panel);
+}
+
+#define dsi_dcs_write_seq(dsi, seq...) do {				\
+		static const u8 d[] = { seq };				\
+		int ret;						\
+		ret = mipi_dsi_dcs_write_buffer(dsi, d, ARRAY_SIZE(d));	\
+		if (ret < 0)						\
+			return ret;					\
+	} while (0)
+
+static void s6d6ft0_tianma_fhd_reset(struct s6d6ft0_tianma_fhd *ctx)
+{
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	usleep_range(10000, 11000);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	usleep_range(10000, 11000);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	msleep(40);
+}
+
+static int s6d6ft0_tianma_fhd_on(struct s6d6ft0_tianma_fhd *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi_dcs_write_seq(dsi, 0x9f, 0xa5, 0xa5);
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(120);
+
+	dsi_dcs_write_seq(dsi, 0x55);
+	dsi_dcs_write_seq(dsi, 0xf0, 0x5a, 0x5a);
+	dsi_dcs_write_seq(dsi, 0x73, 0x94);
+	dsi_dcs_write_seq(dsi, 0xea,
+			  0x00, 0x73, 0x11, 0x1b, 0x23, 0x2a, 0x40, 0x59, 0x70,
+			  0x6e, 0xa1, 0x86, 0x92, 0x9f, 0xab, 0xb8, 0x4d, 0x59,
+			  0x65, 0x7f, 0x00, 0x73, 0x11, 0x1b, 0x23, 0x2a, 0x40,
+			  0x59, 0x70, 0x6e, 0xa1, 0x86, 0x92, 0x9f, 0xab, 0xb8,
+			  0x4d, 0x59, 0x65, 0x7f, 0x00, 0x73, 0x11, 0x1b, 0x23,
+			  0x2a, 0x40, 0x59, 0x70, 0x6e, 0xa1, 0x86, 0x92, 0x9f,
+			  0xab, 0xb8, 0x4d, 0x59, 0x65, 0x7f);
+	dsi_dcs_write_seq(dsi, 0xeb,
+			  0x00, 0x73, 0x11, 0x1b, 0x23, 0x2a, 0x40, 0x59, 0x70,
+			  0x6e, 0xa1, 0x86, 0x92, 0x9f, 0xab, 0xb8, 0x4d, 0x59,
+			  0x65, 0x7f, 0x00, 0x73, 0x11, 0x1b, 0x23, 0x2a, 0x40,
+			  0x59, 0x70, 0x6e, 0xa1, 0x86, 0x92, 0x9f, 0xab, 0xb8,
+			  0x4d, 0x59, 0x65, 0x7f, 0x00, 0x73, 0x11, 0x1b, 0x23,
+			  0x2a, 0x40, 0x59, 0x70, 0x6e, 0xa1, 0x86, 0x92, 0x9f,
+			  0xab, 0xb8, 0x4d, 0x59, 0x65, 0x7f);
+	dsi_dcs_write_seq(dsi, 0xf0, 0xa5, 0xa5);
+
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display on: %d\n", ret);
+		return ret;
+	}
+
+	dsi_dcs_write_seq(dsi, 0x9f, 0x5a, 0x5a);
+
+	return 0;
+}
+
+static int s6d6ft0_tianma_fhd_off(struct s6d6ft0_tianma_fhd *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi_dcs_write_seq(dsi, 0x9f, 0xa5, 0xa5);
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display off: %d\n", ret);
+		return ret;
+	}
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(80);
+
+	dsi_dcs_write_seq(dsi, 0xf0, 0x5a, 0x5a);
+	dsi_dcs_write_seq(dsi, 0x73, 0x90);
+	dsi_dcs_write_seq(dsi, 0xf0, 0xa5, 0xa5);
+	dsi_dcs_write_seq(dsi, 0x24);
+	dsi_dcs_write_seq(dsi, 0x9f, 0x5a, 0x5a);
+
+	return 0;
+}
+
+static int s6d6ft0_tianma_fhd_prepare(struct drm_panel *panel)
+{
+	struct s6d6ft0_tianma_fhd *ctx = to_s6d6ft0_tianma_fhd(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (ctx->prepared)
+		return 0;
+
+	s6d6ft0_tianma_fhd_reset(ctx);
+
+	ret = s6d6ft0_tianma_fhd_on(ctx);
+	if (ret < 0) {
+		dev_err(dev, "Failed to initialize panel: %d\n", ret);
+		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+		return ret;
+	}
+
+	ctx->prepared = true;
+	return 0;
+}
+
+static int s6d6ft0_tianma_fhd_unprepare(struct drm_panel *panel)
+{
+	struct s6d6ft0_tianma_fhd *ctx = to_s6d6ft0_tianma_fhd(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (!ctx->prepared)
+		return 0;
+
+	ret = s6d6ft0_tianma_fhd_off(ctx);
+	if (ret < 0)
+		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+
+	ctx->prepared = false;
+	return 0;
+}
+
+static const struct drm_display_mode s6d6ft0_tianma_fhd_mode = {
+	.clock = (1080 + 229 + 4 + 4) * (2160 + 8 + 2 + 6) * 60 / 1000,
+	.hdisplay = 1080,
+	.hsync_start = 1080 + 229,
+	.hsync_end = 1080 + 229 + 4,
+	.htotal = 1080 + 229 + 4 + 4,
+	.vdisplay = 2160,
+	.vsync_start = 2160 + 8,
+	.vsync_end = 2160 + 8 + 2,
+	.vtotal = 2160 + 8 + 2 + 6,
+	.width_mm = 0,
+	.height_mm = 0,
+};
+
+static int s6d6ft0_tianma_fhd_get_modes(struct drm_panel *panel,
+					struct drm_connector *connector)
+{
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, &s6d6ft0_tianma_fhd_mode);
+	if (!mode)
+		return -ENOMEM;
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+static const struct drm_panel_funcs s6d6ft0_tianma_fhd_panel_funcs = {
+	.prepare = s6d6ft0_tianma_fhd_prepare,
+	.unprepare = s6d6ft0_tianma_fhd_unprepare,
+	.get_modes = s6d6ft0_tianma_fhd_get_modes,
+};
+
+static int s6d6ft0_tianma_fhd_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct s6d6ft0_tianma_fhd *ctx;
+	int ret;
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(ctx->reset_gpio))
+		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+				     "Failed to get reset-gpios\n");
+
+	ctx->dsi = dsi;
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST;
+
+	drm_panel_init(&ctx->panel, dev, &s6d6ft0_tianma_fhd_panel_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_of_backlight(&ctx->panel);
+	if (ret)
+		return dev_err_probe(dev, ret, "Failed to get backlight\n");
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to attach to DSI host: %d\n", ret);
+		drm_panel_remove(&ctx->panel);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void s6d6ft0_tianma_fhd_remove(struct mipi_dsi_device *dsi)
+{
+	struct s6d6ft0_tianma_fhd *ctx = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		dev_err(&dsi->dev, "Failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&ctx->panel);
+
+}
+
+static const struct of_device_id s6d6ft0_tianma_fhd_of_match[] = {
+	{ .compatible = "mdss,s6d6ft0-tianma-fhd" }, // FIXME
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, s6d6ft0_tianma_fhd_of_match);
+
+static struct mipi_dsi_driver s6d6ft0_tianma_fhd_driver = {
+	.probe = s6d6ft0_tianma_fhd_probe,
+	//.remove = s6d6ft0_tianma_fhd_remove,
+	.driver = {
+		.name = "panel-s6d6ft0-tianma-fhd",
+		.of_match_table = s6d6ft0_tianma_fhd_of_match,
+	},
+};
+module_mipi_dsi_driver(s6d6ft0_tianma_fhd_driver);
+
+MODULE_AUTHOR("linux-mdss-dsi-panel-driver-generator <fix@me>"); // FIXME
+MODULE_DESCRIPTION("DRM driver for s6d6ff0 tianma fhd video mode dsi panel");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 1ac26fc2e3eb94..9534686b27314a 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -12,6 +12,8 @@ menuconfig INPUT_TOUCHSCREEN
 
 if INPUT_TOUCHSCREEN
 
+source "drivers/input/touchscreen/ft8756_spi/Kconfig"
+
 config TOUCHSCREEN_88PM860X
 	tristate "Marvell 88PM860x touchscreen"
 	depends on MFD_88PM860X
@@ -663,6 +665,37 @@ config TOUCHSCREEN_IMAGIS
 	  To compile this driver as a module, choose M here: the
 	  module will be called imagis.
 
+config TOUCHSCREEN_NT36XXX
+	tristate
+
+config TOUCHSCREEN_NT36XXX_I2C
+	tristate "Novatek NT36XXX In-Cell I2C touchscreen controller"
+	depends on I2C
+	select REGMAP_I2C
+	select TOUCHSCREEN_NT36XXX
+	help
+	  Say Y here if you have a Novatek NT36xxx series In-Cell
+	  touchscreen connected to your system over I2C.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called nt36xxx.
+
+config TOUCHSCREEN_NT36XXX_SPI
+	tristate "Novatek NT36XXX In-Cell SPI touchscreen controller"
+	depends on SPI_MASTER
+	select REGMAP
+	select TOUCHSCREEN_NT36XXX
+        help
+          Say Y here if you have a Novatek NT36xxx series In-Cell
+          touchscreen connected to your system over SPI.
+
+          If unsure, say N.
+
+          To compile this driver as a module, choose M here: the
+          module will be called nt36xxx_ts_spi.
+
 config TOUCHSCREEN_IMX6UL_TSC
 	tristate "Freescale i.MX6UL touchscreen controller"
 	depends on ((OF && GPIOLIB) || COMPILE_TEST) && HAS_IOMEM
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 82bc837ca01e2e..854916b0923fa8 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -67,6 +67,9 @@ obj-$(CONFIG_TOUCHSCREEN_MSG2638)	+= msg2638.o
 obj-$(CONFIG_TOUCHSCREEN_MTOUCH)	+= mtouch.o
 obj-$(CONFIG_TOUCHSCREEN_MK712)		+= mk712.o
 obj-$(CONFIG_TOUCHSCREEN_NOVATEK_NVT_TS)	+= novatek-nvt-ts.o
+obj-$(CONFIG_TOUCHSCREEN_NT36XXX_SPI)	+= nt36xxx_spi.o
+obj-$(CONFIG_TOUCHSCREEN_NT36XXX_I2C)	+= nt36xxx_i2c.o
+obj-$(CONFIG_TOUCHSCREEN_NT36XXX)	+= nt36xxx_core.o
 obj-$(CONFIG_TOUCHSCREEN_HP600)		+= hp680_ts_input.o
 obj-$(CONFIG_TOUCHSCREEN_HP7XX)		+= jornada720_ts.o
 obj-$(CONFIG_TOUCHSCREEN_IPAQ_MICRO)	+= ipaq-micro-ts.o
@@ -117,3 +120,5 @@ obj-$(CONFIG_TOUCHSCREEN_IQS5XX)	+= iqs5xx.o
 obj-$(CONFIG_TOUCHSCREEN_IQS7211)	+= iqs7211.o
 obj-$(CONFIG_TOUCHSCREEN_ZINITIX)	+= zinitix.o
 obj-$(CONFIG_TOUCHSCREEN_HIMAX_HX83112B)	+= himax_hx83112b.o
+
+obj-$(CONFIG_TOUCHSCREEN_FTS_SPI)               += ft8756_spi/
diff --git a/drivers/input/touchscreen/ft8756_spi/Kconfig b/drivers/input/touchscreen/ft8756_spi/Kconfig
new file mode 100644
index 00000000000000..a477bf976c67e3
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/Kconfig
@@ -0,0 +1,28 @@
+#
+# Focaltech Touchscreen driver configuration
+#
+
+config TOUCHSCREEN_FTS_SPI
+    tristate "Focaltech Touchscreen"
+    default n
+    help
+      Say Y here if you have Focaltech touch panel.
+
+      If unsure, say N.
+
+      To compile this driver as a module, choose M here: the
+      module will be called focaltech_touch.
+
+config TOUCHSCREEN_FTS_DIRECTORY
+    string "Focaltech ts directory name"
+    default "focaltech_touch"
+    depends on TOUCHSCREEN_FTS
+
+
+config TOUCHSCREEN_SUPPORT_NEW_GAME_MODE
+    tristate "Touch Support New Game Mode"
+    default n
+    help
+      Say Y here if the device support new game mode
+
+      If not support, say N.
diff --git a/drivers/input/touchscreen/ft8756_spi/Makefile b/drivers/input/touchscreen/ft8756_spi/Makefile
new file mode 100644
index 00000000000000..b1051eac2f4cec
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/Makefile
@@ -0,0 +1,32 @@
+ifneq ($(KERNELRELEASE),)
+    obj-$(CONFIG_TOUCHSCREEN_FTS_SPI) += focaltech_touch.o
+    focaltech_touch-y := focaltech_core.o \
+                         focaltech_ex_fun.o \
+                         focaltech_ex_mode.o \
+                         focaltech_gesture.o \
+                         focaltech_esdcheck.o \
+                         focaltech_spi.o \
+                         focaltech_point_report_check.o \
+                         focaltech_flash.o \
+                         focaltech_flash/focaltech_upgrade_ft3658u.o \
+                         focaltech_test/focaltech_test.o \
+                         focaltech_test/focaltech_test_ini.o \
+                         focaltech_test/supported_ic/focaltech_test_ft3658u.o
+
+else
+    KDIR = $(OUT)/obj/KERNEL_OBJ
+    CROSS_COMPILE = $(ANDROID_TOOLCHAIN)/aarch64-linux-android-
+    CLANG = $(ANDROID_BUILD_TOP)/prebuilts/clang/host/linux-x86/clang-r370808
+    REAL_CC = $(CLANG)/bin/clang
+    AR = $(CLANG)/bin/llvm-ar
+    LLVM_NM = $(CLANG)/bin/llvm-nm
+    LD = $(CLANG)/bin/ld.lld
+
+.PHONY: clean
+
+default:
+	$(MAKE) ARCH=arm64 CROSS_COMPILE=$(CROSS_COMPILE) REAL_CC=$(REAL_CC) CLANG_TRIPLE=aarch64-linux-gnu- AR=$(AR) LLVM_NM=$(LLVM_NM) LD=$(LD) -C $(KDIR) M=$(PWD) modules
+clean:
+	@rm -rf *.order *.symvers* .tmp_versions
+	@find -name "*.o*" -o -name "*.mod*" -o -name "*.ko*" | xargs rm -f
+endif
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_common.h b/drivers/input/touchscreen/ft8756_spi/focaltech_common.h
new file mode 100644
index 00000000000000..181e426f4bdbe1
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_common.h
@@ -0,0 +1,186 @@
+/*
+ *
+ * FocalTech fts TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, Focaltech Ltd. All rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+/*****************************************************************************
+*
+* File Name: focaltech_common.h
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-16
+*
+* Abstract:
+*
+* Reference:
+*
+*****************************************************************************/
+
+#ifndef __LINUX_FOCALTECH_COMMON_H__
+#define __LINUX_FOCALTECH_COMMON_H__
+
+#include "focaltech_config.h"
+
+/*****************************************************************************
+* Macro definitions using #define
+*****************************************************************************/
+#define FTS_DRIVER_VERSION                  "Focaltech V3.2 20200422"
+
+#define BYTE_OFF_0(x)           (u8)((x) & 0xFF)
+#define BYTE_OFF_8(x)           (u8)(((x) >> 8) & 0xFF)
+#define BYTE_OFF_16(x)          (u8)(((x) >> 16) & 0xFF)
+#define BYTE_OFF_24(x)          (u8)(((x) >> 24) & 0xFF)
+#define FLAGBIT(x)              (0x00000001 << (x))
+#define FLAGBITS(x, y)          ((0xFFFFFFFF >> (32 - (y) - 1)) & (0xFFFFFFFF << (x)))
+
+#define FLAG_ICSERIALS_LEN      8
+#define FLAG_HID_BIT            10
+#define FLAG_IDC_BIT            11
+
+#define IC_SERIALS              (FTS_CHIP_TYPE & FLAGBITS(0, FLAG_ICSERIALS_LEN-1))
+#define IC_TO_SERIALS(x)        ((x) & FLAGBITS(0, FLAG_ICSERIALS_LEN-1))
+#define FTS_CHIP_IDC            ((FTS_CHIP_TYPE & FLAGBIT(FLAG_IDC_BIT)) == FLAGBIT(FLAG_IDC_BIT))
+#define FTS_HID_SUPPORTTED      ((FTS_CHIP_TYPE & FLAGBIT(FLAG_HID_BIT)) == FLAGBIT(FLAG_HID_BIT))
+
+//#define FTS_CHIP_TYPE_MAPPING {{0x88, 0x56, 0x52, 0x00, 0x00, 0x00, 0x00, 0x56, 0xB2}}
+#define FTS_CHIP_TYPE_MAPPING {{0x15, 0x87, 0x56, 0x87, 0x56, 0xF7, 0xA6, 0x00, 0x00}}
+
+#define FILE_NAME_LENGTH                    128
+#define ENABLE                              1
+#define DISABLE                             0
+#define VALID                               1
+#define INVALID                             0
+#define FTS_CMD_START1                      0x55
+#define FTS_CMD_START2                      0xAA
+#define FTS_CMD_START_DELAY                 12
+#define FTS_CMD_READ_ID                     0x90
+#define FTS_CMD_READ_ID_LEN                 4
+#define FTS_CMD_READ_ID_LEN_INCELL          1
+#define FTS_CMD_READ_FW_CONF                0xA8
+/*register address*/
+#define FTS_REG_INT_CNT                     0x8F
+#define FTS_REG_FLOW_WORK_CNT               0x91
+#define FTS_REG_WORKMODE                    0x00
+#define FTS_REG_WORKMODE_FACTORY_VALUE      0x40
+#define FTS_REG_WORKMODE_WORK_VALUE         0x00
+#define FTS_REG_ESDCHECK_DISABLE            0x8D
+#define FTS_REG_CHIP_ID                     0xA3
+#define FTS_REG_CHIP_ID2                    0x9F
+#define FTS_REG_POWER_MODE                  0xA5
+#define FTS_REG_POWER_MODE_SLEEP            0x03
+#define FTS_REG_FW_VER                      0xA6
+#define FTS_REG_VENDOR_ID                   0xA8
+#define FTS_REG_LCD_BUSY_NUM                0xAB
+#define FTS_REG_FACE_DEC_MODE_EN            0xB0
+#define FTS_REG_FACTORY_MODE_DETACH_FLAG    0xB4
+#define FTS_REG_FACE_DEC_MODE_STATUS        0x01
+#define FTS_REG_IDE_PARA_VER_ID             0xB5
+#define FTS_REG_IDE_PARA_STATUS             0xB6
+#define FTS_REG_GLOVE_MODE_EN               0xC0
+#define FTS_REG_COVER_MODE_EN               0xC1
+#define FTS_REG_CHARGER_MODE_EN             0x8B
+#define FTS_REG_GESTURE_EN                  0xD0
+#define FTS_REG_GESTURE_OUTPUT_ADDRESS      0xD3
+#define FTS_REG_MODULE_ID                   0xE3
+#define FTS_REG_LIC_VER                     0xE4
+#define FTS_REG_ESD_SATURATE                0xED
+
+#define FTS_REG_SENSIVITY                   0x9d
+#define FTS_REG_THDIFF                      0x85
+#define FTS_REG_MONITOR_MODE                0x86
+#define FTS_REG_TIME_ENTER_MONITOR          0x87
+#define FTS_REG_ORIENTATION                 0x8c
+#define FTS_REG_EDGE_FILTER_LEVEL           0x9c
+#define FTS_REG_GAMEMODE                    0xc1
+
+#define FTS_PALM_EN                         0x9a
+#define FTS_PALM_DATA                       0x01
+#define FTS_PALM_ON                         0x05
+#define FTS_PALM_OFF                        0x00
+
+#define FTS_GESTURE_CTRL                    0xD1
+#define FTS_GESTURE_DOUBLETAP               0x04
+#define FTS_GESTURE_AOD                     0x07
+
+#define FTS_SYSFS_ECHO_ON(buf)      (buf[0] == '1')
+#define FTS_SYSFS_ECHO_OFF(buf)     (buf[0] == '0')
+
+#define kfree_safe(pbuf) do {\
+	if (pbuf) {\
+		kfree(pbuf);\
+		pbuf = NULL;\
+	} \
+} while (0)
+
+/*****************************************************************************
+*  Alternative mode (When something goes wrong, the modules may be able to solve the problem.)
+*****************************************************************************/
+/*
+ * point report check
+ * default: disable
+ */
+#define FTS_POINT_REPORT_CHECK_EN               0
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+struct ft_chip_t {
+	u64 type;
+	u8 chip_idh;
+	u8 chip_idl;
+	u8 rom_idh;
+	u8 rom_idl;
+	u8 pb_idh;
+	u8 pb_idl;
+	u8 bl_idh;
+	u8 bl_idl;
+};
+
+struct ts_ic_info {
+	bool is_incell;
+	bool hid_supported;
+	struct ft_chip_t ids;
+};
+
+/*****************************************************************************
+* DEBUG function define here
+*****************************************************************************/
+#if FTS_DEBUG_EN
+#define FTS_DEBUG(fmt, args...) do { \
+	pr_info("[FTS_TS]%s:"fmt"\n", __func__, ##args); \
+} while (0)
+
+#define FTS_FUNC_ENTER() do { \
+	pr_info("[FTS_TS]%s: Enter\n", __func__); \
+} while (0)
+
+#define FTS_FUNC_EXIT() do { \
+	pr_info("[FTS_TS]%s: Exit(%d)\n", __func__, __LINE__); \
+} while (0)
+#else /* #if FTS_DEBUG_EN*/
+#define FTS_DEBUG(fmt, args...)
+#define FTS_FUNC_ENTER()
+#define FTS_FUNC_EXIT()
+#endif
+
+#define FTS_INFO(fmt, args...) do { \
+	pr_info(KERN_INFO "[FTS_TS/I]%s:"fmt"\n", __func__, ##args); \
+} while (0)
+
+#define FTS_ERROR(fmt, args...) do { \
+	pr_info(KERN_ERR "[FTS_TS/E]%s:"fmt"\n", __func__, ##args); \
+} while (0)
+#endif /* __LINUX_FOCALTECH_COMMON_H__ */
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_config.h b/drivers/input/touchscreen/ft8756_spi/focaltech_config.h
new file mode 100644
index 00000000000000..f2bcc96c3a7c82
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_config.h
@@ -0,0 +1,283 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, FocalTech Systems, Ltd., all rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+/************************************************************************
+*
+* File Name: focaltech_config.h
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-08
+*
+* Abstract: global configurations
+*
+* Version: v1.0
+*
+************************************************************************/
+#ifndef _LINUX_FOCLATECH_CONFIG_H_
+#define _LINUX_FOCLATECH_CONFIG_H_
+
+/**************************************************/
+/****** G: A, I: B, S: C, U: D  ******************/
+/****** chip type defines, do not modify *********/
+#define _FT8716             0x87160805
+#define _FT8736             0x87360806
+#define _FT8006M            0x80060807
+#define _FT8607             0x86070809
+#define _FT8006U            0x8006D80B
+#define _FT8006S            0x8006A80B
+#define _FT8613             0x8613080C
+#define _FT8719             0x8719080D
+#define _FT8739             0x8739080E
+#define _FT8615             0x8615080F
+#define _FT8201             0x82010810
+#define _FT8006P            0x86220811
+#define _FT7251             0x72510812
+#define _FT7252             0x72520813
+#define _FT8613S            0x8613C814
+#define _FT8756             0x87560815
+#define _FT8302             0x83020816
+#define _FT8009             0x80090817
+#define _FT8656             0x86560818
+#define _FT8006S_AA         0x86320819
+#define _FT7250             0x7250081A
+#define _FT7120             0x7120081B
+#define _FT8720             0x8720081C
+#define _FT8016             0x8016081D
+
+
+#define _FT5416             0x54160402
+#define _FT5426             0x54260402
+#define _FT5435             0x54350402
+#define _FT5436             0x54360402
+#define _FT5526             0x55260402
+#define _FT5526I            0x5526B402
+#define _FT5446             0x54460402
+#define _FT5346             0x53460402
+#define _FT5446I            0x5446B402
+#define _FT5346I            0x5346B402
+#define _FT7661             0x76610402
+#define _FT7511             0x75110402
+#define _FT7421             0x74210402
+#define _FT7681             0x76810402
+#define _FT3C47U            0x3C47D402
+#define _FT3417             0x34170402
+#define _FT3517             0x35170402
+#define _FT3327             0x33270402
+#define _FT3427             0x34270402
+#define _FT7311             0x73110402
+#define _FT5526_V00         0x5526C402
+
+#define _FT5626             0x56260401
+#define _FT5726             0x57260401
+#define _FT5826B            0x5826B401
+#define _FT5826S            0x5826C401
+#define _FT7811             0x78110401
+#define _FT3D47             0x3D470401
+#define _FT3617             0x36170401
+#define _FT3717             0x37170401
+#define _FT3817B            0x3817B401
+#define _FT3517U            0x3517D401
+
+#define _FT6236U            0x6236D003
+#define _FT6336G            0x6336A003
+#define _FT6336U            0x6336D003
+#define _FT6436U            0x6436D003
+#define _FT6436T            0x6436E003
+
+#define _FT3267             0x32670004
+#define _FT3367             0x33670004
+
+#define _FT3427_003         0x3427D482
+#define _FT3427G_003        0x3427A482
+#define _FT5446_003         0x5446D482
+#define _FT5446_Q03         0x5446C482
+#define _FT5446_P03         0x5446A481
+#define _FT5426_003         0x5426D482
+#define _FT5526_003         0x5526D482
+
+#define _FT3518             0x35180481
+#define _FT3518U            0x3518D481
+#define _FT3558             0x35580481
+#define _FT3528             0x35280481
+#define _FT5536             0x55360481
+#define _FT5536L            0x5536E481
+#define _FT3418             0x34180481
+
+#define _FT5446U            0x5446D083
+#define _FT5456U            0x5456D083
+#define _FT3417U            0x3417D083
+#define _FT5426U            0x5426D083
+#define _FT3428             0x34280083
+#define _FT3437U            0x3437D083
+
+#define _FT7302             0x73020084
+#define _FT7202             0x72020084
+#define _FT3308             0x33080084
+#define _FT6446             0x64460084
+
+#define _FT6346U            0x6346D085
+#define _FT6346G            0x6346A085
+#define _FT3067             0x30670085
+#define _FT3068             0x30680085
+#define _FT3168             0x31680085
+#define _FT3268             0x32680085
+#define _FT6146             0x61460085
+
+#define _FT5726_003         0x5726D486
+#define _FT5726_V03         0x5726C486
+
+#define _FT3618             0x36180487
+#define _FT5646             0x56460487
+#define _FT3A58             0x3A580487
+#define _FT3B58             0x3B580487
+#define _FT3D58             0x3D580487
+#define _FT5936             0x59360487
+#define _FT5A36             0x5A360487
+#define _FT5B36             0x5B360487
+#define _FT5D36             0x5D360487
+#define _FT5946             0x59460487
+#define _FT5A46             0x5A460487
+#define _FT5B46             0x5B460487
+#define _FT5D46             0x5D460487
+
+#define _FT3658U            0x3658D488
+
+/*************************************************/
+
+/*
+ * choose your ic chip type of focaltech
+ */
+//#define FTS_CHIP_TYPE   _FT3658U
+#define FTS_CHIP_TYPE   _FT8756
+
+/******************* Enables *********************/
+/*********** 1 to enable, 0 to disable ***********/
+
+/*
+ * show debug log info
+ * enable it for debug, disable it for release
+ */
+#define FTS_DEBUG_EN                            0
+
+/*
+ * Linux MultiTouch Protocol
+ * 1: Protocol B(default), 0: Protocol A
+ */
+#define FTS_MT_PROTOCOL_B_EN                    1
+
+/*
+ * Report Pressure in multitouch
+ * 1:enable(default),0:disable
+*/
+#define FTS_REPORT_PRESSURE_EN                  0
+
+/*
+ * Gesture function enable
+ * default: disable
+ */
+#define FTS_GESTURE_EN                          0
+
+/*
+ * ESD check & protection
+ * default: disable
+ */
+#define FTS_ESDCHECK_EN                         0
+
+/*
+ * Production test enable
+ * 1: enable, 0:disable(default)
+ */
+#define FTS_TEST_EN                             0
+
+/*
+ * Pinctrl enable
+ * default: disable
+ */
+#define FTS_PINCTRL_EN                          0
+
+/*
+ * Customer power enable
+ * enable it when customer need control TP power
+ * default: disable
+ */
+#define FTS_POWER_SOURCE_CUST_EN                0
+
+
+/****************************************************/
+
+/********************** Upgrade ****************************/
+/*
+ * auto upgrade
+ */
+#define FTS_AUTO_UPGRADE_EN                     0
+
+/*
+ * auto upgrade for lcd cfg
+ */
+#define FTS_AUTO_LIC_UPGRADE_EN                 0
+
+/*
+ * Numbers of modules support
+ */
+#define FTS_GET_MODULE_NUM                      0
+
+/*
+ * module_id: mean vendor_id generally, also maybe gpio or lcm_id...
+ * If means vendor_id, the FTS_MODULE_ID = PANEL_ID << 8 + VENDOR_ID
+ * FTS_GET_MODULE_NUM == 0/1, no check module id, you may ignore them
+ * FTS_GET_MODULE_NUM >= 2, compatible with FTS_MODULE2_ID
+ * FTS_GET_MODULE_NUM >= 3, compatible with FTS_MODULE3_ID
+ */
+#define FTS_MODULE_ID                          0x0000
+#define FTS_MODULE2_ID                         0x0000
+#define FTS_MODULE3_ID                         0x0000
+
+/*
+ * Need set the following when get firmware via firmware_request()
+ * For example: if module'vendor is tianma,
+ * #define FTS_MODULE_NAME                        "tianma"
+ * then file_name will be "focaltech_ts_fw_tianma"
+ * You should rename fw to "focaltech_ts_fw_tianma", and push it into
+ * etc/firmware or by customers
+ */
+#define FTS_MODULE_NAME                        "huaxing"
+#define FTS_MODULE2_NAME                       ""
+#define FTS_MODULE3_NAME                       ""
+
+/*
+ * FW.i file for auto upgrade, you must replace it with your own
+ * define your own fw_file, the sample one to be replaced is invalid
+ * NOTE: if FTS_GET_MODULE_NUM > 1, it's the fw corresponding with FTS_VENDOR_ID
+ */
+#define FTS_UPGRADE_FW_FILE                      "include/firmware/fw_huaxing_v0e.i"
+
+/*
+ * if FTS_GET_MODULE_NUM >= 2, fw corrsponding with FTS_VENDOR_ID2
+ * define your own fw_file, the sample one is invalid
+ */
+#define FTS_UPGRADE_FW2_FILE                     "include/firmware/fw_sample.i"
+
+/*
+ * if FTS_GET_MODULE_NUM >= 3, fw corrsponding with FTS_VENDOR_ID3
+ * define your own fw_file, the sample one is invalid
+ */
+#define FTS_UPGRADE_FW3_FILE                     "include/firmware/fw_sample.i"
+
+/*********************************************************/
+
+#endif /* _LINUX_FOCLATECH_CONFIG_H_ */
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_core.c b/drivers/input/touchscreen/ft8756_spi/focaltech_core.c
new file mode 100644
index 00000000000000..28bda9add6f38f
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_core.c
@@ -0,0 +1,2370 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, FocalTech Systems, Ltd., all rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+/*****************************************************************************
+*
+* File Name: focaltech_core.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-08
+*
+* Abstract: entrance for focaltech ts driver
+*
+* Version: V1.0
+*
+*****************************************************************************/
+
+/*****************************************************************************
+* Included header files
+*****************************************************************************/
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/of_irq.h>
+
+#undef CONFIG_DRM
+#if defined(CONFIG_DRM)
+#include <drm/drm_notifier_mi.h>
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+#include <linux/earlysuspend.h>
+#define FTS_SUSPEND_LEVEL 1     /* Early-suspend level */
+#endif
+#include "focaltech_core.h"
+
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define FTS_DRIVER_NAME                     "fts_ts"
+#define INTERVAL_READ_REG                   200  /* unit:ms */
+#define TIMEOUT_READ_REG                    1000 /* unit:ms */
+#if FTS_POWER_SOURCE_CUST_EN
+#define FTS_VTG_MIN_UV                      3200000
+#define FTS_VTG_MAX_UV                      3200000
+#define FTS_VTG_MAX_UA                      250000
+#define FTS_I2C_VTG_MIN_UV                  1800000
+#define FTS_I2C_VTG_MAX_UV                  1800000
+#endif
+
+#define SUPER_RESOLUTION_FACOTR             10
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+struct fts_ts_data *fts_data;
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+static int fts_ts_suspend(struct device *dev);
+static int fts_ts_resume(struct device *dev);
+
+#define LPM_EVENT_INPUT 0x1
+extern void lpm_disable_for_dev(bool on, char event_dev);
+__weak void lpm_disable_for_dev(bool on, char event_dev)
+{
+}
+
+extern void touch_irq_boost(void);
+__weak void touch_irq_boost(void)
+{
+}
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+static void fts_read_palm_data(u8 reg_value);
+static int fts_palm_sensor_cmd(int value);
+static void fts_palm_mode_recovery(struct fts_ts_data *ts_data);
+static void fts_game_mode_recovery(struct fts_ts_data *ts_data);
+
+#define PANEL_ORIENTATION_DEGREE_0 	0	/* normal portrait orientation */
+#define PANEL_ORIENTATION_DEGREE_90	1	/* anticlockwise 90 degrees */
+#define PANEL_ORIENTATION_DEGREE_180	2	/* anticlockwise 180 degrees */
+#define PANEL_ORIENTATION_DEGREE_270	3	/* anticlockwise 270 degrees */
+
+#define ORIENTATION_0_OR_180	0	/* anticlockwise 0 or 180 degrees */
+#define NORMAL_ORIENTATION_90	1	/* anticlockwise 90 degrees in normal */
+#define NORMAL_ORIENTATION_270	2	/* anticlockwise 270 degrees in normal */
+#define GAME_ORIENTATION_90	3	/* anticlockwise 90 degrees in game */
+#define GAME_ORIENTATION_270	4	/* anticlockwise 270 degrees in game */
+
+
+#endif
+
+/*****************************************************************************
+*  Name: fts_wait_tp_to_valid
+*  Brief: Read chip id until TP FW become valid(Timeout: TIMEOUT_READ_REG),
+*         need call when reset/power on/resume...
+*  Input:
+*  Output:
+*  Return: return 0 if tp valid, otherwise return error code
+*****************************************************************************/
+int fts_wait_tp_to_valid(void)
+{
+	int ret = 0;
+	int cnt = 0;
+	u8 idh = 0;
+	u8 idl = 0;
+	u8 chip_idh = fts_data->ic_info.ids.chip_idh;
+	u8 chip_idl = fts_data->ic_info.ids.chip_idl;
+
+	do {
+		ret = fts_read_reg(FTS_REG_CHIP_ID, &idh);
+		ret = fts_read_reg(FTS_REG_CHIP_ID2, &idl);
+		if ((ret < 0) || (idh != chip_idh) || (idl != chip_idl)) {
+			FTS_DEBUG("TP Not Ready,ReadData:0x%02x%02x", idh, idl);
+		} else if ((idh == chip_idh) && (idl == chip_idl)) {
+			FTS_INFO("TP Ready,Device ID:0x%02x%02x", idh, idl);
+			return 0;
+		}
+		cnt++;
+		msleep(INTERVAL_READ_REG);
+	} while ((cnt * INTERVAL_READ_REG) < TIMEOUT_READ_REG);
+
+	return -EIO;
+}
+
+/*****************************************************************************
+*  Name: fts_tp_state_recovery
+*  Brief: Need execute this function when reset
+*  Input:
+*  Output:
+*  Return:
+*****************************************************************************/
+void fts_tp_state_recovery(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+	/* wait tp stable */
+	fts_wait_tp_to_valid();
+	/* recover TP charger state 0x8B */
+	/* recover TP glove state 0xC0 */
+	/* recover TP cover state 0xC1 */
+	fts_ex_mode_recovery(ts_data);
+	/* recover TP gesture state 0xD0 */
+	fts_gesture_recovery(ts_data);
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+	/* recover TP game mode state */
+	fts_game_mode_recovery(ts_data);
+	/* recover TP palm mode state */
+	fts_palm_mode_recovery(ts_data);
+#endif
+	/* set touch in charge mode or not */
+	ts_data->charger_mode = false;
+	queue_work(ts_data->ts_workqueue, &ts_data->power_supply_work);
+	FTS_FUNC_EXIT();
+}
+
+int fts_reset_proc(int hdelayms)
+{
+	FTS_DEBUG("tp reset");
+	gpio_direction_output(fts_data->pdata->reset_gpio, 0);
+	msleep(1);
+	gpio_direction_output(fts_data->pdata->reset_gpio, 1);
+	if (hdelayms) {
+		msleep(hdelayms);
+	}
+
+	return 0;
+}
+
+void fts_irq_disable(void)
+{
+	unsigned long irqflags;
+
+	FTS_FUNC_ENTER();
+	spin_lock_irqsave(&fts_data->irq_lock, irqflags);
+
+	if (!fts_data->irq_disabled) {
+		disable_irq_nosync(fts_data->irq);
+		fts_data->irq_disabled = true;
+	}
+
+	spin_unlock_irqrestore(&fts_data->irq_lock, irqflags);
+	FTS_FUNC_EXIT();
+}
+
+void fts_irq_enable(void)
+{
+	unsigned long irqflags = 0;
+
+	FTS_FUNC_ENTER();
+	spin_lock_irqsave(&fts_data->irq_lock, irqflags);
+
+	if (fts_data->irq_disabled) {
+		enable_irq(fts_data->irq);
+		fts_data->irq_disabled = false;
+	}
+
+	spin_unlock_irqrestore(&fts_data->irq_lock, irqflags);
+	FTS_FUNC_EXIT();
+}
+
+void fts_hid2std(void)
+{
+	int ret = 0;
+	u8 buf[3] = {0xEB, 0xAA, 0x09};
+
+	if (fts_data->bus_type != BUS_TYPE_I2C)
+		return;
+
+	ret = fts_write(buf, 3);
+	if (ret < 0) {
+		FTS_ERROR("hid2std cmd write fail");
+	} else {
+		msleep(10);
+		buf[0] = buf[1] = buf[2] = 0;
+		ret = fts_read(NULL, 0, buf, 3);
+		if (ret < 0) {
+			FTS_ERROR("hid2std cmd read fail");
+		} else if ((0xEB == buf[0]) && (0xAA == buf[1]) && (0x08 == buf[2])) {
+			FTS_DEBUG("hidi2c change to stdi2c successful");
+		} else {
+			FTS_DEBUG("hidi2c change to stdi2c not support or fail");
+		}
+	}
+}
+
+static int fts_get_chip_types(
+	struct fts_ts_data *ts_data,
+	u8 id_h, u8 id_l, bool fw_valid)
+{
+	int i = 0;
+	struct ft_chip_t ctype[] = FTS_CHIP_TYPE_MAPPING;
+	u32 ctype_entries = sizeof(ctype) / sizeof(struct ft_chip_t);
+
+	if ((0x0 == id_h) || (0x0 == id_l)) {
+		FTS_ERROR("id_h/id_l is 0");
+		return -EINVAL;
+	}
+
+	FTS_DEBUG("verify id:0x%02x%02x", id_h, id_l);
+	for (i = 0; i < ctype_entries; i++) {
+		if (VALID == fw_valid) {
+			if ((id_h == ctype[i].chip_idh) && (id_l == ctype[i].chip_idl))
+				break;
+		} else {
+			if (((id_h == ctype[i].rom_idh) && (id_l == ctype[i].rom_idl))
+				|| ((id_h == ctype[i].pb_idh) && (id_l == ctype[i].pb_idl))
+				|| ((id_h == ctype[i].bl_idh) && (id_l == ctype[i].bl_idl)))
+				break;
+		}
+	}
+
+	if (i >= ctype_entries) {
+		return -ENODATA;
+	}
+
+	ts_data->ic_info.ids = ctype[i];
+	return 0;
+}
+
+static int fts_read_bootid(struct fts_ts_data *ts_data, u8 *id)
+{
+	int ret = 0;
+	u8 chip_id[2] = { 0 };
+	u8 id_cmd[4] = { 0 };
+	u32 id_cmd_len = 0;
+
+	id_cmd[0] = 0xF1;
+	id_cmd[1] = 0x50;
+	ret = fts_write(id_cmd, 2);
+	if (ret < 0) {
+		FTS_ERROR("write 0x50 to F1 fail");
+		return ret;
+	}
+
+	id_cmd[0] = FTS_CMD_START1;
+	id_cmd[1] = FTS_CMD_START2;
+	ret = fts_write(id_cmd, 2);
+	if (ret < 0) {
+		FTS_ERROR("start cmd write fail");
+		return ret;
+	}
+
+	msleep(FTS_CMD_START_DELAY);
+	id_cmd[0] = FTS_CMD_READ_ID;
+	id_cmd[1] = id_cmd[2] = id_cmd[3] = 0x00;
+	if (ts_data->ic_info.is_incell)
+		id_cmd_len = FTS_CMD_READ_ID_LEN_INCELL;
+	else
+		id_cmd_len = FTS_CMD_READ_ID_LEN;
+	ret = fts_read(id_cmd, id_cmd_len, chip_id, 2);
+	if ((ret < 0) || (0x0 == chip_id[0]) || (0x0 == chip_id[1])) {
+		FTS_ERROR("read boot id fail,read:0x%02x%02x", chip_id[0], chip_id[1]);
+		return -EIO;
+	}
+
+	id[0] = chip_id[0];
+	id[1] = chip_id[1];
+	return 0;
+}
+
+/*****************************************************************************
+* Name: fts_get_ic_information
+* Brief: read chip id to get ic information, after run the function, driver w-
+*        ill know which IC is it.
+*        If cant get the ic information, maybe not focaltech's touch IC, need
+*        unregister the driver
+* Input:
+* Output:
+* Return: return 0 if get correct ic information, otherwise return error code
+*****************************************************************************/
+static int fts_get_ic_information(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	int cnt = 0;
+	u8 chip_id[2] = { 0 };
+
+	ts_data->ic_info.is_incell = FTS_CHIP_IDC;
+	ts_data->ic_info.hid_supported = FTS_HID_SUPPORTTED;
+
+
+	do {
+		ret = fts_read_reg(FTS_REG_CHIP_ID, &chip_id[0]);
+		ret = fts_read_reg(FTS_REG_CHIP_ID2, &chip_id[1]);
+		if ((ret < 0) || (0x0 == chip_id[0]) || (0x0 == chip_id[1])) {
+			FTS_DEBUG("chip id read invalid, read:0x%02x%02x",
+					  chip_id[0], chip_id[1]);
+		} else {
+			ret = fts_get_chip_types(ts_data, chip_id[0], chip_id[1], VALID);
+			if (!ret)
+				break;
+			else
+				FTS_DEBUG("TP not ready, read:0x%02x%02x",
+						  chip_id[0], chip_id[1]);
+		}
+
+		cnt++;
+		msleep(INTERVAL_READ_REG);
+	} while ((cnt * INTERVAL_READ_REG) < TIMEOUT_READ_REG);
+
+	if ((cnt * INTERVAL_READ_REG) >= TIMEOUT_READ_REG) {
+		FTS_INFO("fw is invalid, need read boot id");
+		if (ts_data->ic_info.hid_supported) {
+			fts_hid2std();
+		}
+
+
+		ret = fts_read_bootid(ts_data, &chip_id[0]);
+		if (ret <  0) {
+			FTS_ERROR("read boot id fail");
+			return ret;
+		}
+
+		ret = fts_get_chip_types(ts_data, chip_id[0], chip_id[1], INVALID);
+		if (ret < 0) {
+			FTS_ERROR("can't get ic informaton");
+			return ret;
+		}
+	}
+
+	FTS_INFO("get ic information, chip id = 0x%02x%02x",
+			 ts_data->ic_info.ids.chip_idh, ts_data->ic_info.ids.chip_idl);
+
+	return 0;
+}
+
+/*****************************************************************************
+*  Reprot related
+*****************************************************************************/
+static void fts_show_touch_buffer(u8 *data, int datalen)
+{
+	int i = 0;
+	int count = 0;
+	char *tmpbuf = NULL;
+
+	tmpbuf = kzalloc(1024, GFP_KERNEL);
+	if (!tmpbuf) {
+		FTS_ERROR("tmpbuf zalloc fail");
+		return;
+	}
+
+	for (i = 0; i < datalen; i++) {
+		count += snprintf(tmpbuf + count, 1024 - count, "%02X,", data[i]);
+		if (count >= 1024)
+			break;
+	}
+	FTS_DEBUG("point buffer:%s", tmpbuf);
+
+	if (tmpbuf) {
+		kfree(tmpbuf);
+		tmpbuf = NULL;
+	}
+}
+
+void fts_release_all_finger(void)
+{
+	struct input_dev *input_dev = fts_data->input_dev;
+#if FTS_MT_PROTOCOL_B_EN
+	u32 finger_count = 0;
+	u32 max_touches = fts_data->pdata->max_touch_number;
+#endif
+
+	FTS_FUNC_ENTER();
+	mutex_lock(&fts_data->report_mutex);
+#if FTS_MT_PROTOCOL_B_EN
+	for (finger_count = 0; finger_count < max_touches; finger_count++) {
+		input_mt_slot(input_dev, finger_count);
+		input_mt_report_slot_state(input_dev, MT_TOOL_FINGER, false);
+	}
+#else
+	input_mt_sync(input_dev);
+#endif
+	input_report_key(input_dev, BTN_TOUCH, 0);
+	input_sync(input_dev);
+	lpm_disable_for_dev(false, LPM_EVENT_INPUT);
+
+	fts_data->touchs = 0;
+	fts_data->key_state = 0;
+	mutex_unlock(&fts_data->report_mutex);
+	FTS_FUNC_EXIT();
+}
+
+/*****************************************************************************
+* Name: fts_input_report_key
+* Brief: process key events,need report key-event if key enable.
+*        if point's coordinate is in (x_dim-50,y_dim-50) ~ (x_dim+50,y_dim+50),
+*        need report it to key event.
+*        x_dim: parse from dts, means key x_coordinate, dimension:+-50
+*        y_dim: parse from dts, means key y_coordinate, dimension:+-50
+* Input:
+* Output:
+* Return: return 0 if it's key event, otherwise return error code
+*****************************************************************************/
+static int fts_input_report_key(struct fts_ts_data *data, int index)
+{
+	int i = 0;
+	int x = data->events[index].x;
+	int y = data->events[index].y;
+	int *x_dim = &data->pdata->key_x_coords[0];
+	int *y_dim = &data->pdata->key_y_coords[0];
+
+	if (!data->pdata->have_key) {
+		return -EINVAL;
+	}
+	for (i = 0; i < data->pdata->key_number; i++) {
+		if ((x >= x_dim[i] - FTS_KEY_DIM) && (x <= x_dim[i] + FTS_KEY_DIM) &&
+			(y >= y_dim[i] - FTS_KEY_DIM) && (y <= y_dim[i] + FTS_KEY_DIM)) {
+			if (EVENT_DOWN(data->events[index].flag)
+				&& !(data->key_state & (1 << i))) {
+				input_report_key(data->input_dev, data->pdata->keys[i], 1);
+				data->key_state |= (1 << i);
+				FTS_DEBUG("Key%d(%d,%d) DOWN!", i, x, y);
+			} else if (EVENT_UP(data->events[index].flag)
+					   && (data->key_state & (1 << i))) {
+				input_report_key(data->input_dev, data->pdata->keys[i], 0);
+				data->key_state &= ~(1 << i);
+				FTS_DEBUG("Key%d(%d,%d) Up!", i, x, y);
+			}
+			return 0;
+		}
+	}
+	return -EINVAL;
+}
+
+#if FTS_MT_PROTOCOL_B_EN
+static int fts_input_report_b(struct fts_ts_data *data)
+{
+	int i = 0;
+	int uppoint = 0;
+	int touchs = 0;
+	bool va_reported = false;
+	u32 max_touch_num = data->pdata->max_touch_number;
+	struct ts_event *events = data->events;
+
+	for (i = 0; i < data->touch_point; i++) {
+		if (fts_input_report_key(data, i) == 0) {
+			continue;
+		}
+
+		va_reported = true;
+		input_mt_slot(data->input_dev, events[i].id);
+
+		if (EVENT_DOWN(events[i].flag)) {
+			input_mt_report_slot_state(data->input_dev, MT_TOOL_FINGER, true);
+
+#if FTS_REPORT_PRESSURE_EN
+			if (events[i].p <= 0) {
+				events[i].p = 0x3f;
+			}
+			input_report_abs(data->input_dev, ABS_MT_PRESSURE, events[i].p);
+#endif
+			if (events[i].area <= 0) {
+				events[i].area = 0x09;
+			}
+			input_report_abs(data->input_dev, ABS_MT_POSITION_X, events[i].x);
+			input_report_abs(data->input_dev, ABS_MT_POSITION_Y, events[i].y);
+
+			touchs |= BIT(events[i].id);
+			data->touchs |= BIT(events[i].id);
+
+		} else {
+			uppoint++;
+			input_mt_report_slot_state(data->input_dev, MT_TOOL_FINGER, false);
+			data->touchs &= ~BIT(events[i].id);
+		}
+	}
+
+	if (unlikely(data->touchs ^ touchs)) {
+		for (i = 0; i < max_touch_num; i++)  {
+			if (BIT(i) & (data->touchs ^ touchs)) {
+				va_reported = true;
+				input_mt_slot(data->input_dev, i);
+				input_mt_report_slot_state(data->input_dev, MT_TOOL_FINGER, false);
+			}
+		}
+	}
+	data->touchs = touchs;
+
+	if (va_reported) {
+		/* touchs==0, there's no point but key */
+		if (EVENT_NO_DOWN(data) || (!touchs)) {
+			input_report_key(data->input_dev, BTN_TOUCH, 0);
+			lpm_disable_for_dev(false, LPM_EVENT_INPUT);
+		} else {
+			input_report_key(data->input_dev, BTN_TOUCH, 1);
+		}
+	}
+
+	input_sync(data->input_dev);
+	return 0;
+}
+
+#else
+static int fts_input_report_a(struct fts_ts_data *data)
+{
+	int i = 0;
+	int touchs = 0;
+	bool va_reported = false;
+	struct ts_event *events = data->events;
+
+	for (i = 0; i < data->touch_point; i++) {
+		if (fts_input_report_key(data, i) == 0) {
+			continue;
+		}
+
+		va_reported = true;
+		if (EVENT_DOWN(events[i].flag)) {
+			input_report_abs(data->input_dev, ABS_MT_TRACKING_ID, events[i].id);
+#if FTS_REPORT_PRESSURE_EN
+			if (events[i].p <= 0) {
+				events[i].p = 0x3f;
+			}
+			input_report_abs(data->input_dev, ABS_MT_PRESSURE, events[i].p);
+#endif
+			if (events[i].area <= 0) {
+				events[i].area = 0x09;
+			}
+
+			input_report_abs(data->input_dev, ABS_MT_POSITION_X, events[i].x);
+			input_report_abs(data->input_dev, ABS_MT_POSITION_Y, events[i].y);
+
+			input_mt_sync(data->input_dev);
+
+			touchs++;
+		}
+	}
+
+	/* last point down, current no point but key */
+	if (data->touchs && !touchs) {
+		va_reported = true;
+	}
+	data->touchs = touchs;
+
+	if (va_reported) {
+		if (EVENT_NO_DOWN(data)) {
+			input_report_key(data->input_dev, BTN_TOUCH, 0);
+			input_mt_sync(data->input_dev);
+		} else {
+			input_report_key(data->input_dev, BTN_TOUCH, 1);
+		}
+	}
+
+	input_sync(data->input_dev);
+	return 0;
+}
+#endif
+
+static int fts_read_touchdata(struct fts_ts_data *data)
+{
+	int ret = 0;
+	u8 *buf = data->point_buf;
+
+	memset(buf, 0xFF, data->pnt_buf_size);
+	buf[0] = 0x01;
+
+	ret = fts_read(buf, 1, buf + 1, data->pnt_buf_size - 1);
+	if (ret < 0) {
+		FTS_ERROR("touch data(%x) abnormal,ret:%d", buf[1], ret);
+		return -EIO;
+	}
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+	if (data->palm_sensor_switch)
+		fts_read_palm_data(buf[1]);
+#endif
+
+	if (data->gesture_mode) {
+		ret = fts_gesture_readdata(data, buf + FTS_TOUCH_DATA_LEN);
+		if (0 == ret) {
+			FTS_INFO("succuss to get gesture data in irq handler");
+			return 1;
+		}
+	}
+
+	if (data->log_level >= 3) {
+		fts_show_touch_buffer(buf, data->pnt_buf_size);
+	}
+
+	return 0;
+}
+
+static int fts_read_parse_touchdata(struct fts_ts_data *data)
+{
+	int ret = 0;
+	int i = 0;
+	u8 pointid = 0;
+	int base = 0;
+	struct ts_event *events = data->events;
+	int max_touch_num = data->pdata->max_touch_number;
+	u8 *buf = data->point_buf;
+
+	ret = fts_read_touchdata(data);
+	if (ret) {
+		return ret;
+	}
+
+	data->point_num = buf[FTS_TOUCH_POINT_NUM] & 0x0F;
+	data->touch_point = 0;
+
+	if ((data->point_num == 0x0F) && (buf[2] == 0xFF) && (buf[3] == 0xFF)
+		&& (buf[4] == 0xFF) && (buf[5] == 0xFF) && (buf[6] == 0xFF)) {
+		FTS_DEBUG("touch buff is 0xff, need recovery state");
+		fts_release_all_finger();
+		fts_tp_state_recovery(data);
+		return -EIO;
+	}
+
+	if (data->point_num > max_touch_num) {
+		FTS_INFO("invalid point_num(%d)", data->point_num);
+		return -EIO;
+	}
+
+	for (i = 0; i < max_touch_num; i++) {
+		base = FTS_ONE_TCH_LEN * i;
+		pointid = (buf[FTS_TOUCH_ID_POS + base]) >> 4;
+		if (pointid >= FTS_MAX_ID)
+			break;
+		else if (pointid >= max_touch_num) {
+			FTS_ERROR("ID(%d) beyond max_touch_number", pointid);
+			return -EINVAL;
+		}
+
+		data->touch_point++;
+		events[i].x = ((buf[FTS_TOUCH_PRE_POS + base] & 0xF0) >> 4) +
+				(buf[FTS_TOUCH_X_L_POS + base] << 4) +
+				((buf[FTS_TOUCH_X_H_POS + base] & 0x0F) << 12);
+		events[i].y = (buf[FTS_TOUCH_PRE_POS + base] & 0x0F) +
+				(buf[FTS_TOUCH_Y_L_POS + base] << 4) +
+				((buf[FTS_TOUCH_Y_H_POS + base] & 0x0F) << 12);
+
+		events[i].x = events[i].x * 10 / 16;
+		events[i].y = events[i].y * 10 / 16;
+		events[i].flag = buf[FTS_TOUCH_EVENT_POS + base] >> 6;
+		events[i].id = buf[FTS_TOUCH_ID_POS + base] >> 4;
+		events[i].area = buf[FTS_TOUCH_AREA_POS + base] >> 4;
+		// events[i].p =  buf[FTS_TOUCH_PRE_POS + base] & 0x03;
+
+		if (EVENT_DOWN(events[i].flag) && (data->point_num == 0)) {
+			FTS_INFO("abnormal touch data from fw");
+			return -EIO;
+		}
+	}
+
+	if (data->touch_point == 0) {
+		FTS_INFO("no touch point information");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static void fts_irq_read_report(void)
+{
+	int ret = 0;
+	struct fts_ts_data *ts_data = fts_data;
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_set_intr(1);
+#endif
+
+#if FTS_POINT_REPORT_CHECK_EN
+	fts_prc_queue_work(ts_data);
+#endif
+
+	ret = fts_read_parse_touchdata(ts_data);
+	if (ret == 0) {
+		mutex_lock(&ts_data->report_mutex);
+#if FTS_MT_PROTOCOL_B_EN
+		fts_input_report_b(ts_data);
+#else
+		fts_input_report_a(ts_data);
+#endif
+		mutex_unlock(&ts_data->report_mutex);
+	}
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_set_intr(0);
+#endif
+}
+
+static irqreturn_t fts_irq_handler(int irq, void *data)
+{
+#if defined(CONFIG_PM) && FTS_PATCH_COMERR_PM
+	int ret = 0;
+	struct fts_ts_data *ts_data = fts_data;
+
+	touch_irq_boost();
+	if ((ts_data->suspended) && (ts_data->pm_suspend)) {
+		ret = wait_for_completion_timeout(
+				  &ts_data->pm_completion,
+				  msecs_to_jiffies(FTS_TIMEOUT_COMERR_PM));
+		if (!ret) {
+			FTS_ERROR("Bus don't resume from pm(deep),timeout,skip irq");
+			return IRQ_HANDLED;
+		}
+	}
+#else
+	touch_irq_boost();
+#endif
+
+	pm_stay_awake(fts_data->dev);
+	lpm_disable_for_dev(true, LPM_EVENT_INPUT);
+	fts_irq_read_report();
+	pm_relax(fts_data->dev);
+	return IRQ_HANDLED;
+}
+
+static int fts_irq_registration(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	struct fts_ts_platform_data *pdata = ts_data->pdata;
+
+	ts_data->irq = gpio_to_irq(pdata->irq_gpio);
+	pdata->irq_gpio_flags = IRQF_TRIGGER_FALLING | IRQF_ONESHOT;
+	FTS_INFO("irq:%d, flag:%x", ts_data->irq, pdata->irq_gpio_flags);
+	ret = request_threaded_irq(ts_data->irq, NULL, fts_irq_handler,
+							   pdata->irq_gpio_flags,
+							   FTS_DRIVER_NAME, ts_data);
+
+	return ret;
+}
+
+static int fts_input_init(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	int key_num = 0;
+	struct fts_ts_platform_data *pdata = ts_data->pdata;
+	struct input_dev *input_dev;
+
+	FTS_FUNC_ENTER();
+	input_dev = input_allocate_device();
+	if (!input_dev) {
+		FTS_ERROR("Failed to allocate memory for input device");
+		return -ENOMEM;
+	}
+
+	/* Init and register Input device */
+	input_dev->name = FTS_DRIVER_NAME;
+	if (ts_data->bus_type == BUS_TYPE_I2C)
+		input_dev->id.bustype = BUS_I2C;
+	else
+		input_dev->id.bustype = BUS_SPI;
+	input_dev->dev.parent = ts_data->dev;
+
+	input_set_drvdata(input_dev, ts_data);
+
+	__set_bit(EV_SYN, input_dev->evbit);
+	__set_bit(EV_ABS, input_dev->evbit);
+	__set_bit(EV_KEY, input_dev->evbit);
+	__set_bit(BTN_TOUCH, input_dev->keybit);
+	__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+	input_set_capability(input_dev, EV_KEY, KEY_WAKEUP);
+	input_set_capability(input_dev, EV_KEY, KEY_GOTO);
+
+	if (pdata->have_key) {
+		FTS_INFO("set key capabilities");
+		for (key_num = 0; key_num < pdata->key_number; key_num++)
+			input_set_capability(input_dev, EV_KEY, pdata->keys[key_num]);
+	}
+
+#if FTS_MT_PROTOCOL_B_EN
+	input_mt_init_slots(input_dev, pdata->max_touch_number, INPUT_MT_DIRECT);
+#else
+	input_set_abs_params(input_dev, ABS_MT_TRACKING_ID, 0, 0x0F, 0, 0);
+#endif
+	input_set_abs_params(input_dev, ABS_MT_POSITION_X, pdata->x_min, pdata->x_max - 1, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_POSITION_Y, pdata->y_min, pdata->y_max - 1, 0, 0);
+#if FTS_REPORT_PRESSURE_EN
+	input_set_abs_params(input_dev, ABS_MT_PRESSURE, 0, 0xFF, 0, 0);
+#endif
+
+	ret = input_register_device(input_dev);
+	if (ret) {
+		FTS_ERROR("Input device registration failed");
+		input_set_drvdata(input_dev, NULL);
+		input_free_device(input_dev);
+		input_dev = NULL;
+		return ret;
+	}
+
+	ts_data->input_dev = input_dev;
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+static int fts_report_buffer_init(struct fts_ts_data *ts_data)
+{
+	int point_num = 0;
+	int events_num = 0;
+
+	point_num = FTS_MAX_POINTS_SUPPORT;
+	ts_data->pnt_buf_size = FTS_TOUCH_DATA_LEN + FTS_GESTURE_DATA_LEN;
+
+	ts_data->point_buf = (u8 *)kzalloc(ts_data->pnt_buf_size + 1, GFP_KERNEL);
+	if (!ts_data->point_buf) {
+		FTS_ERROR("failed to alloc memory for point buf");
+		return -ENOMEM;
+	}
+
+	events_num = point_num * sizeof(struct ts_event);
+	ts_data->events = (struct ts_event *)kzalloc(events_num, GFP_KERNEL);
+	if (!ts_data->events) {
+		FTS_ERROR("failed to alloc memory for point events");
+		kfree_safe(ts_data->point_buf);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+#if FTS_POWER_SOURCE_CUST_EN
+/*****************************************************************************
+* Power Control
+*****************************************************************************/
+#if FTS_PINCTRL_EN
+static int fts_pinctrl_init(struct fts_ts_data *ts)
+{
+	int ret = 0;
+
+	ts->pinctrl = devm_pinctrl_get(ts->dev);
+	if (IS_ERR_OR_NULL(ts->pinctrl)) {
+		FTS_ERROR("Failed to get pinctrl, please check dts");
+		ret = PTR_ERR(ts->pinctrl);
+		goto err_pinctrl_get;
+	}
+
+	ts->pins_active = pinctrl_lookup_state(ts->pinctrl, "pmx_ts_active");
+	if (IS_ERR_OR_NULL(ts->pins_active)) {
+		FTS_ERROR("Pin state[active] not found");
+		ret = PTR_ERR(ts->pins_active);
+		goto err_pinctrl_lookup;
+	}
+
+	ts->pins_suspend = pinctrl_lookup_state(ts->pinctrl, "pmx_ts_suspend");
+	if (IS_ERR_OR_NULL(ts->pins_suspend)) {
+		FTS_ERROR("Pin state[suspend] not found");
+		ret = PTR_ERR(ts->pins_suspend);
+		goto err_pinctrl_lookup;
+	}
+
+	ts->pins_release = pinctrl_lookup_state(ts->pinctrl, "pmx_ts_release");
+	if (IS_ERR_OR_NULL(ts->pins_release)) {
+		FTS_ERROR("Pin state[release] not found");
+		ret = PTR_ERR(ts->pins_release);
+	}
+
+	return 0;
+err_pinctrl_lookup:
+	if (ts->pinctrl)
+		devm_pinctrl_put(ts->pinctrl);
+
+err_pinctrl_get:
+	ts->pinctrl = NULL;
+	ts->pins_release = NULL;
+	ts->pins_suspend = NULL;
+	ts->pins_active = NULL;
+	return ret;
+}
+
+static int fts_pinctrl_select_normal(struct fts_ts_data *ts)
+{
+	int ret = 0;
+
+	if (ts->pinctrl && ts->pins_active) {
+		ret = pinctrl_select_state(ts->pinctrl, ts->pins_active);
+		if (ret < 0)
+			FTS_ERROR("Set normal pin state error:%d", ret);
+	}
+
+	return ret;
+}
+
+static int fts_pinctrl_select_suspend(struct fts_ts_data *ts)
+{
+	int ret = 0;
+
+	if (ts->pinctrl && ts->pins_suspend) {
+		ret = pinctrl_select_state(ts->pinctrl, ts->pins_suspend);
+		if (ret < 0)
+			FTS_ERROR("Set suspend pin state error:%d", ret);
+	}
+
+	return ret;
+}
+
+static int fts_pinctrl_select_release(struct fts_ts_data *ts)
+{
+	int ret = 0;
+
+	if (ts->pinctrl) {
+		if (IS_ERR_OR_NULL(ts->pins_release)) {
+			devm_pinctrl_put(ts->pinctrl);
+			ts->pinctrl = NULL;
+		} else {
+			ret = pinctrl_select_state(ts->pinctrl, ts->pins_release);
+			if (ret < 0)
+				FTS_ERROR("Set gesture pin state error:%d", ret);
+		}
+	}
+
+	return ret;
+}
+#endif /* FTS_PINCTRL_EN */
+
+static int fts_power_source_ctrl(struct fts_ts_data *ts_data, int enable)
+{
+	int ret = 0;
+
+	if (IS_ERR_OR_NULL(ts_data->vdd)) {
+		FTS_ERROR("vdd is invalid");
+		return -EINVAL;
+	}
+
+	FTS_FUNC_ENTER();
+	if (enable) {
+		if (ts_data->power_disabled) {
+			FTS_DEBUG("regulator enable !");
+			gpio_direction_output(ts_data->pdata->reset_gpio, 0);
+			msleep(1);
+			if (!IS_ERR_OR_NULL(ts_data->vcc_i2c)) {
+				ret = regulator_enable(ts_data->vcc_i2c);
+				if (ret) {
+					FTS_ERROR("enable vcc_i2c regulator failed,ret=%d", ret);
+				}
+			}
+			msleep(1);
+
+			ret = regulator_enable(ts_data->vdd);
+			if (ret)
+				FTS_ERROR("enable vdd regulator failed,ret=%d", ret);
+
+			ts_data->power_disabled = false;
+		}
+	} else {
+		if (!ts_data->power_disabled) {
+			FTS_DEBUG("regulator disable !");
+			gpio_direction_output(ts_data->pdata->reset_gpio, 0);
+			msleep(1);
+			ret = regulator_disable(ts_data->vdd);
+			if (ret)
+				FTS_ERROR("disable vdd regulator failed,ret=%d", ret);
+			if (!IS_ERR_OR_NULL(ts_data->vcc_i2c)) {
+				ret = regulator_disable(ts_data->vcc_i2c);
+				if (ret)
+					FTS_ERROR("disable vcc_i2c regulator failed,ret=%d", ret);
+			}
+			ts_data->power_disabled = true;
+		}
+	}
+
+	FTS_FUNC_EXIT();
+	return ret;
+}
+
+/*****************************************************************************
+* Name: fts_power_source_init
+* Brief: Init regulator power:vdd/vcc_io(if have), generally, no vcc_io
+*        vdd---->vdd-supply in dts, kernel will auto add "-supply" to parse
+*        Must be call after fts_gpio_configure() execute,because this function
+*        will operate reset-gpio which request gpio in fts_gpio_configure()
+* Input:
+* Output:
+* Return: return 0 if init power successfully, otherwise return error code
+*****************************************************************************/
+static int fts_power_source_init(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+
+	FTS_FUNC_ENTER();
+	ts_data->vdd = regulator_get(ts_data->dev, "vdd");
+	if (IS_ERR_OR_NULL(ts_data->vdd)) {
+		ret = PTR_ERR(ts_data->vdd);
+		FTS_ERROR("get vdd regulator failed,ret=%d", ret);
+		return ret;
+	}
+
+	if (regulator_count_voltages(ts_data->vdd) > 0) {
+		ret = regulator_set_voltage(ts_data->vdd, FTS_VTG_MIN_UV,
+								FTS_VTG_MAX_UV);
+		if (ret) {
+			FTS_ERROR("vdd regulator set_vtg failed ret=%d", ret);
+			regulator_put(ts_data->vdd);
+			return ret;
+		}
+
+		ret = regulator_set_load(ts_data->vdd, FTS_VTG_MAX_UA);
+		if (ret) {
+			FTS_ERROR("vdd regulator set_load failed ret=%d", ret);
+			regulator_put(ts_data->vdd);
+			return ret;
+		}
+	}
+
+	ts_data->vcc_i2c = regulator_get(ts_data->dev, "vcc_i2c");
+	if (!IS_ERR_OR_NULL(ts_data->vcc_i2c)) {
+		if (regulator_count_voltages(ts_data->vcc_i2c) > 0) {
+			ret = regulator_set_voltage(ts_data->vcc_i2c,
+							FTS_I2C_VTG_MIN_UV,
+							FTS_I2C_VTG_MAX_UV);
+			if (ret) {
+				FTS_ERROR("vcc_i2c regulator set_vtg failed,ret=%d", ret);
+				regulator_put(ts_data->vcc_i2c);
+			}
+		}
+	}
+
+#if FTS_PINCTRL_EN
+	fts_pinctrl_init(ts_data);
+	fts_pinctrl_select_normal(ts_data);
+#endif
+
+	ts_data->power_disabled = true;
+	ret = fts_power_source_ctrl(ts_data, ENABLE);
+	if (ret)
+		FTS_ERROR("fail to enable power(regulator)");
+
+	FTS_FUNC_EXIT();
+	return ret;
+}
+
+static int fts_power_source_exit(struct fts_ts_data *ts_data)
+{
+#if FTS_PINCTRL_EN
+	fts_pinctrl_select_release(ts_data);
+#endif
+
+	fts_power_source_ctrl(ts_data, DISABLE);
+
+	if (!IS_ERR_OR_NULL(ts_data->vdd)) {
+		if (regulator_count_voltages(ts_data->vdd) > 0)
+			regulator_set_voltage(ts_data->vdd, 0, FTS_VTG_MAX_UV);
+		regulator_put(ts_data->vdd);
+	}
+
+	if (!IS_ERR_OR_NULL(ts_data->vcc_i2c)) {
+		if (regulator_count_voltages(ts_data->vcc_i2c) > 0)
+			regulator_set_voltage(ts_data->vcc_i2c, 0, FTS_I2C_VTG_MAX_UV);
+		regulator_put(ts_data->vcc_i2c);
+	}
+
+	return 0;
+}
+
+static int fts_power_source_suspend(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+
+	ret = fts_power_source_ctrl(ts_data, DISABLE);
+	if (ret < 0)
+		FTS_ERROR("power off fail, ret=%d", ret);
+
+#if FTS_PINCTRL_EN
+	fts_pinctrl_select_suspend(ts_data);
+#endif
+
+	return ret;
+}
+
+static int fts_power_source_resume(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+
+#if FTS_PINCTRL_EN
+	fts_pinctrl_select_normal(ts_data);
+#endif
+
+	ret = fts_power_source_ctrl(ts_data, ENABLE);
+	if (ret < 0)
+		FTS_ERROR("power on fail, ret=%d", ret);
+
+	return ret;
+}
+#endif /* FTS_POWER_SOURCE_CUST_EN */
+
+static int fts_gpio_configure(struct fts_ts_data *data)
+{
+	int ret = 0;
+
+	FTS_FUNC_ENTER();
+	/* request irq gpio */
+	if (gpio_is_valid(data->pdata->irq_gpio)) {
+		ret = gpio_request(data->pdata->irq_gpio, "fts_irq_gpio");
+		if (ret) {
+			FTS_ERROR("[GPIO]irq gpio request failed");
+			goto err_irq_gpio_req;
+		}
+
+		ret = gpio_direction_input(data->pdata->irq_gpio);
+		if (ret) {
+			FTS_ERROR("[GPIO]set_direction for irq gpio failed");
+			goto err_irq_gpio_dir;
+		}
+	}
+
+	/* request reset gpio */
+	if (gpio_is_valid(data->pdata->reset_gpio)) {
+		ret = gpio_request(data->pdata->reset_gpio, "fts_reset_gpio");
+		if (ret) {
+			FTS_ERROR("[GPIO]reset gpio request failed");
+			goto err_irq_gpio_dir;
+		}
+
+		ret = gpio_direction_output(data->pdata->reset_gpio, 0);
+		if (ret) {
+			FTS_ERROR("[GPIO]set_direction for reset gpio failed");
+			goto err_reset_gpio_dir;
+		}
+	}
+
+	FTS_FUNC_EXIT();
+	return 0;
+
+err_reset_gpio_dir:
+	if (gpio_is_valid(data->pdata->reset_gpio))
+		gpio_free(data->pdata->reset_gpio);
+err_irq_gpio_dir:
+	if (gpio_is_valid(data->pdata->irq_gpio))
+		gpio_free(data->pdata->irq_gpio);
+err_irq_gpio_req:
+	FTS_FUNC_EXIT();
+	return ret;
+}
+
+static int fts_get_dt_coords(struct device *dev, char *name,
+							 struct fts_ts_platform_data *pdata)
+{
+	int ret = 0;
+	u32 coords[FTS_COORDS_ARR_SIZE] = { 0 };
+	struct property *prop;
+	struct device_node *np = dev->of_node;
+	int coords_size;
+
+	prop = of_find_property(np, name, NULL);
+	if (!prop)
+		return -EINVAL;
+	if (!prop->value)
+		return -ENODATA;
+
+	coords_size = prop->length / sizeof(u32);
+	if (coords_size != FTS_COORDS_ARR_SIZE) {
+		FTS_ERROR("invalid:%s, size:%d", name, coords_size);
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32_array(np, name, coords, coords_size);
+	if (ret < 0) {
+		FTS_ERROR("Unable to read %s, please check dts", name);
+		pdata->x_min = FTS_X_MIN_DISPLAY_DEFAULT;
+		pdata->y_min = FTS_Y_MIN_DISPLAY_DEFAULT;
+		pdata->x_max = FTS_X_MAX_DISPLAY_DEFAULT;
+		pdata->y_max = FTS_Y_MAX_DISPLAY_DEFAULT;
+		return -ENODATA;
+	} else {
+		pdata->x_min = coords[0];
+		pdata->y_min = coords[1];
+		pdata->x_max = coords[2];
+		pdata->y_max = coords[3];
+	}
+
+	FTS_INFO("display x(%d %d) y(%d %d)", pdata->x_min, pdata->x_max,
+			 pdata->y_min, pdata->y_max);
+	return 0;
+}
+
+static int fts_parse_dt(struct device *dev, struct fts_ts_platform_data *pdata)
+{
+	int ret = 0;
+	struct device_node *np = dev->of_node;
+	u32 temp_val = 0;
+
+	FTS_FUNC_ENTER();
+
+	ret = fts_get_dt_coords(dev, "focaltech,display-coords", pdata);
+	if (ret < 0)
+		FTS_ERROR("Unable to get display-coords");
+
+	/* key */
+	pdata->have_key = of_property_read_bool(np, "focaltech,have-key");
+	if (pdata->have_key) {
+		ret = of_property_read_u32(np, "focaltech,key-number", &pdata->key_number);
+		if (ret < 0)
+			FTS_ERROR("Key number undefined!");
+
+		ret = of_property_read_u32_array(np, "focaltech,keys",
+										 pdata->keys, pdata->key_number);
+		if (ret < 0)
+			FTS_ERROR("Keys undefined!");
+		else if (pdata->key_number > FTS_MAX_KEYS)
+			pdata->key_number = FTS_MAX_KEYS;
+
+		ret = of_property_read_u32_array(np, "focaltech,key-x-coords",
+										 pdata->key_x_coords,
+										 pdata->key_number);
+		if (ret < 0)
+			FTS_ERROR("Key Y Coords undefined!");
+
+		ret = of_property_read_u32_array(np, "focaltech,key-y-coords",
+										 pdata->key_y_coords,
+										 pdata->key_number);
+		if (ret < 0)
+			FTS_ERROR("Key X Coords undefined!");
+
+		FTS_INFO("VK Number:%d, key:(%d,%d,%d), "
+				 "coords:(%d,%d),(%d,%d),(%d,%d)",
+				 pdata->key_number,
+				 pdata->keys[0], pdata->keys[1], pdata->keys[2],
+				 pdata->key_x_coords[0], pdata->key_y_coords[0],
+				 pdata->key_x_coords[1], pdata->key_y_coords[1],
+				 pdata->key_x_coords[2], pdata->key_y_coords[2]);
+	}
+
+	/* reset, irq gpio info */
+	pdata->reset_gpio = of_get_named_gpio(np, "focaltech,reset-gpio", 0);
+	if (pdata->reset_gpio < 0)
+		FTS_ERROR("Unable to get reset_gpio");
+
+	pdata->irq_gpio = of_get_named_gpio(np, "focaltech,irq-gpio", 0);
+	if (pdata->irq_gpio < 0)
+		FTS_ERROR("Unable to get irq_gpio");
+
+	ret = of_property_read_u32(np, "focaltech,max-touch-number", &temp_val);
+	if (ret < 0) {
+		FTS_ERROR("Unable to get max-touch-number, please check dts");
+		pdata->max_touch_number = FTS_MAX_POINTS_SUPPORT;
+	} else {
+		if (temp_val < 2)
+			pdata->max_touch_number = 2; /* max_touch_number must >= 2 */
+		else if (temp_val > FTS_MAX_POINTS_SUPPORT)
+			pdata->max_touch_number = FTS_MAX_POINTS_SUPPORT;
+		else
+			pdata->max_touch_number = temp_val;
+	}
+
+	ret = of_property_read_u32(np, "focaltech,open-min", &temp_val);
+	if (ret < 0) {
+		FTS_ERROR("Unable to get open-min, please check dts");
+		pdata->open_min = FTS_TEST_OPEN_MIN;
+	} else {
+		pdata->open_min = temp_val;
+	}
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+	ret = of_property_read_u32_array(np, "focaltech,touch-def-array",
+						pdata->touch_def_array, 4);
+	if (ret < 0) {
+		FTS_ERROR("Unable to get touch default array, please check dts");
+		return ret;
+	}
+
+	ret = of_property_read_u32_array(np, "focaltech,touch-range-array",
+						pdata->touch_range_array, 5);
+	if (ret < 0) {
+		FTS_ERROR("Unable to get touch range array, please check dts");
+		return ret;
+	}
+
+	ret = of_property_read_u32_array(np, "focaltech,touch-expert-array",
+						pdata->touch_expert_array, 4 * EXPERT_ARRAY_SIZE);
+	if (ret < 0) {
+		FTS_ERROR("Unable to get touch expert array, please check dts");
+		return ret;
+	}
+#endif
+	FTS_INFO("max touch number:%d, irq gpio:%d, reset gpio:%d",
+			 pdata->max_touch_number, pdata->irq_gpio, pdata->reset_gpio);
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+static void fts_resume_work(struct work_struct *work)
+{
+	struct fts_ts_data *ts_data = container_of(work, struct fts_ts_data,
+								  resume_work);
+
+	fts_ts_resume(ts_data->dev);
+}
+
+#if defined(CONFIG_DRM)
+static int drm_notifier_callback(struct notifier_block *self,
+		unsigned long event, void *data)
+{
+	struct fts_ts_data *ts_data = container_of(self, struct fts_ts_data,
+					fb_notif);
+	struct mi_drm_notifier *evdata = data;
+	int blank;
+
+	if (!ts_data || !evdata || !evdata->data || evdata->id != 0) {
+		FTS_ERROR("evdata is null");
+		goto exit;
+	}
+
+	if (event != MI_DRM_EVENT_BLANK) {
+		goto exit;
+	}
+
+	blank = *(int *)(evdata->data);
+	FTS_INFO("DRM event:%lu, blank:%d", event, blank);
+
+	if (blank == MI_DRM_BLANK_UNBLANK) {
+		queue_work(fts_data->ts_workqueue, &fts_data->resume_work);
+
+	} else if (blank == MI_DRM_BLANK_POWERDOWN ||
+			blank == MI_DRM_BLANK_LP1 ||
+			blank == MI_DRM_BLANK_LP2) {
+		cancel_work_sync(&fts_data->resume_work);
+		fts_ts_suspend(ts_data->dev);
+	}
+
+exit:
+	return NOTIFY_OK;
+}
+
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+static void fts_ts_early_suspend(struct early_suspend *handler)
+{
+	struct fts_ts_data *ts_data = container_of(handler, struct fts_ts_data,
+								  early_suspend);
+
+	cancel_work_sync(&fts_data->resume_work);
+	fts_ts_suspend(ts_data->dev);
+}
+
+static void fts_ts_late_resume(struct early_suspend *handler)
+{
+	struct fts_ts_data *ts_data = container_of(handler, struct fts_ts_data,
+								  early_suspend);
+
+	queue_work(fts_data->ts_workqueue, &fts_data->resume_work);
+}
+#endif
+
+static int fts_power_supply_event(struct notifier_block *nb,
+				unsigned long event, void *ptr)
+{
+	struct fts_ts_data *ts_data =
+		container_of(nb, struct fts_ts_data, power_supply_notifier);
+
+	if (ts_data)
+		queue_work(ts_data->ts_workqueue, &ts_data->power_supply_work);
+
+	return 0;
+}
+
+
+static void fts_power_supply_work(struct work_struct *work)
+{
+	struct fts_ts_data *ts_data = container_of(work, struct fts_ts_data, power_supply_work);
+	bool charger_mode;
+	int ret;
+
+	if (ts_data == NULL)
+		return;
+#if defined(CONFIG_PM) && FTS_PATCH_COMERR_PM
+	if (ts_data->pm_suspend) {
+		FTS_ERROR("TP is in suspend mode, don't set usb status!");
+		return;
+	}
+#endif
+	pm_stay_awake(ts_data->dev);
+	mutex_lock(&ts_data->power_supply_lock);
+	charger_mode = !!power_supply_is_system_supplied();
+	if (charger_mode != ts_data->charger_mode) {
+		ts_data->charger_mode = charger_mode;
+		FTS_INFO("%s %d\n", __func__, charger_mode);
+		if (charger_mode) {
+			FTS_INFO("%s USB is exist\n", __func__);
+			ret = fts_write_reg(FTS_REG_CHARGER_MODE_EN, 1);
+			if (ret < 0)
+				FTS_ERROR("set power supply exist fail, ret=%d", ret);
+		} else {
+			FTS_INFO("%s USB is not exist\n", __func__);
+			ret = fts_write_reg(FTS_REG_CHARGER_MODE_EN, 0);
+			if (ret < 0)
+				FTS_ERROR("set power supply not exist fail, ret=%d", ret);
+		}
+	}
+	mutex_unlock(&ts_data->power_supply_lock);
+	pm_relax(ts_data->dev);
+}
+
+static int fts_ts_probe_entry(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	int pdata_size = sizeof(struct fts_ts_platform_data);
+
+	FTS_FUNC_ENTER();
+	FTS_INFO("%s", FTS_DRIVER_VERSION);
+	ts_data->pdata = kzalloc(pdata_size, GFP_KERNEL);
+	if (!ts_data->pdata) {
+		FTS_ERROR("allocate memory for platform_data fail");
+		return -ENOMEM;
+	}
+
+	if (ts_data->dev->of_node) {
+		ret = fts_parse_dt(ts_data->dev, ts_data->pdata);
+		if (ret)
+			FTS_ERROR("device-tree parse fail");
+	} else {
+		if (ts_data->dev->platform_data) {
+			memcpy(ts_data->pdata, ts_data->dev->platform_data, pdata_size);
+		} else {
+			FTS_ERROR("platform_data is null");
+			return -ENODEV;
+		}
+	}
+
+	ts_data->ts_workqueue = create_singlethread_workqueue("fts_wq");
+	if (!ts_data->ts_workqueue) {
+		FTS_ERROR("create fts workqueue fail");
+	}
+
+	spin_lock_init(&ts_data->irq_lock);
+	mutex_init(&ts_data->report_mutex);
+	mutex_init(&ts_data->bus_lock);
+
+	/* Init communication interface */
+	ret = fts_bus_init(ts_data);
+	if (ret) {
+		FTS_ERROR("bus initialize fail");
+		goto err_bus_init;
+	}
+
+	ret = fts_input_init(ts_data);
+	if (ret) {
+		FTS_ERROR("input initialize fail");
+		goto err_input_init;
+	}
+
+	ret = fts_report_buffer_init(ts_data);
+	if (ret) {
+		FTS_ERROR("report buffer init fail");
+		goto err_report_buffer;
+	}
+
+	ret = fts_gpio_configure(ts_data);
+	if (ret) {
+		FTS_ERROR("configure the gpios fail");
+		goto err_gpio_config;
+	}
+
+#if FTS_POWER_SOURCE_CUST_EN
+	ret = fts_power_source_init(ts_data);
+	if (ret) {
+		FTS_ERROR("fail to get power(regulator)");
+		goto err_power_init;
+	}
+#endif
+
+#if (!FTS_CHIP_IDC)
+	fts_reset_proc(200);
+#endif
+
+	ret = fts_get_ic_information(ts_data);
+	if (ret) {
+		FTS_ERROR("not focal IC, unregister driver");
+		goto err_irq_req;
+	}
+
+	ret = fts_create_proc(ts_data);
+	if (ret) {
+		FTS_ERROR("create proc node fail");
+	}
+
+	ret = fts_create_sysfs(ts_data);
+	if (ret) {
+		FTS_ERROR("create sysfs node fail");
+	}
+
+#if FTS_POINT_REPORT_CHECK_EN
+	ret = fts_point_report_check_init(ts_data);
+	if (ret) {
+		FTS_ERROR("init point report check fail");
+	}
+#endif
+
+	ret = fts_ex_mode_init(ts_data);
+	if (ret) {
+		FTS_ERROR("init glove/cover/charger fail");
+	}
+
+	ret = fts_gesture_init(ts_data);
+	if (ret) {
+		FTS_ERROR("init gesture fail");
+	}
+
+#if FTS_TEST_EN
+	ret = fts_test_init(ts_data);
+	if (ret) {
+		FTS_ERROR("init production test fail");
+	}
+#endif
+
+#if FTS_ESDCHECK_EN
+	ret = fts_esdcheck_init(ts_data);
+	if (ret) {
+		FTS_ERROR("init esd check fail");
+	}
+#endif
+
+	ret = fts_irq_registration(ts_data);
+	if (ret) {
+		FTS_ERROR("request irq failed");
+		goto err_irq_req;
+	}
+
+	ret = fts_fwupg_init(ts_data);
+	if (ret) {
+		FTS_ERROR("init fw upgrade fail");
+	}
+
+	if (ts_data->ts_workqueue) {
+		INIT_WORK(&ts_data->resume_work, fts_resume_work);
+	}
+
+	device_init_wakeup(ts_data->dev, true);
+
+#if defined(CONFIG_PM) && FTS_PATCH_COMERR_PM
+	init_completion(&ts_data->pm_completion);
+	ts_data->pm_suspend = false;
+#endif
+
+#if defined(CONFIG_DRM)
+	ts_data->fb_notif.notifier_call = drm_notifier_callback;
+	ret = mi_drm_register_client(&ts_data->fb_notif);
+	if (ret) {
+		FTS_ERROR("[DRM]Unable to register fb_notifier: %d\n", ret);
+	}
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	ts_data->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + FTS_SUSPEND_LEVEL;
+	ts_data->early_suspend.suspend = fts_ts_early_suspend;
+	ts_data->early_suspend.resume = fts_ts_late_resume;
+	register_early_suspend(&ts_data->early_suspend);
+#endif
+
+	ts_data->charger_mode = false;
+	mutex_init(&ts_data->power_supply_lock);
+	INIT_WORK(&ts_data->power_supply_work, fts_power_supply_work);
+	ts_data->power_supply_notifier.notifier_call = fts_power_supply_event;
+	power_supply_reg_notifier(&ts_data->power_supply_notifier);
+
+	FTS_FUNC_EXIT();
+	return 0;
+
+err_irq_req:
+#if FTS_POWER_SOURCE_CUST_EN
+err_power_init:
+	fts_power_source_exit(ts_data);
+#endif
+	if (gpio_is_valid(ts_data->pdata->reset_gpio))
+		gpio_free(ts_data->pdata->reset_gpio);
+	if (gpio_is_valid(ts_data->pdata->irq_gpio))
+		gpio_free(ts_data->pdata->irq_gpio);
+err_gpio_config:
+	kfree_safe(ts_data->point_buf);
+	kfree_safe(ts_data->events);
+err_report_buffer:
+	input_unregister_device(ts_data->input_dev);
+err_input_init:
+	if (ts_data->ts_workqueue)
+		destroy_workqueue(ts_data->ts_workqueue);
+err_bus_init:
+	kfree_safe(ts_data->bus_tx_buf);
+	kfree_safe(ts_data->bus_rx_buf);
+	kfree_safe(ts_data->pdata);
+
+	FTS_FUNC_EXIT();
+	return ret;
+}
+
+static void fts_ts_remove_entry(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+
+#if FTS_POINT_REPORT_CHECK_EN
+	fts_point_report_check_exit(ts_data);
+#endif
+
+	fts_remove_proc(ts_data);
+	fts_remove_sysfs(ts_data);
+	fts_ex_mode_exit(ts_data);
+
+	fts_fwupg_exit(ts_data);
+
+#if FTS_TEST_EN
+	fts_test_exit(ts_data);
+#endif
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_exit(ts_data);
+#endif
+
+	fts_gesture_exit(ts_data);
+	fts_bus_exit(ts_data);
+
+	free_irq(ts_data->irq, ts_data);
+	input_unregister_device(ts_data->input_dev);
+
+	power_supply_unreg_notifier(&ts_data->power_supply_notifier);
+	mutex_destroy(&ts_data->power_supply_lock);
+
+	if (ts_data->ts_workqueue)
+		destroy_workqueue(ts_data->ts_workqueue);
+
+#if defined(CONFIG_DRM)
+	if (mi_drm_unregister_client(&ts_data->fb_notif))
+		FTS_ERROR("[DRM]Error occurred while unregistering fb_notifier.\n");
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	unregister_early_suspend(&ts_data->early_suspend);
+#endif
+
+	if (gpio_is_valid(ts_data->pdata->reset_gpio))
+		gpio_free(ts_data->pdata->reset_gpio);
+
+	if (gpio_is_valid(ts_data->pdata->irq_gpio))
+		gpio_free(ts_data->pdata->irq_gpio);
+
+#if FTS_POWER_SOURCE_CUST_EN
+	fts_power_source_exit(ts_data);
+#endif
+
+	kfree_safe(ts_data->point_buf);
+	kfree_safe(ts_data->events);
+
+	kfree_safe(ts_data->pdata);
+	kfree_safe(ts_data);
+
+	FTS_FUNC_EXIT();
+
+	return;
+}
+
+static int fts_ts_suspend(struct device *dev)
+{
+	int ret = 0;
+	struct fts_ts_data *ts_data = fts_data;
+
+	FTS_FUNC_ENTER();
+	if (ts_data->suspended) {
+		FTS_INFO("Already in suspend state");
+		return 0;
+	}
+
+	if (ts_data->fw_loading) {
+		FTS_INFO("fw upgrade in process, can't suspend");
+		return 0;
+	}
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+	if (ts_data->palm_sensor_switch) {
+		FTS_INFO("palm sensor ON, switch to OFF");
+		update_palm_sensor_value(0);
+		fts_palm_sensor_cmd(0);
+	}
+
+	if (ts_data->gesture_cmd_delay) {
+		ts_data->gesture_mode = ts_data->gesture_status != 0 ? ENABLE : DISABLE;
+		FTS_INFO("suspended gesture state:0x%02X, write cmd:0x%02X",
+			ts_data->gesture_status, ts_data->gesture_cmd);
+		ts_data->gesture_cmd_delay = false;
+	}
+#endif
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_suspend();
+#endif
+
+	if (ts_data->gesture_mode && !ts_data->poweroff_on_sleep) {
+		fts_gesture_suspend(ts_data);
+	} else {
+		fts_irq_disable();
+
+		FTS_INFO("make TP enter into sleep mode");
+		ret = fts_write_reg(FTS_REG_POWER_MODE, FTS_REG_POWER_MODE_SLEEP);
+		if (ret < 0)
+			FTS_ERROR("set TP to sleep mode fail, ret=%d", ret);
+
+		if (!ts_data->ic_info.is_incell && ts_data->poweroff_on_sleep) {
+#if FTS_POWER_SOURCE_CUST_EN
+			ret = fts_power_source_suspend(ts_data);
+			if (ret < 0) {
+				FTS_ERROR("power enter suspend fail");
+			}
+#endif
+		}
+	}
+
+	fts_release_all_finger();
+	ts_data->suspended = true;
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+static int fts_ts_resume(struct device *dev)
+{
+	struct fts_ts_data *ts_data = fts_data;
+
+	FTS_FUNC_ENTER();
+	if (!ts_data->suspended) {
+		FTS_DEBUG("Already in awake state");
+		return 0;
+	}
+
+	fts_release_all_finger();
+
+	if (!ts_data->ic_info.is_incell) {
+#if FTS_POWER_SOURCE_CUST_EN
+		fts_power_source_resume(ts_data);
+#endif
+		fts_reset_proc(200);
+	}
+
+	fts_wait_tp_to_valid();
+	fts_ex_mode_recovery(ts_data);
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_resume();
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+	if (ts_data->palm_sensor_switch) {
+		FTS_INFO("palm sensor OFF, switch to ON");
+		fts_palm_sensor_cmd(1);
+	}
+#endif
+
+	if (ts_data->gesture_mode && !ts_data->poweroff_on_sleep) {
+		fts_gesture_resume(ts_data);
+	} else {
+		fts_irq_enable();
+	}
+
+	ts_data->poweroff_on_sleep = false;
+	ts_data->suspended = false;
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+#if defined(CONFIG_PM) && FTS_PATCH_COMERR_PM
+static int fts_pm_suspend(struct device *dev)
+{
+	struct fts_ts_data *ts_data = dev_get_drvdata(dev);
+
+	FTS_INFO("system enters into pm_suspend");
+	ts_data->pm_suspend = true;
+	reinit_completion(&ts_data->pm_completion);
+	return 0;
+}
+
+static int fts_pm_resume(struct device *dev)
+{
+	struct fts_ts_data *ts_data = dev_get_drvdata(dev);
+
+	FTS_INFO("system resumes from pm_suspend");
+	ts_data->pm_suspend = false;
+	complete(&ts_data->pm_completion);
+	return 0;
+}
+
+static const struct dev_pm_ops fts_dev_pm_ops = {
+	.suspend = fts_pm_suspend,
+	.resume = fts_pm_resume,
+};
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+static struct xiaomi_touch_interface xiaomi_touch_interfaces;
+
+static void fts_read_palm_data(u8 reg_value)
+{
+	if (reg_value == 0x40)
+		update_palm_sensor_value(1);
+	else if (reg_value == 0x80)
+		update_palm_sensor_value(0);
+	if (reg_value == 0x40 || reg_value == 0x80)
+		FTS_INFO("update palm data:0x%02X", reg_value);
+}
+
+static int fts_palm_sensor_cmd(int value)
+{
+	int ret = 0;
+
+	ret = fts_write_reg(FTS_PALM_EN, value ? FTS_PALM_ON : FTS_PALM_OFF);
+
+	if (ret < 0)
+		FTS_ERROR("Set palm sensor switch failed!\n");
+	else
+		FTS_INFO("Set palm sensor switch: %d\n", value);
+
+	return ret;
+}
+
+static int fts_palm_sensor_write(int value)
+{
+	int ret = 0;
+
+	if (fts_data == NULL)
+		return -EINVAL;
+
+	fts_data->palm_sensor_switch = value;
+
+	if (fts_data->suspended)
+		return 0;
+
+	ret = fts_palm_sensor_cmd(value);
+	if (ret < 0)
+		FTS_ERROR("set palm sensor cmd failed: %d\n", value);
+	return ret;
+}
+
+
+static u8 fts_panel_vendor_read(void)
+{
+	if (fts_data)
+		return fts_data->lockdown_info[0];
+	else
+		return 0;
+}
+
+static u8 fts_panel_color_read(void)
+{
+	if (fts_data)
+		return fts_data->lockdown_info[2];
+	else
+		return 0;
+}
+
+static u8 fts_panel_display_read(void)
+{
+	if (fts_data)
+		return fts_data->lockdown_info[1];
+	else
+		return 0;
+}
+
+static char fts_touch_vendor_read(void)
+{
+	return '3';
+}
+
+static void fts_init_touch_mode_data(struct fts_ts_data *ts_data)
+{
+	struct fts_ts_platform_data *pdata = ts_data->pdata;
+
+	/* Touch Game Mode Switch */
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_DEF_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_MAX_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_MIN_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][SET_CUR_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_CUR_VALUE] = 0;
+
+	/* Acitve Mode */
+	xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][GET_MAX_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][GET_MIN_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][GET_DEF_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][SET_CUR_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][GET_CUR_VALUE] = 0;
+
+	/* the value represents the position in the touch range array defined by DTS */
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][GET_MAX_VALUE] = 5;
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][GET_MIN_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][GET_DEF_VALUE] = pdata->touch_def_array[0];
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][SET_CUR_VALUE] = pdata->touch_def_array[0];
+	xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][GET_CUR_VALUE] = pdata->touch_def_array[0];
+
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][GET_MAX_VALUE] = 5;
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][GET_MIN_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][GET_DEF_VALUE] = pdata->touch_def_array[1];
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][SET_CUR_VALUE] = pdata->touch_def_array[1];
+	xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][GET_CUR_VALUE] = pdata->touch_def_array[1];
+
+	xiaomi_touch_interfaces.touch_mode[Touch_Aim_Sensitivity][GET_MAX_VALUE] = 5;
+	xiaomi_touch_interfaces.touch_mode[Touch_Aim_Sensitivity][GET_MIN_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Aim_Sensitivity][GET_DEF_VALUE] = pdata->touch_def_array[2];
+	xiaomi_touch_interfaces.touch_mode[Touch_Aim_Sensitivity][SET_CUR_VALUE] = pdata->touch_def_array[2];
+	xiaomi_touch_interfaces.touch_mode[Touch_Aim_Sensitivity][GET_CUR_VALUE] = pdata->touch_def_array[2];
+
+	xiaomi_touch_interfaces.touch_mode[Touch_Tap_Stability][GET_MAX_VALUE] = 5;
+	xiaomi_touch_interfaces.touch_mode[Touch_Tap_Stability][GET_MIN_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Tap_Stability][GET_DEF_VALUE] = pdata->touch_def_array[3];
+	xiaomi_touch_interfaces.touch_mode[Touch_Tap_Stability][SET_CUR_VALUE] = pdata->touch_def_array[3];
+	xiaomi_touch_interfaces.touch_mode[Touch_Tap_Stability][GET_CUR_VALUE] = pdata->touch_def_array[3];
+
+	xiaomi_touch_interfaces.touch_mode[Touch_Expert_Mode][GET_MAX_VALUE] = EXPERT_ARRAY_SIZE;
+	xiaomi_touch_interfaces.touch_mode[Touch_Expert_Mode][GET_MIN_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Expert_Mode][GET_DEF_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Expert_Mode][SET_CUR_VALUE] = 1;
+	xiaomi_touch_interfaces.touch_mode[Touch_Expert_Mode][GET_CUR_VALUE] = 1;
+
+	/* edge filter orientation*/
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_MAX_VALUE] = 3;
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_MIN_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_DEF_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][SET_CUR_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_CUR_VALUE] = 0;
+
+	/* edge filter area*/
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_MAX_VALUE] = 3;
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_MIN_VALUE] = 0;
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_DEF_VALUE] = 2;
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][SET_CUR_VALUE] = 2;
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_CUR_VALUE] = 2;
+
+	FTS_INFO("touchfeature value init done");
+
+	return;
+}
+
+static void fts_config_game_mode_cmd(struct fts_ts_data *ts_data, u8 *cmd, bool is_expert_mode)
+{
+	int temp_value;
+	struct fts_ts_platform_data *pdata = ts_data->pdata;
+
+	temp_value = xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][SET_CUR_VALUE];
+	cmd[1] = (u8)(temp_value);
+	temp_value = xiaomi_touch_interfaces.touch_mode[Touch_Active_MODE][SET_CUR_VALUE];
+	cmd[2] = (u8)(temp_value ? 30 : 3);
+	if (is_expert_mode) {
+		temp_value = xiaomi_touch_interfaces.touch_mode[Touch_Expert_Mode][SET_CUR_VALUE];
+		cmd[3] = (u8)(*(pdata->touch_expert_array + (temp_value - 1) * 4));
+		cmd[4] = (u8)(*(pdata->touch_expert_array + (temp_value - 1) * 4 + 1));
+		cmd[5] = (u8)(*(pdata->touch_expert_array + (temp_value - 1) * 4 + 2));
+		cmd[6] = (u8)(*(pdata->touch_expert_array + (temp_value - 1) * 4 + 3));
+	} else {
+		temp_value = xiaomi_touch_interfaces.touch_mode[Touch_Tolerance][SET_CUR_VALUE];
+		cmd[3] = (u8)(*(pdata->touch_range_array + temp_value - 1));
+
+		temp_value = xiaomi_touch_interfaces.touch_mode[Touch_UP_THRESHOLD][SET_CUR_VALUE];
+		cmd[4] = (u8)(*(pdata->touch_range_array + temp_value - 1));
+
+		temp_value = xiaomi_touch_interfaces.touch_mode[Touch_Aim_Sensitivity][SET_CUR_VALUE];
+		cmd[5] = (u8)(*(pdata->touch_range_array + temp_value - 1));
+
+		temp_value = xiaomi_touch_interfaces.touch_mode[Touch_Tap_Stability][SET_CUR_VALUE];
+		cmd[6] = (u8)(*(pdata->touch_range_array + temp_value - 1));
+	}
+}
+
+static void fts_restore_mode_value(int mode, int value_type)
+{
+	xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE] =
+		xiaomi_touch_interfaces.touch_mode[mode][value_type];
+}
+
+static void fts_restore_normal_mode(void)
+{
+	int i;
+	for (i = 0; i < Touch_Report_Rate; i++) {
+		if (i != Touch_Panel_Orientation)
+			fts_restore_mode_value(i, GET_DEF_VALUE);
+	}
+}
+
+static void fts_update_touchmode_data(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	int mode = 0;
+	u8 mode_set_value = 0;
+	u8 mode_addr = 0;
+	bool game_mode_state_change = false;
+	u8 cmd[7] = {0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+
+#if defined(CONFIG_PM) && FTS_PATCH_COMERR_PM
+	if (ts_data && ts_data->pm_suspend) {
+		FTS_ERROR("SYSTEM is in suspend mode, don't set touch mode data");
+		return;
+	}
+#endif
+	pm_stay_awake(ts_data->dev);
+	mutex_lock(&ts_data->cmd_update_mutex);
+
+	fts_config_game_mode_cmd(ts_data, cmd, ts_data->is_expert_mode);
+	ret = fts_write(cmd, sizeof(cmd));
+	if (ret < 0) {
+		FTS_ERROR("write game mode parameter failed\n");
+	} else {
+		FTS_INFO("update game mode cmd: %02X,%02X,%02X,%02X,%02X,%02X,%02X",
+				cmd[0], cmd[1], cmd[2], cmd[3], cmd[4], cmd[5], cmd[6]);
+
+		for (mode = Touch_Game_Mode; mode <= Touch_Expert_Mode; mode++) {
+			if (mode == Touch_Game_Mode &&
+				(xiaomi_touch_interfaces.touch_mode[mode][GET_CUR_VALUE] !=
+					xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE])) {
+					game_mode_state_change = true;
+					fts_data->gamemode_enabled = xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE];
+			}
+			xiaomi_touch_interfaces.touch_mode[mode][GET_CUR_VALUE] =
+				xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE];
+		}
+	}
+
+	mode = Touch_Panel_Orientation;
+	mode_set_value = xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE];
+	if (mode_set_value != xiaomi_touch_interfaces.touch_mode[mode][GET_CUR_VALUE] ||
+			game_mode_state_change) {
+		mode_addr = FTS_REG_ORIENTATION;
+		game_mode_state_change = false;
+		if (PANEL_ORIENTATION_DEGREE_0 == mode_set_value ||
+				PANEL_ORIENTATION_DEGREE_180 == mode_set_value) {
+			mode_set_value = ORIENTATION_0_OR_180;
+		} else if (PANEL_ORIENTATION_DEGREE_90 == mode_set_value) {
+			mode_set_value = fts_data->gamemode_enabled ?
+				GAME_ORIENTATION_90 : NORMAL_ORIENTATION_90;
+		} else if (PANEL_ORIENTATION_DEGREE_270 == mode_set_value) {
+			mode_set_value = fts_data->gamemode_enabled ?
+				GAME_ORIENTATION_270 : NORMAL_ORIENTATION_270;
+		}
+		ret = fts_write_reg(mode_addr, mode_set_value);
+		if (ret < 0) {
+			FTS_ERROR("write touch mode:%d reg failed", mode);
+		} else {
+			FTS_INFO("write touch mode:%d, value: %d, addr:0x%02X",
+				mode, mode_set_value, mode_addr);
+			xiaomi_touch_interfaces.touch_mode[mode][GET_CUR_VALUE] =
+				xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE];
+		}
+	}
+
+	mode = Touch_Edge_Filter;
+	mode_set_value = xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE];
+	if (mode_set_value != xiaomi_touch_interfaces.touch_mode[mode][GET_CUR_VALUE]) {
+		mode_addr = FTS_REG_EDGE_FILTER_LEVEL;
+		ret = fts_write_reg(mode_addr, mode_set_value);
+		if (ret < 0) {
+			FTS_ERROR("write touch mode:%d reg failed", mode);
+		} else {
+			FTS_INFO("write touch mode:%d, value: %d, addr:0x%02X",
+				mode, mode_set_value, mode_addr);
+			xiaomi_touch_interfaces.touch_mode[mode][GET_CUR_VALUE] =
+				xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE];
+		}
+	}
+
+	mutex_unlock(&ts_data->cmd_update_mutex);
+	pm_relax(ts_data->dev);
+}
+
+static void fts_update_gesture_state(struct fts_ts_data *ts_data, int bit, bool enable)
+{
+	u8 cmd_shift = 0;
+
+	if (GESTURE_DOUBLETAP == bit)
+		cmd_shift = FTS_GESTURE_DOUBLETAP;
+	else if (GESTURE_AOD == bit)
+		cmd_shift = FTS_GESTURE_AOD;
+
+	mutex_lock(&ts_data->input_dev->mutex);
+	if (enable) {
+		ts_data->gesture_status |= 1 << bit;
+		ts_data->gesture_cmd |= 1 << cmd_shift;
+	} else {
+		ts_data->gesture_status &= ~(1 << bit);
+		ts_data->gesture_cmd &= ~(1 << cmd_shift);
+	}
+
+	if (ts_data->suspended) {
+		FTS_ERROR("TP is suspended, delay update gesture state!");
+		ts_data->gesture_cmd_delay = true;
+		FTS_INFO("delay gesture state:0x%02X, delay write cmd:0x%02X",
+			ts_data->gesture_status, ts_data->gesture_cmd);
+		mutex_unlock(&ts_data->input_dev->mutex);
+		return;
+	}
+
+	FTS_INFO("gesture state:0x%02X, write cmd:0x%02X", ts_data->gesture_status, ts_data->gesture_cmd);
+	ts_data->gesture_mode = ts_data->gesture_status != 0 ? ENABLE : DISABLE;
+	mutex_unlock(&ts_data->input_dev->mutex);
+}
+
+static void fts_power_status_handle(struct fts_ts_data *fts_data)
+{
+	if (fts_data->power_status) {
+		FTS_INFO("SuperWallpaper out");
+		queue_work(fts_data->ts_workqueue, &fts_data->resume_work);
+	} else if (!fts_data->power_status) {
+		FTS_INFO("SuperWallpaper in");
+		cancel_work_sync(&fts_data->resume_work);
+		fts_ts_suspend(fts_data->dev);
+	}
+}
+
+static int fts_set_cur_value(int mode, int value)
+{
+	if (!fts_data || mode < 0) {
+		FTS_ERROR("Error, fts_data is NULL or the parameter is incorrect");
+		return -1;
+	}
+	FTS_INFO("touch mode:%d, value:%d", mode, value);
+
+	if (mode >= Touch_Mode_NUM) {
+		FTS_ERROR("mode is error:%d", mode);
+		return -EINVAL;
+	} else if (mode == Touch_Doubletap_Mode && value >= 0) {
+		fts_update_gesture_state(fts_data, GESTURE_DOUBLETAP, value != 0 ? true : false);
+		return 0;
+	} else if (mode == Touch_Aod_Enable && value >= 0) {
+		fts_update_gesture_state(fts_data, GESTURE_AOD, value != 0 ? true : false);
+		return 0;
+	} else if (mode == Touch_Power_Status && value >= 0) {
+		fts_data->power_status = !!value;
+		fts_power_status_handle(fts_data);
+		return 0;
+	} else if (mode == Touch_Expert_Mode) {
+		fts_data->is_expert_mode = true;
+	} else if (mode >= Touch_UP_THRESHOLD && mode <= Touch_Tap_Stability) {
+		fts_data->is_expert_mode = false;
+	}
+
+	if (value > xiaomi_touch_interfaces.touch_mode[mode][GET_MAX_VALUE]) {
+		value = xiaomi_touch_interfaces.touch_mode[mode][GET_MAX_VALUE];
+	} else if (value < xiaomi_touch_interfaces.touch_mode[mode][GET_MIN_VALUE]) {
+		value = xiaomi_touch_interfaces.touch_mode[mode][GET_MIN_VALUE];
+	}
+	xiaomi_touch_interfaces.touch_mode[mode][SET_CUR_VALUE] = value;
+	fts_update_touchmode_data(fts_data);
+	return 0;
+}
+
+static int fts_reset_mode(int mode)
+{
+	if (mode == Touch_Game_Mode) {
+		fts_restore_normal_mode();
+		fts_data->gamemode_enabled = false;
+		fts_data->is_expert_mode = false;
+	} else if (mode < Touch_Mode_NUM) {
+		fts_restore_mode_value(mode, GET_DEF_VALUE);
+	} else {
+		FTS_ERROR("mode:%d don't support");
+	}
+
+	FTS_INFO("mode:%d reset", mode);
+
+	fts_update_touchmode_data(fts_data);
+
+	return 0;
+}
+
+static int fts_get_mode_value(int mode, int value_type)
+{
+	int value = -1;
+
+	if (mode < Touch_Mode_NUM && mode >= 0) {
+		value = xiaomi_touch_interfaces.touch_mode[mode][value_type];
+		FTS_INFO("mode:%d, value_type:%d, value:%d", mode, value_type, value);
+	} else {
+		FTS_ERROR("mode:%d don't support");
+	}
+
+	return value;
+}
+
+static int fts_get_mode_all(int mode, int *value)
+{
+	if (mode < Touch_Mode_NUM && mode >= 0) {
+		value[0] = xiaomi_touch_interfaces.touch_mode[mode][GET_CUR_VALUE];
+		value[1] = xiaomi_touch_interfaces.touch_mode[mode][GET_DEF_VALUE];
+		value[2] = xiaomi_touch_interfaces.touch_mode[mode][GET_MIN_VALUE];
+		value[3] = xiaomi_touch_interfaces.touch_mode[mode][GET_MAX_VALUE];
+	} else {
+		FTS_ERROR("mode:%d don't support", mode);
+	}
+	FTS_INFO("mode:%d, value:%d:%d:%d:%d", mode,
+				value[0], value[1], value[2], value[3]);
+	return 0;
+}
+
+static void fts_game_mode_recovery(struct fts_ts_data *ts_data)
+{
+	xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_CUR_VALUE] =
+		xiaomi_touch_interfaces.touch_mode[Touch_Game_Mode][GET_DEF_VALUE];
+
+	xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_CUR_VALUE] =
+		xiaomi_touch_interfaces.touch_mode[Touch_Panel_Orientation][GET_DEF_VALUE];
+
+	xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_CUR_VALUE] =
+		xiaomi_touch_interfaces.touch_mode[Touch_Edge_Filter][GET_DEF_VALUE];
+
+	fts_update_touchmode_data(ts_data);
+}
+
+
+static void fts_palm_mode_recovery(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+
+	ret = fts_palm_sensor_cmd(ts_data->palm_sensor_switch);
+	if (ret < 0)
+		FTS_ERROR("set palm sensor cmd failed: %d\n", ts_data->palm_sensor_switch);
+}
+
+static int fts_get_touch_super_resolution_factor(void)
+{
+	FTS_INFO("current super resolution factor is: %d", SUPER_RESOLUTION_FACOTR);
+	return SUPER_RESOLUTION_FACOTR;
+}
+
+#endif
+
+
+
+/*****************************************************************************
+* TP Driver
+*****************************************************************************/
+static int fts_ts_probe(struct spi_device *spi)
+{
+	int ret = 0;
+	struct fts_ts_data *ts_data = NULL;
+
+	FTS_INFO("Touch Screen(SPI BUS) driver prboe...");
+	spi->mode = SPI_MODE_0;
+	spi->bits_per_word = 8;
+	ret = spi_setup(spi);
+	if (ret) {
+		FTS_ERROR("spi setup fail");
+		return ret;
+	}
+
+	/* malloc memory for global struct variable */
+	ts_data = (struct fts_ts_data *)kzalloc(sizeof(*ts_data), GFP_KERNEL);
+	if (!ts_data) {
+		FTS_ERROR("allocate memory for fts_data fail");
+		return -ENOMEM;
+	}
+
+	fts_data = ts_data;
+	ts_data->spi = spi;
+	ts_data->dev = &spi->dev;
+	ts_data->log_level = 1;
+	ts_data->poweroff_on_sleep = false;
+	ts_data->bus_type = BUS_TYPE_SPI_V2;
+	spi_set_drvdata(spi, ts_data);
+
+	ret = fts_ts_probe_entry(ts_data);
+	if (ret) {
+		FTS_ERROR("Touch Screen(SPI BUS) driver probe fail");
+		kfree_safe(ts_data);
+		return ret;
+	}
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+	mutex_init(&ts_data->cmd_update_mutex);
+	memset(&xiaomi_touch_interfaces, 0x00, sizeof(struct xiaomi_touch_interface));
+	xiaomi_touch_interfaces.panel_vendor_read = fts_panel_vendor_read;
+	xiaomi_touch_interfaces.panel_color_read = fts_panel_color_read;
+	xiaomi_touch_interfaces.panel_display_read = fts_panel_display_read;
+	xiaomi_touch_interfaces.touch_vendor_read = fts_touch_vendor_read;
+
+	xiaomi_touch_interfaces.getModeValue = fts_get_mode_value;
+	xiaomi_touch_interfaces.setModeValue = fts_set_cur_value;
+	xiaomi_touch_interfaces.resetMode = fts_reset_mode;
+	xiaomi_touch_interfaces.getModeAll = fts_get_mode_all;
+	xiaomi_touch_interfaces.palm_sensor_write = fts_palm_sensor_write;
+	xiaomi_touch_interfaces.get_touch_super_resolution_factor = fts_get_touch_super_resolution_factor;
+
+	fts_init_touch_mode_data(ts_data);
+	xiaomitouch_register_modedata(&xiaomi_touch_interfaces);
+#endif
+
+	FTS_INFO("Touch Screen(SPI BUS) driver prboe successfully");
+	return 0;
+}
+
+static void fts_ts_remove(struct spi_device *spi)
+{
+	fts_ts_remove_entry(spi_get_drvdata(spi));
+}
+
+static const struct spi_device_id fts_ts_id[] = {
+	{FTS_DRIVER_NAME, 0},
+	{},
+};
+static const struct of_device_id fts_dt_match[] = {
+	{.compatible = "focaltech,fts", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, fts_dt_match);
+
+static struct spi_driver fts_ts_driver = {
+	.probe = fts_ts_probe,
+	.remove = fts_ts_remove,
+	.driver = {
+		.name = FTS_DRIVER_NAME,
+		.owner = THIS_MODULE,
+#if defined(CONFIG_PM) && FTS_PATCH_COMERR_PM
+		.pm = &fts_dev_pm_ops,
+#endif
+		.of_match_table = of_match_ptr(fts_dt_match),
+	},
+	.id_table = fts_ts_id,
+};
+
+static int __init fts_ts_init(void)
+{
+	int ret = 0;
+
+	FTS_FUNC_ENTER();
+	ret = spi_register_driver(&fts_ts_driver);
+	if (ret != 0)
+		FTS_ERROR("Focaltech touch screen driver init failed!");
+	FTS_FUNC_EXIT();
+	return ret;
+}
+
+static void __exit fts_ts_exit(void)
+{
+	spi_unregister_driver(&fts_ts_driver);
+}
+
+module_init(fts_ts_init);
+module_exit(fts_ts_exit);
+
+MODULE_AUTHOR("FocalTech Driver Team");
+MODULE_DESCRIPTION("FocalTech Touchscreen Driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_core.h b/drivers/input/touchscreen/ft8756_spi/focaltech_core.h
new file mode 100644
index 00000000000000..eef5775bd16f93
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_core.h
@@ -0,0 +1,334 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, Focaltech Ltd. All rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+/*****************************************************************************
+*
+* File Name: focaltech_core.h
+
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-08
+*
+* Abstract:
+*
+* Reference:
+*
+*****************************************************************************/
+
+#ifndef __LINUX_FOCALTECH_CORE_H__
+#define __LINUX_FOCALTECH_CORE_H__
+/*****************************************************************************
+* Included header files
+*****************************************************************************/
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/i2c.h>
+#include <linux/spi/spi.h>
+#include <linux/input.h>
+#include <linux/input/mt.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/vmalloc.h>
+#include <linux/gpio.h>
+#include <linux/regulator/consumer.h>
+#include <linux/uaccess.h>
+#include <linux/firmware.h>
+#include <linux/debugfs.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+#include <linux/wait.h>
+#include <linux/time.h>
+#include <linux/jiffies.h>
+#include <linux/fs.h>
+#include <linux/proc_fs.h>
+#include <linux/version.h>
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/kthread.h>
+#include <linux/dma-mapping.h>
+#include "focaltech_common.h"
+#include <linux/power_supply.h>
+
+
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+#include "../xiaomi/xiaomi_touch.h"
+#endif
+
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define FTS_MAX_POINTS_SUPPORT              10 /* constant value, can't be changed */
+#define FTS_MAX_KEYS                        4
+#define FTS_KEY_DIM                         10
+#define FTS_ONE_TCH_LEN                     6
+#define FTS_TOUCH_DATA_LEN  (FTS_MAX_POINTS_SUPPORT * FTS_ONE_TCH_LEN + 3)
+
+#define FTS_GESTURE_POINTS_MAX              6
+#define FTS_GESTURE_DATA_LEN               (FTS_GESTURE_POINTS_MAX * 4 + 4)
+
+#define FTS_MAX_ID                          0x0A
+#define FTS_TOUCH_X_H_POS                   3
+#define FTS_TOUCH_X_L_POS                   4
+#define FTS_TOUCH_Y_H_POS                   5
+#define FTS_TOUCH_Y_L_POS                   6
+#define FTS_TOUCH_PRE_POS                   7
+#define FTS_TOUCH_AREA_POS                  8
+#define FTS_TOUCH_POINT_NUM                 2
+#define FTS_TOUCH_EVENT_POS                 3
+#define FTS_TOUCH_ID_POS                    5
+#define FTS_COORDS_ARR_SIZE                 4
+#define FTS_X_MIN_DISPLAY_DEFAULT           0
+#define FTS_Y_MIN_DISPLAY_DEFAULT           0
+#define FTS_X_MAX_DISPLAY_DEFAULT           720
+#define FTS_Y_MAX_DISPLAY_DEFAULT           1280
+
+#define FTS_TOUCH_DOWN                      0
+#define FTS_TOUCH_UP                        1
+#define FTS_TOUCH_CONTACT                   2
+#define EVENT_DOWN(flag)                    ((FTS_TOUCH_DOWN == flag) || (FTS_TOUCH_CONTACT == flag))
+#define EVENT_UP(flag)                      (FTS_TOUCH_UP == flag)
+#define EVENT_NO_DOWN(data)                 (!data->point_num)
+
+#define FTX_MAX_COMPATIBLE_TYPE             4
+#define FTX_MAX_COMMMAND_LENGTH             16
+
+#define FTS_LOCKDOWN_INFO_ADDR                      0x1F000
+#define FTS_LOCKDOWN_INFO_SIZE                      8
+
+#define FTS_TEST_OPEN_MIN                       	3000
+
+#define EXPERT_ARRAY_SIZE          3
+
+/*****************************************************************************
+*  Alternative mode (When something goes wrong, the modules may be able to solve the problem.)
+*****************************************************************************/
+/*
+ * For commnication error in PM(deep sleep) state
+ */
+#define FTS_PATCH_COMERR_PM                     1
+#define FTS_TIMEOUT_COMERR_PM                   700
+
+
+/*****************************************************************************
+* Private enumerations, structures and unions using typedef
+*****************************************************************************/
+struct ftxxxx_proc {
+	struct proc_dir_entry *proc_entry;
+	struct proc_dir_entry *tp_test_data_proc;
+	struct proc_dir_entry *tp_test_result_proc;
+	struct proc_dir_entry *tp_selftest_proc;
+	struct proc_dir_entry *tp_data_dump_proc;
+	u8 opmode;
+	u8 cmd_len;
+	u8 cmd[FTX_MAX_COMMMAND_LENGTH];
+};
+
+struct fts_ts_platform_data {
+	u32 irq_gpio;
+	u32 irq_gpio_flags;
+	u32 reset_gpio;
+	u32 reset_gpio_flags;
+	bool have_key;
+	u32 key_number;
+	u32 keys[FTS_MAX_KEYS];
+	u32 key_y_coords[FTS_MAX_KEYS];
+	u32 key_x_coords[FTS_MAX_KEYS];
+	u32 x_max;
+	u32 y_max;
+	u32 x_min;
+	u32 y_min;
+	u32 max_touch_number;
+	u32 open_min;
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+	u32 touch_range_array[5];
+	u32 touch_def_array[4];
+	u32 touch_expert_array[4 * EXPERT_ARRAY_SIZE];
+#endif
+};
+
+struct ts_event {
+	int x;      /*x coordinate */
+	int y;      /*y coordinate */
+	int p;      /* pressure */
+	int flag;   /* touch event flag: 0 -- down; 1-- up; 2 -- contact */
+	int id;     /*touch ID */
+	int area;
+};
+
+struct fts_ts_data {
+	struct i2c_client *client;
+	struct spi_device *spi;
+	struct device *dev;
+	struct input_dev *input_dev;
+	struct fts_ts_platform_data *pdata;
+	struct ts_ic_info ic_info;
+	struct workqueue_struct *ts_workqueue;
+	struct work_struct fwupg_work;
+	struct delayed_work esdcheck_work;
+	struct delayed_work prc_work;
+	struct work_struct resume_work;
+	struct ftxxxx_proc proc;
+	spinlock_t irq_lock;
+	struct mutex report_mutex;
+	struct mutex bus_lock;
+	int irq;
+	int log_level;
+	int fw_is_running;      /* confirm fw is running when using spi:default 0 */
+	int dummy_byte;
+#if defined(CONFIG_PM) && FTS_PATCH_COMERR_PM
+	struct completion pm_completion;
+	bool pm_suspend;
+#endif
+	bool suspended;
+	bool fw_loading;
+	bool irq_disabled;
+	bool power_disabled;
+	bool glove_mode;
+	bool cover_mode;
+	bool charger_mode;
+	bool gesture_mode;      /* gesture enable or disable, default: disable */
+	/* multi-touch */
+	struct ts_event *events;
+	u8 *bus_tx_buf;
+	u8 *bus_rx_buf;
+	int bus_type;
+	u8 *point_buf;
+	int pnt_buf_size;
+	int touchs;
+	int key_state;
+	int touch_point;
+	int point_num;
+	struct regulator *vdd;
+	struct regulator *vcc_i2c;
+	u8 lockdown_info[FTS_LOCKDOWN_INFO_SIZE];
+#if FTS_PINCTRL_EN
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *pins_active;
+	struct pinctrl_state *pins_suspend;
+	struct pinctrl_state *pins_release;
+#endif
+#if defined(CONFIG_DRM)
+	struct notifier_block fb_notif;
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	struct early_suspend early_suspend;
+#endif
+
+	bool poweroff_on_sleep;
+	/* power supply */
+	struct mutex power_supply_lock;
+	struct work_struct power_supply_work;
+	struct notifier_block power_supply_notifier;
+#ifdef CONFIG_TOUCHSCREEN_XIAOMI_TOUCHFEATURE
+	u8 gesture_status;
+	bool gamemode_enabled;
+	struct mutex cmd_update_mutex;
+	int palm_sensor_switch;
+	bool power_status;
+	bool is_expert_mode;
+	u8 gesture_cmd;
+	bool gesture_cmd_delay;
+#endif
+};
+
+enum GESTURE_MODE_TYPE {
+	GESTURE_DOUBLETAP,
+	GESTURE_AOD,
+};
+
+
+enum _FTS_BUS_TYPE {
+	BUS_TYPE_NONE,
+	BUS_TYPE_I2C,
+	BUS_TYPE_SPI,
+	BUS_TYPE_SPI_V2,
+};
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+extern struct fts_ts_data *fts_data;
+
+/* communication interface */
+int fts_read(u8 *cmd, u32 cmdlen, u8 *data, u32 datalen);
+int fts_read_reg(u8 addr, u8 *value);
+int fts_write(u8 *writebuf, u32 writelen);
+int fts_write_reg(u8 addr, u8 value);
+void fts_hid2std(void);
+int fts_bus_init(struct fts_ts_data *ts_data);
+int fts_bus_exit(struct fts_ts_data *ts_data);
+
+/* Gesture functions */
+int fts_gesture_init(struct fts_ts_data *ts_data);
+int fts_gesture_exit(struct fts_ts_data *ts_data);
+void fts_gesture_recovery(struct fts_ts_data *ts_data);
+int fts_gesture_readdata(struct fts_ts_data *ts_data, u8 *data);
+int fts_gesture_suspend(struct fts_ts_data *ts_data);
+int fts_gesture_resume(struct fts_ts_data *ts_data);
+
+/* Apk and functions */
+int fts_create_proc(struct fts_ts_data *ts_data);
+void fts_remove_proc(struct fts_ts_data *ts_data);
+
+
+/* ADB functions */
+int fts_create_sysfs(struct fts_ts_data *ts_data);
+int fts_remove_sysfs(struct fts_ts_data *ts_data);
+
+/* ESD */
+#if FTS_ESDCHECK_EN
+int fts_esdcheck_init(struct fts_ts_data *ts_data);
+int fts_esdcheck_exit(struct fts_ts_data *ts_data);
+int fts_esdcheck_switch(bool enable);
+int fts_esdcheck_proc_busy(bool proc_debug);
+int fts_esdcheck_set_intr(bool intr);
+int fts_esdcheck_suspend(void);
+int fts_esdcheck_resume(void);
+#endif
+
+/* Production test */
+#if FTS_TEST_EN
+int fts_test_init(struct fts_ts_data *ts_data);
+int fts_test_exit(struct fts_ts_data *ts_data);
+#endif
+
+/* Point Report Check*/
+#if FTS_POINT_REPORT_CHECK_EN
+int fts_point_report_check_init(struct fts_ts_data *ts_data);
+int fts_point_report_check_exit(struct fts_ts_data *ts_data);
+void fts_prc_queue_work(struct fts_ts_data *ts_data);
+#endif
+
+/* FW upgrade */
+int fts_fwupg_init(struct fts_ts_data *ts_data);
+int fts_fwupg_exit(struct fts_ts_data *ts_data);
+int fts_upgrade_bin(char *fw_name, bool force);
+int fts_enter_test_environment(bool test_state);
+
+/* Other */
+int fts_reset_proc(int hdelayms);
+int fts_wait_tp_to_valid(void);
+void fts_release_all_finger(void);
+void fts_tp_state_recovery(struct fts_ts_data *ts_data);
+int fts_ex_mode_init(struct fts_ts_data *ts_data);
+int fts_ex_mode_exit(struct fts_ts_data *ts_data);
+int fts_ex_mode_recovery(struct fts_ts_data *ts_data);
+
+void fts_irq_disable(void);
+void fts_irq_enable(void);
+#endif /* __LINUX_FOCALTECH_CORE_H__ */
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_esdcheck.c b/drivers/input/touchscreen/ft8756_spi/focaltech_esdcheck.c
new file mode 100644
index 00000000000000..5dcb6d6071594a
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_esdcheck.c
@@ -0,0 +1,465 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, FocalTech Systems, Ltd., all rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*****************************************************************************
+*
+* File Name: focaltech_esdcheck.c
+*
+*    Author: Focaltech Driver Team
+*
+*   Created: 2016-08-03
+*
+*  Abstract: ESD check function
+*
+*   Version: v1.0
+*
+* Revision History:
+*        v1.0:
+*            First release. By luougojin 2016-08-03
+*        v1.1: By luougojin 2017-02-15
+*            1. Add LCD_ESD_PATCH to control idc_esdcheck_lcderror
+*****************************************************************************/
+
+/*****************************************************************************
+* Included header files
+*****************************************************************************/
+#include "focaltech_core.h"
+
+#if FTS_ESDCHECK_EN
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define ESDCHECK_WAIT_TIME              1000    /* ms */
+#define LCD_ESD_PATCH                   0
+#define ESDCHECK_INTRCNT_MAX            2
+
+/*****************************************************************************
+* Private enumerations, structures and unions using typedef
+*****************************************************************************/
+struct fts_esdcheck_st {
+	u8      mode                : 1;    /* 1- need check esd 0- no esd check */
+	u8      suspend             : 1;
+	u8      proc_debug          : 1;    /* apk or adb use */
+	u8      intr                : 1;    /* 1- Interrupt trigger */
+	u8      unused              : 4;
+	u8      intr_cnt;
+	u8      flow_work_hold_cnt;         /* Flow Work Cnt(reg0x91) keep a same value for x times. >=5 times is ESD, need reset */
+	u8      flow_work_cnt_last;         /* Save Flow Work Cnt(reg0x91) value */
+	u32     hardware_reset_cnt;
+	u32     nack_cnt;
+	u32     dataerror_cnt;
+};
+
+/*****************************************************************************
+* Static variables
+*****************************************************************************/
+static struct fts_esdcheck_st fts_esdcheck_data;
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+
+/*****************************************************************************
+* functions body
+*****************************************************************************/
+#if LCD_ESD_PATCH
+int lcd_need_reset;
+static int tp_need_recovery; /* LCD reset cause Tp reset */
+int idc_esdcheck_lcderror(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	u8 val = 0;
+
+	FTS_DEBUG("check LCD ESD");
+	if ((tp_need_recovery == 1) && (lcd_need_reset == 0)) {
+		tp_need_recovery = 0;
+		/* LCD reset, need recover TP state */
+		fts_release_all_finger();
+		fts_tp_state_recovery(ts_data);
+	}
+
+	ret = fts_read_reg(FTS_REG_ESD_SATURATE, &val);
+	if (ret < 0) {
+		FTS_ERROR("read reg0xED fail,ret:%d", ret);
+		return -EIO;
+	}
+
+	if (val == 0xAA) {
+		/*
+		* 1. Set flag lcd_need_reset = 1;
+		* 2. LCD driver need reset(recovery) LCD and set lcd_need_reset to 0
+		* 3. recover TP state
+		*/
+		FTS_INFO("LCD ESD, need execute LCD reset");
+		lcd_need_reset = 1;
+		tp_need_recovery = 1;
+	}
+
+	return 0;
+}
+#endif
+
+static int fts_esdcheck_tp_reset(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+
+	fts_esdcheck_data.flow_work_hold_cnt = 0;
+	fts_esdcheck_data.hardware_reset_cnt++;
+
+	fts_reset_proc(200);
+	fts_release_all_finger();
+	fts_tp_state_recovery(ts_data);
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+static bool get_chip_id(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	int i = 0;
+	u8 reg_value = 0;
+	u8 reg_addr = 0;
+	u8 chip_id = ts_data->ic_info.ids.chip_idh;
+
+	for (i = 0; i < 3; i++) {
+		reg_addr = FTS_REG_CHIP_ID;
+		ret = fts_read(&reg_addr, 1, &reg_value, 1);
+		if (ret < 0) {
+			FTS_ERROR("read chip id fail,ret:%d", ret);
+			fts_esdcheck_data.nack_cnt++;
+		} else {
+			if (reg_value == chip_id) {
+				break;
+			} else {
+				FTS_DEBUG("read chip_id:%x,retry:%d", reg_value, i);
+				fts_esdcheck_data.dataerror_cnt++;
+			}
+		}
+		msleep(10);
+	}
+
+	/* if can't get correct data in 3 times, then need hardware reset */
+	if (i >= 3) {
+		FTS_ERROR("read chip id 3 times fail, need execute TP reset");
+		return true;
+	}
+
+	return false;
+}
+
+/*****************************************************************************
+*  Name: get_flow_cnt
+*  Brief: Read flow cnt(0x91)
+*  Input:
+*  Output:
+*  Return:  1(true) - Reg 0x91(flow cnt) abnormal: hold a value for 5 times
+*           0(false) - Reg 0x91(flow cnt) normal
+*****************************************************************************/
+static bool get_flow_cnt(struct fts_ts_data *ts_data)
+{
+	int     ret = 0;
+	u8      reg_value = 0;
+	u8      reg_addr = 0;
+
+	reg_addr = FTS_REG_FLOW_WORK_CNT;
+	ret = fts_read(&reg_addr, 1, &reg_value, 1);
+	if (ret < 0) {
+		FTS_ERROR("read reg0x91 fail,ret:%d", ret);
+		fts_esdcheck_data.nack_cnt++;
+	} else {
+		if (reg_value == fts_esdcheck_data.flow_work_cnt_last) {
+			FTS_DEBUG("reg0x91,val:%x,last:%x", reg_value,
+					  fts_esdcheck_data.flow_work_cnt_last);
+			fts_esdcheck_data.flow_work_hold_cnt++;
+		} else {
+			fts_esdcheck_data.flow_work_hold_cnt = 0;
+		}
+
+		fts_esdcheck_data.flow_work_cnt_last = reg_value;
+	}
+
+	/* Flow Work Cnt keep a value for 5 times, need execute TP reset */
+	if (fts_esdcheck_data.flow_work_hold_cnt >= 5) {
+		FTS_DEBUG("reg0x91 keep a value for 5 times, need execute TP reset");
+		return true;
+	}
+
+	return false;
+}
+
+static int esdcheck_algorithm(struct fts_ts_data *ts_data)
+{
+	int     ret = 0;
+	u8      reg_value = 0;
+	u8      reg_addr = 0;
+	bool    hardware_reset = 0;
+
+	/* 1. esdcheck is interrupt, then return */
+	if (fts_esdcheck_data.intr == 1) {
+		fts_esdcheck_data.intr_cnt++;
+		if (fts_esdcheck_data.intr_cnt > ESDCHECK_INTRCNT_MAX)
+			fts_esdcheck_data.intr = 0;
+		else
+			return 0;
+	}
+
+	/* 2. check power state, if suspend, no need check esd */
+	if (fts_esdcheck_data.suspend == 1) {
+		FTS_DEBUG("In suspend, not check esd");
+		/* because in suspend state, adb can be used, when upgrade FW, will
+		 * active ESD check(active = 1); But in suspend, then will don't
+		 * queue_delayed_work, when resume, don't check ESD again
+		 */
+		return 0;
+	}
+
+	/* 3. check fts_esdcheck_data.proc_debug state, if 1-proc busy, no need check esd*/
+	if (fts_esdcheck_data.proc_debug == 1) {
+		FTS_INFO("In apk/adb command mode, not check esd");
+		return 0;
+	}
+
+	/* 4. In factory mode, can't check esd */
+	reg_addr = FTS_REG_WORKMODE;
+	ret = fts_read_reg(reg_addr, &reg_value);
+	if (ret < 0) {
+		fts_esdcheck_data.nack_cnt++;
+	} else if ((reg_value & 0x70) !=  FTS_REG_WORKMODE_WORK_VALUE) {
+		FTS_DEBUG("not in work mode(%x), no check esd", reg_value);
+		return 0;
+	}
+
+	/* 5. IDC esd check lcd  default:close */
+#if LCD_ESD_PATCH
+	idc_esdcheck_lcderror(ts_data);
+#endif
+
+	/* 6. Get Chip ID */
+	hardware_reset = get_chip_id(ts_data);
+
+	/* 7. get Flow work cnt: 0x91 If no change for 5 times, then ESD and reset */
+	if (!hardware_reset) {
+		hardware_reset = get_flow_cnt(ts_data);
+	}
+
+	/* 8. If need hardware reset, then handle it here */
+	if (hardware_reset == 1) {
+		FTS_DEBUG("NoACK=%d, Error Data=%d, Hardware Reset=%d",
+				  fts_esdcheck_data.nack_cnt,
+				  fts_esdcheck_data.dataerror_cnt,
+				  fts_esdcheck_data.hardware_reset_cnt);
+		fts_esdcheck_tp_reset(ts_data);
+	}
+
+	return 0;
+}
+
+static void esdcheck_func(struct work_struct *work)
+{
+	struct fts_ts_data *ts_data = container_of(work,
+								  struct fts_ts_data, esdcheck_work.work);
+
+	if (ENABLE == fts_esdcheck_data.mode) {
+		esdcheck_algorithm(ts_data);
+		queue_delayed_work(ts_data->ts_workqueue, &ts_data->esdcheck_work,
+						   msecs_to_jiffies(ESDCHECK_WAIT_TIME));
+	}
+
+}
+
+int fts_esdcheck_set_intr(bool intr)
+{
+	/* interrupt don't add debug message */
+	fts_esdcheck_data.intr = intr;
+	fts_esdcheck_data.intr_cnt = (u8)intr;
+	return 0;
+}
+
+static int fts_esdcheck_get_status(void)
+{
+	/* interrupt don't add debug message */
+	return fts_esdcheck_data.mode;
+}
+
+/*****************************************************************************
+*  Name: fts_esdcheck_proc_busy
+*  Brief: When APK or ADB command access TP via driver, then need set proc_debug,
+*         then will not check ESD.
+*  Input:
+*  Output:
+*  Return:
+*****************************************************************************/
+int fts_esdcheck_proc_busy(bool proc_debug)
+{
+	fts_esdcheck_data.proc_debug = proc_debug;
+	return 0;
+}
+
+/*****************************************************************************
+*  Name: fts_esdcheck_switch
+*  Brief: FTS esd check function switch.
+*  Input:   enable:  1 - Enable esd check
+*                    0 - Disable esd check
+*  Output:
+*  Return:
+*****************************************************************************/
+int fts_esdcheck_switch(bool enable)
+{
+	struct fts_ts_data *ts_data = fts_data;
+	FTS_FUNC_ENTER();
+	if (fts_esdcheck_data.mode == ENABLE) {
+		if (enable) {
+			FTS_DEBUG("ESD check start");
+			fts_esdcheck_data.flow_work_hold_cnt = 0;
+			fts_esdcheck_data.flow_work_cnt_last = 0;
+			fts_esdcheck_data.intr = 0;
+			fts_esdcheck_data.intr_cnt = 0;
+			queue_delayed_work(ts_data->ts_workqueue,
+							   &ts_data->esdcheck_work,
+							   msecs_to_jiffies(ESDCHECK_WAIT_TIME));
+		} else {
+			FTS_DEBUG("ESD check stop");
+			cancel_delayed_work_sync(&ts_data->esdcheck_work);
+		}
+	}
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+int fts_esdcheck_suspend(void)
+{
+	FTS_FUNC_ENTER();
+	fts_esdcheck_switch(DISABLE);
+	fts_esdcheck_data.suspend = 1;
+	fts_esdcheck_data.intr = 0;
+	fts_esdcheck_data.intr_cnt = 0;
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+int fts_esdcheck_resume(void)
+{
+	FTS_FUNC_ENTER();
+	fts_esdcheck_switch(ENABLE);
+	fts_esdcheck_data.suspend = 0;
+	fts_esdcheck_data.intr = 0;
+	fts_esdcheck_data.intr_cnt = 0;
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+static ssize_t fts_esdcheck_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	if (FTS_SYSFS_ECHO_ON(buf)) {
+		FTS_DEBUG("enable esdcheck");
+		fts_esdcheck_data.mode = ENABLE;
+		fts_esdcheck_switch(ENABLE);
+	} else if (FTS_SYSFS_ECHO_OFF(buf)) {
+		FTS_DEBUG("disable esdcheck");
+		fts_esdcheck_switch(DISABLE);
+		fts_esdcheck_data.mode = DISABLE;
+	}
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_esdcheck_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count;
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	count = snprintf(buf, PAGE_SIZE, "Esd check: %s\n",
+					 fts_esdcheck_get_status() ? "On" : "Off");
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+/* sysfs esd node
+ *   read example: cat  fts_esd_mode        ---read esd mode
+ *   write example:echo 01 > fts_esd_mode   ---make esdcheck enable
+ *
+ */
+static DEVICE_ATTR (fts_esd_mode, S_IRUGO | S_IWUSR, fts_esdcheck_show, fts_esdcheck_store);
+
+static struct attribute *fts_esd_mode_attrs[] = {
+
+	&dev_attr_fts_esd_mode.attr,
+	NULL,
+};
+
+static struct attribute_group fts_esd_group = {
+	.attrs = fts_esd_mode_attrs,
+};
+
+int fts_create_esd_sysfs(struct device *dev)
+{
+	int ret = 0;
+
+	ret = sysfs_create_group(&dev->kobj, &fts_esd_group);
+	if (ret != 0) {
+		FTS_ERROR("fts_create_esd_sysfs(sysfs) create fail");
+		sysfs_remove_group(&dev->kobj, &fts_esd_group);
+		return ret;
+	}
+	return 0;
+}
+
+int fts_esdcheck_init(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+
+	if (ts_data->ts_workqueue) {
+		INIT_DELAYED_WORK(&ts_data->esdcheck_work, esdcheck_func);
+	} else {
+		FTS_ERROR("fts workqueue is NULL, can't run esd check function");
+		return -EINVAL;
+	}
+
+	memset((u8 *)&fts_esdcheck_data, 0, sizeof(struct fts_esdcheck_st));
+
+	fts_esdcheck_data.mode = ENABLE;
+	fts_esdcheck_data.intr = 0;
+	fts_esdcheck_data.intr_cnt = 0;
+	fts_esdcheck_switch(ENABLE);
+	fts_create_esd_sysfs(ts_data->dev);
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+int fts_esdcheck_exit(struct fts_ts_data *ts_data)
+{
+	sysfs_remove_group(&ts_data->dev->kobj, &fts_esd_group);
+	return 0;
+}
+#endif /* FTS_ESDCHECK_EN */
+
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_ex_fun.c b/drivers/input/touchscreen/ft8756_spi/focaltech_ex_fun.c
new file mode 100644
index 00000000000000..e6e50d3b019793
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_ex_fun.c
@@ -0,0 +1,1182 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, Focaltech Ltd. All rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*****************************************************************************
+*
+* File Name: Focaltech_ex_fun.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-08
+*
+* Abstract:
+*
+* Reference:
+*
+*****************************************************************************/
+
+/*****************************************************************************
+* 1.Included header files
+*****************************************************************************/
+#include "focaltech_core.h"
+
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define PROC_UPGRADE                            0
+#define PROC_READ_REGISTER                      1
+#define PROC_WRITE_REGISTER                     2
+#define PROC_AUTOCLB                            4
+#define PROC_UPGRADE_INFO                       5
+#define PROC_WRITE_DATA                         6
+#define PROC_READ_DATA                          7
+#define PROC_SET_TEST_FLAG                      8
+#define PROC_SET_SLAVE_ADDR                     10
+#define PROC_HW_RESET                           11
+#define PROC_READ_STATUS                        12
+#define PROC_SET_BOOT_MODE                      13
+#define PROC_ENTER_TEST_ENVIRONMENT             14
+#define PROC_NAME                               "ftxxxx-debug"
+#define PROC_BUF_SIZE                           256
+
+/*****************************************************************************
+* Private enumerations, structures and unions using typedef
+*****************************************************************************/
+enum {
+	RWREG_OP_READ = 0,
+	RWREG_OP_WRITE = 1,
+};
+
+/*****************************************************************************
+* Static variables
+*****************************************************************************/
+static struct rwreg_operation_t {
+	int type;           /*  0: read, 1: write */
+	int reg;            /*  register */
+	int len;            /*  read/write length */
+	int val;            /*  length = 1; read: return value, write: op return */
+	int res;            /*  0: success, otherwise: fail */
+	char *opbuf;        /*  length >= 1, read return value, write: op return */
+} rw_op;
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 10, 0))
+static ssize_t fts_debug_write(
+	struct file *filp, const char __user *buff, size_t count, loff_t *ppos)
+{
+	u8 *writebuf = NULL;
+	u8 tmpbuf[PROC_BUF_SIZE] = { 0 };
+	int buflen = count;
+	int writelen = 0;
+	int ret = 0;
+	char tmp[PROC_BUF_SIZE];
+	struct fts_ts_data *ts_data = fts_data;
+	struct ftxxxx_proc *proc = &ts_data->proc;
+
+	if (buflen <= 1) {
+		FTS_ERROR("apk proc wirte count(%d) fail", buflen);
+		return -EINVAL;
+	}
+
+	if (buflen > PROC_BUF_SIZE) {
+		writebuf = (u8 *)kzalloc(buflen * sizeof(u8), GFP_KERNEL);
+		if (NULL == writebuf) {
+			FTS_ERROR("apk proc wirte buf zalloc fail");
+			return -ENOMEM;
+		}
+	} else {
+		writebuf = tmpbuf;
+	}
+
+	if (copy_from_user(writebuf, buff, buflen)) {
+		FTS_ERROR("[APK]: copy from user error!!");
+		ret = -EFAULT;
+		goto proc_write_err;
+	}
+
+	proc->opmode = writebuf[0];
+	switch (proc->opmode) {
+	case PROC_SET_TEST_FLAG:
+		FTS_DEBUG("[APK]: PROC_SET_TEST_FLAG = %x", writebuf[1]);
+		if (writebuf[1] == 0) {
+#if FTS_ESDCHECK_EN
+			fts_esdcheck_switch(ENABLE);
+#endif
+		} else {
+#if FTS_ESDCHECK_EN
+			fts_esdcheck_switch(DISABLE);
+#endif
+		}
+		break;
+
+	case PROC_READ_REGISTER:
+		proc->cmd[0] = writebuf[1];
+		break;
+
+	case PROC_WRITE_REGISTER:
+		ret = fts_write_reg(writebuf[1], writebuf[2]);
+		if (ret < 0) {
+			FTS_ERROR("PROC_WRITE_REGISTER write error");
+			goto proc_write_err;
+		}
+		break;
+
+	case PROC_READ_DATA:
+		writelen = buflen - 1;
+		if (writelen >= FTX_MAX_COMMMAND_LENGTH) {
+			FTS_ERROR("cmd(PROC_READ_DATA) length(%d) fail", writelen);
+			goto proc_write_err;
+		}
+		memcpy(proc->cmd, writebuf + 1, writelen);
+		proc->cmd_len = writelen;
+		break;
+
+	case PROC_WRITE_DATA:
+		writelen = buflen - 1;
+		ret = fts_write(writebuf + 1, writelen);
+		if (ret < 0) {
+			FTS_ERROR("PROC_WRITE_DATA write error");
+			goto proc_write_err;
+		}
+		break;
+
+	case PROC_SET_SLAVE_ADDR:
+		break;
+
+	case PROC_HW_RESET:
+		snprintf(tmp, PROC_BUF_SIZE, "%s", writebuf + 1);
+		tmp[buflen - 1] = '\0';
+		if (strncmp(tmp, "focal_driver", 12) == 0) {
+			FTS_INFO("APK execute HW Reset");
+			fts_reset_proc(0);
+		}
+		break;
+
+	case PROC_SET_BOOT_MODE:
+		FTS_DEBUG("[APK]: PROC_SET_BOOT_MODE = %x", writebuf[1]);
+		if (0 == writebuf[1]) {
+			ts_data->fw_is_running = true;
+		} else {
+			ts_data->fw_is_running = false;
+		}
+		break;
+	case PROC_ENTER_TEST_ENVIRONMENT:
+		FTS_DEBUG("[APK]: PROC_ENTER_TEST_ENVIRONMENT = %x", writebuf[1]);
+		if (0 == writebuf[1]) {
+			fts_enter_test_environment(0);
+		} else {
+			fts_enter_test_environment(1);
+		}
+		break;
+
+	default:
+		break;
+	}
+
+	ret = buflen;
+proc_write_err:
+	if ((buflen > PROC_BUF_SIZE) && writebuf) {
+		kfree(writebuf);
+		writebuf = NULL;
+	}
+	return ret;
+}
+
+static ssize_t fts_debug_read(
+	struct file *filp, char __user *buff, size_t count, loff_t *ppos)
+{
+	int ret = 0;
+	int num_read_chars = 0;
+	int buflen = count;
+	u8 *readbuf = NULL;
+	u8 tmpbuf[PROC_BUF_SIZE] = { 0 };
+	struct fts_ts_data *ts_data = fts_data;
+	struct ftxxxx_proc *proc = &ts_data->proc;
+
+	if (buflen <= 0) {
+		FTS_ERROR("apk proc read count(%d) fail", buflen);
+		return -EINVAL;
+	}
+
+	if (buflen > PROC_BUF_SIZE) {
+		readbuf = (u8 *)kzalloc(buflen * sizeof(u8), GFP_KERNEL);
+		if (NULL == readbuf) {
+			FTS_ERROR("apk proc wirte buf zalloc fail");
+			return -ENOMEM;
+		}
+	} else {
+		readbuf = tmpbuf;
+	}
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(1);
+#endif
+
+	switch (proc->opmode) {
+	case PROC_READ_REGISTER:
+		num_read_chars = 1;
+		ret = fts_read_reg(proc->cmd[0], &readbuf[0]);
+		if (ret < 0) {
+			FTS_ERROR("PROC_READ_REGISTER read error");
+			goto proc_read_err;
+		}
+		break;
+	case PROC_WRITE_REGISTER:
+		break;
+
+	case PROC_READ_DATA:
+		num_read_chars = buflen;
+		ret = fts_read(proc->cmd, proc->cmd_len, readbuf, num_read_chars);
+		if (ret < 0) {
+			FTS_ERROR("PROC_READ_DATA read error");
+			goto proc_read_err;
+		}
+		break;
+
+	case PROC_WRITE_DATA:
+		break;
+
+	default:
+		break;
+	}
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(0);
+#endif
+
+	ret = num_read_chars;
+proc_read_err:
+	if (copy_to_user(buff, readbuf, num_read_chars)) {
+		FTS_ERROR("copy to user error");
+		ret = -EFAULT;
+	}
+
+	if ((buflen > PROC_BUF_SIZE) && readbuf) {
+		kfree(readbuf);
+		readbuf = NULL;
+	}
+	return ret;
+}
+
+static const struct file_operations fts_proc_fops = {
+	.owner  = THIS_MODULE,
+	.read   = fts_debug_read,
+	.write  = fts_debug_write,
+};
+#else
+static int fts_debug_write(
+	struct file *filp, const char __user *buff, unsigned long len, void *data)
+{
+	u8 *writebuf = NULL;
+	u8 tmpbuf[PROC_BUF_SIZE] = { 0 };
+	int buflen = count;
+	int writelen = 0;
+	int ret = 0;
+	char tmp[PROC_BUF_SIZE];
+	struct fts_ts_data *ts_data = fts_data;
+	struct ftxxxx_proc *proc = &ts_data->proc;
+
+	if (buflen <= 1) {
+		FTS_ERROR("apk proc wirte count(%d) fail", buflen);
+		return -EINVAL;
+	}
+
+	if (buflen > PROC_BUF_SIZE) {
+		writebuf = (u8 *)kzalloc(buflen * sizeof(u8), GFP_KERNEL);
+		if (NULL == writebuf) {
+			FTS_ERROR("apk proc wirte buf zalloc fail");
+			return -ENOMEM;
+		}
+	} else {
+		writebuf = tmpbuf;
+	}
+
+	if (copy_from_user(writebuf, buff, buflen)) {
+		FTS_ERROR("[APK]: copy from user error!!");
+		ret = -EFAULT;
+		goto proc_write_err;
+	}
+
+	proc->opmode = writebuf[0];
+	switch (proc->opmode) {
+	case PROC_SET_TEST_FLAG:
+		FTS_DEBUG("[APK]: PROC_SET_TEST_FLAG = %x", writebuf[1]);
+		if (writebuf[1] == 0) {
+#if FTS_ESDCHECK_EN
+			fts_esdcheck_switch(ENABLE);
+#endif
+		} else {
+#if FTS_ESDCHECK_EN
+			fts_esdcheck_switch(DISABLE);
+#endif
+		}
+		break;
+
+	case PROC_READ_REGISTER:
+		proc->cmd[0] = writebuf[1];
+		break;
+
+	case PROC_WRITE_REGISTER:
+		ret = fts_write_reg(writebuf[1], writebuf[2]);
+		if (ret < 0) {
+			FTS_ERROR("PROC_WRITE_REGISTER write error");
+			goto proc_write_err;
+		}
+		break;
+
+	case PROC_READ_DATA:
+		writelen = buflen - 1;
+		if (writelen >= FTX_MAX_COMMMAND_LENGTH) {
+			FTS_ERROR("cmd(PROC_READ_DATA) length(%d) fail", writelen);
+			goto proc_write_err;
+		}
+		memcpy(proc->cmd, writebuf + 1, writelen);
+		proc->cmd_len = writelen;
+		break;
+
+	case PROC_WRITE_DATA:
+		writelen = buflen - 1;
+		ret = fts_write(writebuf + 1, writelen);
+		if (ret < 0) {
+			FTS_ERROR("PROC_WRITE_DATA write error");
+			goto proc_write_err;
+		}
+		break;
+
+	case PROC_SET_SLAVE_ADDR:
+		break;
+
+	case PROC_HW_RESET:
+		snprintf(tmp, PROC_BUF_SIZE, "%s", writebuf + 1);
+		tmp[buflen - 1] = '\0';
+		if (strncmp(tmp, "focal_driver", 12) == 0) {
+			FTS_INFO("APK execute HW Reset");
+			fts_reset_proc(0);
+		}
+		break;
+
+	case PROC_SET_BOOT_MODE:
+		FTS_DEBUG("[APK]: PROC_SET_BOOT_MODE = %x", writebuf[1]);
+		if (0 == writebuf[1]) {
+			ts_data->fw_is_running = true;
+		} else {
+			ts_data->fw_is_running = false;
+		}
+		break;
+	case PROC_ENTER_TEST_ENVIRONMENT:
+		FTS_DEBUG("[APK]: PROC_ENTER_TEST_ENVIRONMENT = %x", writebuf[1]);
+		if (0 == writebuf[1]) {
+			fts_enter_test_environment(0);
+		} else {
+			fts_enter_test_environment(1);
+		}
+		break;
+
+	default:
+		break;
+	}
+
+	ret = buflen;
+proc_write_err:
+	if ((buflen > PROC_BUF_SIZE) && writebuf) {
+		kfree(writebuf);
+		writebuf = NULL;
+	}
+	return ret;
+}
+
+static int fts_debug_read(
+	char *page, char **start, off_t off, int count, int *eof, void *data)
+{
+	int ret = 0;
+	int num_read_chars = 0;
+	int buflen = count;
+	u8 *readbuf = NULL;
+	u8 tmpbuf[PROC_BUF_SIZE] = { 0 };
+	struct fts_ts_data *ts_data = fts_data;
+	struct ftxxxx_proc *proc = &ts_data->proc;
+
+	if (buflen <= 0) {
+		FTS_ERROR("apk proc read count(%d) fail", buflen);
+		return -EINVAL;
+	}
+
+	if (buflen > PROC_BUF_SIZE) {
+		readbuf = (u8 *)kzalloc(buflen * sizeof(u8), GFP_KERNEL);
+		if (NULL == readbuf) {
+			FTS_ERROR("apk proc wirte buf zalloc fail");
+			return -ENOMEM;
+		}
+	} else {
+		readbuf = tmpbuf;
+	}
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(1);
+#endif
+
+	switch (proc->opmode) {
+	case PROC_READ_REGISTER:
+		num_read_chars = 1;
+		ret = fts_read_reg(proc->cmd[0], &readbuf[0]);
+		if (ret < 0) {
+			FTS_ERROR("PROC_READ_REGISTER read error");
+			goto proc_read_err;
+		}
+		break;
+	case PROC_WRITE_REGISTER:
+		break;
+
+	case PROC_READ_DATA:
+		num_read_chars = buflen;
+		ret = fts_read(proc->cmd, proc->cmd_len, readbuf, num_read_chars);
+		if (ret < 0) {
+			FTS_ERROR("PROC_READ_DATA read error");
+			goto proc_read_err;
+		}
+		break;
+
+	case PROC_WRITE_DATA:
+		break;
+
+	default:
+		break;
+	}
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(0);
+#endif
+
+	ret = num_read_chars;
+proc_read_err:
+	if (copy_to_user(buff, readbuf, num_read_chars)) {
+		FTS_ERROR("copy to user error");
+		ret = -EFAULT;
+	}
+
+	if ((buflen > PROC_BUF_SIZE) && readbuf) {
+		kfree(readbuf);
+		readbuf = NULL;
+	}
+	return ret;
+}
+#endif
+
+
+#if 1
+int fts_create_proc(struct fts_ts_data *ts_data)
+{
+	return 0;
+}
+
+void fts_remove_proc(struct fts_ts_data *ts_data)
+{
+	return;
+}
+#else
+int fts_create_proc(struct fts_ts_data *ts_data)
+{
+	struct ftxxxx_proc *proc = &ts_data->proc;
+
+	proc->proc_entry = proc_create(PROC_NAME, 0777, NULL, &fts_proc_fops);
+	if (proc->proc_entry == NULL) {
+		FTS_ERROR("create proc entry fail");
+		return -ENOMEM;
+	}
+
+	FTS_INFO("Create proc entry success!");
+	return 0;
+}
+
+void fts_remove_proc(struct fts_ts_data *ts_data)
+{
+	struct ftxxxx_proc *proc = &ts_data->proc;
+
+	if (proc->proc_entry)
+		proc_remove(proc->proc_entry);
+	proc->proc_entry = NULL;
+}
+#endif
+
+/************************************************************************
+ * sysfs interface
+ ***********************************************************************/
+/* fts_hw_reset interface */
+static ssize_t fts_hw_reset_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input_dev = fts_data->input_dev;
+	ssize_t count = 0;
+
+	mutex_lock(&input_dev->mutex);
+	fts_reset_proc(0);
+	count = snprintf(buf, PAGE_SIZE, "hw reset executed\n");
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_hw_reset_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	return -EPERM;
+}
+
+/* fts_irq interface */
+static ssize_t fts_irq_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	ssize_t count = 0;
+	struct irq_desc *desc = irq_to_desc(fts_data->irq);
+
+	count = snprintf(buf, PAGE_SIZE, "irq_depth:%d\n", desc->depth);
+
+	return count;
+}
+
+static ssize_t fts_irq_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	if (FTS_SYSFS_ECHO_ON(buf)) {
+		FTS_INFO("enable irq");
+		fts_irq_enable();
+	} else if (FTS_SYSFS_ECHO_OFF(buf)) {
+		FTS_INFO("disable irq");
+		fts_irq_disable();
+	}
+	mutex_unlock(&input_dev->mutex);
+	return count;
+}
+
+/* fts_boot_mode interface */
+static ssize_t fts_bootmode_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	FTS_FUNC_ENTER();
+	mutex_lock(&input_dev->mutex);
+	if (FTS_SYSFS_ECHO_ON(buf)) {
+		FTS_INFO("[EX-FUN]set to boot mode");
+		fts_data->fw_is_running = false;
+	} else if (FTS_SYSFS_ECHO_OFF(buf)) {
+		FTS_INFO("[EX-FUN]set to fw mode");
+		fts_data->fw_is_running = true;
+	}
+	mutex_unlock(&input_dev->mutex);
+	FTS_FUNC_EXIT();
+
+	return count;
+}
+
+static ssize_t fts_bootmode_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	ssize_t count = 0;
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	FTS_FUNC_ENTER();
+	mutex_lock(&input_dev->mutex);
+	if (true == fts_data->fw_is_running) {
+		count = snprintf(buf, PAGE_SIZE, "tp is in fw mode\n");
+	} else {
+		count = snprintf(buf, PAGE_SIZE, "tp is in boot mode\n");
+	}
+	mutex_unlock(&input_dev->mutex);
+	FTS_FUNC_EXIT();
+
+	return count;
+}
+
+/* fts_tpfwver interface */
+static ssize_t fts_tpfwver_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int ret = 0;
+	struct fts_ts_data *ts_data = fts_data;
+	struct input_dev *input_dev = ts_data->input_dev;
+	ssize_t num_read_chars = 0;
+	u8 fwver = 0;
+
+	mutex_lock(&input_dev->mutex);
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(1);
+#endif
+	ret = fts_read_reg(FTS_REG_FW_VER, &fwver);
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(0);
+#endif
+	if ((ret < 0) || (fwver == 0xFF) || (fwver == 0x00))
+		num_read_chars = snprintf(buf, PAGE_SIZE, "get tp fw version fail!\n");
+	else
+		num_read_chars = snprintf(buf, PAGE_SIZE, "%02x\n", fwver);
+
+	mutex_unlock(&input_dev->mutex);
+	return num_read_chars;
+}
+
+static ssize_t fts_tpfwver_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	return -EPERM;
+}
+
+/* fts_rw_reg */
+static ssize_t fts_tprwreg_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count;
+	int i;
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+
+	if (rw_op.len < 0) {
+		count = snprintf(buf, PAGE_SIZE, "Invalid cmd line\n");
+	} else if (rw_op.len == 1) {
+		if (RWREG_OP_READ == rw_op.type) {
+			if (rw_op.res == 0) {
+				count = snprintf(buf, PAGE_SIZE, "Read %02X: %02X\n", rw_op.reg, rw_op.val);
+			} else {
+				count = snprintf(buf, PAGE_SIZE, "Read %02X failed, ret: %d\n", rw_op.reg,  rw_op.res);
+			}
+		} else {
+			if (rw_op.res == 0) {
+				count = snprintf(buf, PAGE_SIZE, "Write %02X, %02X success\n", rw_op.reg,  rw_op.val);
+			} else {
+				count = snprintf(buf, PAGE_SIZE, "Write %02X failed, ret: %d\n", rw_op.reg,  rw_op.res);
+			}
+		}
+	} else {
+		if (RWREG_OP_READ == rw_op.type) {
+			count = snprintf(buf, PAGE_SIZE, "Read Reg: [%02X]-[%02X]\n", rw_op.reg, rw_op.reg + rw_op.len);
+			count += snprintf(buf + count, PAGE_SIZE, "Result: ");
+			if (rw_op.res) {
+				count += snprintf(buf + count, PAGE_SIZE, "failed, ret: %d\n", rw_op.res);
+			} else {
+				if (rw_op.opbuf) {
+					for (i = 0; i < rw_op.len; i++) {
+						count += snprintf(buf + count, PAGE_SIZE, "%02X ", rw_op.opbuf[i]);
+					}
+					count += snprintf(buf + count, PAGE_SIZE, "\n");
+				}
+			}
+		} else {
+			;
+			count = snprintf(buf, PAGE_SIZE, "Write Reg: [%02X]-[%02X]\n", rw_op.reg, rw_op.reg + rw_op.len - 1);
+			count += snprintf(buf + count, PAGE_SIZE, "Write Data: ");
+			if (rw_op.opbuf) {
+				for (i = 1; i < rw_op.len; i++) {
+					count += snprintf(buf + count, PAGE_SIZE, "%02X ", rw_op.opbuf[i]);
+				}
+				count += snprintf(buf + count, PAGE_SIZE, "\n");
+			}
+			if (rw_op.res) {
+				count += snprintf(buf + count, PAGE_SIZE, "Result: failed, ret: %d\n", rw_op.res);
+			} else {
+				count += snprintf(buf + count, PAGE_SIZE, "Result: success\n");
+			}
+		}
+		/*if (rw_op.opbuf) {
+			kfree(rw_op.opbuf);
+			rw_op.opbuf = NULL;
+		}*/
+	}
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static int shex_to_int(const char *hex_buf, int size)
+{
+	int i;
+	int base = 1;
+	int value = 0;
+	char single;
+
+	for (i = size - 1; i >= 0; i--) {
+		single = hex_buf[i];
+
+		if ((single >= '0') && (single <= '9')) {
+			value += (single - '0') * base;
+		} else if ((single >= 'a') && (single <= 'z')) {
+			value += (single - 'a' + 10) * base;
+		} else if ((single >= 'A') && (single <= 'Z')) {
+			value += (single - 'A' + 10) * base;
+		} else {
+			return -EINVAL;
+		}
+
+		base *= 16;
+	}
+
+	return value;
+}
+
+
+static u8 shex_to_u8(const char *hex_buf, int size)
+{
+	return (u8)shex_to_int(hex_buf, size);
+}
+/*
+ * Format buf:
+ * [0]: '0' write, '1' read(reserved)
+ * [1-2]: addr, hex
+ * [3-4]: length, hex
+ * [5-6]...[n-(n+1)]: data, hex
+ */
+static int fts_parse_buf(const char *buf, size_t cmd_len)
+{
+	int length;
+	int i;
+	char *tmpbuf;
+
+	rw_op.reg = shex_to_u8(buf + 1, 2);
+	length = shex_to_int(buf + 3, 2);
+
+	if (buf[0] == '1') {
+		rw_op.len = length;
+		rw_op.type = RWREG_OP_READ;
+		FTS_DEBUG("read %02X, %d bytes", rw_op.reg, rw_op.len);
+	} else {
+		if (cmd_len < (length * 2 + 5)) {
+			pr_err("data invalided!\n");
+			return -EINVAL;
+		}
+		FTS_DEBUG("write %02X, %d bytes", rw_op.reg, length);
+
+		/* first byte is the register addr */
+		rw_op.type = RWREG_OP_WRITE;
+		rw_op.len = length + 1;
+	}
+
+	if (rw_op.len > 0) {
+		tmpbuf = (char *)kzalloc(rw_op.len, GFP_KERNEL);
+		if (!tmpbuf) {
+			FTS_ERROR("allocate memory failed!\n");
+			return -ENOMEM;
+		}
+
+		if (RWREG_OP_WRITE == rw_op.type) {
+			tmpbuf[0] = rw_op.reg & 0xFF;
+			FTS_DEBUG("write buffer: ");
+			for (i = 1; i < rw_op.len; i++) {
+				tmpbuf[i] = shex_to_u8(buf + 5 + i * 2 - 2, 2);
+				FTS_DEBUG("buf[%d]: %02X", i, tmpbuf[i] & 0xFF);
+			}
+		}
+		rw_op.opbuf = tmpbuf;
+	}
+
+	return rw_op.len;
+}
+
+static ssize_t fts_tprwreg_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct input_dev *input_dev = fts_data->input_dev;
+	ssize_t cmd_length = 0;
+
+	mutex_lock(&input_dev->mutex);
+	cmd_length = count - 1;
+
+	if (rw_op.opbuf) {
+		kfree(rw_op.opbuf);
+		rw_op.opbuf = NULL;
+	}
+
+	FTS_DEBUG("cmd len: %d, buf: %s", (int)cmd_length, buf);
+	/* compatible old ops */
+	if (2 == cmd_length) {
+		rw_op.type = RWREG_OP_READ;
+		rw_op.len = 1;
+		rw_op.reg = shex_to_int(buf, 2);
+	} else if (4 == cmd_length) {
+		rw_op.type = RWREG_OP_WRITE;
+		rw_op.len = 1;
+		rw_op.reg = shex_to_int(buf, 2);
+		rw_op.val = shex_to_int(buf + 2, 2);
+	} else if (cmd_length < 5) {
+		FTS_ERROR("Invalid cmd buffer");
+		mutex_unlock(&input_dev->mutex);
+		return -EINVAL;
+	} else {
+		rw_op.len = fts_parse_buf(buf, cmd_length);
+	}
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(1);
+#endif
+	if (rw_op.len < 0) {
+		FTS_ERROR("cmd buffer error!");
+
+	} else {
+		if (RWREG_OP_READ == rw_op.type) {
+			if (rw_op.len == 1) {
+				u8 reg, val;
+				reg = rw_op.reg & 0xFF;
+				rw_op.res = fts_read_reg(reg, &val);
+				rw_op.val = val;
+			} else {
+				char reg;
+				reg = rw_op.reg & 0xFF;
+
+				rw_op.res = fts_read(&reg, 1, rw_op.opbuf, rw_op.len);
+			}
+
+			if (rw_op.res < 0) {
+				FTS_ERROR("Could not read 0x%02x", rw_op.reg);
+			} else {
+				FTS_INFO("read 0x%02x, %d bytes successful", rw_op.reg, rw_op.len);
+				rw_op.res = 0;
+			}
+
+		} else {
+			if (rw_op.len == 1) {
+				u8 reg, val;
+				reg = rw_op.reg & 0xFF;
+				val = rw_op.val & 0xFF;
+				rw_op.res = fts_write_reg(reg, val);
+			} else {
+				rw_op.res = fts_write(rw_op.opbuf, rw_op.len);
+			}
+			if (rw_op.res < 0) {
+				FTS_ERROR("Could not write 0x%02x", rw_op.reg);
+
+			} else {
+				FTS_INFO("Write 0x%02x, %d bytes successful", rw_op.val, rw_op.len);
+				rw_op.res = 0;
+			}
+		}
+	}
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(0);
+#endif
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+/* fts_upgrade_bin interface */
+static ssize_t fts_fwupgradebin_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return -EPERM;
+}
+
+static ssize_t fts_fwupgradebin_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	char fwname[FILE_NAME_LENGTH] = { 0 };
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	if ((count <= 1) || (count >= FILE_NAME_LENGTH - 32)) {
+		FTS_ERROR("fw bin name's length(%d) fail", (int)count);
+		return -EINVAL;
+	}
+	memset(fwname, 0, sizeof(fwname));
+	snprintf(fwname, FILE_NAME_LENGTH, "%s", buf);
+	fwname[count - 1] = '\0';
+
+	FTS_INFO("upgrade with bin file through sysfs node");
+	mutex_lock(&input_dev->mutex);
+	fts_upgrade_bin(fwname, 0);
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+/* fts_force_upgrade interface */
+static ssize_t fts_fwforceupg_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return -EPERM;
+}
+
+static ssize_t fts_fwforceupg_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	char fwname[FILE_NAME_LENGTH];
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	if ((count <= 1) || (count >= FILE_NAME_LENGTH - 32)) {
+		FTS_ERROR("fw bin name's length(%d) fail", (int)count);
+		return -EINVAL;
+	}
+	memset(fwname, 0, sizeof(fwname));
+	snprintf(fwname, FILE_NAME_LENGTH, "%s", buf);
+	fwname[count - 1] = '\0';
+
+	FTS_INFO("force upgrade through sysfs node");
+	mutex_lock(&input_dev->mutex);
+	fts_upgrade_bin(fwname, 1);
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+/* fts_driver_info interface */
+static ssize_t fts_driverinfo_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	struct fts_ts_data *ts_data = fts_data;
+	struct fts_ts_platform_data *pdata = ts_data->pdata;
+	struct input_dev *input_dev = ts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	count += snprintf(buf + count, PAGE_SIZE, "Driver Ver:%s\n",
+					  FTS_DRIVER_VERSION);
+
+	count += snprintf(buf + count, PAGE_SIZE, "Resolution:(%d,%d)~(%d,%d)\n",
+					  pdata->x_min, pdata->y_min, pdata->x_max, pdata->y_max);
+
+	count += snprintf(buf + count, PAGE_SIZE, "Max Touchs:%d\n",
+					  pdata->max_touch_number);
+
+	count += snprintf(buf + count, PAGE_SIZE,
+					  "reset gpio:%d,int gpio:%d,irq:%d\n",
+					  pdata->reset_gpio, pdata->irq_gpio, ts_data->irq);
+
+	count += snprintf(buf + count, PAGE_SIZE, "IC ID:0x%02x%02x\n",
+					  ts_data->ic_info.ids.chip_idh,
+					  ts_data->ic_info.ids.chip_idl);
+
+	if (ts_data->bus_type == BUS_TYPE_I2C) {
+		count += snprintf(buf + count, PAGE_SIZE, "BUS:%s,addr:0x%x\n",
+						  "I2C", ts_data->client->addr);
+	} else {
+		count += snprintf(buf + count, PAGE_SIZE,
+						  "BUS:%s,mode:%d,max_freq:%d\n", "SPI",
+						  ts_data->spi->mode, ts_data->spi->max_speed_hz);
+	}
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_driverinfo_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	return -EPERM;
+}
+
+/* fts_dump_reg interface */
+static ssize_t fts_dumpreg_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	u8 val = 0;
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(1);
+#endif
+	fts_read_reg(FTS_REG_POWER_MODE, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "Power Mode:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_FW_VER, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "FW Ver:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_LIC_VER, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "LCD Initcode Ver:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_IDE_PARA_VER_ID, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "Param Ver:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_IDE_PARA_STATUS, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "Param status:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_VENDOR_ID, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "Vendor ID:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_GESTURE_EN, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "Gesture Mode:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_CHARGER_MODE_EN, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "charge stat:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_INT_CNT, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "INT count:0x%02x\n", val);
+
+	fts_read_reg(FTS_REG_FLOW_WORK_CNT, &val);
+	count += snprintf(buf + count, PAGE_SIZE, "ESD count:0x%02x\n", val);
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_proc_busy(0);
+#endif
+
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_dumpreg_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	return -EPERM;
+}
+
+/* fts_dump_reg interface */
+static ssize_t fts_tpbuf_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	int i = 0;
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	count += snprintf(buf + count, PAGE_SIZE, "touch point buffer:\n");
+	for (i = 0; i < fts_data->pnt_buf_size; i++) {
+		count += snprintf(buf + count, PAGE_SIZE, "%02x ", fts_data->point_buf[i]);
+	}
+	count += snprintf(buf + count, PAGE_SIZE, "\n");
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_tpbuf_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	return -EPERM;
+}
+
+/* fts_log_level interface */
+static ssize_t fts_log_level_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	count += snprintf(buf + count, PAGE_SIZE, "log level:%d\n",
+					fts_data->log_level);
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_log_level_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	int value = 0;
+	struct input_dev *input_dev = fts_data->input_dev;
+
+	FTS_FUNC_ENTER();
+	mutex_lock(&input_dev->mutex);
+	sscanf(buf, "%d", &value);
+	FTS_DEBUG("log level:%d->%d", fts_data->log_level, value);
+	fts_data->log_level = value;
+	mutex_unlock(&input_dev->mutex);
+	FTS_FUNC_EXIT();
+
+	return count;
+}
+
+/* get the fw version  example:cat fw_version */
+static DEVICE_ATTR(fts_fw_version, S_IRUGO | S_IWUSR, fts_tpfwver_show, fts_tpfwver_store);
+
+/* read and write register(s)
+*   All data type is **HEX**
+*   Single Byte:
+*       read:   echo 88 > rw_reg ---read register 0x88
+*       write:  echo 8807 > rw_reg ---write 0x07 into register 0x88
+*   Multi-bytes:
+*       [0:rw-flag][1-2: reg addr, hex][3-4: length, hex][5-6...n-n+1: write data, hex]
+*       rw-flag: 0, write; 1, read
+*       read:  echo 10005           > rw_reg ---read reg 0x00-0x05
+*       write: echo 000050102030405 > rw_reg ---write reg 0x00-0x05 as 01,02,03,04,05
+*  Get result:
+*       cat rw_reg
+*/
+static DEVICE_ATTR(fts_rw_reg, S_IRUGO | S_IWUSR, fts_tprwreg_show, fts_tprwreg_store);
+/*  upgrade from fw bin file   example:echo "*.bin" > fts_upgrade_bin */
+static DEVICE_ATTR(fts_upgrade_bin, S_IRUGO | S_IWUSR, fts_fwupgradebin_show, fts_fwupgradebin_store);
+static DEVICE_ATTR(fts_force_upgrade, S_IRUGO | S_IWUSR, fts_fwforceupg_show, fts_fwforceupg_store);
+static DEVICE_ATTR(fts_driver_info, S_IRUGO | S_IWUSR, fts_driverinfo_show, fts_driverinfo_store);
+static DEVICE_ATTR(fts_dump_reg, S_IRUGO | S_IWUSR, fts_dumpreg_show, fts_dumpreg_store);
+static DEVICE_ATTR(fts_hw_reset, S_IRUGO | S_IWUSR, fts_hw_reset_show, fts_hw_reset_store);
+static DEVICE_ATTR(fts_irq, S_IRUGO | S_IWUSR, fts_irq_show, fts_irq_store);
+static DEVICE_ATTR(fts_boot_mode, S_IRUGO | S_IWUSR, fts_bootmode_show, fts_bootmode_store);
+static DEVICE_ATTR(fts_touch_point, S_IRUGO | S_IWUSR, fts_tpbuf_show, fts_tpbuf_store);
+static DEVICE_ATTR(fts_log_level, S_IRUGO | S_IWUSR, fts_log_level_show, fts_log_level_store);
+
+/* add your attr in here*/
+static struct attribute *fts_attributes[] = {
+	&dev_attr_fts_fw_version.attr,
+	&dev_attr_fts_rw_reg.attr,
+	&dev_attr_fts_dump_reg.attr,
+	&dev_attr_fts_upgrade_bin.attr,
+	&dev_attr_fts_force_upgrade.attr,
+	&dev_attr_fts_driver_info.attr,
+	&dev_attr_fts_hw_reset.attr,
+	&dev_attr_fts_irq.attr,
+	&dev_attr_fts_boot_mode.attr,
+	&dev_attr_fts_touch_point.attr,
+	&dev_attr_fts_log_level.attr,
+	NULL
+};
+
+static struct attribute_group fts_attribute_group = {
+	.attrs = fts_attributes
+};
+
+int fts_create_sysfs(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+
+	ret = sysfs_create_group(&ts_data->dev->kobj, &fts_attribute_group);
+	if (ret) {
+		FTS_ERROR("[EX]: sysfs_create_group() failed!!");
+		sysfs_remove_group(&ts_data->dev->kobj, &fts_attribute_group);
+		return -ENOMEM;
+	} else {
+		FTS_INFO("[EX]: sysfs_create_group() succeeded!!");
+	}
+
+	return ret;
+}
+
+int fts_remove_sysfs(struct fts_ts_data *ts_data)
+{
+	sysfs_remove_group(&ts_data->dev->kobj, &fts_attribute_group);
+	return 0;
+}
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_ex_mode.c b/drivers/input/touchscreen/ft8756_spi/focaltech_ex_mode.c
new file mode 100644
index 00000000000000..4b2cc7e1f6a95e
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_ex_mode.c
@@ -0,0 +1,308 @@
+/*
+ *
+ * FocalTech ftxxxx TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, Focaltech Ltd. All rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*****************************************************************************
+*
+* File Name: focaltech_ex_mode.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-31
+*
+* Abstract:
+*
+* Reference:
+*
+*****************************************************************************/
+
+/*****************************************************************************
+* 1.Included header files
+*****************************************************************************/
+#include "focaltech_core.h"
+
+/*****************************************************************************
+* 2.Private constant and macro definitions using #define
+*****************************************************************************/
+
+/*****************************************************************************
+* 3.Private enumerations, structures and unions using typedef
+*****************************************************************************/
+enum _ex_mode {
+	MODE_GLOVE = 0,
+	MODE_COVER,
+	MODE_CHARGER,
+};
+
+/*****************************************************************************
+* 4.Static variables
+*****************************************************************************/
+
+/*****************************************************************************
+* 5.Global variable or extern global variabls/functions
+*****************************************************************************/
+
+/*****************************************************************************
+* 6.Static function prototypes
+*******************************************************************************/
+static int fts_ex_mode_switch(enum _ex_mode mode, u8 value)
+{
+	int ret = 0;
+	u8 m_val = 0;
+
+	if (value)
+		m_val = 0x01;
+	else
+		m_val = 0x00;
+
+	switch (mode) {
+	case MODE_GLOVE:
+		ret = fts_write_reg(FTS_REG_GLOVE_MODE_EN, m_val);
+		if (ret < 0) {
+			FTS_ERROR("MODE_GLOVE switch to %d fail", m_val);
+		}
+		break;
+	case MODE_COVER:
+		ret = fts_write_reg(FTS_REG_COVER_MODE_EN, m_val);
+		if (ret < 0) {
+			FTS_ERROR("MODE_COVER switch to %d fail", m_val);
+		}
+		break;
+	case MODE_CHARGER:
+		ret = fts_write_reg(FTS_REG_CHARGER_MODE_EN, m_val);
+		if (ret < 0) {
+			FTS_ERROR("MODE_CHARGER switch to %d fail", m_val);
+		}
+		break;
+	default:
+		FTS_ERROR("mode(%d) unsupport", mode);
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+static ssize_t fts_glove_mode_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	u8 val = 0;
+	struct fts_ts_data *ts_data = fts_data;
+	struct input_dev *input_dev = ts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	fts_read_reg(FTS_REG_GLOVE_MODE_EN, &val);
+	count = snprintf(buf + count, PAGE_SIZE, "Glove Mode:%s\n",
+					 ts_data->glove_mode ? "On" : "Off");
+	count += snprintf(buf + count, PAGE_SIZE, "Glove Reg(0xC0):%d\n", val);
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_glove_mode_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	int ret = 0;
+	struct fts_ts_data *ts_data = fts_data;
+
+	if (FTS_SYSFS_ECHO_ON(buf)) {
+		if (!ts_data->glove_mode) {
+			FTS_DEBUG("enter glove mode");
+			ret = fts_ex_mode_switch(MODE_GLOVE, ENABLE);
+			if (ret >= 0) {
+				ts_data->glove_mode = ENABLE;
+			}
+		}
+	} else if (FTS_SYSFS_ECHO_OFF(buf)) {
+		if (ts_data->glove_mode) {
+			FTS_DEBUG("exit glove mode");
+			ret = fts_ex_mode_switch(MODE_GLOVE, DISABLE);
+			if (ret >= 0) {
+				ts_data->glove_mode = DISABLE;
+			}
+		}
+	}
+
+	FTS_DEBUG("glove mode:%d", ts_data->glove_mode);
+	return count;
+}
+
+
+static ssize_t fts_cover_mode_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	u8 val = 0;
+	struct fts_ts_data *ts_data = fts_data;
+	struct input_dev *input_dev = ts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	fts_read_reg(FTS_REG_COVER_MODE_EN, &val);
+	count = snprintf(buf + count, PAGE_SIZE, "Cover Mode:%s\n",
+					 ts_data->cover_mode ? "On" : "Off");
+	count += snprintf(buf + count, PAGE_SIZE, "Cover Reg(0xC1):%d\n", val);
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_cover_mode_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	int ret = 0;
+	struct fts_ts_data *ts_data = fts_data;
+
+	if (FTS_SYSFS_ECHO_ON(buf)) {
+		if (!ts_data->cover_mode) {
+			FTS_DEBUG("enter cover mode");
+			ret = fts_ex_mode_switch(MODE_COVER, ENABLE);
+			if (ret >= 0) {
+				ts_data->cover_mode = ENABLE;
+			}
+		}
+	} else if (FTS_SYSFS_ECHO_OFF(buf)) {
+		if (ts_data->cover_mode) {
+			FTS_DEBUG("exit cover mode");
+			ret = fts_ex_mode_switch(MODE_COVER, DISABLE);
+			if (ret >= 0) {
+				ts_data->cover_mode = DISABLE;
+			}
+		}
+	}
+
+	FTS_DEBUG("cover mode:%d", ts_data->cover_mode);
+	return count;
+}
+
+static ssize_t fts_charger_mode_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	u8 val = 0;
+	struct fts_ts_data *ts_data = fts_data;
+	struct input_dev *input_dev = ts_data->input_dev;
+
+	mutex_lock(&input_dev->mutex);
+	fts_read_reg(FTS_REG_CHARGER_MODE_EN, &val);
+	count = snprintf(buf + count, PAGE_SIZE, "Charger Mode:%s\n",
+					 ts_data->charger_mode ? "On" : "Off");
+	count += snprintf(buf + count, PAGE_SIZE, "Charger Reg(0x8B):%d\n", val);
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_charger_mode_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	int ret = 0;
+	struct fts_ts_data *ts_data = fts_data;
+
+	if (FTS_SYSFS_ECHO_ON(buf)) {
+		if (!ts_data->charger_mode) {
+			FTS_DEBUG("enter charger mode");
+			ret = fts_ex_mode_switch(MODE_CHARGER, ENABLE);
+			if (ret >= 0) {
+				ts_data->charger_mode = ENABLE;
+			}
+		}
+	} else if (FTS_SYSFS_ECHO_OFF(buf)) {
+		if (ts_data->charger_mode) {
+			FTS_DEBUG("exit charger mode");
+			ret = fts_ex_mode_switch(MODE_CHARGER, DISABLE);
+			if (ret >= 0) {
+				ts_data->charger_mode = DISABLE;
+			}
+		}
+	}
+
+	FTS_DEBUG("charger mode:%d", ts_data->glove_mode);
+	return count;
+}
+
+
+/* read and write charger mode
+ * read example: cat fts_glove_mode        ---read  glove mode
+ * write example:echo 1 > fts_glove_mode   ---write glove mode to 01
+ */
+static DEVICE_ATTR(fts_glove_mode, S_IRUGO | S_IWUSR,
+				   fts_glove_mode_show, fts_glove_mode_store);
+
+static DEVICE_ATTR(fts_cover_mode, S_IRUGO | S_IWUSR,
+				   fts_cover_mode_show, fts_cover_mode_store);
+
+static DEVICE_ATTR(fts_charger_mode, S_IRUGO | S_IWUSR,
+				   fts_charger_mode_show, fts_charger_mode_store);
+
+static struct attribute *fts_touch_mode_attrs[] = {
+	&dev_attr_fts_glove_mode.attr,
+	&dev_attr_fts_cover_mode.attr,
+	&dev_attr_fts_charger_mode.attr,
+	NULL,
+};
+
+static struct attribute_group fts_touch_mode_group = {
+	.attrs = fts_touch_mode_attrs,
+};
+
+int fts_ex_mode_recovery(struct fts_ts_data *ts_data)
+{
+	if (ts_data->glove_mode) {
+		fts_ex_mode_switch(MODE_GLOVE, ENABLE);
+	}
+
+	if (ts_data->cover_mode) {
+		fts_ex_mode_switch(MODE_COVER, ENABLE);
+	}
+
+	if (ts_data->charger_mode) {
+		fts_ex_mode_switch(MODE_CHARGER, ENABLE);
+	}
+
+	return 0;
+}
+
+int fts_ex_mode_init(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+
+	ts_data->glove_mode = DISABLE;
+	ts_data->cover_mode = DISABLE;
+	ts_data->charger_mode = DISABLE;
+
+	ret = sysfs_create_group(&ts_data->dev->kobj, &fts_touch_mode_group);
+	if (ret < 0) {
+		FTS_ERROR("create sysfs(ex_mode) fail");
+		sysfs_remove_group(&ts_data->dev->kobj, &fts_touch_mode_group);
+		return ret;
+	} else {
+		FTS_DEBUG("create sysfs(ex_mode) succeedfully");
+	}
+
+	return 0;
+}
+
+int fts_ex_mode_exit(struct fts_ts_data *ts_data)
+{
+	sysfs_remove_group(&ts_data->dev->kobj, &fts_touch_mode_group);
+	return 0;
+}
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_flash.c b/drivers/input/touchscreen/ft8756_spi/focaltech_flash.c
new file mode 100644
index 00000000000000..ac25afa02b0a07
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_flash.c
@@ -0,0 +1,2117 @@
+/*
+ *
+ * FocalTech fts TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, Focaltech Ltd. All rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*****************************************************************************
+*
+* File Name: focaltech_flash.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-08
+*
+* Abstract:
+*
+* Reference:
+*
+*****************************************************************************/
+
+/*****************************************************************************
+* 1.Included header files
+*****************************************************************************/
+#include "focaltech_core.h"
+#include "focaltech_flash.h"
+
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define FTS_FW_REQUEST_SUPPORT                      1
+/* Example: focaltech_ts_fw_tianma.bin */
+#define FTS_FW_NAME_PREX_WITH_REQUEST               "focaltech_ts_fw"
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+u8 fw_file[] = {
+#include FTS_UPGRADE_FW_FILE
+};
+
+u8 fw_file2[] = {
+#include FTS_UPGRADE_FW2_FILE
+};
+
+u8 fw_file3[] = {
+#include FTS_UPGRADE_FW3_FILE
+};
+
+struct upgrade_module module_list[] = {
+	{FTS_MODULE_ID, FTS_MODULE_NAME, fw_file, sizeof(fw_file)},
+	{FTS_MODULE2_ID, FTS_MODULE2_NAME, fw_file2, sizeof(fw_file2)},
+	{FTS_MODULE3_ID, FTS_MODULE3_NAME, fw_file3, sizeof(fw_file3)},
+};
+
+struct upgrade_func *upgrade_func_list[] = {
+	&upgrade_func_ft5652,
+};
+
+struct fts_upgrade *fwupgrade;
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+static bool fts_fwupg_check_state(
+	struct fts_upgrade *upg, enum FW_STATUS rstate);
+
+/************************************************************************
+* Name: fts_fwupg_get_boot_state
+* Brief: read boot id(rom/pram/bootloader), confirm boot environment
+* Input:
+* Output:
+* Return: return 0 if success, otherwise return error code
+***********************************************************************/
+static int fts_fwupg_get_boot_state(
+	struct fts_upgrade *upg,
+	enum FW_STATUS *fw_sts)
+{
+	int ret = 0;
+	u8 cmd[4] = { 0 };
+	u32 cmd_len = 0;
+	u8 val[2] = { 0 };
+	struct ft_chip_t *ids = NULL;
+
+	FTS_INFO("**********read boot id**********");
+	if ((!upg) || (!upg->func) || (!upg->ts_data) || (!fw_sts)) {
+		FTS_ERROR("upg/func/ts_data/fw_sts is null");
+		return -EINVAL;
+	}
+
+	if (upg->func->hid_supported)
+		fts_hid2std();
+
+	cmd[0] = 0xF1;
+	cmd[1] = 0x50;
+	ret = fts_write(cmd, 2);
+	if (ret < 0) {
+		FTS_ERROR("write 0x50 to F1 fail");
+		return ret;
+	}
+
+	cmd[0] = FTS_CMD_START1;
+	cmd[1] = FTS_CMD_START2;
+	if (upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0)
+		cmd_len = 1;
+	else
+		cmd_len = 2;
+	ret = fts_write(cmd, cmd_len);
+	if (ret < 0) {
+		FTS_ERROR("write 55 cmd fail");
+		return ret;
+	}
+
+	msleep(FTS_CMD_START_DELAY);
+	cmd[0] = FTS_CMD_READ_ID;
+	cmd[1] = cmd[2] = cmd[3] = 0x00;
+	if (fts_data->ic_info.is_incell ||
+		(upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0))
+		cmd_len = FTS_CMD_READ_ID_LEN_INCELL;
+	else
+		cmd_len = FTS_CMD_READ_ID_LEN;
+	ret = fts_read(cmd, cmd_len, val, 2);
+	if (ret < 0) {
+		FTS_ERROR("write 90 cmd fail");
+		return ret;
+	}
+	FTS_INFO("read boot id:0x%02x%02x", val[0], val[1]);
+
+	ids = &upg->ts_data->ic_info.ids;
+	if ((val[0] == ids->rom_idh) && (val[1] == ids->rom_idl)) {
+		FTS_INFO("tp run in romboot");
+		*fw_sts = FTS_RUN_IN_ROM;
+	} else if ((val[0] == ids->pb_idh) && (val[1] == ids->pb_idl)) {
+		FTS_INFO("tp run in pramboot");
+		*fw_sts = FTS_RUN_IN_PRAM;
+	} else if ((val[0] == ids->bl_idh) && (val[1] == ids->bl_idl)) {
+		FTS_INFO("tp run in bootloader");
+		*fw_sts = FTS_RUN_IN_BOOTLOADER;
+	}
+
+	return 0;
+}
+
+static int fts_fwupg_reset_to_boot(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	u8 reg = FTS_REG_UPGRADE;
+
+	FTS_INFO("send 0xAA and 0x55 to FW, reset to boot environment");
+	if (upg && upg->func && upg->func->is_reset_register_BC) {
+		reg = FTS_REG_UPGRADE2;
+	}
+
+	ret = fts_write_reg(reg, FTS_UPGRADE_AA);
+	if (ret < 0) {
+		FTS_ERROR("write FC=0xAA fail");
+		return ret;
+	}
+	msleep(FTS_DELAY_UPGRADE_AA);
+
+	ret = fts_write_reg(reg, FTS_UPGRADE_55);
+	if (ret < 0) {
+		FTS_ERROR("write FC=0x55 fail");
+		return ret;
+	}
+
+	msleep(FTS_DELAY_UPGRADE_RESET);
+	return 0;
+}
+
+/************************************************************************
+* Name: fts_fwupg_reset_to_romboot
+* Brief: reset to romboot, to load pramboot
+* Input:
+* Output:
+* Return: return 0 if success, otherwise return error code
+***********************************************************************/
+static int fts_fwupg_reset_to_romboot(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	int i = 0;
+	u8 cmd = FTS_CMD_RESET;
+	enum FW_STATUS state = FTS_RUN_IN_ERROR;
+
+	ret = fts_write(&cmd, 1);
+	if (ret < 0) {
+		FTS_ERROR("pram/rom/bootloader reset cmd write fail");
+		return ret;
+	}
+	mdelay(10);
+
+	for (i = 0; i < FTS_UPGRADE_LOOP; i++) {
+		ret = fts_fwupg_get_boot_state(upg, &state);
+		if (FTS_RUN_IN_ROM == state)
+			break;
+		mdelay(5);
+	}
+	if (i >= FTS_UPGRADE_LOOP) {
+		FTS_ERROR("reset to romboot fail");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static u16 fts_crc16_calc_host(u8 *pbuf, u32 length)
+{
+	u16 ecc = 0;
+	u32 i = 0;
+	u32 j = 0;
+
+	for (i = 0; i < length; i += 2) {
+		ecc ^= ((pbuf[i] << 8) | (pbuf[i + 1]));
+		for (j = 0; j < 16; j++) {
+			if (ecc & 0x01)
+				ecc = (u16)((ecc >> 1) ^ AL2_FCS_COEF);
+			else
+				ecc >>= 1;
+		}
+	}
+
+	return ecc;
+}
+
+static u16 fts_pram_ecc_calc_host(u8 *pbuf, u32 length)
+{
+	return fts_crc16_calc_host(pbuf, length);
+}
+
+static int fts_pram_ecc_cal_algo(
+	struct fts_upgrade *upg,
+	u32 start_addr,
+	u32 ecc_length)
+{
+	int ret = 0;
+	int i = 0;
+	int ecc = 0;
+	u8 val[2] = { 0 };
+	u8 tmp = 0;
+	u8 cmd[FTS_ROMBOOT_CMD_ECC_NEW_LEN] = { 0 };
+
+	FTS_INFO("read out pramboot checksum");
+	if ((!upg) || (!upg->func)) {
+		FTS_ERROR("upg/func is null");
+		return -EINVAL;
+	}
+
+	cmd[0] = FTS_ROMBOOT_CMD_ECC;
+	cmd[1] = BYTE_OFF_16(start_addr);
+	cmd[2] = BYTE_OFF_8(start_addr);
+	cmd[3] = BYTE_OFF_0(start_addr);
+	cmd[4] = BYTE_OFF_16(ecc_length);
+	cmd[5] = BYTE_OFF_8(ecc_length);
+	cmd[6] = BYTE_OFF_0(ecc_length);
+	ret = fts_write(cmd, FTS_ROMBOOT_CMD_ECC_NEW_LEN);
+	if (ret < 0) {
+		FTS_ERROR("write pramboot ecc cal cmd fail");
+		return ret;
+	}
+
+	cmd[0] = FTS_ROMBOOT_CMD_ECC_FINISH;
+	for (i = 0; i < FTS_ECC_FINISH_TIMEOUT; i++) {
+		msleep(1);
+		ret = fts_read(cmd, 1, val, 1);
+		if (ret < 0) {
+			FTS_ERROR("ecc_finish read cmd fail");
+			return ret;
+		}
+		if (upg->func->new_return_value_from_ic ||
+			(upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0)) {
+			tmp = FTS_ROMBOOT_CMD_ECC_FINISH_OK_A5;
+		} else {
+			tmp = FTS_ROMBOOT_CMD_ECC_FINISH_OK_00;
+		}
+		if (tmp == val[0])
+			break;
+	}
+	if (i >= FTS_ECC_FINISH_TIMEOUT) {
+		FTS_ERROR("wait ecc finish fail");
+		return -EIO;
+	}
+
+	cmd[0] = FTS_ROMBOOT_CMD_ECC_READ;
+	ret = fts_read(cmd, 1, val, 2);
+	if (ret < 0) {
+		FTS_ERROR("read pramboot ecc fail");
+		return ret;
+	}
+
+	ecc = ((u16)(val[0] << 8) + val[1]) & 0x0000FFFF;
+	return ecc;
+}
+
+static int fts_pram_ecc_cal_xor(void)
+{
+	int ret = 0;
+	u8 reg_val = 0;
+
+	FTS_INFO("read out pramboot checksum");
+
+	ret = fts_read_reg(FTS_ROMBOOT_CMD_ECC, &reg_val);
+	if (ret < 0) {
+		FTS_ERROR("read pramboot ecc fail");
+		return ret;
+	}
+
+	return (int)reg_val;
+}
+
+static int fts_pram_ecc_cal(struct fts_upgrade *upg, u32 saddr, u32 len)
+{
+	if ((!upg) || (!upg->func)) {
+		FTS_ERROR("upg/func is null");
+		return -EINVAL;
+	}
+
+	if ((ECC_CHECK_MODE_CRC16 == upg->func->pram_ecc_check_mode) ||
+		(upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0)) {
+		return fts_pram_ecc_cal_algo(upg, saddr, len);
+	} else {
+		return fts_pram_ecc_cal_xor();
+	}
+}
+
+static int fts_pram_write_buf(struct fts_upgrade *upg, u8 *buf, u32 len)
+{
+	int ret = 0;
+	u32 i = 0;
+	u32 j = 0;
+	u32 offset = 0;
+	u32 remainder = 0;
+	u32 packet_number;
+	u32 packet_len = 0;
+	u8 packet_buf[FTS_FLASH_PACKET_LENGTH + FTS_CMD_WRITE_LEN] = { 0 };
+	u8 ecc_tmp = 0;
+	int ecc_in_host = 0;
+	u32 cmdlen = 0;
+
+	FTS_INFO("write pramboot to pram");
+	if ((!upg) || (!upg->func) || !buf) {
+		FTS_ERROR("upg/func/buf is null");
+		return -EINVAL;
+	}
+
+	FTS_INFO("pramboot len=%d", len);
+	if ((len < PRAMBOOT_MIN_SIZE) || (len > PRAMBOOT_MAX_SIZE)) {
+		FTS_ERROR("pramboot length(%d) fail", len);
+		return -EINVAL;
+	}
+
+	packet_number = len / FTS_FLASH_PACKET_LENGTH;
+	remainder = len % FTS_FLASH_PACKET_LENGTH;
+	if (remainder > 0)
+		packet_number++;
+	packet_len = FTS_FLASH_PACKET_LENGTH;
+
+	for (i = 0; i < packet_number; i++) {
+		offset = i * FTS_FLASH_PACKET_LENGTH;
+		/* last packet */
+		if ((i == (packet_number - 1)) && remainder)
+			packet_len = remainder;
+
+		if (upg->ts_data->bus_type == BUS_TYPE_SPI_V2) {
+			packet_buf[0] = FTS_ROMBOOT_CMD_SET_PRAM_ADDR;
+			packet_buf[1] = BYTE_OFF_16(offset);
+			packet_buf[2] = BYTE_OFF_8(offset);
+			packet_buf[3] = BYTE_OFF_0(offset);
+
+			ret = fts_write(packet_buf, FTS_ROMBOOT_CMD_SET_PRAM_ADDR_LEN);
+			if (ret < 0) {
+				FTS_ERROR("pramboot set write address(%d) fail", i);
+				return ret;
+			}
+
+			packet_buf[0] = FTS_ROMBOOT_CMD_WRITE;
+			cmdlen = 1;
+		} else {
+			packet_buf[0] = FTS_ROMBOOT_CMD_WRITE;
+			packet_buf[1] = BYTE_OFF_16(offset);
+			packet_buf[2] = BYTE_OFF_8(offset);
+			packet_buf[3] = BYTE_OFF_0(offset);
+
+			packet_buf[4] = BYTE_OFF_8(packet_len);
+			packet_buf[5] = BYTE_OFF_0(packet_len);
+			cmdlen = 6;
+		}
+
+		for (j = 0; j < packet_len; j++) {
+			packet_buf[cmdlen + j] = buf[offset + j];
+			if (ECC_CHECK_MODE_XOR == upg->func->pram_ecc_check_mode) {
+				ecc_tmp ^= packet_buf[cmdlen + j];
+			}
+		}
+
+		ret = fts_write(packet_buf, packet_len + cmdlen);
+		if (ret < 0) {
+			FTS_ERROR("pramboot write data(%d) fail", i);
+			return ret;
+		}
+	}
+
+	if ((ECC_CHECK_MODE_CRC16 == upg->func->pram_ecc_check_mode) ||
+		(upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0)) {
+		ecc_in_host = (int)fts_pram_ecc_calc_host(buf, len);
+	} else {
+		ecc_in_host = (int)ecc_tmp;
+	}
+
+	return ecc_in_host;
+}
+
+static int fts_pram_start(void)
+{
+	u8 cmd = FTS_ROMBOOT_CMD_START_APP;
+	int ret = 0;
+
+	FTS_INFO("remap to start pramboot");
+
+	ret = fts_write(&cmd, 1);
+	if (ret < 0) {
+		FTS_ERROR("write start pram cmd fail");
+		return ret;
+	}
+	msleep(FTS_DELAY_PRAMBOOT_START);
+
+	return 0;
+}
+
+static int fts_pram_write_remap(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	int ecc_in_host = 0;
+	int ecc_in_tp = 0;
+	u8 *pb_buf = NULL;
+	u32 pb_len = 0;
+
+	FTS_INFO("write pram and remap");
+	if (!upg || !upg->func || !upg->func->pramboot) {
+		FTS_ERROR("upg/func/pramboot is null");
+		return -EINVAL;
+	}
+
+	if (upg->func->pb_length < FTS_MIN_LEN) {
+		FTS_ERROR("pramboot length(%d) fail", upg->func->pb_length);
+		return -EINVAL;
+	}
+
+	pb_buf = upg->func->pramboot;
+	pb_len = upg->func->pb_length;
+
+	/* write pramboot to pram */
+	ecc_in_host = fts_pram_write_buf(upg, pb_buf, pb_len);
+	if (ecc_in_host < 0) {
+		FTS_ERROR("write pramboot fail");
+		return ecc_in_host;
+	}
+
+	/* read out checksum */
+	ecc_in_tp = fts_pram_ecc_cal(upg, 0, pb_len);
+	if (ecc_in_tp < 0) {
+		FTS_ERROR("read pramboot ecc fail");
+		return ecc_in_tp;
+	}
+
+	FTS_INFO("pram ecc in tp:%x, host:%x", ecc_in_tp, ecc_in_host);
+	/*  pramboot checksum != fw checksum, upgrade fail */
+	if (ecc_in_host != ecc_in_tp) {
+		FTS_ERROR("pramboot ecc check fail");
+		return -EIO;
+	}
+
+	/*start pram*/
+	ret = fts_pram_start();
+	if (ret < 0) {
+		FTS_ERROR("pram start fail");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int fts_pram_init(void)
+{
+	int ret = 0;
+	u8 reg_val = 0;
+	u8 wbuf[3] = { 0 };
+
+	FTS_INFO("pramboot initialization");
+
+	/* read flash ID */
+	wbuf[0] = FTS_CMD_FLASH_TYPE;
+	ret = fts_read(wbuf, 1, &reg_val, 1);
+	if (ret < 0) {
+		FTS_ERROR("read flash type fail");
+		return ret;
+	}
+
+	/* set flash clk */
+	wbuf[0] = FTS_CMD_FLASH_TYPE;
+	wbuf[1] = reg_val;
+	wbuf[2] = 0x00;
+	ret = fts_write(wbuf, 3);
+	if (ret < 0) {
+		FTS_ERROR("write flash type fail");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int fts_pram_write_init(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	bool state = 0;
+	enum FW_STATUS status = FTS_RUN_IN_ERROR;
+
+	FTS_INFO("**********pram write and init**********");
+	if ((NULL == upg) || (NULL == upg->func)) {
+		FTS_ERROR("upgrade/func is null");
+		return -EINVAL;
+	}
+
+	if (!upg->func->pramboot_supported) {
+		FTS_ERROR("ic not support pram");
+		return -EINVAL;
+	}
+
+	FTS_DEBUG("check whether tp is in romboot or not ");
+	/* need reset to romboot when non-romboot state */
+	ret = fts_fwupg_get_boot_state(upg, &status);
+	if (status != FTS_RUN_IN_ROM) {
+		if (FTS_RUN_IN_PRAM == status) {
+			FTS_INFO("tp is in pramboot, need send reset cmd before upgrade");
+			ret = fts_pram_init();
+			if (ret < 0) {
+				FTS_ERROR("pramboot(before) init fail");
+				return ret;
+			}
+		}
+
+		FTS_INFO("tp isn't in romboot, need send reset to romboot");
+		ret = fts_fwupg_reset_to_romboot(upg);
+		if (ret < 0) {
+			FTS_ERROR("reset to romboot fail");
+			return ret;
+		}
+	}
+
+	/* check the length of the pramboot */
+	ret = fts_pram_write_remap(upg);
+	if (ret < 0) {
+		FTS_ERROR("pram write fail, ret=%d", ret);
+		return ret;
+	}
+
+	FTS_DEBUG("after write pramboot, confirm run in pramboot");
+	state = fts_fwupg_check_state(upg, FTS_RUN_IN_PRAM);
+	if (!state) {
+		FTS_ERROR("not in pramboot");
+		return -EIO;
+	}
+
+	ret = fts_pram_init();
+	if (ret < 0) {
+		FTS_ERROR("pramboot init fail");
+		return ret;
+	}
+
+	return 0;
+}
+
+static bool fts_fwupg_check_fw_valid(void)
+{
+	int ret = 0;
+
+	ret = fts_wait_tp_to_valid();
+	if (ret < 0) {
+		FTS_INFO("tp fw invaild");
+		return false;
+	}
+
+	FTS_INFO("tp fw vaild");
+	return true;
+}
+
+/************************************************************************
+* Name: fts_fwupg_check_state
+* Brief: confirm tp run in which mode: romboot/pramboot/bootloader
+* Input:
+* Output:
+* Return: return true if state is match, otherwise return false
+***********************************************************************/
+static bool fts_fwupg_check_state(
+	struct fts_upgrade *upg, enum FW_STATUS rstate)
+{
+	int ret = 0;
+	int i = 0;
+	enum FW_STATUS cstate = FTS_RUN_IN_ERROR;
+
+	for (i = 0; i < FTS_UPGRADE_LOOP; i++) {
+		ret = fts_fwupg_get_boot_state(upg, &cstate);
+		/* FTS_DEBUG("fw state=%d, retries=%d", cstate, i); */
+		if (cstate == rstate)
+			return true;
+		msleep(FTS_DELAY_READ_ID);
+	}
+
+	return false;
+}
+
+/************************************************************************
+* Name: fts_fwupg_reset_in_boot
+* Brief: RST CMD(07), reset to romboot(bootloader) in boot environment
+* Input:
+* Output:
+* Return: return 0 if success, otherwise return error code
+***********************************************************************/
+int fts_fwupg_reset_in_boot(void)
+{
+	int ret = 0;
+	u8 cmd = FTS_CMD_RESET;
+
+	FTS_INFO("reset in boot environment");
+	ret = fts_write(&cmd, 1);
+	if (ret < 0) {
+		FTS_ERROR("pram/rom/bootloader reset cmd write fail");
+		return ret;
+	}
+
+	msleep(FTS_DELAY_UPGRADE_RESET);
+	return 0;
+}
+
+/************************************************************************
+* Name: fts_fwupg_enter_into_boot
+* Brief: enter into boot environment, ready for upgrade
+* Input:
+* Output:
+* Return: return 0 if success, otherwise return error code
+***********************************************************************/
+int fts_fwupg_enter_into_boot(void)
+{
+	int ret = 0;
+	bool fwvalid = false;
+	bool state = false;
+	struct fts_upgrade *upg = fwupgrade;
+
+	FTS_INFO("***********enter into pramboot/bootloader***********");
+	if ((!upg) || (NULL == upg->func)) {
+		FTS_ERROR("upgrade/func is null");
+		return -EINVAL;
+	}
+
+	fwvalid = fts_fwupg_check_fw_valid();
+	if (fwvalid) {
+		ret = fts_fwupg_reset_to_boot(upg);
+		if (ret < 0) {
+			FTS_ERROR("enter into romboot/bootloader fail");
+			return ret;
+		}
+	} else if (upg->func->read_boot_id_need_reset) {
+		ret = fts_fwupg_reset_in_boot();
+		if (ret < 0) {
+			FTS_ERROR("reset before read boot id when fw invalid fail");
+			return ret;
+		}
+	}
+
+	if (upg->func->pramboot_supported) {
+		FTS_INFO("pram supported, write pramboot and init");
+		/* pramboot */
+		if (upg->func->write_pramboot_private)
+			ret = upg->func->write_pramboot_private();
+		else
+			ret = fts_pram_write_init(upg);
+		if (ret < 0) {
+			FTS_ERROR("pram write_init fail");
+			return ret;
+		}
+	} else {
+		FTS_DEBUG("pram not supported, confirm in bootloader");
+		/* bootloader */
+		state = fts_fwupg_check_state(upg, FTS_RUN_IN_BOOTLOADER);
+		if (!state) {
+			FTS_ERROR("fw not in bootloader, fail");
+			return -EIO;
+		}
+	}
+
+	return 0;
+}
+
+/************************************************************************
+ * Name: fts_fwupg_check_flash_status
+ * Brief: read status from tp
+ * Input: flash_status: correct value from tp
+ *        retries: read retry times
+ *        retries_delay: retry delay
+ * Output:
+ * Return: return true if flash status check pass, otherwise return false
+***********************************************************************/
+static bool fts_fwupg_check_flash_status(
+	u16 flash_status,
+	int retries,
+	int retries_delay)
+{
+	int ret = 0;
+	int i = 0;
+	u8 cmd = 0;
+	u8 val[FTS_CMD_FLASH_STATUS_LEN] = { 0 };
+	u16 read_status = 0;
+
+	for (i = 0; i < retries; i++) {
+		cmd = FTS_CMD_FLASH_STATUS;
+		ret = fts_read(&cmd, 1, val, FTS_CMD_FLASH_STATUS_LEN);
+		read_status = (((u16)val[0]) << 8) + val[1];
+		if (flash_status == read_status) {
+			/* FTS_DEBUG("[UPGRADE]flash status ok"); */
+			return true;
+		}
+		/* FTS_DEBUG("flash status fail,ok:%04x read:%04x, retries:%d", flash_status, read_status, i); */
+		msleep(retries_delay);
+	}
+
+	return false;
+}
+
+/************************************************************************
+ * Name: fts_fwupg_erase
+ * Brief: erase flash area
+ * Input: delay - delay after erase
+ * Output:
+ * Return: return 0 if success, otherwise return error code
+ ***********************************************************************/
+int fts_fwupg_erase(u32 delay)
+{
+	int ret = 0;
+	u8 cmd = 0;
+	bool flag = false;
+
+	FTS_INFO("**********erase now**********");
+
+	/*send to erase flash*/
+	cmd = FTS_CMD_ERASE_APP;
+	ret = fts_write(&cmd, 1);
+	if (ret < 0) {
+		FTS_ERROR("erase cmd fail");
+		return ret;
+	}
+	msleep(delay);
+
+	/* read status 0xF0AA: success */
+	flag = fts_fwupg_check_flash_status(FTS_CMD_FLASH_STATUS_ERASE_OK,
+										FTS_RETRIES_REASE,
+										FTS_RETRIES_DELAY_REASE);
+	if (!flag) {
+		FTS_ERROR("ecc flash status check fail");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+/************************************************************************
+ * Name: fts_fwupg_ecc_cal
+ * Brief: calculate and get ecc from tp
+ * Input: saddr - start address need calculate ecc
+ *        len - length need calculate ecc
+ * Output:
+ * Return: return data ecc of tp if success, otherwise return error code
+ ***********************************************************************/
+int fts_fwupg_ecc_cal(u32 saddr, u32 len)
+{
+	int ret = 0;
+	u32 i = 0;
+	u32 cmdlen = FTS_CMD_ECC_CAL_LEN;
+	u8 wbuf[FTS_CMD_ECC_CAL_LEN] = { 0 };
+	u8 val[FTS_CMD_FLASH_STATUS_LEN] = { 0 };
+	int ecc = 0;
+	int ecc_len = 0;
+	u32 packet_num = 0;
+	u32 packet_len = 0;
+	u32 remainder = 0;
+	u32 addr = 0;
+	u32 offset = 0;
+	bool bflag = false;
+	struct fts_upgrade *upg = fwupgrade;
+
+	FTS_INFO("**********read out checksum**********");
+	if ((NULL == upg) || (NULL == upg->func)) {
+		FTS_ERROR("upgrade/func is null");
+		return -EINVAL;
+	}
+
+	/* check sum init */
+	wbuf[0] = FTS_CMD_ECC_INIT;
+	ret = fts_write(wbuf, 1);
+	if (ret < 0) {
+		FTS_ERROR("ecc init cmd write fail");
+		return ret;
+	}
+
+	if (upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0) {
+		packet_num = 1;
+		remainder = 0;
+		packet_len = len;
+	} else {
+		packet_num = len / FTS_MAX_LEN_ECC_CALC;
+		remainder = len % FTS_MAX_LEN_ECC_CALC;
+		if (remainder)
+			packet_num++;
+		packet_len = FTS_MAX_LEN_ECC_CALC;
+	}
+	FTS_INFO("ecc calc num:%d, remainder:%d", packet_num, remainder);
+
+	/* send commond to start checksum */
+	wbuf[0] = FTS_CMD_ECC_CAL;
+	for (i = 0; i < packet_num; i++) {
+		offset = FTS_MAX_LEN_ECC_CALC * i;
+		addr = saddr + offset;
+		wbuf[1] = BYTE_OFF_16(addr);
+		wbuf[2] = BYTE_OFF_8(addr);
+		wbuf[3] = BYTE_OFF_0(addr);
+
+		if ((upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0)) {
+			wbuf[4] = BYTE_OFF_16(packet_len);
+			wbuf[5] = BYTE_OFF_8(packet_len);
+			wbuf[6] = BYTE_OFF_0(packet_len);
+			cmdlen = FTS_CMD_ECC_CAL_LEN;
+		} else {
+			if ((i == (packet_num - 1)) && remainder)
+				packet_len = remainder;
+			wbuf[4] = BYTE_OFF_8(packet_len);
+			wbuf[5] = BYTE_OFF_0(packet_len);
+			cmdlen = FTS_CMD_ECC_CAL_LEN - 1;
+		}
+
+		FTS_DEBUG("ecc calc startaddr:0x%04x, len:%d", addr, packet_len);
+		ret = fts_write(wbuf, cmdlen);
+		if (ret < 0) {
+			FTS_ERROR("ecc calc cmd write fail");
+			return ret;
+		}
+
+		msleep(packet_len / 256);
+
+		/* read status if check sum is finished */
+		bflag = fts_fwupg_check_flash_status(FTS_CMD_FLASH_STATUS_ECC_OK,
+											 FTS_RETRIES_ECC_CAL,
+											 FTS_RETRIES_DELAY_ECC_CAL);
+		if (!bflag) {
+			FTS_ERROR("ecc flash status read fail");
+			return -EIO;
+		}
+	}
+
+	ecc_len = 1;
+	if ((ECC_CHECK_MODE_CRC16 == upg->func->fw_ecc_check_mode) ||
+		(upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0)) {
+		ecc_len = 2;
+	}
+
+	/* read out check sum */
+	wbuf[0] = FTS_CMD_ECC_READ;
+	ret = fts_read(wbuf, 1, val, ecc_len);
+	if (ret < 0) {
+		FTS_ERROR("ecc read cmd write fail");
+		return ret;
+	}
+
+	if ((ECC_CHECK_MODE_CRC16 == upg->func->fw_ecc_check_mode) ||
+		(upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0)) {
+		ecc = (int)((u16)(val[0] << 8) + val[1]);
+	} else {
+		ecc = (int)val[0];
+	}
+
+	return ecc;
+}
+
+/************************************************************************
+ * Name: fts_flash_write_buf
+ * Brief: write buf data to flash address
+ * Input: saddr - start address data write to flash
+ *        buf - data buffer
+ *        len - data length
+ *        delay - delay after write
+ * Output:
+ * Return: return data ecc of host if success, otherwise return error code
+ ***********************************************************************/
+int fts_flash_write_buf(
+	u32 saddr,
+	u8 *buf,
+	u32 len,
+	u32 delay)
+{
+	int ret = 0;
+	u32 i = 0;
+	u32 j = 0;
+	u32 packet_number = 0;
+	u32 packet_len = 0;
+	u32 addr = 0;
+	u32 offset = 0;
+	u32 remainder = 0;
+	u32 cmdlen = 0;
+	u8 packet_buf[FTS_FLASH_PACKET_LENGTH + FTS_CMD_WRITE_LEN] = { 0 };
+	u8 ecc_tmp = 0;
+	int ecc_in_host = 0;
+	u8 cmd = 0;
+	u8 val[FTS_CMD_FLASH_STATUS_LEN] = { 0 };
+	u16 read_status = 0;
+	u16 wr_ok = 0;
+	struct fts_upgrade *upg = fwupgrade;
+
+	FTS_INFO("**********write data to flash**********");
+	if ((!upg) || (!upg->func || !buf || !len)) {
+		FTS_ERROR("upgrade/func/buf/len is invalid");
+		return -EINVAL;
+	}
+
+	FTS_INFO("data buf start addr=0x%x, len=0x%x", saddr, len);
+	packet_number = len / FTS_FLASH_PACKET_LENGTH;
+	remainder = len % FTS_FLASH_PACKET_LENGTH;
+	if (remainder > 0)
+		packet_number++;
+	packet_len = FTS_FLASH_PACKET_LENGTH;
+	FTS_INFO("write data, num:%d remainder:%d", packet_number, remainder);
+
+	for (i = 0; i < packet_number; i++) {
+		offset = i * FTS_FLASH_PACKET_LENGTH;
+		addr = saddr + offset;
+
+		/* last packet */
+		if ((i == (packet_number - 1)) && remainder)
+			packet_len = remainder;
+
+		if (upg->ts_data->bus_type == BUS_TYPE_SPI_V2) {
+			packet_buf[0] = FTS_CMD_SET_WFLASH_ADDR;
+			packet_buf[1] = BYTE_OFF_16(addr);
+			packet_buf[2] = BYTE_OFF_8(addr);
+			packet_buf[3] = BYTE_OFF_0(addr);
+			ret = fts_write(packet_buf, FTS_LEN_SET_ADDR);
+			if (ret < 0) {
+				FTS_ERROR("set flash address fail");
+				return ret;
+			}
+
+			packet_buf[0] = FTS_CMD_WRITE;
+			cmdlen = 1;
+		} else {
+			packet_buf[0] = FTS_CMD_WRITE;
+			packet_buf[1] = BYTE_OFF_16(addr);
+			packet_buf[2] = BYTE_OFF_8(addr);
+			packet_buf[3] = BYTE_OFF_0(addr);
+			packet_buf[4] = BYTE_OFF_8(packet_len);
+			packet_buf[5] = BYTE_OFF_0(packet_len);
+			cmdlen = 6;
+		}
+
+		for (j = 0; j < packet_len; j++) {
+			packet_buf[cmdlen + j] = buf[offset + j];
+			ecc_tmp ^= packet_buf[cmdlen + j];
+		}
+
+		ret = fts_write(packet_buf, packet_len + cmdlen);
+		if (ret < 0) {
+			FTS_ERROR("app write fail");
+			return ret;
+		}
+		mdelay(delay);
+
+		/* read status */
+		wr_ok = FTS_CMD_FLASH_STATUS_WRITE_OK + addr / packet_len;
+		for (j = 0; j < FTS_RETRIES_WRITE; j++) {
+			cmd = FTS_CMD_FLASH_STATUS;
+			ret = fts_read(&cmd, 1, val, FTS_CMD_FLASH_STATUS_LEN);
+			read_status = (((u16)val[0]) << 8) + val[1];
+			/*  FTS_INFO("%x %x", wr_ok, read_status); */
+			if (wr_ok == read_status) {
+				break;
+			}
+			mdelay(FTS_RETRIES_DELAY_WRITE);
+		}
+	}
+
+	ecc_in_host = (int)ecc_tmp;
+	if ((ECC_CHECK_MODE_CRC16 == upg->func->fw_ecc_check_mode) ||
+		(upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0)) {
+		ecc_in_host = (int)fts_crc16_calc_host(buf, len);
+	}
+
+	return ecc_in_host;
+}
+
+/************************************************************************
+ * Name: fts_flash_read_buf
+ * Brief: read data from flash
+ * Input: saddr - start address data write to flash
+ *        buf - buffer to store data read from flash
+ *        len - read length
+ * Output:
+ * Return: return 0 if success, otherwise return error code
+ *
+ * Warning: can't call this function directly, need call in boot environment
+ ***********************************************************************/
+static int fts_flash_read_buf(u32 saddr, u8 *buf, u32 len)
+{
+	int ret = 0;
+	u32 i = 0;
+	u32 packet_number = 0;
+	u32 packet_len = 0;
+	u32 addr = 0;
+	u32 offset = 0;
+	u32 remainder = 0;
+	u8 wbuf[FTS_CMD_READ_LEN_SPI] = { 0 };
+	struct fts_upgrade *upg = fwupgrade;
+
+	if (!upg || !buf || !len) {
+		FTS_ERROR("upgrade/buf is NULL or len is 0");
+		return -EINVAL;
+	}
+
+	packet_number = len / FTS_FLASH_PACKET_LENGTH;
+	remainder = len % FTS_FLASH_PACKET_LENGTH;
+	if (remainder > 0) {
+		packet_number++;
+	}
+	packet_len = FTS_FLASH_PACKET_LENGTH;
+	FTS_INFO("read packet_number:%d, remainder:%d", packet_number, remainder);
+
+
+	for (i = 0; i < packet_number; i++) {
+		offset = i * FTS_FLASH_PACKET_LENGTH;
+		addr = saddr + offset;
+		/* last packet */
+		if ((i == (packet_number - 1)) && remainder)
+			packet_len = remainder;
+
+		if (upg->ts_data->bus_type == BUS_TYPE_I2C) {
+			wbuf[0] = FTS_CMD_READ;
+			wbuf[1] = BYTE_OFF_16(addr);
+			wbuf[2] = BYTE_OFF_8(addr);
+			wbuf[3] = BYTE_OFF_0(addr);
+			ret = fts_write(wbuf, FTS_CMD_READ_LEN);
+			if (ret < 0) {
+				FTS_ERROR("pram/bootloader write 03 command fail");
+				return ret;
+			}
+
+			msleep(FTS_CMD_READ_DELAY); /* must wait, otherwise read wrong data */
+			ret = fts_read(NULL, 0, buf + offset, packet_len);
+			if (ret < 0) {
+				FTS_ERROR("pram/bootloader read 03 command fail");
+				return ret;
+			}
+		} else if (upg->ts_data->bus_type == BUS_TYPE_SPI_V2) {
+			wbuf[0] = FTS_CMD_SET_RFLASH_ADDR;
+			wbuf[1] = BYTE_OFF_16(addr);
+			wbuf[2] = BYTE_OFF_8(addr);
+			wbuf[3] = BYTE_OFF_0(addr);
+			ret = fts_write(wbuf, FTS_LEN_SET_ADDR);
+			if (ret < 0) {
+				FTS_ERROR("set flash address fail");
+				return ret;
+			}
+
+			msleep(FTS_CMD_READ_DELAY);
+			wbuf[0] = FTS_CMD_READ;
+			ret = fts_read(wbuf, 1, buf + offset, packet_len);
+			if (ret < 0) {
+				FTS_ERROR("pram/bootloader read 03(SPI_V2) command fail");
+				return ret;
+			}
+		} else if (upg->ts_data->bus_type == BUS_TYPE_SPI) {
+			wbuf[0] = FTS_CMD_READ;
+			wbuf[1] = BYTE_OFF_16(addr);
+			wbuf[2] = BYTE_OFF_8(addr);
+			wbuf[3] = BYTE_OFF_0(addr);
+			wbuf[4] = BYTE_OFF_8(packet_len);
+			wbuf[5] = BYTE_OFF_0(packet_len);
+			ret = fts_read(wbuf, FTS_CMD_READ_LEN_SPI, \
+						   buf + offset, packet_len);
+			if (ret < 0) {
+				FTS_ERROR("pram/bootloader read 03(SPI) command fail");
+				return ret;
+			}
+		}
+	}
+
+	return 0;
+}
+
+/************************************************************************
+ * Name: fts_flash_read
+ * Brief:
+ * Input:  addr  - address of flash
+ *         len   - length of read
+ * Output: buf   - data read from flash
+ * Return: return 0 if success, otherwise return error code
+ ***********************************************************************/
+static int fts_flash_read(u32 addr, u8 *buf, u32 len)
+{
+	int ret = 0;
+
+	FTS_INFO("***********read flash***********");
+	if ((NULL == buf) || (0 == len)) {
+		FTS_ERROR("buf is NULL or len is 0");
+		return -EINVAL;
+	}
+
+	ret = fts_fwupg_enter_into_boot();
+	if (ret < 0) {
+		FTS_ERROR("enter into pramboot/bootloader fail");
+		goto read_flash_err;
+	}
+
+	ret = fts_flash_read_buf(addr, buf, len);
+	if (ret < 0) {
+		FTS_ERROR("read flash fail");
+		goto read_flash_err;
+	}
+
+read_flash_err:
+	/* reset to normal boot */
+	ret = fts_fwupg_reset_in_boot();
+	if (ret < 0) {
+		FTS_ERROR("reset to normal boot fail");
+	}
+	return ret;
+}
+
+int fts_upgrade_bin(char *fw_name, bool force)
+{
+	int ret = 0;
+	u32 fw_file_len = 0;
+	u8 *fw_file_buf = NULL;
+	struct fts_upgrade *upg = fwupgrade;
+	const struct firmware *fw = NULL;
+
+	FTS_INFO("start upgrade with fw bin");
+	if ((!upg) || (!upg->func) || !upg->ts_data) {
+		FTS_ERROR("upgrade/func/ts_data is null");
+		return -EINVAL;
+	}
+
+	upg->ts_data->fw_loading = 1;
+	fts_irq_disable();
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_switch(DISABLE);
+#endif
+
+	ret = request_firmware(&fw, fw_name, upg->ts_data->dev);
+	if (ret == 0) {
+		fw_file_len = fw->size;
+		fw_file_buf = (u8 *) kzalloc(fw_file_len * sizeof(u8), GFP_KERNEL);
+		if (fw_file_buf == NULL) {
+			FTS_ERROR("alloc fw buffer error");
+			release_firmware(fw);
+			goto err_bin;
+		}
+		memcpy(fw_file_buf, (u8 *)fw->data, fw_file_len);
+		release_firmware(fw);
+	} else {
+		FTS_ERROR("request fw error");
+		goto err_bin;
+	}
+
+	FTS_INFO("fw bin file len:%d", fw_file_len);
+	if (force) {
+		if (upg->func->force_upgrade) {
+			ret = upg->func->force_upgrade(fw_file_buf, fw_file_len);
+		} else {
+			FTS_INFO("force_upgrade function is null, no upgrade");
+			goto err_bin;
+		}
+	} else {
+#if FTS_AUTO_LIC_UPGRADE_EN
+		if (upg->func->lic_upgrade) {
+			ret = upg->func->lic_upgrade(fw_file_buf, fw_file_len);
+		} else {
+			FTS_INFO("lic_upgrade function is null, no upgrade");
+		}
+#endif
+		if (upg->func->upgrade) {
+			ret = upg->func->upgrade(fw_file_buf, fw_file_len);
+		} else {
+			FTS_INFO("upgrade function is null, no upgrade");
+		}
+	}
+
+	if (ret < 0) {
+		FTS_ERROR("upgrade fw bin failed");
+		fts_fwupg_reset_in_boot();
+		goto err_bin;
+	}
+
+	FTS_INFO("upgrade fw bin success");
+	ret = 0;
+
+err_bin:
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_switch(ENABLE);
+#endif
+	fts_irq_enable();
+	upg->ts_data->fw_loading = 0;
+
+	if (fw_file_buf) {
+		vfree(fw_file_buf);
+		fw_file_buf = NULL;
+	}
+	return ret;
+}
+
+int fts_enter_test_environment(bool test_state)
+{
+	return 0;
+}
+#if FTS_AUTO_LIC_UPGRADE_EN
+static int fts_lic_get_vid_in_tp(u16 *vid)
+{
+	int ret = 0;
+	u8 val[2] = { 0 };
+
+	if (NULL == vid) {
+		FTS_ERROR("vid is NULL");
+		return -EINVAL;
+	}
+
+	ret = fts_read_reg(FTS_REG_VENDOR_ID, &val[0]);
+	if (fts_data->ic_info.is_incell)
+		ret = fts_read_reg(FTS_REG_MODULE_ID, &val[1]);
+	if (ret < 0) {
+		FTS_ERROR("read vid from tp fail");
+		return ret;
+	}
+
+	*vid = *(u16 *)val;
+	return 0;
+}
+
+static int fts_lic_get_vid_in_host(struct fts_upgrade *upg, u16 *vid)
+{
+	u8 val[2] = { 0 };
+	u8 *licbuf = NULL;
+	u32 conf_saddr = 0;
+
+	if (!upg || !upg->func || !upg->lic || !vid) {
+		FTS_ERROR("upgrade/func/get_hlic_ver/lic/vid is null");
+		return -EINVAL;
+	}
+
+	if (upg->lic_length < FTS_MAX_LEN_SECTOR) {
+		FTS_ERROR("lic length(%x) fail", upg->lic_length);
+		return -EINVAL;
+	}
+
+	licbuf  = upg->lic;
+	conf_saddr = upg->func->fwcfgoff;
+	val[0] = licbuf[conf_saddr + FTS_CONIFG_VENDORID_OFF];
+	if (fts_data->ic_info.is_incell)
+		val[1] = licbuf[conf_saddr + FTS_CONIFG_MODULEID_OFF];
+
+	*vid = *(u16 *)val;
+	return 0;
+}
+
+static int fts_lic_get_ver_in_tp(u8 *ver)
+{
+	int ret = 0;
+
+	if (NULL == ver) {
+		FTS_ERROR("ver is NULL");
+		return -EINVAL;
+	}
+
+	ret = fts_read_reg(FTS_REG_LIC_VER, ver);
+	if (ret < 0) {
+		FTS_ERROR("read lcd initcode ver from tp fail");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int fts_lic_get_ver_in_host(struct fts_upgrade *upg, u8 *ver)
+{
+	int ret = 0;
+
+	if (!upg || !upg->func || !upg->func->get_hlic_ver || !upg->lic) {
+		FTS_ERROR("upgrade/func/get_hlic_ver/lic is null");
+		return -EINVAL;
+	}
+
+	ret = upg->func->get_hlic_ver(upg->lic);
+	if (ret < 0) {
+		FTS_ERROR("get host lcd initial code version fail");
+		return ret;
+	}
+
+	*ver = (u8)ret;
+	return ret;
+}
+
+static bool fts_lic_need_upgrade(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	u8 initcode_ver_in_tp = 0;
+	u8 initcode_ver_in_host = 0;
+	u16 vid_in_tp = 0;
+	u16 vid_in_host = 0;
+	bool fwvalid = false;
+
+	fwvalid = fts_fwupg_check_fw_valid();
+	if (!fwvalid) {
+		FTS_INFO("fw is invalid, no upgrade lcd init code");
+		return false;
+	}
+
+	ret = fts_lic_get_vid_in_host(upg, &vid_in_host);
+	if (ret < 0) {
+		FTS_ERROR("vendor id in host invalid");
+		return false;
+	}
+
+	ret = fts_lic_get_vid_in_tp(&vid_in_tp);
+	if (ret < 0) {
+		FTS_ERROR("vendor id in tp invalid");
+		return false;
+	}
+
+	FTS_DEBUG("vid in tp:0x%04x, host:0x%04x", vid_in_tp, vid_in_host);
+	if (vid_in_tp != vid_in_host) {
+		FTS_INFO("vendor id in tp&host are different, no upgrade lic");
+		return false;
+	}
+
+	ret = fts_lic_get_ver_in_host(upg, &initcode_ver_in_host);
+	if (ret < 0) {
+		FTS_ERROR("init code in host invalid");
+		return false;
+	}
+
+	ret = fts_lic_get_ver_in_tp(&initcode_ver_in_tp);
+	if (ret < 0) {
+		FTS_ERROR("read reg0xE4 fail");
+		return false;
+	}
+
+	FTS_DEBUG("lcd initial code version in tp:%x, host:%x",
+			  initcode_ver_in_tp, initcode_ver_in_host);
+	if (0xA5 == initcode_ver_in_tp) {
+		FTS_INFO("lcd init code ver is 0xA5, don't upgade init code");
+		return false;
+	} else if (0xFF == initcode_ver_in_tp) {
+		FTS_DEBUG("lcd init code in tp is invalid, need upgrade init code");
+		return true;
+	} else if (initcode_ver_in_tp < initcode_ver_in_host)
+		return true;
+	else
+		return false;
+}
+
+static int fts_lic_upgrade(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	bool hlic_upgrade = false;
+	int upgrade_count = 0;
+	u8 ver = 0;
+
+	FTS_INFO("lcd initial code auto upgrade function");
+	if ((!upg) || (!upg->func) || (!upg->func->lic_upgrade)) {
+		FTS_ERROR("lcd upgrade function is null");
+		return -EINVAL;
+	}
+
+	hlic_upgrade = fts_lic_need_upgrade(upg);
+	FTS_INFO("lcd init code upgrade flag:%d", hlic_upgrade);
+	if (hlic_upgrade) {
+		FTS_INFO("lcd initial code need upgrade, upgrade begin...");
+		do {
+			FTS_INFO("lcd initial code upgrade times:%d", upgrade_count);
+			upgrade_count++;
+
+			ret = upg->func->lic_upgrade(upg->lic, upg->lic_length);
+			if (ret < 0) {
+				fts_fwupg_reset_in_boot();
+			} else {
+				fts_lic_get_ver_in_tp(&ver);
+				FTS_INFO("success upgrade to lcd initcode ver:%02x", ver);
+				break;
+			}
+		} while (upgrade_count < 2);
+	} else {
+		FTS_INFO("lcd initial code don't need upgrade");
+	}
+
+	return ret;
+}
+#endif /* FTS_AUTO_LIC_UPGRADE_EN */
+
+
+static int fts_param_get_ver_in_tp(u8 *ver)
+{
+	int ret = 0;
+
+	if (NULL == ver) {
+		FTS_ERROR("ver is NULL");
+		return -EINVAL;
+	}
+
+	ret = fts_read_reg(FTS_REG_IDE_PARA_VER_ID, ver);
+	if (ret < 0) {
+		FTS_ERROR("read fw param ver from tp fail");
+		return ret;
+	}
+
+	if ((0x00 == *ver) || (0xFF == *ver)) {
+		FTS_INFO("param version in tp invalid");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static int fts_param_get_ver_in_host(struct fts_upgrade *upg, u8 *ver)
+{
+	if ((!upg) || (!upg->func) || (!upg->fw) || (!ver)) {
+		FTS_ERROR("fts_data/upgrade/func/fw/ver is NULL");
+		return -EINVAL;
+	}
+
+	if (upg->fw_length < upg->func->paramcfgveroff) {
+		FTS_ERROR("fw len(%x) < paramcfg ver offset(%x)",
+				  upg->fw_length, upg->func->paramcfgveroff);
+		return -EINVAL;
+	}
+
+	FTS_INFO("fw paramcfg version offset:%x", upg->func->paramcfgveroff);
+	*ver = upg->fw[upg->func->paramcfgveroff];
+
+	if ((0x00 == *ver) || (0xFF == *ver)) {
+		FTS_INFO("param version in host invalid");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+/*
+ * return: < 0 : error
+ *         == 0: no ide
+ *         == 1: ide
+ */
+static int fts_param_ide_in_host(struct fts_upgrade *upg)
+{
+	u32 off = 0;
+
+	if ((!upg) || (!upg->func) || (!upg->fw)) {
+		FTS_ERROR("fts_data/upgrade/func/fw is NULL");
+		return -EINVAL;
+	}
+
+	if (upg->fw_length < upg->func->paramcfgoff + FTS_FW_IDE_SIG_LEN) {
+		FTS_INFO("fw len(%x) < paramcfg offset(%x), no IDE",
+				 upg->fw_length, upg->func->paramcfgoff + FTS_FW_IDE_SIG_LEN);
+		return 0;
+	}
+
+	off = upg->func->paramcfgoff;
+	if (0 == memcmp(&upg->fw[off], FTS_FW_IDE_SIG, FTS_FW_IDE_SIG_LEN)) {
+		FTS_INFO("fw in host is IDE version");
+		return 1;
+	}
+
+	FTS_INFO("fw in host isn't IDE version");
+	return 0;
+}
+
+/*
+ * return: < 0 : error
+ *         0   : no ide
+ *         1   : ide
+ */
+static int fts_param_ide_in_tp(u8 *val)
+{
+	int ret = 0;
+
+	ret = fts_read_reg(FTS_REG_IDE_PARA_STATUS, val);
+	if (ret < 0) {
+		FTS_ERROR("read IDE PARAM STATUS in tp fail");
+		return ret;
+	}
+
+	if ((*val != 0xFF) && ((*val & 0x80) == 0x80)) {
+		FTS_INFO("fw in tp is IDE version");
+		return 1;
+	}
+
+	FTS_INFO("fw in tp isn't IDE version");
+	return 0;
+}
+
+/************************************************************************
+ * fts_param_need_upgrade - check fw paramcfg need upgrade or not
+ *
+ * Return:  < 0 : error if paramcfg need upgrade
+ *          0   : no need upgrade
+ *          1   : need upgrade app + param
+ *          2   : need upgrade param
+ ***********************************************************************/
+static int fts_param_need_upgrade(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	u8 val = 0;
+	int ide_in_host = 0;
+	int ide_in_tp = 0;
+	u8 ver_in_host = 0;
+	u8 ver_in_tp = 0;
+	bool fwvalid = false;
+
+	fwvalid = fts_fwupg_check_fw_valid();
+	if (!fwvalid) {
+		FTS_INFO("fw is invalid, upgrade app+param");
+		return 1;
+	}
+
+	ide_in_host = fts_param_ide_in_host(upg);
+	if (ide_in_host < 0) {
+		FTS_INFO("fts_param_ide_in_host fail");
+		return ide_in_host;
+	}
+
+	ide_in_tp = fts_param_ide_in_tp(&val);
+	if (ide_in_tp < 0) {
+		FTS_INFO("fts_param_ide_in_tp fail");
+		return ide_in_tp;
+	}
+
+	if ((0 == ide_in_host) && (0 == ide_in_tp)) {
+		FTS_INFO("fw in host&tp are both no ide");
+		return 0;
+	} else if (ide_in_host != ide_in_tp) {
+		FTS_INFO("fw in host&tp not equal, need upgrade app+param");
+		return 1;
+	} else if ((1 == ide_in_host) && (1 == ide_in_tp)) {
+		FTS_INFO("fw in host&tp are both ide");
+		if ((val & 0x7F) != 0x00) {
+			FTS_INFO("param invalid, need upgrade param");
+			return 2;
+		}
+
+		ret = fts_param_get_ver_in_host(upg, &ver_in_host);
+		if (ret < 0) {
+			FTS_ERROR("param version in host invalid");
+			return ret;
+		}
+
+		ret = fts_param_get_ver_in_tp(&ver_in_tp);
+		if (ret < 0) {
+			FTS_ERROR("get IDE param ver in tp fail");
+			return ret;
+		}
+
+		FTS_INFO("fw paramcfg version in tp:%x, host:%x",
+				 ver_in_tp, ver_in_host);
+		if (ver_in_tp != ver_in_host) {
+			return 2;
+		}
+	}
+
+	return 0;
+}
+
+static int fts_fwupg_get_ver_in_tp(u8 *ver)
+{
+	int ret = 0;
+
+	if (NULL == ver) {
+		FTS_ERROR("ver is NULL");
+		return -EINVAL;
+	}
+
+	ret = fts_read_reg(FTS_REG_FW_VER, ver);
+	if (ret < 0) {
+		FTS_ERROR("read fw ver from tp fail");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int fts_fwupg_get_ver_in_host(struct fts_upgrade *upg, u8 *ver)
+{
+	if ((!upg) || (!upg->func) || (!upg->fw) || (!ver)) {
+		FTS_ERROR("fts_data/upgrade/func/fw/ver is NULL");
+		return -EINVAL;
+	}
+
+	if (upg->fw_length < upg->func->fwveroff) {
+		FTS_ERROR("fw len(0x%0x) < fw ver offset(0x%x)",
+				  upg->fw_length, upg->func->fwveroff);
+		return -EINVAL;
+	}
+
+	FTS_INFO("fw version offset:0x%x", upg->func->fwveroff);
+	*ver = upg->fw[upg->func->fwveroff];
+	return 0;
+}
+
+static bool fts_fwupg_need_upgrade(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	bool fwvalid = false;
+	u8 fw_ver_in_host = 0;
+	u8 fw_ver_in_tp = 0;
+
+	fwvalid = fts_fwupg_check_fw_valid();
+	if (fwvalid) {
+		ret = fts_fwupg_get_ver_in_host(upg, &fw_ver_in_host);
+		if (ret < 0) {
+			FTS_ERROR("get fw ver in host fail");
+			return false;
+		}
+
+		ret = fts_fwupg_get_ver_in_tp(&fw_ver_in_tp);
+		if (ret < 0) {
+			FTS_ERROR("get fw ver in tp fail");
+			return false;
+		}
+
+		FTS_INFO("fw version in tp:%x, host:%x", fw_ver_in_tp, fw_ver_in_host);
+		if (fw_ver_in_tp != fw_ver_in_host) {
+			return true;
+		}
+	} else {
+		FTS_INFO("fw invalid, need upgrade fw");
+		return true;
+	}
+
+	return false;
+}
+
+/************************************************************************
+ * Name: fts_fw_upgrade
+ * Brief: fw upgrade main entry, run in following steps
+ *        1. check fw version(A6), not equal, will upgrade app(+param)
+ *        2. if fw version equal, will check ide, will upgrade app(+param)
+ *        in the follow situation
+ *          a. host&tp IDE's type are not equal, will upgrade app+param
+ *          b. host&tp are both IDE's type, and param's version are not
+ *          equal, will upgrade param
+ * Input:
+ * Output:
+ * Return: return 0 if success, otherwise return error code
+ ***********************************************************************/
+int fts_fwupg_upgrade(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	bool upgrade_flag = false;
+	int upgrade_count = 0;
+	u8 ver = 0;
+
+	FTS_INFO("fw auto upgrade function");
+	if ((NULL == upg) || (NULL == upg->func)) {
+		FTS_ERROR("upg/upg->func is null");
+		return -EINVAL;
+	}
+
+	upgrade_flag = fts_fwupg_need_upgrade(upg);
+	FTS_INFO("fw upgrade flag:%d", upgrade_flag);
+	do {
+		upgrade_count++;
+		if (upgrade_flag) {
+			FTS_INFO("upgrade fw app(times:%d)", upgrade_count);
+			if (upg->func->upgrade) {
+				ret = upg->func->upgrade(upg->fw, upg->fw_length);
+				if (ret < 0) {
+					fts_fwupg_reset_in_boot();
+				} else {
+					fts_fwupg_get_ver_in_tp(&ver);
+					FTS_INFO("success upgrade to fw version %02x", ver);
+					break;
+				}
+			} else {
+				FTS_ERROR("upgrade func/upgrade is null, return immediately");
+				ret = -ENODATA;
+				break;
+			}
+		} else {
+			if (upg->func->param_upgrade) {
+				ret = fts_param_need_upgrade(upg);
+				if (ret <= 0) {
+					FTS_INFO("param don't need upgrade");
+					break;
+				} else if (1 == ret) {
+					FTS_INFO("force upgrade fw app(times:%d)", upgrade_count);
+					if (upg->func->upgrade) {
+						ret = upg->func->upgrade(upg->fw, upg->fw_length);
+						if (ret < 0) {
+							fts_fwupg_reset_in_boot();
+						} else {
+							break;
+						}
+					}
+				} else if (2 == ret) {
+					FTS_INFO("upgrade param area(times:%d)", upgrade_count);
+					ret = upg->func->param_upgrade(upg->fw, upg->fw_length);
+					if (ret < 0) {
+						fts_fwupg_reset_in_boot();
+					} else {
+						fts_param_get_ver_in_tp(&ver);
+						FTS_INFO("success upgrade to fw param version %02x", ver);
+						break;
+					}
+				} else
+					break;
+			} else {
+				break;
+			}
+		}
+	} while (upgrade_count < 2);
+
+	return ret;
+}
+
+/************************************************************************
+ * fts_fwupg_auto_upgrade - upgrade main entry
+ ***********************************************************************/
+static void fts_fwupg_auto_upgrade(struct fts_upgrade *upg)
+{
+	int ret = 0;
+
+	FTS_INFO("********************FTS enter upgrade********************");
+	if (!upg || !upg->ts_data) {
+		FTS_ERROR("upg/ts_data is null");
+		return ;
+	}
+
+	ret = fts_fwupg_upgrade(upg);
+	if (ret < 0)
+		FTS_ERROR("**********tp fw(app/param) upgrade failed**********");
+	else
+		FTS_INFO("**********tp fw(app/param) no upgrade/upgrade success**********");
+
+#if FTS_AUTO_LIC_UPGRADE_EN
+	ret = fts_lic_upgrade(upg);
+	if (ret < 0)
+		FTS_ERROR("**********lcd init code upgrade failed**********");
+	else
+		FTS_INFO("**********lcd init code no upgrade/upgrade success**********");
+#endif
+
+	FTS_INFO("********************FTS exit upgrade********************");
+}
+
+static int fts_fwupg_get_vendorid(struct fts_upgrade *upg, int *vid)
+{
+	int ret = 0;
+	bool fwvalid = false;
+	u8 vendor_id = 0;
+	u8 module_id = 0;
+	u32 fwcfg_addr = 0;
+	u8 cmd = 0;
+	u8 cfgbuf[FTS_HEADER_LEN] = { 0 };
+
+	FTS_INFO("read vendor id from tp");
+	if ((!upg) || (!upg->func) || (!upg->ts_data) || (!vid)) {
+		FTS_ERROR("upgrade/func/ts_data/vid is null");
+		return -EINVAL;
+	}
+
+	fwvalid = fts_fwupg_check_fw_valid();
+	if (fwvalid) {
+		ret = fts_read_reg(FTS_REG_VENDOR_ID, &vendor_id);
+		if (upg->ts_data->ic_info.is_incell)
+			ret = fts_read_reg(FTS_REG_MODULE_ID, &module_id);
+	} else {
+		if (upg->func->upgspec_version >= UPGRADE_SPEC_V_1_0) {
+			cmd = FTS_CMD_READ_FW_CONF;
+			ret = fts_read(&cmd, 1, cfgbuf, FTS_HEADER_LEN);
+		} else {
+			fwcfg_addr =  upg->func->fwcfgoff;
+			ret = fts_flash_read(fwcfg_addr, cfgbuf, FTS_HEADER_LEN);
+		}
+
+		if ((cfgbuf[FTS_CONIFG_VENDORID_OFF] +
+			 cfgbuf[FTS_CONIFG_VENDORID_OFF + 1]) == 0xFF)
+			vendor_id = cfgbuf[FTS_CONIFG_VENDORID_OFF];
+		if (upg->ts_data->ic_info.is_incell) {
+			if ((cfgbuf[FTS_CONIFG_MODULEID_OFF] +
+				 cfgbuf[FTS_CONIFG_MODULEID_OFF + 1]) == 0xFF)
+				module_id = cfgbuf[FTS_CONIFG_MODULEID_OFF];
+		}
+	}
+
+	if (ret < 0) {
+		FTS_ERROR("fail to get vendor id from tp");
+		return ret;
+	}
+
+	*vid = (int)((module_id << 8) + vendor_id);
+	return 0;
+}
+
+static int fts_fwupg_get_module_info(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	int i = 0;
+	struct upgrade_module *info = &module_list[0];
+
+	if (!upg || !upg->ts_data) {
+		FTS_ERROR("upg/ts_data is null");
+		return -EINVAL;
+	}
+
+	if (FTS_GET_MODULE_NUM > 1) {
+		/* support multi modules, must read correct module id(vendor id) */
+		ret = fts_fwupg_get_vendorid(upg, &upg->module_id);
+		if (ret < 0) {
+			FTS_ERROR("get vendor id failed");
+			return ret;
+		}
+		FTS_INFO("module id:%04x", upg->module_id);
+		for (i = 0; i < FTS_GET_MODULE_NUM; i++) {
+			info = &module_list[i];
+			if (upg->module_id == info->id) {
+				FTS_INFO("module id match, get module info pass");
+				break;
+			}
+		}
+		if (i >= FTS_GET_MODULE_NUM) {
+			FTS_ERROR("no module id match, don't get file");
+			return -ENODATA;
+		}
+	}
+
+	upg->module_info = info;
+	return 0;
+}
+
+static int fts_get_fw_file_via_request_firmware(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	const struct firmware *fw = NULL;
+	u8 *tmpbuf = NULL;
+	char fwname[FILE_NAME_LENGTH] = { 0 };
+
+	if (!upg || !upg->ts_data || !upg->ts_data->dev) {
+		FTS_ERROR("upg/ts_data/dev is null");
+		return -EINVAL;
+	}
+
+	snprintf(fwname, FILE_NAME_LENGTH, "%s%s.bin", \
+			 FTS_FW_NAME_PREX_WITH_REQUEST, \
+			 upg->module_info->vendor_name);
+
+	ret = request_firmware(&fw, fwname, upg->ts_data->dev);
+	if (0 == ret) {
+		FTS_INFO("firmware(%s) request successfully", fwname);
+		tmpbuf = vmalloc(fw->size);
+		if (NULL == tmpbuf) {
+			FTS_ERROR("fw buffer vmalloc fail");
+			ret = -ENOMEM;
+		} else {
+			memcpy(tmpbuf, fw->data, fw->size);
+			upg->fw = tmpbuf;
+			upg->fw_length = fw->size;
+			upg->fw_from_request = 1;
+		}
+	} else {
+		FTS_INFO("firmware(%s) request fail,ret=%d", fwname, ret);
+	}
+
+	if (fw != NULL) {
+		release_firmware(fw);
+		fw = NULL;
+	}
+
+	return ret;
+}
+
+static int fts_get_fw_file_via_i(struct fts_upgrade *upg)
+{
+	upg->fw = upg->module_info->fw_file;
+	upg->fw_length = upg->module_info->fw_len;
+	upg->fw_from_request = 0;
+
+	return 0;
+}
+
+/*****************************************************************************
+ *  Name: fts_fwupg_get_fw_file
+ *  Brief: get fw image/file,
+ *         If support muitl modules, please set FTS_GET_MODULE_NUM, and FTS_-
+ *         MODULE_ID/FTS_MODULE_NAME;
+ *         If get fw via .i file, please set FTS_FW_REQUEST_SUPPORT=0, and F-
+ *         TS_MODULE_ID; will use module id to distingwish different modules;
+ *         If get fw via reques_firmware(), please set FTS_FW_REQUEST_SUPPORT
+ *         =1, and FTS_MODULE_NAME; fw file name will be composed of "focalt-
+ *         ech_ts_fw_" & FTS_VENDOR_NAME;
+ *
+ *         If have flash, module_id=vendor_id, If non-flash,module_id need
+ *         transfer from LCD driver(gpio or lcm_id or ...);
+ *  Input:
+ *  Output:
+ *  Return: return 0 if success, otherwise return error code
+ *****************************************************************************/
+static int fts_fwupg_get_fw_file(struct fts_upgrade *upg)
+{
+	int ret = 0;
+	bool get_fw_i_flag = false;
+
+	FTS_DEBUG("get upgrade fw file");
+	if (!upg || !upg->ts_data) {
+		FTS_ERROR("upg/ts_data is null");
+		return -EINVAL;
+	}
+
+	ret = fts_fwupg_get_module_info(upg);
+	if ((ret < 0) || (!upg->module_info)) {
+		FTS_ERROR("get module info fail");
+		return ret;
+	}
+
+	if (FTS_FW_REQUEST_SUPPORT) {
+		ret = fts_get_fw_file_via_request_firmware(upg);
+		if (ret != 0) {
+			get_fw_i_flag = true;
+		}
+	} else {
+		get_fw_i_flag = true;
+	}
+
+	if (get_fw_i_flag) {
+		ret = fts_get_fw_file_via_i(upg);
+	}
+
+	upg->lic = upg->fw;
+	upg->lic_length = upg->fw_length;
+
+	FTS_INFO("upgrade fw file len:%d", upg->fw_length);
+	if (upg->fw_length < FTS_MIN_LEN) {
+		FTS_ERROR("fw file len(%d) fail", upg->fw_length);
+		return -ENODATA;
+	}
+
+	return ret;
+}
+
+static void fts_fwupg_init_ic_detail(struct fts_upgrade *upg)
+{
+	if (upg && upg->func && upg->func->init) {
+		upg->func->init(upg->fw, upg->fw_length);
+	}
+}
+
+/*****************************************************************************
+ *  Name: fts_fwupg_work
+ *  Brief: 1. get fw image/file
+ *         2. ic init if have
+ *         3. call upgrade main function(fts_fwupg_auto_upgrade)
+ *  Input:
+ *  Output:
+ *  Return:
+ *****************************************************************************/
+static void fts_fwupg_work(struct work_struct *work)
+{
+	int ret = 0;
+	struct fts_upgrade *upg = fwupgrade;
+
+#if !FTS_AUTO_UPGRADE_EN
+	FTS_INFO("FTS_AUTO_UPGRADE_EN is disabled, not upgrade when power on");
+	return ;
+#endif
+
+	FTS_INFO("fw upgrade work function");
+	if (!upg || !upg->ts_data) {
+		FTS_ERROR("upg/ts_data is null");
+		return ;
+	}
+
+	upg->ts_data->fw_loading = 1;
+	fts_irq_disable();
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_switch(DISABLE);
+#endif
+
+	/* get fw */
+	ret = fts_fwupg_get_fw_file(upg);
+	if (ret < 0) {
+		FTS_ERROR("get file fail, can't upgrade");
+	} else {
+		/* ic init if have */
+		fts_fwupg_init_ic_detail(upg);
+		/* run auto upgrade */
+		fts_fwupg_auto_upgrade(upg);
+	}
+
+#if FTS_ESDCHECK_EN
+	fts_esdcheck_switch(ENABLE);
+#endif
+	fts_irq_enable();
+	upg->ts_data->fw_loading = 0;
+}
+
+static int fts_get_lockdown_info(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	char buf[128];
+
+	memset(ts_data->lockdown_info, 0x00, FTS_LOCKDOWN_INFO_SIZE);
+
+	fts_irq_disable();
+	ret = fts_flash_read(FTS_LOCKDOWN_INFO_ADDR, ts_data->lockdown_info, FTS_LOCKDOWN_INFO_SIZE);
+	fts_irq_enable();
+	if (ret < 0) {
+		FTS_ERROR("fail to get lockdown info");
+		return ret;
+	}
+	snprintf(buf, 128, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X",
+			(int)ts_data->lockdown_info[0], (int)ts_data->lockdown_info[1],
+			(int)ts_data->lockdown_info[2], (int)ts_data->lockdown_info[3],
+			(int)ts_data->lockdown_info[4], (int)ts_data->lockdown_info[5],
+			(int)ts_data->lockdown_info[6], (int)ts_data->lockdown_info[7]);
+
+	FTS_INFO("Lockdown info = %s", buf);
+	return ret;
+}
+
+int fts_fwupg_init(struct fts_ts_data *ts_data)
+{
+	int i = 0;
+	int j = 0;
+	int ic_stype = 0;
+	struct upgrade_func *func = upgrade_func_list[0];
+	int func_count = sizeof(upgrade_func_list) / sizeof(upgrade_func_list[0]);
+
+	FTS_INFO("fw upgrade init function");
+
+	if (!ts_data || !ts_data->ts_workqueue) {
+		FTS_ERROR("ts_data/workqueue is NULL, can't run upgrade function");
+		return -EINVAL;
+	}
+
+	if (0 == func_count) {
+		FTS_ERROR("no upgrade function in tp driver");
+		return -ENODATA;
+	}
+
+	fwupgrade = (struct fts_upgrade *)kzalloc(sizeof(*fwupgrade), GFP_KERNEL);
+	if (NULL == fwupgrade) {
+		FTS_ERROR("malloc memory for upgrade fail");
+		return -ENOMEM;
+	}
+
+	ic_stype = ts_data->ic_info.ids.type;
+	if (1 == func_count) {
+		fwupgrade->func = func;
+	} else {
+		for (i = 0; i < func_count; i++) {
+			func = upgrade_func_list[i];
+			for (j = 0; j < FTX_MAX_COMPATIBLE_TYPE; j++) {
+				if (0 == func->ctype[j])
+					break;
+				else if (func->ctype[j] == ic_stype) {
+					FTS_INFO("match upgrade function,type:%x", (int)func->ctype[j]);
+					fwupgrade->func = func;
+				}
+			}
+		}
+	}
+
+	if (NULL == fwupgrade->func) {
+		FTS_ERROR("no upgrade function match, can't upgrade");
+		kfree(fwupgrade);
+		fwupgrade = NULL;
+		return -ENODATA;
+	}
+
+	fwupgrade->ts_data = ts_data;
+	INIT_WORK(&ts_data->fwupg_work, fts_fwupg_work);
+
+	if (fts_get_lockdown_info(ts_data)) {
+		FTS_ERROR("failed get lockdown info!");
+	}
+
+	queue_work(ts_data->ts_workqueue, &ts_data->fwupg_work);
+
+	return 0;
+}
+
+int fts_fwupg_exit(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+	if (fwupgrade) {
+		if (fwupgrade->fw_from_request) {
+			vfree(fwupgrade->fw);
+			fwupgrade->fw = NULL;
+		}
+
+		kfree(fwupgrade);
+		fwupgrade = NULL;
+	}
+	FTS_FUNC_EXIT();
+	return 0;
+}
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_flash.h b/drivers/input/touchscreen/ft8756_spi/focaltech_flash.h
new file mode 100644
index 00000000000000..900919d14780c4
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_flash.h
@@ -0,0 +1,216 @@
+/************************************************************************
+* Copyright (c) 2012-2020, Focaltech Systems (R)��All Rights Reserved.
+* Copyright (C) 2021-2022 XiaoMi, Inc.
+*
+* File Name: focaltech_flash.h
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-07
+*
+* Abstract:
+*
+************************************************************************/
+#ifndef __LINUX_FOCALTECH_FLASH_H__
+#define __LINUX_FOCALTECH_FLASH_H__
+
+/*****************************************************************************
+* 1.Included header files
+*****************************************************************************/
+#include "focaltech_core.h"
+
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define FTS_CMD_RESET                               0x07
+#define FTS_ROMBOOT_CMD_SET_PRAM_ADDR               0xAD
+#define FTS_ROMBOOT_CMD_SET_PRAM_ADDR_LEN           4
+#define FTS_ROMBOOT_CMD_WRITE                       0xAE
+#define FTS_ROMBOOT_CMD_START_APP                   0x08
+#define FTS_DELAY_PRAMBOOT_START                    100
+#define FTS_ROMBOOT_CMD_ECC                         0xCC
+#define FTS_PRAM_SADDR                              0x000000
+#define FTS_DRAM_SADDR                              0xD00000
+
+#define FTS_CMD_READ                                0x03
+#define FTS_CMD_READ_DELAY                          1
+#define FTS_CMD_READ_LEN                            4
+#define FTS_CMD_READ_LEN_SPI                        6
+#define FTS_CMD_FLASH_TYPE                          0x05
+#define FTS_CMD_FLASH_MODE                          0x09
+#define FLASH_MODE_WRITE_FLASH_VALUE                0x0A
+#define FLASH_MODE_UPGRADE_VALUE                    0x0B
+#define FLASH_MODE_LIC_VALUE                        0x0C
+#define FLASH_MODE_PARAM_VALUE                      0x0D
+#define FTS_CMD_ERASE_APP                           0x61
+#define FTS_REASE_APP_DELAY                         1350
+#define FTS_ERASE_SECTOR_DELAY                      60
+#define FTS_RETRIES_REASE                           50
+#define FTS_RETRIES_DELAY_REASE                     400
+#define FTS_CMD_FLASH_STATUS                        0x6A
+#define FTS_CMD_FLASH_STATUS_LEN                    2
+#define FTS_CMD_FLASH_STATUS_NOP                    0x0000
+#define FTS_CMD_FLASH_STATUS_ECC_OK                 0xF055
+#define FTS_CMD_FLASH_STATUS_ERASE_OK               0xF0AA
+#define FTS_CMD_FLASH_STATUS_WRITE_OK               0x1000
+#define FTS_CMD_ECC_INIT                            0x64
+#define FTS_CMD_ECC_CAL                             0x65
+#define FTS_CMD_ECC_CAL_LEN                         7
+#define FTS_RETRIES_ECC_CAL                         10
+#define FTS_RETRIES_DELAY_ECC_CAL                   50
+#define FTS_CMD_ECC_READ                            0x66
+#define FTS_CMD_DATA_LEN                            0xB0
+#define FTS_CMD_APP_DATA_LEN_INCELL                 0x7A
+#define FTS_CMD_DATA_LEN_LEN                        4
+#define FTS_CMD_SET_WFLASH_ADDR                     0xAB
+#define FTS_CMD_SET_RFLASH_ADDR                     0xAC
+#define FTS_LEN_SET_ADDR                            4
+#define FTS_CMD_WRITE                               0xBF
+#define FTS_RETRIES_WRITE                           100
+#define FTS_RETRIES_DELAY_WRITE                     1
+#define FTS_CMD_WRITE_LEN                           6
+#define FTS_DELAY_READ_ID                           20
+#define FTS_DELAY_UPGRADE_RESET                     80
+#define PRAMBOOT_MIN_SIZE                           0x120
+#define PRAMBOOT_MAX_SIZE                           (64*1024)
+#define FTS_FLASH_PACKET_LENGTH                     32     /* max=128 */
+#define FTS_MAX_LEN_ECC_CALC                        0xFFFE /* must be even */
+#define FTS_MIN_LEN                                 0x120
+#define FTS_MAX_LEN_FILE                            (256 * 1024)
+#define FTS_MAX_LEN_APP                             (64 * 1024)
+#define FTS_MAX_LEN_SECTOR                          (4 * 1024)
+#define FTS_CONIFG_VENDORID_OFF                     0x04
+#define FTS_CONIFG_MODULEID_OFF                     0x1E
+#define FTS_CONIFG_PROJECTID_OFF                    0x20
+#define FTS_APPINFO_OFF                             0x100
+#define FTS_APPINFO_APPLEN_OFF                      0x00
+#define FTS_APPINFO_APPLEN2_OFF                     0x12
+#define FTS_REG_UPGRADE                             0xFC
+#define FTS_REG_UPGRADE2                            0xBC
+#define FTS_UPGRADE_AA                              0xAA
+#define FTS_UPGRADE_55                              0x55
+#define FTS_DELAY_UPGRADE_AA                        10
+#define FTS_UPGRADE_LOOP                            30
+#define FTS_HEADER_LEN                              32
+#define FTS_FW_BIN_FILEPATH                         "/sdcard/"
+#define FTS_FW_IDE_SIG                              "IDE_"
+#define FTS_FW_IDE_SIG_LEN                          4
+#define MAX_MODULE_VENDOR_NAME_LEN                  16
+
+#define FTS_ROMBOOT_CMD_ECC_NEW_LEN                 7
+#define FTS_ECC_FINISH_TIMEOUT                      100
+#define FTS_ROMBOOT_CMD_ECC_FINISH                  0xCE
+#define FTS_ROMBOOT_CMD_ECC_FINISH_OK_A5            0xA5
+#define FTS_ROMBOOT_CMD_ECC_FINISH_OK_00            0x00
+#define FTS_ROMBOOT_CMD_ECC_READ                    0xCD
+#define AL2_FCS_COEF                ((1 << 15) + (1 << 10) + (1 << 3))
+
+#define FTS_APP_INFO_OFFSET                         0x100
+
+enum FW_STATUS {
+	FTS_RUN_IN_ERROR,
+	FTS_RUN_IN_APP,
+	FTS_RUN_IN_ROM,
+	FTS_RUN_IN_PRAM,
+	FTS_RUN_IN_BOOTLOADER,
+};
+
+enum FW_FLASH_MODE {
+	FLASH_MODE_APP,
+	FLASH_MODE_LIC,
+	FLASH_MODE_PARAM,
+	FLASH_MODE_ALL,
+};
+
+enum ECC_CHECK_MODE {
+	ECC_CHECK_MODE_XOR,
+	ECC_CHECK_MODE_CRC16,
+};
+
+enum UPGRADE_SPEC {
+	UPGRADE_SPEC_V_1_0 = 0x0100,
+};
+
+/*****************************************************************************
+* Private enumerations, structures and unions using typedef
+*****************************************************************************/
+/* IC info */
+struct upgrade_func {
+	u64 ctype[FTX_MAX_COMPATIBLE_TYPE];
+	u32 fwveroff;
+	u32 fwcfgoff;
+	u32 appoff;
+	u32 licoff;
+	u32 paramcfgoff;
+	u32 paramcfgveroff;
+	u32 paramcfg2off;
+	int pram_ecc_check_mode;
+	int fw_ecc_check_mode;
+	int upgspec_version;
+	bool new_return_value_from_ic;
+	bool appoff_handle_in_ic;
+	bool is_reset_register_BC;
+	bool read_boot_id_need_reset;
+	bool hid_supported;
+	bool pramboot_supported;
+	u8 *pramboot;
+	u32 pb_length;
+	int (*init)(u8 *, u32);
+	int (*write_pramboot_private)(void);
+	int (*upgrade)(u8 *, u32);
+	int (*get_hlic_ver)(u8 *);
+	int (*lic_upgrade)(u8 *, u32);
+	int (*param_upgrade)(u8 *, u32);
+	int (*force_upgrade)(u8 *, u32);
+};
+
+struct upgrade_setting_nf {
+	u8 rom_idh;
+	u8 rom_idl;
+	u16 reserved;
+	u32 app2_offset;
+	u32 ecclen_max;
+	u8 eccok_val;
+	u8 upgsts_boot;
+	u8 delay_init;
+	bool spi_pe;
+	bool half_length;
+	bool fd_check;
+	bool drwr_support;
+};
+
+struct upgrade_module {
+	int id;
+	char vendor_name[MAX_MODULE_VENDOR_NAME_LEN];
+	u8 *fw_file;
+	u32 fw_len;
+};
+
+struct fts_upgrade {
+	struct fts_ts_data *ts_data;
+	struct upgrade_module *module_info;
+	struct upgrade_func *func;
+	struct upgrade_setting_nf *setting_nf;
+	int module_id;
+	bool fw_from_request;
+	u8 *fw;
+	u32 fw_length;
+	u8 *lic;
+	u32 lic_length;
+};
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+extern struct upgrade_func upgrade_func_ft5652;
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+int fts_fwupg_reset_in_boot(void);
+int fts_fwupg_enter_into_boot(void);
+int fts_fwupg_erase(u32 delay);
+int fts_fwupg_ecc_cal(u32 saddr, u32 len);
+int fts_flash_write_buf(u32 saddr, u8 *buf, u32 len, u32 delay);
+int fts_fwupg_upgrade(struct fts_upgrade *upg);
+#endif
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_flash/Makefile b/drivers/input/touchscreen/ft8756_spi/focaltech_flash/Makefile
new file mode 100755
index 00000000000000..e5e01a282038ce
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_flash/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_TOUCHSCREEN_FTS) += focaltech_upgrade_ft3658u.o
\ No newline at end of file
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_flash/focaltech_upgrade_ft3658u.c b/drivers/input/touchscreen/ft8756_spi/focaltech_flash/focaltech_upgrade_ft3658u.c
new file mode 100755
index 00000000000000..e7a34821408f37
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_flash/focaltech_upgrade_ft3658u.c
@@ -0,0 +1,141 @@
+/*
+ *
+ * FocalTech fts TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, Focaltech Ltd. All rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*****************************************************************************
+*
+* File Name: focaltech_upgrade_ft5652.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2019-11-20
+*
+* Abstract:
+*
+* Reference:
+*
+*****************************************************************************/
+/*****************************************************************************
+* 1.Included header files
+*****************************************************************************/
+#include "../focaltech_flash.h"
+
+#define FTS_DELAY_ERASE_PAGE_2K         80
+#define FTS_SIZE_PAGE_2K                2048
+
+/************************************************************************
+* Name: fts_ft5652_upgrade
+* Brief:
+* Input:
+* Output:
+* Return: return 0 if success, otherwise return error code
+***********************************************************************/
+static int fts_ft5652_upgrade(u8 *buf, u32 len)
+{
+	int ret = 0;
+	u32 start_addr = 0;
+	u8 cmd[4] = { 0 };
+	u32 delay = 0;
+	int ecc_in_host = 0;
+	int ecc_in_tp = 0;
+
+	if ((NULL == buf) || (len < FTS_MIN_LEN)) {
+		FTS_ERROR("buffer/len(%x) is invalid", len);
+		return -EINVAL;
+	}
+
+	/* enter into upgrade environment */
+	ret = fts_fwupg_enter_into_boot();
+	if (ret < 0) {
+		FTS_ERROR("enter into pramboot/bootloader fail,ret=%d", ret);
+		goto fw_reset;
+	}
+
+	cmd[0] = FTS_CMD_APP_DATA_LEN_INCELL;
+	cmd[1] = BYTE_OFF_16(len);
+	cmd[2] = BYTE_OFF_8(len);
+	cmd[3] = BYTE_OFF_0(len);
+	ret = fts_write(cmd, FTS_CMD_DATA_LEN_LEN);
+	if (ret < 0) {
+		FTS_ERROR("data len cmd write fail");
+		goto fw_reset;
+	}
+
+	cmd[0] = FTS_CMD_FLASH_MODE;
+	cmd[1] = FLASH_MODE_UPGRADE_VALUE;
+	ret = fts_write(cmd, 2);
+	if (ret < 0) {
+		FTS_ERROR("upgrade mode(09) cmd write fail");
+		goto fw_reset;
+	}
+
+	delay = FTS_DELAY_ERASE_PAGE_2K * (len / FTS_SIZE_PAGE_2K);
+	ret = fts_fwupg_erase(delay);
+	if (ret < 0) {
+		FTS_ERROR("erase cmd write fail");
+		goto fw_reset;
+	}
+
+	/* write app */
+	start_addr = upgrade_func_ft5652.appoff;
+	ecc_in_host = fts_flash_write_buf(start_addr, buf, len, 1);
+	if (ecc_in_host < 0 ) {
+		FTS_ERROR("flash write fail");
+		goto fw_reset;
+	}
+
+	/* ecc */
+	ecc_in_tp = fts_fwupg_ecc_cal(start_addr, len);
+	if (ecc_in_tp < 0 ) {
+		FTS_ERROR("ecc read fail");
+		goto fw_reset;
+	}
+
+	FTS_INFO("ecc in tp:%x, host:%x", ecc_in_tp, ecc_in_host);
+	if (ecc_in_tp != ecc_in_host) {
+		FTS_ERROR("ecc check fail");
+		goto fw_reset;
+	}
+
+	FTS_INFO("upgrade success, reset to normal boot");
+	ret = fts_fwupg_reset_in_boot();
+	if (ret < 0) {
+		FTS_ERROR("reset to normal boot fail");
+	}
+
+	msleep(200);
+	return 0;
+
+fw_reset:
+	FTS_INFO("upgrade fail, reset to normal boot");
+	ret = fts_fwupg_reset_in_boot();
+	if (ret < 0) {
+		FTS_ERROR("reset to normal boot fail");
+	}
+	return -EIO;
+}
+
+struct upgrade_func upgrade_func_ft5652 = {
+	.ctype = {0x88},
+	.fwveroff = 0x010E,
+	.fwcfgoff = 0x1F80,
+	.appoff = 0x0000,
+	.upgspec_version = UPGRADE_SPEC_V_1_0,
+	.pramboot_supported = false,
+	.hid_supported = true,
+	.upgrade = fts_ft5652_upgrade,
+};
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_gesture.c b/drivers/input/touchscreen/ft8756_spi/focaltech_gesture.c
new file mode 100644
index 00000000000000..f796ab3d35c817
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_gesture.c
@@ -0,0 +1,501 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, Focaltech Ltd. All rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*****************************************************************************
+*
+* File Name: focaltech_gestrue.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-08
+*
+* Abstract:
+*
+* Reference:
+*
+*****************************************************************************/
+
+/*****************************************************************************
+* 1.Included header files
+*****************************************************************************/
+#include "focaltech_core.h"
+
+/******************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define KEY_GESTURE_U                           KEY_U
+#define KEY_GESTURE_UP                          KEY_UP
+#define KEY_GESTURE_DOWN                        KEY_DOWN
+#define KEY_GESTURE_LEFT                        KEY_LEFT
+#define KEY_GESTURE_RIGHT                       KEY_RIGHT
+#define KEY_GESTURE_O                           KEY_O
+#define KEY_GESTURE_E                           KEY_E
+#define KEY_GESTURE_M                           KEY_M
+#define KEY_GESTURE_L                           KEY_L
+#define KEY_GESTURE_W                           KEY_W
+#define KEY_GESTURE_S                           KEY_S
+#define KEY_GESTURE_V                           KEY_V
+#define KEY_GESTURE_C                           KEY_C
+#define KEY_GESTURE_Z                           KEY_Z
+
+#define GESTURE_LEFT                            0x20
+#define GESTURE_RIGHT                           0x21
+#define GESTURE_UP                              0x22
+#define GESTURE_DOWN                            0x23
+#define GESTURE_DOUBLECLICK                     0x24
+#define GESTURE_SINGLETAP                       0x25
+#define GESTURE_O                               0x30
+#define GESTURE_W                               0x31
+#define GESTURE_M                               0x32
+#define GESTURE_E                               0x33
+#define GESTURE_L                               0x44
+#define GESTURE_S                               0x46
+#define GESTURE_V                               0x54
+#define GESTURE_Z                               0x41
+#define GESTURE_C                               0x34
+
+/*****************************************************************************
+* Private enumerations, structures and unions using typedef
+*****************************************************************************/
+/*
+* gesture_id    - mean which gesture is recognised
+* point_num     - points number of this gesture
+* coordinate_x  - All gesture point x coordinate
+* coordinate_y  - All gesture point y coordinate
+* mode          - gesture enable/disable, need enable by host
+*               - 1:enable gesture function(default)  0:disable
+* active        - gesture work flag,
+*                 always set 1 when suspend, set 0 when resume
+*/
+struct fts_gesture_st {
+	u8 gesture_id;
+	u8 point_num;
+	u16 coordinate_x[FTS_GESTURE_POINTS_MAX];
+	u16 coordinate_y[FTS_GESTURE_POINTS_MAX];
+};
+
+/*****************************************************************************
+* Static variables
+*****************************************************************************/
+static struct fts_gesture_st fts_gesture_data;
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+
+__weak int fts_gesture_exit(struct fts_ts_data *ts_data)
+{
+	return 0;
+}
+
+__weak void fts_gesture_recovery(struct fts_ts_data *ts_data)
+{
+}
+
+__weak int fts_gesture_readdata(struct fts_ts_data *ts_data, u8 *data)
+{
+	return 0;
+}
+
+__weak int fts_gesture_init(struct fts_ts_data *ts_data)
+{
+	return 0;
+}
+
+__weak int fts_gesture_resume(struct fts_ts_data *ts_data)
+{
+	return 0;
+}
+
+#if FTS_GESTURE_EN
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+static ssize_t fts_gesture_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	u8 val = 0;
+	struct fts_ts_data *ts_data = fts_data;
+
+	mutex_lock(&ts_data->input_dev->mutex);
+	fts_read_reg(FTS_REG_GESTURE_EN, &val);
+	count = snprintf(buf, PAGE_SIZE, "Gesture Mode:%s\n",
+					 ts_data->gesture_mode ? "On" : "Off");
+	count += snprintf(buf + count, PAGE_SIZE, "Reg(0xD0)=%d\n", val);
+	mutex_unlock(&ts_data->input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_gesture_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct fts_ts_data *ts_data = fts_data;
+
+	mutex_lock(&ts_data->input_dev->mutex);
+	if (FTS_SYSFS_ECHO_ON(buf)) {
+		FTS_DEBUG("enable gesture");
+		ts_data->gesture_mode = ENABLE;
+	} else if (FTS_SYSFS_ECHO_OFF(buf)) {
+		FTS_DEBUG("disable gesture");
+		ts_data->gesture_mode = DISABLE;
+	}
+	mutex_unlock(&ts_data->input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_gesture_buf_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+	int i = 0;
+	struct input_dev *input_dev = fts_data->input_dev;
+	struct fts_gesture_st *gesture = &fts_gesture_data;
+
+	mutex_lock(&input_dev->mutex);
+	count = snprintf(buf, PAGE_SIZE, "Gesture ID:%d\n", gesture->gesture_id);
+	count += snprintf(buf + count, PAGE_SIZE, "Gesture PointNum:%d\n",
+					  gesture->point_num);
+	count += snprintf(buf + count, PAGE_SIZE, "Gesture Points Buffer:\n");
+
+	/* save point data,max:6 */
+	for (i = 0; i < FTS_GESTURE_POINTS_MAX; i++) {
+		count += snprintf(buf + count, PAGE_SIZE, "%3d(%4d,%4d) ", i,
+						  gesture->coordinate_x[i], gesture->coordinate_y[i]);
+		if ((i + 1) % 4 == 0)
+			count += snprintf(buf + count, PAGE_SIZE, "\n");
+	}
+	count += snprintf(buf + count, PAGE_SIZE, "\n");
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+static ssize_t fts_gesture_buf_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	return -EPERM;
+}
+
+
+/* sysfs gesture node
+ *   read example: cat  fts_gesture_mode       ---read gesture mode
+ *   write example:echo 1 > fts_gesture_mode   --- write gesture mode to 1
+ *
+ */
+static DEVICE_ATTR(fts_gesture_mode, S_IRUGO | S_IWUSR, fts_gesture_show,
+				   fts_gesture_store);
+/*
+ *   read example: cat fts_gesture_buf        --- read gesture buf
+ */
+static DEVICE_ATTR(fts_gesture_buf, S_IRUGO | S_IWUSR,
+				   fts_gesture_buf_show, fts_gesture_buf_store);
+
+static struct attribute *fts_gesture_mode_attrs[] = {
+	&dev_attr_fts_gesture_mode.attr,
+	&dev_attr_fts_gesture_buf.attr,
+	NULL,
+};
+
+static struct attribute_group fts_gesture_group = {
+	.attrs = fts_gesture_mode_attrs,
+};
+
+static int fts_create_gesture_sysfs(struct device *dev)
+{
+	int ret = 0;
+
+	ret = sysfs_create_group(&dev->kobj, &fts_gesture_group);
+	if (ret) {
+		FTS_ERROR("gesture sys node create fail");
+		sysfs_remove_group(&dev->kobj, &fts_gesture_group);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void fts_gesture_report(struct input_dev *input_dev, int gesture_id)
+{
+	int gesture;
+
+	FTS_DEBUG("gesture_id:0x%x", gesture_id);
+	switch (gesture_id) {
+	case GESTURE_LEFT:
+		gesture = KEY_GESTURE_LEFT;
+		break;
+	case GESTURE_RIGHT:
+		gesture = KEY_GESTURE_RIGHT;
+		break;
+	case GESTURE_UP:
+		gesture = KEY_GESTURE_UP;
+		break;
+	case GESTURE_DOWN:
+		gesture = KEY_GESTURE_DOWN;
+		break;
+	case GESTURE_DOUBLECLICK:
+		gesture = KEY_WAKEUP;
+		break;
+	case GESTURE_SINGLETAP:
+		gesture = KEY_GOTO;
+		break;
+	case GESTURE_O:
+		gesture = KEY_GESTURE_O;
+		break;
+	case GESTURE_W:
+		gesture = KEY_GESTURE_W;
+		break;
+	case GESTURE_M:
+		gesture = KEY_GESTURE_M;
+		break;
+	case GESTURE_E:
+		gesture = KEY_GESTURE_E;
+		break;
+	case GESTURE_L:
+		gesture = KEY_GESTURE_L;
+		break;
+	case GESTURE_S:
+		gesture = KEY_GESTURE_S;
+		break;
+	case GESTURE_V:
+		gesture = KEY_GESTURE_V;
+		break;
+	case GESTURE_Z:
+		gesture = KEY_GESTURE_Z;
+		break;
+	case  GESTURE_C:
+		gesture = KEY_GESTURE_C;
+		break;
+	default:
+		gesture = -1;
+		break;
+	}
+	/* report event key */
+	if (gesture != -1) {
+		FTS_DEBUG("Gesture Code=%d", gesture);
+		input_report_key(input_dev, gesture, 1);
+		input_sync(input_dev);
+		input_report_key(input_dev, gesture, 0);
+		input_sync(input_dev);
+	}
+}
+
+/*****************************************************************************
+* Name: fts_gesture_readdata
+* Brief: Read information about gesture: enable flag/gesture points..., if ges-
+*        ture enable, save gesture points' information, and report to OS.
+*        It will be called this function every intrrupt when FTS_GESTURE_EN = 1
+*
+*        gesture data length: 1(enable) + 1(reserve) + 2(header) + 6 * 4
+* Input: ts_data - global struct data
+*        data    - gesture data buffer if non-flash, else NULL
+* Output:
+* Return: 0 - read gesture data successfully, the report data is gesture data
+*         1 - tp not in suspend/gesture not enable in TP FW
+*         -Exx - error
+*****************************************************************************/
+int fts_gesture_readdata(struct fts_ts_data *ts_data, u8 *data)
+{
+	int ret = 0;
+	int i = 0;
+	int index = 0;
+	u8 buf[FTS_GESTURE_DATA_LEN] = { 0 };
+	struct input_dev *input_dev = ts_data->input_dev;
+	struct fts_gesture_st *gesture = &fts_gesture_data;
+
+	if (!ts_data->suspended || !ts_data->gesture_mode) {
+		return 1;
+	}
+
+	if (!data) {
+		FTS_ERROR("gesture data buffer is null");
+		ret = -EINVAL;
+		return ret;
+	}
+
+	memcpy(buf, data, FTS_GESTURE_DATA_LEN);
+	if (buf[0] != ENABLE) {
+		FTS_DEBUG("gesture not enable in fw, don't process gesture");
+		return 1;
+	}
+
+
+	/* init variable before read gesture point */
+	memset(gesture->coordinate_x, 0, FTS_GESTURE_POINTS_MAX * sizeof(u16));
+	memset(gesture->coordinate_y, 0, FTS_GESTURE_POINTS_MAX * sizeof(u16));
+	gesture->gesture_id = buf[2];
+	gesture->point_num = buf[3];
+
+	FTS_DEBUG("gesture_id=%d, point_num=%d", gesture->gesture_id, gesture->point_num);
+
+	if (gesture->gesture_id == GESTURE_DOUBLECLICK && !(ts_data->gesture_status & 0x01)) {
+		FTS_INFO("double click is not enabled!");
+		return 0;
+	} else if (gesture->gesture_id == GESTURE_SINGLETAP && !(ts_data->gesture_status & 0x02)) {
+		FTS_INFO("single tap is not enabled!");
+		return 0;
+	}
+
+	/* save point data,max:6 */
+	for (i = 0; i < FTS_GESTURE_POINTS_MAX; i++) {
+		index = 4 * i + 4;
+		gesture->coordinate_x[i] = (u16)(((buf[0 + index] & 0x0F) << 8)
+										 + buf[1 + index]);
+		gesture->coordinate_y[i] = (u16)(((buf[2 + index] & 0x0F) << 8)
+										 + buf[3 + index]);
+	}
+
+	/* report gesture to OS */
+	fts_gesture_report(input_dev, gesture->gesture_id);
+	return 0;
+}
+
+void fts_gesture_recovery(struct fts_ts_data *ts_data)
+{
+	if (ts_data->gesture_mode && ts_data->suspended) {
+		FTS_DEBUG("gesture recovery...");
+		//fts_write_reg(0xD1, 0xFF);
+		fts_write_reg(0xD2, 0xFF);
+		fts_write_reg(0xD5, 0xFF);
+		fts_write_reg(0xD6, 0xFF);
+		fts_write_reg(0xD7, 0xFF);
+		fts_write_reg(0xD8, 0xFF);
+		fts_write_reg(FTS_REG_GESTURE_EN, ENABLE);
+		fts_write_reg(FTS_GESTURE_CTRL, ts_data->gesture_cmd);
+	}
+}
+
+int fts_gesture_suspend(struct fts_ts_data *ts_data)
+{
+	int i = 0;
+	u8 state = 0xFF;
+
+	FTS_FUNC_ENTER();
+	if (enable_irq_wake(ts_data->irq)) {
+		FTS_DEBUG("enable_irq_wake(irq:%d) fail", ts_data->irq);
+	}
+
+	for (i = 0; i < 5; i++) {
+		//fts_write_reg(0xD1, 0xFF);
+		fts_write_reg(0xD2, 0xFF);
+		fts_write_reg(0xD5, 0xFF);
+		fts_write_reg(0xD6, 0xFF);
+		fts_write_reg(0xD7, 0xFF);
+		fts_write_reg(0xD8, 0xFF);
+		fts_write_reg(FTS_REG_GESTURE_EN, ENABLE);
+		fts_write_reg(FTS_GESTURE_CTRL, ts_data->gesture_cmd);
+		msleep(1);
+		fts_read_reg(FTS_REG_GESTURE_EN, &state);
+		if (state == ENABLE)
+			break;
+	}
+
+	if (i >= 5)
+		FTS_ERROR("make IC enter into gesture(suspend) fail,state:%x", state);
+	else
+		FTS_INFO("Enter into gesture(suspend) successfully");
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+int fts_gesture_resume(struct fts_ts_data *ts_data)
+{
+	int i = 0;
+	u8 state = 0xFF;
+
+	FTS_FUNC_ENTER();
+	if (disable_irq_wake(ts_data->irq)) {
+		FTS_DEBUG("disable_irq_wake(irq:%d) fail", ts_data->irq);
+	}
+
+	for (i = 0; i < 5; i++) {
+		fts_write_reg(FTS_REG_GESTURE_EN, DISABLE);
+		msleep(1);
+		fts_read_reg(FTS_REG_GESTURE_EN, &state);
+		if (state == DISABLE)
+			break;
+	}
+
+	if (i >= 5)
+		FTS_ERROR("make IC exit gesture(resume) fail,state:%x", state);
+	else
+		FTS_INFO("resume from gesture successfully");
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+int fts_gesture_init(struct fts_ts_data *ts_data)
+{
+	struct input_dev *input_dev = ts_data->input_dev;
+
+	FTS_FUNC_ENTER();
+	input_set_capability(input_dev, EV_KEY, KEY_POWER);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_U);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_UP);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_DOWN);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_LEFT);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_RIGHT);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_O);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_E);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_M);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_L);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_W);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_S);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_V);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_Z);
+	input_set_capability(input_dev, EV_KEY, KEY_GESTURE_C);
+
+	__set_bit(KEY_GESTURE_RIGHT, input_dev->keybit);
+	__set_bit(KEY_GESTURE_LEFT, input_dev->keybit);
+	__set_bit(KEY_GESTURE_UP, input_dev->keybit);
+	__set_bit(KEY_GESTURE_DOWN, input_dev->keybit);
+	__set_bit(KEY_GESTURE_U, input_dev->keybit);
+	__set_bit(KEY_GESTURE_O, input_dev->keybit);
+	__set_bit(KEY_GESTURE_E, input_dev->keybit);
+	__set_bit(KEY_GESTURE_M, input_dev->keybit);
+	__set_bit(KEY_GESTURE_W, input_dev->keybit);
+	__set_bit(KEY_GESTURE_L, input_dev->keybit);
+	__set_bit(KEY_GESTURE_S, input_dev->keybit);
+	__set_bit(KEY_GESTURE_V, input_dev->keybit);
+	__set_bit(KEY_GESTURE_C, input_dev->keybit);
+	__set_bit(KEY_GESTURE_Z, input_dev->keybit);
+
+	fts_create_gesture_sysfs(ts_data->dev);
+
+	memset(&fts_gesture_data, 0, sizeof(struct fts_gesture_st));
+	ts_data->gesture_mode = FTS_GESTURE_EN;
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+int fts_gesture_exit(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+	sysfs_remove_group(&ts_data->dev->kobj, &fts_gesture_group);
+	FTS_FUNC_EXIT();
+	return 0;
+}
+#endif
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_point_report_check.c b/drivers/input/touchscreen/ft8756_spi/focaltech_point_report_check.c
new file mode 100644
index 00000000000000..dbc16d331798b0
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_point_report_check.c
@@ -0,0 +1,136 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, FocalTech Systems, Ltd., all rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*****************************************************************************
+*
+* File Name: focaltech_point_report_check.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-11-16
+*
+* Abstract: point report check function
+*
+* Version: v1.0
+*
+* Revision History:
+*
+*****************************************************************************/
+
+/*****************************************************************************
+* Included header files
+*****************************************************************************/
+#include "focaltech_core.h"
+
+#if FTS_POINT_REPORT_CHECK_EN
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define POINT_REPORT_CHECK_WAIT_TIME              200    /* unit:ms */
+
+/*****************************************************************************
+* functions body
+*****************************************************************************/
+/*****************************************************************************
+*  Name: fts_prc_func
+*  Brief: fts point report check work func, report whole up of points
+*  Input:
+*  Output:
+*  Return:
+*****************************************************************************/
+static void fts_prc_func(struct work_struct *work)
+{
+	struct fts_ts_data *ts_data = container_of(work,
+								  struct fts_ts_data, prc_work.work);
+	struct input_dev *input_dev = ts_data->input_dev;
+#if FTS_MT_PROTOCOL_B_EN
+	u32 finger_count = 0;
+	u32 max_touches = fts_data->pdata->max_touch_number;
+#endif
+
+	FTS_FUNC_ENTER();
+	mutex_lock(&ts_data->report_mutex);
+
+#if FTS_MT_PROTOCOL_B_EN
+	for (finger_count = 0; finger_count < max_touches; finger_count++) {
+		input_mt_slot(input_dev, finger_count);
+		input_mt_report_slot_state(input_dev, MT_TOOL_FINGER, false);
+	}
+#else
+	input_mt_sync(input_dev);
+#endif
+	input_report_key(input_dev, BTN_TOUCH, 0);
+	input_sync(input_dev);
+
+	mutex_unlock(&ts_data->report_mutex);
+
+	FTS_FUNC_EXIT();
+}
+
+/*****************************************************************************
+*  Name: fts_prc_queue_work
+*  Brief: fts point report check queue work, call it when interrupt comes
+*  Input:
+*  Output:
+*  Return:
+*****************************************************************************/
+void fts_prc_queue_work(struct fts_ts_data *ts_data)
+{
+	cancel_delayed_work_sync(&ts_data->prc_work);
+	queue_delayed_work(ts_data->ts_workqueue, &ts_data->prc_work,
+					   msecs_to_jiffies(POINT_REPORT_CHECK_WAIT_TIME));
+}
+
+/*****************************************************************************
+*  Name: fts_point_report_check_init
+*  Brief:
+*  Input:
+*  Output:
+*  Return: < 0: Fail to create esd check queue
+*****************************************************************************/
+int fts_point_report_check_init(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+
+	if (ts_data->ts_workqueue) {
+		INIT_DELAYED_WORK(&ts_data->prc_work, fts_prc_func);
+	} else {
+		FTS_ERROR("fts workqueue is NULL, can't run point report check function");
+		return -EINVAL;
+	}
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+/*****************************************************************************
+*  Name: fts_point_report_check_exit
+*  Brief:
+*  Input:
+*  Output:
+*  Return:
+*****************************************************************************/
+int fts_point_report_check_exit(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+
+	FTS_FUNC_EXIT();
+	return 0;
+}
+#endif /* FTS_POINT_REPORT_CHECK_EN */
+
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_spi.c b/drivers/input/touchscreen/ft8756_spi/focaltech_spi.c
new file mode 100644
index 00000000000000..7e6fd72f232787
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_spi.c
@@ -0,0 +1,362 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, FocalTech Systems, Ltd., all rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/************************************************************************
+*
+* File Name: focaltech_spi.c
+*
+*    Author: FocalTech Driver Team
+*
+*   Created: 2019-03-21
+*
+*  Abstract: new spi protocol communication with TP
+*
+*   Version: v1.0
+*
+* Revision History:
+*
+************************************************************************/
+
+/*****************************************************************************
+* Included header files
+*****************************************************************************/
+#include "focaltech_core.h"
+
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define SPI_RETRY_NUMBER            3
+#define CS_HIGH_DELAY               150 /* unit: us */
+#define SPI_BUF_LENGTH              256
+
+#define DATA_CRC_EN                 0x20
+#define WRITE_CMD                   0x00
+#define READ_CMD                    (0x80 | DATA_CRC_EN)
+
+#define SPI_DUMMY_BYTE              3
+#define SPI_HEADER_LENGTH           6   /*CRC*/
+/*****************************************************************************
+* Private enumerations, structures and unions using typedef
+*****************************************************************************/
+
+/*****************************************************************************
+* Static variables
+*****************************************************************************/
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+
+/*****************************************************************************
+* functions body
+*****************************************************************************/
+/* spi interface */
+static int fts_spi_transfer(u8 *tx_buf, u8 *rx_buf, u32 len)
+{
+	int ret = 0;
+	struct spi_device *spi = fts_data->spi;
+	struct spi_message msg;
+	struct spi_transfer xfer = {
+		.tx_buf = tx_buf,
+		.rx_buf = rx_buf,
+		.len    = len,
+	};
+
+	spi_message_init(&msg);
+	spi_message_add_tail(&xfer, &msg);
+
+#if defined(CONFIG_PM) && FTS_PATCH_COMERR_PM
+	if (fts_data && fts_data->pm_suspend) {
+		FTS_ERROR("system suspend, don't transfer.");
+		return -EACCES;
+	}
+#endif
+
+	ret = spi_sync(spi, &msg);
+	if (ret) {
+		FTS_ERROR("spi_sync fail,ret:%d", ret);
+		return ret;
+	}
+
+	return ret;
+}
+
+static void crckermit(u8 *data, u32 len, u16 *crc_out)
+{
+	u32 i = 0;
+	u32 j = 0;
+	u16 crc = 0xFFFF;
+
+	for (i = 0; i < len; i++) {
+		crc ^= data[i];
+		for (j = 0; j < 8; j++) {
+			if (crc & 0x01)
+				crc = (crc >> 1) ^ 0x8408;
+			else
+				crc = (crc >> 1);
+		}
+	}
+
+	*crc_out = crc;
+}
+
+static int rdata_check(u8 *rdata, u32 rlen)
+{
+	u16 crc_calc = 0;
+	u16 crc_read = 0;
+
+	crckermit(rdata, rlen - 2, &crc_calc);
+	crc_read = (u16)(rdata[rlen - 1] << 8) + rdata[rlen - 2];
+	if (crc_calc != crc_read) {
+		return -EIO;
+	}
+
+	return 0;
+}
+
+int fts_write(u8 *writebuf, u32 writelen)
+{
+	int ret = 0;
+	int i = 0;
+	struct fts_ts_data *ts_data = fts_data;
+	u8 *txbuf = NULL;
+	u8 *rxbuf = NULL;
+	u32 txlen = 0;
+	u32 txlen_need = writelen + SPI_HEADER_LENGTH + ts_data->dummy_byte;
+	u32 datalen = writelen - 1;
+
+	if (!writebuf || !writelen) {
+		FTS_ERROR("writebuf/len is invalid");
+		return -EINVAL;
+	}
+
+	mutex_lock(&ts_data->bus_lock);
+	if (txlen_need > SPI_BUF_LENGTH) {
+		txbuf = kzalloc(txlen_need, GFP_KERNEL);
+		if (NULL == txbuf) {
+			FTS_ERROR("txbuf malloc fail");
+			ret = -ENOMEM;
+			goto err_write;
+		}
+
+		rxbuf = kzalloc(txlen_need, GFP_KERNEL);
+		if (NULL == rxbuf) {
+			FTS_ERROR("rxbuf malloc fail");
+			ret = -ENOMEM;
+			goto err_write;
+		}
+	} else {
+		txbuf = ts_data->bus_tx_buf;
+		rxbuf = ts_data->bus_rx_buf;
+		memset(txbuf, 0x0, SPI_BUF_LENGTH);
+		memset(rxbuf, 0x0, SPI_BUF_LENGTH);
+	}
+
+	txbuf[txlen++] = writebuf[0];
+	txbuf[txlen++] = WRITE_CMD;
+	txbuf[txlen++] = (datalen >> 8) & 0xFF;
+	txbuf[txlen++] = datalen & 0xFF;
+	if (datalen > 0) {
+		txlen = txlen + SPI_DUMMY_BYTE;
+		memcpy(&txbuf[txlen], &writebuf[1], datalen);
+		txlen = txlen + datalen;
+	}
+
+	for (i = 0; i < SPI_RETRY_NUMBER; i++) {
+		ret = fts_spi_transfer(txbuf, rxbuf, txlen);
+		if ((0 == ret) && ((rxbuf[3] & 0xA0) == 0)) {
+			break;
+		} else {
+			FTS_DEBUG("data write(addr:%x),status:%x,retry:%d,ret:%d",
+					  writebuf[0], rxbuf[3], i, ret);
+			ret = -EIO;
+			udelay(CS_HIGH_DELAY);
+		}
+	}
+	if (ret < 0) {
+		FTS_ERROR("data write(addr:%x) fail,status:%x,ret:%d",
+				  writebuf[0], rxbuf[3], ret);
+	}
+
+err_write:
+	if (txlen_need > SPI_BUF_LENGTH) {
+		if (txbuf) {
+			kfree(txbuf);
+			txbuf = NULL;
+		}
+
+		if (rxbuf) {
+			kfree(rxbuf);
+			rxbuf = NULL;
+		}
+	}
+
+	udelay(CS_HIGH_DELAY);
+	mutex_unlock(&ts_data->bus_lock);
+	return ret;
+}
+
+int fts_write_reg(u8 addr, u8 value)
+{
+	u8 writebuf[2] = { 0 };
+
+	writebuf[0] = addr;
+	writebuf[1] = value;
+	return fts_write(writebuf, 2);
+}
+
+int fts_read(u8 *cmd, u32 cmdlen, u8 *data, u32 datalen)
+{
+	int ret = 0;
+	int i = 0;
+	struct fts_ts_data *ts_data = fts_data;
+	u8 *txbuf = NULL;
+	u8 *rxbuf = NULL;
+	u32 txlen = 0;
+	u32 txlen_need = datalen + SPI_HEADER_LENGTH + ts_data->dummy_byte;
+	u8 ctrl = READ_CMD;
+	u32 dp = 0;
+
+	if (!cmd || !cmdlen || !data || !datalen) {
+		FTS_ERROR("cmd/cmdlen/data/datalen is invalid");
+		return -EINVAL;
+	}
+
+	mutex_lock(&ts_data->bus_lock);
+	if (txlen_need > SPI_BUF_LENGTH) {
+		txbuf = kzalloc(txlen_need, GFP_KERNEL);
+		if (NULL == txbuf) {
+			FTS_ERROR("txbuf malloc fail");
+			ret = -ENOMEM;
+			goto err_read;
+		}
+
+		rxbuf = kzalloc(txlen_need, GFP_KERNEL);
+		if (NULL == rxbuf) {
+			FTS_ERROR("rxbuf malloc fail");
+			ret = -ENOMEM;
+			goto err_read;
+		}
+	} else {
+		txbuf = ts_data->bus_tx_buf;
+		rxbuf = ts_data->bus_rx_buf;
+		memset(txbuf, 0x0, SPI_BUF_LENGTH);
+		memset(rxbuf, 0x0, SPI_BUF_LENGTH);
+	}
+
+	txbuf[txlen++] = cmd[0];
+	txbuf[txlen++] = ctrl;
+	txbuf[txlen++] = (datalen >> 8) & 0xFF;
+	txbuf[txlen++] = datalen & 0xFF;
+	dp = txlen + SPI_DUMMY_BYTE;
+	txlen = dp + datalen;
+	if (ctrl & DATA_CRC_EN) {
+		txlen = txlen + 2;
+	}
+
+	for (i = 0; i < SPI_RETRY_NUMBER; i++) {
+		ret = fts_spi_transfer(txbuf, rxbuf, txlen);
+		if ((0 == ret) && ((rxbuf[3] & 0xA0) == 0)) {
+			memcpy(data, &rxbuf[dp], datalen);
+			/* crc check */
+			if (ctrl & DATA_CRC_EN) {
+				ret = rdata_check(&rxbuf[dp], txlen - dp);
+				if (ret < 0) {
+					FTS_DEBUG("data read(addr:%x) crc abnormal,retry:%d",
+							  cmd[0], i);
+					udelay(CS_HIGH_DELAY);
+					continue;
+				}
+			}
+			break;
+		} else {
+			FTS_DEBUG("data read(addr:%x) status:%x,retry:%d,ret:%d",
+					  cmd[0], rxbuf[3], i, ret);
+			ret = -EIO;
+			udelay(CS_HIGH_DELAY);
+		}
+	}
+
+	if (ret < 0) {
+		FTS_ERROR("data read(addr:%x) %s,status:%x,ret:%d", cmd[0],
+				  (i >= SPI_RETRY_NUMBER) ? "crc abnormal" : "fail",
+				  rxbuf[3], ret);
+	}
+
+err_read:
+	if (txlen_need > SPI_BUF_LENGTH) {
+		if (txbuf) {
+			kfree(txbuf);
+			txbuf = NULL;
+		}
+
+		if (rxbuf) {
+			kfree(rxbuf);
+			rxbuf = NULL;
+		}
+	}
+
+	udelay(CS_HIGH_DELAY);
+	mutex_unlock(&ts_data->bus_lock);
+	return ret;
+}
+
+int fts_read_reg(u8 addr, u8 *value)
+{
+	return fts_read(&addr, 1, value, 1);
+}
+
+int fts_bus_init(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+	ts_data->bus_tx_buf = kzalloc(SPI_BUF_LENGTH, GFP_KERNEL);
+	if (NULL == ts_data->bus_tx_buf) {
+		FTS_ERROR("failed to allocate memory for bus_tx_buf");
+		return -ENOMEM;
+	}
+
+	ts_data->bus_rx_buf = kzalloc(SPI_BUF_LENGTH, GFP_KERNEL);
+	if (NULL == ts_data->bus_rx_buf) {
+		FTS_ERROR("failed to allocate memory for bus_rx_buf");
+		return -ENOMEM;
+	}
+
+	ts_data->dummy_byte = SPI_DUMMY_BYTE;
+	FTS_FUNC_EXIT();
+	return 0;
+}
+
+int fts_bus_exit(struct fts_ts_data *ts_data)
+{
+	FTS_FUNC_ENTER();
+	if (ts_data && ts_data->bus_tx_buf) {
+		kfree(ts_data->bus_tx_buf);
+		ts_data->bus_tx_buf = NULL;
+	}
+
+	if (ts_data && ts_data->bus_rx_buf) {
+		kfree(ts_data->bus_rx_buf);
+		ts_data->bus_rx_buf = NULL;
+	}
+	FTS_FUNC_EXIT();
+	return 0;
+}
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_test/Makefile b/drivers/input/touchscreen/ft8756_spi/focaltech_test/Makefile
new file mode 100755
index 00000000000000..062610eba31af9
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_test/Makefile
@@ -0,0 +1,3 @@
+obj-$(CONFIG_TOUCHSCREEN_FTS) += focaltech_test.o
+obj-$(CONFIG_TOUCHSCREEN_FTS) += focaltech_test_ini.o
+obj-$(CONFIG_TOUCHSCREEN_FTS) += supported_ic/
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test.c b/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test.c
new file mode 100755
index 00000000000000..89b40e2f105ba0
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test.c
@@ -0,0 +1,2550 @@
+/*
+ *
+ * FocalTech TouchScreen driver.
+ *
+ * Copyright (c) 2012-2020, FocalTech Systems, Ltd., all rights reserved.
+ * Copyright (C) 2021-2022 XiaoMi, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/************************************************************************
+*
+* File Name: focaltech_test.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-01
+*
+* Modify:
+*
+* Abstract: create char device and proc node for  the comm between APK and TP
+*
+************************************************************************/
+
+/*****************************************************************************
+* Included header files
+*****************************************************************************/
+#include "focaltech_test.h"
+
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+struct fts_test *fts_ftest;
+
+#if FTS_TEST_EN
+struct test_funcs *test_func_list[] = {
+	&test_func_ft5652,
+};
+#endif
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+__weak int fts_test_init(struct fts_ts_data *ts_data)
+{
+	return 0;
+}
+
+__weak int fts_test_exit(struct fts_ts_data *ts_data)
+{
+	return 0;
+}
+
+__weak void print_buffer(int *buffer, int length, int line_num)
+{
+}
+
+#if FTS_TEST_EN
+/*****************************************************************************
+* functions body
+*****************************************************************************/
+void sys_delay(int ms)
+{
+	msleep(ms);
+}
+
+int fts_abs(int value)
+{
+	if (value < 0)
+		value = 0 - value;
+
+	return value;
+}
+
+void *fts_malloc(size_t size)
+{
+	return kzalloc(size, GFP_KERNEL);
+}
+
+void fts_free_proc(void *p)
+{
+	return kfree(p);
+}
+
+void print_buffer(int *buffer, int length, int line_num)
+{
+	int i = 0;
+	int j = 0;
+	int tmpline = 0;
+	char *tmpbuf = NULL;
+	int tmplen = 0;
+	int cnt = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	if (tdata && tdata->ts_data && (tdata->ts_data->log_level < 3)) {
+		return;
+	}
+
+	if ((NULL == buffer) || (length <= 0)) {
+		FTS_TEST_DBG("buffer/length(%d) fail", length);
+		return;
+	}
+
+	tmpline = line_num ? line_num : length;
+	tmplen = tmpline * 6 + 128;
+	tmpbuf = kzalloc(tmplen, GFP_KERNEL);
+
+	for (i = 0; i < length; i = i + tmpline) {
+		cnt = 0;
+		for (j = 0; j < tmpline; j++) {
+			cnt += snprintf(tmpbuf + cnt, tmplen - cnt, "%5d ", buffer[i + j]);
+			if ((cnt >= tmplen) || ((i + j + 1) >= length))
+				break;
+		}
+		FTS_TEST_DBG("%s", tmpbuf);
+	}
+
+	if (tmpbuf) {
+		kfree(tmpbuf);
+		tmpbuf = NULL;
+	}
+}
+
+/********************************************************************
+ * test read/write interface
+ *******************************************************************/
+static int fts_test_bus_read(
+	u8 *cmd, int cmdlen, u8 *data, int datalen)
+{
+	int ret = 0;
+
+	ret = fts_read(cmd, cmdlen, data, datalen);
+	if (ret < 0)
+		return ret;
+	else
+		return 0;
+}
+
+static int fts_test_bus_write(u8 *writebuf, int writelen)
+{
+	int ret = 0;
+
+	ret = fts_write(writebuf, writelen);
+	if (ret < 0)
+		return ret;
+	else
+		return 0;
+}
+
+int fts_test_read_reg(u8 addr, u8 *val)
+{
+	return fts_test_bus_read(&addr, 1, val, 1);
+}
+
+int fts_test_write_reg(u8 addr, u8 val)
+{
+	int ret;
+	u8 cmd[2] = {0};
+
+	cmd[0] = addr;
+	cmd[1] = val;
+	ret = fts_test_bus_write(cmd, 2);
+
+	return ret;
+}
+
+int fts_test_read(u8 addr, u8 *readbuf, int readlen)
+{
+	int ret = 0;
+	int i = 0;
+	int packet_length = 0;
+	int packet_num = 0;
+	int packet_remainder = 0;
+	int offset = 0;
+	int byte_num = readlen;
+
+	packet_num = byte_num / BYTES_PER_TIME;
+	packet_remainder = byte_num % BYTES_PER_TIME;
+	if (packet_remainder)
+		packet_num++;
+
+	if (byte_num < BYTES_PER_TIME) {
+		packet_length = byte_num;
+	} else {
+		packet_length = BYTES_PER_TIME;
+	}
+	/* FTS_TEST_DBG("packet num:%d, remainder:%d", packet_num, packet_remainder); */
+
+	ret = fts_test_bus_read(&addr, 1, &readbuf[offset], packet_length);
+	if (ret < 0) {
+		FTS_TEST_ERROR("read buffer fail");
+		return ret;
+	}
+	for (i = 1; i < packet_num; i++) {
+		offset += packet_length;
+		if ((i == (packet_num - 1)) && packet_remainder) {
+			packet_length = packet_remainder;
+		}
+
+		ret = fts_test_bus_read(&addr, 1, &readbuf[offset],
+								packet_length);
+
+		if (ret < 0) {
+			FTS_TEST_ERROR("read buffer fail");
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+int fts_test_write(u8 addr, u8 *writebuf, int writelen)
+{
+	int ret = 0;
+	int i = 0;
+	u8 *data = NULL;
+	int packet_length = 0;
+	int packet_num = 0;
+	int packet_remainder = 0;
+	int offset = 0;
+	int byte_num = writelen;
+
+	data = fts_malloc(BYTES_PER_TIME + 1);
+	if (!data) {
+		FTS_TEST_ERROR("malloc memory for bus write data fail");
+		return -ENOMEM;
+	}
+
+	packet_num = byte_num / BYTES_PER_TIME;
+	packet_remainder = byte_num % BYTES_PER_TIME;
+	if (packet_remainder)
+		packet_num++;
+
+	if (byte_num < BYTES_PER_TIME) {
+		packet_length = byte_num;
+	} else {
+		packet_length = BYTES_PER_TIME;
+	}
+	/* FTS_TEST_DBG("packet num:%d, remainder:%d", packet_num, packet_remainder); */
+
+	data[0] = addr;
+	for (i = 0; i < packet_num; i++) {
+		if (i != 0) {
+			data[0] = addr + 1;
+		}
+		if ((i == (packet_num - 1)) && packet_remainder) {
+			packet_length = packet_remainder;
+		}
+		memcpy(&data[1], &writebuf[offset], packet_length);
+
+		ret = fts_test_bus_write(data, packet_length + 1);
+		if (ret < 0) {
+			FTS_TEST_ERROR("write buffer fail");
+			fts_free(data);
+			return ret;
+		}
+
+		offset += packet_length;
+	}
+
+	fts_free(data);
+	return 0;
+}
+
+/********************************************************************
+ * test global function enter work/factory mode
+ *******************************************************************/
+int enter_work_mode(void)
+{
+	int ret = 0;
+	u8 mode = 0;
+	int i = 0;
+	int j = 0;
+
+	FTS_TEST_FUNC_ENTER();
+
+	ret = fts_test_read_reg(DEVIDE_MODE_ADDR, &mode);
+	if ((ret >= 0) && (0x00 == mode))
+		return 0;
+
+	for (i = 0; i < ENTER_WORK_FACTORY_RETRIES; i++) {
+		ret = fts_test_write_reg(DEVIDE_MODE_ADDR, 0x00);
+		if (ret >= 0) {
+			sys_delay(FACTORY_TEST_DELAY);
+			for (j = 0; j < 20; j++) {
+				ret = fts_test_read_reg(DEVIDE_MODE_ADDR, &mode);
+				if ((ret >= 0) && (0x00 == mode)) {
+					FTS_TEST_INFO("enter work mode success");
+					return 0;
+				} else
+					sys_delay(FACTORY_TEST_DELAY);
+			}
+		}
+
+		sys_delay(50);
+	}
+
+	if (i >= ENTER_WORK_FACTORY_RETRIES) {
+		FTS_TEST_ERROR("Enter work mode fail");
+		return -EIO;
+	}
+
+	FTS_TEST_FUNC_EXIT();
+	return 0;
+}
+
+int enter_factory_mode(void)
+{
+	int ret = 0;
+	u8 mode = 0;
+	int i = 0;
+	int j = 0;
+
+	ret = fts_test_read_reg(DEVIDE_MODE_ADDR, &mode);
+	if ((ret >= 0) && (0x40 == mode))
+		return 0;
+
+	for (i = 0; i < ENTER_WORK_FACTORY_RETRIES; i++) {
+		ret = fts_test_write_reg(DEVIDE_MODE_ADDR, 0x40);
+		if (ret >= 0) {
+			sys_delay(FACTORY_TEST_DELAY);
+			for (j = 0; j < 20; j++) {
+				ret = fts_test_read_reg(DEVIDE_MODE_ADDR, &mode);
+				if ((ret >= 0) && (0x40 == mode)) {
+					FTS_TEST_INFO("enter factory mode success");
+					sys_delay(200);
+					return 0;
+				} else
+					sys_delay(FACTORY_TEST_DELAY);
+			}
+		}
+
+		sys_delay(50);
+	}
+
+	if (i >= ENTER_WORK_FACTORY_RETRIES) {
+		FTS_TEST_ERROR("Enter factory mode fail");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+/*
+ * read_mass_data - read rawdata/short test data
+ * addr - register addr which read data from
+ * byte_num - read data length, unit:byte
+ * buf - save data
+ *
+ * return 0 if read data succuss, otherwise return error code
+ */
+int read_mass_data(u8 addr, int byte_num, int *buf)
+{
+	int ret = 0;
+	int i = 0;
+	u8 *data = NULL;
+
+	data = (u8 *)fts_malloc(byte_num * sizeof(u8));
+	if (NULL == data) {
+		FTS_TEST_SAVE_ERR("mass data buffer malloc fail\n");
+		return -ENOMEM;
+	}
+
+	/* read rawdata buffer */
+	FTS_TEST_INFO("mass data len:%d", byte_num);
+	ret = fts_test_read(addr, data, byte_num);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read mass data fail\n");
+		goto read_massdata_err;
+	}
+
+	for (i = 0; i < byte_num; i = i + 2) {
+		buf[i >> 1] = (int)(short)((data[i] << 8) + data[i + 1]);
+	}
+
+	ret = 0;
+read_massdata_err:
+	fts_free(data);
+	return ret;
+}
+
+int read_mass_data_u16(u8 addr, int byte_num, int *buf)
+{
+	int ret = 0;
+	int i = 0;
+	u8 *data = NULL;
+
+	data = (u8 *)fts_malloc(byte_num * sizeof(u8));
+	if (NULL == data) {
+		FTS_TEST_SAVE_ERR("mass data buffer malloc fail\n");
+		return -ENOMEM;
+	}
+
+	/* read rawdata buffer */
+	FTS_TEST_INFO("mass data len:%d", byte_num);
+	ret = fts_test_read(addr, data, byte_num);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read mass data fail\n");
+		goto read_massdata_err;
+	}
+
+	for (i = 0; i < byte_num; i = i + 2) {
+		buf[i >> 1] = (int)(u16)((data[i] << 8) + data[i + 1]);
+	}
+
+	ret = 0;
+read_massdata_err:
+	fts_free(data);
+	return ret;
+}
+
+int short_get_adcdata_incell(u8 retval, u8 ch_num, int byte_num, int *adc_buf)
+{
+	int ret = 0;
+	int times = 0;
+	u8 short_state = 0;
+
+	FTS_TEST_FUNC_ENTER();
+
+	/* Start ADC sample */
+	ret = fts_test_write_reg(FACTORY_REG_SHORT_TEST_EN, 0x01);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("start short test fail\n");
+		goto adc_err;
+	}
+
+	sys_delay(ch_num * FACTORY_TEST_DELAY);
+	for (times = 0; times < FACTORY_TEST_RETRY; times++) {
+		ret = fts_test_read_reg(FACTORY_REG_SHORT_TEST_STATE, &short_state);
+		if ((ret >= 0) && (retval == short_state))
+			break;
+		else
+			FTS_TEST_DBG("reg%x=%x,retry:%d",
+						 FACTORY_REG_SHORT_TEST_STATE, short_state, times);
+
+		sys_delay(FACTORY_TEST_RETRY_DELAY);
+	}
+	if (times >= FACTORY_TEST_RETRY) {
+		FTS_TEST_SAVE_ERR("short test timeout, ADC data not OK\n");
+		ret = -EIO;
+		goto adc_err;
+	}
+
+	ret = read_mass_data(FACTORY_REG_SHORT_ADDR, byte_num, adc_buf);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("get short(adc) data fail\n");
+	}
+
+adc_err:
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+/*
+ * wait_state_update - wait fw status update
+ */
+int wait_state_update(u8 retval)
+{
+	int ret = 0;
+	int times = 0;
+	u8 state = 0xFF;
+
+	while (times++ < FACTORY_TEST_RETRY) {
+		sys_delay(FACTORY_TEST_DELAY);
+		/* Wait register status update */
+		state = 0xFF;
+		ret = fts_test_read_reg(FACTORY_REG_PARAM_UPDATE_STATE, &state);
+		if ((ret >= 0) && (retval == state))
+			break;
+		else
+			FTS_TEST_DBG("reg%x=%x,retry:%d", \
+						 FACTORY_REG_PARAM_UPDATE_STATE, state, times);
+	}
+
+	if (times >= FACTORY_TEST_RETRY) {
+		FTS_TEST_SAVE_ERR("Wait State Update fail\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+/*
+ * start_scan - start to scan a frame
+ */
+int start_scan(void)
+{
+	int ret = 0;
+	u8 addr = 0;
+	u8 val = 0;
+	u8 finish_val = 0;
+	int times = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	if ((NULL == tdata) || (NULL == tdata->func)) {
+		FTS_TEST_SAVE_ERR("test/func is null\n");
+		return -EINVAL;
+	}
+
+	if (SCAN_SC == tdata->func->startscan_mode) {
+		/* sc ic */
+		addr = FACTORY_REG_SCAN_ADDR2;
+		val = 0x01;
+		finish_val = 0x00;
+	} else {
+		addr = DEVIDE_MODE_ADDR;
+		val = 0xC0;
+		finish_val = 0x40;
+	}
+
+	/* write register to start scan */
+	ret = fts_test_write_reg(addr, val);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("write start scan mode fail\n");
+		return ret;
+	}
+
+	/* Wait for the scan to complete */
+	while (times++ < FACTORY_TEST_RETRY) {
+		sys_delay(FACTORY_TEST_DELAY);
+
+		ret = fts_test_read_reg(addr, &val);
+		if ((ret >= 0) && (val == finish_val)) {
+			break;
+		} else
+			FTS_TEST_DBG("reg%x=%x,retry:%d", addr, val, times);
+	}
+
+	if (times >= FACTORY_TEST_RETRY) {
+		FTS_TEST_SAVE_ERR("scan timeout\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static int read_rawdata(
+	struct fts_test *tdata,
+	u8 off_addr,
+	u8 off_val,
+	u8 rawdata_addr,
+	int byte_num,
+	int *data)
+{
+	int ret = 0;
+
+	/* set line addr or rawdata start addr */
+	ret = fts_test_write_reg(off_addr, off_val);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("wirte line/start addr fail\n");
+		return ret;
+	}
+
+	if (tdata->func->raw_u16)
+		ret = read_mass_data_u16(rawdata_addr, byte_num, data);
+	else
+		ret = read_mass_data(rawdata_addr, byte_num, data);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read rawdata fail\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+int get_rawdata(int *data)
+{
+	int ret = 0;
+	u8 val = 0;
+	u8 addr = 0;
+	u8 rawdata_addr = 0;
+	int byte_num = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	if ((NULL == tdata) || (NULL == tdata->func)) {
+		FTS_TEST_SAVE_ERR("test/func is null\n");
+		return -EINVAL;
+	}
+
+	/* enter factory mode */
+	ret = enter_factory_mode();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("failed to enter factory mode,ret=%d\n", ret);
+		return ret;
+	}
+
+	/* start scanning */
+	ret = start_scan();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("scan fail\n");
+		return ret;
+	}
+
+	/* read rawdata */
+	if (IC_HW_INCELL == tdata->func->hwtype) {
+		val = 0xAD;
+		addr = FACTORY_REG_LINE_ADDR;
+		rawdata_addr = FACTORY_REG_RAWDATA_ADDR;
+	} else if (IC_HW_MC_SC == tdata->func->hwtype) {
+		val = 0xAA;
+		addr = FACTORY_REG_LINE_ADDR;
+		rawdata_addr = FACTORY_REG_RAWDATA_ADDR_MC_SC;
+	} else {
+		val = 0x0;
+		addr = FACTORY_REG_RAWDATA_SADDR_SC;
+		rawdata_addr = FACTORY_REG_RAWDATA_ADDR_SC;
+	}
+
+	byte_num = tdata->node.node_num * 2;
+	ret = read_rawdata(tdata, addr, val, rawdata_addr, byte_num, data);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read rawdata fail\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+/*
+ * chip_clb - auto clb
+ */
+int chip_clb(void)
+{
+	int ret = 0;
+	u8 val = 0;
+	int times = 0;
+
+	/* start clb */
+	ret = fts_test_write_reg(FACTORY_REG_CLB, 0x04);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("write start clb fail\n");
+		return ret;
+	}
+
+	while (times++ < FACTORY_TEST_RETRY) {
+		sys_delay(FACTORY_TEST_RETRY_DELAY);
+		ret = fts_test_read_reg(FACTORY_REG_CLB, &val);
+		if ((0 == ret) && (0x02 == val)) {
+			/* clb ok */
+			break;
+		} else
+			FTS_TEST_DBG("reg%x=%x,retry:%d", FACTORY_REG_CLB, val, times);
+	}
+
+	if (times >= FACTORY_TEST_RETRY) {
+		FTS_TEST_SAVE_ERR("chip clb timeout\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+/*
+ * get_cb_incell - get cb data for incell IC
+ */
+int get_cb_incell(u16 saddr, int byte_num, int *cb_buf)
+{
+	int ret = 0;
+	int i = 0;
+	u8 cb_addr = 0;
+	u8 addr_h = 0;
+	u8 addr_l = 0;
+	int read_num = 0;
+	int packet_num = 0;
+	int packet_remainder = 0;
+	int offset = 0;
+	int addr = 0;
+	u8 *data = NULL;
+
+	data = (u8 *)fts_malloc(byte_num * sizeof(u8));
+	if (NULL == data) {
+		FTS_TEST_SAVE_ERR("cb buffer malloc fail\n");
+		return -ENOMEM;
+	}
+
+	packet_num = byte_num / BYTES_PER_TIME;
+	packet_remainder = byte_num % BYTES_PER_TIME;
+	if (packet_remainder)
+		packet_num++;
+	read_num = BYTES_PER_TIME;
+
+	FTS_TEST_INFO("cb packet:%d,remainder:%d", packet_num, packet_remainder);
+	cb_addr = FACTORY_REG_CB_ADDR;
+	for (i = 0; i < packet_num; i++) {
+		offset = read_num * i;
+		addr = saddr + offset;
+		addr_h = (addr >> 8) & 0xFF;
+		addr_l = addr & 0xFF;
+		if ((i == (packet_num - 1)) && packet_remainder) {
+			read_num = packet_remainder;
+		}
+
+		ret = fts_test_write_reg(FACTORY_REG_CB_ADDR_H, addr_h);
+		if (ret) {
+			FTS_TEST_SAVE_ERR("write cb addr high fail\n");
+			goto TEST_CB_ERR;
+		}
+		ret = fts_test_write_reg(FACTORY_REG_CB_ADDR_L, addr_l);
+		if (ret) {
+			FTS_TEST_SAVE_ERR("write cb addr low fail\n");
+			goto TEST_CB_ERR;
+		}
+
+		ret = fts_test_read(cb_addr, data + offset, read_num);
+		if (ret) {
+			FTS_TEST_SAVE_ERR("read cb fail\n");
+			goto TEST_CB_ERR;
+		}
+	}
+
+	for (i = 0; i < byte_num; i++) {
+		cb_buf[i] = data[i];
+	}
+
+TEST_CB_ERR:
+	fts_free(data);
+	return ret;
+}
+
+int get_cb_sc(int byte_num, int *cb_buf, enum byte_mode mode)
+{
+	int ret = 0;
+	int i = 0;
+	int read_num = 0;
+	int packet_num = 0;
+	int packet_remainder = 0;
+	int offset = 0;
+	u8 cb_addr = 0;
+	u8 off_addr = 0;
+	u8 off_h_addr = 0;
+	struct fts_test *tdata = fts_ftest;
+	u8 *cb = NULL;
+
+	if ((NULL == tdata) || (NULL == tdata->func)) {
+		FTS_TEST_SAVE_ERR("test/func is null\n");
+		return -EINVAL;
+	}
+
+	cb = (u8 *)fts_malloc(byte_num * sizeof(u8));
+	if (NULL == cb) {
+		FTS_TEST_SAVE_ERR("malloc memory for cb buffer fail\n");
+		return -ENOMEM;
+	}
+
+	if (IC_HW_MC_SC == tdata->func->hwtype) {
+		cb_addr = FACTORY_REG_MC_SC_CB_ADDR;
+		off_addr = FACTORY_REG_MC_SC_CB_ADDR_OFF;
+		off_h_addr = FACTORY_REG_MC_SC_CB_H_ADDR_OFF;
+	} else if (IC_HW_SC == tdata->func->hwtype) {
+		cb_addr = FACTORY_REG_SC_CB_ADDR;
+		off_addr = FACTORY_REG_SC_CB_ADDR_OFF;
+	}
+
+	packet_num = byte_num / BYTES_PER_TIME;
+	packet_remainder = byte_num % BYTES_PER_TIME;
+	if (packet_remainder)
+		packet_num++;
+	read_num = BYTES_PER_TIME;
+	offset = 0;
+
+	FTS_TEST_INFO("cb packet:%d,remainder:%d", packet_num, packet_remainder);
+	for (i = 0; i < packet_num; i++) {
+		if ((i == (packet_num - 1)) && packet_remainder) {
+			read_num = packet_remainder;
+		}
+
+		ret = fts_test_write_reg(off_addr, offset);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("write cb addr offset fail\n");
+			goto cb_err;
+		}
+
+		if (tdata->func->cb_high_support) {
+			ret = fts_test_write_reg(off_h_addr, offset >> 8);
+			if (ret < 0) {
+				FTS_TEST_SAVE_ERR("write cb_h addr offset fail\n");
+				goto cb_err;
+			}
+		}
+
+		ret = fts_test_read(cb_addr, cb + offset, read_num);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("read cb fail\n");
+			goto cb_err;
+		}
+
+		offset += read_num;
+	}
+
+	if (DATA_ONE_BYTE == mode) {
+		for (i = 0; i < byte_num; i++) {
+			cb_buf[i] = cb[i];
+		}
+	} else if (DATA_TWO_BYTE == mode) {
+		for (i = 0; i < byte_num; i = i + 2) {
+			cb_buf[i >> 1] = (int)(((int)(cb[i]) << 8) + cb[i + 1]);
+		}
+	}
+
+	ret = 0;
+cb_err:
+	fts_free(cb);
+	return ret;
+}
+
+bool compare_data(int *data, int min, int max, int min_vk, int max_vk, bool key)
+{
+	int i = 0;
+	bool result = true;
+	struct fts_test *tdata = fts_ftest;
+	int rx = tdata->node.rx_num;
+	int node_va = tdata->node.node_num - tdata->node.key_num;
+
+	if (!data || !tdata->node_valid) {
+		FTS_TEST_SAVE_ERR("data/node_valid is null\n");
+		return false;
+	}
+
+	for (i = 0; i < node_va; i++) {
+		if (0 == tdata->node_valid[i])
+			continue;
+
+		if ((data[i] < min) || (data[i] > max)) {
+			FTS_TEST_SAVE_ERR("test fail,node(%4d,%4d)=%5d,range=(%5d,%5d)\n",
+							  i / rx + 1, i % rx + 1, data[i], min, max);
+			result = false;
+		}
+	}
+
+	if (key) {
+		for (i = node_va; i < tdata->node.node_num; i++) {
+			if (0 == tdata->node_valid[i])
+				continue;
+
+			if ((data[i] < min_vk) || (data[i] > max_vk)) {
+				FTS_TEST_SAVE_ERR("test fail,node(%4d,%4d)=%5d,range=(%5d,%5d)\n",
+								  i / rx + 1, i % rx + 1,
+								  data[i], min_vk, max_vk);
+				result = false;
+			}
+		}
+	}
+
+	return result;
+}
+
+bool compare_array(int *data, int *min, int *max, bool key)
+{
+	int i = 0;
+	bool result = true;
+	struct fts_test *tdata = fts_ftest;
+	int rx = tdata->node.rx_num;
+	int node_num = tdata->node.node_num;
+
+	if (!data || !min || !max || !tdata->node_valid) {
+		FTS_TEST_SAVE_ERR("data/min/max/node_valid is null\n");
+		return false;
+	}
+
+	if (!key) {
+		node_num -= tdata->node.key_num;
+	}
+	for (i = 0; i < node_num; i++) {
+		if (0 == tdata->node_valid[i])
+			continue;
+
+		if ((data[i] < min[i]) || (data[i] > max[i])) {
+			FTS_TEST_SAVE_ERR("test fail,node(%4d,%4d)=%5d,range=(%5d,%5d)\n",
+							  i / rx + 1, i % rx + 1, data[i], min[i], max[i]);
+			result = false;
+		}
+	}
+
+	return result;
+}
+
+/*
+ * show_data - show and save test data to testresult.txt
+ */
+void show_data(int *data, bool key)
+{
+#if TXT_SUPPORT
+	int i = 0;
+	int j = 0;
+	struct fts_test *tdata = fts_ftest;
+	int node_num = tdata->node.node_num;
+	int tx_num = tdata->node.tx_num;
+	int rx_num = tdata->node.rx_num;
+
+	FTS_TEST_FUNC_ENTER();
+	for (i = 0; i < tx_num; i++) {
+		FTS_TEST_SAVE_INFO("Ch/Tx_%02d:  ", i + 1);
+		for (j = 0; j < rx_num; j++) {
+			FTS_TEST_SAVE_INFO("%5d, ", data[i * rx_num + j]);
+		}
+		FTS_TEST_SAVE_INFO("\n");
+	}
+
+	if (key) {
+		FTS_TEST_SAVE_INFO("Ch/Tx_%02d:  ", tx_num + 1);
+		for (i = tx_num * rx_num; i < node_num; i++) {
+			FTS_TEST_SAVE_INFO("%5d, ",  data[i]);
+		}
+		FTS_TEST_SAVE_INFO("\n");
+	}
+	FTS_TEST_FUNC_EXIT();
+#endif
+}
+
+/* mc_sc only */
+/* Only V3 Pattern has mapping & no-mapping */
+int mapping_switch(u8 mapping)
+{
+	int ret = 0;
+	u8 val = 0xFF;
+	struct fts_test *tdata = fts_ftest;
+
+	if (tdata->v3_pattern) {
+		ret = fts_test_read_reg(FACTORY_REG_NOMAPPING, &val);
+		if (ret < 0) {
+			FTS_TEST_ERROR("read 0x54 register fail");
+			return ret;
+		}
+
+		if (val != mapping) {
+			ret = fts_test_write_reg(FACTORY_REG_NOMAPPING, mapping);
+			if (ret < 0) {
+				FTS_TEST_ERROR("write 0x54 register fail");
+				return ret;
+			}
+			sys_delay(FACTORY_TEST_DELAY);
+		}
+	}
+
+	return 0;
+}
+
+bool get_fw_wp(u8 wp_ch_sel, enum wp_type water_proof_type)
+{
+	bool fw_wp_state = false;
+
+	switch (water_proof_type) {
+	case WATER_PROOF_ON:
+		/* bit5: 0-check in wp on, 1-not check */
+		fw_wp_state = !(wp_ch_sel & 0x20);
+		break;
+	case WATER_PROOF_ON_TX:
+		/* Bit6:  0-check Rx+Tx in wp mode  1-check one channel
+		   Bit2:  0-check Tx in wp mode;  1-check Rx in wp mode
+		*/
+		fw_wp_state = (!(wp_ch_sel & 0x40) || !(wp_ch_sel & 0x04));
+		break;
+	case WATER_PROOF_ON_RX:
+		fw_wp_state = (!(wp_ch_sel & 0x40) || (wp_ch_sel & 0x04));
+		break;
+	case WATER_PROOF_OFF:
+		/* bit7: 0-check in wp off, 1-not check */
+		fw_wp_state = !(wp_ch_sel & 0x80);
+		break;
+	case WATER_PROOF_OFF_TX:
+		/* Bit1-0:  00-check Tx in non-wp mode
+					01-check Rx in non-wp mode
+					10:check Rx+Tx in non-wp mode
+		*/
+		fw_wp_state = ((0x0 == (wp_ch_sel & 0x03)) || (0x02 == (wp_ch_sel & 0x03)));
+		break;
+	case WATER_PROOF_OFF_RX:
+		fw_wp_state = ((0x01 == (wp_ch_sel & 0x03)) || (0x02 == (wp_ch_sel & 0x03)));
+		break;
+	default:
+		break;
+	}
+
+	return fw_wp_state;
+}
+
+int get_cb_mc_sc(u8 wp, int byte_num, int *cb_buf, enum byte_mode mode)
+{
+	int ret = 0;
+
+	/* 1:waterproof 0:non-waterproof */
+	ret = fts_test_write_reg(FACTORY_REG_MC_SC_MODE, wp);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get mc_sc mode fail\n");
+		return ret;
+	}
+
+	/* read cb */
+	ret = get_cb_sc(byte_num, cb_buf, mode);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get sc cb fail\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+int get_rawdata_mc_sc(enum wp_type wp, int *data)
+{
+	int ret = 0;
+	u8 val = 0;
+	u8 addr = 0;
+	u8 rawdata_addr = 0;
+	int byte_num = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	if ((NULL == tdata) || (NULL == tdata->func)) {
+		FTS_TEST_SAVE_ERR("test/func is null\n");
+		return -EINVAL;
+	}
+
+	byte_num = tdata->sc_node.node_num * 2;
+	addr = FACTORY_REG_LINE_ADDR;
+	rawdata_addr = FACTORY_REG_RAWDATA_ADDR_MC_SC;
+	if (WATER_PROOF_ON == wp) {
+		val = 0xAC;
+	} else if (WATER_PROOF_OFF == wp) {
+		val = 0xAB;
+	} else if (HIGH_SENSITIVITY == wp) {
+		val = 0xA0;
+	} else if (HOV == wp) {
+		val = 0xA1;
+		byte_num = 4 * 2;
+	}
+
+	ret = read_rawdata(tdata, addr, val, rawdata_addr, byte_num, data);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read rawdata fail\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+int get_rawdata_mc(u8 fre, u8 fir, int *rawdata)
+{
+	int ret = 0;
+	int i = 0;
+
+	if (NULL == rawdata ) {
+		FTS_TEST_SAVE_ERR("rawdata buffer is null\n");
+		return -EINVAL;
+	}
+
+	/* set frequecy high/low */
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, fre);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set frequecy fail,ret=%d\n", ret);
+		return ret;
+	}
+
+	/* fir enable/disable */
+	ret = fts_test_write_reg(FACTORY_REG_FIR, fir);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set fir fail,ret=%d\n", ret);
+		return ret;
+	}
+
+	/* get rawdata */
+	for (i = 0; i < 3; i++) {
+		/* lost 3 frames, in order to obtain stable data */
+		ret = get_rawdata(rawdata);
+	}
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get rawdata fail,ret=%d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+int short_get_adc_data_mc(u8 retval, int byte_num, int *adc_buf, u8 mode)
+{
+	int ret = 0;
+	int i = 0;
+	u8 short_state = 0;
+	u8 short_state_reg = 0;
+	u8 short_en_reg = 0;
+	u8 short_data_reg = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	FTS_TEST_FUNC_ENTER();
+	if (tdata->func->mc_sc_short_v2) {
+		short_en_reg = FACTROY_REG_SHORT2_TEST_EN;
+		short_state_reg = FACTROY_REG_SHORT2_TEST_STATE;
+		short_data_reg = FACTORY_REG_SHORT2_ADDR_MC;
+	} else {
+		short_en_reg = FACTROY_REG_SHORT_TEST_EN;
+		short_state_reg = FACTROY_REG_SHORT_TEST_EN;
+		short_data_reg = FACTORY_REG_SHORT_ADDR_MC;
+	}
+
+	/* select short test mode & start test */
+	ret = fts_test_write_reg(short_en_reg, mode);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("write short test mode fail\n");
+		goto test_err;
+	}
+
+	for (i = 0; i < FACTORY_TEST_RETRY; i++) {
+		sys_delay(FACTORY_TEST_RETRY_DELAY);
+
+		ret = fts_test_read_reg(short_state_reg, &short_state);
+		if ((ret >= 0) && (retval == short_state))
+			break;
+		else
+			FTS_TEST_DBG("reg%x=%x,retry:%d", short_state_reg, short_state, i);
+	}
+	if (i >= FACTORY_TEST_RETRY) {
+		FTS_TEST_SAVE_ERR("short test timeout, ADC data not OK\n");
+		ret = -EIO;
+		goto test_err;
+	}
+
+	ret = read_mass_data(short_data_reg, byte_num, adc_buf);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get short(adc) data fail\n");
+	}
+
+	FTS_TEST_DBG("adc data:\n");
+	print_buffer(adc_buf, byte_num / 2, 0);
+test_err:
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+bool compare_mc_sc(bool tx_check, bool rx_check, int *data, int *min, int *max)
+{
+	int i = 0;
+	bool result = true;
+	struct fts_test *tdata = fts_ftest;
+
+	if (rx_check) {
+		for (i = 0; i < tdata->sc_node.rx_num; i++) {
+			if (0 == tdata->node_valid_sc[i])
+				continue;
+
+			if ((data[i] < min[i]) || (data[i] > max[i])) {
+				FTS_TEST_SAVE_ERR("test fail,rx%d=%5d,range=(%5d,%5d)\n",
+								  i + 1, data[i], min[i], max[i]);
+				result = false;
+			}
+		}
+	}
+
+	if (tx_check) {
+		for (i = tdata->sc_node.rx_num; i < tdata->sc_node.node_num; i++) {
+			if (0 == tdata->node_valid_sc[i])
+				continue;
+
+			if ((data[i] < min[i]) || (data[i] > max[i])) {
+				FTS_TEST_SAVE_INFO("test fail,tx%d=%5d,range=(%5d,%5d)\n",
+								   i - tdata->sc_node.rx_num + 1,
+								   data[i], min[i], max[i]);
+				result = false;
+			}
+		}
+	}
+
+	return result;
+}
+
+void show_data_mc_sc(int *data)
+{
+	int i = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	FTS_TEST_SAVE_INFO("SCap Rx: ");
+	for (i = 0; i < tdata->sc_node.rx_num; i++) {
+		FTS_TEST_SAVE_INFO( "%5d, ", data[i]);
+	}
+	FTS_TEST_SAVE_INFO("\n");
+
+	FTS_TEST_SAVE_INFO("SCap Tx: ");
+	for (i = tdata->sc_node.rx_num; i < tdata->sc_node.node_num; i++) {
+		FTS_TEST_SAVE_INFO( "%5d, ", data[i]);
+	}
+	FTS_TEST_SAVE_INFO("\n");
+}
+/* mc_sc end*/
+
+static int fts_test_malloc_free_data_txt(struct fts_test *tdata, bool allocate)
+{
+#if TXT_SUPPORT
+	if (true == allocate) {
+		tdata->testresult = vmalloc(TXT_BUFFER_LEN);
+		if (NULL == tdata->testresult) {
+			FTS_TEST_ERROR("tdata->testresult malloc fail\n");
+			return -ENOMEM;
+		}
+
+		tdata->testresult_len = 0;
+		FTS_TEST_SAVE_INFO("FW version:0x%02x\n", tdata->fw_ver);
+		FTS_TEST_SAVE_INFO("tx_num:%d, rx_num:%d, key_num:%d\n",
+						   tdata->node.tx_num, tdata->node.rx_num,
+						   tdata->node.key_num);
+	} else {
+		if (tdata->testresult) {
+			vfree(tdata->testresult);
+			tdata->testresult = NULL;
+		}
+	}
+#endif
+	return 0;
+}
+
+#if CSV_SUPPORT
+static int fts_test_get_item_count_scap_csv(int index)
+{
+	int ret = 0;
+	int i = 0;
+	int select = 0;
+	u8 wc_sel = 0;
+	u8 hc_sel = 0;
+	u8 scap_select[4] = { 0 };
+
+	/* get waterproof channel select */
+	ret = fts_test_read_reg(FACTORY_REG_WC_SEL, &wc_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read water_channel_sel fail,ret=%d\n", ret);
+		return index;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_HC_SEL, &hc_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read high_channel_sel fail,ret=%d\n", ret);
+		return index;
+	}
+
+	scap_select[0] = get_fw_wp(wc_sel, WATER_PROOF_ON);
+	scap_select[1] = get_fw_wp(wc_sel, WATER_PROOF_OFF);
+	scap_select[2] = (hc_sel & 0x03) ? 1 : 0;
+	scap_select[3] = (hc_sel & 0x04) ? 1 : 0;
+
+	for (i = 0; i < 4; i++) {
+		if (scap_select[i])
+			select++;
+		if (select == index)
+			break;
+	}
+
+	return (i + 1);
+}
+#endif
+
+static void fts_test_merge_data(struct fts_test *tdata)
+{
+#if CSV_SUPPORT
+	int i = 0;
+	int j = 0;
+	int index = 0;
+	int k = 0;
+	int tx = 0;
+	int rx = 0;
+	int node_num = 0;
+	int offset = 0;
+	int start_line = 11;
+	int data_count = 0;
+	char *csv_buffer = NULL;
+	char *line2_buffer = NULL;
+	int csv_length = 0;
+	int line2_length = 0;
+	int csv_item_count = 0;
+	struct fts_test_data *td = &tdata->testdata;
+	struct item_info *info = NULL;
+
+	csv_buffer = vmalloc(CSV_BUFFER_LEN);
+	if (!csv_buffer) {
+		FTS_TEST_ERROR("csv_buffer malloc fail\n");
+		return ;
+	}
+
+	tdata->csv_data_buffer = csv_buffer;
+
+	line2_buffer = vmalloc(CSV_LINE2_BUFFER_LEN);
+	if (!line2_buffer) {
+		FTS_TEST_ERROR("line2_buffer malloc fail\n");
+		goto csv_save_err;
+	}
+
+	FTS_TEST_INFO("test item count:%d", td->item_count);
+	/* line 1 */
+	csv_length += snprintf(csv_buffer + csv_length, \
+						   CSV_BUFFER_LEN - csv_length, \
+						   "ECC, 85, 170, IC Name, %s, IC Code, %x\n", \
+						   tdata->ini.ic_name, \
+						   (tdata->ini.ic_code >> IC_CODE_OFFSET));
+
+	/* line 2 */
+	for (i = 0; i < td->item_count; i++) {
+		info = &td->info[i];
+		if (info->mc_sc) {
+			node_num = tdata->sc_node.node_num;
+			/* set max len of tx/rx to column */
+			rx = (tdata->sc_node.tx_num > tdata->sc_node.rx_num)
+				 ? tdata->sc_node.tx_num : tdata->sc_node.rx_num;
+		} else {
+			if (info->key_support && (tdata->node.key_num > 0))
+				node_num = (tdata->node.tx_num + 1) * tdata->node.rx_num;
+			else
+				node_num = tdata->node.tx_num * tdata->node.rx_num;
+			rx = tdata->node.rx_num;
+		}
+
+		if (info->datalen > node_num) {
+			data_count = (info->datalen - 1 ) / node_num + 1;
+			tx = (node_num - 1 ) / rx + 1;
+		} else {
+			data_count = 1;
+			tx = ((info->datalen - 1) / rx) + 1;
+		}
+
+		for (j = 1; j <= data_count; j++) {
+			index = j;
+
+			if (tdata->func->hwtype == IC_HW_MC_SC) {
+				/*MC_SC, rawdata index will be 2*/
+				if ((info->code == CODE_M_RAWDATA_TEST) && (data_count == 1)) {
+					index = 2;
+				}
+
+				/*MC_SC, SCAP index will be 1~4*/
+				if ((info->code == CODE_M_SCAP_CB_TEST)
+					|| (info->code == CODE_M_SCAP_RAWDATA_TEST)) {
+					index = fts_test_get_item_count_scap_csv(j);
+				}
+			}
+
+			line2_length += snprintf(line2_buffer + line2_length, \
+									 CSV_LINE2_BUFFER_LEN - line2_length, \
+									 "%s, %d, %d, %d, %d, %d, ", \
+									 info->name, info->code, tx, rx,
+									 start_line, index);
+			start_line += tx;
+			csv_item_count++;
+		}
+	}
+
+	csv_length += snprintf(csv_buffer + csv_length, \
+						   CSV_BUFFER_LEN - csv_length, \
+						   "TestItem Num, %d, ", \
+						   csv_item_count);
+
+	if (line2_length > 0) {
+		csv_length += snprintf(csv_buffer + csv_length, \
+							   CSV_BUFFER_LEN - csv_length, \
+							   "%s", line2_buffer);
+	}
+
+	/* line 3 ~ 10  "\n" */
+	csv_length += snprintf(csv_buffer + csv_length, \
+						   CSV_BUFFER_LEN - csv_length, \
+						   "\n\n\n\n\n\n\n\n\n");
+
+	/* line 11 ~ data area */
+	for (i = 0; i < td->item_count; i++) {
+		info = &td->info[i];
+		if (!info->data) {
+			FTS_TEST_ERROR("test item data is null");
+			goto csv_save_err;
+		}
+
+		if (info->mc_sc) {
+			offset = 0;
+			for (j = 0; j < info->datalen;) {
+				for (k = 0; k < tdata->sc_node.node_num; k++) {
+					csv_length += snprintf(csv_buffer + csv_length, \
+										   CSV_BUFFER_LEN - csv_length, \
+										   "%d, ", info->data[offset + k]);
+					if ((k + 1) == tdata->sc_node.rx_num) {
+						csv_length += snprintf(csv_buffer + csv_length, \
+											   CSV_BUFFER_LEN - csv_length, \
+											   "\n");
+					}
+				}
+				csv_length += snprintf(csv_buffer + csv_length, \
+									   CSV_BUFFER_LEN - csv_length, \
+									   "\n");
+				offset += k;
+				j += k;
+			}
+		} else {
+			for (j = 0; j < info->datalen; j++) {
+				csv_length += snprintf(csv_buffer + csv_length, \
+									   CSV_BUFFER_LEN - csv_length, \
+									   "%d, ", info->data[j]);
+				if (((j + 1) % tdata->node.rx_num) == 0) {
+					csv_length += snprintf(csv_buffer + csv_length, \
+										   CSV_BUFFER_LEN - csv_length,
+										   "\n");
+				}
+			}
+		}
+	}
+	tdata->csv_data_len = csv_length;
+	/* fts_test_save_test_data(FTS_CSV_FILE_NAME, csv_buffer, csv_length); */
+
+csv_save_err:
+	if (line2_buffer) {
+		vfree(line2_buffer);
+		line2_buffer = NULL;
+	}
+#endif
+}
+
+/*****************************************************************************
+* Name: fts_test_save_data
+* Brief: Save test data.
+*        If multi-data of MC, length of data package must be tx*rx,(tx+1)*rx
+*        If multi-data of MC-SC, length of data package should be (tx+rx)*2
+*        Need fill 0 when no actual data
+* Input:
+* Output:
+* Return:
+*****************************************************************************/
+void fts_test_save_data(char *name, int code, int *data, int datacnt,
+						bool mc_sc, bool key, bool result)
+{
+	int datalen = datacnt;
+	struct fts_test *tdata = fts_ftest;
+	struct fts_test_data *td = &tdata->testdata;
+	struct item_info *info = &td->info[td->item_count];
+
+	if (!name || !data) {
+		FTS_TEST_ERROR("name/data is null");
+		return ;
+	}
+
+	strlcpy(info->name, name, TEST_ITEM_NAME_MAX - 1);
+	info->code = code;
+	info->mc_sc = mc_sc;
+	info->key_support = key;
+	info->result = result;
+	if (datalen <= 0) {
+		if (mc_sc) {
+			datalen = tdata->sc_node.node_num * 2;
+		} else {
+			if (key && (tdata->node.key_num > 0))
+				datalen = (tdata->node.tx_num + 1) * tdata->node.rx_num;
+			else
+				datalen = tdata->node.tx_num * tdata->node.rx_num;
+
+		}
+	}
+
+	FTS_TEST_DBG("name:%s,len:%d", name, datalen);
+	info->data = fts_malloc(datalen * sizeof(int));
+	if (!info->data) {
+		FTS_TEST_ERROR("malloc memory for item(%d) data fail", td->item_count);
+		info->datalen = 0;
+		return ;
+	}
+	memcpy(info->data, data, datalen * sizeof(int));
+	info->datalen = datalen;
+
+	td->item_count++;
+}
+
+static void fts_test_free_data(struct fts_test *tdata)
+{
+	int i = 0;
+	struct fts_test_data *td = &tdata->testdata;
+
+	for (i = 0; i < td->item_count; i++) {
+		if (td->info[i].data) {
+			fts_free(td->info[i].data);
+		}
+	}
+}
+
+static int fts_test_malloc_free_incell(struct fts_test *tdata, bool allocate)
+{
+	struct incell_threshold *thr = &tdata->ic.incell.thr;
+	int buflen = tdata->node.node_num * sizeof(int);
+
+	if (true == allocate) {
+		FTS_TEST_INFO("buflen:%d", buflen);
+		fts_malloc_r(thr->rawdata_min, buflen);
+		fts_malloc_r(thr->rawdata_max, buflen);
+		if (tdata->func->rawdata2_support) {
+			fts_malloc_r(thr->rawdata2_min, buflen);
+			fts_malloc_r(thr->rawdata2_max, buflen);
+		}
+		fts_malloc_r(thr->cb_min, buflen);
+		fts_malloc_r(thr->cb_max, buflen);
+	} else {
+		fts_free(thr->rawdata_min);
+		fts_free(thr->rawdata_max);
+		if (tdata->func->rawdata2_support) {
+			fts_free(thr->rawdata2_min);
+			fts_free(thr->rawdata2_max);
+		}
+		fts_free(thr->cb_min);
+		fts_free(thr->cb_max);
+	}
+
+	return 0;
+}
+
+static int fts_test_malloc_free_mc_sc(struct fts_test *tdata, bool allocate)
+{
+	struct mc_sc_threshold *thr = &tdata->ic.mc_sc.thr;
+	int buflen = tdata->node.node_num * sizeof(int);
+	int buflen_sc = tdata->sc_node.node_num * sizeof(int);
+
+	if (true == allocate) {
+		fts_malloc_r(thr->rawdata_h_min, buflen);
+		fts_malloc_r(thr->rawdata_h_max, buflen);
+		if (tdata->func->rawdata2_support) {
+			fts_malloc_r(thr->rawdata_l_min, buflen);
+			fts_malloc_r(thr->rawdata_l_max, buflen);
+		}
+		fts_malloc_r(thr->tx_linearity_max, buflen);
+		fts_malloc_r(thr->tx_linearity_min, buflen);
+		fts_malloc_r(thr->rx_linearity_max, buflen);
+		fts_malloc_r(thr->rx_linearity_min, buflen);
+
+		fts_malloc_r(thr->scap_cb_off_min, buflen_sc);
+		fts_malloc_r(thr->scap_cb_off_max, buflen_sc);
+		fts_malloc_r(thr->scap_cb_on_min, buflen_sc);
+		fts_malloc_r(thr->scap_cb_on_max, buflen_sc);
+		fts_malloc_r(thr->scap_cb_hi_min, buflen_sc);
+		fts_malloc_r(thr->scap_cb_hi_max, buflen_sc);
+		fts_malloc_r(thr->scap_cb_hov_min, buflen_sc);
+		fts_malloc_r(thr->scap_cb_hov_max, buflen_sc);
+
+		fts_malloc_r(thr->scap_rawdata_off_min, buflen_sc);
+		fts_malloc_r(thr->scap_rawdata_off_max, buflen_sc);
+		fts_malloc_r(thr->scap_rawdata_on_min, buflen_sc);
+		fts_malloc_r(thr->scap_rawdata_on_max, buflen_sc);
+		fts_malloc_r(thr->scap_rawdata_hi_min, buflen_sc);
+		fts_malloc_r(thr->scap_rawdata_hi_max, buflen_sc);
+		fts_malloc_r(thr->scap_rawdata_hov_min, buflen_sc);
+		fts_malloc_r(thr->scap_rawdata_hov_max, buflen_sc);
+
+		fts_malloc_r(thr->panel_differ_min, buflen);
+		fts_malloc_r(thr->panel_differ_max, buflen);
+	} else {
+		fts_free(thr->rawdata_h_min);
+		fts_free(thr->rawdata_h_max);
+		if (tdata->func->rawdata2_support) {
+			fts_free(thr->rawdata_l_min);
+			fts_free(thr->rawdata_l_max);
+		}
+		fts_free(thr->tx_linearity_max);
+		fts_free(thr->tx_linearity_min);
+		fts_free(thr->rx_linearity_max);
+		fts_free(thr->rx_linearity_min);
+
+		fts_free(thr->scap_cb_off_min);
+		fts_free(thr->scap_cb_off_max);
+		fts_free(thr->scap_cb_on_min);
+		fts_free(thr->scap_cb_on_max);
+		fts_free(thr->scap_cb_hi_min);
+		fts_free(thr->scap_cb_hi_max);
+		fts_free(thr->scap_cb_hov_min);
+		fts_free(thr->scap_cb_hov_max);
+
+		fts_free(thr->scap_rawdata_off_min);
+		fts_free(thr->scap_rawdata_off_max);
+		fts_free(thr->scap_rawdata_on_min);
+		fts_free(thr->scap_rawdata_on_max);
+		fts_free(thr->scap_rawdata_hi_min);
+		fts_free(thr->scap_rawdata_hi_max);
+		fts_free(thr->scap_rawdata_hov_min);
+		fts_free(thr->scap_rawdata_hov_max);
+
+		fts_free(thr->panel_differ_min);
+		fts_free(thr->panel_differ_max);
+	}
+
+	return 0;
+}
+
+static int fts_test_malloc_free_sc(struct fts_test *tdata, bool allocate)
+{
+	struct sc_threshold *thr = &tdata->ic.sc.thr;
+	int buflen = tdata->node.node_num * sizeof(int);
+
+	if (true == allocate) {
+		fts_malloc_r(thr->rawdata_min, buflen);
+		fts_malloc_r(thr->rawdata_max, buflen);
+		fts_malloc_r(thr->cb_min, buflen);
+		fts_malloc_r(thr->cb_max, buflen);
+		fts_malloc_r(thr->dcb_sort, buflen);
+		fts_malloc_r(thr->dcb_base, buflen);
+	} else {
+		fts_free(thr->rawdata_min);
+		fts_free(thr->rawdata_max);
+		fts_free(thr->cb_min);
+		fts_free(thr->cb_max);
+		fts_free(thr->dcb_sort);
+		fts_free(thr->dcb_base);
+	}
+
+	return 0;
+}
+
+static int fts_test_malloc_free_thr(struct fts_test *tdata, bool allocate)
+{
+	int ret = 0;
+
+	if ((NULL == tdata) || (NULL == tdata->func)) {
+		FTS_TEST_SAVE_ERR("tdata/func is NULL\n");
+		return -EINVAL;
+	}
+
+	if (true == allocate) {
+		fts_malloc_r(tdata->node_valid, tdata->node.node_num * sizeof(int));
+		fts_malloc_r(tdata->node_valid_sc, tdata->sc_node.node_num * sizeof(int));
+	} else {
+		fts_free(tdata->node_valid);
+		fts_free(tdata->node_valid_sc);
+	}
+
+	switch (tdata->func->hwtype) {
+	case IC_HW_INCELL:
+		ret = fts_test_malloc_free_incell(tdata, allocate);
+		break;
+	case IC_HW_MC_SC:
+		ret = fts_test_malloc_free_mc_sc(tdata, allocate);
+		break;
+	case IC_HW_SC:
+		ret = fts_test_malloc_free_sc(tdata, allocate);
+		break;
+	default:
+		FTS_TEST_SAVE_ERR("test ic type(%d) fail\n", tdata->func->hwtype);
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+/* default enable all test item */
+static void fts_test_init_item(struct fts_test *tdata)
+{
+	switch (tdata->func->hwtype) {
+	case IC_HW_INCELL:
+		tdata->ic.incell.u.tmp = 0xFFFFFFFF;
+		break;
+	case IC_HW_MC_SC:
+		tdata->ic.mc_sc.u.tmp = 0xFFFFFFFF;
+		break;
+	case IC_HW_SC:
+		tdata->ic.sc.u.tmp = 0xFFFFFFFF;
+		break;
+	}
+}
+
+static int get_tx_rx_num(u8 tx_rx_reg, u8 *ch_num, u8 ch_num_max)
+{
+	int ret = 0;
+	int i = 0;
+
+	for (i = 0; i < 3; i++) {
+		ret = fts_test_read_reg(tx_rx_reg, ch_num);
+		if ((ret < 0) || (*ch_num > ch_num_max)) {
+			sys_delay(50);
+		} else
+			break;
+	}
+
+	if (i >= 3) {
+		FTS_TEST_ERROR("get channel num fail");
+		return -EIO;
+	}
+
+	return 0;
+}
+static int get_key_num(int *key_num_en, int max_key_num)
+{
+	int ret = 0;
+	u8 key_en = 0;
+
+	if (!max_key_num) {
+		FTS_TEST_DBG("not support key, don't read key num register");
+		return 0;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_LEFT_KEY, &key_en);
+	if (ret >= 0) {
+		if (key_en & 0x01) {
+			(*key_num_en)++;
+		}
+
+		if (key_en & 0x02) {
+			(*key_num_en)++;
+		}
+
+		if (key_en & 0x04) {
+			(*key_num_en)++;
+		}
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_RIGHT_KEY, &key_en);
+	if (ret >= 0) {
+		if (key_en & 0x01) {
+			(*key_num_en)++;
+		}
+
+		if (key_en & 0x02) {
+			(*key_num_en)++;
+		}
+
+		if (key_en & 0x04) {
+			(*key_num_en)++;
+		}
+	}
+
+	if (*key_num_en > max_key_num) {
+		FTS_TEST_ERROR("get key num, fw:%d > max:%d", *key_num_en, max_key_num);
+		return -EIO;
+	}
+
+	return ret;
+}
+
+static int get_channel_num(struct fts_test *tdata)
+{
+	int ret = 0;
+	u8 tx_num = 0;
+	u8 rx_num = 0;
+	int key_num = 0;
+
+	/* node structure */
+	if (IC_HW_SC == tdata->func->hwtype) {
+		ret = get_tx_rx_num(FACTORY_REG_CH_NUM_SC, &tx_num, NUM_MAX_SC);
+		if (ret < 0) {
+			FTS_TEST_ERROR("get channel number fail");
+			return ret;
+		}
+
+		ret = get_tx_rx_num(FACTORY_REG_KEY_NUM_SC, &rx_num, KEY_NUM_MAX);
+		if (ret < 0) {
+			FTS_TEST_ERROR("get key number fail");
+			return ret;
+		}
+
+		tdata->node.tx_num = 1;
+		tdata->node.rx_num = tx_num;
+		tdata->node.channel_num = tx_num;
+		tdata->node.node_num = tx_num;
+		key_num = rx_num;
+	} else {
+		ret = get_tx_rx_num(FACTORY_REG_CHX_NUM, &tx_num, TX_NUM_MAX);
+		if (ret < 0) {
+			FTS_TEST_ERROR("get tx_num fail");
+			return ret;
+		}
+
+		ret = get_tx_rx_num(FACTORY_REG_CHY_NUM, &rx_num, RX_NUM_MAX);
+		if (ret < 0) {
+			FTS_TEST_ERROR("get rx_num fail");
+			return ret;
+		}
+
+		if (IC_HW_INCELL == tdata->func->hwtype) {
+			ret = get_key_num(&key_num, tdata->func->key_num_total);
+			if (ret < 0) {
+				FTS_TEST_ERROR("get key_num fail");
+				return ret;
+			}
+		} else if (IC_HW_MC_SC == tdata->func->hwtype) {
+			key_num = tdata->func->key_num_total;
+		}
+		tdata->node.tx_num = tx_num;
+		tdata->node.rx_num = rx_num;
+		if (IC_HW_INCELL == tdata->func->hwtype)
+			tdata->node.channel_num = tx_num * rx_num;
+		else if (IC_HW_MC_SC == tdata->func->hwtype)
+			tdata->node.channel_num = tx_num + rx_num;
+		tdata->node.node_num = tx_num * rx_num;
+	}
+
+	/* key */
+	tdata->node.key_num = key_num;
+	tdata->node.node_num += tdata->node.key_num;
+
+	/* sc node structure */
+	tdata->sc_node = tdata->node;
+	if (IC_HW_MC_SC == tdata->func->hwtype) {
+		if (tdata->v3_pattern) {
+			ret = get_tx_rx_num(FACTORY_REG_CHX_NUM_NOMAP, &tx_num, TX_NUM_MAX);
+			if (ret < 0) {
+				FTS_TEST_ERROR("get no-mappint tx_num fail");
+				return ret;
+			}
+
+			ret = get_tx_rx_num(FACTORY_REG_CHY_NUM_NOMAP, &rx_num, TX_NUM_MAX);
+			if (ret < 0) {
+				FTS_TEST_ERROR("get no-mapping rx_num fail");
+				return ret;
+			}
+
+			tdata->sc_node.tx_num = tx_num;
+			tdata->sc_node.rx_num = rx_num;
+		}
+		tdata->sc_node.channel_num = tx_num + rx_num;
+		tdata->sc_node.node_num = tx_num + rx_num;
+	}
+
+	if (tdata->node.tx_num > TX_NUM_MAX) {
+		FTS_TEST_ERROR("tx num(%d) fail", tdata->node.tx_num);
+		return -EIO;
+	}
+
+	if (tdata->node.rx_num > RX_NUM_MAX) {
+		FTS_TEST_ERROR("rx num(%d) fail", tdata->node.rx_num);
+		return -EIO;
+	}
+
+	FTS_TEST_INFO("node_num:%d, tx:%d, rx:%d, key:%d",
+				  tdata->node.node_num, tdata->node.tx_num,
+				  tdata->node.rx_num, tdata->node.key_num);
+	return 0;
+}
+
+static int fts_test_init_basicinfo(struct fts_test *tdata)
+{
+	int ret = 0;
+	u8 val = 0;
+
+	if ((NULL == tdata) || (NULL == tdata->func)) {
+		FTS_TEST_SAVE_ERR("tdata/func is NULL\n");
+		return -EINVAL;
+	}
+
+	fts_test_read_reg(REG_FW_VERSION, &val);
+	tdata->fw_ver = val;
+
+	if (IC_HW_INCELL == tdata->func->hwtype) {
+		fts_test_read_reg(REG_VA_TOUCH_THR, &val);
+		tdata->va_touch_thr = val;
+		fts_test_read_reg(REG_VKEY_TOUCH_THR, &val);
+		tdata->vk_touch_thr = val;
+	}
+
+	/* enter factory mode */
+	ret = enter_factory_mode();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("enter factory mode fail\n");
+		return ret;
+	}
+
+	if (IC_HW_MC_SC == tdata->func->hwtype) {
+		fts_test_read_reg(FACTORY_REG_PATTERN, &val);
+		tdata->v3_pattern = (1 == val) ? true : false;
+		fts_test_read_reg(FACTORY_REG_NOMAPPING, &val);
+		tdata->mapping = val;
+	}
+
+	/* enter into factory mode and read tx/rx num */
+	ret = get_channel_num(tdata);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get channel number fail\n");
+		return ret;
+	}
+
+	return ret;
+}
+
+static int fts_test_main_init(void)
+{
+	int ret = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	FTS_TEST_FUNC_ENTER();
+	fts_ftest->result = false;
+	/* Init fts_test_data to 0 before test,  */
+	memset(&tdata->testdata, 0, sizeof(struct fts_test_data));
+
+	/* get basic information: tx/rx num ... */
+	ret = fts_test_init_basicinfo(tdata);
+	if (ret < 0) {
+		FTS_TEST_ERROR("test init basicinfo fail");
+		return ret;
+	}
+
+	/* allocate memory for test threshold */
+	ret = fts_test_malloc_free_thr(tdata, true);
+	if (ret < 0) {
+		FTS_TEST_ERROR("test malloc for threshold fail");
+		return ret;
+	}
+
+	/* default enable all test item */
+	fts_test_init_item(tdata);
+
+	ret = fts_test_malloc_free_data_txt(tdata, true);
+	if (ret < 0) {
+		FTS_TEST_ERROR("allocate memory for test data(txt) fail");
+		return ret;
+	}
+
+	/* allocate test data buffer */
+	tdata->buffer_length = (tdata->node.tx_num + 1) * tdata->node.rx_num;
+	tdata->buffer_length *= sizeof(int) * 2;
+	FTS_TEST_INFO("test buffer length:%d", tdata->buffer_length);
+	tdata->buffer = (int *)fts_malloc(tdata->buffer_length);
+	if (NULL == tdata->buffer) {
+		FTS_TEST_ERROR("test buffer(%d) malloc fail", tdata->buffer_length);
+		return -ENOMEM;
+	}
+	memset(tdata->buffer, 0, tdata->buffer_length);
+
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static int fts_test_main_exit(void)
+{
+	struct fts_test *tdata = fts_ftest;
+
+	FTS_TEST_FUNC_ENTER();
+	fts_test_merge_data(tdata);
+
+	FTS_TEST_INFO("data len: %d, result len: %d",
+			tdata->csv_data_len, tdata->testresult_len);
+
+	FTS_TEST_FUNC_EXIT();
+	return 0;
+}
+
+static void fts_free_test_memory(void)
+{
+	struct fts_test *tdata = fts_ftest;
+	FTS_TEST_FUNC_ENTER();
+	/* free memory */
+	fts_test_malloc_free_data_txt(tdata, false);
+	fts_test_malloc_free_thr(tdata, false);
+
+	/* free test data */
+	fts_test_free_data(tdata);
+
+	/* free test data buffer */
+	fts_free(tdata->buffer);
+
+	vfree(tdata->csv_data_buffer);
+	tdata->csv_data_buffer = NULL;
+
+	FTS_TEST_FUNC_EXIT();
+}
+
+/*
+ * fts_test_get_testparams - get test parameter from ini
+ */
+static int fts_test_get_testparams(char *config_name)
+{
+	int ret = 0;
+
+	ret = fts_test_get_testparam_from_ini(config_name);
+
+	return ret;
+}
+
+static int fts_test_start(void)
+{
+	int testresult = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	if (tdata && tdata->func && tdata->func->start_test) {
+		tdata->testdata.item_count = 0;
+		testresult = tdata->func->start_test();
+	} else {
+		FTS_TEST_ERROR("test func/start_test func is null");
+	}
+
+	return testresult;
+}
+
+/*
+ * fts_test_entry - test main entry
+ *
+ * warning - need disable irq & esdcheck before call this function
+ *
+ */
+static int fts_test_entry(char *ini_file_name)
+{
+	int ret = 0;
+
+	/* test initialize */
+	ret = fts_test_main_init();
+	if (ret < 0) {
+		FTS_TEST_ERROR("fts_test_main_init fail");
+		goto test_err;
+	}
+
+	/*Read parse configuration file*/
+	FTS_TEST_SAVE_INFO("ini_file_name:%s\n", ini_file_name);
+	ret = fts_test_get_testparams(ini_file_name);
+	if (ret < 0) {
+		FTS_TEST_ERROR("get testparam fail");
+		goto test_err;
+	}
+
+	/* Start testing according to the test configuration */
+	if (true == fts_test_start()) {
+		FTS_TEST_SAVE_INFO("\n\n=======Tp test pass.\n");
+		fts_ftest->result = true;
+	} else {
+		FTS_TEST_SAVE_INFO("\n\n=======Tp test failure.\n");
+		fts_ftest->result = false;
+#if defined(TEST_SAVE_FAIL_RESULT) && TEST_SAVE_FAIL_RESULT
+		do_gettimeofday(&(fts_ftest->tv));
+#endif
+	}
+
+	ret = 0;
+test_err:
+	fts_test_main_exit();
+	enter_work_mode();
+	return ret;
+}
+
+static ssize_t fts_test_show(
+	struct device *dev, struct device_attribute *attr, char *buf)
+{
+	if (!fts_ftest)
+		return -EINVAL;
+	if (fts_ftest->result)
+		return snprintf(buf, 5, "PASS");
+	else
+		return snprintf(buf, 5, "FAIL");
+	return -EPERM;
+}
+
+static ssize_t fts_test_store(
+	struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	int ret = 0;
+	char fwname[FILE_NAME_LENGTH] = { 0 };
+	struct fts_ts_data *ts_data = fts_data;
+	struct input_dev *input_dev;
+
+	if (ts_data->suspended) {
+		FTS_INFO("In suspend, no test, return now");
+		return -EINVAL;
+	}
+
+	input_dev = ts_data->input_dev;
+	memset(fwname, 0, sizeof(fwname));
+	snprintf(fwname, FILE_NAME_LENGTH, "%s", buf);
+	fwname[count - 1] = '\0';
+	FTS_TEST_DBG("fwname:%s.", fwname);
+
+	mutex_lock(&input_dev->mutex);
+	fts_irq_disable();
+
+#if defined(FTS_ESDCHECK_EN) && (FTS_ESDCHECK_EN)
+	fts_esdcheck_switch(DISABLE);
+#endif
+
+	ret = fts_enter_test_environment(1);
+	if (ret < 0) {
+		FTS_ERROR("enter test environment fail");
+	} else {
+		fts_test_entry(fwname);
+	}
+	ret = fts_enter_test_environment(0);
+	if (ret < 0) {
+		FTS_ERROR("enter normal environment fail");
+	}
+
+#if defined(FTS_ESDCHECK_EN) && (FTS_ESDCHECK_EN)
+	fts_esdcheck_switch(ENABLE);
+#endif
+
+	fts_irq_enable();
+	mutex_unlock(&input_dev->mutex);
+
+	return count;
+}
+
+/*  test from test.ini
+*    example:echo "***.ini" > fts_test
+*/
+static DEVICE_ATTR(fts_test, S_IRUGO | S_IWUSR, fts_test_show, fts_test_store);
+
+static struct attribute *fts_test_attributes[] = {
+	&dev_attr_fts_test.attr,
+	NULL
+};
+
+static struct attribute_group fts_test_attribute_group = {
+	.attrs = fts_test_attributes
+};
+
+static void *data_start(struct seq_file *m, loff_t *pos)
+{
+	if (*pos)
+		return NULL;
+
+	if (!fts_ftest->csv_data_buffer) {
+		FTS_TEST_ERROR("test data is error!");
+		return NULL;
+	}
+	return fts_ftest->csv_data_buffer;
+}
+
+static void *data_next(struct seq_file *m, void *v, loff_t *pos)
+{
+	return NULL;
+}
+
+static int32_t data_show(struct seq_file *m, void *v)
+{
+	seq_puts(m, (char *)v);
+	return 0;
+}
+
+static void data_stop(struct seq_file *m, void *v)
+{
+	return;
+}
+
+static const struct seq_operations data_fops = {
+	.start = data_start,
+	.next = data_next,
+	.stop = data_stop,
+	.show = data_show,
+};
+
+static int32_t tp_test_data_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &data_fops);
+}
+
+static const struct file_operations tp_test_data_fops = {
+	.owner = THIS_MODULE,
+	.open = tp_test_data_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = seq_release,
+};
+
+static void *result_start(struct seq_file *m, loff_t *pos)
+{
+	if (*pos) {
+		fts_free_test_memory();
+		return NULL;
+	}
+
+	if (!fts_ftest->testresult) {
+		FTS_TEST_ERROR("test result is error!");
+		return NULL;
+	}
+	return fts_ftest->testresult;
+}
+
+static void *result_next(struct seq_file *m, void *v, loff_t *pos)
+{
+	return NULL;
+}
+
+static int32_t result_show(struct seq_file *m, void *v)
+{
+	seq_puts(m, (char *)v);
+	return 0;
+}
+
+static void result_stop(struct seq_file *m, void *v)
+{
+	return;
+}
+
+static const struct seq_operations result_fops = {
+	.start = result_start,
+	.next = result_next,
+	.stop = result_stop,
+	.show = result_show,
+};
+
+static int32_t tp_test_result_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &result_fops);
+}
+
+static const struct file_operations tp_test_result_fops = {
+	.owner = THIS_MODULE,
+	.open = tp_test_result_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = seq_release,
+};
+
+int tp_selftest_result;
+
+static int fts_spi_test(void)
+{
+	int ret = SELFTEST_INVALID;
+	u8 chip_id[2] = { 0 };
+	int cnt = 0;
+	do {
+		ret = fts_read_reg(FTS_REG_CHIP_ID, &chip_id[0]);
+		ret = fts_read_reg(FTS_REG_CHIP_ID2, &chip_id[1]);
+		if ((ret < 0) || (0x0 == chip_id[0]) || (0x0 == chip_id[1])) {
+			cnt++;
+			ret = SELFTEST_FAIL;
+			msleep(100);
+		} else {
+			ret = SELFTEST_PASS;
+			FTS_TEST_INFO("spi test successm, Device id: 0x%02x%02x",
+							chip_id[0], chip_id[1]);
+			break;
+		}
+	} while (cnt < 10);
+
+	return ret;
+}
+
+static int tp_selftest_open(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static ssize_t tp_selftest_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
+{
+	char tmp[5];
+	int cnt;
+
+	if (*pos != 0)
+		return 0;
+
+	cnt = snprintf(tmp, sizeof(tp_selftest_result), "%d\n", tp_selftest_result);
+	if (copy_to_user(buf, tmp, strlen(tmp)))
+		return -EFAULT;
+	*pos += cnt;
+	return cnt;
+}
+
+ssize_t tp_selftest_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
+{
+	char tmp[6];
+	int ret;
+	struct fts_test *tdata = fts_ftest;
+	struct fts_ts_data *ts_data = fts_data;
+	struct input_dev *input_dev;
+
+	tp_selftest_result = SELFTEST_INVALID;
+	if (ts_data->suspended) {
+		FTS_INFO("In suspend, no test, return now");
+		return -EINVAL;
+	}
+
+	input_dev = ts_data->input_dev;
+
+	if (!tdata || !tdata->func || count > sizeof(tmp)) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (copy_from_user(tmp, buf, count)) {
+		ret = -EFAULT;
+		goto out;
+	}
+
+	mutex_lock(&input_dev->mutex);
+	fts_irq_disable();
+	/* test initialize */
+	ret = fts_test_main_init();
+	if (ret < 0) {
+		FTS_TEST_ERROR("fts_test_main_init error.");
+		goto test_err;
+	}
+
+	if (!strncmp(tmp, "short", 5) && tdata->func->short_test)
+		tp_selftest_result = tdata->func->short_test();
+	else if (!strncmp(tmp, "open", 4) && tdata->func->open_test)
+		tp_selftest_result = tdata->func->open_test();
+	else if (!strncmp(tmp, "i2c", 3))
+		tp_selftest_result = fts_spi_test();
+
+	ret = tp_selftest_result;
+
+	fts_test_main_exit();
+	fts_free_test_memory();
+	enter_work_mode();
+test_err:
+	fts_irq_enable();
+	mutex_unlock(&input_dev->mutex);
+out:
+	if (ret >= 0)
+		ret = count;
+	return ret;
+}
+
+int tp_selftest_release(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static const struct file_operations tp_selftest_fops = {
+	.open = tp_selftest_open,
+	.read = tp_selftest_read,
+	.write = tp_selftest_write,
+	.release = tp_selftest_release,
+};
+
+static int32_t datadump_show(struct seq_file *m, void *v)
+{
+	int ret = 0, i = 0, j = 0;
+	int *rawdata = NULL;
+	int *differ_data = NULL;
+	struct fts_test *tdata = fts_ftest;
+	struct fts_ts_data *ts_data = fts_data;
+	struct input_dev *input_dev;
+	input_dev = ts_data->input_dev;
+
+	FTS_TEST_FUNC_ENTER();
+	if (ts_data->suspended) {
+		FTS_INFO("In suspend, no test, return now");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	rawdata = (int *)vmalloc(PAGE_SIZE * 2);
+	if (!rawdata) {
+		ret = -ENOMEM;
+		goto out;
+	}
+	memset(rawdata, 0, PAGE_SIZE * 2);
+
+	differ_data = (int *)vmalloc(PAGE_SIZE * 2);
+	if (!differ_data) {
+		ret = -ENOMEM;
+		goto out;
+	}
+	memset(differ_data, 0, PAGE_SIZE * 2);
+
+	mutex_lock(&input_dev->mutex);
+	fts_irq_disable();
+
+	/* before enter factory mode, disable auto calibration*/
+	ret = fts_test_write_reg(0xEE, 0x01);
+	if (ret) {
+		FTS_TEST_ERROR("write data auto cal fail\n");
+		ret = -EFAULT;
+		goto out;
+	}
+
+	ret = fts_test_init_basicinfo(tdata);
+	if (ret < 0) {
+		FTS_TEST_ERROR("test init basicinfo fail");
+		ret = -EFAULT;
+		goto out;
+	}
+
+	/*********************GET RAWDATA*********************/
+	if (tdata->func->data_dump) {
+		ret = tdata->func->data_dump(rawdata, differ_data);
+		if (ret) {
+			FTS_TEST_ERROR("get rawdata error");
+			ret = -EFAULT;
+			goto out;
+		}
+	}
+	FTS_TEST_INFO("tx num:%d,rx num:%d\n", tdata->node.tx_num, tdata->node.rx_num);
+
+	seq_printf(m, "\nRAW DATA\n");
+	for (i = 0; (i < tdata->node.tx_num) && (i < TX_NUM_MAX); i++) {
+		for (j = 0; (j < tdata->node.rx_num) && (j < RX_NUM_MAX); j++) {
+			seq_printf(m, "%6d", rawdata[tdata->node.rx_num * i + j]);
+			if (j == (tdata->node.rx_num - 1))
+				seq_printf(m, "\n");
+		}
+	}
+	seq_printf(m, "\nDIFF DATA\n");
+	for (i = 0; (i < tdata->node.tx_num) && (i < TX_NUM_MAX); i++) {
+		for (j = 0; (j < tdata->node.rx_num) && (j < RX_NUM_MAX); j++) {
+			seq_printf(m, "%6d", differ_data[tdata->node.rx_num * i + j]);
+			if (j == (tdata->node.rx_num - 1))
+				seq_printf(m, "\n");
+		}
+	}
+
+	seq_printf(m, "\n\n");
+	ret = 0;
+
+out:
+	enter_work_mode();
+	fts_irq_enable();
+	mutex_unlock(&input_dev->mutex);
+	if (rawdata) {
+		vfree(rawdata);
+		rawdata = NULL;
+	}
+	if (differ_data) {
+		vfree(differ_data);
+		differ_data = NULL;
+	}
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static void *datadump_start(struct seq_file *m, loff_t *pos)
+{
+	return *pos < 1 ? (void *)1 : NULL;
+}
+
+static void *datadump_next(struct seq_file *m, void *v, loff_t *pos)
+{
+	++*pos;
+	return NULL;
+}
+
+static void datadump_stop(struct seq_file *m, void *v)
+{
+	return;
+}
+
+const struct seq_operations tp_datadump_seq_ops = {
+	.start = datadump_start,
+	.next = datadump_next,
+	.stop = datadump_stop,
+	.show = datadump_show,
+};
+
+static int32_t tp_datadump_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &tp_datadump_seq_ops);
+}
+
+static const struct file_operations tp_datadump_fops = {
+	.owner = THIS_MODULE,
+	.open = tp_datadump_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = seq_release,
+};
+
+static int fts_test_func_init(struct fts_ts_data *ts_data)
+{
+	int i = 0;
+	int j = 0;
+	int ic_stype = ts_data->ic_info.ids.type;
+	struct test_funcs *func = test_func_list[0];
+	int func_count = sizeof(test_func_list) / sizeof(test_func_list[0]);
+
+	FTS_TEST_INFO("init test function");
+	if (0 == func_count) {
+		FTS_TEST_SAVE_ERR("test functions list is NULL, fail\n");
+		return -ENODATA;
+	}
+
+	fts_ftest = (struct fts_test *)kzalloc(sizeof(*fts_ftest), GFP_KERNEL);
+	if (NULL == fts_ftest) {
+		FTS_TEST_ERROR("malloc memory for test fail");
+		return -ENOMEM;
+	}
+
+	for (i = 0; i < func_count; i++) {
+		func = test_func_list[i];
+		for (j = 0; j < FTX_MAX_COMPATIBLE_TYPE; j++) {
+			if (0 == func->ctype[j])
+				break;
+			else if (func->ctype[j] == ic_stype) {
+				FTS_TEST_INFO("match test function,type:%x", (int)func->ctype[j]);
+				fts_ftest->func = func;
+			}
+		}
+	}
+	if (NULL == fts_ftest->func) {
+		FTS_TEST_ERROR("no test function match, can't test");
+		return -ENODATA;
+	}
+	fts_ftest->open_min = ts_data->pdata->open_min;
+	fts_ftest->ts_data = fts_data;
+	return 0;
+}
+
+int fts_test_init(struct fts_ts_data *ts_data)
+{
+	int ret = 0;
+	struct ftxxxx_proc *proc = &ts_data->proc;
+
+	FTS_TEST_FUNC_ENTER();
+	/* get test function, must be the first step */
+	ret = fts_test_func_init(ts_data);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("test functions init fail");
+		return ret;
+	}
+
+	ret = sysfs_create_group(&ts_data->dev->kobj, &fts_test_attribute_group);
+	if (0 != ret) {
+		FTS_TEST_ERROR("sysfs(test) create fail");
+		sysfs_remove_group(&ts_data->dev->kobj, &fts_test_attribute_group);
+	} else {
+		FTS_TEST_DBG("sysfs(test) create successfully");
+	}
+
+	proc->tp_test_data_proc = proc_create("tp_test_data", 0444, NULL, &tp_test_data_fops);
+	if (!proc->tp_test_data_proc)
+		FTS_TEST_ERROR("tp_test_data proc create failed.");
+
+	proc->tp_test_result_proc = proc_create("tp_test_result", 0444, NULL, &tp_test_result_fops);
+	if (!proc->tp_test_result_proc)
+		FTS_TEST_ERROR("tp_test_result proc create failed.");
+
+	proc->tp_selftest_proc = proc_create("tp_selftest", 0644, NULL, &tp_selftest_fops);
+	if (proc->tp_selftest_proc == NULL)
+		FTS_TEST_ERROR("tp_selftest proc create failed.");
+
+	proc->tp_data_dump_proc = proc_create("tp_data_dump", 0444, NULL, &tp_datadump_fops);
+	if (proc->tp_data_dump_proc == NULL)
+		FTS_TEST_ERROR("tp_data_dump proc create failed.");
+
+	FTS_TEST_FUNC_EXIT();
+
+	return ret;
+}
+
+int fts_test_exit(struct fts_ts_data *ts_data)
+{
+	struct ftxxxx_proc *proc = &ts_data->proc;
+
+	FTS_TEST_FUNC_ENTER();
+
+	sysfs_remove_group(&ts_data->dev->kobj, &fts_test_attribute_group);
+	if (proc->tp_test_data_proc)
+		proc_remove(proc->tp_test_data_proc);
+	if (proc->tp_test_result_proc)
+		proc_remove(proc->tp_test_result_proc);
+	if (proc->tp_selftest_proc)
+		proc_remove(proc->tp_selftest_proc);
+	if (proc->tp_data_dump_proc)
+		proc_remove(proc->tp_data_dump_proc);
+	proc->tp_test_data_proc = NULL;
+	proc->tp_test_result_proc = NULL;
+	proc->tp_selftest_proc = NULL;
+	proc->tp_data_dump_proc = NULL;
+	fts_free(fts_ftest);
+	FTS_TEST_FUNC_EXIT();
+	return 0;
+}
+#endif
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test.h b/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test.h
new file mode 100755
index 00000000000000..d733f1a4f29ac3
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test.h
@@ -0,0 +1,659 @@
+/************************************************************************
+* Copyright (c) 2012-2020, FocalTech Systems, Ltd., all rights reserved.
+* Copyright (C) 2021-2022 XiaoMi, Inc.
+*
+* File Name: focaltech_test.h
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-01
+*
+* Abstract: test entry for all IC
+*
+************************************************************************/
+#ifndef _TEST_LIB_H
+#define _TEST_LIB_H
+
+/*****************************************************************************
+* Included header files
+*****************************************************************************/
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/debugfs.h>
+#include <asm/uaccess.h>
+#include <linux/i2c.h>//iic
+#include <linux/delay.h>//msleep
+#include <linux/string.h>
+#include <asm/unistd.h>
+#include <linux/vmalloc.h>
+#include <linux/time.h>
+#include "../focaltech_config.h"
+#include "../focaltech_core.h"
+#include "focaltech_test_ini.h"
+
+/*****************************************************************************
+* Macro definitions using #define
+*****************************************************************************/
+#define FTS_INI_FILE_PATH                       "/mnt/sdcard/"
+#define FTS_CSV_FILE_NAME                       "testdata.csv"
+#define FTS_TXT_FILE_NAME                       "testresult.txt"
+#define false 0
+#define true  1
+#define TEST_ICSERIES_LEN                       (8)
+#define TEST_ICSERIES(x)                        ((x) >> TEST_ICSERIES_LEN)
+
+#define TEST_OPEN_MAX_VALUE                     (255)
+#define BYTES_PER_TIME                          (32)  /* max:128 */
+/* CSV & TXT */
+#define CSV_LINE2_BUFFER_LEN                    (1024)
+#define CSV_BUFFER_LEN                          (1024*80*5)
+#define TXT_BUFFER_LEN                          (1024*80*5)
+
+#define TEST_SAVE_FAIL_RESULT                   0
+
+/*-----------------------------------------------------------
+Test Status
+-----------------------------------------------------------*/
+#define RESULT_NULL                             0
+#define RESULT_PASS                             1
+#define RESULT_NG                               2
+
+/* Tp selftest status: open short spi */
+#define SELFTEST_INVALID                        0
+#define SELFTEST_FAIL                           1
+#define SELFTEST_PASS                           2
+
+#define TX_NUM_MAX                              60
+#define RX_NUM_MAX                              100
+#define SC_NUM_MAX                  ((TX_NUM_MAX) + (RX_NUM_MAX))
+#define NUM_MAX_SC                              (144)
+#define KEY_NUM_MAX                             6
+#define TEST_ITEM_COUNT_MAX                     32
+#define TEST_ITEM_NAME_MAX                      32
+#define TEST_SHORT_RES_MAX                      0xFFFF
+
+/*
+ * factory test registers
+ */
+#define ENTER_WORK_FACTORY_RETRIES              5
+
+#define START_SCAN_RETRIES_INCELL               20
+#define START_SCAN_RETRIES_DELAY_INCELL         16
+#define FACTORY_TEST_RETRY                      50
+#define FACTORY_TEST_DELAY                      18
+#define FACTORY_TEST_RETRY_DELAY                100
+
+#define DEVIDE_MODE_ADDR                        0x00
+#define REG_FW_VERSION                          0xA6
+#define REG_VA_TOUCH_THR                        0x80
+#define REG_VKEY_TOUCH_THR                      0x82
+
+#define FACTORY_REG_LINE_ADDR                   0x01
+#define FACTORY_REG_CHX_NUM                     0x02
+#define FACTORY_REG_CHY_NUM                     0x03
+#define FACTORY_REG_CLB                         0x04
+#define FACTORY_REG_DATA_SELECT                 0x06
+#define FACTORY_REG_RAWBUF_SELECT               0x09
+#define FACTORY_REG_KEY_CBWIDTH                 0x0B
+#define FACTORY_REG_PARAM_UPDATE_STATE          0x0E
+#define FACTORY_REG_SHORT_TEST_EN               0x0F
+#define FACTORY_REG_SHORT_TEST_STATE            0x10
+#define FACTORY_REG_LCD_NOISE_START             0x11
+#define FACTORY_REG_LCD_NOISE_FRAME             0x12
+#define FACTORY_REG_LCD_NOISE_TEST_STATE        0x13
+#define FACTORY_REG_LCD_NOISE_TTHR              0x14
+#define FACTORY_REG_OPEN_START                  0x15
+#define FACTORY_REG_OPEN_STATE                  0x16
+#define FACTORY_REG_OPEN_IDLE                   0x03
+#define FACTORY_REG_OPEN_BUSY                   0x01
+#define FACTORY_REG_CB_ADDR_H                   0x18
+#define FACTORY_REG_CB_ADDR_L                   0x19
+#define FACTORY_REG_ORDER_ADDR_H                0x1A
+#define FACTORY_REG_ORDER_ADDR_L                0x1B
+#define FACTORY_REG_LCD_NOISE_STATE             0x1E
+#define FACTORY_REG_KEYSHORT_EN                 0x2E
+#define FACTORY_REG_KEYSHORT_STATE              0x2F
+
+#define FACTORY_REG_LEFT_KEY                    0x1E
+#define FACTORY_REG_RIGHT_KEY                   0x1F
+#define FACTORY_REG_OPEN_REG20                  0x20
+#define FACTORY_REG_OPEN_REG21                  0x21
+#define FACTORY_REG_OPEN_REG22                  0x22
+#define FACTORY_REG_OPEN_REG23                  0x23
+#define FACTORY_REG_OPEN_REG2E                  0x2E
+#define FACTORY_REG_OPEN_REG86                  0x86
+#define FACTORY_REG_K1                          0x31
+#define FACTORY_REG_K2                          0x32
+#define FACTORY_REG_RAWDATA_ADDR                0x6A
+#define FACTORY_REG_ORDER_ADDR                  0x6C
+#define FACTORY_REG_CB_ADDR                     0x6E
+#define FACTORY_REG_SHORT_ADDR                  0x89
+#define FACTORY_REG_RAWDATA_TEST_EN             0x9E
+#define FACTORY_REG_CB_TEST_EN                  0x9F
+#define FACTORY_REG_OPEN_TEST_EN                0xA0
+#define FACTORY_REG_RAWDATA_TARGET              0xCA
+
+/* mc_sc */
+#define FACTORY_REG_FRE_LIST                    0x0A
+#define FACTORY_REG_DATA_TYPE                   0x5B
+#define FACTORY_REG_NORMALIZE                   0x16
+#define FACTORY_REG_RAWDATA_ADDR_MC_SC          0x36
+#define FACTORY_REG_PATTERN                     0x53
+#define FACTORY_REG_NOMAPPING                   0x54
+#define FACTORY_REG_CHX_NUM_NOMAP               0x55
+#define FACTORY_REG_CHY_NUM_NOMAP               0x56
+#define FACTORY_REG_WC_SEL                      0x09
+#define FACTORY_REG_HC_SEL                      0x0F
+#define FACTORY_REG_MC_SC_MODE                  0x44
+#define FACTORY_REG_MC_SC_CB_ADDR_OFF           0x45
+#define FACTORY_REG_MC_SC_CB_H_ADDR_OFF         0x49
+#define FACTORY_REG_MC_SC_CB_ADDR               0x4E
+#define FACTROY_REG_SHORT_TEST_EN               0x07
+#define FACTROY_REG_SHORT_CA                    0x01
+#define FACTROY_REG_SHORT_CC                    0x02
+#define FACTROY_REG_SHORT_CG                    0x03
+#define FACTROY_REG_SHORT_OFFSET                0x04
+#define FACTROY_REG_SHORT_AB_CH                 0x58
+#define FACTROY_REG_SHORT_RES_LEVEL             0x5A
+#define FACTORY_REG_SHORT_ADDR_MC               0xF4
+#define FACTORY_REG_FIR                         0xFB
+
+#define FACTROY_REG_SHORT2_TEST_EN              0xC0
+#define FACTROY_REG_SHORT2_CA                   0x01
+#define FACTROY_REG_SHORT2_CC                   0x02
+#define FACTROY_REG_SHORT2_CG                   0x03
+#define FACTROY_REG_SHORT2_OFFSET               0x04
+#define FACTROY_REG_SHORT2_RES_LEVEL            0xC1
+#define FACTROY_REG_SHORT2_DEALY                0xC2
+#define FACTROY_REG_SHORT2_TEST_STATE           0xC3
+#define FACTORY_REG_SHORT2_ADDR_MC              0xC4
+#define FACTROY_REG_SHORT2_AB_CH                0xC6
+
+/* sc */
+#define FACTORY_REG_SCAN_ADDR2                  0x08
+#define FACTORY_REG_CH_NUM_SC                   0x0A
+#define FACTORY_REG_KEY_NUM_SC                  0x0B
+#define FACTORY_REG_SC_CB_ADDR_OFF              0x33
+#define FACTORY_REG_SC_CB_ADDR                  0x39
+#define FACTORY_REG_RAWDATA_SADDR_SC            0x34
+#define FACTORY_REG_RAWDATA_ADDR_SC             0x35
+#define FACTORY_REG_CB_SEL                      0x41
+#define FACTORY_REG_FMODE                       0xAE
+
+#define TEST_RETVAL_00                          0x00
+#define TEST_RETVAL_AA                          0xAA
+
+#define FTS_MAX_SORT_SC                         32768
+#define FTS_MIN_SORT_SC                         0
+
+/*****************************************************************************
+* enumerations, structures and unions
+*****************************************************************************/
+struct item_info {
+	char name[TEST_ITEM_NAME_MAX];
+	int code;
+	int *data;
+	int datalen;
+	int result;
+	int mc_sc;
+	int key_support;
+};
+
+struct fts_test_data {
+	int item_count;
+	struct item_info info[TEST_ITEM_COUNT_MAX];
+};
+
+/* incell */
+struct incell_testitem {
+	u32 short_test                  : 1;
+	u32 open_test                   : 1;
+	u32 cb_test                     : 1;
+	u32 rawdata_test                : 1;
+	u32 lcdnoise_test               : 1;
+	u32 keyshort_test               : 1;
+	u32 mux_open_test               : 1;
+};
+
+struct incell_threshold_b {
+	int short_res_min;
+	int short_res_vk_min;
+	int open_cb_min;
+	int open_k1_check;
+	int open_k1_value;
+	int open_k2_check;
+	int open_k2_value;
+	int cb_min;
+	int cb_max;
+	int cb_vkey_check;
+	int cb_min_vk;
+	int cb_max_vk;
+	int rawdata_min;
+	int rawdata_max;
+	int rawdata_vkey_check;
+	int rawdata_min_vk;
+	int rawdata_max_vk;
+	int lcdnoise_frame;
+	int lcdnoise_coefficient;
+	int lcdnoise_coefficient_vkey;
+	int open_nmos;
+	int keyshort_k1;
+	int keyshort_cb_max;
+	int rawdata2_min;
+	int rawdata2_max;
+	int mux_open_cb_min;
+};
+
+struct incell_threshold {
+	struct incell_threshold_b basic;
+	int *rawdata_min;
+	int *rawdata_max;
+	int *rawdata2_min;
+	int *rawdata2_max;
+	int *cb_min;
+	int *cb_max;
+};
+
+struct incell_test {
+	struct incell_threshold thr;
+	union {
+		int tmp;
+		struct incell_testitem item;
+	} u;
+};
+
+/* mc_sc */
+enum mapping_type {
+	MAPPING = 0,
+	NO_MAPPING = 1,
+};
+
+struct mc_sc_testitem {
+	u32 rawdata_test                : 1;
+	u32 rawdata_uniformity_test     : 1;
+	u32 scap_cb_test                : 1;
+	u32 scap_rawdata_test           : 1;
+	u32 short_test                  : 1;
+	u32 panel_differ_test           : 1;
+};
+
+struct mc_sc_threshold_b {
+	int rawdata_h_min;
+	int rawdata_h_max;
+	int rawdata_set_hfreq;
+	int rawdata_l_min;
+	int rawdata_l_max;
+	int rawdata_set_lfreq;
+	int uniformity_check_tx;
+	int uniformity_check_rx;
+	int uniformity_check_min_max;
+	int uniformity_tx_hole;
+	int uniformity_rx_hole;
+	int uniformity_min_max_hole;
+	int scap_cb_off_min;
+	int scap_cb_off_max;
+	int scap_cb_wp_off_check;
+	int scap_cb_on_min;
+	int scap_cb_on_max;
+	int scap_cb_wp_on_check;
+	int scap_rawdata_off_min;
+	int scap_rawdata_off_max;
+	int scap_rawdata_wp_off_check;
+	int scap_rawdata_on_min;
+	int scap_rawdata_on_max;
+	int scap_rawdata_wp_on_check;
+	int short_cg;
+	int short_cc;
+	int panel_differ_min;
+	int panel_differ_max;
+	int scap_cb_hi_min;
+	int scap_cb_hi_max;
+	int scap_cb_hi_check;
+	int scap_rawdata_hi_min;
+	int scap_rawdata_hi_max;
+	int scap_rawdata_hi_check;
+	int scap_cb_hov_min;
+	int scap_cb_hov_max;
+	int scap_cb_hov_check;
+	int scap_rawdata_hov_min;
+	int scap_rawdata_hov_max;
+	int scap_rawdata_hov_check;
+};
+
+struct mc_sc_threshold {
+	struct mc_sc_threshold_b basic;
+	int *rawdata_h_min;
+	int *rawdata_h_max;
+	int *rawdata_l_min;
+	int *rawdata_l_max;
+	int *tx_linearity_max;
+	int *tx_linearity_min;
+	int *rx_linearity_max;
+	int *rx_linearity_min;
+	int *scap_cb_off_min;
+	int *scap_cb_off_max;
+	int *scap_cb_on_min;
+	int *scap_cb_on_max;
+	int *scap_cb_hi_min;
+	int *scap_cb_hi_max;
+	int *scap_cb_hov_min;
+	int *scap_cb_hov_max;
+	int *scap_rawdata_off_min;
+	int *scap_rawdata_off_max;
+	int *scap_rawdata_on_min;
+	int *scap_rawdata_on_max;
+	int *scap_rawdata_hi_min;
+	int *scap_rawdata_hi_max;
+	int *scap_rawdata_hov_min;
+	int *scap_rawdata_hov_max;
+	int *panel_differ_min;
+	int *panel_differ_max;
+};
+
+struct mc_sc_test {
+	struct mc_sc_threshold thr;
+	union {
+		u32 tmp;
+		struct mc_sc_testitem item;
+	} u;
+};
+
+/* sc */
+struct sc_testitem {
+	u32 rawdata_test                : 1;
+	u32 cb_test                     : 1;
+	u32 delta_cb_test               : 1;
+	u32 short_test                  : 1;
+};
+
+struct sc_threshold_b {
+	int rawdata_min;
+	int rawdata_max;
+	int cb_min;
+	int cb_max;
+	int dcb_base;
+	int dcb_differ_max;
+	int dcb_key_check;
+	int dcb_key_differ_max;
+	int dcb_ds1;
+	int dcb_ds2;
+	int dcb_ds3;
+	int dcb_ds4;
+	int dcb_ds5;
+	int dcb_ds6;
+	int dcb_critical_check;
+	int dcb_cs1;
+	int dcb_cs2;
+	int dcb_cs3;
+	int dcb_cs4;
+	int dcb_cs5;
+	int dcb_cs6;
+	int short_min;
+};
+
+struct sc_threshold {
+	struct sc_threshold_b basic;
+	int *rawdata_min;
+	int *rawdata_max;
+	int *cb_min;
+	int *cb_max;
+	int *dcb_sort;
+	int *dcb_base;
+};
+
+struct sc_test {
+	struct sc_threshold thr;
+	union {
+		u32 tmp;
+		struct sc_testitem item;
+	} u;
+};
+
+enum test_hw_type {
+	IC_HW_INCELL = 1,
+	IC_HW_MC_SC,
+	IC_HW_SC,
+};
+
+enum test_scan_mode {
+	SCAN_NORMAL = 0,
+	SCAN_SC,
+};
+
+struct fts_test_node {
+	int channel_num;
+	int tx_num;
+	int rx_num;
+	int node_num;
+	int key_num;
+};
+
+struct fts_test {
+	struct fts_ts_data *ts_data;
+	struct fts_test_node node;
+	struct fts_test_node sc_node;
+	u8 fw_ver;
+	u8 va_touch_thr;
+	u8 vk_touch_thr;
+	bool key_support;
+	bool v3_pattern;
+	u8 mapping;
+	u8 normalize;
+	int test_num;
+	int *buffer;
+	int buffer_length;
+	int *node_valid;
+	int *node_valid_sc;
+	int basic_thr_count;
+	int code1;
+	int code2;
+	int offset;
+	union {
+		struct incell_test incell;
+		struct mc_sc_test mc_sc;
+		struct sc_test sc;
+	} ic;
+
+	struct test_funcs *func;
+	struct fts_test_data testdata;
+	char *testresult;
+	int testresult_len;
+	char *csv_data_buffer;
+	int csv_data_len;
+	int result;
+#if defined(TEST_SAVE_FAIL_RESULT) && TEST_SAVE_FAIL_RESULT
+	struct timeval tv;
+#endif
+	struct ini_data ini;
+	int open_min;
+};
+
+struct test_funcs {
+	u64 ctype[FTX_MAX_COMPATIBLE_TYPE];
+	enum test_hw_type hwtype;
+	int startscan_mode;
+	int key_num_total;
+	bool rawdata2_support;
+	bool force_touch;
+	bool mc_sc_short_v2;
+	bool raw_u16;
+	bool cb_high_support;
+	int (*param_init)(void);
+	int (*init)(void);
+	int (*start_test)(void);
+	int (*open_test)(void);
+	int (*short_test)(void);
+	int (*data_dump)(int *, int *);
+};
+
+enum byte_mode {
+	DATA_ONE_BYTE,
+	DATA_TWO_BYTE,
+};
+/* mc_sc */
+enum normalize_type {
+	NORMALIZE_OVERALL,
+	NORMALIZE_AUTO,
+};
+
+enum wp_type {
+	WATER_PROOF_OFF = 0,
+	WATER_PROOF_ON = 1,
+	HIGH_SENSITIVITY = 2,
+	HOV = 3,
+	WATER_PROOF_ON_TX = 100,
+	WATER_PROOF_ON_RX,
+	WATER_PROOF_OFF_TX,
+	WATER_PROOF_OFF_RX,
+};
+/* mc end */
+
+/* sc */
+enum factory_mode {
+	FACTORY_NORMAL,
+	FACTORY_TESTMODE_1,
+	FACTORY_TESTMODE_2,
+};
+
+enum dcb_sort_num {
+	DCB_SORT_MIN = 1,
+	DCB_SORT_MAX = 6,
+};
+
+struct dcb_sort_d {
+	int ch_num;
+	int deviation;
+	int critical;
+	int min;
+	int max;
+};
+/* sc end */
+
+enum csv_itemcode_incell {
+	CODE_ENTER_FACTORY_MODE = 0,
+	CODE_RAWDATA_TEST = 7,
+	CODE_CB_TEST = 12,
+	CODE_SHORT_TEST = 15,
+	CODE_OPEN_TEST = 25,
+	CODE_LCD_NOISE_TEST = 27,
+	CODE_MUX_OPEN_TEST = 41,
+};
+
+enum csv_itemcode_mc_sc {
+	CODE_M_RAWDATA_TEST = 7,
+	CODE_M_SCAP_CB_TEST = 9,
+	CODE_M_SCAP_RAWDATA_TEST = 10,
+	CODE_M_WEAK_SHORT_CIRCUIT_TEST = 15,
+	CODE_M_RAWDATA_UNIFORMITY_TEST = 16,
+	CODE_M_PANELDIFFER_TEST = 20,
+};
+
+enum csv_itemcode_sc {
+	CODE_S_RAWDATA_TEST = 7,
+	CODE_S_CB_TEST = 13,
+	CODE_S_DCB_TEST = 14,
+};
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+#if FTS_TEST_EN
+extern struct test_funcs test_func_ft5652;
+#endif
+
+extern struct fts_test *fts_ftest;
+
+void sys_delay(int ms);
+int fts_abs(int value);
+void print_buffer(int *buffer, int length, int line_num);
+int fts_test_read_reg(u8 addr, u8 *val);
+int fts_test_write_reg(u8 addr, u8 val);
+int fts_test_read(u8 addr, u8 *readbuf, int readlen);
+int fts_test_write(u8 addr, u8 *writebuf, int writelen);
+int enter_work_mode(void);
+int enter_factory_mode(void);
+int read_mass_data(u8 addr, int byte_num, int *buf);
+int chip_clb(void);
+int wait_state_update(u8 retval);
+int get_cb_incell(u16 saddr, int byte_num, int *cb_buf);
+int short_get_adcdata_incell(u8 retval, u8 ch_num, int byte_num, int *adc_buf);
+int start_scan(void);
+int get_rawdata(int *data);
+int get_cb_sc(int byte_num, int *cb_buf, enum byte_mode mode);
+bool compare_data(int *data, int min, int max, int min_vk, int max_vk, bool key);
+bool compare_array(int *data, int *min, int *max, bool key);
+void show_data(int *data, bool key);
+/* mc_sc */
+int mapping_switch(u8 mapping);
+bool get_fw_wp(u8 wp_channel_select, enum wp_type water_proof_type);
+int get_cb_mc_sc(u8 wp, int byte_num, int *cb_buf, enum byte_mode mode);
+int get_rawdata_mc_sc(enum wp_type wp, int *data);
+int get_rawdata_mc(u8 fre, u8 fir, int *rawdata);
+int short_get_adc_data_mc(u8 retval, int byte_num, int *adc_buf, u8 mode);
+bool compare_mc_sc(bool, bool, int *, int *, int *);
+void show_data_mc_sc(int *data);
+void *fts_malloc(size_t size);
+void fts_free_proc(void *p);
+void fts_test_save_data(char *name, int code, int *data, int datacnt,
+						bool mc_sc, bool key, bool result);
+
+#define fts_malloc_r(p, size) do {\
+	if (NULL == p) {\
+		p = fts_malloc(size);\
+		if (NULL == p) {\
+			return -ENOMEM;\
+		}\
+	}\
+} while(0)
+
+#define fts_free(p) do {\
+	if (p) {\
+		fts_free_proc(p);\
+		p = NULL;\
+	}\
+} while(0)
+
+#define CSV_SUPPORT             1
+#define TXT_SUPPORT             1
+
+#define FTS_TEST_DBG(fmt, args...) do { \
+printk("[FTS_TS][TEST]%s:"fmt"\n",  __func__, ##args); \
+} while (0)
+
+#define FTS_TEST_FUNC_ENTER() do { \
+	printk("[FTS_TS][TEST]%s: Enter\n", __func__); \
+} while (0)
+
+#define FTS_TEST_FUNC_EXIT()  do { \
+	printk("[FTS_TS][TEST]%s: Exit(%d)\n", __func__, __LINE__); \
+} while (0)
+
+#define FTS_TEST_INFO(fmt, args...) do { \
+	printk(KERN_ERR "[FTS_TS/I][TEST]%s:"fmt"\n", __func__, ##args); \
+} while (0)
+
+#define FTS_TEST_ERROR(fmt, args...) do { \
+	printk(KERN_ERR "[FTS_TS/E][TEST]%s:"fmt"\n", __func__, ##args); \
+} while (0)
+
+#define FTS_TEST_SAVE_INFO(fmt, args...) do { \
+	if (fts_ftest->testresult) { \
+		fts_ftest->testresult_len += snprintf( \
+		fts_ftest->testresult + fts_ftest->testresult_len, \
+		TXT_BUFFER_LEN, \
+		fmt, ##args);\
+	} \
+} while (0)
+
+#define FTS_TEST_SAVE_ERR(fmt, args...)  do { \
+	if (fts_ftest->testresult && (fts_ftest->testresult_len < TXT_BUFFER_LEN)) { \
+		fts_ftest->testresult_len += snprintf( \
+		fts_ftest->testresult + fts_ftest->testresult_len, \
+		TXT_BUFFER_LEN, \
+		fmt, ##args);\
+	} \
+	printk(KERN_ERR "[FTS_TS/E][TEST]%s:"fmt"\n", __func__, ##args);\
+} while (0)
+#endif
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test_ini.c b/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test_ini.c
new file mode 100755
index 00000000000000..d0c9debcd9697e
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test_ini.c
@@ -0,0 +1,1299 @@
+/************************************************************************
+* Copyright (c) 2012-2020, Focaltech Systems (R)��All Rights Reserved.
+* Copyright (C) 2021-2022 XiaoMi, Inc.
+*
+* File Name: focaltech_test_ini.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-01
+*
+* Abstract: parsing function of INI file
+*
+************************************************************************/
+#include "focaltech_test.h"
+
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define FTS_INI_REQUEST_SUPPORT              1
+
+struct ini_ic_type ic_types[] = {
+	{"FT5X46",  0x54000002},
+	{"FT5X46i", 0x54010002},
+	{"FT5526",  0x54020002},
+	{"FT3X17",  0x54030002},
+	{"FT5436",  0x54040002},
+	{"FT3X27",  0x54050002},
+	{"FT5526i", 0x54060002},
+	{"FT5416",  0x54070002},
+	{"FT5426",  0x54080002},
+	{"FT5435",  0x54090002},
+	{"FT7681",  0x540A0002},
+	{"FT7661",  0x540B0002},
+	{"FT7511",  0x540C0002},
+	{"FT7421",  0x540D0002},
+	{"FT7311",  0x54100002},
+
+	{"FT5526_003", 0x40020082},
+	{"FT5426_003", 0x40030082},
+	{"FT3427G_003", 0x40040082},
+	{"FT3427_003", 0x40050082},
+	{"FT5446_003", 0x40000082},
+	{"FT5446_Q03", 0x40000082},
+	{"FT5446_P03", 0x55060081},
+	{"FT5446DQS-W01", 0x40000082},
+
+	{"FT5452",  0x55000081},
+	{"FT3518",  0x55010081},
+	{"FT3558",  0x55020081},
+	{"FT3528",  0x55030081},
+	{"FT5536",  0x55040081},
+	{"FT3418",  0x55070081},
+	{"FT5536L", 0x55080081},
+
+	{"FT5472",  0x8F000083},
+	{"FT5446U", 0x8F010083},
+	{"FT5456U", 0x8F020083},
+	{"FT3417U", 0x8F030083},
+	{"FT5426U", 0x8F040083},
+	{"FT3428",  0x8F050083},
+	{"FT3437U", 0x8F060083},
+
+	{"FT5822",  0x58000001},
+	{"FT5626",  0x58010001},
+	{"FT5726",  0x58020001},
+	{"FT5826B", 0x58030001},
+	{"FT3617",  0x58040001},
+	{"FT3717",  0x58050001},
+	{"FT7811",  0x58060001},
+	{"FT5826S", 0x58070001},
+	{"FT3517U", 0x58090001},
+	{"FT3557",  0x580A0001},
+
+	{"FT6X36",  0x63000003},
+	{"FT3X07",  0x63010003},
+	{"FT6416",  0x63020003},
+	{"FT6336G/U", 0x63030003},
+	{"FT7401",  0x63040003},
+	{"FT3407U", 0x63050003},
+	{"FT6236U", 0x63060003},
+	{"FT6436U", 0x63070003},
+
+	{"FT3267",  0x63080004},
+	{"FT3367",  0x63090004},
+
+	{"FT6216",  0x64000084},
+	{"FT7302",  0x64010084},
+	{"FT7202",  0x64020084},
+	{"FT3308",  0x64030084},
+	{"FT6446",  0x64040084},
+
+	{"FT8607",  0x81000009},
+	{"FT8716",  0x82000005},
+	{"FT8716U", 0x44000005},
+	{"FT8716F", 0x8A000005},
+	{"FT8613",  0x4500000C},
+
+	{"FT8736",  0x83000006},
+
+	{"FT8006M", 0x87000007},
+	{"FT8201",  0x87010010},
+	{"FT7250",  0x8702001A},
+
+	{"FT8006U", 0x8900000B},
+	{"FT8006S", 0x8901000B},
+	{"FT8006S-AA", 0x9B000019},
+	{"FT8016", 0x9B01001D},
+
+	{"FT8719",  0x8E00000D},
+	{"FT8615",  0x9100000F},
+
+	{"FT8739",  0x8D00000E},
+
+	{"FT8006P", 0x93000011},
+	{"FT7120",  0x9E00001B},
+
+	{"FT7251",  0x8C000012},
+	{"FT7252",  0x92000013},
+
+	{"FT8613S", 0x94000014},
+
+	{"FT8756",  0x95000015},
+	{"FT8656",  0x95010018},
+
+	{"FT8302",  0x97000016},
+
+	{"FT8009",  0x98000017},
+
+	{"FT8720",  0x9C00001C},
+
+	{"FT3068",  0x65010085},
+	{"FT3168",  0x65020085},
+	{"FT3067",  0x65030085},
+	{"FT3268",  0x65040085},
+	{"FT6346U", 0x65050085},
+	{"FT6146",  0x65060085},
+	{"FT6346G", 0x65070085},
+
+	{"FT5726_V03", 0x580C0086},
+	{"FT5726_003", 0x580C0086},
+
+	{"FT3618",  0x59010087},
+	{"FT5646",  0x59020087},
+	{"FT3A58",  0x59030087},
+	{"FT3B58",  0x59040087},
+	{"FT3D58",  0x59050087},
+	{"FT5A36",  0x59060087},
+	{"FT5B36",  0x59070087},
+	{"FT5D36",  0x59080087},
+	{"FT5A46",  0x59090087},
+	{"FT5B46",  0x590A0087},
+	{"FT5D46",  0x590B0087},
+	{"FT5936",  0x590C0087},
+	{"FT5946",  0x590D0087},
+
+	{"FT3658U", 0x5A010088},
+};
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+
+/*****************************************************************************
+* Static function prototypes
+*****************************************************************************/
+/* Works only for digits and letters, but small and fast */
+#define TOLOWER(x) ((x) | 0x20)
+static int fts_strncmp(const char *cs, const char *ct, int count)
+{
+	u8 c1 = 0, c2 = 0;
+
+	while (count) {
+		if  ((*cs == '\0') || (*ct == '\0'))
+			return -1;
+		c1 = TOLOWER(*cs++);
+		c2 = TOLOWER(*ct++);
+		if (c1 != c2)
+			return c1 < c2 ? -1 : 1;
+		if (!c1)
+			break;
+		count--;
+	}
+
+	return 0;
+}
+
+static int is_space(int x)
+{
+	if (x == ' ' || x == '\t' || x == '\n' || x == '\f' || x == '\b' || x == '\r')
+		return 1;
+	else
+		return 0;
+}
+
+static int is_digit(int x)
+{
+	if (x <= '9' && x >= '0')
+		return 1;
+	else
+		return 0;
+}
+
+static long fts_atol(char *nptr)
+{
+	int c; /* current char */
+	long total; /* current total */
+	int sign; /* if ''-'', then negative, otherwise positive */
+	/* skip whitespace */
+	while ( is_space((int)(unsigned char)*nptr) )
+		++nptr;
+	c = (int)(unsigned char) * nptr++;
+	sign = c; /* save sign indication */
+	if (c == '-' || c == '+')
+		c = (int)(unsigned char) * nptr++; /* skip sign */
+	total = 0;
+	while (is_digit(c)) {
+		total = 10 * total + (c - '0'); /* accumulate digit */
+		c = (int)(unsigned char) * nptr++; /* get next char */
+	}
+	if (sign == '-')
+		return -total;
+	else
+		return total; /* return result, negated if necessary */
+}
+
+static int fts_atoi(char *nptr)
+{
+	return (int)fts_atol(nptr);
+}
+
+static int fts_test_get_ini_via_request_firmware(struct ini_data *ini, char *fwname)
+{
+	int ret = 0;
+	const struct firmware *fw = NULL;
+	struct device *dev = &fts_data->input_dev->dev;
+
+#if !FTS_INI_REQUEST_SUPPORT
+	return -EINVAL;
+#endif
+
+	ret = request_firmware(&fw, fwname, dev);
+	if (0 == ret) {
+		FTS_TEST_INFO("firmware request(%s) success", fwname);
+		ini->data = vmalloc(fw->size + 1);
+		if (NULL == ini->data) {
+			FTS_TEST_ERROR("ini->data buffer vmalloc fail");
+			ret = -ENOMEM;
+		} else {
+			memcpy(ini->data, fw->data, fw->size);
+			ini->data[fw->size] = '\n';
+			ini->length = fw->size + 1;
+		}
+	} else {
+		FTS_TEST_INFO("firmware request(%s) fail,ret=%d", fwname, ret);
+	}
+
+	if (fw != NULL) {
+		release_firmware(fw);
+		fw = NULL;
+	}
+
+	return ret;
+}
+
+
+static void str_space_remove(char *str)
+{
+	char *t = str;
+	char *s = str;
+
+	while (*t != '\0') {
+		if (*t != ' ') {
+			*s = *t;
+			s++;
+		}
+		t++;
+	}
+
+	*s = '\0';
+}
+
+static void print_ini_data(struct ini_data *ini)
+{
+	int i = 0;
+	int j = 0;
+	struct ini_section *section = NULL;
+	struct ini_keyword *keyword = NULL;
+	struct fts_test *tdata = fts_ftest;
+
+	if (tdata && tdata->ts_data && (tdata->ts_data->log_level < 10)) {
+		return;
+	}
+
+	if (!ini || !ini->tmp) {
+		FTS_TEST_DBG("ini is null");
+		return;
+	}
+
+	FTS_TEST_DBG("section num:%d, keyword num total:%d",
+				 ini->section_num, ini->keyword_num_total);
+	for (i = 0; i < ini->section_num; i++) {
+		section = &ini->section[i];
+		FTS_TEST_DBG("section name:[%s] keyword num:%d",
+					 section->name, section->keyword_num);
+		for (j = 0; j < section->keyword_num; j++) {
+			keyword = &section->keyword[j];
+			FTS_TEST_DBG("%s=%s", keyword->name, keyword->value);
+		}
+	}
+}
+
+static int ini_get_line(char *filedata, char *line_data, int *line_len)
+{
+	int i = 0;
+	int line_length = 0;
+	int type;
+
+	/* get a line data */
+	for (i = 0; i < MAX_INI_LINE_LEN; i++) {
+		if (('\n' == filedata[i]) || ('\r' == filedata[i])) {
+			line_data[line_length++] = '\0';
+			if (('\n' == filedata[i + 1]) || ('\r' == filedata[i + 1])) {
+				line_length++;
+			}
+			break;
+		} else {
+			line_data[line_length++] = filedata[i];
+		}
+	}
+
+	if (i >= MAX_INI_LINE_LEN) {
+		FTS_TEST_ERROR("line length(%d)>max(%d)", line_length, MAX_INI_LINE_LEN);
+		return -ENODATA;
+	}
+
+	/* remove space */
+	str_space_remove(line_data);
+
+	/* confirm line type */
+	if (('\0' == line_data[0]) || ('#' == line_data[0])) {
+		type = LINE_OTHER;
+	} else if ('[' == line_data[0]) {
+		type = LINE_SECTION;
+	} else {
+		type = LINE_KEYWORD; /* key word */
+	}
+
+	*line_len = line_length;
+	return type;
+}
+
+static int ini_parse_keyword(struct ini_data *ini, char *line_buffer)
+{
+	int i = 0;
+	int offset = 0;
+	int length = strlen(line_buffer);
+	struct ini_section *section = NULL;
+
+	for (i = 0; i < length; i++) {
+		if (line_buffer[i] == '=')
+			break;
+	}
+
+	if ((i == 0) || (i >= length)) {
+		FTS_TEST_ERROR("mark(=)in keyword line fail");
+		return -ENODATA;
+	}
+
+	if ((ini->section_num > 0) && (ini->section_num < MAX_INI_SECTION_NUM)) {
+		section = &ini->section[ini->section_num - 1];
+	}
+
+	if (NULL == section) {
+		FTS_TEST_ERROR("section is null");
+		return -ENODATA;
+	}
+
+	offset = ini->keyword_num_total;
+	if (offset > MAX_KEYWORD_NUM) {
+		FTS_TEST_ERROR("keyword num(%d)>max(%d),please check MAX_KEYWORD_NUM",
+					   ini->keyword_num_total, MAX_KEYWORD_NUM);
+		return -ENODATA;
+	}
+	memcpy(ini->tmp[offset].name, &line_buffer[0], i);
+	ini->tmp[offset].name[i] = '\0';
+	memcpy(ini->tmp[offset].value, &line_buffer[i + 1], length - i - 1);
+	ini->tmp[offset].value[length - i - 1] = '\0';
+	section->keyword_num++;
+	ini->keyword_num_total++;
+
+	return 0;
+}
+
+static int ini_parse_section(struct ini_data *ini, char *line_buffer)
+{
+	int length = strlen(line_buffer);
+	struct ini_section *section = NULL;
+
+	if ((length <= 2) || (length > MAX_KEYWORD_NAME_LEN)) {
+		FTS_TEST_ERROR("section line length fail");
+		return -EINVAL;
+	}
+
+	if ((ini->section_num < 0) || (ini->section_num >= MAX_INI_SECTION_NUM)) {
+		FTS_TEST_ERROR("section_num(%d) fail", ini->section_num);
+		return -EINVAL;
+	}
+	section = &ini->section[ini->section_num];
+	memcpy(section->name, line_buffer + 1, length - 2);
+	section->name[length - 2] = '\0';
+	FTS_TEST_INFO("section:%s, keyword offset:%d",
+				  section->name, ini->keyword_num_total);
+	section->keyword = (struct ini_keyword *)&ini->tmp[ini->keyword_num_total];
+	section->keyword_num = 0;
+	ini->section_num++;
+	if (ini->section_num > MAX_INI_SECTION_NUM) {
+		FTS_TEST_ERROR("section num(%d)>max(%d), please check MAX_INI_SECTION_NUM",
+					   ini->section_num, MAX_INI_SECTION_NUM);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+static int ini_init_inidata(struct ini_data *ini)
+{
+	int pos = 0;
+	int ret = 0;
+	char line_buffer[MAX_INI_LINE_LEN] = { 0 };
+	int line_len = 0;
+
+	if (!ini || !ini->data || !ini->tmp) {
+		FTS_TEST_DBG("ini/data/tmp is null");
+		return -EINVAL;
+	}
+
+	while (pos < ini->length) {
+		ret = ini_get_line(ini->data + pos, line_buffer, &line_len);
+		if (ret < 0) {
+			FTS_TEST_ERROR("ini_get_line fail");
+			return ret;
+		} else if (ret == LINE_KEYWORD) {
+			ret = ini_parse_keyword(ini, line_buffer);
+			if (ret < 0) {
+				FTS_TEST_ERROR("ini_parse_keyword fail");
+				return ret;
+			}
+		} else if (ret == LINE_SECTION) {
+			ret = ini_parse_section(ini, line_buffer);
+			if (ret < 0) {
+				FTS_TEST_ERROR("ini_parse_section fail");
+				return ret;
+			}
+		}
+
+		pos += line_len;
+	}
+
+	print_ini_data(ini);
+	return 0;
+}
+
+static int ini_get_key(char *section_name, char *key_name, char *value)
+{
+	int i = 0;
+	int j = 0;
+	struct ini_data *ini = &fts_ftest->ini;
+	struct ini_section *section;
+	struct ini_keyword *keyword;
+	int key_len = 0;
+	int log_level = fts_ftest->ts_data->log_level;
+
+	if (log_level >= 10) {
+		FTS_TEST_DBG("section name:%s, key name:%s", section_name, key_name);
+		FTS_TEST_DBG("section num:%d", ini->section_num);
+	}
+
+	for (i = 0; i < ini->section_num; i++) {
+		section = &ini->section[i];
+		key_len = strlen(section_name);
+		if (key_len != strlen(section->name))
+			continue;
+		if (fts_strncmp(section->name, section_name, key_len) != 0)
+			continue;
+
+		if (log_level >= 10) {
+			FTS_TEST_DBG("section name:%s keyword num:%d",
+						 section->name, section->keyword_num);
+		}
+		for (j = 0; j < section->keyword_num; j++) {
+			keyword = &section->keyword[j];
+			key_len = strlen(key_name);
+			if (key_len == strlen(keyword->name)) {
+				if (0 == fts_strncmp(keyword->name, key_name, key_len)) {
+					key_len = strlen(keyword->value);
+					memcpy(value, keyword->value, key_len);
+					if (log_level >= 3) {
+						FTS_TEST_DBG("section:%s,%s=%s",
+									 section_name, key_name, value);
+					}
+
+					return key_len;
+				}
+			}
+		}
+	}
+
+	return -ENODATA;
+}
+
+/* return keyword's value length if success */
+static int ini_get_string_value(char *section_name, char *key_name, char *rval)
+{
+	if (!section_name || !key_name || !rval) {
+		FTS_TEST_ERROR("section_name/key_name/rval is null");
+		return -EINVAL;
+	}
+
+	return ini_get_key(section_name, key_name, rval);
+}
+
+int get_keyword_value(char *section, char *name, int *value)
+{
+	int ret = 0;
+	char str[MAX_KEYWORD_VALUE_LEN] = { 0 };
+
+	ret = ini_get_string_value(section, name, str);
+	if (ret > 0) {
+		/* search successfully, so change value, otherwise keep default */
+		*value = fts_atoi(str);
+	}
+
+	return ret;
+}
+
+static void fts_init_buffer(int *buffer, int value, int len, bool key_check, int key_value, int key_len)
+{
+	int i = 0;
+	int va_len = 0;
+
+	if (NULL == buffer) {
+		FTS_TEST_ERROR("buffer is null\n");
+		return;
+	}
+
+	va_len = len - key_len;
+	if (va_len < 0) {
+		FTS_TEST_ERROR("total len(0x%x) less key len(0x%x)\n", len, key_len);
+		return;
+	}
+
+	for (i = 0; i < len; i++) {
+		buffer[i] = value;
+	}
+
+	if (key_check) {
+		for (i = 0; i < key_len; i++) {
+			buffer[va_len + i] = key_value;
+		}
+	}
+
+}
+
+static int get_test_item(char name[][MAX_KEYWORD_NAME_LEN], int length, int *val)
+{
+	int i = 0;
+	int ret = 0;
+	int tmpval = 0;
+
+	if (length > TEST_ITEM_COUNT_MAX) {
+		FTS_TEST_SAVE_ERR("test item count(%d) > max(%d)\n",
+						  length, TEST_ITEM_COUNT_MAX);
+		return -EINVAL;
+	}
+
+	FTS_TEST_INFO("test items in total of driver:%d", length);
+	*val = 0;
+	for (i = 0; i < length; i++) {
+		tmpval = 0;
+		ret = get_value_testitem(name[i], &tmpval);
+		if (ret < 0) {
+			FTS_TEST_DBG("test item:%s not found", name[i]);
+		} else {
+			FTS_TEST_DBG("test item:%s=%d", name[i], tmpval);
+			*val |= (tmpval << i);
+		}
+	}
+
+	return 0;
+}
+
+static int get_basic_threshold(char name[][MAX_KEYWORD_NAME_LEN], int length, int *val)
+{
+	int i = 0;
+	int ret = 0;
+	struct fts_test *tdata = fts_ftest;
+	int log_level = tdata->ts_data->log_level;
+
+	FTS_TEST_INFO("basic_thr string length(%d), count(%d)\n", length, tdata->basic_thr_count);
+	if (length > fts_ftest->basic_thr_count) {
+		FTS_TEST_SAVE_ERR("basic_thr string length > count\n");
+		return -EINVAL;
+	}
+
+	for (i = 0; i < length; i++) {
+		ret = get_value_basic(name[i], &val[i]);
+		if (log_level >= 3) {
+			if (ret < 0) {
+				FTS_TEST_DBG("basic thr:%s not found", name[i]);
+			} else {
+				FTS_TEST_DBG("basic thr:%s=%d", name[i], val[i]);
+			}
+		}
+	}
+
+	return 0;
+}
+
+static void get_detail_threshold(char *key_name, bool is_prex, int *thr, int node_num)
+{
+	char str[MAX_KEYWORD_VALUE_LEN] = { 0 };
+	char str_temp[MAX_KEYWORD_NAME_LEN] = { 0 };
+	char str_tmp[MAX_KEYWORD_VALUE_ONE_LEN] = { 0 };
+	struct fts_test *tdata = fts_ftest;
+	int divider_pos = 0;
+	int index = 0;
+	int i = 0;
+	int j = 0;
+	int k = 0;
+	int tx_num = 0;
+	int rx_num = 0;
+	int thr_pos = 0;
+
+	if (!key_name || !thr) {
+		FTS_TEST_ERROR("key_name/thr is null");
+		return;
+	}
+
+	if (is_prex) {
+		tx_num = tdata->node.tx_num;
+		rx_num = tdata->node.rx_num;
+	}
+	for (i = 0; i < tx_num + 1; i++) {
+		if (is_prex) {
+			snprintf(str_temp, MAX_KEYWORD_NAME_LEN, "%s%d", key_name, (i + 1));
+		} else {
+			snprintf(str_temp, MAX_KEYWORD_NAME_LEN, "%s", key_name);
+		}
+		divider_pos = ini_get_string_value("SpecialSet", str_temp, str);
+		if (divider_pos <= 0)
+			continue;
+		index = 0;
+		k = 0;
+		memset(str_tmp, 0, sizeof(str_tmp));
+		for (j = 0; j < divider_pos; j++) {
+			if (',' == str[j]) {
+				thr_pos = i * rx_num + k;
+				if (thr_pos >= node_num) {
+					FTS_TEST_ERROR("key:%s %d,dthr_num(%d>=%d) fail",
+								   key_name, i, thr_pos, node_num);
+					break;
+				}
+				thr[thr_pos] = (int)(fts_atoi(str_tmp));
+				index = 0;
+				memset(str_tmp, 0x00, sizeof(str_tmp));
+				k++;
+			} else {
+				if (' ' == str[j])
+					continue;
+				str_tmp[index] = str[j];
+				index++;
+			}
+		}
+	}
+}
+
+static int init_node_valid(void)
+{
+	char str[MAX_KEYWORD_NAME_LEN] = {0};
+	int i = 0;
+	int j = 0;
+	int chy = 0;
+	int node_num = 0;
+	int cnt = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	if (!tdata || !tdata->node_valid || !tdata->node_valid_sc) {
+		FTS_TEST_ERROR("tdata/node_valid/node_valid_sc is null");
+		return -EINVAL;
+	}
+
+	chy = tdata->node.rx_num;
+	node_num = tdata->node.node_num;
+	fts_init_buffer(tdata->node_valid, 1 , node_num, false, 0, 0);
+	if ((tdata->func->hwtype == IC_HW_INCELL) || (tdata->func->hwtype == IC_HW_MC_SC)) {
+		for (cnt = 0; cnt < node_num; cnt++) {
+			i = cnt / chy + 1;
+			j = cnt % chy + 1;
+			snprintf(str, MAX_KEYWORD_NAME_LEN, "InvalidNode[%d][%d]", i, j);
+			get_keyword_value("INVALID_NODE", str, &tdata->node_valid[cnt]);
+		}
+	}
+
+	if (tdata->func->hwtype == IC_HW_MC_SC) {
+		chy = tdata->sc_node.rx_num;
+		node_num = tdata->sc_node.node_num;
+		fts_init_buffer(tdata->node_valid_sc, 1, node_num, false, 0, 0);
+
+		for (cnt = 0; cnt < node_num; cnt++) {
+			i = (cnt >= chy) ? 2 : 1;
+			j = (cnt >= chy) ? (cnt - chy + 1) : (cnt + 1);
+			snprintf(str, MAX_KEYWORD_NAME_LEN, "InvalidNodeS[%d][%d]", i, j);
+			get_keyword_value("INVALID_NODES", str, &tdata->node_valid_sc[cnt]);
+		}
+	}
+
+	print_buffer(tdata->node_valid, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(tdata->node_valid_sc, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	return 0;
+}
+
+/* incell */
+static int get_test_item_incell(void)
+{
+	int ret = 0;
+	char item_name[][MAX_KEYWORD_NAME_LEN] = TEST_ITEM_INCELL;
+	int length = sizeof(item_name) / MAX_KEYWORD_NAME_LEN;
+	int item_val = 0;
+
+	ret = get_test_item(item_name, length, &item_val);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get test item fail\n");
+		return ret;
+	}
+
+	fts_ftest->ic.incell.u.tmp = item_val;
+	return 0;
+}
+
+static char bthr_name_incell[][MAX_KEYWORD_NAME_LEN] = BASIC_THRESHOLD_INCELL;
+static int get_test_threshold_incell(void)
+{
+	int ret = 0;
+	int length = sizeof(bthr_name_incell) / MAX_KEYWORD_NAME_LEN;
+	struct fts_test *tdata = fts_ftest;
+	struct incell_threshold *thr = &tdata->ic.incell.thr;
+	int node_num = tdata->node.node_num;
+	int key_num = tdata->node.key_num;
+	bool raw_key_check = thr->basic.rawdata_vkey_check;
+	bool cb_key_check = thr->basic.cb_vkey_check;
+
+	tdata->basic_thr_count = sizeof(struct incell_threshold_b) / sizeof(int);
+	/* get standard basic threshold */
+	ret = get_basic_threshold(bthr_name_incell, length, (int *)&thr->basic);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get basic thr fail\n");
+		return ret;
+	}
+
+	/* basic special set by ic */
+	if (tdata->func->param_init) {
+		ret = tdata->func->param_init();
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("special basic thr init fail\n");
+			return ret;
+		}
+	}
+
+	/* init buffer */
+	fts_init_buffer(thr->rawdata_max, thr->basic.rawdata_max, node_num, raw_key_check, thr->basic.rawdata_max_vk, key_num);
+	fts_init_buffer(thr->rawdata_min, thr->basic.rawdata_min, node_num, raw_key_check, thr->basic.rawdata_min_vk, key_num);
+	if (tdata->func->rawdata2_support) {
+		fts_init_buffer(thr->rawdata2_max, thr->basic.rawdata2_max, node_num, false, 0, 0);
+		fts_init_buffer(thr->rawdata2_min, thr->basic.rawdata2_min, node_num, false, 0, 0);
+	}
+	fts_init_buffer(thr->cb_max, thr->basic.cb_max, node_num, cb_key_check, thr->basic.cb_max_vk, key_num);
+	fts_init_buffer(thr->cb_min, thr->basic.cb_min, node_num, cb_key_check, thr->basic.cb_min_vk, key_num);
+
+	/* detail threshold */
+	get_detail_threshold("RawData_Max_Tx", true, thr->rawdata_max, node_num);
+	get_detail_threshold("RawData_Min_Tx", true, thr->rawdata_min, node_num);
+	get_detail_threshold("CB_Max_Tx", true, thr->cb_max, node_num);
+	get_detail_threshold("CB_Min_Tx", true, thr->cb_min, node_num);
+
+	return 0;
+}
+
+static void print_thr_incell(void)
+{
+	struct fts_test *tdata = fts_ftest;
+	struct incell_threshold *thr = &tdata->ic.incell.thr;
+
+	if (tdata->ts_data->log_level < 3) {
+		return;
+	}
+
+	FTS_TEST_DBG("short_res_min:%d", thr->basic.short_res_min);
+	FTS_TEST_DBG("short_res_vk_min:%d", thr->basic.short_res_vk_min);
+	FTS_TEST_DBG("open_cb_min:%d", thr->basic.open_cb_min);
+	FTS_TEST_DBG("open_k1_check:%d", thr->basic.open_k1_check);
+	FTS_TEST_DBG("open_k1_value:%d", thr->basic.open_k1_value);
+	FTS_TEST_DBG("open_k2_check:%d", thr->basic.open_k2_check);
+	FTS_TEST_DBG("open_k2_value:%d", thr->basic.open_k2_value);
+	FTS_TEST_DBG("cb_min:%d", thr->basic.cb_min);
+	FTS_TEST_DBG("cb_max:%d", thr->basic.cb_max);
+	FTS_TEST_DBG("cb_vkey_check:%d", thr->basic.cb_vkey_check);
+	FTS_TEST_DBG("cb_min_vk:%d", thr->basic.cb_min_vk);
+	FTS_TEST_DBG("cb_max_vk:%d", thr->basic.cb_max_vk);
+	FTS_TEST_DBG("rawdata_min:%d", thr->basic.rawdata_min);
+	FTS_TEST_DBG("rawdata_max:%d", thr->basic.rawdata_max);
+	FTS_TEST_DBG("rawdata_vkey_check:%d", thr->basic.rawdata_vkey_check);
+	FTS_TEST_DBG("rawdata_min_vk:%d", thr->basic.rawdata_min_vk);
+	FTS_TEST_DBG("rawdata_max_vk:%d", thr->basic.rawdata_max_vk);
+	FTS_TEST_DBG("lcdnoise_frame:%d", thr->basic.lcdnoise_frame);
+	FTS_TEST_DBG("lcdnoise_coefficient:%d", thr->basic.lcdnoise_coefficient);
+	FTS_TEST_DBG("lcdnoise_coefficient_vkey:%d", thr->basic.lcdnoise_coefficient_vkey);
+
+	FTS_TEST_DBG("open_nmos:%d", thr->basic.open_nmos);
+	FTS_TEST_DBG("keyshort_k1:%d", thr->basic.keyshort_k1);
+	FTS_TEST_DBG("keyshort_cb_max:%d", thr->basic.keyshort_cb_max);
+	FTS_TEST_DBG("rawdata2_min:%d", thr->basic.rawdata2_min);
+	FTS_TEST_DBG("rawdata2_max:%d", thr->basic.rawdata2_max);
+
+
+	print_buffer(thr->rawdata_min, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->rawdata_max, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->cb_min, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->cb_max, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->rawdata2_min, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->rawdata2_max, tdata->node.node_num, tdata->node.rx_num);
+}
+
+static int ini_init_test_incell(void)
+{
+	int ret = 0;
+
+	ret = get_test_item_incell();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get incell test item fail\n");
+		return ret;
+	}
+
+
+	ret = get_test_threshold_incell();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get incell threshold fail\n");
+		return ret;
+	}
+
+	print_thr_incell();
+	return 0;
+}
+
+/* mc_sc */
+static int get_test_item_mc_sc(void)
+{
+	int ret = 0;
+	char item_name[][MAX_KEYWORD_NAME_LEN] = TEST_ITEM_MC_SC;
+	int length = sizeof(item_name) / MAX_KEYWORD_NAME_LEN;
+	int item_val = 0;
+
+	ret = get_test_item(item_name, length, &item_val);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get test item fail\n");
+		return ret;
+	}
+
+	fts_ftest->ic.mc_sc.u.tmp = item_val;
+	FTS_TEST_INFO("test item:0x%x in ini", fts_ftest->ic.mc_sc.u.tmp);
+	return 0;
+}
+
+static char bthr_name_mc_sc[][MAX_KEYWORD_NAME_LEN] = BASIC_THRESHOLD_MC_SC;
+static int get_test_threshold_mc_sc(void)
+{
+	int ret = 0;
+	int length = sizeof(bthr_name_mc_sc) / MAX_KEYWORD_NAME_LEN;
+	struct fts_test *tdata = fts_ftest;
+	struct mc_sc_threshold *thr = &tdata->ic.mc_sc.thr;
+	int node_num = tdata->node.node_num;
+	int sc_num = tdata->sc_node.node_num;
+
+	tdata->basic_thr_count = sizeof(struct mc_sc_threshold_b) / sizeof(int);
+	/* get standard basic threshold */
+	ret = get_basic_threshold(bthr_name_mc_sc, length, (int *)&thr->basic);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get basic thr fail\n");
+		return ret;
+	}
+
+	/* basic special set by ic */
+	if (tdata->func->param_init) {
+		ret = tdata->func->param_init();
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("special basic thr init fail\n");
+			return ret;
+		}
+	}
+
+	/* init buffer */
+	fts_init_buffer(thr->rawdata_h_min, thr->basic.rawdata_h_min, node_num, false, 0, 0);
+	fts_init_buffer(thr->rawdata_h_max, thr->basic.rawdata_h_max, node_num, false, 0, 0);
+	if (tdata->func->rawdata2_support) {
+		fts_init_buffer(thr->rawdata_l_min, thr->basic.rawdata_l_min, node_num, false, 0, 0);
+		fts_init_buffer(thr->rawdata_l_max, thr->basic.rawdata_l_max, node_num, false, 0, 0);
+	}
+	fts_init_buffer(thr->tx_linearity_max, thr->basic.uniformity_tx_hole, node_num, false, 0, 0);
+	fts_init_buffer(thr->tx_linearity_min, 0, node_num, false, 0, 0);
+	fts_init_buffer(thr->rx_linearity_max, thr->basic.uniformity_rx_hole, node_num, false, 0, 0);
+	fts_init_buffer(thr->rx_linearity_min, 0, node_num, false, 0, 0);
+	fts_init_buffer(thr->scap_cb_off_min, thr->basic.scap_cb_off_min, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_cb_off_max, thr->basic.scap_cb_off_max, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_cb_on_min, thr->basic.scap_cb_on_min, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_cb_on_max, thr->basic.scap_cb_on_max, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_cb_hi_min, thr->basic.scap_cb_hi_min, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_cb_hi_max, thr->basic.scap_cb_hi_max, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_cb_hov_min, thr->basic.scap_cb_hov_min, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_cb_hov_max, thr->basic.scap_cb_hov_max, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_rawdata_off_min, thr->basic.scap_rawdata_off_min, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_rawdata_off_max, thr->basic.scap_rawdata_off_max, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_rawdata_on_min, thr->basic.scap_rawdata_on_min, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_rawdata_on_max, thr->basic.scap_rawdata_on_max, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_rawdata_hi_min, thr->basic.scap_rawdata_hi_min, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_rawdata_hi_max, thr->basic.scap_rawdata_hi_max, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_rawdata_hov_min, thr->basic.scap_rawdata_hov_min, sc_num, false, 0, 0);
+	fts_init_buffer(thr->scap_rawdata_hov_max, thr->basic.scap_rawdata_hov_max, sc_num, false, 0, 0);
+	fts_init_buffer(thr->panel_differ_min, thr->basic.panel_differ_min, node_num, false, 0, 0);
+	fts_init_buffer(thr->panel_differ_max, thr->basic.panel_differ_max, node_num, false, 0, 0);
+
+	/* detail threshold */
+	get_detail_threshold("RawData_Min_High_Tx", true, thr->rawdata_h_min, node_num);
+	get_detail_threshold("RawData_Max_High_Tx", true, thr->rawdata_h_max, node_num);
+	if (tdata->func->rawdata2_support) {
+		get_detail_threshold("RawData_Min_Low_Tx", true, thr->rawdata_l_min, node_num);
+		get_detail_threshold("RawData_Max_Low_Tx", true, thr->rawdata_l_max, node_num);
+	}
+	get_detail_threshold("Tx_Linearity_Max_Tx", true, thr->tx_linearity_max, node_num);
+	get_detail_threshold("Rx_Linearity_Max_Tx", true, thr->rx_linearity_max, node_num);
+	get_detail_threshold("ScapCB_OFF_Min_", true, thr->scap_cb_off_min, sc_num);
+	get_detail_threshold("ScapCB_OFF_Max_", true, thr->scap_cb_off_max, sc_num);
+	get_detail_threshold("ScapCB_ON_Min_", true, thr->scap_cb_on_min, sc_num);
+	get_detail_threshold("ScapCB_ON_Max_", true, thr->scap_cb_on_max, sc_num);
+	get_detail_threshold("ScapCB_High_Min_", true, thr->scap_cb_hi_min, sc_num);
+	get_detail_threshold("ScapCB_High_Max_", true, thr->scap_cb_hi_max, sc_num);
+	get_detail_threshold("ScapCB_Hov_Min_", true, thr->scap_cb_hov_min, sc_num);
+	get_detail_threshold("ScapCB_Hov_Max_", true, thr->scap_cb_hov_max, sc_num);
+	get_detail_threshold("ScapRawData_OFF_Min_", true, thr->scap_rawdata_off_min, sc_num);
+	get_detail_threshold("ScapRawData_OFF_Max_", true, thr->scap_rawdata_off_max, sc_num);
+	get_detail_threshold("ScapRawData_ON_Min_", true, thr->scap_rawdata_on_min, sc_num);
+	get_detail_threshold("ScapRawData_ON_Max_", true, thr->scap_rawdata_on_max, sc_num);
+	get_detail_threshold("ScapRawData_High_Min_", true, thr->scap_rawdata_hi_min, sc_num);
+	get_detail_threshold("ScapRawData_High_Max_", true, thr->scap_rawdata_hi_max, sc_num);
+	get_detail_threshold("ScapRawData_Hov_Min_", true, thr->scap_rawdata_hov_min, sc_num);
+	get_detail_threshold("ScapRawData_Hov_Max_", true, thr->scap_rawdata_hov_max, sc_num);
+	get_detail_threshold("Panel_Differ_Min_Tx", true, thr->panel_differ_min, node_num);
+	get_detail_threshold("Panel_Differ_Max_Tx", true, thr->panel_differ_max, node_num);
+
+	return 0;
+}
+
+static void print_thr_mc_sc(void)
+{
+	struct fts_test *tdata = fts_ftest;
+	struct mc_sc_threshold *thr = &tdata->ic.mc_sc.thr;
+
+	if (tdata->ts_data->log_level < 3) {
+		return;
+	}
+
+	FTS_TEST_DBG("rawdata_h_min:%d", thr->basic.rawdata_h_min);
+	FTS_TEST_DBG("rawdata_h_max:%d", thr->basic.rawdata_h_max);
+	FTS_TEST_DBG("rawdata_set_hfreq:%d", thr->basic.rawdata_set_hfreq);
+	FTS_TEST_DBG("rawdata_l_min:%d", thr->basic.rawdata_l_min);
+	FTS_TEST_DBG("rawdata_l_max:%d", thr->basic.rawdata_l_max);
+	FTS_TEST_DBG("rawdata_set_lfreq:%d", thr->basic.rawdata_set_lfreq);
+	FTS_TEST_DBG("uniformity_check_tx:%d", thr->basic.uniformity_check_tx);
+	FTS_TEST_DBG("uniformity_check_rx:%d", thr->basic.uniformity_check_rx);
+	FTS_TEST_DBG("uniformity_check_min_max:%d", thr->basic.uniformity_check_min_max);
+	FTS_TEST_DBG("uniformity_tx_hole:%d", thr->basic.uniformity_tx_hole);
+	FTS_TEST_DBG("uniformity_rx_hole:%d", thr->basic.uniformity_rx_hole);
+	FTS_TEST_DBG("uniformity_min_max_hole:%d", thr->basic.uniformity_min_max_hole);
+	FTS_TEST_DBG("scap_cb_off_min:%d", thr->basic.scap_cb_off_min);
+	FTS_TEST_DBG("scap_cb_off_max:%d", thr->basic.scap_cb_off_max);
+	FTS_TEST_DBG("scap_cb_wp_off_check:%d", thr->basic.scap_cb_wp_off_check);
+	FTS_TEST_DBG("scap_cb_on_min:%d", thr->basic.scap_cb_on_min);
+	FTS_TEST_DBG("scap_cb_on_max:%d", thr->basic.scap_cb_on_max);
+	FTS_TEST_DBG("scap_cb_wp_on_check:%d", thr->basic.scap_cb_wp_on_check);
+	FTS_TEST_DBG("scap_rawdata_off_min:%d", thr->basic.scap_rawdata_off_min);
+	FTS_TEST_DBG("scap_rawdata_off_max:%d", thr->basic.scap_rawdata_off_max);
+	FTS_TEST_DBG("scap_rawdata_wp_off_check:%d", thr->basic.scap_rawdata_wp_off_check);
+	FTS_TEST_DBG("scap_rawdata_on_min:%d", thr->basic.scap_rawdata_on_min);
+	FTS_TEST_DBG("scap_rawdata_on_max:%d", thr->basic.scap_rawdata_on_max);
+	FTS_TEST_DBG("scap_rawdata_wp_on_check:%d", thr->basic.scap_rawdata_wp_on_check);
+	FTS_TEST_DBG("short_cg:%d", thr->basic.short_cg);
+	FTS_TEST_DBG("short_cc:%d", thr->basic.short_cc);
+	FTS_TEST_DBG("panel_differ_min:%d", thr->basic.panel_differ_min);
+	FTS_TEST_DBG("panel_differ_max:%d", thr->basic.panel_differ_max);
+
+	print_buffer(thr->rawdata_h_min, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->rawdata_h_max, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->rawdata_l_min, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->rawdata_l_max, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->tx_linearity_max, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->rx_linearity_max, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->scap_cb_off_min, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_cb_off_max, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_cb_on_min, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_cb_on_max, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_cb_hi_min, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_cb_hi_max, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_cb_hov_min, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_cb_hov_max, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_rawdata_off_min, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_rawdata_off_max, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_rawdata_on_min, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_rawdata_on_max, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_rawdata_hi_min, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_rawdata_hi_max, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_rawdata_hov_min, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->scap_rawdata_hov_max, tdata->sc_node.node_num, tdata->sc_node.rx_num);
+	print_buffer(thr->panel_differ_min, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->panel_differ_max, tdata->node.node_num, tdata->node.rx_num);
+}
+
+static int ini_init_test_mc_sc(void)
+{
+	int ret = 0;
+
+	ret = get_test_item_mc_sc();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get mc_sc test item fail\n");
+		return ret;
+	}
+
+	ret = get_test_threshold_mc_sc();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get mc_sc threshold fail\n");
+		return ret;
+	}
+
+	print_thr_mc_sc();
+	return 0;
+}
+
+/* sc */
+static int get_test_item_sc(void)
+{
+	int ret = 0;
+	char item_name[][MAX_KEYWORD_NAME_LEN] = TEST_ITEM_SC;
+	int length = sizeof(item_name) / MAX_KEYWORD_NAME_LEN;
+	int item_val = 0;
+
+	ret = get_test_item(item_name, length, &item_val);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get test item fail\n");
+		return ret;
+	}
+
+	fts_ftest->ic.sc.u.tmp = item_val;
+	return 0;
+}
+
+static char bthr_name_sc[][MAX_KEYWORD_NAME_LEN] = BASIC_THRESHOLD_SC;
+static int get_test_threshold_sc(void)
+{
+	int ret = 0;
+	int length = sizeof(bthr_name_sc) / MAX_KEYWORD_NAME_LEN;
+	struct fts_test *tdata = fts_ftest;
+	struct sc_threshold *thr = &tdata->ic.sc.thr;
+	int node_num = tdata->node.node_num;
+
+	tdata->basic_thr_count = sizeof(struct sc_threshold_b) / sizeof(int);
+	/* get standard basic threshold */
+	ret = get_basic_threshold(bthr_name_sc, length, (int *)&thr->basic);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get basic thr fail\n");
+		return ret;
+	}
+
+	/* basic special set by ic */
+	if (tdata->func->param_init) {
+		ret = tdata->func->param_init();
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("special basic thr init fail\n");
+			return ret;
+		}
+	}
+
+	/* init buffer */
+	fts_init_buffer(thr->rawdata_min, thr->basic.rawdata_min, node_num, false, 0, 0);
+	fts_init_buffer(thr->rawdata_max, thr->basic.rawdata_max, node_num, false, 0, 0);
+	fts_init_buffer(thr->cb_min, thr->basic.cb_min, node_num, false, 0, 0);
+	fts_init_buffer(thr->cb_max, thr->basic.cb_max, node_num, false, 0, 0);
+	fts_init_buffer(thr->dcb_sort, 0, node_num, false, 0, 0);
+	fts_init_buffer(thr->dcb_base, thr->basic.dcb_base, node_num, false, 0, 0);
+
+	/* detail threshold */
+	get_detail_threshold("RawDataTest_Min", false, thr->rawdata_min, node_num);
+	get_detail_threshold("RawDataTest_Max", false, thr->rawdata_max, node_num);
+	get_detail_threshold("CbTest_Min", false, thr->cb_min, node_num);
+	get_detail_threshold("CbTest_Max", false, thr->cb_max, node_num);
+	get_detail_threshold("DeltaCxTest_Sort", false, thr->dcb_sort, node_num);
+	get_detail_threshold("DeltaCbTest_Base", false, thr->dcb_base, node_num);
+
+	return 0;
+}
+
+static void print_thr_sc(void)
+{
+	struct fts_test *tdata = fts_ftest;
+	struct sc_threshold *thr = &tdata->ic.sc.thr;
+
+	if (tdata->ts_data->log_level < 3) {
+		return;
+	}
+
+	FTS_TEST_DBG("rawdata_min:%d", thr->basic.rawdata_min);
+	FTS_TEST_DBG("rawdata_max:%d", thr->basic.rawdata_max);
+	FTS_TEST_DBG("cb_min:%d", thr->basic.cb_min);
+	FTS_TEST_DBG("cb_max:%d", thr->basic.cb_max);
+	FTS_TEST_DBG("dcb_differ_max:%d", thr->basic.dcb_differ_max);
+	FTS_TEST_DBG("dcb_key_check:%d", thr->basic.dcb_key_check);
+	FTS_TEST_DBG("dcb_key_differ_max:%d", thr->basic.dcb_key_differ_max);
+	FTS_TEST_DBG("dcb_ds1:%d", thr->basic.dcb_ds1);
+	FTS_TEST_DBG("dcb_ds2:%d", thr->basic.dcb_ds2);
+	FTS_TEST_DBG("dcb_ds3:%d", thr->basic.dcb_ds3);
+	FTS_TEST_DBG("dcb_ds4:%d", thr->basic.dcb_ds4);
+	FTS_TEST_DBG("dcb_ds5:%d", thr->basic.dcb_ds5);
+	FTS_TEST_DBG("dcb_ds6:%d", thr->basic.dcb_ds6);
+	FTS_TEST_DBG("dcb_critical_check:%d", thr->basic.dcb_critical_check);
+	FTS_TEST_DBG("dcb_cs1:%d", thr->basic.dcb_cs1);
+	FTS_TEST_DBG("dcb_cs2:%d", thr->basic.dcb_cs2);
+	FTS_TEST_DBG("dcb_cs3:%d", thr->basic.dcb_cs3);
+	FTS_TEST_DBG("dcb_cs4:%d", thr->basic.dcb_cs4);
+	FTS_TEST_DBG("dcb_cs5:%d", thr->basic.dcb_cs5);
+	FTS_TEST_DBG("dcb_cs6:%d", thr->basic.dcb_cs6);
+
+	print_buffer(thr->rawdata_min, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->rawdata_max, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->cb_min, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->cb_max, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->dcb_sort, tdata->node.node_num, tdata->node.rx_num);
+	print_buffer(thr->dcb_base, tdata->node.node_num, tdata->node.rx_num);
+}
+
+static int ini_init_test_sc(void)
+{
+	int ret = 0;
+
+	ret = get_test_item_sc();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get sc test item fail\n");
+		return ret;
+	}
+
+	ret = get_test_threshold_sc();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get sc threshold fail\n");
+		return ret;
+	}
+
+	print_thr_sc();
+	return 0;
+}
+
+static u32 ini_get_ic_code(char *ic_name)
+{
+	int i = 0;
+	int type_size = 0;
+	int ini_icname_len = 0;
+	int ic_types_len = 0;
+
+	ini_icname_len = strlen(ic_name);
+	type_size = sizeof(ic_types) / sizeof(ic_types[0]);
+	for (i = 0; i < type_size; i++) {
+		ic_types_len = strlen(ic_name);
+		if (ini_icname_len == ic_types_len) {
+			if (0 == strncmp(ic_name, ic_types[i].ic_name, ic_types_len))
+				return ic_types[i].ic_type;
+		}
+	}
+
+	FTS_TEST_ERROR("no IC type match");
+	return 0;
+}
+
+
+static void ini_init_interface(struct ini_data *ini)
+{
+	char str[MAX_KEYWORD_VALUE_LEN] = { 0 };
+	u32 value = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	/* IC type */
+	ini_get_string_value("Interface", "IC_Type", str);
+	snprintf(ini->ic_name, MAX_IC_NAME_LEN, "%s", str);
+
+	value = ini_get_ic_code(str);
+	ini->ic_code = value;
+	FTS_TEST_INFO("ic name:%s, ic code:%x", ini->ic_name, ini->ic_code);
+
+	if (IC_HW_MC_SC == tdata->func->hwtype) {
+		get_value_interface("Normalize_Type", &value);
+		tdata->normalize = (u8)value;
+		FTS_TEST_DBG("normalize:%d", tdata->normalize);
+	}
+}
+
+static int ini_init_test(struct ini_data *ini)
+{
+	int ret = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	/* interface init */
+	ini_init_interface(ini);
+
+	/* node valid */
+	ret = init_node_valid();
+	if (ret < 0) {
+		FTS_TEST_ERROR("init node valid fail");
+		return ret;
+	}
+
+	switch (tdata->func->hwtype) {
+	case IC_HW_INCELL:
+		ret = ini_init_test_incell();
+		break;
+	case IC_HW_MC_SC:
+		ret = ini_init_test_mc_sc();
+		break;
+	case IC_HW_SC:
+		ret = ini_init_test_sc();
+		break;
+	default:
+		FTS_TEST_SAVE_ERR("test ic type(%d) fail\n", tdata->func->hwtype);
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+/*
+ * fts_test_get_testparam_from_ini - get test parameters from ini
+ *
+ * read, parse the configuration file, initialize the test variable
+ *
+ * return 0 if succuss, else errro code
+ */
+int fts_test_get_testparam_from_ini(char *config_name)
+{
+	int ret = 0;
+	struct ini_data *ini = &fts_ftest->ini;
+
+	ret = fts_test_get_ini_via_request_firmware(ini, config_name);
+	if (ret != 0) {
+		FTS_TEST_ERROR("get ini(default) fail");
+		goto get_ini_err;
+	}
+
+	ini->keyword_num_total = 0;
+	ini->section_num = 0;
+
+	ini->tmp = vmalloc(sizeof(struct ini_keyword) * MAX_KEYWORD_NUM);
+	if (NULL == ini->tmp) {
+		FTS_TEST_ERROR("malloc memory for ini tmp fail");
+		ret = -ENOMEM;
+		goto get_ini_err;
+	}
+	memset(ini->tmp, 0, sizeof(struct ini_keyword) * MAX_KEYWORD_NUM);
+
+	/* parse ini data to get keyword name&value */
+	ret = ini_init_inidata(ini);
+	if (ret < 0) {
+		FTS_TEST_ERROR("ini_init_inidata fail");
+		goto get_ini_err;
+	}
+
+	/* parse threshold & test item */
+	ret = ini_init_test(ini);
+	if (ret < 0) {
+		FTS_TEST_ERROR("ini init fail");
+		goto get_ini_err;
+	}
+
+	ret = 0;
+get_ini_err:
+	if (ini->tmp) {
+		vfree(ini->tmp);
+		ini->tmp = NULL;
+	}
+
+	if (ini->data) {
+		vfree(ini->data);
+		ini->data = NULL;
+	}
+
+	return ret;
+}
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test_ini.h b/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test_ini.h
new file mode 100755
index 00000000000000..7a68b9a9ffa645
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_test/focaltech_test_ini.h
@@ -0,0 +1,146 @@
+/************************************************************************
+* Copyright (c) 2012-2020, Focaltech Systems (R)��All Rights Reserved.
+* Copyright (C) 2021-2022 XiaoMi, Inc.
+*
+* File Name: focaltech_test_ini.h
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2016-08-01
+*
+* Abstract: parsing function of INI file
+*
+************************************************************************/
+#ifndef _INI_H
+#define _INI_H
+/*****************************************************************************
+* Private constant and macro definitions using #define
+*****************************************************************************/
+#define MAX_KEYWORD_NUM                         (1000)
+#define MAX_KEYWORD_NAME_LEN                    (50)
+#define MAX_KEYWORD_VALUE_LEN                   (512)
+#define MAX_KEYWORD_VALUE_ONE_LEN               (16)
+#define MAX_INI_LINE_LEN        (MAX_KEYWORD_NAME_LEN + MAX_KEYWORD_VALUE_LEN)
+#define MAX_INI_SECTION_NUM                     (20)
+#define MAX_IC_NAME_LEN                         (32)
+#define MAX_TEST_ITEM                           (20)
+#define IC_CODE_OFFSET                          (16)
+
+/*****************************************************************************
+* enumerations, structures and unions
+*****************************************************************************/
+struct ini_ic_type {
+	char ic_name[MAX_IC_NAME_LEN];
+	u32 ic_type;
+};
+
+enum line_type {
+	LINE_SECTION = 1,
+	LINE_KEYWORD = 2 ,
+	LINE_OTHER = 3,
+};
+
+struct ini_keyword {
+	char name[MAX_KEYWORD_NAME_LEN];
+	char value[MAX_KEYWORD_VALUE_LEN];
+};
+
+struct ini_section {
+	char name[MAX_KEYWORD_NAME_LEN];
+	int keyword_num;
+	/* point to ini.tmp, don't need free */
+	struct ini_keyword *keyword;
+};
+
+struct ini_data {
+	char *data;
+	int length;
+	int keyword_num_total;
+	int section_num;
+	struct ini_section section[MAX_INI_SECTION_NUM];
+	struct ini_keyword *tmp;
+	char ic_name[MAX_IC_NAME_LEN];
+	u32 ic_code;
+};
+
+#define TEST_ITEM_INCELL            { \
+	"SHORT_CIRCUIT_TEST", \
+	"OPEN_TEST", \
+	"CB_TEST", \
+	"RAWDATA_TEST", \
+	"LCD_NOISE_TEST", \
+	"KEY_SHORT_TEST", \
+	"MUX_OPEN_TEST", \
+}
+
+#define BASIC_THRESHOLD_INCELL      { \
+	"ShortCircuit_ResMin", "ShortCircuit_VkResMin", \
+	"OpenTest_CBMin", "OpenTest_Check_K1", "OpenTest_K1Threshold", "OpenTest_Check_K2", "OpenTest_K2Threshold", \
+	"CBTest_Min", "CBTest_Max", \
+	"CBTest_VKey_Check", "CBTest_Min_Vkey", "CBTest_Max_Vkey", \
+	"RawDataTest_Min", "RawDataTest_Max", \
+	"RawDataTest_VKey_Check", "RawDataTest_Min_VKey", "RawDataTest_Max_VKey", \
+	"LCD_NoiseTest_Frame", "LCD_NoiseTest_Coefficient", "LCD_NoiseTest_Coefficient_key", \
+}
+
+
+#define TEST_ITEM_MC_SC             { \
+	"RAWDATA_TEST", \
+	"UNIFORMITY_TEST", \
+	"SCAP_CB_TEST", \
+	"SCAP_RAWDATA_TEST", \
+	"WEAK_SHORT_CIRCUIT_TEST", \
+	"PANEL_DIFFER_TEST", \
+}
+
+#define BASIC_THRESHOLD_MC_SC       { \
+	"RawDataTest_High_Min", "RawDataTest_High_Max", "RawDataTest_HighFreq", \
+	"RawDataTest_Low_Min", "RawDataTest_Low_Max", "RawDataTest_LowFreq", \
+	"UniformityTest_Check_Tx", "UniformityTest_Check_Rx","UniformityTest_Check_MinMax", \
+	"UniformityTest_Tx_Hole", "UniformityTest_Rx_Hole", "UniformityTest_MinMax_Hole", \
+	"SCapCbTest_OFF_Min", "SCapCbTest_OFF_Max", "ScapCBTest_SetWaterproof_OFF", \
+	"SCapCbTest_ON_Min", "SCapCbTest_ON_Max", "ScapCBTest_SetWaterproof_ON", \
+	"SCapRawDataTest_OFF_Min", "SCapRawDataTest_OFF_Max", "SCapRawDataTest_SetWaterproof_OFF", \
+	"SCapRawDataTest_ON_Min", "SCapRawDataTest_ON_Max", "SCapRawDataTest_SetWaterproof_ON", \
+	"WeakShortTest_CG", "WeakShortTest_CC", \
+	"PanelDifferTest_Min", "PanelDifferTest_Max", \
+	"SCapCbTest_High_Min", "SCapCbTest_High_Max", "ScapCBTest_SetHighSensitivity", \
+	"SCapRawDataTest_High_Min", "SCapRawDataTest_High_Max", "SCapRawDataTest_SetHighSensitivity", \
+	"SCapCbTest_Hov_Min", "SCapCbTest_Hov_Max", "ScapCBTest_SetHov", \
+	"SCapRawDataTest_Hov_Min", "SCapRawDataTest_Hov_Max", "SCapRawDataTest_SetHov", \
+}
+
+#define TEST_ITEM_SC                { \
+	"RAWDATA_TEST", \
+	"CB_TEST", \
+	"DELTA_CB_TEST", \
+	"WEAK_SHORT_TEST", \
+}
+
+#define BASIC_THRESHOLD_SC          { \
+	"RawDataTest_Min", "RawDataTest_Max", \
+	"CbTest_Min", "CbTest_Max", \
+	"DeltaCbTest_Base", "DeltaCbTest_Differ_Max", \
+	"DeltaCbTest_Include_Key_Test", "DeltaCbTest_Key_Differ_Max", \
+	"DeltaCbTest_Deviation_S1", "DeltaCbTest_Deviation_S2", "DeltaCbTest_Deviation_S3", \
+	"DeltaCbTest_Deviation_S4", "DeltaCbTest_Deviation_S5", "DeltaCbTest_Deviation_S6", \
+	"DeltaCbTest_Set_Critical", "DeltaCbTest_Critical_S1", "DeltaCbTest_Critical_S2", \
+	"DeltaCbTest_Critical_S3", "DeltaCbTest_Critical_S4", \
+	"DeltaCbTest_Critical_S5", "DeltaCbTest_Critical_S6", \
+}
+
+/*****************************************************************************
+* Global variable or extern global variabls/functions
+*****************************************************************************/
+int fts_test_get_testparam_from_ini(char *config_name);
+int get_keyword_value(char *section, char *name, int *value);
+
+#define get_value_interface(name, value) \
+	get_keyword_value("Interface", name, value)
+#define get_value_basic(name, value) \
+	get_keyword_value("Basic_Threshold", name, value)
+#define get_value_detail(name, value) \
+	get_keyword_value("SpecialSet", name, value)
+#define get_value_testitem(name, value) \
+	get_keyword_value("TestItem", name, value)
+#endif /* _INI_H */
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_test/supported_ic/Makefile b/drivers/input/touchscreen/ft8756_spi/focaltech_test/supported_ic/Makefile
new file mode 100755
index 00000000000000..8ab065fad8a6e3
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_test/supported_ic/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_TOUCHSCREEN_FTS) += focaltech_test_ft3658u.o
\ No newline at end of file
diff --git a/drivers/input/touchscreen/ft8756_spi/focaltech_test/supported_ic/focaltech_test_ft3658u.c b/drivers/input/touchscreen/ft8756_spi/focaltech_test/supported_ic/focaltech_test_ft3658u.c
new file mode 100755
index 00000000000000..145bc734545abc
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/focaltech_test/supported_ic/focaltech_test_ft3658u.c
@@ -0,0 +1,1517 @@
+/************************************************************************
+* Copyright (c) 2012-2020, Focaltech Systems (R), All Rights Reserved.
+* Copyright (C) 2021-2022 XiaoMi, Inc.
+*
+* File Name: Focaltech_test_ft5652.c
+*
+* Author: Focaltech Driver Team
+*
+* Created: 2018-03-08
+*
+* Abstract:
+*
+************************************************************************/
+
+/*****************************************************************************
+* included header files
+*****************************************************************************/
+#include "../focaltech_test.h"
+#if FTS_TEST_EN
+/*****************************************************************************
+* private constant and macro definitions using #define
+*****************************************************************************/
+static int short_test_ch_to_all(
+	struct fts_test *tdata, int *adc, u8 *ab_ch, bool *result)
+{
+	int ret = 0;
+	int i = 0;
+	int short_res[SC_NUM_MAX + 1] = { 0 };
+	int min_cc = tdata->ic.mc_sc.thr.basic.short_cc;
+	int ch_num = tdata->sc_node.tx_num + tdata->sc_node.rx_num;
+	int byte_num = 0;
+	int code = 0;
+	int code1 = 0;
+	int offset = 0;
+	int denominator = 0;
+	int numerator = 0;
+	u8 ab_ch_num = 0;
+
+	FTS_TEST_DBG("short test:channel to all other\n");
+	/* choose resistor_level */
+	ret = fts_test_write_reg(FACTROY_REG_SHORT2_RES_LEVEL, 1);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("write short resistor level fail\n");
+		return ret;
+	}
+
+	/*get adc data*/
+	byte_num = (ch_num + 1) * 2;
+	ret = short_get_adc_data_mc(TEST_RETVAL_AA, byte_num, &adc[0], \
+								FACTROY_REG_SHORT2_CA);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get weak short data fail,ret:%d\n", ret);
+		return ret;
+	}
+	//tdata->code1 = adc[ch_num];
+	tdata->code1 = 1407;
+
+	/*get resistor*/
+	code1 = tdata->code1;
+	offset = tdata->offset;
+	for (i = 0; i < ch_num; i++) {
+		code = adc[i];
+		denominator = code1 - code + offset;
+		if (denominator == 0) {
+			short_res[i] = min_cc;
+		} else {
+			numerator = (code - offset + 395) * 112;
+			short_res[i] = fts_abs(numerator / denominator - 3);
+		}
+
+		if (short_res[i] < min_cc) {
+			ab_ch_num++;
+			ab_ch[ab_ch_num] = i + 1;
+		}
+	}
+
+	if (ab_ch_num) {
+		FTS_TEST_SAVE_INFO("Offset:%d, Code1:%d\n", offset, code1);
+		print_buffer(adc, ch_num + 1, ch_num + 1);
+		print_buffer(short_res, ch_num, ch_num);
+		ab_ch[0] = ab_ch_num;
+		printk("[FTS_TS]ab_ch:");
+		for (i = 0; i < ab_ch_num + 1; i++) {
+			printk("%2d ", ab_ch[i]);
+		}
+		printk("\n");
+		*result = false;
+	} else {
+		*result = true;
+	}
+
+	return 0;
+}
+
+static int short_test_ch_to_gnd(
+	struct fts_test *tdata, int *adc, u8 *ab_ch, bool *result)
+{
+	int ret = 0;
+	int i = 0;
+	int short_res[SC_NUM_MAX + 1] = { 0 };
+	int min_cg = tdata->ic.mc_sc.thr.basic.short_cg;
+	int tx_num = tdata->sc_node.tx_num;
+	int byte_num = 0;
+	int code = 0;
+	int code1 = 0;
+	int offset = 0;
+	int denominator = 0;
+	int numerator = 0;
+	u8 ab_ch_num = 0;
+	bool is_cg_short = false;
+
+	FTS_TEST_DBG("short test:channel to gnd\n");
+	ab_ch_num = ab_ch[0];
+	ret = fts_test_write(FACTROY_REG_SHORT2_AB_CH, ab_ch, ab_ch_num + 1);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("write abnormal channel fail\n");
+		return ret;
+	}
+
+	/* choose resistor_level */
+	ret = fts_test_write_reg(FACTROY_REG_SHORT2_RES_LEVEL, 1);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("write short resistor level fail\n");
+		return ret;
+	}
+
+	/*get adc data*/
+	byte_num = ab_ch_num * 2;
+	ret = short_get_adc_data_mc(TEST_RETVAL_AA, byte_num, &adc[0], \
+								FACTROY_REG_SHORT2_CG);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get weak short data fail,ret:%d\n", ret);
+		return ret;
+	}
+
+	/*get resistor*/
+	*result = true;
+	code1 = tdata->code1;
+	offset = tdata->offset;
+	for (i = 0; i < ab_ch_num; i++) {
+		code = adc[i];
+		denominator = code1 - code + offset;
+		if (denominator == 0) {
+			short_res[i] = min_cg;
+		} else {
+			numerator = (code - offset + 395) * 112;
+			short_res[i] = fts_abs(numerator / denominator - 3);
+		}
+
+		if (short_res[i] < min_cg) {
+			*result = false;
+			if (!is_cg_short) {
+				FTS_TEST_SAVE_INFO("\nGND Short:\n");
+				is_cg_short = true;
+			}
+
+			if (ab_ch[i + 1] <= tx_num) {
+				FTS_TEST_SAVE_INFO("Tx%d with GND:", ab_ch[i + 1]);
+			} else {
+				FTS_TEST_SAVE_INFO( "Rx%d with GND:", (ab_ch[i + 1] - tx_num));
+			}
+			FTS_TEST_SAVE_INFO("%d(K), ADC:%d\n", short_res[i], code);
+		}
+	}
+
+	return 0;
+}
+
+static int short_test_ch_to_ch(
+	struct fts_test *tdata, int *adc, u8 *ab_ch, bool *result)
+{
+	int ret = 0;
+	int i = 0;
+	int j = 0;
+	int adc_cnt = 0;
+	int short_res[SC_NUM_MAX + 1] = { 0 };
+	int min_cc = tdata->ic.mc_sc.thr.basic.short_cc;
+	int tx_num = tdata->sc_node.tx_num;
+	int ch_num = tdata->sc_node.tx_num + tdata->sc_node.rx_num;
+	int byte_num = 0;
+	int tmp_num = 0;
+	int code = 0;
+	int code1 = 0;
+	int offset = 0;
+	int denominator = 0;
+	int numerator = 0;
+	u8 ab_ch_num = 0;
+	bool is_cc_short = false;
+
+	FTS_TEST_DBG("short test:channel to channel\n");
+	ab_ch_num = ab_ch[0];
+	if (ab_ch_num < 2) {
+		FTS_TEST_DBG("abnormal channel number<2, not run ch_ch test");
+		return ret;
+	}
+
+	ret = fts_test_write(FACTROY_REG_SHORT2_AB_CH, ab_ch, ab_ch_num + 1);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("write abnormal channel fail\n");
+		return ret;
+	}
+
+	/* choose resistor_level */
+	ret = fts_test_write_reg(FACTROY_REG_SHORT2_RES_LEVEL, 1);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("write short resistor level fail\n");
+		return ret;
+	}
+
+	/*get adc data*/
+	/*channel to channel: num * (num - 1) / 2, max. node_num*/
+	tmp_num = ab_ch_num * (ab_ch_num - 1) / 2;
+	tmp_num = (tmp_num > ch_num) ? ch_num : tmp_num;
+	byte_num = tmp_num * 2;
+	ret = short_get_adc_data_mc(TEST_RETVAL_AA, byte_num, &adc[0], \
+								FACTROY_REG_SHORT2_CC);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get weak short data fail,ret:%d\n", ret);
+		return ret;
+	}
+
+	/*get resistor*/
+	*result = true;
+	code1 = tdata->code1;
+	offset = tdata->offset;
+	for (i = 0; i < ab_ch_num; i++) {
+		for (j = i + 1; j < ab_ch_num; j++) {
+			if (adc_cnt >= tmp_num)
+				break;
+			code = adc[adc_cnt];
+			denominator = code1 - code + offset;
+			if (denominator == 0) {
+				short_res[adc_cnt] = min_cc;
+			} else {
+				numerator = (code - offset + 395) * 112;
+				short_res[adc_cnt] = fts_abs(numerator / denominator - 3);
+			}
+
+			if (short_res[adc_cnt] < min_cc) {
+				*result = false;
+				if (!is_cc_short) {
+					FTS_TEST_SAVE_INFO("\nMutual Short:\n");
+					is_cc_short = true;
+				}
+
+				if (ab_ch[i + 1] <= tx_num) {
+					FTS_TEST_SAVE_INFO("Tx%d with", (ab_ch[i + 1]));
+				} else {
+					FTS_TEST_SAVE_INFO("Rx%d with", (ab_ch[i + 1] - tx_num));
+				}
+
+				if (ab_ch[j + 1] <= tx_num) {
+					FTS_TEST_SAVE_INFO(" Tx%d", (ab_ch[j + 1] ) );
+				} else {
+					FTS_TEST_SAVE_INFO(" Rx%d", (ab_ch[j + 1] - tx_num));
+				}
+				FTS_TEST_SAVE_INFO(":%d(K), ADC:%d\n",
+								   short_res[adc_cnt], code);
+			}
+			adc_cnt++;
+		}
+	}
+
+	return 0;
+}
+
+static int ft5652_rawdata_test(struct fts_test *tdata, bool *test_result)
+{
+	int ret = 0;
+	int i = 0;
+	int *rawdata = NULL;
+	u8 fre = 0;
+	u8 data_sel = 0;
+	u8 data_type = 0;
+	bool result = false;
+	struct mc_sc_threshold *thr = &tdata->ic.mc_sc.thr;
+
+	FTS_TEST_FUNC_ENTER();
+	FTS_TEST_SAVE_INFO("\n============ Test Item: rawdata test\n");
+	memset(tdata->buffer, 0, tdata->buffer_length);
+	rawdata = tdata->buffer;
+
+	if (!thr->rawdata_h_min || !thr->rawdata_h_max) {
+		FTS_TEST_SAVE_ERR("rawdata_h_min/max is null\n");
+		ret = -EINVAL;
+		goto test_err;
+	}
+
+	ret = enter_factory_mode();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("failed to enter factory mode,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* rawdata test in mapping mode */
+	ret = mapping_switch(MAPPING);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("switch mapping fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* save origin value */
+	ret = fts_test_read_reg(FACTORY_REG_FRE_LIST, &fre);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x0A fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_DATA_TYPE, &data_type);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x5B fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_DATA_SELECT, &data_sel);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x06 error,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* set frequecy high */
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, 0x81);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set frequecy fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_TYPE, 0x01);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set raw type fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/* select rawdata */
+	ret = fts_test_write_reg(FACTORY_REG_DATA_SELECT, 0x00);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set fir fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/*********************GET RAWDATA*********************/
+	for (i = 0; i < 3; i++) {
+		/* lost 3 frames, in order to obtain stable data */
+		ret = get_rawdata(rawdata);
+	}
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get rawdata fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/* show test data */
+	show_data(rawdata, false);
+
+	/* compare */
+	result = compare_array(rawdata,
+						   thr->rawdata_h_min,
+						   thr->rawdata_h_max,
+						   false);
+
+restore_reg:
+	/* set the origin value */
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, fre);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0x0A fail,ret=%d\n", ret);
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_TYPE, data_type);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set raw type fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_SELECT, data_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0x06 fail,ret=%d\n", ret);
+	}
+
+test_err:
+	if (result) {
+		*test_result = true;
+		FTS_TEST_SAVE_INFO("------ rawdata test PASS\n");
+	} else {
+		*test_result = false;
+		FTS_TEST_SAVE_INFO("------ rawdata test NG\n");
+	}
+
+	/* save test data */
+	fts_test_save_data("Rawdata Test", CODE_M_RAWDATA_TEST,
+					   rawdata, 0, false, false, *test_result);
+
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static int ft5652_uniformity_test(struct fts_test *tdata, bool *test_result)
+{
+	int ret = 0;
+	int index = 0;
+	int row = 0;
+	int col = 1;
+	int i = 0;
+	int deviation = 0;
+	int max = 0;
+	int min = 0;
+	int uniform = 0;
+	int *rawdata = NULL;
+	int *rawdata_linearity = NULL;
+	int *rl_tmp = NULL;
+	int rl_cnt = 0;
+	int offset = 0;
+	int offset2 = 0;
+	int tx_num = 0;
+	int rx_num = 0;
+	u8 fre = 0;
+	u8 data_sel = 0;
+	u8 data_type = 0;
+	struct mc_sc_threshold *thr = &fts_ftest->ic.mc_sc.thr;
+	bool result = false;
+	bool result2 = false;
+	bool result3 = false;
+
+	FTS_TEST_FUNC_ENTER();
+	FTS_TEST_SAVE_INFO("\n============ Test Item: rawdata unfiormity test\n");
+	memset(tdata->buffer, 0, tdata->buffer_length);
+	rawdata = tdata->buffer;
+	tx_num = tdata->node.tx_num;
+	rx_num = tdata->node.rx_num;
+
+	if (!thr->tx_linearity_max || !thr->rx_linearity_max
+		|| !tdata->node_valid) {
+		FTS_TEST_SAVE_ERR("tx/rx_lmax/node_valid is null\n");
+		ret = -EINVAL;
+		goto test_err;
+	}
+
+	ret = enter_factory_mode();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("failed to enter factory mode,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	rawdata_linearity = fts_malloc(tdata->node.node_num * 2 * sizeof(int));
+	if (!rawdata_linearity) {
+		FTS_TEST_SAVE_ERR("rawdata_linearity buffer malloc fail");
+		ret = -ENOMEM;
+		goto test_err;
+	}
+
+	/* rawdata unfiormity test in mapping mode */
+	ret = mapping_switch(MAPPING);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("failed to switch_to_mapping,ret=%d", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_FRE_LIST, &fre);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x0A fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_DATA_TYPE, &data_type);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x5B fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_DATA_SELECT, &data_sel);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x06 fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* set frequecy high */
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, 0x81);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set frequecy fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_TYPE, 0x01);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set raw type fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/* select rawdata */
+	ret = fts_test_write_reg(FACTORY_REG_DATA_SELECT, 0x00);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set fir fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/* change register value before,need to lose 3 frame data */
+	for (index = 0; index < 3; ++index) {
+		ret = get_rawdata(rawdata);
+	}
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get rawdata fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+	print_buffer(rawdata, tdata->node.node_num, tdata->node.rx_num);
+
+	result = true;
+	if (thr->basic.uniformity_check_tx) {
+		FTS_TEST_SAVE_INFO("Check Tx Linearity\n");
+		rl_tmp = rawdata_linearity + rl_cnt;
+		for (row = 0; row < tx_num; row++) {
+			for (col = 1; col <  rx_num; col++) {
+				offset = row * rx_num + col;
+				offset2 = row * rx_num + col - 1;
+				deviation = abs( rawdata[offset] - rawdata[offset2]);
+				max = max(rawdata[offset], rawdata[offset2]);
+				max = max ? max : 1;
+				rl_tmp[offset] = 100 * deviation / max;
+			}
+		}
+		/*show data in result.txt*/
+		FTS_TEST_SAVE_INFO(" Tx Linearity:\n");
+		show_data(rl_tmp, false);
+		FTS_TEST_SAVE_INFO("\n" );
+
+		/* compare */
+		result = compare_array(rl_tmp,
+							   thr->tx_linearity_min,
+							   thr->tx_linearity_max,
+							   false);
+
+		rl_cnt += tdata->node.node_num;
+	}
+
+	result2 = true;
+	if (thr->basic.uniformity_check_rx) {
+		FTS_TEST_SAVE_INFO("Check Rx Linearity\n");
+		rl_tmp = rawdata_linearity + rl_cnt;
+		for (row = 1; row < tx_num; row++) {
+			for (col = 0; col < rx_num; col++) {
+				offset = row * rx_num + col;
+				offset2 = (row - 1) * rx_num + col;
+				deviation = abs(rawdata[offset] - rawdata[offset2]);
+				max = max(rawdata[offset], rawdata[offset2]);
+				max = max ? max : 1;
+				rl_tmp[offset] = 100 * deviation / max;
+			}
+		}
+
+		FTS_TEST_SAVE_INFO("Rx Linearity:\n");
+		show_data(rl_tmp, false);
+		FTS_TEST_SAVE_INFO("\n");
+
+		/* compare */
+		result2 = compare_array(rl_tmp,
+								thr->rx_linearity_min,
+								thr->rx_linearity_max,
+								false);
+		rl_cnt += tdata->node.node_num;
+	}
+
+	result3 = true;
+	if (thr->basic.uniformity_check_min_max) {
+		FTS_TEST_SAVE_INFO("Check Min/Max\n") ;
+		min = 100000;
+		max = -100000;
+		for (i = 0; i < tdata->node.node_num; i++) {
+			if (0 == tdata->node_valid[i])
+				continue;
+			min = min(min, rawdata[i]);
+			max = max(max, rawdata[i]);
+		}
+		max = !max ? 1 : max;
+		uniform = 100 * abs(min) / abs(max);
+
+		FTS_TEST_SAVE_INFO("min:%d, max:%d, get value of min/max:%d\n",
+						   min, max, uniform);
+		if (uniform < thr->basic.uniformity_min_max_hole) {
+			result3 = false;
+			FTS_TEST_SAVE_ERR("min_max out of range, set value: %d\n",
+							  thr->basic.uniformity_min_max_hole);
+		}
+	}
+
+restore_reg:
+	/* set the origin value */
+	ret = fts_test_write_reg(FACTORY_REG_DATA_SELECT, data_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0x06 fail,ret=%d\n", ret);
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_TYPE, data_type);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set raw type fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, fre);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0x0A fail,ret=%d\n", ret);
+	}
+
+test_err:
+	if (result && result2 && result3) {
+		*test_result = true;
+		FTS_TEST_SAVE_INFO("uniformity test is OK\n");
+	} else {
+		*test_result = false;
+		FTS_TEST_SAVE_ERR("uniformity test is NG\n");
+	}
+
+	fts_test_save_data("Rawdata Uniformity Test",
+					   CODE_M_RAWDATA_UNIFORMITY_TEST, rawdata_linearity,
+					   tdata->node.node_num * 2, false, false, *test_result);
+
+	fts_free(rawdata_linearity);
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static int ft5652_scap_cb_test(struct fts_test *tdata, bool *test_result)
+{
+	int ret = 0;
+	int i = 0;
+	u8 wc_sel = 0;
+	u8 sc_mode = 0;
+	u8 hc_sel = 0;
+	u8 hov_high = 0;
+	int byte_num = 0;
+	bool tmp_result = false;
+	bool tmp2_result = false;
+	bool tmp3_result = false;
+	bool tmp4_result = false;
+	bool fw_wp_check = false;
+	bool tx_check = false;
+	bool rx_check = false;
+	int *scap_cb = NULL;
+	int *scb_tmp = NULL;
+	int scb_cnt = 0;
+	struct mc_sc_threshold *thr = &tdata->ic.mc_sc.thr;
+
+	FTS_TEST_FUNC_ENTER();
+	FTS_TEST_SAVE_INFO("\n============ Test Item: Scap CB Test\n");
+	memset(tdata->buffer, 0, tdata->buffer_length);
+	scap_cb = tdata->buffer;
+	byte_num = tdata->sc_node.node_num * 2;
+
+	if (tdata->sc_node.node_num * 4 > tdata->buffer_length) {
+		FTS_TEST_SAVE_ERR("scap cb num(%d) > buffer length(%d)",
+						  tdata->sc_node.node_num * 4,
+						  tdata->buffer_length);
+		ret = -EINVAL;
+		goto test_err;
+	}
+
+	if (!thr->scap_cb_on_min || !thr->scap_cb_on_max
+		|| !thr->scap_cb_off_min || !thr->scap_cb_off_max
+		|| !thr->scap_cb_hi_min || !thr->scap_cb_hi_max
+		|| !thr->scap_cb_hov_min || !thr->scap_cb_hov_max) {
+		FTS_TEST_SAVE_ERR("scap_cb_on/off/hi/hov_min/max is null\n");
+		ret = -EINVAL;
+		goto test_err;
+	}
+
+	ret = enter_factory_mode();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("enter factory mode fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* SCAP CB is in no-mapping mode */
+	ret = mapping_switch(NO_MAPPING);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("switch no-mapping fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* get waterproof channel select */
+	ret = fts_test_read_reg(FACTORY_REG_WC_SEL, &wc_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read water_channel_sel fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_MC_SC_MODE, &sc_mode);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read sc_mode fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_HC_SEL, &hc_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read high_channel_sel fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* water proof on check */
+	fw_wp_check = get_fw_wp(wc_sel, WATER_PROOF_ON);
+	if (thr->basic.scap_cb_wp_on_check && fw_wp_check) {
+		scb_tmp = scap_cb + scb_cnt;
+		/* 1:waterproof 0:non-waterproof */
+		ret = get_cb_mc_sc(WATER_PROOF_ON, byte_num, scb_tmp, DATA_TWO_BYTE);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("read sc_cb fail,ret=%d\n", ret);
+			goto restore_reg;
+		}
+
+		/* show Scap CB */
+		FTS_TEST_SAVE_INFO("scap_cb in waterproof on mode:\n");
+		show_data_mc_sc(scb_tmp);
+
+		/* compare */
+		tx_check = get_fw_wp(wc_sel, WATER_PROOF_ON_TX);
+		rx_check = get_fw_wp(wc_sel, WATER_PROOF_ON_RX);
+		tmp_result = compare_mc_sc(tx_check, rx_check, scb_tmp,
+								   thr->scap_cb_on_min,
+								   thr->scap_cb_on_max);
+
+		scb_cnt += tdata->sc_node.node_num;
+	} else {
+		tmp_result = true;
+	}
+
+	/* water proof off check */
+	fw_wp_check = get_fw_wp(wc_sel, WATER_PROOF_OFF);
+	if (thr->basic.scap_cb_wp_off_check && fw_wp_check) {
+		scb_tmp = scap_cb + scb_cnt;
+		/* 1:waterproof 0:non-waterproof */
+		ret = get_cb_mc_sc(WATER_PROOF_OFF, byte_num, scb_tmp, DATA_TWO_BYTE);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("read sc_cb fail,ret=%d\n", ret);
+			goto restore_reg;
+		}
+
+		/* show Scap CB */
+		FTS_TEST_SAVE_INFO("scap_cb in waterproof off mode:\n");
+		show_data_mc_sc(scb_tmp);
+
+		/* compare */
+		tx_check = get_fw_wp(wc_sel, WATER_PROOF_OFF_TX);
+		rx_check = get_fw_wp(wc_sel, WATER_PROOF_OFF_RX);
+		tmp2_result = compare_mc_sc(tx_check, rx_check, scb_tmp,
+									thr->scap_cb_off_min,
+									thr->scap_cb_off_max);
+
+		scb_cnt += tdata->sc_node.node_num;
+	} else {
+		tmp2_result = true;
+	}
+
+	/*high mode*/
+	hov_high = (hc_sel & 0x03);
+	if (thr->basic.scap_cb_hi_check && hov_high) {
+		scb_tmp = scap_cb + scb_cnt;
+		/* 1:waterproof 0:non-waterproof */
+		ret = get_cb_mc_sc(HIGH_SENSITIVITY, byte_num, scb_tmp, DATA_TWO_BYTE);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("read sc_cb fail,ret=%d\n", ret);
+			goto restore_reg;
+		}
+
+		/* show Scap CB */
+		FTS_TEST_SAVE_INFO("scap_cb in high mode:\n");
+		show_data_mc_sc(scb_tmp);
+
+		/* compare */
+		tx_check = ((hov_high == 1) || (hov_high == 3));
+		rx_check = ((hov_high == 2) || (hov_high == 3));
+		tmp3_result = compare_mc_sc(tx_check, rx_check, scb_tmp,
+									thr->scap_cb_hi_min,
+									thr->scap_cb_hi_max);
+
+		scb_cnt += tdata->sc_node.node_num;
+	} else {
+		tmp3_result = true;
+	}
+
+	/*hov mode*/
+	hov_high = (hc_sel & 0x04);
+	if (thr->basic.scap_cb_hov_check && hov_high) {
+		scb_tmp = scap_cb + scb_cnt;
+		byte_num = 4 * 2;
+		/* 1:waterproof 0:non-waterproof */
+		ret = get_cb_mc_sc(HOV, byte_num, scb_tmp, DATA_TWO_BYTE);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("read sc_cb fail,ret=%d\n", ret);
+			goto restore_reg;
+		}
+
+		/* show Scap CB */
+		FTS_TEST_SAVE_INFO("scap_cb in hov mode:\n");
+		show_data_mc_sc(scb_tmp);
+
+		/* compare */
+		tmp4_result = true;
+		for (i = 0; i < 4; i++) {
+			if ((scb_tmp[i] < thr->scap_cb_hov_min[i])
+				|| (scb_tmp[i] > thr->scap_cb_hov_max[i])) {
+				FTS_TEST_SAVE_ERR("test fail,hov%d=%5d,range=(%5d,%5d)\n",
+								  i + 1, scb_tmp[i],
+								  thr->scap_cb_hov_min[i],
+								  thr->scap_cb_hov_max[i]);
+				tmp4_result = false;
+			}
+		}
+
+		scb_cnt += tdata->sc_node.node_num;
+	} else {
+		tmp4_result = true;
+	}
+
+restore_reg:
+	ret = fts_test_write_reg(FACTORY_REG_MC_SC_MODE, sc_mode);/* set the origin value */
+	if (ret) {
+		FTS_TEST_SAVE_ERR("write sc mode fail,ret=%d\n", ret);
+	}
+test_err:
+	if (tmp_result && tmp2_result && tmp3_result && tmp4_result) {
+		*test_result = true;
+		FTS_TEST_SAVE_INFO("\n------ scap cb test PASS\n");
+	} else {
+		*test_result = false;
+		FTS_TEST_SAVE_ERR("\n------ scap cb test NG\n");
+	}
+
+	/* save test data */
+	fts_test_save_data("SCAP CB Test", CODE_M_SCAP_CB_TEST,
+					   scap_cb, scb_cnt, true, false, *test_result);
+
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static int ft5652_scap_rawdata_test(struct fts_test *tdata, bool *test_result)
+{
+	int ret = 0;
+	int i = 0;
+	bool tmp_result = false;
+	bool tmp2_result = false;
+	bool tmp3_result = false;
+	bool tmp4_result = false;
+	bool fw_wp_check = false;
+	bool tx_check = false;
+	bool rx_check = false;
+	int *scap_rawdata = NULL;
+	int *srawdata_tmp = NULL;
+	int srawdata_cnt = 0;
+	u8 wc_sel = 0;
+	u8 hc_sel = 0;
+	u8 hov_high = 0;
+	struct mc_sc_threshold *thr = &tdata->ic.mc_sc.thr;
+
+	FTS_TEST_FUNC_ENTER();
+	FTS_TEST_SAVE_INFO("\n============ Test Item: Scap Rawdata Test\n");
+	memset(tdata->buffer, 0, tdata->buffer_length);
+	scap_rawdata = tdata->buffer;
+
+	if ((tdata->sc_node.node_num * 4) > tdata->buffer_length) {
+		FTS_TEST_SAVE_ERR("scap rawdata num(%d) > buffer length(%d)",
+						  tdata->sc_node.node_num * 4,
+						  tdata->buffer_length);
+		ret = -EINVAL;
+		goto test_err;
+	}
+
+	if (!thr->scap_rawdata_on_min || !thr->scap_rawdata_on_max
+		|| !thr->scap_rawdata_off_min || !thr->scap_rawdata_off_max
+		|| !thr->scap_rawdata_hi_min || !thr->scap_rawdata_hi_max
+		|| !thr->scap_rawdata_hov_min || !thr->scap_rawdata_hov_max) {
+		FTS_TEST_SAVE_ERR("scap_rawdata_on/off/hi/hov_min/max is null\n");
+		ret = -EINVAL;
+		goto test_err;
+	}
+
+	ret = enter_factory_mode();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("enter factory mode fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* SCAP RAWDATA is in no-mapping mode */
+	ret = mapping_switch(NO_MAPPING);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("switch no-mapping fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* get waterproof channel select */
+	ret = fts_test_read_reg(FACTORY_REG_WC_SEL, &wc_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read water_channel_sel fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_HC_SEL, &hc_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read high_channel_sel fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* scan rawdata */
+	ret = start_scan();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("scan scap rawdata fail\n");
+		goto test_err;
+	}
+
+	/* water proof on check */
+	fw_wp_check = get_fw_wp(wc_sel, WATER_PROOF_ON);
+	if (thr->basic.scap_rawdata_wp_on_check && fw_wp_check) {
+		srawdata_tmp = scap_rawdata + srawdata_cnt;
+		ret = get_rawdata_mc_sc(WATER_PROOF_ON, srawdata_tmp);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("get scap(WP_ON) rawdata fail\n");
+			goto test_err;
+		}
+
+		FTS_TEST_SAVE_INFO("scap_rawdata in waterproof on mode:\n");
+		show_data_mc_sc(srawdata_tmp);
+
+		/* compare */
+		tx_check = get_fw_wp(wc_sel, WATER_PROOF_ON_TX);
+		rx_check = get_fw_wp(wc_sel, WATER_PROOF_ON_RX);
+		tmp_result = compare_mc_sc(tx_check, rx_check, srawdata_tmp,
+								   thr->scap_rawdata_on_min,
+								   thr->scap_rawdata_on_max);
+
+		srawdata_cnt += tdata->sc_node.node_num;
+	} else {
+		tmp_result = true;
+	}
+
+	/* water proof off check */
+	fw_wp_check = get_fw_wp(wc_sel, WATER_PROOF_OFF);
+	if (thr->basic.scap_rawdata_wp_off_check && fw_wp_check) {
+		srawdata_tmp = scap_rawdata + srawdata_cnt;
+		ret = get_rawdata_mc_sc(WATER_PROOF_OFF, srawdata_tmp);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("get scap(WP_OFF) rawdata fail\n");
+			goto test_err;
+		}
+
+		FTS_TEST_SAVE_INFO("scap_rawdata in waterproof off mode:\n");
+		show_data_mc_sc(srawdata_tmp);
+
+		/* compare */
+		tx_check = get_fw_wp(wc_sel, WATER_PROOF_OFF_TX);
+		rx_check = get_fw_wp(wc_sel, WATER_PROOF_OFF_RX);
+		tmp2_result = compare_mc_sc(tx_check, rx_check, srawdata_tmp,
+									thr->scap_rawdata_off_min,
+									thr->scap_rawdata_off_max);
+
+		srawdata_cnt += tdata->sc_node.node_num;
+	} else {
+		tmp2_result = true;
+	}
+
+	/*high mode*/
+	hov_high = (hc_sel & 0x03);
+	if (thr->basic.scap_rawdata_hi_check && hov_high) {
+		srawdata_tmp = scap_rawdata + srawdata_cnt;
+		ret = get_rawdata_mc_sc(HIGH_SENSITIVITY, srawdata_tmp);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("get scap(HS) rawdata fail\n");
+			goto test_err;
+		}
+
+		FTS_TEST_SAVE_INFO("scap_rawdata in hs mode:\n");
+		show_data_mc_sc(srawdata_tmp);
+
+		/* compare */
+		tx_check = ((hov_high == 1) || (hov_high == 3));
+		rx_check = ((hov_high == 2) || (hov_high == 3));
+		tmp3_result = compare_mc_sc(tx_check, rx_check, srawdata_tmp,
+									thr->scap_rawdata_hi_min,
+									thr->scap_rawdata_hi_max);
+
+		srawdata_cnt += tdata->sc_node.node_num;
+	} else {
+		tmp3_result = true;
+	}
+
+	/*hov mode*/
+	hov_high = (hc_sel & 0x04);
+	if (thr->basic.scap_rawdata_hov_check && hov_high) {
+		srawdata_tmp = scap_rawdata + srawdata_cnt;
+		ret = get_rawdata_mc_sc(HOV, srawdata_tmp);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("get scap(HOV) rawdata fail\n");
+			goto test_err;
+		}
+
+		FTS_TEST_SAVE_INFO("scap_rawdata in hov mode:\n");
+		show_data_mc_sc(srawdata_tmp);
+
+		/* compare */
+		tmp4_result = true;
+		for (i = 0; i < 4; i++) {
+			if ((srawdata_tmp[i] < thr->scap_rawdata_hov_min[i])
+				|| (srawdata_tmp[i] > thr->scap_rawdata_hov_max[i])) {
+				FTS_TEST_SAVE_ERR("test fail,hov%d=%5d,range=(%5d,%5d)\n",
+								  i + 1, srawdata_tmp[i],
+								  thr->scap_rawdata_hov_min[i],
+								  thr->scap_rawdata_hov_max[i]);
+				tmp4_result = false;
+			}
+		}
+
+		srawdata_cnt += tdata->sc_node.node_num;
+	} else {
+		tmp4_result = true;
+	}
+
+test_err:
+	if (tmp_result && tmp2_result && tmp3_result && tmp4_result) {
+		*test_result = true;
+		FTS_TEST_SAVE_INFO("\n------ scap rawdata test PASS\n");
+	} else {
+		*test_result = false;
+		FTS_TEST_SAVE_INFO("\n------ scap rawdata test NG\n");
+	}
+
+	/* save data */
+	fts_test_save_data("SCAP Rawdata Test", CODE_M_SCAP_RAWDATA_TEST,
+					   scap_rawdata, srawdata_cnt, true, false, *test_result);
+
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static int ft5652_short_test(struct fts_test *tdata, bool *test_result)
+{
+	int ret = 0;
+	int ch_num = 0;
+	int adc[SC_NUM_MAX + 1] = { 0 };
+	u8 ab_ch[SC_NUM_MAX + 1] = { 0 };
+	u8 res_level = 0;
+	bool ca_result = false;
+	bool cg_result = false;
+	bool cc_result = false;
+
+	FTS_TEST_FUNC_ENTER();
+	FTS_TEST_SAVE_INFO("\n============ Test Item: Short Test\n");
+	ch_num = tdata->sc_node.tx_num + tdata->sc_node.rx_num;
+
+	if (ch_num >= SC_NUM_MAX) {
+		FTS_TEST_SAVE_ERR("sc_node ch_num(%d)>max(%d)", ch_num, SC_NUM_MAX);
+		goto test_err;
+	}
+
+	ret = enter_factory_mode();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("enter factory mode fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* short is in no-mapping mode */
+	ret = mapping_switch(NO_MAPPING);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("switch no-mapping fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTROY_REG_SHORT2_RES_LEVEL, &res_level);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read short level fails\n");
+		goto test_err;
+	}
+
+	/* get offset = readdata - 1024 */
+	ret = short_get_adc_data_mc(TEST_RETVAL_AA, 1 * 2, &tdata->offset, \
+								FACTROY_REG_SHORT2_OFFSET);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get weak short data fail,ret:%d\n", ret);
+		goto test_err;
+	}
+	tdata->offset -= 1024;
+	FTS_TEST_DBG("short offset:%d", tdata->offset);
+
+	/* get short resistance and exceptional channel */
+	ret = short_test_ch_to_all(tdata, adc, ab_ch, &ca_result);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("short test of channel to all fails\n");
+		goto restore_reg;
+	}
+
+	if (!ca_result) {
+		/*weak short fail, get short values*/
+		ret = short_test_ch_to_gnd(tdata, adc, ab_ch, &cg_result);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("short test of channel to gnd fails\n");
+			goto restore_reg;
+		}
+
+		ret = short_test_ch_to_ch(tdata, adc, ab_ch, &cc_result);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("short test of channel to channel fails\n");
+			goto restore_reg;
+		}
+
+	}
+
+restore_reg:
+	ret = fts_test_write_reg(FACTROY_REG_SHORT2_RES_LEVEL, res_level);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore short level fails");
+	}
+
+test_err:
+	if (ca_result || (!ca_result && (cg_result && cc_result))) {
+		FTS_TEST_SAVE_INFO("------ short test PASS\n");
+		*test_result = true;
+	} else {
+		FTS_TEST_SAVE_ERR("------ short test NG\n");
+		*test_result = false;
+	}
+
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static int ft5652_panel_differ_test(struct fts_test *tdata, bool *test_result)
+{
+	int ret = 0;
+	bool tmp_result = false;
+	int i = 0;
+	u8 fre = 0;
+	u8 fir = 0;
+	u8 normalize = 0;
+	u8 data_type = 0;
+	u8 data_sel = 0;
+	int *panel_differ = NULL;
+	struct mc_sc_threshold *thr = &tdata->ic.mc_sc.thr;
+
+	FTS_TEST_FUNC_ENTER();
+	FTS_TEST_SAVE_INFO("\n============ Test Item: Panel Differ Test\n");
+	memset(tdata->buffer, 0, tdata->buffer_length);
+	panel_differ = tdata->buffer;
+
+	if (!thr->panel_differ_min || !thr->panel_differ_max) {
+		FTS_TEST_SAVE_ERR("panel_differ_h_min/max is null\n");
+		ret = -EINVAL;
+		goto test_err;
+	}
+
+	ret = enter_factory_mode();
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("failed to enter factory mode,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* panel differ test in mapping mode */
+	ret = mapping_switch(MAPPING);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("switch mapping fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* save origin value */
+	ret = fts_test_read_reg(FACTORY_REG_NORMALIZE, &normalize);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("read normalize fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_FRE_LIST, &fre);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x0A fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_DATA_TYPE, &data_type);
+	 if (ret) {
+		 FTS_TEST_SAVE_ERR("read 0x5B fail,ret=%d\n", ret);
+		 goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_FIR, &fir);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0xFB fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_DATA_SELECT, &data_sel);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x06 fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* set to overall normalize */
+	ret = fts_test_write_reg(FACTORY_REG_NORMALIZE, 0x00);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("write normalize fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/* set frequecy high */
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, 0x81);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set frequecy fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/* fir disable */
+	ret = fts_test_write_reg(FACTORY_REG_FIR, 0);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set fir fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_TYPE, 0x01);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set raw type fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_SELECT, 0x00);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set data sel fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/* get rawdata */
+	for (i = 0; i < 3; i++) {
+		ret = get_rawdata(panel_differ);
+		if (ret < 0) {
+			FTS_TEST_SAVE_ERR("get rawdata fail\n");
+			goto restore_reg;
+		}
+	}
+
+	for (i = 0; i < tdata->node.node_num; i++) {
+		panel_differ[i] = panel_differ[i] / 10;
+	}
+
+	/* show test data */
+	show_data(panel_differ, false);
+
+	/* compare */
+	tmp_result = compare_array(panel_differ,
+							   thr->panel_differ_min,
+							   thr->panel_differ_max,
+							   false);
+
+restore_reg:
+	/* set the origin value */
+	ret = fts_test_write_reg(FACTORY_REG_NORMALIZE, normalize);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore normalize fail,ret=%d\n", ret);
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, fre);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0x0A fail,ret=%d\n", ret);
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_TYPE, data_type);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set raw type fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_FIR, fir);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0xFB fail,ret=%d\n", ret);
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_SELECT, data_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set data sel fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+test_err:
+	/* result */
+	if (tmp_result) {
+		*test_result = true;
+		FTS_TEST_SAVE_INFO("------ panel differ test PASS\n");
+	} else {
+		*test_result = false;
+		FTS_TEST_SAVE_ERR("------ panel differ test NG\n");
+	}
+
+	/* save test data */
+	fts_test_save_data("Panel Differ Test", CODE_M_PANELDIFFER_TEST,
+					   panel_differ, 0, false, false, *test_result);
+
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static int start_test_ft5652(void)
+{
+	int ret = 0;
+	struct fts_test *tdata = fts_ftest;
+	struct mc_sc_testitem *test_item = &tdata->ic.mc_sc.u.item;
+	bool temp_result = false;
+	bool test_result = true;
+
+	FTS_TEST_FUNC_ENTER();
+	FTS_TEST_INFO("test item:0x%x", fts_ftest->ic.mc_sc.u.tmp);
+
+	/* rawdata test */
+	if (true == test_item->rawdata_test) {
+		ret = ft5652_rawdata_test(tdata, &temp_result);
+		if ((ret < 0) || (false == temp_result)) {
+			test_result = false;
+		}
+	}
+
+	if (true == test_item->rawdata_uniformity_test) {
+		ret = ft5652_uniformity_test(tdata, &temp_result);
+		if ((ret < 0) || (false == temp_result)) {
+			test_result = false;
+		}
+	}
+
+	/* scap_cb test */
+	if (true == test_item->scap_cb_test) {
+		ret = ft5652_scap_cb_test(tdata, &temp_result);
+		if ((ret < 0) || (false == temp_result)) {
+			test_result = false;
+		}
+	}
+
+	/* scap_rawdata test */
+	if (true == test_item->scap_rawdata_test) {
+		ret = ft5652_scap_rawdata_test(tdata, &temp_result);
+		if ((ret < 0) || (false == temp_result)) {
+			test_result = false;
+		}
+	}
+
+	/* short test */
+	if (true == test_item->short_test) {
+		ret = ft5652_short_test(tdata, &temp_result);
+		if ((ret < 0) || (false == temp_result)) {
+			test_result = false;
+		}
+	}
+	/* panel differ test */
+	if (true == test_item->panel_differ_test) {
+		ret = ft5652_panel_differ_test(tdata, &temp_result);
+		if ((ret < 0) || (false == temp_result)) {
+			test_result = false;
+		}
+	}
+
+	/* restore mapping state */
+	fts_test_write_reg(FACTORY_REG_NOMAPPING, tdata->mapping);
+
+	FTS_TEST_FUNC_EXIT();
+	return test_result;
+}
+
+static int ft3658_get_rawdata(bool is_raw, int *data_buffer)
+{
+	int ret = 0;
+	u8 data_type = 0;
+	u8 data_sel = 0;
+	u8 fre = 0;
+
+	ret = fts_test_read_reg(FACTORY_REG_FRE_LIST, &fre);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x0A fail,ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_DATA_TYPE, &data_type);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x5B error, ret=%d\n", ret);
+		goto test_err;
+	}
+
+	ret = fts_test_read_reg(FACTORY_REG_DATA_SELECT, &data_sel);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("read 0x06 error, ret=%d\n", ret);
+		goto test_err;
+	}
+
+	/* set frequecy high */
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, 0x81);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set frequecy fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_TYPE, 0x01);
+	if (ret) {
+		FTS_TEST_SAVE_ERR("set raw type fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	/* select rawdata */
+	ret = fts_test_write_reg(FACTORY_REG_DATA_SELECT, is_raw ? 0x00 : 0x01);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("set fir fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+
+	ret = get_rawdata(data_buffer);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("get raw_data/differ_data fail,ret=%d\n", ret);
+		goto restore_reg;
+	}
+restore_reg:
+	ret = fts_test_write_reg(FACTORY_REG_FRE_LIST, fre);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0x0A fail,ret=%d\n", ret);
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_TYPE, data_type);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0x5B fail,ret=%d\n", ret);
+	}
+
+	ret = fts_test_write_reg(FACTORY_REG_DATA_SELECT, data_sel);
+	if (ret < 0) {
+		FTS_TEST_SAVE_ERR("restore 0x06 fail,ret=%d\n", ret);
+	}
+test_err:
+	return ret;
+}
+
+static int ft3658_open_test(void)
+{
+	int ret = SELFTEST_INVALID;
+	int *rawdata = NULL;
+	int i = 0;
+	struct fts_test *tdata = fts_ftest;
+
+	FTS_TEST_FUNC_ENTER();
+	FTS_TEST_INFO("start open test, open_min:%d", tdata->open_min);
+	rawdata = (int *)vmalloc(PAGE_SIZE);
+	if (!rawdata)
+		return -ENOMEM;
+	else
+		memset(rawdata, 0, PAGE_SIZE);
+
+	ret = ft3658_get_rawdata(true, rawdata);
+	if (ret) {
+		FTS_TEST_ERROR("get rawdata error!");
+		ret = SELFTEST_INVALID;
+		goto out;
+	}
+
+	for (i = 0; i < tdata->node.tx_num * tdata->node.rx_num; i++) {
+		if (rawdata[i] < tdata->open_min) {
+			FTS_TEST_ERROR(
+				"rawdata[%d]:%d is lower than open_min(%d), open test fail!",
+							i, rawdata[i], tdata->open_min);
+			ret = SELFTEST_FAIL;
+			goto out;
+		}
+	}
+
+	ret = SELFTEST_PASS;
+out:
+	if (rawdata) {
+		vfree(rawdata);
+		rawdata = NULL;
+	}
+
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+static int ft3658_short_test(void)
+{
+	int ret = SELFTEST_INVALID;
+	bool status;
+	struct fts_test *tdata = fts_ftest;
+
+	ret = ft5652_short_test(tdata, &status);
+	if (ret != 0 || !status)
+		ret = SELFTEST_FAIL;
+	else
+		ret = SELFTEST_PASS;
+
+	return ret;
+}
+
+static int ft3658_data_dump(int *rawdata, int *differ_data)
+{
+	int ret = 0;
+	struct fts_test *tdata = fts_ftest;
+	bool old_status = tdata->func->raw_u16;
+
+	FTS_TEST_FUNC_ENTER();
+
+	ret = ft3658_get_rawdata(true, rawdata);
+	if (ret) {
+		FTS_TEST_ERROR("get rawdata error!");
+		goto out;
+	}
+
+	tdata->func->raw_u16 = false;
+	ret = ft3658_get_rawdata(false, differ_data);
+	tdata->func->raw_u16 = old_status;
+	if (ret) {
+		FTS_TEST_ERROR("get differ_data error!");
+		goto out;
+	}
+out:
+	FTS_TEST_FUNC_EXIT();
+	return ret;
+}
+
+struct test_funcs test_func_ft5652 = {
+	.ctype = {0x88},
+	.hwtype = IC_HW_MC_SC,
+	.key_num_total = 0,
+	.mc_sc_short_v2 = true,
+	.raw_u16 = true,
+	.cb_high_support = true,
+	.start_test = start_test_ft5652,
+	.open_test = ft3658_open_test,
+	.short_test = ft3658_short_test,
+	.data_dump = ft3658_data_dump,
+};
+#endif
diff --git a/drivers/input/touchscreen/ft8756_spi/include/firmware/fw_huaxing_v0e.i b/drivers/input/touchscreen/ft8756_spi/include/firmware/fw_huaxing_v0e.i
new file mode 100644
index 00000000000000..72b493a0423949
--- /dev/null
+++ b/drivers/input/touchscreen/ft8756_spi/include/firmware/fw_huaxing_v0e.i
@@ -0,0 +1,11264 @@
+0x0, 0x30,0x46,0x70,0x46,0x70,0x46,0x70,0x46,0x70,0x46,0x70,0x46,0x70,0x46,0x70,
+0x24,0xd6,0x46,0x70,0x46,0x70,0x46,0x70,0x46,0x70,0x46,0x70,0x46,0x70,0x46,0x70,
+0x27,0xb0,0x46,0x70,0x26,0xd4,0x28,0x8, 0x46,0x70,0x26,0x6c,0x46,0x70,0x46,0x70,
+0xe0,0x60,0x3c,0x0, 0xe1,0xf0,0xcc,0x2, 0xe0,0x60,0x3c,0x10,0xe1,0x6f,0x10,0x7e,
+0xe0,0x0, 0x14,0x0, 0xe0,0x60,0x3c,0x17,0xe0,0x24,0x14,0x3a,0xe1,0xf0,0x14,0xc2,
+0x3c,0x79,0x1, 0x8, 0xe0,0x25,0x15,0xe, 0x3d,0x28,0x15,0x80,0x16,0x1, 0xe0,0x2,
+0xd3,0xa, 0xe0,0x8c,0x14,0x4c,0x3c,0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x7c,0x4c,0x83,0xb3,0x12,0x1d,0xed,0xe2,0x9, 0x1d,0xf6,0xe2,0xe0,0x1f,0xe, 0xf1,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff,0x0, 0x0, 0xe0,0x1f,0x0, 0x0, 0xf7,0x56,
+0x70,0x8f,0x0, 0xff,0xe0,0x1f,0x0, 0xff,0x48,0xb7,0x5a,0xa5,0xb, 0xf4,0x0, 0xff,
+0x0, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x1f,
+0x4a,0x36,0x0, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0x58,0x4d,0x0, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xe8,0x12,0x57,0xca,0xe8,0x12,0x57,0x4c,0x34,0x23,0x3f,0xae,0xe0,0x41,0x3f,0xaf,
+0x3f,0xf8,0x2, 0x8b,0xe8,0x12,0x57,0xc9,0xe8,0x12,0x57,0x4b,0x3f,0xae,0xe0,0x41,
+0x3f,0xaf,0xe1,0x28,0x3c,0x2f,0x38,0x82,0x14,0x0, 0x0, 0xfe,0x17,0x80,0xe8,0x25,
+0x6f,0x91,0x38,0x82,0xe0,0x25,0x14,0x1a,0xe0,0x4d,0x0, 0x96,0x8, 0xb4,0xe8,0x25,
+0x4c,0x11,0xe8,0x55,0x4f,0x8e,0xe8,0x55,0x4f,0xf, 0x24,0x17,0xe8,0x12,0x56,0xcd,
+0x2e,0x8a,0x14,0x0, 0x17,0x80,0xe8,0x25,0x6f,0x91,0x17,0x80,0xe8,0x12,0x77,0xcd,
+0xe0,0x0, 0x0, 0xcc,0xe2,0x0, 0xcf,0x81,0x2, 0xf5,0xe8,0x25,0x4e,0x90,0x26,0xbc,
+0x17,0x80,0xe8,0x25,0x6f,0x90,0x0, 0xee,0xe2,0x0, 0xcf,0x81,0xe8,0x25,0x6c,0x10,
+0x1, 0xbc,0xe8,0xd, 0x4e,0xd2,0xe8,0x29,0x51,0x9d,0xe0,0xc, 0x36,0xa8,0xe8,0xd,
+0x4e,0xd3,0x3e,0xcc,0x39,0xfd,0x5, 0xde,0xe8,0xd, 0x4e,0xd4,0xe0,0xc, 0x36,0xa8,
+0xe8,0xd, 0x4e,0xd5,0x3e,0xcc,0x39,0xfd,0x3, 0xd5,0xe8,0xd, 0x4e,0xd6,0xe8,0x29,
+0x51,0x1e,0xe0,0xc, 0x36,0xa8,0xe8,0xd, 0x4e,0xd7,0x3e,0xcc,0x39,0x7d,0x5, 0xca,
+0xe8,0xd, 0x4e,0xd8,0xe0,0xc, 0x36,0xa8,0xe8,0xd, 0x4e,0xd9,0x3e,0xcc,0x39,0x7d,
+0x3, 0xc1,0xe2,0x0, 0xcc,0x4, 0xe7,0xff,0x2, 0xbe,0xe0,0x0, 0x16,0x80,0x34,0x21,
+0x3c,0x1d,0x96,0x88,0x3e,0x82,0xe0,0x0, 0x1, 0xde,0xe2,0x0, 0xcc,0x4, 0xe7,0xff,
+0x1, 0x32,0x0, 0xc8,0x27,0x3, 0x14,0x0, 0xa, 0x61,0x17,0x81,0xe8,0x25,0x6f,0x91,
+0xe8,0xd, 0x4f,0xde,0xe8,0x12,0x71,0xcc,0xe0,0xd, 0x37,0xa8,0xe8,0xd, 0x4f,0xdf,
+0xe8,0x12,0x71,0x4b,0x3f,0xcd,0xe8,0x12,0x77,0xcd,0x0, 0xee,0x17,0x4, 0xe8,0x25,
+0x6f,0x11,0xe8,0xd, 0x4f,0x62,0xe0,0xd, 0x37,0x28,0xe8,0xd, 0x4f,0x63,0xe0,0x0,
+0x0, 0xd4,0xe8,0xd, 0x4c,0x51,0xe8,0x12,0x71,0xca,0xe8,0x12,0x71,0x49,0xdf,0x61,
+0xe7,0xff,0x24,0x9, 0x0, 0xd9,0x16,0x81,0xe0,0x2f,0x3f,0x8d,0x27,0xd5,0x2f,0x54,
+0xe8,0xd, 0x4a,0x5e,0xe8,0x12,0x71,0xca,0xe0,0xf, 0x32,0x28,0xe8,0xd, 0x4a,0x5f,
+0xe8,0x12,0x71,0x49,0x3a,0x4f,0xe8,0xd, 0x4f,0xda,0xe0,0xe, 0x37,0xa8,0xe8,0xd,
+0x4f,0xdb,0x3f,0xce,0xe8,0x12,0x57,0x4d,0xe0,0xf, 0x3a,0x2f,0x3f,0xfe,0xe7,0xfe,
+0x4, 0xea,0xe8,0xd, 0x4c,0x50,0xdf,0x3d,0xe7,0xfe,0x24,0x65,0x17,0x83,0xe8,0x12,
+0x71,0xcc,0xe8,0x12,0x71,0x4b,0xe8,0x25,0x6f,0x91,0xe8,0x12,0x72,0x4d,0xe7,0xff,
+0x0, 0xac,0xe2,0x0, 0xcc,0x2, 0xe7,0xff,0x1, 0x28,0x2, 0x9b,0xe2,0x0, 0xcc,0x1,
+0xe7,0xfe,0x1, 0xd1,0x11,0x0, 0x39,0xe2,0xe7,0xff,0x2f,0xbd,0xe2,0x0, 0xcc,0x1,
+0xe7,0xff,0x1, 0xae,0x17,0x2, 0xe8,0x25,0x6f,0x11,0xe8,0xd, 0x4f,0x5e,0xe0,0xd,
+0x37,0x28,0xe8,0xd, 0x4f,0x5f,0x3f,0x4d,0xe8,0x12,0x77,0x4d,0xe7,0xff,0x0, 0x8d,
+0xe2,0x0, 0xcc,0x3, 0x1, 0x68,0xe2,0x0, 0xcc,0x4, 0xe7,0xfe,0x1, 0xb4,0x14,0x24,
+0xe7,0xfe,0x0, 0xb2,0xe0,0x33,0x14,0x40,0xe0,0x4b,0x0, 0xb6,0xe8,0x55,0x4f,0x8e,
+0xe2,0x0, 0xcf,0x81,0x2, 0x86,0xe8,0x55,0x4f,0xf, 0xe2,0x0, 0xcf,0x1, 0x5, 0x85,
+0x17,0x81,0xe8,0x25,0x6f,0x9c,0x0, 0x87,0xe8,0x25,0x4f,0x1c,0xe2,0x0, 0xcf,0x1,
+0x1, 0x82,0x27,0xf8,0xe8,0xf3,0x4f,0xd2,0x2f,0x87,0xe8,0x12,0x77,0xcf,0xe8,0x3b,
+0x6f,0x82,0xe7,0xfd,0x0, 0xfd,0x8, 0xb1,0xdf,0x2, 0xe8,0x25,0x4f,0x9c,0xe2,0x0,
+0xcf,0x81,0x1, 0x7, 0x24,0x6, 0x17,0x81,0xe8,0xf3,0x6c,0x55,0xe8,0x55,0x6f,0x94,
+0x8, 0xe1,0xe2,0x1, 0xcc,0x2d,0x1, 0x5, 0xe2,0x1, 0xcc,0x2e,0x1, 0x26,0x38,0x82,
+0x8, 0xb2,0x11,0x0, 0xe8,0x1d,0x71,0x59,0xe0,0x0, 0x14,0x6a,0xe8,0x1d,0x57,0xd9,
+0xe8,0x12,0x54,0xa0,0x3c,0x9f,0xe0,0x1, 0xd7,0x53,0xe8,0x1d,0x71,0x58,0xe0,0x0,
+0x14,0x6e,0xe8,0x1d,0x57,0xd8,0xe8,0x12,0x54,0x9f,0x3c,0x9f,0xe0,0x1, 0xd7,0x48,
+0xe8,0x1d,0x71,0x56,0xe0,0x0, 0x14,0x6c,0xe8,0x1d,0x57,0xd6,0xe8,0x12,0x54,0x9e,
+0x3c,0x9f,0x9, 0x21,0xe0,0x2e,0x0, 0xbc,0xe8,0x30,0x57,0x83,0x37,0xa1,0xe8,0x1d,
+0x77,0xd9,0xe8,0x1d,0x57,0xd9,0x37,0xc9,0xe8,0xf2,0x6f,0xb6,0xe8,0x1d,0x57,0xd9,
+0xe6,0xa7,0xcf,0x8f,0xe8,0xf2,0x6f,0xb7,0x38,0x82,0x8, 0xb3,0xc0,0x7c,0x39,0xe8,
+0x39,0x69,0x3c,0x60,0x3c,0xe0,0xc4,0x84,0xc4,0x2, 0xe0,0x1, 0xdc,0x98,0xe2,0x1,
+0xc9,0x87,0x1, 0x91,0xe8,0x12,0x57,0xb4,0xe0,0x5, 0x97,0x2f,0xe7,0x0, 0xcf,0x32,
+0xe0,0x5, 0xb7,0x2f,0xe8,0x24,0x69,0x43,0x54,0x1, 0x54,0x82,0xe0,0x1, 0xdc,0xa9,
+0xc0,0x4, 0x9, 0xe1,0xe2,0x1, 0xc9,0x86,0x1, 0x8c,0xe8,0x12,0x57,0xb4,0xe0,0x5,
+0x97,0x2f,0xe7,0x3, 0xcf,0x32,0xe0,0x5, 0xb7,0x2f,0xe8,0x24,0x69,0x44,0x0, 0xed,
+0xe2,0x1, 0xc9,0x88,0x1, 0xea,0xe8,0x12,0x57,0xb4,0xe0,0x5, 0x97,0x2f,0xe7,0x6,
+0xcf,0x42,0xe0,0x5, 0xb7,0x2f,0xe8,0x24,0x69,0x42,0x0, 0xdf,0xe8,0x12,0x57,0xb4,
+0xe2,0x1, 0xcc,0x7, 0xe0,0x5, 0x97,0x2f,0xe6,0xad,0xcf,0x5e,0xe8,0x24,0x6f,0x43,
+0xe0,0x5, 0x97,0x2f,0xe6,0xaa,0xcf,0x5e,0xe8,0x24,0x6f,0x44,0xe0,0x5, 0x97,0xaf,
+0xe6,0xa6,0xcf,0xcf,0xe8,0x24,0x6f,0xc2,0x1, 0x84,0xe8,0x24,0x4c,0x43,0x38,0x82,
+0xe2,0x1, 0xcc,0x6, 0x1, 0x84,0xe8,0x24,0x4c,0x44,0x0, 0xfa,0xe2,0x1, 0xcc,0x8,
+0x1, 0x84,0xe8,0x24,0x4c,0x42,0x0, 0xf4,0x14,0x0, 0x0, 0xf2,0x8, 0xb1,0x3f,0xe8,
+0x3c,0x69,0x2f,0x8e,0xe0,0x4, 0xd7,0x5d,0xe8,0x12,0x57,0xd2,0xe0,0x0, 0x27,0xce,
+0xe8,0xf2,0x4f,0xa8,0xcf,0x82,0xe8,0xf2,0x6f,0xa8,0xe0,0x0, 0x0, 0xc7,0xe2,0x0,
+0xcf,0x81,0x1, 0x97,0xe8,0x25,0x4f,0xa1,0x2f,0x85,0xe8,0x72,0x57,0xac,0xe8,0x12,
+0x77,0xa0,0x17,0x80,0xe8,0x1d,0x77,0xd9,0xe8,0xf2,0x6c,0x1b,0xdf,0x43,0xe8,0x1d,
+0x57,0xd9,0xe8,0x12,0x54,0xa0,0xe0,0x0, 0x14,0x6a,0x3c,0x9f,0xe0,0x1, 0x0, 0x95,
+0xe2,0x0, 0xcf,0x89,0x1, 0x9c,0xe2,0x0, 0xcc,0x85,0x2, 0xa7,0xe8,0xf2,0x6c,0xa3,
+0x2c,0x84,0xe8,0xf2,0x6c,0xc8,0x0, 0xd1,0xe2,0x0, 0xcc,0x82,0x1, 0x85,0x17,0x83,
+0xe8,0xf2,0x6f,0xc8,0x0, 0xca,0x3f,0xe9,0xe2,0x1, 0xc7,0xfd,0xe2,0x0, 0xcf,0x81,
+0x1, 0x78,0xe2,0x0, 0xcc,0x84,0x1, 0xc1,0x17,0x82,0x0, 0xf3,0xe2,0x0, 0xcf,0xdb,
+0xe0,0x1, 0x2, 0xb5,0xe2,0x0, 0xcf,0xb0,0x1, 0x89,0xe8,0x25,0x4f,0x45,0x3c,0xfe,
+0x1, 0x4, 0xe2,0x0, 0xcc,0x82,0x5, 0x8f,0x8, 0xe1,0xe2,0x0, 0xcf,0xa6,0x1, 0x7d,
+0x2, 0xa3,0xe2,0x0, 0xcf,0x87,0x1, 0x79,0x2, 0x9a,0x17,0x7e,0x3f,0x1f,0xe2,0x0,
+0xcf,0x1, 0x5, 0xf3,0xe0,0xf2,0x17,0x1a,0x3f,0x1f,0xac,0xe, 0x3f,0x6f,0xc7,0x69,
+0x3e,0xee,0xe2,0x1, 0xc6,0xff,0xe2,0x0, 0xce,0x9d,0x37,0x28,0xe0,0x1, 0x2, 0x85,
+0x37,0x47,0xe0,0x22,0x16,0xd4,0x3f,0x1d,0x97,0xe, 0x3f,0x2, 0x17,0x75,0x3f,0x1f,
+0xe2,0x0, 0xcf,0x3, 0x0, 0xe7,0xe2,0x0, 0xcf,0xb6,0x2, 0x86,0xe2,0x0, 0xcf,0xb5,
+0x3, 0xd4,0x17,0x55,0x0, 0xdc,0xe7,0xff,0x17,0x30,0x0, 0xf2,0xe8,0x12,0x57,0xd2,
+0xe7,0x0, 0x17,0x0, 0x3f,0xce,0xe8,0x12,0x77,0xd2,0xe7,0xfe,0x0, 0xf7,0xe8,0x12,
+0x57,0x52,0xe0,0x40,0xcf,0x0, 0xe8,0x12,0x77,0x52,0xe2,0x0, 0xcf,0x8a,0xe7,0xfe,
+0x1, 0xed,0xe8,0x12,0x57,0xd2,0xe0,0x8, 0xcf,0x80,0x0, 0xee,0xe8,0x12,0x57,0x52,
+0xe0,0x2, 0xcf,0x0, 0x0, 0xf1,0xe8,0x12,0x57,0xd2,0xcf,0x81,0x0, 0xe5,0xe8,0x12,
+0x57,0xd2,0xcf,0x82,0x0, 0xe1,0xe8,0x12,0x57,0xd2,0xcf,0x84,0x0, 0xdd,0xe8,0x12,
+0x57,0xd2,0xcf,0x88,0x0, 0xd9,0xe8,0xf2,0x6c,0x31,0xe0,0x1, 0x14,0x1, 0xe8,0xf2,
+0x4c,0xb1,0xe0,0x2, 0xc4,0xa0,0xe0,0x1, 0xd6,0xb, 0xe7,0xfe,0x0, 0xc7,0xe8,0xf2,
+0x4c,0xb2,0x34,0xa8,0x3c,0x19,0xe8,0x1d,0x74,0x58,0xe0,0x0, 0x14,0x6e,0xe8,0x1d,
+0x57,0xd8,0xe8,0x12,0x54,0x9f,0x3c,0x9f,0x0, 0xef,0xe8,0xf2,0x4c,0xb4,0x34,0xa8,
+0x3c,0x19,0x34,0x21,0xe8,0x1d,0x74,0x56,0xe8,0x1d,0x57,0xd6,0xe8,0x1d,0x77,0xd5,
+0xe8,0x1d,0x57,0xd6,0xe8,0x12,0x54,0x9e,0xe0,0x0, 0x14,0x6c,0x3c,0x9f,0x0, 0xdc,
+0xe8,0xf2,0x4c,0xb6,0x34,0xa8,0x3c,0x19,0x34,0x21,0xe8,0x1d,0x74,0x59,0xe7,0xfe,
+0x0, 0xb8,0xe8,0x25,0x6c,0x32,0xe0,0x48,0x14,0x88,0xe8,0x25,0x4f,0xb2,0xe0,0x0,
+0x14,0x7c,0x3c,0x9f,0x0, 0xc9,0xe2,0x0, 0xcf,0xd7,0xe7,0xff,0x5, 0xa0,0xe8,0x12,
+0x57,0xd2,0xe0,0x4, 0xcf,0x80,0xe7,0xff,0x0, 0x90,0x3f,0x6f,0xe1,0xff,0xc7,0x14,
+0xe2,0x0, 0xcf,0x1, 0x2, 0x93,0xe8,0x12,0x57,0xd2,0xe0,0x1, 0xcf,0x80,0xe8,0x12,
+0x77,0xd2,0xe8,0x12,0x57,0xae,0xe0,0x3, 0x97,0x4f,0xe8,0x1d,0x57,0xd5,0x3f,0x9e,
+0xe8,0x1d,0x77,0xd5,0xe8,0x1d,0x57,0xd5,0x0, 0xc6,0x3f,0x6f,0xe1,0xff,0xc7,0x12,
+0xe2,0x0, 0xcf,0x1, 0x2, 0x91,0xe8,0x12,0x57,0xd2,0xcf,0xc0,0xe8,0x12,0x77,0xd2,
+0xe8,0x12,0x57,0xae,0xe0,0x3, 0x97,0x4f,0xe8,0x1d,0x57,0xd8,0x3f,0x9e,0xe8,0x1d,
+0x77,0xd8,0xe7,0xff,0x0, 0x9c,0xe2,0x1, 0xcf,0x87,0x1, 0x8a,0xe8,0x12,0x57,0xd1,
+0xcf,0x81,0xe8,0x12,0x77,0xd1,0xe8,0x24,0x6c,0xc3,0xe7,0xfd,0x0, 0xcf,0xe2,0x1,
+0xcf,0x86,0x1, 0x8a,0xe8,0x12,0x57,0xd1,0xcf,0x82,0xe8,0x12,0x77,0xd1,0xe8,0x24,
+0x6c,0xc4,0xe7,0xfd,0x0, 0xc3,0xe2,0x1, 0xcf,0x88,0x1, 0x8a,0xe8,0x12,0x57,0xd1,
+0xcf,0x84,0xe8,0x12,0x77,0xd1,0xe8,0x24,0x6c,0xc2,0xe7,0xfd,0x0, 0xb7,0xe2,0x1,
+0xcf,0x92,0x1, 0x86,0x17,0x80,0xe8,0x25,0x6f,0xa0,0xe7,0xfd,0x0, 0xaf,0xe2,0x1,
+0xcf,0xfd,0xe7,0xfd,0x1, 0xab,0xe8,0x27,0x6c,0x96,0xe7,0xfd,0x0, 0xa7,0xe2,0x0,
+0xcc,0x5b,0x3f,0xe8,0x2, 0x86,0xe0,0xf2,0x17,0x1a,0x3f,0x9e,0x8c,0xf, 0x38,0x82,
+0x8, 0xb1,0x3f,0x68,0xe1,0xff,0xc7,0x16,0xe2,0x0, 0xcf,0x1, 0x2, 0x96,0xe8,0x12,
+0x57,0xae,0xe8,0x12,0x54,0xa0,0xe0,0x3, 0x97,0x4f,0xe8,0x1d,0x57,0xd9,0xe0,0x0,
+0x14,0x6a,0x3f,0x9e,0xe8,0x1d,0x77,0xd9,0xe8,0x1d,0x57,0xd9,0x3c,0x9f,0xe0,0x1,
+0xd5,0x47,0x14,0x0, 0xe0,0x0, 0x0, 0xcc,0x3f,0x68,0xe1,0xff,0xc7,0x12,0xe2,0x0,
+0xcf,0x1, 0x2, 0x92,0xe8,0x12,0x57,0xae,0xe8,0x12,0x54,0x9f,0xe0,0x3, 0x97,0x4f,
+0xe8,0x1d,0x57,0xd8,0xe0,0x0, 0x14,0x6e,0x3f,0x9e,0xe8,0x1d,0x77,0xd8,0xe8,0x1d,
+0x57,0xd8,0x3c,0x9f,0x0, 0xe5,0x3f,0x68,0xe1,0xff,0xc7,0x14,0xe2,0x0, 0xcf,0x1,
+0x2, 0x92,0xe8,0x12,0x57,0xae,0xe8,0x12,0x54,0x9e,0xe0,0x3, 0x97,0x4f,0xe8,0x1d,
+0x57,0xd6,0xe0,0x0, 0x14,0x6c,0x3f,0x9e,0xe8,0x1d,0x77,0xd6,0xe8,0x1d,0x57,0xd6,
+0x3c,0x9f,0x0, 0xce,0xe2,0x1, 0xcc,0x4a,0x1, 0x4d,0x3f,0x68,0xe0,0x0, 0xc7,0x7f,
+0xe2,0x1, 0xc7,0x7f,0xe2,0x0, 0xcf,0x1, 0x5, 0xc5,0x3f,0x68,0xe0,0x0, 0xc7,0x7a,
+0xe2,0x1, 0xc7,0x7f,0xe2,0x0, 0xcf,0x2, 0x2, 0x84,0x8, 0xa1,0xe7,0xfc,0x0, 0x90,
+0xe2,0x1, 0xcc,0x7d,0xe7,0xff,0x1, 0xb7,0xe8,0x27,0x4c,0x16,0x8, 0xe1,0x8, 0xb4,
+0xe8,0x12,0x57,0x34,0x16,0x81,0xe0,0x1, 0x97,0xae,0xe0,0x8, 0x16,0x0, 0xe7,0x3,
+0xcf,0x9d,0xe0,0x1, 0xb7,0xae,0x14,0x80,0xe8,0x12,0x57,0xa8,0x3e,0x1f,0x3e,0xef,
+0xb4,0x8d,0xc6,0x84,0xe0,0x40,0xb4,0x9d,0x3e,0x7d,0x1, 0xfb,0xe0,0xf2,0x16,0x9a,
+0x3e,0x99,0x11,0x8, 0xe0,0x2c,0x3c,0xf2,0xb6,0xf, 0x14,0x81,0xe0,0xf2,0x12,0x1a,
+0xb6,0x9f,0xe0,0x8, 0x34,0xa2,0x3c,0x1f,0x15,0x0, 0xe0,0xb, 0x3c,0x94,0xe0,0x3,
+0x3d,0x9a,0x16,0x8, 0xe0,0x22,0x3d,0x7c,0xc4,0x81,0xb1,0x8, 0xe2,0x0, 0xcc,0xdc,
+0xb1,0x98,0x3e,0xea,0x38,0xe2,0x1, 0xee,0xe0,0xf2,0x15,0x9c,0x14,0xa, 0x3d,0x9a,
+0xe0,0x2a,0x3d,0x78,0x3e,0x6a,0xb6,0x4f,0xe0,0x4c,0x14,0xc0,0xb5,0xdf,0xe0,0xf2,
+0x15,0x9d,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xb6,0x6f,0xb5,0xff,0xe8,0x12,
+0x55,0xa0,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xe0,0x1a,0xb6,0x4f,0x14,0x8,
+0xe0,0x1a,0xb5,0xdf,0xe0,0x1a,0xb6,0x6f,0xe0,0x1a,0xb5,0xff,0xe8,0x12,0x55,0x9f,
+0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xe0,0x1b,0xb6,0x4f,0xe0,0x1b,0xb5,0xdf,
+0xe0,0x1b,0xb6,0x6f,0xe0,0x1b,0xb5,0xff,0xe8,0x12,0x55,0x9e,0x3d,0x9d,0xe0,0x2a,
+0x3e,0xf8,0x3e,0x6a,0xe0,0x1b,0xb6,0xf, 0x14,0xa, 0xe0,0x1b,0xb5,0x9f,0xe0,0x1b,
+0xb6,0x2f,0xe0,0x1b,0xb5,0xbf,0xe0,0x48,0x15,0xc0,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,
+0x3e,0x6a,0xe0,0x1c,0xb6,0xf, 0xe0,0x1c,0xb5,0x9f,0xe0,0x48,0x15,0xbe,0x3d,0x9d,
+0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xe0,0x1c,0xb6,0x2f,0xe0,0x1c,0xb5,0xbf,0xe0,0x48,
+0x15,0x88,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xe0,0x1f,0xb6,0xf, 0x15,0xe,
+0xe0,0x1f,0xb5,0x9f,0x14,0x8, 0xe0,0x1f,0xb6,0x2f,0x3e,0x6f,0xe0,0x1f,0xb5,0xbf,
+0xe0,0x4, 0xc6,0x4, 0xb5,0xc, 0xe0,0x2, 0x15,0xa0,0xb5,0x9c,0x3e,0x6f,0xe0,0x4,
+0xc6,0x8, 0xb5,0xc, 0xb5,0x9c,0xe0,0x24,0x15,0xc4,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,
+0x3e,0x6f,0xe0,0x4, 0xc6,0x18,0xb5,0xc, 0xb5,0x9c,0xe0,0x24,0x15,0xc3,0x3d,0x9d,
+0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x4, 0xc6,0x1c,0xb5,0xc, 0xb5,0x9c,0xe0,0x24,
+0x15,0xc2,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x4, 0xc6,0x20,0xb5,0xc,
+0xb5,0x9c,0xe0,0x33,0x15,0xb4,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x4,
+0xc6,0x48,0xb5,0xc, 0xb5,0x9c,0x3e,0x6f,0xe0,0x4, 0xc6,0x4c,0xb5,0xc, 0xb5,0x9c,
+0xe0,0x25,0x15,0xd1,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x6, 0xc6,0x28,
+0xb5,0xc, 0xb5,0x9c,0xe0,0x27,0x15,0x96,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,
+0xe0,0x7, 0xc6,0x74,0xb5,0xc, 0xb5,0x9c,0xe8,0x25,0x4e,0x45,0xe4,0x0, 0xc6,0x7,
+0xe0,0xb, 0x3c,0x9c,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x7, 0xc6,0x78,
+0xb5,0xc, 0xb5,0x9c,0xe0,0x47,0x15,0xe4,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0xe0,0x7,
+0xc7,0xfc,0xb5,0xf, 0xb5,0x9f,0xe0,0x1, 0x97,0xae,0xe7,0x3, 0xcf,0x9d,0xe0,0x1,
+0xb7,0xae,0xa, 0x61,0x8, 0xb2,0x3f,0x68,0xe4,0x0, 0xc7,0x7, 0xe0,0x4c,0x17,0xc0,
+0x3f,0x9e,0x89,0x4f,0xe4,0x0, 0xc4,0x3, 0xe0,0xf2,0x17,0x9a,0xe0,0x5, 0x8f,0xf,
+0xe0,0x24,0x14,0xfc,0x3c,0x98,0xaf,0x9, 0x3c,0x62,0xe0,0x5, 0x8f,0x1f,0xe0,0x5,
+0x8f,0xaf,0xaf,0x19,0xaf,0xa9,0xe0,0x6, 0xd9,0x32,0x14,0x0, 0xd4,0xea,0x3f,0x62,
+0xe4,0x0, 0xc7,0x14,0x3c,0x62,0xe0,0x49,0x17,0xee,0x3f,0x9e,0xe4,0x1, 0xc4,0x4b,
+0x94,0xbf,0xe0,0x2, 0xc4,0x3, 0x9, 0x21,0xe0,0xd6,0x0, 0xea,0x8, 0xb7,0x3a,0x68,
+0x14,0x0, 0xd4,0xd7,0xe0,0x7, 0x32,0x23,0xe0,0x4c,0x11,0xc0,0xe0,0x4c,0x13,0x55,
+0xe0,0x49,0x12,0xee,0x89,0x43,0x3c,0xe7,0x3c,0x62,0xe1,0x80,0xaa,0x73,0xe0,0x6,
+0xd9,0x83,0x3f,0xe2,0xe4,0x0, 0xc7,0x94,0x3c,0x62,0x3f,0x95,0xe4,0x1, 0xc4,0x4b,
+0xe0,0x1, 0x94,0x8f,0xe0,0x2, 0xc4,0x8, 0xe0,0x6, 0xdb,0x4a,0x3b,0x73,0x1, 0xeb,
+0xb, 0xe1,0x8, 0xb7,0x3a,0x68,0x14,0x0, 0xd4,0xb4,0xe0,0x7, 0x32,0x23,0xe0,0x4c,
+0x11,0x40,0xe0,0x4c,0x13,0x55,0xe0,0x49,0x12,0xee,0x89,0xc2,0xaa,0x12,0x3c,0xe7,
+0x3c,0x63,0xe0,0x6, 0xd9,0x78,0x3f,0xe3,0xe4,0x0, 0xc7,0x94,0x3c,0x63,0x3f,0x95,
+0xe4,0x1, 0xc4,0x4b,0xe0,0x1, 0x94,0x9f,0xe0,0x2, 0xc4,0x9, 0xc1,0x7, 0xe0,0x6,
+0xdb,0x27,0x3b,0x72,0x1, 0xeb,0xb, 0xe1,0x8, 0xb6,0x3a,0x68,0x14,0x0, 0xd4,0x91,
+0xe0,0x4c,0x11,0x40,0xe0,0x4c,0x13,0x55,0xe0,0x49,0x12,0xee,0x89,0xc2,0xaa,0x32,
+0x3c,0xe4,0x3c,0x63,0xe0,0x6, 0xd9,0x6e,0x3f,0xe3,0xe4,0x0, 0xc7,0x94,0x3c,0x63,
+0x3f,0x95,0xe4,0x1, 0xc4,0x4b,0x94,0xef,0xe0,0x2, 0xc4,0x6, 0xc1,0x7, 0xe0,0x6,
+0xdb,0x7, 0x3b,0x72,0x1, 0xec,0xb, 0x61,0x8, 0xb5,0xc0,0x7e,0x3a,0x68,0xe4,0x0,
+0xc2,0x7, 0xe0,0x4c,0x17,0xc0,0xe0,0xe, 0x3f,0x94,0x39,0xe8,0x8a,0xee,0x39,0x6f,
+0x2c,0x82,0x14,0x81,0x14,0x0, 0x74,0x81,0xd4,0x64,0xe0,0xf, 0x39,0x14,0x89,0x4f,
+0x54,0x81,0x8d,0x5f,0x3c,0x62,0xac,0xef,0xe0,0x6, 0xd8,0x5d,0x3f,0x62,0xe4,0x0,
+0xc7,0x14,0x3c,0x62,0xe0,0x49,0x17,0xee,0x3f,0x9e,0xe4,0x1, 0xc4,0x4b,0x94,0xaf,
+0xe0,0x2, 0xc4,0x2, 0xe0,0x6, 0xda,0xdc,0x3c,0x63,0xe0,0x1, 0xdd,0x3d,0x3c,0x63,
+0xe0,0x1, 0xdd,0x58,0x3c,0x65,0xc0,0x2, 0xa, 0xe1,0x8, 0xb5,0x3a,0xe8,0x14,0x0,
+0xd4,0x40,0x11,0x0, 0xe0,0x49,0x11,0xf8,0x12,0x1, 0x3c,0x62,0x3c,0xe5,0xe2,0x1,
+0xc4,0x7f,0xe0,0x1, 0xd1,0x17,0x3c,0xe2,0x3c,0x62,0xe4,0x0, 0xc4,0x94,0xe4,0x1,
+0xc4,0x4b,0x3d,0x64,0x3c,0x93,0xe0,0x2, 0xc4,0x5, 0xe0,0x6, 0xda,0xc8,0xc1,0x1,
+0xe2,0x0, 0xc9,0x4, 0x1, 0xeb,0xa, 0xe1,0x3f,0x68,0xe4,0x0, 0xc7,0x5, 0xe0,0x24,
+0x17,0xec,0xe0,0xd, 0x3f,0x9e,0xe8,0xf2,0x4e,0x3a,0x8d,0x8d,0x3d,0xfc,0x1, 0x4,
+0xe8,0xf2,0x4e,0x3a,0xae,0xd, 0xe0,0xd, 0x3f,0x9e,0xe8,0xf2,0x4e,0x3b,0x8d,0x9d,
+0x3d,0xfc,0x1, 0x4, 0xe8,0xf2,0x4e,0x3b,0xae,0x1d,0xe0,0xd, 0x3f,0x9e,0xe8,0xf2,
+0x4e,0x3e,0x8d,0xad,0x3d,0xfc,0x1, 0x4, 0xe8,0xf2,0x4e,0x3e,0xae,0x2d,0x3f,0x9e,
+0xe8,0xf2,0x4e,0xbd,0x8f,0x3f,0x3f,0x7d,0x1, 0x4, 0xe8,0xf2,0x4f,0x3d,0xaf,0x3f,
+0xe0,0xa, 0x0, 0xf0,0xe8,0x12,0x57,0xaa,0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,
+0x2f,0x86,0xe8,0x25,0x6f,0xc5,0xe8,0x25,0x6f,0xc3,0x0, 0x88,0xe2,0x0, 0xcc,0x2,
+0x1, 0x8b,0xe8,0x25,0x6c,0x45,0xe8,0x25,0x6c,0x43,0xe8,0x25,0x4c,0xc5,0x2c,0x86,
+0x3c,0x69,0xe0,0x9, 0x0, 0xf5,0x17,0x81,0x0, 0xed,0x14,0x81,0x0, 0xfa,0x8, 0xb2,
+0xe8,0x72,0x57,0xac,0xe8,0x12,0x77,0xa0,0xe8,0x25,0x4f,0xc5,0xe2,0x0, 0xcf,0x82,
+0xe0,0x0, 0x1, 0xc2,0xe0,0x40,0x17,0xc8,0xe8,0x25,0x4c,0xc5,0xe0,0x4c,0x11,0x40,
+0xe4,0x0, 0xc4,0x87,0xe8,0x12,0x77,0x9f,0x3c,0x92,0xe0,0x55,0x17,0xe0,0x15,0x6,
+0xe0,0xf2,0x14,0x4b,0xe8,0x12,0x77,0x9e,0xe0,0x7, 0xd5,0x19,0xe8,0x25,0x4f,0xc5,
+0xe0,0x24,0x14,0xfc,0xe4,0x0, 0xc7,0x87,0x15,0x3, 0x39,0x1f,0x8f,0xe2,0xe0,0xf2,
+0x14,0x42,0xc7,0xff,0xe8,0xf2,0x6f,0xcd,0xe8,0x25,0x4f,0xc5,0x3f,0xba,0x3c,0x9f,
+0xe0,0x7, 0xd5,0x5, 0xe8,0x25,0x4f,0xc5,0xe0,0x24,0x14,0xec,0xe4,0x0, 0xc7,0x85,
+0x15,0x5, 0x3c,0x9f,0xe0,0xf2,0x14,0x3a,0xe0,0x7, 0xd4,0xf9,0xe8,0x25,0x4c,0x45,
+0xd5,0x10,0xe8,0x25,0x4f,0xc5,0xe8,0xf2,0x6f,0xca,0xe8,0x25,0x4f,0xc3,0xe8,0xf2,
+0x6f,0xa6,0x9, 0x61,0xe0,0x3b,0x17,0xb6,0x0, 0xc0,0x8, 0xb2,0x39,0x68,0x14,0x1,
+0xe0,0x0, 0xd8,0xa6,0x3c,0x62,0xdf,0x8f,0xe8,0x25,0x4c,0x43,0xd7,0xcb,0xdf,0xa8,
+0x14,0x1, 0x9, 0x21,0xe0,0x70,0x0, 0xfa,0x8, 0xb4,0xe8,0x25,0x49,0x45,0xe0,0x4c,
+0x17,0xc0,0x3f,0x62,0xe4,0x0, 0xc7,0x7, 0x3f,0x9e,0x8a,0xf, 0x89,0x9f,0xe8,0x12,
+0x57,0xd2,0xe2,0x2, 0xc7,0x80,0x27,0x8a,0xe8,0x12,0x57,0xd2,0xe7,0xfd,0x17,0x7f,
+0x3f,0xde,0x3c,0x62,0xe8,0x12,0x77,0xd2,0xde,0x5e,0xe8,0x12,0x57,0xd2,0xe6,0xaf,
+0xcf,0xff,0x27,0x91,0xe8,0x12,0x57,0xd2,0x17,0x7e,0x3f,0xde,0xe8,0x12,0x77,0xd2,
+0x14,0x81,0xe8,0xf2,0x4c,0x4b,0xe0,0x3, 0xda,0xc8,0xe0,0x1, 0x24,0x4f,0xe8,0xf2,
+0x4c,0x4b,0xde,0x75,0xe8,0x12,0x57,0xd2,0xe2,0x0, 0xc7,0x82,0x27,0x91,0xe8,0x12,
+0x57,0xd2,0x17,0x7d,0x3f,0xde,0xe8,0x12,0x77,0xd2,0x14,0x80,0xe8,0xf2,0x4c,0x4c,
+0xe0,0x3, 0xda,0xb3,0xe0,0x1, 0x24,0x3e,0xe8,0xf2,0x4c,0x4c,0xde,0x83,0xe8,0x12,
+0x57,0xd2,0xe2,0x0, 0xc7,0x84,0x27,0x94,0xe8,0x12,0x57,0xd2,0x17,0x7b,0x3f,0xde,
+0xe8,0x12,0x77,0xd2,0x3c,0x62,0xe8,0x12,0x57,0xd2,0xe0,0x20,0xcf,0x80,0xe8,0x12,
+0x77,0xd2,0xe8,0xf2,0x4c,0xcd,0xc4,0x81,0xe2,0x1, 0xc4,0xff,0xde,0xae,0xe8,0x12,
+0x57,0xd2,0xe2,0x0, 0xc7,0x88,0x27,0x8a,0xe8,0x12,0x57,0xd2,0x17,0x77,0x3f,0xde,
+0xe8,0x12,0x77,0xd2,0xe8,0xf2,0x4c,0x4e,0xde,0x80,0xe8,0x12,0x57,0xd2,0xe2,0x0,
+0xc7,0xc0,0x27,0x93,0xe8,0x12,0x57,0xd2,0xe7,0xff,0x17,0x3f,0x3f,0xde,0xe8,0x66,
+0x4f,0x2c,0xe8,0x12,0x77,0xd2,0xe4,0x0, 0xc7,0x18,0xe0,0x66,0x17,0xac,0x3f,0x9e,
+0xe0,0x1, 0x94,0x2f,0x3c,0xe2,0xd3,0x22,0xe8,0x12,0x57,0xd2,0xe2,0x1, 0xc7,0x80,
+0x27,0x89,0xe8,0x12,0x57,0xd2,0xe7,0xfe,0x17,0x7f,0x3f,0xde,0xe8,0x12,0x77,0xd2,
+0xd3,0xee,0xe8,0x12,0x57,0xd2,0xe2,0x4, 0xc7,0x80,0x27,0x88,0xe8,0x12,0x57,0xd2,
+0xe7,0xfb,0x17,0x7f,0x3f,0xde,0xe8,0x12,0x77,0xd2,0xe8,0x12,0x57,0xd2,0xe2,0x8,
+0xc7,0x80,0x27,0x8d,0xe8,0x12,0x57,0xd2,0xe7,0xf7,0x17,0x7f,0x3f,0xde,0xe8,0x12,
+0x77,0xd2,0x3c,0x62,0xe8,0xf2,0x4c,0xa4,0xe0,0x3, 0xda,0x5e,0xe8,0x12,0x57,0xd2,
+0xe2,0x20,0xc7,0x80,0x27,0x8a,0xe8,0x12,0x57,0xd2,0xe7,0xdf,0x17,0x7f,0x3f,0xde,
+0x3c,0x62,0xe8,0x12,0x77,0xd2,0xde,0x82,0xe8,0x12,0x57,0xd2,0xe2,0x40,0xc7,0x80,
+0x27,0x8a,0xe8,0x12,0x57,0xd2,0xe7,0xbf,0x17,0x7f,0x3f,0xde,0x3c,0x62,0xe8,0x12,
+0x77,0xd2,0xde,0x93,0xe8,0x12,0x57,0xd1,0xe6,0xaf,0xcf,0xff,0x27,0x8c,0xe8,0x12,
+0x57,0xd1,0x17,0x7e,0x3f,0xde,0xe8,0x12,0x77,0xd1,0xe0,0x1, 0x14,0x7, 0xe8,0x24,
+0x4c,0xc3,0xda,0x6c,0xe8,0x12,0x57,0xd1,0xe2,0x0, 0xc7,0x82,0x27,0x8c,0xe8,0x12,
+0x57,0xd1,0x17,0x7d,0x3f,0xde,0xe8,0x12,0x77,0xd1,0xe0,0x1, 0x14,0x6, 0xe8,0x24,
+0x4c,0xc4,0xda,0x5c,0xe8,0x12,0x57,0xd1,0xe2,0x0, 0xc7,0x84,0x27,0x96,0xe8,0x12,
+0x57,0xd1,0x17,0x7b,0x3f,0xde,0xe8,0x12,0x77,0xd1,0xe0,0x1, 0x14,0x8, 0xe8,0x24,
+0x4c,0xc2,0xa, 0x21,0xe7,0xf4,0x0, 0xcb,0xe8,0xf2,0x6a,0x4b,0xe7,0xfe,0x0, 0xb4,
+0xe8,0xf2,0x69,0xcc,0xe7,0xfe,0x0, 0xc5,0xa, 0x61,0xe8,0xf2,0x4f,0x9e,0xe2,0x0,
+0xcf,0x85,0x1, 0x88,0x17,0x81,0xe8,0xf2,0x6f,0x9e,0x17,0x82,0xe8,0xf2,0x6f,0x9e,
+0x38,0x82,0xe2,0x0, 0xcf,0x84,0x1, 0x9c,0x8, 0xb1,0x17,0x81,0xe8,0xf2,0x6f,0x9e,
+0xe8,0xb, 0x4f,0xf9,0xe8,0xb, 0x4c,0x7a,0x37,0xa8,0x3c,0x4f,0xe0,0x6, 0xd2,0x37,
+0x14,0x1, 0xe0,0x3, 0xd7,0x5b,0x17,0x87,0x14,0x1, 0xe8,0x60,0x6f,0x9d,0xe8,0x60,
+0x6f,0x9e,0xe0,0x0, 0xda,0xe, 0x17,0x82,0xe8,0xf2,0x6f,0x9e,0x8, 0xe1,0x38,0x82,
+0xe8,0xf2,0x4c,0x4a,0xe8,0x25,0x4f,0xc5,0x3c,0x7f,0x1, 0x3, 0xe7,0xfd,0x0, 0xbf,
+0x38,0x82,0x8, 0xb1,0xe0,0x0, 0xdd,0xf9,0xdf,0xc9,0xe8,0x12,0x57,0xd2,0x2f,0x84,
+0xe8,0x12,0x57,0xd1,0x27,0x99,0x14,0x1, 0xd7,0x5a,0xe8,0x12,0x57,0xd2,0xe2,0x0,
+0xcf,0x80,0x3, 0x8, 0xe8,0x12,0x57,0xd2,0xe6,0x81,0xcf,0x9f,0xe8,0x12,0x77,0xd2,
+0xdf,0xe0,0xde,0xb3,0xe8,0xf2,0x4f,0xa8,0xe2,0x1, 0xc7,0xfd,0xe8,0xf2,0x6f,0xa8,
+0x8, 0xa1,0xe0,0xe, 0x0, 0x98,0x8, 0xe1,0xe8,0x66,0x4e,0xac,0xe8,0x25,0x4f,0x45,
+0xe4,0x0, 0xc6,0x98,0xe0,0x66,0x17,0xac,0xe2,0x0, 0xcf,0x2, 0x3f,0x9d,0xe0,0x1,
+0x97,0xaf,0x1, 0x83,0xe0,0x5, 0xc7,0x92,0xe8,0x12,0x77,0x9f,0xe8,0x25,0x4f,0xdd,
+0xe2,0x0, 0xcf,0x81,0x1, 0x96,0xe8,0x25,0x4f,0xc5,0xe0,0x4c,0x17,0x40,0xe4,0x0,
+0xc7,0x87,0x3f,0x9e,0x8f,0x8f,0xe8,0xf2,0x6f,0xcb,0xe8,0x25,0x4f,0xc5,0xe4,0x0,
+0xc7,0x87,0x3f,0x1f,0x8f,0x1e,0x17,0x80,0xe8,0xf2,0x6f,0x4c,0xe8,0x25,0x6f,0xdd,
+0x38,0x82,0x8, 0xb1,0x17,0x80,0xe8,0xf3,0x6f,0xa7,0x17,0x80,0xe8,0x24,0x57,0x1c,
+0xe7,0x7, 0xcf,0x1f,0xe8,0x24,0x77,0x1c,0xe8,0x1d,0x77,0xd8,0xe8,0x1d,0x77,0xd9,
+0xe8,0x1d,0x77,0xd6,0xe8,0x1d,0x77,0xd5,0xe8,0xf2,0x4f,0xa0,0xe8,0x60,0x6f,0x9c,
+0xe0,0x1, 0xdb,0x3b,0xe8,0x25,0x4c,0x45,0xe0,0x1, 0xdb,0x70,0x2c,0x1e,0xe8,0xf2,
+0x6c,0x23,0xdd,0xfe,0x14,0x0, 0xe0,0x3, 0xd6,0xd1,0xe8,0x72,0x54,0xab,0xe8,0x72,
+0x54,0x2c,0xe0,0xa, 0x15,0x24,0xe0,0x7, 0xd3,0x2a,0xe0,0x3, 0xd5,0x33,0xe8,0x25,
+0x4f,0x45,0xe8,0x60,0x4f,0x9e,0x37,0xde,0xe6,0xaf,0xcf,0xff,0x2f,0x82,0xd6,0xb2,
+0x17,0x83,0xe8,0xf2,0x6f,0xb0,0x8, 0xe1,0x17,0x85,0xe8,0xf2,0x6f,0xa3,0x0, 0xe2,
+0xe8,0x25,0x4f,0x43,0xe0,0xf2,0x17,0x9a,0xe0,0x1, 0xaf,0x4f,0x14,0x3, 0xe8,0x25,
+0x4f,0x3e,0xaf,0x7f,0x17,0x0, 0x8f,0xef,0xe8,0x60,0x6f,0x9c,0xe0,0x51,0x17,0xae,
+0xe0,0x1e,0xb7,0xf, 0xe0,0x1, 0x0, 0xae,0x8, 0xb3,0xe0,0x13,0x11,0x44,0xdf,0xaa,
+0x11,0x80,0xe8,0xff,0x4f,0xc9,0xe2,0x0, 0xcf,0x83,0x1, 0xab,0xdf,0x53,0x14,0x1,
+0xe0,0x0, 0xd9,0x4f,0xdf,0x72,0x3c,0x62,0xe0,0x6, 0xd1,0x69,0xe8,0xf2,0x4f,0x9a,
+0x37,0xc7,0x27,0x9d,0xe0,0x1, 0xdb,0x39,0xe0,0x2, 0xd0,0xc5,0xe8,0x60,0x4f,0x9c,
+0xe2,0x0, 0xcf,0x81,0x1, 0x6, 0xe8,0xf2,0x4f,0xab,0xe2,0x0, 0xcf,0x81,0x1, 0x89,
+0xe0,0x3, 0xdb,0x8e,0xe0,0x7, 0xd2,0x47,0xe0,0x1, 0xdc,0x61,0xe0,0x4, 0xd8,0xe4,
+0xe8,0xf2,0x4f,0x9a,0xe7,0x7, 0xcf,0x93,0xe8,0xf2,0x6f,0x9a,0xdf,0xba,0x0, 0xd2,
+0x17,0x81,0x14,0x1, 0xe8,0x25,0x6f,0xd9,0xd6,0x8a,0xe8,0xf3,0x4f,0xa9,0xe8,0xff,
+0x6f,0xc9,0x9, 0xe1,0xe2,0x0, 0xcc,0x66,0x1, 0x1c,0x2, 0x86,0xe2,0x0, 0xcc,0x55,
+0x1, 0xd, 0x17,0x81,0x0, 0x88,0xe2,0x1, 0xcc,0x8, 0x1, 0x1f,0xe2,0x1, 0xcc,0x2a,
+0x1, 0xf9,0x17,0x85,0xe8,0x24,0x6f,0xc5,0x38,0x82,0xe8,0x24,0x4f,0xc5,0xe2,0x0,
+0xcf,0x85,0x1, 0xfb,0x8, 0xb1,0xe0,0x1, 0xd9,0xb4,0x8, 0xa1,0xe0,0x33,0x0, 0xc2,
+0xe8,0x24,0x4f,0xc5,0xe2,0x0, 0xcf,0x85,0x1, 0xf0,0xe8,0x12,0x57,0xb4,0xe0,0x1,
+0x17,0x7f,0xe0,0x1, 0xb7,0xf, 0x38,0x82,0xe8,0x24,0x4f,0xc5,0xe2,0x0, 0xcf,0x85,
+0x1, 0xe4,0xe0,0x33,0x0, 0xcc,0xe8,0xe7,0x4f,0x9c,0x2f,0x9f,0xe8,0xf3,0x4f,0xa7,
+0xe2,0x0, 0xcf,0x83,0x1, 0x1a,0x8, 0xb1,0xe0,0x4, 0xdd,0xa9,0xe8,0x25,0x4f,0xa6,
+0xe8,0xf3,0x4f,0x29,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0xe4,0xe8,0xff,
+0x6f,0x49,0xe8,0x25,0x6f,0xa6,0x5, 0x87,0xe8,0x12,0x57,0xb4,0xe0,0x1, 0x17,0x7f,
+0xe0,0x1, 0xb7,0xf, 0x14,0x1, 0x8, 0xe1,0x17,0x80,0xe8,0x25,0x6f,0xa6,0x14,0x0,
+0x38,0x82,0xe8,0x51,0x4f,0x8d,0xe8,0x60,0x4f,0x34,0xe8,0x51,0x6f,0x8e,0xe8,0x55,
+0x4f,0x8e,0x3f,0x9e,0xe8,0x55,0x6f,0x8f,0x17,0x80,0xe8,0x55,0x6f,0x92,0xe8,0x25,
+0x4f,0xbe,0xe8,0xf3,0x6f,0xad,0xe0,0x66,0x17,0x96,0x97,0x1f,0xb7,0x2f,0x38,0x82,
+0xe8,0xf3,0x4f,0xa9,0xe8,0xff,0x6f,0xc9,0x38,0x82,0xe8,0x3b,0x4f,0xb4,0xc7,0x81,
+0xe2,0x1, 0xc7,0xff,0xe8,0x3b,0x6f,0xb4,0xe8,0xf3,0x6f,0x93,0x38,0x82,0x8, 0xb1,
+0xd8,0x42,0x8, 0xa1,0xe7,0xee,0x0, 0xe0,0x8, 0xb2,0x17,0x80,0xe8,0xf3,0x6f,0xa7,
+0x11,0x1, 0xe8,0x25,0x69,0x45,0xe8,0x60,0x69,0x1c,0xe0,0x1, 0xda,0x36,0xdd,0x0,
+0xe0,0x1b,0x14,0x2c,0xe0,0x6, 0xd0,0xab,0xe0,0x3, 0xd4,0x3c,0x14,0x1, 0xe0,0x3,
+0xd5,0xcd,0xe0,0x4, 0xdd,0x55,0x17,0x87,0xe8,0x60,0x6f,0x9d,0xe8,0x60,0x6f,0x9e,
+0xe0,0x5, 0xd9,0xc5,0xe0,0xe, 0x17,0x8c,0xe8,0x81,0x77,0xa8,0xe0,0x18,0x17,0xb0,
+0xe8,0x81,0x77,0xa7,0x17,0x80,0xe8,0x25,0x69,0x58,0xe8,0x24,0x77,0x9e,0x9, 0x61,
+0x8, 0xb4,0xe8,0x25,0x4f,0xd9,0xe0,0x0, 0x27,0xf8,0xe8,0xf3,0x4f,0xf0,0xe2,0x0,
+0xcf,0x81,0xe0,0x0, 0x1, 0xf2,0xe8,0x60,0x6f,0x9c,0x17,0x80,0xe8,0xb, 0x49,0xfb,
+0xe8,0x25,0x6f,0xd9,0xe8,0xb, 0x4a,0x7c,0xe8,0xff,0x49,0x49,0xe2,0x0, 0xc9,0x1,
+0xe0,0x0, 0x1, 0xe6,0xdf,0xab,0xe0,0x1, 0xd0,0x3d,0xe0,0x4, 0xd3,0xc6,0xe0,0x6,
+0xd0,0x80,0x3c,0x62,0xe0,0x0, 0xd8,0x4d,0xe0,0x8, 0x31,0xa8,0x3c,0x44,0xe0,0x6,
+0xd0,0x66,0xe0,0x1, 0xdf,0x58,0xdf,0x58,0x2c,0x68,0xe0,0x3, 0xda,0x99,0xe8,0xf3,
+0x4f,0xa6,0xe2,0x0, 0xcf,0x81,0x1, 0x89,0xe8,0x12,0x57,0x34,0xe0,0x2, 0x96,0xae,
+0xe7,0x6, 0xce,0x9f,0xe0,0x2, 0xb6,0xae,0xe0,0x3, 0xdd,0xa7,0xe8,0x51,0x4f,0xa9,
+0x2f,0x85,0xe0,0x3, 0xd3,0x2d,0xe0,0x7, 0xd1,0x3e,0xe0,0x1, 0xdb,0x58,0xdf,0x3c,
+0x2c,0x4a,0x14,0x1, 0xe0,0x5, 0xda,0x97,0xe0,0x4, 0xd7,0xd6,0xe0,0x90,0x14,0x90,
+0xe0,0xe7,0x14,0x6a,0xe0,0x1, 0xde,0x6, 0xe0,0x3, 0xd9,0xdc,0xe0,0x1, 0xdb,0x82,
+0xe0,0xe7,0x14,0xea,0xe0,0x90,0x14,0x10,0xe0,0x1, 0xdd,0xfc,0xe0,0x2, 0xd2,0x9e,
+0x14,0x2, 0xe0,0x5, 0xda,0x80,0xe0,0x5, 0xdd,0xa4,0x14,0x3, 0xe0,0x5, 0xda,0x7b,
+0xe0,0x4, 0xd1,0x31,0x14,0x4, 0xe0,0x5, 0xda,0x76,0xef,0xff,0xd7,0xa9,0xe0,0x6,
+0xd2,0x90,0xdf,0x38,0xe0,0x1, 0xd2,0xa5,0xdf,0x5b,0xe8,0xf3,0x4f,0xa9,0xe8,0xff,
+0x6f,0xc9,0xe7,0xff,0x0, 0x99,0xdf,0x59,0xe7,0xff,0x0, 0x91,0x14,0x1, 0xd5,0x57,
+0xe8,0xf3,0x4f,0xa6,0xe2,0x0, 0xcf,0x81,0x1, 0x89,0xe8,0x12,0x57,0x34,0xe0,0x2,
+0x96,0xae,0xe7,0x6, 0xce,0x9f,0xe0,0x2, 0xb6,0xae,0xa, 0x61,0xe8,0x2, 0x4f,0x0,
+0xe0,0xf3,0x17,0x82,0xe8,0xff,0x6f,0x49,0x17,0x1, 0xe0,0x4, 0xaf,0x7f,0xe0,0x4,
+0x8f,0xff,0xe8,0xff,0x6f,0xc9,0x17,0x80,0xe8,0xf2,0x6f,0x9a,0x17,0x87,0xe8,0x60,
+0x6f,0x9d,0xe8,0x60,0x6f,0x9e,0x38,0x82,0x8, 0xb1,0xe0,0x5, 0xdf,0xaf,0xe0,0x2,
+0xd1,0xdd,0xe0,0x1, 0xd9,0x64,0xdf,0xe3,0xe8,0xf3,0x4f,0xa9,0xe2,0x0, 0xcf,0x81,
+0x1, 0x6, 0xe2,0x0, 0xcf,0x83,0x1, 0xf9,0xde,0x60,0x0, 0xf7,0xdf,0x4a,0x0, 0xf5,
+0x8, 0xb1,0x14,0x80,0xe0,0x6, 0xd4,0xf9,0xe8,0x24,0x54,0xb3,0x14,0x12,0x8, 0xa1,
+0xe0,0xcd,0x0, 0x86,0x8, 0xb2,0xe4,0x0, 0xc4,0x7, 0xe0,0x4c,0x17,0xc0,0x3c,0x1f,
+0x89,0x48,0x3c,0x62,0xe0,0x6, 0xd4,0x28,0x14,0x0, 0xdf,0xeb,0x3f,0x62,0xe4,0x0,
+0xc7,0x14,0x3c,0x62,0xe0,0x49,0x17,0xee,0x3f,0x9e,0xe4,0x1, 0xc4,0x4b,0x94,0xff,
+0xe0,0x2, 0xc4,0x7, 0x9, 0x21,0xe0,0xcc,0x0, 0xeb,0x8, 0xb4,0xe1,0xfd,0xc0,0x36,
+0x3f,0x69,0xe4,0x0, 0xc7,0x7, 0xe0,0x4c,0x17,0xc0,0xe2,0x0, 0xcc,0x82,0x3f,0x9e,
+0x89,0xcf,0xe0,0x0, 0x1, 0x4a,0x39,0x68,0x3e,0x60,0xc6,0x2, 0xe0,0x2, 0x15,0x4a,
+0x3c,0x6c,0x14,0x80,0xe0,0x7, 0xd1,0x6f,0xe8,0x30,0x57,0x8a,0xe8,0x30,0x56,0x88,
+0x3f,0x92,0xe8,0x30,0x55,0x4, 0x3e,0x68,0xc6,0xfe,0x3f,0x6f,0xe0,0xb, 0x3f,0x2f,
+0x3d,0x7b,0x2, 0xb7,0x14,0x0, 0xe4,0x1, 0xc1,0xcb,0xdf,0xb3,0x3a,0x60,0xc2,0x2,
+0xe8,0x12,0x54,0x2d,0xe0,0x2, 0xc1,0x8a,0xe0,0x1, 0x15,0xa5,0x3d,0x64,0x3c,0xe3,
+0xe0,0x6, 0xd6,0x6, 0xe0,0x2, 0x15,0x4a,0x14,0x80,0x3c,0x64,0xe0,0x7, 0xd1,0x4b,
+0xe8,0x30,0x54,0xb, 0xe8,0x30,0x57,0x9, 0x39,0x18,0xe8,0x30,0x56,0x5, 0xc7,0x7e,
+0x3f,0xe2,0xe0,0xd, 0x3f,0xa2,0x3e,0x7d,0x2, 0x9f,0x14,0x0, 0xdf,0x92,0x3d,0x60,
+0xe8,0x12,0x54,0x2c,0xe0,0x1, 0x15,0xa5,0xc5,0x2, 0x3c,0xe3,0xe0,0x6, 0xd5,0xe8,
+0xe0,0x2, 0xc0,0x4a,0xa, 0x61,0x39,0x68,0xe0,0x5, 0xc1,0x12,0xe7,0xff,0x0, 0xb6,
+0xe0,0x80,0x95,0x9d,0xe2,0x2, 0xcd,0xc8,0x2, 0x84,0x8c,0x8e,0x3d,0x9c,0xac,0x8b,
+0xc7,0x1, 0xe7,0xff,0x0, 0xbd,0xe0,0x80,0x96,0x9e,0xe2,0x2, 0xce,0xc8,0x2, 0x84,
+0x8d,0x8f,0x3e,0x94,0xad,0x8d,0xc7,0x81,0x0, 0xd5,0x8, 0xb3,0xe1,0xff,0xc0,0x10,
+0x39,0x60,0xc1,0x2, 0x15,0x38,0x14,0x80,0x3c,0x62,0xe0,0x7, 0xd1,0xc, 0x3c,0x60,
+0x15,0x38,0x14,0x80,0xc4,0x3a,0xe0,0x7, 0xd1,0x6, 0xe8,0x2a,0x57,0xea,0xe0,0x55,
+0x15,0xe0,0x16,0x0, 0x15,0xc, 0x14,0x81,0x3f,0xfc,0x1, 0xab,0xc7,0xa0,0xe8,0x2a,
+0x56,0x6b,0x37,0xa1,0xe0,0x55,0x17,0x20,0x3f,0x9e,0x36,0x21,0x3e,0x1f,0x15,0x8c,
+0x15,0x1, 0x3f,0xfc,0x1, 0xb0,0x14,0x0, 0xdf,0x44,0xe0,0x3, 0x11,0x2f,0x11,0x9c,
+0xe8,0x12,0x54,0x2d,0x3d,0x60,0x3c,0xe2,0x3d,0xe3,0xc5,0x2, 0xe0,0x6, 0xd5,0x98,
+0x3d,0x60,0xe8,0x12,0x54,0x2c,0x3c,0xe2,0x3d,0xe3,0xc5,0x3a,0xe0,0x6, 0xd5,0x90,
+0xe0,0x1, 0xc1,0x4b,0xe2,0x8, 0xc9,0x10,0x1, 0xec,0xe0,0x0, 0xc0,0x70,0x9, 0xe1,
+0xe1,0x80,0x97,0x1b,0xe2,0x2, 0xcf,0x48,0x2, 0x8c,0xe1,0x2d,0x3f,0x3a,0xe1,0x2e,
+0x3f,0x4a,0x36,0xa1,0x3e,0x92,0x94,0xd, 0xe0,0xe, 0x34,0xbe,0x3f,0x48,0xb7,0xd,
+0xc6,0x1, 0x0, 0xc3,0xe1,0x80,0x97,0x1f,0xe2,0x2, 0xcf,0x48,0x2, 0xcb,0xe1,0x2d,
+0x3f,0x3b,0x3c,0xe0,0xc4,0xba,0x36,0xa1,0x3e,0x99,0xe1,0x2e,0x3f,0x4b,0x94,0x8d,
+0xe0,0xe, 0x35,0x3e,0x3f,0x49,0xb7,0xd, 0xe7,0xff,0x0, 0xbd,0x8, 0xb2,0x14,0x2,
+0xdf,0x0, 0xe0,0x2, 0x11,0x0, 0xe8,0x30,0x55,0x84,0xe8,0x30,0x55,0x8, 0xe8,0x12,
+0x54,0x2d,0x3c,0xe2,0xe0,0x6, 0xd5,0x54,0xe8,0x30,0x55,0x85,0xe8,0x30,0x55,0x9,
+0xe8,0x12,0x54,0x2c,0x3c,0xe2,0x9, 0x21,0xe0,0xca,0x0, 0xca,0x8, 0xb4,0xe2,0x0,
+0xcc,0x82,0x3a,0x69,0xe0,0x0, 0x2, 0xda,0xe0,0xe, 0x34,0xa1,0xe0,0x4c,0x17,0xba,
+0x3f,0x9e,0x8c,0x8f,0x39,0x68,0xe0,0x6, 0xd2,0xcb,0x3f,0xe4,0xe4,0x0, 0xc7,0x87,
+0xe0,0x4c,0x11,0xc0,0x39,0x9f,0x8d,0x53,0x8c,0xe3,0x3c,0x62,0xe0,0x6, 0xd2,0xd3,
+0x8c,0xa3,0x3c,0x62,0xe0,0x6, 0xd2,0xf5,0x3f,0xe4,0xe4,0x0, 0xc7,0x83,0xe0,0x24,
+0x14,0xfc,0x3c,0x9f,0x3c,0x62,0xe0,0x6, 0xd3,0xa, 0x8c,0x83,0x3c,0x62,0x34,0xa3,
+0xe0,0x6, 0xd3,0x7a,0x8c,0x93,0x3c,0x62,0x34,0xa3,0xe0,0x6, 0xd3,0x8c,0x8c,0xb3,
+0x3c,0x62,0xe0,0x6, 0xd3,0x9f,0x3c,0x62,0x3c,0xe4,0xe0,0x0, 0xdb,0x93,0x15,0x80,
+0x3d,0x6b,0x3c,0xeb,0x3c,0x62,0xe0,0x6, 0xd3,0x1c,0x14,0x80,0x3c,0x62,0xe0,0x6,
+0xd3,0x45,0x39,0xe2,0x14,0x0, 0xe4,0x1, 0xc1,0xcb,0xde,0xa3,0xe4,0x0, 0xc1,0x14,
+0xe0,0x2, 0xc1,0x80,0xe8,0x12,0x54,0x2d,0xe0,0x49,0x15,0x6e,0x15,0x8a,0x3d,0x12,
+0x3c,0xe3,0xe0,0x6, 0xd4,0xf5,0xe0,0x4a,0x15,0x3e,0xe8,0x12,0x54,0x2c,0x15,0x8a,
+0x3d,0x12,0x3c,0xe3,0xe0,0x6, 0xd4,0xec,0x3c,0x64,0xa, 0x21,0xe0,0x2f,0x0, 0x9a,
+0x8, 0xb1,0xc0,0x76,0xe4,0x0, 0xc4,0x5, 0xe0,0x24,0x17,0xec,0xe0,0xe, 0x3c,0x1f,
+0xe0,0x48,0x17,0xc2,0xe0,0x7, 0x95,0x6f,0x3d,0xee,0x75,0x1, 0x3e,0x6e,0xe0,0x7,
+0x95,0x7f,0x3e,0xee,0x75,0x2, 0x3c,0x6e,0xe0,0x8, 0x95,0xf, 0x3c,0xe0,0x75,0x3,
+0xc4,0x8a,0xe0,0x7, 0x95,0x5f,0x75,0x4, 0xe0,0x7, 0x97,0xcf,0x77,0x85,0x8f,0x8e,
+0x57,0x1, 0xe6,0xac,0xcd,0x6f,0xe7,0x2, 0xcf,0x2f,0x77,0x1, 0x57,0x1, 0xe7,0x0,
+0xcf,0x2a,0x77,0x1, 0xe6,0xaa,0xcd,0x6f,0x57,0x1, 0x37,0xc6,0xe7,0x8, 0xcf,0x2a,
+0x77,0x1, 0x57,0x1, 0xe7,0xa, 0xcf,0x2f,0x77,0x1, 0x57,0x1, 0xe7,0x6, 0xcf,0x2f,
+0x77,0x1, 0x57,0x2, 0x8f,0x9b,0xe7,0x2, 0xcf,0x2f,0x77,0x2, 0xe6,0xac,0xcd,0xef,
+0x57,0x2, 0xe7,0x0, 0xcf,0x2b,0x77,0x2, 0xe6,0xaa,0xcd,0xef,0x57,0x2, 0x37,0xc6,
+0xe7,0x8, 0xcf,0x2b,0x77,0x2, 0x57,0x2, 0xe7,0xa, 0xcf,0x2f,0x77,0x2, 0x57,0x2,
+0xe7,0x6, 0xcf,0x2f,0x77,0x2, 0x8f,0xac,0x57,0x3, 0xe6,0xac,0xce,0x6f,0xe7,0x2,
+0xcf,0x2f,0x77,0x3, 0x57,0x3, 0xe7,0x0, 0xcf,0x2c,0x77,0x3, 0xe6,0xaa,0xce,0x6f,
+0x57,0x3, 0x37,0xc6,0xe7,0x8, 0xcf,0x2c,0x77,0x3, 0x57,0x3, 0xe7,0xa, 0xcf,0x2f,
+0x77,0x3, 0x57,0x3, 0xe7,0x6, 0xcf,0x2f,0x77,0x3, 0x57,0x4, 0x8f,0xbd,0xe7,0x2,
+0xcf,0x2f,0x77,0x4, 0xe6,0xac,0xce,0xef,0x57,0x4, 0xe7,0x0, 0xcf,0x2d,0x77,0x4,
+0xe6,0xaa,0xce,0xef,0x57,0x4, 0x37,0xc6,0xe7,0x8, 0xcf,0x2d,0x77,0x4, 0x57,0x4,
+0xe7,0xa, 0xcf,0x2f,0x77,0x4, 0x57,0x4, 0xe7,0x6, 0xcf,0x2f,0x77,0x4, 0x57,0x5,
+0x8f,0xc8,0x3c,0x60,0xe7,0x2, 0xcf,0x2f,0x77,0x5, 0xe6,0xac,0xce,0xef,0x57,0x5,
+0xc4,0x2, 0xe7,0x0, 0xcf,0x2d,0x77,0x5, 0xe6,0xaa,0xce,0xef,0x57,0x5, 0x37,0xc6,
+0xe7,0x8, 0xcf,0x2d,0x77,0x5, 0x57,0x5, 0xe7,0xa, 0xcf,0x2f,0x77,0x5, 0x57,0x5,
+0xe7,0x6, 0xcf,0x2f,0xe1,0xc0,0xb7,0x39,0xe0,0x6, 0xd3,0x0, 0x3c,0x60,0xc4,0x6,
+0xe0,0x6, 0xd3,0x14,0x3c,0x60,0xc4,0x8, 0xe0,0x6, 0xd3,0x9, 0x3c,0x60,0xc4,0xa,
+0xe0,0x6, 0xd3,0x13,0x15,0x5, 0xe0,0x49,0x14,0xba,0x14,0x3c,0xe0,0x6, 0xd4,0x6f,
+0xc0,0xa, 0x8, 0xe1,0x16,0x80,0xe8,0x1, 0x4d,0x80,0xe0,0x0, 0x15,0xa, 0x3c,0xed,
+0x3d,0xfd,0x2, 0x8a,0x16,0x80,0xe8,0x1, 0x4d,0x91,0xe0,0x0, 0x15,0xa, 0x3c,0xed,
+0x3d,0xfd,0x2, 0x90,0x38,0x82,0x3f,0x6d,0xc7,0x3b,0x37,0x21,0x3f,0x1a,0x8f,0x9e,
+0xc6,0x81,0xe0,0xc, 0x37,0xa8,0x8f,0xae,0x3f,0xcc,0x37,0xa1,0x3f,0x98,0xb4,0x8f,
+0x0, 0xe8,0x3f,0x6d,0xe0,0x0, 0xc7,0x44,0x37,0x21,0x3f,0x1a,0x8f,0x8e,0xc6,0x81,
+0xe0,0xc, 0x37,0xa8,0x8f,0x9e,0x3f,0xcc,0x37,0xa1,0x3f,0x98,0xb4,0x8f,0x0, 0xe1,
+0xe8,0x45,0x4f,0x6b,0xe8,0x25,0x4f,0xa7,0xe0,0x0, 0x27,0xc7,0x8, 0xb2,0xe8,0x12,
+0x57,0xb4,0xe8,0x12,0x54,0xa7,0xe0,0x1, 0x96,0xaf,0x16,0x1, 0xe7,0x7, 0xce,0x9c,
+0xe0,0x1, 0xb6,0xaf,0x3f,0xe9,0xe0,0xa, 0xc7,0xa8,0xe4,0x0, 0xc7,0x6, 0x96,0xf,
+0xe1,0x2, 0x17,0xaa,0xe0,0xd, 0x3f,0x9e,0xb6,0xd, 0x3e,0x69,0xe0,0xa, 0xc6,0x2c,
+0x96,0xc, 0xb6,0x1d,0x3e,0x69,0x3e,0xe9,0xe0,0xa, 0xc6,0x2a,0xe0,0xa, 0xc6,0xae,
+0x95,0xc, 0x95,0x8d,0x3d,0x7b,0x5, 0x9e,0x96,0x8c,0x3f,0x9e,0xb6,0xaf,0x15,0x0,
+0xe8,0x30,0x57,0xc, 0xe8,0x30,0x57,0x8d,0x39,0x68,0xe1,0x2f,0x3f,0xde,0x37,0xa1,
+0x3c,0x9f,0xe0,0x1, 0xdb,0x23,0x3c,0x62,0xdf,0x96,0xe8,0x12,0x57,0x34,0x17,0x80,
+0xe0,0x1, 0x96,0xae,0xe7,0x7, 0xce,0x9f,0xe0,0x1, 0xb6,0xae,0xe8,0x25,0x6f,0xa7,
+0x9, 0x61,0x96,0x8d,0x0, 0xe3,0x38,0x82,0x17,0x0, 0xe8,0x1, 0x4e,0x0, 0xe0,0x0,
+0x15,0x8a,0x3d,0x6e,0x3e,0x7e,0x2, 0x8a,0x17,0x0, 0xe8,0x1, 0x4e,0x11,0xe0,0x0,
+0x15,0x8a,0x3d,0x6e,0x3e,0x7e,0x2, 0x8e,0x38,0x82,0x3f,0xee,0xc7,0xbb,0x37,0xa1,
+0x3f,0x9b,0x8e,0x9f,0x8f,0xaf,0x36,0xa8,0x3f,0xcd,0x3f,0x98,0xc7,0x1, 0xad,0xf,
+0x0, 0xea,0x3f,0xee,0xe0,0x0, 0xc7,0xc4,0x37,0xa1,0x3f,0x9b,0x8e,0x8f,0x8f,0x9f,
+0x36,0xa8,0x3f,0xcd,0x3f,0x98,0xc7,0x1, 0xad,0xf, 0x0, 0xe5,0x8, 0xb1,0xe0,0x47,
+0x17,0xb4,0x15,0x30,0x14,0x80,0x3c,0x6f,0xe0,0x6, 0xde,0xcd,0xe0,0x4c,0x16,0x40,
+0x8e,0xdc,0x17,0x1, 0xe6,0xad,0xce,0xdd,0xe0,0xb, 0x37,0x28,0x37,0x28,0xe7,0x5,
+0xcd,0xbd,0xe7,0x5, 0xcf,0x3d,0xe8,0x23,0x75,0xdc,0xe7,0xff,0x16,0x81,0xe8,0x23,
+0x77,0x5d,0xe0,0x4, 0xae,0xc8,0xe0,0x2, 0x8f,0x3c,0xe8,0x23,0x55,0xec,0xe6,0xad,
+0xcf,0x5e,0xe7,0x5, 0xcd,0xbe,0xe8,0x23,0x75,0xec,0xe0,0x4, 0xae,0xe8,0xe8,0x23,
+0x56,0xed,0xe7,0x5, 0xce,0xbe,0xe8,0x48,0x4f,0x40,0xe8,0x23,0x76,0xed,0xe0,0x2,
+0xaf,0x8, 0xe0,0x0, 0x17,0x41,0xe0,0x2, 0xaf,0x48,0xe0,0x1, 0x8f,0x4c,0xe8,0x23,
+0x56,0xe4,0xe6,0xad,0xcf,0x5e,0xe7,0x5, 0xce,0xbe,0xe8,0x23,0x76,0xe4,0xe0,0x0,
+0x16,0xc6,0xe0,0x2, 0xae,0xe8,0xe8,0x23,0x57,0xe5,0xe7,0x5, 0xcf,0xbe,0xe8,0x23,
+0x77,0xe5,0x8, 0xe1,0xe0,0x45,0x17,0xda,0x17,0x0, 0xaf,0xf, 0x16,0xff,0xaf,0x1f,
+0xae,0xaf,0xaf,0x3f,0xaf,0x4f,0xaf,0x5f,0xaf,0x6f,0xaf,0x7f,0xe0,0x1, 0xaf,0xf,
+0xe0,0x1, 0xaf,0x1f,0xe0,0x2, 0xaf,0xf, 0xe0,0x2, 0xae,0x9f,0xe0,0x2, 0xaf,0x2f,
+0xe0,0x2, 0xaf,0x3f,0x38,0x82,0xe8,0x45,0x4f,0xda,0xe0,0x45,0x17,0x5a,0xe2,0x0,
+0xcf,0x87,0xe0,0x0, 0x2, 0xf0,0xe8,0x45,0x4f,0xda,0xe2,0x0, 0xcc,0x3, 0xe4,0x0,
+0xc7,0x96,0x3f,0x9e,0xe0,0x2, 0xb4,0x5f,0xe0,0x0, 0x1, 0x62,0x8e,0x89,0xc6,0x81,
+0xe2,0x1, 0xc6,0xff,0xe8,0x45,0x4f,0xda,0x15,0x80,0xe4,0x0, 0xc7,0x96,0x15,0x7f,
+0x3f,0x9e,0x3e,0x6b,0xe0,0x7, 0xae,0xef,0xe8,0x45,0x4f,0xda,0xe4,0x0, 0xc7,0x96,
+0x3f,0x9e,0x3f,0x9b,0xe0,0x7, 0xad,0xf, 0xe8,0x45,0x4f,0xda,0xe4,0x0, 0xc7,0x8b,
+0x3f,0x9b,0xc7,0x96,0x37,0xa1,0xc5,0x81,0x3f,0x9e,0xe2,0x0, 0xcd,0x86,0xb6,0xf,
+0x1, 0xec,0xe8,0x45,0x6e,0x6e,0xe8,0x45,0x6e,0x6f,0xe8,0x45,0x6e,0x70,0xe8,0x45,
+0x6e,0x71,0xe8,0x45,0x6e,0x72,0xe8,0x45,0x4f,0xda,0xe4,0x0, 0xc7,0x96,0x3f,0x9e,
+0xe0,0x7, 0xae,0xf, 0xe8,0x45,0x6e,0x6e,0xe0,0xa4,0x16,0x58,0xe8,0x45,0x4f,0xda,
+0xe4,0x0, 0xc7,0x96,0x3f,0x9e,0xe0,0x2, 0xb6,0x6f,0x97,0x99,0x37,0xcf,0x3e,0xaf,
+0xe2,0x0, 0xce,0x81,0x5, 0x15,0xe8,0x45,0x4f,0xda,0x16,0x82,0xe4,0x0, 0xc7,0x96,
+0x3f,0x9e,0xe0,0x7, 0xae,0x9f,0x17,0x81,0xe8,0x45,0x6f,0xf0,0xe8,0x45,0x4f,0xda,
+0xe4,0x0, 0xc7,0x96,0x3f,0x1f,0xe0,0xae,0x17,0xfc,0xe0,0x2, 0xb7,0xfe,0x14,0x0,
+0xe8,0x45,0x4f,0xda,0xc7,0x81,0xe8,0x45,0x6f,0xda,0x38,0x82,0x16,0x81,0xe7,0xff,
+0x0, 0xa3,0x14,0x1, 0x0, 0xfb,0x3f,0xe8,0xc7,0xfd,0x3f,0x6f,0xe2,0x1, 0xc7,0x7f,
+0xe2,0x0, 0xcf,0x4, 0xe0,0x0, 0x2, 0xec,0x37,0xa8,0x37,0xc7,0xe0,0x23,0x17,0x10,
+0x3f,0x9e,0x97,0x8f,0x8e,0xa9,0x3f,0x82,0x8, 0xb3,0xe8,0x48,0x4e,0x3a,0x97,0x29,
+0xe2,0x0, 0xce,0x1, 0x97,0xb9,0x1, 0xb8,0xe7,0x8, 0xcf,0x6c,0xb7,0x29,0x17,0x2,
+0xe7,0x8, 0xcf,0xee,0xe2,0x0, 0xcc,0x7, 0xb7,0xb9,0x1, 0xbe,0x17,0x80,0xaf,0x89,
+0x17,0x80,0xe7,0x7, 0xce,0x9f,0xae,0xa9,0x3e,0xea,0xe4,0x0, 0xc6,0x87,0x3f,0x6c,
+0xe0,0x4c,0x15,0x40,0x3d,0x1d,0xc7,0x7e,0x10,0x84,0x8d,0x89,0x38,0x9a,0xe2,0x1,
+0xc7,0x7f,0x11,0x1, 0xc5,0x5, 0x3e,0xef,0xc6,0x82,0x36,0xa1,0x3e,0x99,0x89,0x81,
+0x96,0xd, 0xe2,0x0, 0xcc,0x4, 0xe7,0xe, 0xce,0x23,0xb6,0xd, 0x1, 0x9f,0xe2,0x0,
+0xcf,0x1, 0x2, 0x9c,0xe7,0x5, 0xce,0x32,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3f,0xfb,
+0xb6,0xd, 0x5, 0xea,0x9, 0xe1,0xe2,0x0, 0xce,0x2, 0x1, 0x87,0x15,0x81,0xe7,0x8,
+0xcf,0x6b,0xb7,0x29,0x17,0x6, 0x0, 0xc5,0x15,0x82,0xe7,0x8, 0xcf,0x6b,0xb7,0x29,
+0x17,0x7, 0xe7,0xff,0x0, 0xbf,0x17,0x81,0x0, 0xc3,0x3e,0xef,0xc6,0x82,0x36,0xa1,
+0x3e,0x99,0x89,0x8a,0x96,0xd, 0xe7,0x5, 0xce,0x33,0x0, 0xdf,0x17,0x80,0x17,0x0,
+0xaf,0x89,0x3f,0xed,0xe7,0x7, 0xcf,0x9e,0xaf,0xa9,0x38,0x82,0x38,0x82,0x17,0x80,
+0xe8,0x45,0x6f,0xed,0xe0,0x45,0x16,0xda,0x17,0x80,0xe8,0x45,0x4f,0x5a,0x3f,0xfe,
+0x4, 0x82,0x38,0x82,0x3f,0x6f,0xe4,0x0, 0xc7,0x16,0xc7,0x81,0x3f,0x1d,0xe0,0x7,
+0x8e,0x6e,0xe8,0x45,0x4f,0x6d,0xe2,0x1, 0xc7,0xff,0x3f,0x1c,0xe8,0x45,0x6f,0x6d,
+0x0, 0xed,0xe2,0x0, 0xcc,0x1, 0x1, 0x5, 0xe2,0x0, 0xcc,0x2, 0x1, 0x2, 0x14,0x0,
+0x38,0x82,0x8, 0xb3,0x39,0x68,0xde,0xd7,0x3c,0x62,0xdf,0xf4,0xe0,0x47,0x17,0xb4,
+0xe0,0x3, 0x31,0x24,0x39,0x9f,0x3c,0xe3,0xde,0xe7,0xe0,0x45,0x17,0xda,0xe0,0x1,
+0xa9,0x2f,0x15,0x10,0xe0,0x1, 0xa9,0x3f,0x3c,0xe3,0xe0,0x1, 0xa9,0x4f,0xe0,0x45,
+0x14,0x74,0xe0,0x1, 0xa9,0x5f,0xe0,0x1, 0xa9,0x6f,0xe0,0x1, 0xa9,0x7f,0xe0,0x6,
+0xdc,0xf6,0x9, 0xa1,0xe7,0xff,0x0, 0xbd,0x8, 0xb5,0x39,0x69,0x3a,0xe8,0xde,0xb3,
+0xe0,0xf, 0x31,0x24,0xe0,0x45,0x12,0x74,0xe0,0x47,0x14,0xb4,0x3c,0x9f,0x15,0x10,
+0x3c,0x64,0xe0,0x6, 0xdc,0xe4,0x3d,0x62,0x3c,0xe4,0x3c,0x65,0xdf,0x35,0xe0,0x45,
+0x11,0xda,0x3c,0xe4,0x3c,0x65,0xde,0xb8,0xe0,0x1, 0xa9,0x23,0xe0,0x1, 0xa9,0x33,
+0xe0,0x1, 0xa9,0x43,0xe0,0x1, 0xa9,0x53,0xe0,0x1, 0xa9,0x63,0xe0,0x1, 0xa9,0x73,
+0xa, 0xa1,0xe7,0xff,0x0, 0x96,0xe8,0x45,0x4f,0xf0,0x27,0x93,0xe8,0x48,0x4f,0x3a,
+0x96,0xa8,0xc7,0x7e,0xe2,0x0, 0xcf,0x1, 0xe6,0xa2,0xce,0xad,0x2, 0x8b,0x3f,0x6f,
+0xc7,0x2, 0x37,0x21,0x3c,0x1e,0x97,0x88,0xc6,0x85,0xe7,0x8, 0xcf,0xed,0xb7,0x88,
+0x38,0x82,0xc7,0x82,0x37,0xa1,0x3f,0x98,0x97,0xf, 0xc6,0x81,0xe7,0x8, 0xcf,0x6d,
+0xb7,0xf, 0x0, 0xf7,0x8, 0xb1,0xe0,0x1, 0xd3,0xe6,0xe8,0x12,0x57,0xaa,0x14,0x1,
+0xe0,0x6, 0x97,0xcf,0xe8,0x24,0x57,0x1c,0xe6,0xaf,0xcf,0xff,0xe7,0x9, 0xcf,0x1f,
+0xe8,0x24,0x77,0x1c,0xe0,0x1, 0xd3,0x47,0x17,0x81,0x14,0x0, 0xe8,0x45,0x6f,0xdd,
+0x8, 0xa1,0xe0,0xc1,0x0, 0xe3,0xe2,0x0, 0xcc,0x7, 0x2, 0x8e,0x8, 0xb2,0x39,0x68,
+0xe0,0x45,0x14,0x74,0xdf,0xc1,0xe0,0x45,0x14,0x74,0xe0,0x6, 0xd0,0x87,0x3c,0x62,
+0xdf,0xda,0x14,0x1, 0x9, 0x61,0x14,0x0, 0x38,0x82,0xe8,0x45,0x4f,0xdb,0xe8,0x45,
+0x4f,0x5a,0x3f,0x7f,0x5, 0x8d,0xe8,0x45,0x4f,0x5b,0xe0,0x45,0x17,0xda,0xe4,0x0,
+0xc7,0x16,0x3f,0x9e,0xe0,0x2, 0x94,0x5f,0xe2,0x1, 0xc4,0x7f,0x0, 0xdd,0x14,0x0,
+0x38,0x82,0x8, 0xb1,0xc0,0x7c,0x17,0x80,0xe8,0x45,0x6f,0xdd,0x17,0x7f,0xe8,0x45,
+0x6f,0xdb,0x3c,0xe0,0xe8,0x45,0x6f,0x5c,0x3c,0x60,0xe8,0x45,0x6f,0xde,0xc4,0x84,
+0xe8,0x45,0x6f,0xdf,0xc4,0x2, 0xe8,0x45,0x6f,0xe0,0xe8,0x45,0x6f,0xe1,0xe8,0x45,
+0x6f,0xe2,0xe8,0x45,0x6f,0xe3,0xe8,0x45,0x6f,0xea,0xe8,0x45,0x6f,0x6b,0xe8,0x45,
+0x6f,0xec,0xe0,0x0, 0xdf,0x54,0xdf,0xca,0x2c,0x4, 0x17,0x83,0xe8,0x45,0x6f,0xdd,
+0x54,0x1, 0x54,0x82,0xe0,0x0, 0xdf,0x6d,0xc0,0x4, 0x8, 0xe1,0x8, 0xb2,0x39,0x68,
+0xe8,0x45,0x4f,0xdd,0xe2,0x0, 0xcf,0x81,0x1, 0x5, 0x21,0x12,0x9, 0x21,0xe0,0xc0,
+0x0, 0x9b,0xe8,0x24,0x57,0x9c,0xe6,0xaf,0xcf,0xff,0x2f,0x86,0xe8,0x24,0x57,0x9c,
+0xe6,0xa2,0xcf,0xff,0x27,0x83,0xe0,0x1, 0xd2,0x85,0xd6,0x7e,0x0, 0xea,0x9, 0x61,
+0xe8,0x24,0x57,0x9c,0xe6,0xaf,0xcf,0xff,0x2f,0x86,0xe8,0x24,0x57,0x9c,0xe6,0xa2,
+0xcf,0xff,0x27,0x97,0x8, 0xb1,0xe0,0x1, 0xd2,0x75,0x17,0x80,0xe0,0x45,0x16,0xda,
+0xe8,0x45,0x4f,0x6d,0x3f,0xfe,0x4, 0x83,0x14,0x0, 0x8, 0xe1,0xe0,0xe, 0x3e,0x9f,
+0x8f,0x4e,0x2f,0x5, 0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x0, 0xf3,0x14,0x1, 0x0, 0xf6,
+0x17,0x80,0xe0,0x45,0x16,0xda,0xe8,0x45,0x4f,0x6d,0x3f,0xfe,0x4, 0x83,0x14,0x0,
+0x38,0x82,0xe0,0xe, 0x3e,0x9f,0x8f,0x4e,0x2f,0x5, 0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0x0, 0xf3,0x14,0x1, 0x38,0x82,0xe2,0x0, 0xcc,0x4, 0x2, 0x87,0xe0,0x45,0x17,0xda,
+0x3c,0x1f,0xe0,0x2, 0x8c,0x48,0x38,0x82,0x14,0x0, 0x0, 0xfe,0x8, 0xb2,0xe8,0x24,
+0x57,0x9c,0x39,0x68,0xe6,0xaf,0xcf,0xff,0x2f,0x86,0xe8,0x24,0x57,0x9c,0xe6,0xa2,
+0xcf,0xff,0x27,0x83,0xe0,0x1, 0xd2,0x36,0xe2,0x0, 0xc9,0x4, 0xe0,0x45,0x17,0x5a,
+0x2, 0x8e,0x39,0x1e,0xe0,0x2, 0x8f,0xc2,0xe8,0x45,0x4e,0xed,0x3f,0xfd,0x3, 0x89,
+0x3f,0x1f,0x8f,0xce,0x14,0x0, 0xe1,0x28,0x3c,0xf, 0x9, 0x61,0x17,0x80,0x0, 0xf5,
+0x14,0x1, 0x0, 0xfc,0x8, 0xb1,0xe0,0x5, 0xdf,0xa7,0xe0,0x45,0x17,0xda,0x17,0x2,
+0xaf,0x4f,0xaf,0x5f,0xaf,0x6f,0xaf,0x7f,0xe0,0x1, 0xaf,0xf, 0xe0,0x1, 0xaf,0x1f,
+0x17,0x80,0xe8,0x24,0x57,0x1c,0xe7,0x4, 0xcf,0x1f,0xe8,0x24,0x77,0x1c,0xe8,0x24,
+0x57,0x1f,0xe7,0xa, 0xcf,0x1f,0xe8,0x24,0x77,0x1f,0xe8,0x25,0x6f,0x8c,0xe8,0x12,
+0x57,0x34,0xe8,0x33,0x6f,0xb1,0xe0,0x1, 0x96,0xae,0xe7,0x7, 0xce,0x9f,0xe0,0x1,
+0xb6,0xae,0x8, 0xe1,0xe8,0x45,0x4f,0xdd,0xe2,0x0, 0xcf,0x81,0x1, 0xad,0xe8,0x45,
+0x4f,0xdb,0xe8,0x45,0x6f,0xdc,0xe8,0x45,0x4f,0xeb,0xc7,0x81,0xe8,0x45,0x6f,0xeb,
+0xe8,0x45,0x4f,0xea,0xc7,0x81,0xe8,0x45,0x6f,0xea,0xe0,0x45,0x17,0xda,0xe8,0x45,
+0x4e,0xea,0xe8,0x45,0x4f,0x5b,0xe4,0x0, 0xc7,0x16,0x3f,0x9e,0xe0,0x7, 0x8f,0xef,
+0x3f,0xfd,0x2, 0x92,0x17,0x80,0xe8,0x45,0x6f,0xea,0xe8,0x45,0x4f,0xdb,0xc7,0x81,
+0xe8,0x45,0x6f,0xdb,0xe8,0x45,0x4f,0xdb,0xe8,0x45,0x4f,0x5a,0x3f,0x7f,0x5, 0x84,
+0x17,0x83,0xe8,0x45,0x6f,0xdd,0x38,0x82,0x8, 0xb4,0xe8,0x45,0x49,0xeb,0xe8,0x45,
+0x49,0x5c,0xe8,0x25,0x4c,0x45,0x3c,0xe3,0xe0,0x2, 0xde,0x18,0xe8,0x45,0x4f,0x5d,
+0xe2,0x0, 0xcf,0x1, 0xe0,0x0, 0x1, 0xc0,0xe8,0x45,0x4f,0xdc,0xe8,0x45,0x4e,0xda,
+0x3e,0xff,0x5, 0xad,0xe8,0x45,0x4f,0xdc,0x3a,0x63,0xe4,0x0, 0xc7,0x96,0xe0,0x45,
+0x11,0xda,0x3f,0x93,0xe0,0x2, 0x96,0xdf,0x3f,0xe2,0xe4,0x0, 0xc7,0x8b,0x3f,0x94,
+0xc7,0x96,0x37,0xa1,0x3f,0x93,0x94,0xf, 0x24,0x1a,0xe6,0xa8,0xcf,0x8d,0xe2,0x0,
+0xcf,0x87,0xe8,0x25,0x6f,0x27,0x2, 0x93,0x37,0x3f,0xe2,0x1, 0xc7,0x5f,0x27,0xf,
+0xe2,0x1, 0xc6,0xff,0xe2,0x0, 0xce,0x83,0x1, 0x2, 0xdc,0x33,0xe8,0x24,0x57,0x9c,
+0x39,0x94,0xe6,0xab,0xcf,0xff,0x27,0x92,0x17,0x82,0xaf,0xc3,0xe8,0x45,0x4f,0xdb,
+0xe8,0x45,0x4f,0x5a,0x3f,0x7f,0x2, 0x87,0x17,0x82,0xe8,0x45,0x6f,0xdd,0x17,0x80,
+0xe8,0x33,0x6f,0xb2,0xa, 0x21,0xe0,0xbd,0x0, 0xff,0x17,0x81,0x0, 0xef,0x8, 0xb5,
+0xe1,0xff,0xc0,0x38,0xe0,0x4c,0x17,0xba,0x34,0xa1,0x3c,0x9f,0x8a,0x19,0x39,0xe0,
+0x17,0x8c,0xc1,0xa6,0xe0,0x1f,0x17,0x7f,0x8a,0x89,0xaf,0xa3,0xe0,0x8e,0x3a,0x5e,
+0x39,0x68,0x3c,0xef,0x3d,0x65,0x3c,0x6e,0xe0,0x6, 0xda,0x91,0x3f,0xe0,0xc7,0x82,
+0xe1,0x80,0xb4,0x9f,0x3f,0xf3,0x1, 0xfd,0x3d,0x60,0x15,0x80,0xc5,0x2, 0x3c,0xe2,
+0x3c,0x62,0xe0,0x1, 0xd7,0x9a,0xe8,0x55,0x4f,0xa4,0x11,0x80,0x6f,0xa6,0xe2,0x0,
+0xca,0x4, 0xe8,0x55,0x4f,0xa5,0x71,0x95,0x6f,0xa7,0xe0,0xf, 0x31,0x41,0x77,0x96,
+0x77,0x98,0x1, 0x16,0x3d,0x65,0xc5,0xc, 0x3c,0x63,0x14,0x84,0xe0,0x6, 0xda,0x5a,
+0x3d,0x63,0x3d,0xe4,0xe0,0x6, 0xda,0xb9,0xe0,0x41,0x3c,0xc9,0x3c,0x60,0xc4,0x26,
+0xe0,0x6, 0xd0,0xde,0x3c,0x62,0xdb,0xa7,0xe0,0x0, 0xc0,0x48,0xa, 0xe1,0x14,0xff,
+0x69,0xa8,0x0, 0xf5,0xe2,0x0, 0xcc,0x2, 0xe0,0x3b,0x17,0x36,0xe0,0x40,0x17,0xc8,
+0xe0,0x6f,0x39,0xae,0xe2,0x0, 0xcc,0x85,0x2, 0xb, 0xe8,0x30,0x56,0x83,0xe0,0x2,
+0x17,0x0, 0xe0,0x9, 0x37,0x39,0x3e,0x9f,0x34,0xc8,0x3f,0xfd,0x1, 0x82,0x38,0x82,
+0x8f,0xf, 0x3f,0x49,0xe1,0x80,0xaf,0x1f,0x0, 0xf9,0x8, 0xb5,0xe2,0x0, 0xcc,0x2,
+0xe0,0x3b,0x17,0xb6,0xe0,0x40,0x11,0x48,0xe0,0x62,0x39,0xaf,0xe2,0x0, 0xcc,0x85,
+0x2, 0x1c,0x34,0x21,0xe0,0x4c,0x16,0xba,0x3e,0x98,0x8f,0x1d,0xe0,0x14,0x17,0xa8,
+0xe0,0x8e,0x3f,0x5f,0x39,0xea,0x8d,0xd, 0x3a,0x69,0x3c,0x6e,0x3c,0xef,0xe0,0x6,
+0xda,0x26,0x17,0x81,0xe8,0x30,0x52,0x83,0x37,0xb4,0xe0,0x41,0x3f,0x8f,0x3a,0x92,
+0xe2,0x1, 0xc7,0xff,0x39,0x75,0x1, 0x82,0xa, 0xe1,0x97,0x3, 0x3f,0x79,0x5, 0x4,
+0x8f,0x2, 0x3f,0x5f,0xaf,0x2, 0xc1,0x82,0xc1,0x1, 0x0, 0xf5,0x8, 0xb5,0x39,0xe8,
+0xe0,0x1, 0xd2,0xb4,0xe2,0x0, 0xc9,0x82,0x39,0x68,0xe0,0x3b,0x17,0xb6,0xe0,0x40,
+0x14,0x48,0xe8,0x30,0x55,0x3, 0x14,0xa0,0xe0,0x68,0x39,0xaf,0xe0,0x6, 0xda,0xbb,
+0x21,0x4, 0x3c,0xe3,0x14,0x7, 0xdd,0x79,0xe8,0x12,0x57,0xaa,0x11,0x5, 0xe0,0x6,
+0x97,0xcf,0xe8,0x24,0x57,0x1c,0xe6,0xa1,0xcf,0xff,0xe7,0x5, 0xcf,0x1f,0xe0,0x13,
+0x12,0x44,0xe0,0x3b,0x12,0xb6,0xe8,0x24,0x77,0x1c,0x3c,0x64,0xe0,0x5, 0xd8,0xcf,
+0x3c,0xe2,0x3c,0x63,0xdf,0x88,0x3c,0xe3,0x3c,0x65,0xd9,0x18,0xdd,0xe3,0x14,0x1,
+0xde,0xe, 0xe0,0xa4,0x15,0x58,0x3c,0xe2,0x3c,0x63,0xdf,0x98,0xe0,0x1, 0xd2,0x84,
+0x2c,0x13,0xc1,0x7f,0xe0,0x43,0x39,0x2, 0xe3,0xff,0xc9,0x7f,0x1, 0xe7,0x3c,0xe3,
+0xe0,0x3b,0x14,0x36,0xd9,0x3, 0xe8,0x25,0x4c,0x43,0xdd,0x24,0xe0,0x3b,0x14,0x36,
+0xa, 0xa1,0xe7,0xf7,0x0, 0x83,0xa, 0xe1,0x8, 0xb3,0x17,0x80,0x39,0xe8,0xe8,0x12,
+0x77,0xe0,0xe0,0x2, 0xdd,0x46,0xe2,0x0, 0xcc,0x1, 0x39,0x68,0x1, 0x83,0x3c,0x63,
+0xdf,0xa6,0x3c,0x62,0x9, 0xe1,0x8, 0xb3,0xe8,0x25,0x49,0xc5,0xe0,0x1, 0xd2,0x5c,
+0x24,0x3, 0x14,0x0, 0x9, 0xe1,0xe8,0x60,0x4f,0x9d,0x14,0x1, 0x37,0xd3,0xe6,0xaf,
+0xcf,0xff,0x27,0xf9,0xe0,0x2, 0x34,0x33,0xe8,0x60,0x4f,0x9e,0xe2,0x1, 0xc1,0x7f,
+0x3f,0xc2,0xe8,0x60,0x6f,0x9e,0xdd,0xcb,0x3c,0x63,0xdf,0xd7,0x24,0x6b,0xe0,0x1,
+0xd2,0x43,0x2c,0x68,0xe8,0x60,0x4f,0x9d,0xe2,0x0, 0xc9,0x81,0xe3,0x2, 0x3f,0xd2,
+0x1, 0x9, 0xe8,0x60,0x69,0x1d,0xe0,0x0, 0xd8,0x3d,0xe0,0x1, 0xd0,0xcd,0x14,0x1,
+0x0, 0xda,0xe2,0x1, 0xc1,0x7b,0x0, 0xf6,0x8, 0xb4,0xe8,0x25,0x49,0x45,0x3a,0x68,
+0xe0,0x1, 0xd2,0x2a,0x24,0x3, 0x14,0x0, 0xa, 0x61,0xe8,0x60,0x4f,0x9e,0x37,0xd2,
+0xe6,0xaf,0xcf,0xff,0x27,0xb8,0x39,0xe8,0x14,0x1, 0xdd,0xa1,0x3c,0x62,0xe0,0x2,
+0xde,0x41,0x24,0x72,0xe8,0x25,0x4c,0xdf,0x3c,0x62,0xe0,0x2, 0xdd,0x65,0x3c,0xe2,
+0x3c,0x63,0xe0,0x6, 0xd8,0x7d,0xe8,0x72,0x54,0x2b,0x3d,0xe2,0xe0,0xd8,0x15,0xe,
+0xe0,0xc3,0x14,0xc4,0xe0,0x6, 0xd3,0x8b,0x24,0x5f,0xe8,0x66,0x4c,0xac,0x3c,0x62,
+0xe0,0x2, 0xdd,0x52,0xe0,0x1, 0xd2,0x0, 0x2c,0x57,0x22,0x2, 0xdd,0x53,0x3c,0x62,
+0xe0,0x2, 0xdc,0xe4,0x14,0x0, 0xe0,0x2, 0xdd,0x59,0x17,0x81,0xe8,0x60,0x4f,0x1e,
+0x39,0x7f,0x37,0xb2,0xe3,0xf, 0x3f,0x5f,0x1, 0x8, 0xe8,0x60,0x6f,0x9e,0xe0,0x1,
+0xd0,0x83,0xd7,0xef,0x14,0x1, 0x0, 0xc1,0xe2,0x1, 0xc7,0xfb,0x0, 0xf7,0x8, 0xb3,
+0x39,0x68,0xe0,0x1, 0xd1,0xf2,0xe8,0x60,0x4f,0x9d,0x27,0x85,0xe0,0x13,0x11,0xc4,
+0xdf,0x7b,0x24,0xa, 0xe8,0x60,0x4f,0x9e,0x27,0x86,0xe0,0x13,0x11,0xc4,0x3c,0x62,
+0xdf,0xa4,0x24,0x8, 0x9, 0xe1,0x3c,0x63,0xe0,0x5, 0xd8,0x9, 0xe0,0x1, 0xd1,0xdd,
+0x0, 0xf0,0x3c,0x63,0xe0,0x5, 0xd8,0x3, 0xe0,0x1, 0xd1,0xd7,0x0, 0xf1,0xe0,0xd,
+0x0, 0xd9,0xe8,0x12,0x57,0xb4,0xe0,0x2, 0x94,0x2f,0xe6,0xad,0xcc,0x78,0xe4,0x0,
+0xcc,0x1, 0x38,0x82,0x17,0x80,0xe0,0x6a,0x3f,0x90,0xe0,0x6a,0x3f,0x9c,0x17,0x81,
+0xe0,0x6a,0x3f,0x98,0x17,0x82,0xe0,0x6a,0x3f,0x9a,0xe0,0x6a,0x3f,0x9b,0x17,0x83,
+0xe0,0x6a,0x3f,0x91,0xe0,0x6a,0x3f,0x92,0xe0,0x6a,0x3f,0x9d,0xe0,0x6a,0x3f,0x9e,
+0xe0,0x6a,0x3f,0x99,0x38,0x82,0x8, 0xb1,0xc, 0x3f,0xc0,0x76,0xe0,0x60,0x38,0x88,
+0xe0,0x60,0x3c,0x9, 0x70,0x85,0xe0,0x60,0x38,0x8a,0x74,0x4, 0x70,0x83,0xe0,0x60,
+0x3c,0xc, 0xe0,0x60,0x38,0x8b,0x74,0x2, 0x70,0x81,0x3b,0x0, 0xe8,0x12,0x57,0xb5,
+0xe0,0x1, 0x97,0x4f,0xe6,0xaf,0xcf,0x7e,0x27,0xc, 0xe8,0x12,0x57,0x34,0x97,0x2e,
+0xe6,0xaf,0xcf,0x7e,0x27,0x6, 0xe8,0x12,0x57,0x5a,0xcf,0x1, 0xe8,0x12,0x77,0x5a,
+0xe0,0x1, 0x97,0x4f,0xe6,0xa8,0xcf,0x7e,0x27,0x14,0xe8,0x12,0x57,0x34,0x97,0x2e,
+0xe6,0xa8,0xcf,0x7e,0x27,0xe, 0xe8,0x12,0x57,0x2e,0x16,0x0, 0x96,0xce,0xe7,0x2,
+0xce,0x9c,0xb6,0xce,0xe8,0x12,0x57,0x5a,0xe0,0x1, 0xcf,0x0, 0xe8,0x12,0x77,0x5a,
+0xe0,0x1, 0x97,0x4f,0xe6,0xad,0xcf,0x7e,0x27,0xc, 0xe8,0x12,0x57,0x34,0x97,0x2e,
+0xe6,0xad,0xcf,0x7e,0x27,0x6, 0xe8,0x12,0x57,0x5a,0xcf,0x4, 0xe8,0x12,0x77,0x5a,
+0xe0,0x1, 0x97,0x4f,0xe6,0xa6,0xcf,0x7e,0x27,0x14,0xe8,0x12,0x57,0x34,0x97,0x2e,
+0xe6,0xa6,0xcf,0x7e,0x27,0xe, 0xe8,0x12,0x57,0x32,0x16,0x1, 0x96,0x8e,0xe7,0x6,
+0xce,0x9c,0xb6,0x8e,0xe8,0x12,0x57,0x5a,0xe0,0x4, 0xcf,0x0, 0xe8,0x12,0x77,0x5a,
+0xe0,0x1, 0x97,0xcf,0xe6,0xab,0xcf,0xff,0x27,0x8e,0xe8,0x12,0x57,0xb4,0x97,0xaf,
+0xe6,0xab,0xcf,0xff,0x27,0x88,0xe0,0x0, 0xdb,0x24,0xe8,0x12,0x57,0xda,0xcf,0x90,
+0xe8,0x12,0x77,0xda,0xe8,0x12,0x57,0x35,0xe0,0x1, 0x97,0xce,0xe6,0xa9,0xcf,0xff,
+0x27,0x98,0xe8,0x12,0x57,0xb4,0x96,0xaf,0xe6,0xa9,0xce,0xfd,0x26,0x92,0x96,0x8f,
+0x16,0x1, 0xe7,0x1, 0xce,0x9c,0xb6,0x8f,0x16,0x0, 0xe0,0x3, 0x96,0xcf,0xe7,0x4,
+0xce,0x9c,0xe0,0x3, 0xb6,0xcf,0xe8,0x12,0x57,0xda,0xcf,0xc0,0xe8,0x12,0x77,0xda,
+0xe0,0x1, 0x97,0xce,0xe6,0xaa,0xcf,0xff,0x27,0x98,0xe8,0x12,0x57,0xb4,0x96,0xaf,
+0xe6,0xaa,0xce,0xfd,0x26,0x92,0x96,0x8f,0x16,0x1, 0xe7,0x0, 0xce,0x9c,0xb6,0x8f,
+0x16,0x0, 0xe0,0x3, 0x96,0xcf,0xe7,0x5, 0xce,0x9c,0xe0,0x3, 0xb6,0xcf,0xe8,0x12,
+0x57,0xda,0xcf,0xa0,0xe8,0x12,0x77,0xda,0x17,0x80,0xe0,0x1, 0xb7,0xce,0x17,0x81,
+0xe0,0x61,0x3f,0x91,0x38,0x83,0x50,0x85,0x54,0x4, 0xe0,0x60,0x38,0x98,0x50,0x83,
+0xe0,0x60,0x3c,0x19,0x54,0x2, 0xe0,0x60,0x38,0x9a,0x50,0x81,0xc0,0xa, 0xe0,0x60,
+0x3c,0x1c,0xf, 0xa8,0xe0,0x60,0x38,0x9b,0x8, 0xa1,0x38,0x0, 0x8, 0xb1,0xc, 0x3f,
+0xc0,0x76,0xe0,0x60,0x38,0x88,0xe0,0x60,0x3c,0x9, 0x70,0x85,0xe0,0x60,0x38,0x8a,
+0x74,0x4, 0x70,0x83,0xe0,0x60,0x3c,0xc, 0xe0,0x60,0x38,0x8b,0x74,0x2, 0x70,0x81,
+0x3b,0x0, 0xe8,0x12,0x57,0xb3,0x16,0x80,0x97,0x6f,0xe7,0x5, 0xcf,0x1d,0xb7,0x6f,
+0xe0,0x5, 0xd6,0xfb,0xe0,0x40,0x17,0x80,0xe0,0x61,0x3f,0x91,0x38,0x83,0x50,0x85,
+0x54,0x4, 0xe0,0x60,0x38,0x98,0x50,0x83,0xe0,0x60,0x3c,0x19,0x54,0x2, 0xe0,0x60,
+0x38,0x9a,0x50,0x81,0xc0,0xa, 0xe0,0x60,0x3c,0x1c,0xf, 0xa8,0xe0,0x60,0x38,0x9b,
+0x8, 0xa1,0x38,0x0, 0x8, 0xb1,0xc, 0x3f,0xc0,0x76,0xe0,0x60,0x38,0x88,0xe0,0x60,
+0x3c,0x9, 0x70,0x85,0xe0,0x60,0x38,0x8a,0x74,0x4, 0x70,0x83,0xe0,0x60,0x3c,0xc,
+0xe0,0x60,0x38,0x8b,0x74,0x2, 0x70,0x81,0x3b,0x0, 0xe8,0x12,0x57,0xe0,0xc7,0x81,
+0xe8,0x12,0x77,0xe0,0xe8,0x24,0x57,0x83,0xc7,0x81,0xe8,0x24,0x77,0x83,0xe8,0x25,
+0x4f,0xc2,0x27,0x90,0xe8,0x25,0x4f,0xc2,0xc7,0xff,0xe8,0x25,0x6f,0xc2,0xe8,0x25,
+0x4f,0xc2,0x2f,0x88,0xe8,0x24,0x57,0x9c,0x17,0x1, 0xe7,0x3, 0xcf,0x9e,0xe8,0x24,
+0x77,0x9c,0xe8,0x24,0x57,0x9e,0xc7,0x81,0xe8,0x24,0x77,0x9e,0xe8,0x12,0x57,0xdd,
+0x27,0x86,0xe8,0x12,0x57,0xdd,0xc7,0xff,0xe8,0x12,0x77,0xdd,0xe8,0x12,0x57,0xde,
+0x27,0x86,0xe8,0x12,0x57,0xde,0xc7,0xff,0xe8,0x12,0x77,0xde,0xe0,0x0, 0xd9,0x91,
+0xe8,0x12,0x57,0xf4,0xe3,0xff,0xcf,0xff,0x1, 0x4, 0xc7,0x81,0xe8,0x12,0x77,0xf4,
+0xe8,0x12,0x57,0xf3,0xe3,0xff,0xcf,0xff,0x1, 0x4, 0xc7,0x81,0xe8,0x12,0x77,0xf3,
+0xe0,0x8, 0x17,0x80,0xe0,0x61,0x3f,0x91,0x38,0x83,0x50,0x85,0x54,0x4, 0xe0,0x60,
+0x38,0x98,0x50,0x83,0xe0,0x60,0x3c,0x19,0x54,0x2, 0xe0,0x60,0x38,0x9a,0x50,0x81,
+0xc0,0xa, 0xe0,0x60,0x3c,0x1c,0xf, 0xa8,0xe0,0x60,0x38,0x9b,0x8, 0xa1,0x38,0x0,
+0x8, 0xb1,0xc, 0x3f,0xc0,0x76,0xe0,0x60,0x38,0x88,0xe0,0x60,0x3c,0x9, 0x70,0x85,
+0xe0,0x60,0x38,0x8a,0x74,0x4, 0x70,0x83,0xe0,0x60,0x3c,0xc, 0xe0,0x60,0x38,0x8b,
+0x74,0x2, 0x70,0x81,0x3b,0x0, 0xd5,0xb5,0xe0,0x2, 0x17,0x80,0xe0,0x61,0x3f,0x91,
+0x38,0x83,0x50,0x85,0x54,0x4, 0xe0,0x60,0x38,0x98,0x50,0x83,0xe0,0x60,0x3c,0x19,
+0x54,0x2, 0xe0,0x60,0x38,0x9a,0x50,0x81,0xc0,0xa, 0xe0,0x60,0x3c,0x1c,0xf, 0xa8,
+0xe0,0x60,0x38,0x9b,0x8, 0xa1,0x38,0x0, 0x8, 0xb2,0xc, 0x3f,0xc0,0x76,0xe0,0x60,
+0x38,0x88,0xe0,0x60,0x39,0x9, 0x70,0x85,0xe0,0x60,0x38,0x8a,0x71,0x4, 0x70,0x83,
+0xe0,0x60,0x39,0xc, 0xe0,0x60,0x38,0x8b,0x71,0x2, 0x70,0x81,0x3b,0x0, 0xe8,0x12,
+0x57,0xaa,0x17,0x7f,0xe0,0x5, 0xb7,0x4f,0xe0,0x5, 0xb7,0x6f,0xe0,0x4, 0x97,0x4f,
+0xe6,0xad,0xcf,0x7e,0x27,0xf, 0xe0,0x3, 0x97,0x4f,0xe6,0xad,0xcf,0x7e,0x27,0xa,
+0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0x2, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe0,0x0,
+0xde,0x39,0xe8,0x12,0x57,0xaa,0xe0,0x4, 0x97,0x4f,0xe6,0xaf,0xcf,0x7e,0x27,0xf,
+0xe0,0x3, 0x97,0x4f,0xe6,0xaf,0xcf,0x7e,0x27,0xa, 0xe0,0x4, 0x97,0xf, 0x16,0x81,
+0xe7,0x0, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe0,0x0, 0xde,0xc, 0xe8,0x12,0x57,0xaa,
+0xe0,0x4, 0x97,0x4f,0xe6,0xae,0xcf,0x7e,0x27,0xf, 0xe0,0x3, 0x97,0x4f,0xe6,0xae,
+0xcf,0x7e,0x27,0xa, 0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0x1, 0xcf,0x1d,0xe0,0x4,
+0xb7,0xf, 0xe0,0x0, 0xde,0xf, 0xe8,0x12,0x57,0xaa,0xe0,0x4, 0x97,0x4f,0xe6,0xa2,
+0xcf,0x7e,0x27,0x15,0xe0,0x3, 0x97,0x4f,0xe6,0xa2,0xcf,0x7e,0x27,0x10,0xe0,0x4,
+0x96,0x8f,0x17,0x1, 0xe7,0xd, 0xce,0x9e,0xe0,0x4, 0xb6,0x8f,0xe8,0x24,0x57,0x9c,
+0xe7,0x1, 0xcf,0x9e,0xe8,0x24,0x77,0x9c,0xe0,0x0, 0xdd,0xb4,0xe8,0x12,0x57,0xaa,
+0xe0,0x4, 0x97,0x4f,0xe6,0xa1,0xcf,0x7e,0x27,0x15,0xe0,0x3, 0x97,0x4f,0xe6,0xa1,
+0xcf,0x7e,0x27,0x10,0xe0,0x4, 0x96,0x8f,0x17,0x1, 0xe7,0xe, 0xce,0x9e,0xe0,0x4,
+0xb6,0x8f,0xe8,0x24,0x57,0x9c,0xe7,0x1, 0xcf,0x9e,0xe8,0x24,0x77,0x9c,0xe0,0x0,
+0xdd,0x99,0xe8,0x12,0x57,0xaa,0xe0,0x4, 0x97,0x6f,0xe6,0xad,0xcf,0x7e,0x27,0x13,
+0xe0,0x3, 0x97,0x6f,0xe6,0xad,0xcf,0x7e,0x27,0xe, 0xe0,0x4, 0x97,0x2f,0x16,0x81,
+0xe7,0x2, 0xcf,0x1d,0xe0,0x4, 0xb7,0x2f,0xe8,0x24,0x57,0x1f,0xe7,0xa, 0xcf,0x1d,
+0xe8,0x24,0x77,0x1f,0xe0,0x4, 0x97,0x4f,0x37,0x4f,0x27,0x1f,0xe0,0x3, 0x97,0x4f,
+0x37,0x4f,0x27,0x1b,0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0xf, 0xcf,0x1d,0xe0,0x4,
+0xb7,0xf, 0xe8,0x24,0x57,0x9f,0xe8,0x24,0x57,0x1c,0xe6,0xa5,0xcf,0xff,0xe7,0x4,
+0xcf,0x1f,0xe8,0x24,0x77,0x1c,0x17,0x0, 0xe8,0x24,0x57,0x9f,0xe7,0xa, 0xcf,0x9e,
+0xe8,0x24,0x77,0x9f,0xdb,0x68,0xdb,0x99,0xe8,0x12,0x57,0xaa,0xe0,0x4, 0x97,0x6f,
+0xe6,0xaf,0xcf,0x7e,0x27,0x1f,0xe0,0x3, 0x97,0x6f,0xe6,0xaf,0xcf,0x7e,0x27,0x1a,
+0xe0,0x4, 0x96,0xaf,0x17,0x1, 0xe7,0x0, 0xce,0x9e,0xe0,0x4, 0xb6,0xaf,0xe0,0x4,
+0x96,0xef,0xe7,0x1, 0xce,0x9e,0xe0,0x4, 0xb6,0xef,0xe0,0x6, 0x96,0xaf,0xe7,0x1,
+0xce,0x9e,0xe0,0x6, 0xb6,0xaf,0xe8,0x24,0x56,0x9c,0xe7,0x8, 0xce,0x9e,0xe8,0x24,
+0x76,0x9c,0xe0,0x4, 0x97,0x6f,0xe6,0xae,0xcf,0x7e,0x27,0x1e,0xe0,0x3, 0x97,0x6f,
+0xe6,0xae,0xcf,0x7e,0x27,0x19,0xe0,0x4, 0x97,0x2f,0x16,0x81,0xe7,0x1, 0xcf,0x1d,
+0xe0,0x4, 0xb7,0x2f,0xe8,0x45,0x4f,0x5d,0x3f,0x7d,0x1, 0x8e,0xe8,0x23,0x56,0x82,
+0xe2,0x0, 0xce,0x85,0x1, 0x89,0x16,0x80,0xe8,0x33,0x6e,0xb2,0xe8,0x45,0x6f,0x5e,
+0x17,0x2, 0xe8,0x45,0x6f,0x5d,0xe0,0x4, 0x97,0x4f,0xe6,0xab,0xcf,0x7e,0x27,0xd,
+0xe0,0x3, 0x97,0x4f,0xe6,0xab,0xcf,0x7e,0x27,0x8, 0xe0,0x4, 0x97,0xf, 0x16,0x81,
+0xe7,0x4, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe0,0x4, 0x97,0x4f,0xe6,0xaa,0xcf,0x7e,
+0x27,0xd, 0xe0,0x3, 0x97,0x4f,0xe6,0xaa,0xcf,0x7e,0x27,0x8, 0xe0,0x4, 0x97,0xf,
+0x16,0x81,0xe7,0x5, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe0,0x4, 0x97,0x4f,0xe6,0xa9,
+0xcf,0x7e,0x27,0x21,0xe0,0x3, 0x97,0x4f,0xe6,0xa9,0xcf,0x7e,0x27,0x1c,0xe0,0x4,
+0x97,0xf, 0x16,0x81,0xe7,0x6, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe8,0x33,0x4f,0xb1,
+0x27,0x8b,0xe8,0x24,0x51,0x1c,0xe6,0xa3,0xc9,0x72,0x29,0x6, 0x3c,0x62,0xe0,0x5,
+0xda,0xcd,0xe8,0x33,0x69,0x31,0x17,0x0, 0xe8,0x24,0x57,0x9c,0xe7,0xc, 0xcf,0x9e,
+0xe8,0x24,0x77,0x9c,0xe8,0x12,0x57,0xaa,0xe0,0x4, 0x97,0x4f,0xe6,0xac,0xcf,0x7e,
+0x27,0x31,0xe0,0x3, 0x97,0x4f,0xe6,0xac,0xcf,0x7e,0x27,0x2c,0xe0,0x4, 0x97,0xf,
+0x16,0x81,0xe7,0x3, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe8,0x24,0x57,0x1c,0xe6,0xa3,
+0xcf,0x7e,0x2f,0x4, 0xe8,0x25,0x4f,0x28,0x2f,0xf, 0xe8,0x24,0x57,0x1c,0x16,0x80,
+0xe7,0xc, 0xcf,0x1d,0xe8,0x24,0x77,0x1c,0x16,0x81,0xe0,0x1, 0x97,0x6f,0xe7,0x0,
+0xcf,0x1d,0xe0,0x1, 0xb7,0x6f,0x16,0x81,0xe8,0x25,0x6e,0xa8,0xe0,0x1, 0x97,0xef,
+0xe6,0xa9,0xcf,0xaf,0xe8,0x25,0x6f,0xbe,0xe8,0x25,0x4f,0xb0,0xc7,0x81,0xe8,0x25,
+0x6f,0xb0,0xe0,0x10,0x17,0x80,0xe0,0x61,0x3f,0x91,0x38,0x83,0x50,0x85,0x51,0x4,
+0xe0,0x60,0x38,0x98,0x50,0x83,0xe0,0x60,0x39,0x19,0xe0,0x60,0x38,0x9a,0x51,0x2,
+0x50,0x81,0xc0,0xa, 0xf, 0xa8,0xe0,0x60,0x39,0x1c,0xe0,0x60,0x38,0x9b,0x9, 0x21,
+0x38,0x0, 0xe2,0x0, 0xcc,0x1, 0x1, 0x83,0xe0,0xbd,0x0, 0xbd,0xe0,0xbd,0x0, 0xc5,
+0xe7,0xff,0x17,0xa5,0xe8,0xf3,0x6f,0xe6,0x38,0x82,0xe8,0x25,0x4f,0xad,0xc7,0x81,
+0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0x84,0x1, 0x4, 0xe8,0x25,0x6f,0xad,0x38,0x82,
+0x8, 0xb3,0xc0,0x7a,0x17,0x80,0x39,0xe0,0xe8,0x25,0x6f,0xad,0xc1,0x86,0xe0,0x5,
+0xde,0xa2,0x3c,0xe3,0xe7,0x58,0x14,0x0, 0xe0,0x5, 0xde,0xdd,0xe1,0xc0,0x8f,0xc3,
+0xe6,0xaf,0xcf,0xff,0xe0,0x0, 0x27,0xcd,0x14,0x81,0xe7,0x58,0x14,0x0, 0xe0,0x5,
+0xde,0xe9,0x14,0x80,0xe7,0x58,0x14,0x0, 0xe0,0x5, 0xde,0xe4,0x3c,0xe3,0xe0,0x14,
+0x14,0x0, 0xe0,0x5, 0xde,0xc8,0x3c,0xe0,0x39,0x68,0xc4,0x83,0xe0,0x16,0x14,0x0,
+0xe0,0x5, 0xde,0xc1,0x3c,0xe0,0x39,0x18,0xc4,0x84,0xe0,0x1a,0x14,0x0, 0xe2,0x1,
+0xc1,0x7f,0xe0,0x5, 0xde,0xb8,0x3c,0x12,0xe2,0x1, 0xc4,0x7f,0x2c,0x29,0x8f,0x83,
+0xe2,0x1, 0xcf,0x9c,0x1, 0x85,0x8f,0x93,0x2f,0x83,0x8f,0xa3,0x27,0xa1,0xe8,0x12,
+0x57,0x34,0xe0,0x3, 0x14,0x74,0xe0,0x2, 0x97,0xae,0xe0,0x2, 0x96,0xae,0xe6,0xa8,
+0xcf,0xff,0xe4,0x0, 0xcf,0x81,0xe7,0x7, 0xce,0x9f,0xe0,0x2, 0xb6,0xae,0xe0,0x0,
+0xdb,0x45,0xe8,0x12,0x57,0x34,0xe0,0x2, 0x97,0xae,0xe0,0x2, 0x96,0xae,0xe6,0xa8,
+0xcf,0xff,0xe4,0x0, 0xcf,0x81,0xe7,0x7, 0xce,0x9f,0xe0,0x2, 0xb6,0xae,0xe0,0x5,
+0xde,0x54,0xc0,0x6, 0x9, 0xe1,0x8, 0xb3,0xe8,0x27,0x49,0x96,0xe2,0x0, 0xc9,0xda,
+0x1, 0xb7,0xe8,0x12,0x57,0xaa,0xe0,0x6, 0x91,0x4f,0xe6,0xad,0xc9,0x72,0x29,0x30,
+0xe8,0x27,0x69,0x16,0xe0,0x5, 0xde,0x37,0x3c,0xe2,0xe0,0x50,0x14,0x0, 0xe0,0x5,
+0xde,0x89,0xe0,0x0, 0x14,0x46,0xe0,0x0, 0xdc,0x51,0x3c,0xe2,0xe0,0x20,0x14,0x0,
+0xe0,0x5, 0xde,0x80,0xe0,0x0, 0x14,0x46,0xe0,0x0, 0xdc,0x48,0x3c,0xe3,0xe7,0xee,
+0x14,0x0, 0xe0,0x5, 0xde,0x77,0xe0,0x1, 0x14,0xa5,0xe7,0xee,0x14,0x1, 0xe0,0x5,
+0xde,0x71,0xe0,0x1, 0x14,0x95,0xe7,0xee,0x14,0x2, 0xe0,0x5, 0xde,0x6b,0x14,0xa7,
+0xe7,0xee,0x14,0x3, 0xe0,0x5, 0xde,0x66,0x9, 0xa1,0xe0,0xbc,0x0, 0x96,0x9, 0xe1,
+0x8, 0xb2,0xc0,0x7e,0x39,0x68,0xe0,0x5, 0xde,0x6, 0xe0,0x5, 0xde,0x4, 0x3c,0xe0,
+0xc4,0x82,0xe7,0x8b,0x14,0x31,0xe0,0x5, 0xde,0x3e,0x3c,0xe0,0xc4,0x83,0xe7,0x8b,
+0x14,0x34,0xe0,0x5, 0xde,0x38,0x4c,0x82,0x29,0x30,0xe0,0x1, 0xcc,0x80,0xe7,0x8b,
+0x14,0x31,0xe0,0x5, 0xde,0x47,0x4c,0x83,0xe0,0x1, 0xcc,0x80,0xe7,0x8b,0x14,0x34,
+0xe0,0x5, 0xde,0x40,0xe0,0x25,0x14,0xae,0xe7,0xf0,0x14,0x52,0xe0,0x5, 0xde,0x23,
+0xe8,0x25,0x4f,0xae,0xe2,0x0, 0xcf,0x81,0x1, 0x92,0x14,0x82,0xe7,0xeb,0x14,0x46,
+0xe0,0x5, 0xde,0x30,0xe0,0x1, 0x14,0xc1,0xe7,0xeb,0x14,0x29,0xe0,0x5, 0xde,0x2a,
+0xe0,0x1, 0x14,0xd1,0xe7,0x8b,0x14,0x33,0xe0,0x5, 0xde,0x24,0xe0,0x5, 0xdd,0xd5,
+0xe0,0x5, 0xdd,0xd3,0xc0,0x2, 0x9, 0x61,0xe6,0xa9,0xcc,0x99,0xe7,0x8b,0x14,0x31,
+0xe0,0x5, 0xde,0x18,0x4c,0x83,0xe6,0xa9,0xcc,0x99,0x0, 0xd1,0x8, 0xb2,0x2c,0x37,
+0x17,0x81,0xe8,0x25,0x6f,0xac,0x39,0x68,0xe8,0x24,0x57,0xa1,0xe8,0x12,0x77,0xd5,
+0xe8,0x24,0x57,0xa1,0xe7,0x9, 0xcf,0x98,0xe8,0x24,0x77,0xa1,0xe8,0x24,0x54,0xa1,
+0xe0,0x5, 0xda,0x3e,0xe0,0xaa,0x17,0xd5,0xe8,0x24,0x77,0xdf,0x14,0x3e,0xe8,0x24,
+0x77,0xe0,0xe8,0x24,0x54,0xdf,0xe0,0x5, 0xda,0x33,0xe8,0x24,0x54,0xe0,0x14,0x3f,
+0xe0,0x5, 0xda,0x2e,0xe8,0x24,0x71,0x62,0xe8,0x24,0x71,0x63,0xe8,0x24,0x71,0x64,
+0xe8,0x24,0x71,0x65,0xe8,0x24,0x71,0x66,0xe8,0x24,0x71,0x67,0x15,0x6, 0xe0,0x49,
+0x14,0xc4,0xe0,0x0, 0x14,0x41,0x9, 0x21,0xe0,0xb4,0x0, 0xa9,0xe8,0x25,0x4f,0xac,
+0x27,0xb3,0x17,0x80,0xe8,0x25,0x6f,0xac,0x14,0x0, 0xe8,0x12,0x57,0xd5,0xe8,0x24,
+0x77,0xa1,0xe8,0x24,0x54,0xa1,0xe0,0x5, 0xda,0xb, 0xe0,0x11,0x17,0xa3,0xe8,0x24,
+0x77,0xdf,0xe0,0x11,0x17,0xaf,0xe8,0x24,0x77,0xe0,0x14,0x3e,0xe8,0x24,0x54,0xdf,
+0xe0,0x5, 0xd9,0xfe,0xe8,0x24,0x54,0xe0,0x14,0x3f,0xe0,0x5, 0xd9,0xf9,0x17,0x80,
+0xe8,0x24,0x77,0xe2,0xe8,0x24,0x77,0xe3,0xe0,0x8, 0x17,0x80,0xe8,0x24,0x77,0xe4,
+0xe8,0x24,0x77,0xe5,0xe7,0xfd,0x17,0xfe,0xe8,0x24,0x77,0xe6,0xe0,0xfe,0x17,0xff,
+0xe8,0x24,0x77,0xe7,0x0, 0xc4,0x9, 0x61,0x8, 0xb4,0x39,0xe8,0x14,0x2, 0xef,0xff,
+0xd3,0x51,0xe0,0x2, 0x12,0x49,0xe0,0x4, 0x11,0x49,0xe8,0x12,0x54,0x2d,0x3d,0xe4,
+0x3d,0x63,0x3c,0xe2,0xe0,0x5, 0xd9,0x74,0x3d,0x63,0xe8,0x12,0x54,0x2c,0x3d,0xe4,
+0xe0,0x5, 0xc5,0x12,0x3c,0xe2,0xa, 0x21,0xe0,0xb2,0x0, 0xea,0x8, 0xb4,0x39,0xe8,
+0x14,0x2, 0xef,0xff,0xd3,0x37,0xe0,0x2, 0x12,0x49,0xe0,0x4, 0x11,0x49,0xe8,0x12,
+0x54,0x2d,0x3d,0xe4,0x3d,0x63,0x3c,0xe2,0xe0,0x5, 0xd9,0x8a,0x3d,0x63,0xe8,0x12,
+0x54,0x2c,0x3d,0xe4,0xe0,0x5, 0xc5,0x12,0x3c,0xe2,0xa, 0x21,0xe0,0xb3,0x0, 0x80,
+0xe0,0x2, 0x14,0xac,0xe0,0xaf,0x0, 0xcd,0xe0,0x61,0x3f,0x2, 0xe0,0x61,0x3f,0x82,
+0xe7,0xef,0x16,0xff,0x3f,0xdd,0xe0,0x61,0x3f,0x92,0xe8,0x12,0x57,0xaa,0xe6,0xaf,
+0xcc,0x78,0xe0,0x4, 0x96,0xef,0xe7,0x0, 0xce,0x98,0xe0,0x4, 0xb6,0xef,0xe0,0x4,
+0x96,0xef,0xe7,0x1, 0xce,0x98,0xe0,0x4, 0xb6,0xef,0xe0,0x6, 0x96,0xaf,0xe7,0x0,
+0xce,0x98,0xe0,0x6, 0xb6,0xaf,0xe0,0x6, 0x96,0xaf,0xe7,0x1, 0xce,0x98,0xe0,0x6,
+0xb6,0xaf,0xe6,0xa4,0xcf,0xfe,0x27,0x87,0xe0,0x61,0x3f,0x82,0xe0,0x10,0xcf,0x80,
+0xe0,0x61,0x3f,0x92,0x38,0x82,0x8, 0xb7,0xc0,0x7e,0x39,0xe8,0x14,0x0, 0x3b,0x69,
+0x3b,0xea,0x3a,0x6b,0x11,0x0, 0xef,0xff,0xd2,0xe5,0xe0,0x49,0x12,0xee,0x3f,0xe2,
+0xe2,0x1, 0xc7,0xff,0x3c,0x6f,0x3c,0xe3,0x77,0x81,0xe0,0x5, 0xd7,0x77,0x57,0x81,
+0x3d,0xe7,0x3c,0x6f,0x3d,0x66,0x3c,0xe3,0xe0,0x5, 0xd7,0x43,0x3f,0xe2,0xe4,0x0,
+0xc7,0x94,0x3c,0x62,0x3f,0x95,0xe4,0x1, 0xc4,0x4b,0x94,0xcf,0xe0,0x2, 0xc4,0x4,
+0xc1,0x1, 0xe0,0x5, 0xd9,0x55,0xe2,0x0, 0xc9,0x4, 0x1, 0xe2,0x3c,0x63,0xdf,0xa5,
+0x3c,0xe4,0x3c,0x63,0xc0,0x2, 0xb, 0xa1,0xe0,0xb0,0x0, 0xfa,0xe8,0x24,0x4f,0xc6,
+0xe2,0x0, 0xcf,0x81,0x1, 0x84,0xe1,0x28,0x3c,0x1f,0x38,0x82,0x2f,0x84,0xe1,0x28,
+0x3c,0xf, 0x0, 0xfc,0x14,0x0, 0x0, 0xfa,0xe8,0xf3,0x4f,0xa7,0xe2,0x0, 0xcf,0x81,
+0xe0,0x1, 0x1, 0xc9,0x8, 0xb6,0xc0,0x7e,0xe8,0xd, 0x49,0x1f,0x39,0xe8,0xe0,0xf,
+0x31,0x28,0xe8,0xd, 0x49,0x20,0x14,0x0, 0x39,0x4f,0xda,0x52,0xe8,0x25,0x4f,0xc3,
+0x27,0x86,0x17,0x80,0xe8,0x48,0x69,0x84,0xe8,0x25,0x6f,0xb1,0x14,0x1, 0xef,0xff,
+0xd7,0xaf,0xe8,0x25,0x4c,0xc5,0x14,0x5, 0xef,0xff,0xd6,0xf8,0x14,0x0, 0xe0,0x0,
+0xdb,0x1f,0xe8,0x24,0x49,0xc6,0xe6,0xa9,0xc9,0x2, 0xe0,0x0, 0x29,0xf8,0xe0,0xcd,
+0x14,0x68,0xdf,0x45,0x3d,0xe3,0x3d,0x62,0x3c,0xe3,0x14,0x1, 0xdf,0x8d,0xe8,0xb,
+0x4a,0x7b,0xe8,0xb, 0x4a,0xfc,0x11,0x80,0xe8,0x24,0x57,0x9c,0xe6,0xaf,0xcf,0xff,
+0xe0,0x0, 0x2f,0xfc,0xe8,0x24,0x57,0x9c,0xe6,0xa2,0xcf,0xff,0xe0,0x0, 0x2f,0xf6,
+0xe8,0x24,0x57,0x9c,0xe6,0xae,0xcf,0xff,0xe0,0x0, 0x2f,0xf0,0xe8,0x27,0x4f,0x9b,
+0xe2,0x0, 0xcf,0x81,0xe0,0x0, 0x1, 0x6a,0xe8,0xf3,0x4b,0x29,0xe2,0x0, 0xcb,0x1,
+0xe0,0x0, 0x1, 0xe4,0xe8,0x25,0x4d,0xc3,0xe0,0x0, 0x2d,0xe0,0x75,0x81,0xd1,0xf1,
+0xe0,0x8, 0x32,0x28,0x3c,0x45,0xe0,0x5, 0xd2,0x22,0xe2,0x0, 0xc9,0x81,0x55,0x81,
+0xe0,0x0, 0x1, 0xc3,0x3d,0x62,0x3c,0xe3,0x3c,0x63,0xdf,0x56,0xe8,0x24,0x57,0x9c,
+0x17,0x0, 0xe7,0x8, 0xcf,0x9e,0xe8,0x24,0x77,0x9c,0xef,0xff,0xd7,0x2c,0xe8,0x25,
+0x4f,0xc3,0x27,0x82,0xd2,0x6f,0x14,0x1, 0xef,0xff,0xd7,0x52,0x3c,0x63,0xdf,0x77,
+0x24,0x31,0x17,0x80,0xe8,0x24,0x6f,0xc6,0xe8,0x24,0x57,0x9c,0xe6,0xa7,0xcf,0xff,
+0x27,0xa9,0xe0,0xcd,0x14,0x68,0xde,0xd1,0x15,0x80,0x3d,0x62,0x3c,0xeb,0x3c,0x6b,
+0xdf,0x33,0xd3,0x54,0xe8,0x25,0x4f,0xc3,0x27,0x82,0xd2,0x1, 0xe8,0x25,0x4c,0x43,
+0xef,0xff,0xd6,0x61,0xef,0xff,0xd7,0x7, 0xe8,0x24,0x57,0x9c,0x17,0x0, 0xe7,0x8,
+0xcf,0x9e,0xe8,0x24,0x77,0x9c,0xc0,0x2, 0xb, 0x61,0x14,0x81,0x15,0x80,0x3d,0x62,
+0x3c,0x69,0xe7,0xff,0x0, 0x8d,0x5, 0xc3,0x3d,0x62,0x3c,0xeb,0x3c,0x66,0xe7,0xff,
+0x0, 0xbe,0xe8,0x25,0x4f,0xc3,0x2f,0x9c,0xd2,0x9a,0xc1,0x81,0xe2,0x1, 0xc1,0xff,
+0xe2,0x0, 0xc9,0xbc,0xe7,0xff,0x1, 0x82,0xe0,0xcd,0x14,0x68,0xde,0x9e,0x15,0x80,
+0x3c,0x6b,0x3d,0x62,0x3c,0xeb,0xdf,0x0, 0xe8,0x25,0x4c,0x43,0xef,0xff,0xd6,0x33,
+0xe8,0x25,0x4f,0xc3,0x2f,0xd9,0xc0,0x2, 0xb, 0x21,0xe7,0xed,0x0, 0xd4,0xd2,0x3a,
+0x0, 0xe5,0x38,0x82,0x8, 0xb5,0xe8,0x12,0x52,0x34,0x17,0x1, 0xe0,0x1, 0x97,0xa4,
+0x12,0x80,0xe7,0x3, 0xcf,0x9e,0xe0,0x1, 0xb7,0xa4,0xe0,0x8, 0x17,0x0, 0xe8,0x12,
+0x50,0xa8,0x3f,0x11,0x3f,0xe1,0xb2,0x8f,0xc7,0x84,0xe0,0x40,0xb2,0x9f,0x3f,0xfe,
+0x1, 0xfb,0xe0,0xf2,0x16,0x9a,0x3f,0xe5,0x3f,0x9d,0x17,0x8, 0xe8,0x81,0x56,0x91,
+0xe0,0x2e,0x3f,0x75,0x3e,0x61,0x3a,0xed,0xb7,0x1, 0xc6,0x4, 0xe0,0x0, 0xc2,0xee,
+0xb7,0x91,0x11,0x0, 0x3f,0xe2,0x3f,0x9d,0x17,0xa, 0xe0,0x2e,0x3f,0x72,0xc6,0x81,
+0xb7,0xc, 0x3e,0xf5,0xb7,0x9c,0xc6,0x4, 0x1, 0xf5,0x3f,0x61,0xe0,0x1, 0x17,0x80,
+0xe0,0xf2,0x11,0x2, 0xe0,0x4, 0xc7,0x0, 0xe2,0x1, 0xcf,0x80,0xe0,0x0, 0x1, 0xc3,
+0x15,0x0, 0xe0,0xf3,0x15,0x82,0x3e,0xea,0x3e,0x9b,0x16,0x8, 0xe0,0x2c,0x3e,0x7a,
+0xb6,0xe, 0xb6,0x9e,0xc7,0x81,0xe2,0x1, 0xcf,0xf0,0x1, 0xef,0x17,0x0, 0xe0,0x47,
+0x17,0xe4,0x3f,0x9e,0x16,0x8, 0x3e,0xee,0xe0,0x2e,0x3f,0x7c,0x3e,0x61,0xe0,0x7,
+0xc6,0x70,0xe0,0x27,0x15,0x96,0xb7,0xc, 0x3d,0x9d,0x14,0x8, 0xb7,0x9c,0xe0,0x2a,
+0x3e,0xf8,0x3e,0x61,0xe0,0x7, 0xc6,0x74,0xb5,0xc, 0xe0,0x4c,0x14,0xc0,0xb5,0x9c,
+0xe8,0x25,0x4e,0x45,0xe4,0x0, 0xc6,0x7, 0xe0,0xb, 0x3c,0x9c,0x3d,0x9d,0xe0,0x2a,
+0x3e,0xf8,0x3e,0x61,0xe0,0x7, 0xc6,0x78,0xb5,0xc, 0xe0,0x7, 0xc0,0xfc,0xb5,0x9c,
+0xb7,0x1, 0xb7,0x91,0xe0,0x1, 0x97,0xa4,0xe7,0x3, 0xcf,0x9d,0xe0,0x1, 0xb7,0xa4,
+0xa, 0xe1,0x14,0x0, 0xe0,0x3, 0x37,0xa2,0x39,0x91,0xe0,0x9, 0x39,0x1f,0x3e,0xe8,
+0x3e,0x99,0x16,0x8, 0xe0,0x2c,0x3e,0x78,0xb6,0x3, 0xb6,0x93,0xe7,0xff,0x0, 0xbc,
+0x8, 0xb1,0xdf,0x71,0xe8,0x12,0x57,0xb5,0x16,0x81,0x97,0x2f,0xe7,0x5, 0xcf,0x1d,
+0xb7,0x2f,0xe8,0x12,0x57,0xb4,0xe0,0x1, 0x97,0x4f,0xcf,0x3c,0xe0,0x1, 0xb7,0x4f,
+0xe0,0x1, 0x97,0x6f,0xcf,0x3c,0xe0,0x1, 0xb7,0x6f,0x17,0x0, 0xe0,0x4, 0x96,0xf,
+0xe7,0x1, 0xce,0x1e,0xe0,0x4, 0xb6,0xf, 0xe0,0x4, 0x96,0xf, 0xe7,0x0, 0xce,0x1e,
+0xe0,0x4, 0xb6,0xf, 0xe8,0x12,0x57,0xae,0xb6,0x8f,0x16,0xff,0xb6,0xef,0x16,0x88,
+0xb6,0xcf,0xe0,0x1, 0x96,0x8f,0xe7,0x8, 0xce,0x9e,0xe0,0x1, 0xb6,0x8f,0xe0,0x1,
+0x16,0xea,0xe0,0x3, 0xb6,0x8f,0xe0,0x1, 0xb7,0x2f,0xe0,0x6a,0x3f,0x18,0xe0,0x61,
+0x3f,0x82,0xe0,0x2, 0xcf,0x80,0xe0,0x61,0x3f,0x92,0x8, 0xe1,0xe8,0x12,0x57,0x34,
+0x16,0x81,0xe0,0x1, 0x97,0xae,0x34,0x22,0xe7,0x3, 0xcf,0x9d,0xe0,0x1, 0xb7,0xae,
+0xe8,0x12,0x57,0xa8,0xe0,0xd, 0x3f,0x98,0xc4,0x4, 0x96,0x1d,0x3f,0x98,0xb4,0x9d,
+0x96,0x9f,0xb4,0x9f,0x16,0x80,0xe0,0x1, 0x97,0xae,0xe7,0x3, 0xcf,0x9d,0xe0,0x1,
+0xb7,0xae,0x38,0x82,0xe8,0xf2,0x4f,0x9a,0xe6,0xa9,0xcf,0xdf,0x2c,0x9, 0x2f,0x83,
+0xe7,0xfe,0x0, 0x92,0xe2,0x0, 0xcf,0x84,0x1, 0x83,0xe7,0xd5,0x0, 0xe2,0x38,0x82,
+0x8, 0xb3,0xe8,0x12,0x57,0x28,0xe0,0xd, 0x34,0x22,0x3f,0x1d,0x91,0x9e,0xe8,0x12,
+0x57,0x2e,0xe0,0x1, 0x97,0x6e,0xe2,0x0, 0xcf,0x0, 0x3, 0x4, 0x9, 0xa1,0xe0,0x61,
+0x0, 0xd0,0x39,0x68,0xdf,0xe0,0x8c,0x83,0x3c,0x62,0x9, 0xa1,0xe0,0x61,0x0, 0xd6,
+0x8, 0xb1,0xe8,0x12,0x57,0xae,0xe7,0xfe,0x16,0x80,0x97,0xf, 0xe0,0x1, 0xcf,0x0,
+0xb7,0xf, 0x97,0x2f,0x3f,0x5d,0x27,0x18,0x97,0xf, 0x16,0x81,0xe7,0x3, 0xcf,0x1d,
+0xb7,0xf, 0x97,0x2f,0xe2,0xc, 0xc7,0x0, 0x27,0x5, 0x97,0xf, 0xe7,0x2, 0xcf,0x1d,
+0xb7,0xf, 0x17,0x7f,0xe8,0x12,0x57,0xae,0xe7,0xfe,0x16,0xff,0xb7,0x6f,0x97,0xf,
+0x3f,0x5d,0xb7,0xf, 0x8, 0xe1,0x96,0x8f,0xe7,0x3, 0xce,0x9e,0xb6,0x8f,0x96,0x8f,
+0xe7,0x2, 0xce,0x9e,0xb6,0x8f,0xe0,0x1, 0x94,0x6f,0xe2,0x1, 0xc4,0x7f,0xdf,0xb9,
+0x0, 0xe9,0xe8,0xf3,0x4f,0x8c,0x3f,0x6f,0x2f,0x82,0x17,0x1, 0xe8,0xf3,0x4f,0xa7,
+0x2f,0x91,0xe8,0x25,0x4f,0xc3,0x2f,0xa7,0xe8,0xf3,0x4f,0x8a,0x3f,0x6f,0x2f,0x82,
+0x17,0x1, 0x3f,0xee,0xe0,0x0, 0xc7,0xe3,0xe0,0x2f,0x3f,0xbe,0xe2,0x1, 0xc7,0xff,
+0x0, 0x86,0xe8,0x25,0x4f,0xc3,0x2f,0x92,0xe8,0xf3,0x4f,0x8b,0xe8,0xf3,0x4f,0x2e,
+0xc7,0xff,0x3f,0xbe,0xe6,0xa2,0xcf,0x8f,0xe8,0x24,0x6f,0xca,0xe8,0x24,0x4f,0xca,
+0x2f,0x90,0x17,0x81,0xe8,0x24,0x6f,0xca,0x38,0x82,0xe8,0x25,0x4f,0xb1,0xe2,0x0,
+0xcf,0xba,0x5, 0x84,0xe0,0x3, 0x17,0xf4,0x0, 0xe0,0xe0,0x7, 0x17,0xe8,0x0, 0xdd,
+0xe8,0x24,0x4f,0xca,0xe2,0x0, 0xcf,0xfd,0x5, 0xf0,0xe0,0x0, 0x17,0xfd,0x0, 0xeb,
+0x8, 0xb1,0xdf,0xc0,0xe8,0x24,0x4f,0xca,0xe8,0x25,0x6f,0xc2,0x17,0x80,0xe8,0x24,
+0x57,0x1c,0xe7,0x3, 0xcf,0x1f,0xe8,0x24,0x77,0x1c,0xe8,0x12,0x77,0xe0,0x8, 0xe1,
+0xe8,0x12,0x57,0xaa,0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,0x27,0xa0,0x8, 0xb2,
+0xe8,0x24,0x57,0x9c,0x11,0x1, 0xe7,0xb, 0xcf,0x92,0x3c,0x62,0xe8,0x24,0x77,0x9c,
+0xef,0xff,0xd5,0x5e,0xe8,0x25,0x69,0x45,0xe8,0x25,0x69,0x43,0xe8,0x25,0x4f,0xc5,
+0xe8,0x25,0x4c,0x43,0xe0,0xe, 0x37,0xa4,0xe0,0x47,0x17,0xb4,0x3f,0x9e,0x17,0x0,
+0xaf,0xf, 0xef,0xff,0xd4,0x78,0x9, 0x21,0xe7,0xea,0x0, 0x9d,0x38,0x82,0xe8,0x12,
+0x57,0xaa,0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,0x27,0x88,0xe8,0x24,0x57,0x9c,
+0x17,0x1, 0xe7,0x7, 0xcf,0x9e,0xe8,0x24,0x77,0x9c,0x38,0x82,0xe8,0x12,0x57,0xaa,
+0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,0x27,0xa3,0xe8,0x24,0x57,0x9c,0xe6,0xa8,
+0xcf,0xff,0x27,0x9e,0x8, 0xb1,0xe8,0x24,0x57,0x9c,0x17,0x0, 0xe7,0x7, 0xcf,0x9e,
+0x14,0x1, 0xe8,0x24,0x77,0x9c,0xef,0xff,0xd5,0x23,0x17,0x1, 0xe8,0x25,0x6f,0x45,
+0xe8,0x25,0x6f,0x43,0xe8,0x25,0x4f,0xc5,0xe8,0x25,0x4c,0x43,0xe0,0xd, 0x37,0xa4,
+0xe0,0x47,0x17,0xb4,0x3f,0x9d,0xaf,0xf, 0x8, 0xa1,0xe7,0xe8,0x0, 0xbc,0x38,0x82,
+0x8, 0xb3,0xe7,0xff,0x11,0x1, 0x11,0xff,0xef,0xff,0xd7,0xc5,0xe8,0x25,0x69,0x49,
+0x2c,0x7, 0xe0,0x5, 0x14,0x85,0x14,0x2, 0x9, 0xa1,0xe0,0x7, 0x0, 0xcf,0xef,0xff,
+0xd5,0x19,0x2c,0x9, 0xe8,0x24,0x57,0x9c,0xe6,0xac,0xcf,0xff,0x2f,0x84,0x3c,0xe3,
+0xd3,0xc4,0x0, 0xeb,0x9, 0xe1,0xe8,0x24,0x57,0x9c,0xe6,0xac,0xcf,0xff,0x27,0x82,
+0x38,0x82,0x8, 0xb1,0xdf,0xde,0xe8,0x24,0x57,0x9c,0xe6,0xac,0xcf,0xff,0x27,0xfb,
+0x8, 0xe1,0x8, 0xb1,0xef,0xff,0xd4,0xfe,0x24,0x2, 0x8, 0xe1,0xdf,0xd2,0x0, 0xfb,
+0x8, 0xb1,0x14,0x1, 0xef,0xff,0xd4,0xdc,0xef,0xff,0xd7,0x95,0x2c,0x7e,0x8, 0xe1,
+0xe8,0x12,0x57,0xb5,0xe6,0xaf,0xcc,0x78,0x97,0x2f,0xe7,0x8, 0xcf,0x18,0xb7,0x2f,
+0x97,0x2f,0xe7,0x9, 0xcf,0x18,0xb7,0x2f,0x97,0x2f,0xe7,0xe, 0xcf,0x18,0xb7,0x2f,
+0x38,0x82,0x8, 0xb1,0xe8,0x24,0x57,0x9c,0xe6,0xac,0xcf,0xff,0x2f,0x82,0xdf,0xcc,
+0xef,0xff,0xd4,0xd8,0x2c,0x3, 0x8, 0xa1,0x0, 0xd5,0x8, 0xe1,0x8, 0xb1,0xef,0xff,
+0xd7,0x72,0x2c,0x21,0xe8,0x12,0x57,0xda,0xe7,0xfe,0x17,0x7e,0x3f,0xde,0xe8,0x12,
+0x77,0xda,0xe7,0xff,0x17,0x81,0xe8,0x25,0x6f,0xc9,0xe8,0x12,0x57,0xde,0x2f,0x94,
+0xe0,0x1, 0x14,0x81,0x14,0x1, 0xd3,0x71,0xe8,0x12,0x57,0xda,0xe2,0x1, 0xc7,0x82,
+0x27,0x8a,0xe8,0x12,0x57,0xb0,0x97,0x2f,0xe0,0xfa,0x17,0x80,0xe1,0x2f,0x3f,0xbe,
+0xe8,0x12,0x77,0xde,0x8, 0xe1,0xe8,0x12,0x57,0xb4,0x16,0x81,0xe0,0x1, 0x97,0x2f,
+0xe0,0x1, 0x14,0x81,0xe7,0x5, 0xcf,0x1d,0xe0,0x1, 0xb7,0x2f,0xe0,0x1, 0x97,0x2f,
+0xe7,0x5, 0xcf,0x18,0xe0,0x1, 0xb7,0x2f,0x14,0x2, 0x0, 0xde,0x8, 0xb1,0xef,0xff,
+0xd4,0x99,0x2c,0x2, 0xdf,0x97,0x14,0x0, 0xd7,0x11,0xe0,0x1, 0x14,0x48,0xd6,0x3d,
+0xe8,0x24,0x57,0x9c,0xe6,0xac,0xcf,0xff,0x27,0x8f,0xe8,0x25,0x4f,0xc7,0x27,0x86,
+0xe8,0x25,0x4f,0xc7,0xc7,0xff,0xe8,0x25,0x6f,0xc7,0x14,0x1, 0xdf,0x92,0x14,0x1,
+0x8, 0xa1,0xe0,0xd, 0x0, 0xfc,0xe8,0xf3,0x4f,0xd2,0x27,0x86,0xe8,0x25,0x4f,0xc7,
+0x2f,0x83,0xdf,0xa5,0x0, 0xe6,0xdf,0x4d,0x0, 0xe4,0x8, 0xb4,0xdf,0x7a,0x14,0x80,
+0x3c,0x69,0xd6,0x2d,0xe0,0x5, 0xd9,0x39,0x17,0x80,0xe8,0x12,0x77,0xda,0xe0,0x61,
+0x3f,0x82,0xe7,0xbf,0x17,0x7f,0x3f,0xde,0xe0,0x61,0x3f,0x92,0xe8,0x12,0x57,0xb2,
+0x16,0x81,0x97,0xf, 0xe7,0xfb,0x11,0xff,0xe7,0x6, 0xcf,0x1d,0xe7,0xff,0x12,0x1,
+0xb7,0xf, 0xe8,0x12,0x57,0xda,0xe8,0x12,0x57,0x32,0x3f,0xd3,0xe8,0x12,0x77,0xda,
+0xe8,0x25,0x6a,0x49,0xe0,0x1, 0x97,0x8e,0x27,0xfe,0xe0,0x4, 0x14,0x80,0x14,0x1,
+0xd2,0xfc,0xe8,0x12,0x57,0xb2,0x11,0x1, 0x97,0xf, 0xe7,0x6, 0xcf,0x12,0xb7,0xf,
+0xe8,0x12,0x57,0xda,0x3f,0xd3,0x27,0xe6,0xe0,0x61,0x3f,0x82,0xe0,0x40,0xcf,0x80,
+0xe0,0x61,0x3f,0x92,0x3c,0x62,0xdf,0x45,0x14,0x80,0x3c,0x62,0xa, 0x21,0xe0,0xb,
+0x0, 0xef,0x8, 0xb1,0xe8,0xb, 0x4f,0xf9,0xe8,0xb, 0x4c,0x7a,0x37,0xa8,0x3c,0x4f,
+0xe0,0x4, 0xde,0xc5,0x17,0x81,0xe8,0xf3,0x6f,0xa9,0xe0,0x1b,0x14,0x2c,0xe8,0xff,
+0x6f,0xc9,0xe0,0x4, 0xde,0xbc,0x17,0x87,0xe8,0x60,0x6f,0x9d,0xe8,0x60,0x6f,0x9e,
+0x8, 0xe1,0x17,0x81,0xe8,0xf3,0x6f,0xa7,0xe8,0x24,0x4f,0x4a,0xe8,0x25,0x4f,0xc2,
+0x3f,0x9e,0xe8,0x25,0x6f,0xc2,0x17,0x80,0xe8,0x24,0x77,0x9e,0xe8,0x48,0x6f,0x84,
+0xe8,0x25,0x6f,0xb1,0xe8,0x25,0x4f,0xc5,0x38,0x82,0x17,0x80,0xe8,0xf3,0x6f,0xa7,
+0xe8,0x24,0x4f,0xca,0xe8,0x25,0x4f,0x42,0x37,0xc1,0x3f,0xfe,0x3, 0x8e,0xe8,0x24,
+0x4f,0x4a,0xe8,0x25,0x4f,0xc2,0x37,0x41,0x3f,0xae,0xe8,0x25,0x6f,0xc2,0x17,0x80,
+0xe8,0x24,0x77,0x9e,0xe7,0xfd,0x0, 0x8d,0xe8,0x24,0x57,0x9c,0x17,0x1, 0xe7,0x3,
+0xcf,0x9e,0xe8,0x24,0x77,0x9c,0x0, 0xf4,0xe8,0xf3,0x4f,0xd2,0x27,0x84,0xe8,0x25,
+0x4f,0xc8,0x2f,0x82,0x0, 0xdb,0x38,0x82,0x8, 0xb2,0xe8,0xb, 0x4f,0xfb,0xe8,0xb,
+0x4c,0x7c,0x37,0xa8,0x3c,0x4f,0xe0,0x4, 0xde,0x72,0xe8,0x12,0x57,0xaa,0xe0,0x6,
+0x91,0x4f,0xe6,0xaf,0xc9,0x72,0x29,0xa, 0xe8,0x25,0x4f,0xae,0xe2,0x0, 0xcf,0x81,
+0x1, 0x9a,0x3c,0x62,0xda,0x7e,0x3c,0x62,0xda,0xca,0xdf,0x50,0xdf,0x93,0xe8,0x25,
+0x4c,0x2e,0xe2,0x0, 0xcc,0x1, 0x1, 0x82,0xda,0xc2,0xe8,0x12,0x57,0xaa,0xe0,0x6,
+0x94,0x4f,0xe6,0xaf,0xcc,0x78,0x2c,0xa, 0xda,0x6c,0xdf,0xb0,0xde,0x60,0x9, 0x21,
+0xe7,0xe6,0x0, 0xe9,0x14,0x1, 0xda,0x65,0x0, 0xe9,0x14,0x1, 0x0, 0xf6,0x8, 0xb2,
+0xe8,0x48,0x4f,0xba,0xe0,0x0, 0x27,0xc9,0xe8,0x48,0x4f,0xc0,0x11,0x3b,0xe2,0x0,
+0xcf,0x80,0x17,0xbc,0xe0,0x62,0x39,0x2f,0xe8,0xf3,0x4f,0xa7,0xe2,0x0, 0xcf,0x81,
+0x1, 0x88,0xe8,0x25,0x4f,0xc3,0x27,0x85,0xe8,0x48,0x4f,0x84,0x2f,0x82,0xde,0x9,
+0xe8,0x48,0x4f,0x84,0x2f,0x86,0xe8,0x25,0x4f,0xc3,0x2f,0x83,0x3c,0x62,0xdb,0xa5,
+0xe8,0xf3,0x4f,0xa7,0xe2,0x0, 0xcf,0x81,0x1, 0x4, 0xe8,0x27,0x4f,0x9b,0x27,0xa3,
+0xe8,0x25,0x4f,0xc3,0x27,0xa0,0xe8,0x48,0x4f,0x84,0x3f,0xf2,0x1, 0x8a,0xde,0x18,
+0xde,0x26,0xe8,0x48,0x4f,0xc0,0xe2,0x0, 0xcf,0x81,0x1, 0x83,0xef,0xff,0xd3,0x2b,
+0xe8,0x48,0x4f,0x84,0xe8,0x25,0x6f,0xb1,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0,
+0xcf,0xbc,0xe8,0x48,0x6f,0x84,0x2, 0x84,0xe8,0x27,0x4f,0x9b,0x27,0x84,0x17,0x80,
+0xe8,0x48,0x6f,0x84,0x9, 0x61,0x11,0x3c,0x0, 0xc0,0x8, 0xb1,0xe8,0x27,0x4f,0x9b,
+0x27,0x88,0x17,0x80,0xe8,0x27,0x6f,0x9b,0xe8,0xf3,0x4f,0xa7,0x2f,0x9e,0xdf,0x4e,
+0xe8,0xf3,0x4f,0xd2,0xe2,0x0, 0xcf,0x81,0x1, 0x88,0xe8,0x12,0x57,0x4f,0xe2,0x0,
+0xcf,0x78,0x5, 0x83,0xe8,0xf3,0x6f,0xa7,0xe8,0xf3,0x4f,0xa7,0xe2,0x0, 0xcf,0x81,
+0xe0,0x0, 0x1, 0x4b,0x4, 0x91,0xe2,0x0, 0xcf,0x83,0xe0,0x0, 0x1, 0x5f,0x17,0x81,
+0xe8,0xf3,0x6f,0xa7,0xe0,0x0, 0x0, 0xc0,0xe8,0xf3,0x4f,0xa7,0xe2,0x0, 0xcf,0x81,
+0x1, 0xe0,0xdf,0x18,0x0, 0xde,0xe8,0x55,0x4f,0x8e,0x2f,0x89,0xe8,0xf2,0x4f,0xfa,
+0xe2,0x0, 0xcf,0x81,0x1, 0x4, 0xe8,0x60,0x4f,0xb4,0x27,0x96,0x17,0x80,0xe8,0x24,
+0x77,0x9e,0xe8,0xf3,0x4f,0x88,0xe6,0xaf,0xcf,0xff,0x27,0xa5,0xe8,0xf3,0x4f,0xd2,
+0xe2,0x0, 0xcf,0x81,0x1, 0xa0,0xe8,0x25,0x4f,0xc8,0xe2,0x0, 0xcf,0x81,0x1, 0x9b,
+0x8, 0xa1,0xe7,0xfd,0x0, 0xf8,0xe8,0xf3,0x4f,0x88,0xe6,0xaf,0xcf,0xff,0x27,0x93,
+0xe8,0x24,0x57,0x9e,0xe0,0x7, 0x16,0xe8,0xe8,0xf3,0x4f,0x9, 0xe1,0x2f,0x3f,0xbd,
+0x3f,0xfe,0x3, 0xef,0xe8,0xf3,0x4f,0xd2,0x27,0x86,0xe8,0x24,0x57,0x9e,0xe2,0x7,
+0xcf,0xe7,0x2, 0xe7,0x8, 0xe1,0xe8,0x55,0x4f,0x8e,0x2f,0x91,0xe8,0x28,0x57,0xbf,
+0xe2,0x1, 0xcf,0xc8,0x2, 0xc, 0xe8,0xf3,0x4f,0x88,0x27,0x89,0xe8,0xf2,0x4f,0xfa,
+0xe2,0x0, 0xcf,0x81,0x1, 0x4, 0xe8,0x60,0x4f,0xb4,0x27,0x84,0x8, 0xa1,0xe7,0xfd,
+0x0, 0xfd,0xe8,0x25,0x6f,0xc8,0x0, 0xe7,0x8, 0xa1,0xe7,0xfd,0x0, 0xff,0x8, 0xb1,
+0xdf,0x7d,0xe8,0x25,0x4f,0xc3,0x2f,0x8a,0xe8,0xf3,0x4f,0xa7,0xe2,0x0, 0xcf,0x81,
+0x1, 0x2, 0xde,0x35,0x8, 0xa1,0xe7,0xfe,0x0, 0xa4,0xdd,0xec,0x0, 0xfc,0xe8,0x12,
+0x57,0xb5,0x16,0x81,0x97,0x2f,0xe2,0x0, 0xcc,0x7, 0xe7,0xf, 0xcf,0x1d,0xb7,0x2f,
+0x17,0x0, 0x96,0xcf,0xe7,0xc, 0xce,0x9e,0xb6,0xcf,0x96,0xcf,0xe7,0xd, 0xce,0x9e,
+0xb6,0xcf,0x96,0xaf,0xe7,0x1, 0xce,0x9e,0xb6,0xaf,0x2, 0x85,0x97,0x4f,0xe7,0x0,
+0xcf,0x38,0xb7,0x4f,0x38,0x82,0xe8,0x12,0x57,0x33,0x17,0x80,0x96,0xee,0xe7,0x5,
+0xce,0x9f,0xb6,0xee,0x96,0xee,0xe7,0x7, 0xce,0x9f,0xb6,0xee,0xe8,0x12,0x57,0x31,
+0xb7,0xae,0x96,0x8e,0xe7,0x0, 0xce,0x9f,0xb6,0x8e,0x96,0x8e,0xe7,0x1, 0xce,0x9f,
+0xb6,0x8e,0xb7,0xee,0xe8,0x12,0x57,0x34,0xb7,0xce,0xe0,0x61,0x3f,0x92,0xe0,0x61,
+0x3f,0x91,0x38,0x82,0xe8,0x12,0x57,0xb4,0xe0,0x1, 0x17,0x7c,0xe0,0x1, 0xb7,0x6f,
+0xe0,0x1, 0x17,0x7f,0xe0,0x2, 0xb7,0x6f,0xe0,0x2, 0xb7,0x2f,0x17,0x3, 0xe0,0x1,
+0xb7,0x4f,0xe0,0x1, 0x17,0x40,0xe0,0x2, 0xb7,0xf, 0xe0,0x1, 0x97,0x4f,0xcf,0x3c,
+0xe0,0x1, 0xb7,0x4f,0x38,0x82,0xe8,0x12,0x57,0xb5,0x16,0x81,0x97,0x6f,0xe7,0x0,
+0xcf,0x1d,0xb7,0x6f,0x97,0xf, 0xe7,0x1, 0xcf,0x18,0xb7,0xf, 0x38,0x82,0xe8,0x12,
+0x57,0xb0,0xe8,0x12,0x57,0x26,0x16,0x81,0xb7,0x2f,0x97,0xf, 0xe7,0x0, 0xcf,0x1d,
+0xb7,0xf, 0x97,0xf, 0xe7,0x7, 0xcf,0x1d,0xb7,0xf, 0x38,0x82,0xe8,0x12,0x57,0xb5,
+0x17,0x1, 0x96,0xaf,0xe7,0x7, 0xce,0x9e,0xb6,0xaf,0x16,0xa0,0xe8,0x12,0x76,0xa6,
+0x96,0xaf,0xe7,0xa, 0xce,0x9e,0xb6,0xaf,0xe8,0x12,0x57,0xb0,0x96,0x8f,0xe7,0x2,
+0xce,0x9e,0xb6,0x8f,0x17,0x0, 0x96,0x8f,0xe7,0xb, 0xce,0x9e,0xb6,0x8f,0x96,0x8f,
+0xe7,0x1, 0xce,0x9e,0xb6,0x8f,0x96,0x8f,0xe7,0x8, 0xce,0x9e,0xb6,0x8f,0xb7,0x4f,
+0xe0,0x61,0x3f,0x82,0xe0,0x8, 0xcf,0x80,0xe0,0x61,0x3f,0x92,0x0, 0xc9,0xe8,0x12,
+0x57,0xb2,0x16,0x81,0x97,0x4f,0xe0,0xf, 0x16,0x77,0xe7,0xb, 0xcf,0x1d,0xb7,0x4f,
+0x97,0x4f,0xe7,0x20,0xcf,0x3c,0xb7,0x4f,0x97,0xf, 0xe7,0x6, 0xcf,0x1d,0xb7,0xf,
+0xe0,0x61,0x3f,0x82,0xe7,0xdf,0x17,0x7f,0x3f,0xde,0xe0,0x61,0x3f,0x92,0x38,0x82,
+0xe8,0x12,0x57,0xb2,0x16,0x81,0x97,0xf, 0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0x38,0x82,
+0xe8,0x12,0x57,0xb5,0x17,0x1, 0x96,0xaf,0x15,0x82,0xe7,0x3, 0xce,0x9e,0xb6,0xaf,
+0x16,0x80,0xe8,0x12,0x57,0xb3,0x96,0x6f,0xe7,0x4, 0xce,0x1d,0xb6,0x6f,0xe0,0x1,
+0xb6,0x8f,0x96,0x4f,0xe7,0x0, 0xce,0x2b,0xb6,0x4f,0xe0,0x2, 0x16,0x0, 0xb6,0xf,
+0x96,0x6f,0xe7,0x5, 0xce,0x1d,0xb6,0x6f,0x96,0xef,0xe7,0x4, 0xce,0x9e,0xb6,0xef,
+0x96,0xef,0xe7,0x0, 0xce,0x9e,0xb6,0xef,0xe0,0x61,0x3f,0x82,0xe0,0x40,0xcf,0x80,
+0xe0,0x61,0x3f,0x92,0x38,0x82,0xe8,0x12,0x57,0xb4,0x16,0x1, 0x97,0xf, 0xe7,0x9,
+0xcf,0x1c,0xb7,0xf, 0x17,0x0, 0x96,0x8f,0xe7,0x9, 0xce,0x9e,0xb6,0x8f,0x96,0x8f,
+0xe7,0xa, 0xce,0x9c,0xb6,0x8f,0x96,0x8f,0xe7,0xa, 0xce,0x9e,0xb6,0x8f,0x16,0x82,
+0xe8,0x12,0x57,0xa9,0xb6,0x8f,0x16,0x8e,0xb6,0xaf,0xe0,0x36,0x16,0xa8,0xb6,0xcf,
+0xe0,0x3, 0x16,0x88,0xb6,0xef,0xe0,0x9, 0x16,0x93,0xe0,0x1, 0xb6,0x8f,0xe0,0x1,
+0xb7,0x2f,0xe0,0x1, 0xb7,0x4f,0x38,0x82,0xe8,0x12,0x57,0xb4,0x17,0x0, 0x96,0x8f,
+0x16,0x1, 0xe7,0x6, 0xce,0x9e,0xb6,0x8f,0x96,0x8f,0xe7,0x1, 0xce,0x9c,0xb6,0x8f,
+0x96,0x8f,0xe7,0x0, 0xce,0x9c,0xb6,0x8f,0xe0,0x3, 0xb7,0x4f,0x38,0x82,0xe8,0x12,
+0x57,0xaa,0x17,0x0, 0xe0,0x7, 0xb7,0xf, 0xe0,0x6, 0x97,0x4f,0xe6,0xaf,0xcf,0x7e,
+0x27,0xf, 0xe0,0x7, 0x97,0xf, 0x16,0x81,0xe7,0x1, 0xcf,0x1d,0xe0,0x7, 0xb7,0xf,
+0xe0,0x7, 0x97,0xf, 0xe7,0x4, 0xcf,0x1d,0xe0,0x7, 0xb7,0xf, 0x38,0x82,0xe0,0x6,
+0x96,0xcf,0xe0,0x7, 0x96,0x8f,0x17,0x1, 0xe7,0x0, 0xce,0x9e,0xe0,0x7, 0xb6,0x8f,
+0xe0,0x7, 0x96,0x8f,0xe7,0x3, 0xce,0x9e,0xe0,0x7, 0xb6,0x8f,0x0, 0xf0,0x8, 0xb1,
+0xe8,0x12,0x57,0xb4,0x17,0x0, 0xb7,0x2f,0x17,0xb0,0xe8,0x12,0x77,0xdb,0xdf,0xd0,
+0xe0,0x61,0x3f,0x82,0x17,0x7b,0x3f,0xde,0xe0,0x61,0x3f,0x92,0xe0,0x61,0x3f,0x82,
+0xcf,0x81,0xe0,0x61,0x3f,0x92,0x8, 0xe1,0x8, 0xb2,0x39,0x68,0xdf,0xc1,0xe8,0x12,
+0x57,0x5b,0xe8,0x12,0x57,0xb5,0x16,0x81,0xe0,0x1, 0xb7,0x4f,0xe0,0x1, 0x97,0x4f,
+0xe0,0x8, 0x3f,0x42,0xe0,0x1, 0xb4,0x4f,0xe8,0x12,0x57,0xb4,0xe0,0x1, 0x97,0x2f,
+0xe7,0x5, 0xcf,0x1d,0xe0,0x1, 0xb7,0x2f,0x16,0x80,0xe0,0x1, 0x97,0x2f,0xe7,0x5,
+0xcf,0x1d,0xe0,0x1, 0xb7,0x2f,0x9, 0x61,0xe8,0x25,0x4f,0xc9,0xe2,0x1, 0xcf,0x81,
+0xe0,0x0, 0x1, 0xf1,0x8, 0xb2,0x3f,0xe9,0xe2,0x1, 0xc7,0x80,0x39,0x68,0x27,0x88,
+0xe8,0x12,0x57,0xae,0x16,0x81,0x97,0x4f,0xe7,0x2, 0xcf,0x1d,0xb7,0x4f,0x21,0x2c,
+0xe2,0x0, 0xc9,0x1, 0x3c,0x69,0x1, 0xb7,0x3f,0x83,0xe8,0x12,0x57,0x2e,0x97,0x8e,
+0xcf,0xa0,0xb7,0x8e,0xdf,0xc2,0xe8,0x12,0x57,0xb5,0x16,0x80,0x97,0x6f,0xe7,0x0,
+0xcf,0x12,0xb7,0x6f,0x97,0xf, 0xe7,0x7, 0xcf,0x1d,0xb7,0xf, 0x97,0x6f,0xe7,0x0,
+0xcf,0x12,0xb7,0x6f,0x97,0xf, 0xe7,0x6, 0xcf,0x12,0xb7,0xf, 0x3b,0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8,0x12,0x57,0x2e,0x16,0xdf,
+0x97,0x8e,0x3f,0xdd,0xb7,0x8e,0xe8,0x12,0x57,0xae,0x97,0x4f,0xe6,0xad,0xcf,0x7e,
+0x27,0x6, 0x97,0x4f,0x16,0x80,0xe7,0x2, 0xcf,0x1d,0xb7,0x4f,0x17,0x80,0xe8,0x25,
+0x6f,0xc9,0x9, 0x61,0xe2,0x0, 0xc9,0x2, 0x1, 0xef,0x3f,0x83,0xdf,0x8e,0xef,0xff,
+0xd3,0x9a,0xe8,0x12,0x57,0xb5,0x2c,0x1a,0x96,0xef,0x17,0x1, 0xe7,0x0, 0xce,0x9e,
+0xb6,0xef,0x96,0x8f,0xe7,0x7, 0xce,0x9e,0xb6,0x8f,0x96,0xef,0xe7,0x0, 0xce,0x9e,
+0xb6,0xef,0x96,0x8f,0xe7,0x6, 0xce,0x9e,0xb6,0x8f,0x3b,0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcf,0x17,0x0, 0xe0,0x1, 0xb7,0x4f,
+0x0, 0xf5,0x17,0x80,0xe8,0x25,0x6f,0xc9,0x38,0x82,0xe0,0x61,0x3f,0x2, 0xe0,0x61,
+0x3f,0x82,0xe7,0xef,0x16,0xff,0x3f,0xdd,0xe0,0x61,0x3f,0x92,0xe8,0x12,0x57,0xaa,
+0xe7,0x0, 0x16,0x78,0xe0,0x4, 0x96,0xcf,0xb6,0x88,0xe0,0x4, 0x96,0xef,0xb6,0x89,
+0xe0,0x4, 0x96,0xcf,0x3e,0xdc,0xe0,0x4, 0xb6,0xcf,0xe7,0xff,0x16,0x7, 0xe0,0x4,
+0x96,0xef,0x3e,0xdc,0xe0,0x4, 0xb6,0xef,0xe0,0x61,0x3f,0x12,0x38,0x82,0xe0,0x61,
+0x3f,0x82,0xe0,0x61,0x3f,0x2, 0xe7,0xef,0x16,0xff,0x3f,0x5d,0xe0,0x61,0x3f,0x12,
+0xe8,0x12,0x57,0x2a,0xe0,0x4, 0xb4,0x4e,0xe0,0x4, 0xb4,0xee,0xe0,0x61,0x3f,0x92,
+0x38,0x82,0x8, 0xb2,0xe8,0x12,0x57,0xb5,0x11,0x1, 0x97,0x2f,0xe7,0x8, 0xcf,0x12,
+0xb7,0x2f,0x97,0x2f,0xe7,0x9, 0xcf,0x12,0xb7,0x2f,0x97,0x2f,0xe7,0xc, 0xcf,0x12,
+0xb7,0x2f,0x97,0x2f,0xe7,0xe, 0xcf,0x12,0xb7,0x2f,0xe0,0x5, 0xd5,0x56,0x3c,0x62,
+0x9, 0x21,0xe7,0xfc,0x0, 0x92,0x8, 0xb1,0xe8,0x12,0x57,0xb4,0x17,0x0, 0xe0,0x1,
+0x96,0xaf,0xe7,0x7, 0xce,0x9e,0xe0,0x1, 0xb6,0xaf,0x16,0x81,0xe0,0x1, 0x96,0x2f,
+0xe7,0x2, 0xce,0x1d,0xe0,0x1, 0xb6,0x2f,0xe0,0x1, 0x96,0x2f,0xe7,0x2, 0xce,0x1e,
+0xe0,0x1, 0xb6,0x2f,0x16,0x7f,0xe8,0x12,0x57,0xaa,0xb7,0xf, 0xe0,0x2, 0xb7,0xf,
+0xe0,0x2, 0xb6,0x2f,0xe0,0x2, 0xb6,0x4f,0xb6,0xaf,0xb6,0xcf,0xb6,0xef,0xe0,0x1,
+0xb6,0x8f,0xe0,0x1, 0xb6,0xaf,0xe0,0x1, 0xb6,0xcf,0xe0,0x1, 0x16,0xa5,0xe0,0x2,
+0xb7,0x6f,0xe0,0x3, 0xb6,0x8f,0xe0,0x2, 0x16,0xca,0xe0,0x3, 0xb6,0xaf,0xe7,0xc0,
+0x16,0x8f,0xe0,0x4, 0xb6,0xf, 0xe0,0x4, 0xb6,0x2f,0xe0,0x5, 0xb6,0x4f,0xe0,0x5,
+0xb6,0x6f,0xe0,0x7, 0xb7,0xf, 0xe0,0x4, 0xb6,0xcf,0x16,0x84,0xe0,0x4, 0xb6,0xef,
+0xe0,0x4, 0x96,0xcf,0xe0,0x6, 0xb6,0x8f,0xe0,0x4, 0x96,0xef,0xe0,0x6, 0xb6,0xaf,
+0xe8,0xb, 0x4f,0xf1,0xe8,0x24,0x77,0x1c,0xe8,0x48,0x6f,0xba,0xe8,0xb, 0x4f,0xf2,
+0xe8,0x24,0x77,0x1f,0xe8,0x48,0x6f,0xc0,0xef,0xfe,0xde,0x16,0xe0,0x5, 0xd0,0x34,
+0xe0,0x61,0x3f,0x82,0xe0,0x10,0xcf,0x80,0xe0,0x61,0x3f,0x92,0x8, 0xe1,0x8, 0xb5,
+0xc0,0x7e,0xe0,0x4, 0x15,0x80,0xe8,0x24,0x75,0xa1,0x16,0x81,0xe8,0x24,0x57,0xa1,
+0xe7,0x2d,0x14,0x8, 0xe7,0x7, 0xcf,0x9d,0xe8,0x24,0x77,0xa1,0xe0,0x5, 0x15,0x1c,
+0xe8,0x24,0x57,0xa1,0xe0,0x20,0x16,0x32,0xe7,0x5, 0xcf,0x9d,0xe8,0x24,0x77,0xa1,
+0x17,0x80,0xe8,0x24,0x74,0x22,0x17,0x3c,0xe8,0x24,0x75,0x23,0xe0,0x3, 0x14,0x24,
+0xe8,0x24,0x76,0x24,0xe0,0x1, 0x15,0x40,0xe8,0x24,0x77,0xa5,0x16,0x30,0xe8,0x24,
+0x77,0xa6,0xe0,0x0, 0x14,0xc0,0xe8,0x24,0x77,0xa7,0xe8,0x24,0x77,0x28,0xe0,0x2,
+0x17,0x44,0xe8,0x24,0x74,0x29,0xe0,0x0, 0x14,0x48,0xe8,0x24,0x75,0x2a,0xe0,0x4,
+0x15,0x22,0xe8,0x24,0x76,0x2b,0xe0,0x2b,0x16,0x6, 0xe8,0x24,0x77,0xac,0xe8,0x24,
+0x77,0xad,0xe8,0x24,0x77,0x2e,0x17,0x12,0xe8,0x24,0x74,0x2f,0x14,0x8, 0xe8,0x24,
+0x77,0xb1,0xe8,0x24,0x77,0xb2,0xe8,0x24,0x77,0xb3,0xe8,0x24,0x76,0xb4,0xe8,0x24,
+0x77,0xb5,0xe8,0x24,0x77,0xb6,0xe8,0x24,0x74,0xb7,0xe8,0x24,0x75,0x38,0xe8,0x24,
+0x76,0x39,0x16,0x4, 0xe8,0x24,0x76,0x3a,0xe8,0x24,0x77,0x3b,0xe8,0x24,0x77,0x3c,
+0xe8,0x24,0x77,0x3d,0x17,0x2, 0xe8,0x24,0x77,0x3e,0xe8,0x24,0x77,0x3f,0xe8,0x24,
+0x76,0x40,0xe0,0x10,0x16,0x0, 0xe8,0x24,0x77,0x41,0xe8,0x24,0x77,0x42,0xe8,0x24,
+0x77,0x43,0xe8,0x24,0x77,0x44,0xe8,0x24,0x77,0xc5,0xe8,0x24,0x77,0xc6,0xe8,0x24,
+0x76,0x47,0xe8,0x24,0x74,0x48,0xe0,0x11,0x14,0x23,0xe8,0x24,0x74,0xc9,0xe8,0x24,
+0x75,0x4a,0xe7,0x21,0x15,0x7, 0xe8,0x24,0x77,0x4b,0xe8,0x24,0x77,0xcc,0xe8,0x24,
+0x77,0xcd,0xe8,0x24,0x77,0xce,0xe8,0x24,0x77,0xcf,0xe8,0x24,0x77,0xd0,0xe8,0x24,
+0x77,0x51,0xe8,0x24,0x77,0x52,0xe8,0x24,0x77,0x53,0xe8,0x24,0x77,0x54,0xe8,0x24,
+0x77,0x55,0xe8,0x24,0x77,0xd6,0xe8,0x24,0x77,0xd7,0xe8,0x24,0x77,0xd8,0xe8,0x24,
+0x76,0x59,0xe8,0x24,0x76,0x5a,0xe0,0x1f,0x16,0x7f,0xe8,0x24,0x75,0x5b,0xe0,0x11,
+0x15,0x2f,0xe8,0x24,0x77,0x5c,0xe8,0x24,0x76,0x5d,0xe8,0x24,0x76,0x5e,0xe8,0x24,
+0x74,0x5f,0xe0,0xa0,0x14,0x0, 0xe8,0x24,0x75,0x60,0xe7,0xfd,0x15,0x7e,0xe8,0x24,
+0x76,0x61,0xe0,0x8, 0x16,0x0, 0xe8,0x24,0x77,0xe2,0xe8,0x24,0x77,0xe3,0xe8,0x24,
+0x76,0x64,0xe8,0x24,0x76,0x65,0xe8,0x24,0x77,0xf0,0xe8,0x24,0x74,0x71,0xe0,0xfc,
+0x14,0x7e,0xe8,0x24,0x77,0xf2,0xe8,0x24,0x76,0x73,0xe0,0xfe,0x16,0x7f,0xe8,0x24,
+0x75,0x66,0xe0,0xfe,0x15,0x7e,0xe8,0x24,0x76,0x67,0xe0,0x2, 0x16,0x0, 0xe8,0x24,
+0x74,0x74,0xe0,0x6e,0x14,0x45,0xe8,0x24,0x75,0x75,0xe0,0x3, 0x15,0x45,0xe8,0x24,
+0x75,0xe8,0xe8,0x24,0x76,0x69,0xe8,0x24,0x74,0x6a,0xe8,0x24,0x75,0x6b,0xe8,0x24,
+0x77,0xec,0xe8,0x25,0x4f,0xae,0x3f,0xfd,0xe8,0x24,0x57,0xea,0xe0,0x0, 0x1, 0xd5,
+0xe7,0xd, 0xcf,0xae,0xe8,0x24,0x77,0xea,0xe8,0x24,0x57,0xeb,0xe7,0x2, 0xcf,0xae,
+0xe8,0x24,0x77,0xeb,0xe8,0x24,0x57,0xeb,0xe7,0x0, 0xcf,0xae,0xe8,0x24,0x77,0xeb,
+0x17,0x82,0xe8,0x24,0x77,0xed,0xe0,0x1, 0x15,0x2a,0xe8,0x24,0x77,0xee,0xe0,0x48,
+0x14,0xc2,0xe0,0x4b,0x14,0xe, 0xe8,0x24,0x77,0xef,0xe0,0x5, 0xdb,0x38,0xe0,0x0,
+0x15,0x55,0xe0,0x48,0x14,0xc2,0x14,0x0, 0xe0,0x5, 0xd0,0x71,0xe8,0x24,0x57,0xae,
+0xe8,0x30,0x57,0x4, 0xe8,0x12,0x54,0x2d,0xe7,0x20,0xcf,0x9e,0xe8,0x24,0x77,0xae,
+0x14,0x8d,0xe8,0x25,0x57,0xd4,0xe8,0x30,0x57,0x5, 0xe7,0x2d,0x11,0x88,0xe7,0x20,
+0xcf,0x9e,0xe8,0x25,0x77,0xd4,0xe0,0x5, 0x12,0x1c,0xe8,0x24,0x55,0x2e,0xe0,0x4,
+0xdf,0xbf,0xe8,0x25,0x55,0x54,0xe8,0x12,0x54,0x2c,0x14,0x8d,0xe0,0x4, 0xdf,0xb8,
+0x14,0x0, 0xef,0xfe,0xd9,0xaf,0x16,0x0, 0x76,0x1, 0x57,0x81,0xe2,0x0, 0xcf,0x83,
+0x5, 0x93,0xc0,0x2, 0xa, 0xe1,0xe7,0xd, 0xcf,0xad,0xe8,0x24,0x77,0xea,0xe8,0x24,
+0x57,0xeb,0xe7,0x2, 0xcf,0xad,0xe8,0x24,0x77,0xeb,0xe8,0x24,0x57,0xeb,0xe7,0x0,
+0xcf,0xad,0xe7,0xff,0x0, 0xad,0x57,0x81,0xe0,0x49,0x11,0x6e,0xe4,0x0, 0xc7,0x94,
+0xe0,0x20,0x17,0x32,0x3f,0x92,0xb1,0x8f,0x14,0x3c,0x57,0x81,0xe0,0x3, 0x15,0x24,
+0xe4,0x0, 0xc7,0x94,0xe0,0x1, 0x16,0x40,0x3f,0x92,0xb2,0x1f,0x15,0x8a,0x57,0x81,
+0xe0,0x4a,0x12,0xbe,0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xb7,0x2f,0x17,0x0, 0x57,0x81,
+0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xb7,0x3f,0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x92,
+0xb7,0x4f,0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xb7,0x5f,0x17,0x30,0x57,0x81,
+0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xb4,0x6f,0x57,0x81,0xe8,0x12,0x54,0x2d,0xe4,0x0,
+0xc7,0x94,0x3f,0x92,0xb5,0x7f,0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xe0,0x1,
+0xb6,0xf, 0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xe0,0x1, 0xb7,0x1f,0x54,0x81,
+0x55,0x1, 0xe4,0x1, 0xc4,0xcb,0xe4,0x0, 0xc5,0x14,0xe0,0x2, 0xc4,0x80,0x3d,0x12,
+0xe0,0x4, 0xdf,0xa6,0x54,0x1, 0x54,0x81,0xe4,0x0, 0xc4,0x14,0xe4,0x0, 0xc4,0x94,
+0x15,0x14,0x3c,0x92,0x3c,0x15,0xe0,0x5, 0xda,0x9a,0x57,0x81,0xe0,0x21,0x14,0x1c,
+0xe4,0x0, 0xc7,0x94,0x15,0x8a,0x3f,0x95,0xb1,0x8f,0x57,0x81,0xe4,0x0, 0xc7,0x94,
+0x3f,0x95,0xb4,0x1f,0x54,0x81,0x55,0x1, 0xe4,0x1, 0xc4,0xcb,0xe4,0x0, 0xc5,0x14,
+0xe8,0x12,0x54,0x2c,0x3d,0x15,0xe0,0x2, 0xc4,0x80,0xe0,0x4, 0xdf,0x81,0x57,0x81,
+0xc7,0x81,0x77,0x81,0xe7,0xfe,0x0, 0xf3,0xc4,0x7f,0xe3,0xff,0xcc,0x7f,0x1, 0x8d,
+0x38,0x82,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc7,0xff,
+0xe2,0x1, 0xc7,0xff,0x2f,0xf7,0x0, 0xf1,0x17,0x85,0x0, 0xfa,0x8, 0xb4,0xc0,0x7c,
+0x39,0xe8,0x3c,0xe0,0x3c,0x60,0xc4,0x84,0xc4,0x2, 0xdd,0x68,0xe8,0x12,0x57,0xa9,
+0x11,0x1, 0x97,0xf, 0x12,0x0, 0xe7,0x0, 0xcf,0x12,0xb7,0xf, 0x97,0x2f,0xe7,0x0,
+0xcf,0x34,0xb7,0x2f,0x97,0xf, 0xe0,0x0, 0x21,0xce,0xe7,0x1, 0xcf,0x12,0xb7,0xf,
+0xe0,0xa, 0x14,0x28,0xdf,0xd2,0xe8,0x12,0x57,0xa9,0xe0,0x0, 0x14,0x63,0x97,0xf,
+0xe7,0x2, 0xcf,0x12,0xb7,0xf, 0x97,0xf, 0xe7,0x5, 0xcf,0x32,0xb7,0xf, 0xdf,0xc5,
+0xe8,0x12,0x57,0xa9,0x16,0x87,0x97,0xf, 0xe0,0x0, 0x14,0x63,0xe7,0x5, 0xcf,0x3d,
+0xb7,0xf, 0x97,0xf, 0xe7,0x3, 0xcf,0x12,0xb7,0xf, 0x97,0xf, 0xe7,0x4, 0xcf,0x12,
+0xb7,0xf, 0xdf,0xb3,0xe8,0x12,0x57,0xa9,0x14,0x21,0x97,0xf, 0xe7,0x8, 0xcf,0x12,
+0xb7,0xf, 0x97,0xf, 0xe7,0x9, 0xcf,0x12,0xb7,0xf, 0xdf,0xa7,0xe8,0x12,0x57,0xa9,
+0x3c,0x64,0x97,0xf, 0xe7,0xa, 0xcf,0x12,0xb7,0xf, 0x97,0xf, 0xe7,0xb, 0xcf,0x12,
+0xb7,0xf, 0xdf,0x9b,0xe8,0x12,0x57,0xa9,0x97,0xf, 0xe7,0xc, 0xcf,0x12,0xb7,0xf,
+0x97,0xf, 0xe7,0xd, 0xcf,0x12,0xb7,0xf, 0x54,0x1, 0x54,0x82,0xdd,0x31,0xc0,0x4,
+0xa, 0x61,0xe7,0x8, 0xcf,0x13,0xb7,0xf, 0x14,0x21,0x97,0xf, 0xe7,0x9, 0xcf,0x13,
+0xb7,0xf, 0x97,0xf, 0xe7,0xa, 0xcf,0x13,0xb7,0xf, 0x97,0xf, 0xe7,0xb, 0xcf,0x13,
+0xb7,0xf, 0x97,0xf, 0xe7,0xc, 0xcf,0x13,0xb7,0xf, 0x97,0xf, 0xe7,0xd, 0xcf,0x13,
+0xb7,0xf, 0xdf,0x73,0xe8,0x12,0x57,0xa9,0x14,0x21,0x97,0xf, 0xe7,0x5, 0xcf,0x32,
+0xb7,0xf, 0x97,0xf, 0xe7,0x3, 0xcf,0x13,0xb7,0xf, 0xdf,0x67,0xe8,0x12,0x57,0xa9,
+0x14,0x21,0x97,0xf, 0xe7,0x2, 0xcf,0x13,0xb7,0xf, 0x97,0xf, 0xe7,0x5, 0xcf,0x33,
+0xb7,0xf, 0x97,0xf, 0xe7,0x4, 0xcf,0x13,0xb7,0xf, 0xdf,0x57,0xe8,0x12,0x57,0xa9,
+0x97,0xf, 0xe7,0x1, 0xcf,0x13,0x0, 0xc0,0x8, 0xb3,0xe8,0x12,0x57,0xb4,0x11,0x80,
+0xe0,0x5, 0xb1,0xcf,0x11,0x1, 0xe0,0x5, 0x97,0x4f,0x14,0x85,0xe7,0xd, 0xcf,0x12,
+0xe0,0x5, 0xb7,0x4f,0xe0,0x1, 0x14,0x7, 0xef,0xfe,0xd0,0x21,0x14,0x85,0xe0,0x1,
+0x14,0x6, 0xef,0xfe,0xd0,0x1c,0x14,0x85,0xe0,0x1, 0x14,0x8, 0xef,0xfe,0xd0,0x17,
+0x3c,0xe3,0x3c,0x62,0x9, 0xa1,0xe7,0xfe,0x0, 0xc3,0x14,0x80,0xe7,0xfe,0x0, 0xc0,
+0x8, 0xb2,0xe0,0x61,0x39,0x2, 0xe0,0x61,0x3f,0x82,0xe7,0xef,0x17,0x7f,0x3f,0xde,
+0xe0,0x61,0x3f,0x92,0x17,0x80,0xe8,0x45,0x6f,0xdd,0xe0,0x4, 0xde,0x8, 0x2c,0x7,
+0xe8,0x33,0x4f,0xaf,0x2f,0x84,0xe8,0x33,0x4f,0xb0,0x27,0x8b,0x17,0x80,0xe8,0x25,
+0x6f,0xa8,0x14,0x80,0xe8,0x33,0x6f,0xaf,0x14,0x1, 0xe8,0x33,0x6f,0xb0,0xdf,0x1f,
+0xe8,0x25,0x4f,0x8c,0x2f,0x83,0xef,0xfe,0xdd,0xbf,0xe0,0x61,0x39,0x12,0x9, 0x61,
+0xe8,0x24,0x57,0x9c,0x17,0x1, 0xe7,0x0, 0xcf,0x9e,0xe8,0x24,0x77,0x9c,0xe8,0x12,
+0x57,0xaa,0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,0x27,0x87,0x8, 0xb1,0xdf,0xc9,
+0x17,0x80,0xe8,0x25,0x6f,0xa8,0x8, 0xe1,0x17,0x80,0xe8,0x25,0x6f,0xa8,0x38,0x82,
+0xe8,0x24,0x57,0x9c,0x17,0x1, 0xe7,0x0, 0xcf,0x9e,0xe8,0x24,0x77,0x9c,0xe8,0x12,
+0x57,0xaa,0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,0x2f,0x83,0xe7,0xff,0x0, 0xb2,
+0x38,0x82,0x8, 0xb1,0xc0,0x7c,0x3c,0xe0,0x3c,0x60,0xc4,0x84,0xc4,0x2, 0xdc,0x56,
+0xe8,0x33,0x4f,0xb0,0xe2,0x0, 0xcf,0x81,0x1, 0x3, 0x14,0x0, 0xde,0xce,0x54,0x1,
+0x54,0x82,0xdc,0x6e,0xc0,0x4, 0x8, 0xe1,0x8, 0xb4,0xe0,0x1, 0x11,0x7a,0x39,0xe8,
+0xe0,0x0, 0x12,0x50,0xc1,0xff,0xe3,0xff,0xc9,0xff,0x1, 0xc, 0x3c,0x62,0xde,0xbd,
+0x3c,0x62,0xde,0xbb,0x3c,0x62,0xde,0xb9,0x3c,0x62,0xde,0xb7,0x3c,0x64,0xde,0xb5,
+0x0, 0xf2,0xa, 0x61,0x17,0x80,0xe8,0x25,0x6f,0xb8,0x17,0x80,0xe8,0x24,0x77,0x9e,
+0x38,0x82,0xe8,0x25,0x4f,0xb8,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x1, 0xcf,0xc8,
+0x2, 0x84,0xe8,0x25,0x6f,0xb8,0x38,0x82,0x17,0xc8,0x0, 0xfc,0xe8,0x25,0x4f,0xc3,
+0xe8,0x24,0x4c,0x47,0x2f,0x86,0xe8,0x25,0x4f,0xb8,0xe1,0x28,0x3f,0x98,0x38,0x82,
+0xe8,0xff,0x4f,0xc9,0xe2,0x0, 0xcf,0x83,0x1, 0x8d,0xe8,0x25,0x4f,0xc3,0xe2,0x0,
+0xcf,0x81,0x1, 0xf2,0xe8,0x48,0x4f,0xc0,0xc7,0x81,0x3c,0x3f,0xe2,0x1, 0xc4,0x7f,
+0x0, 0xeb,0x14,0x1, 0x0, 0xed,0x16,0x0, 0x15,0x81,0xe0,0x0, 0x0, 0xe4,0x8, 0xb2,
+0xc0,0x70,0x11,0x10,0x3c,0x60,0x3d,0x62,0xe0,0x23,0x14,0x9a,0xc4,0x2, 0xe0,0x5,
+0xd8,0xee,0x3c,0xe0,0x3d,0x62,0xc4,0x82,0x14,0x0, 0xdf,0xee,0xc0,0x10,0x9, 0x61,
+0x8, 0xb1,0xc0,0x7e,0xe8,0x12,0x57,0xb4,0x15,0x2, 0xe0,0x0, 0x17,0x6b,0x3c,0xea,
+0xb7,0x6f,0x3c,0x90,0x17,0x80,0xe0,0x2, 0x14,0x4, 0x77,0x81,0xdf,0xdd,0x15,0x2,
+0x3c,0xea,0x3c,0x90,0xe0,0x2, 0x14,0x8, 0xdf,0xd7,0xe8,0x12,0x57,0xb4,0xe0,0x1,
+0x17,0x7f,0xe0,0x1, 0xb7,0xf, 0xc0,0x2, 0x8, 0xe1,0x0, 0xe3,0xe8,0x12,0x74,0x5d,
+0x38,0x82,0xe8,0x25,0x4f,0xc3,0x2f,0x99,0x8, 0xb1,0xe8,0x12,0x57,0xdd,0x2f,0xfe,
+0xef,0xff,0xd7,0x0, 0xe8,0x24,0x4f,0xca,0xe8,0x12,0x77,0xdd,0xe8,0xf3,0x4f,0x2e,
+0xe8,0x12,0x57,0xa4,0x3f,0xbe,0xe8,0x12,0x57,0x5d,0xc7,0xbf,0x37,0xc6,0x3f,0x7f,
+0x5, 0x83,0xe8,0x12,0x77,0xdd,0x8, 0xe1,0x38,0x82,0x0, 0x0, 0xe0,0x25,0x14,0x10,
+0x14,0x80,0xe1,0x2, 0x15,0x52,0x3d,0x28,0xe0,0x5, 0xd8,0xed,0xe0,0x0, 0x14,0x0,
+0x24,0x2, 0x3c,0x1, 0x14,0x0, 0x14,0x80,0xef,0xfe,0xd7,0x28,0x3a,0x80,0x0, 0x0,
+0x3a,0x80,0x25,0x1c,0xe0,0x64,0x3f,0x80,0x17,0x7b,0x3f,0xde,0x26,0x2, 0x16,0x4,
+0x25,0x82,0x15,0x84,0x3f,0x3, 0xc4,0xff,0xc4,0x7f,0x3e,0x4f,0x3d,0xcf,0xe0,0x64,
+0x3e,0x10,0xc4,0x81,0x86,0x89,0xe0,0x64,0x3d,0x90,0xc4,0x1, 0xae,0x88,0xc5,0x7f,
+0x2d,0x77,0xe0,0x64,0x3f,0x90,0x0, 0x0, 0x3f,0x4, 0x38,0x82,0x17,0x80,0xe2,0x0,
+0xcc,0x4, 0x2, 0x83,0x3c,0x6f,0x38,0x82,0xc4,0x1, 0xc7,0x81,0x34,0x41,0xe2,0x1,
+0xc7,0xff,0x0, 0xf6,0x8, 0xb3,0x3f,0x68,0xe4,0x0, 0xc7,0x7, 0xe0,0x4c,0x17,0xc0,
+0xe0,0xd, 0x3f,0x9e,0x8e,0x5d,0x39,0xe8,0xe2,0x0, 0xce,0x3, 0x1, 0x3, 0x16,0x1,
+0xae,0x2d,0x3f,0x9e,0x89,0x6f,0x8f,0xaf,0x31,0xa1,0x39,0x3f,0xe2,0x1, 0xc1,0x7f,
+0x3c,0x62,0xdf,0xdd,0xe0,0x4c,0x17,0xba,0x3f,0x93,0xac,0xf, 0xa9,0x1f,0x9, 0xe1,
+0x8, 0xb2,0x3f,0x68,0xe4,0x0, 0xc7,0x7, 0xe0,0x4c,0x17,0xc0,0x3f,0x9e,0x89,0x4f,
+0x34,0x21,0xe0,0x4c,0x17,0xba,0x3c,0x1f,0x8c,0x88,0x3c,0x62,0xe0,0x4, 0xda,0xd0,
+0x14,0x0, 0xef,0xfe,0xd6,0xdf,0x3f,0x62,0xe4,0x0, 0xc7,0x14,0x3c,0x62,0xe0,0x49,
+0x17,0xee,0x3f,0x9e,0xe4,0x1, 0xc4,0x4b,0x94,0xef,0xe0,0x2, 0xc4,0x6, 0x9, 0x21,
+0xe0,0x9a,0x0, 0xde,0x8, 0xb1,0xdb,0xe4,0x8, 0xa1,0xe0,0x99,0x0, 0xb7,0x8, 0xb2,
+0xe0,0x4c,0x11,0x40,0xef,0xfe,0xd7,0x5b,0x8c,0x42,0x14,0x80,0xef,0xfe,0xd7,0xd8,
+0xe0,0x1, 0x8c,0x32,0x14,0x81,0xef,0xfe,0xd7,0xd3,0xe0,0x2, 0x8c,0x22,0x14,0x82,
+0xef,0xfe,0xd7,0xce,0xe8,0x25,0x4f,0xc5,0xe8,0x25,0x4c,0xc5,0xe4,0x0, 0xc7,0x87,
+0x39,0x1f,0x8c,0x42,0x9, 0x21,0xe7,0xcf,0x0, 0xc3,0x8, 0xb1,0xdf,0xdc,0xef,0xfe,
+0xd7,0xa7,0x8, 0xa1,0x0, 0xdd,0x8, 0xb2,0xe8,0x12,0x57,0xaa,0xe0,0x6, 0x91,0x4f,
+0xe6,0xaf,0xc9,0x72,0x21,0x1f,0x14,0x1, 0xef,0xff,0xd2,0x8c,0x17,0x81,0xe8,0x25,
+0x6f,0xc3,0x14,0x81,0xe8,0x25,0x6f,0xc5,0xe8,0x12,0x57,0xaa,0xe0,0x1, 0x97,0xef,
+0xe6,0xa9,0xcf,0xaf,0xe8,0x25,0x6f,0xbe,0x3c,0x69,0xef,0xfe,0xd7,0xa1,0x17,0x81,
+0xe8,0x24,0x6f,0xc6,0xef,0xfe,0xd9,0x5c,0xe8,0x25,0x4c,0x43,0x9, 0x21,0xe7,0xd5,
+0x0, 0xca,0x14,0xa, 0xe0,0x6, 0x97,0xcf,0xde,0x98,0x3c,0x62,0xef,0xff,0xd2,0x6a,
+0xe8,0x25,0x69,0x43,0x3c,0xe2,0xe8,0x25,0x69,0x45,0xe8,0x25,0x69,0x3e,0xe8,0xf3,
+0x69,0x27,0xe8,0x48,0x69,0x4, 0x0, 0xe1,0x17,0x80,0xe2,0x1, 0xc4,0x7d,0xe1,0x28,
+0x3c,0xf, 0x38,0x82,0xe8,0x24,0x57,0x9c,0xe6,0xaf,0xcf,0xff,0x2f,0x8b,0xe8,0x24,
+0x57,0x9c,0xe6,0xae,0xcf,0xff,0x2f,0x86,0xe8,0x24,0x54,0x1c,0xe6,0xa2,0xcc,0x78,
+0x38,0x82,0x14,0x1, 0x0, 0xfe,0x8, 0xb1,0xc0,0x7c,0xef,0xff,0xd2,0x6, 0x3c,0xe0,
+0x3c,0x60,0xc4,0x84,0xc4,0x2, 0xda,0xb2,0xe8,0x24,0x57,0x9c,0xe6,0xae,0xcf,0xff,
+0x27,0x88,0xe8,0x24,0x57,0x9c,0x17,0x0, 0xe7,0x1, 0xcf,0x9e,0xe8,0x24,0x77,0x9c,
+0xe8,0x24,0x57,0x9c,0xe6,0xaf,0xcf,0xff,0x2f,0x86,0xe8,0x24,0x57,0x9c,0xe6,0xa2,
+0xcf,0xff,0x27,0x9c,0x14,0x1, 0xef,0xfe,0xdb,0x53,0xe8,0x24,0x57,0x9c,0x17,0x0,
+0xe7,0x0, 0xcf,0x9e,0xe8,0x24,0x77,0x9c,0xe8,0x24,0x57,0x9c,0xe7,0xd, 0xcf,0x9e,
+0xe8,0x24,0x77,0x9c,0xdf,0x81,0xef,0xfe,0xd2,0x4c,0x14,0x1, 0xe0,0x1, 0xdb,0x1e,
+0x17,0x87,0xe8,0x60,0x6f,0x9d,0xe8,0x60,0x6f,0x9e,0x54,0x1, 0x54,0x82,0xda,0xa0,
+0xe8,0x25,0x4f,0x45,0xe8,0x60,0x4f,0x9e,0x37,0xde,0xe6,0xaf,0xcf,0xff,0x2f,0x89,
+0xe8,0x25,0x4f,0x45,0xe8,0x60,0x4f,0x9d,0x37,0xde,0xe6,0xaf,0xcf,0xff,0x27,0x83,
+0xef,0xff,0xd5,0xee,0xc0,0x4, 0x8, 0xe1,0xe8,0xe7,0x4f,0x1d,0xe8,0x60,0x4e,0xae,
+0xe2,0x0, 0xcf,0x4, 0x2, 0x8c,0xe0,0x25,0x17,0xca,0x3f,0x9e,0x26,0xae,0x8f,0xf,
+0xe8,0x60,0x4e,0x2b,0x3e,0x7e,0x5, 0x95,0xc7,0x1, 0xaf,0xf, 0xe2,0x0, 0xce,0x81,
+0x1, 0xa5,0xe8,0x25,0x4f,0xcf,0xe8,0x60,0x4e,0xab,0x17,0x0, 0x3e,0xff,0xe8,0x60,
+0x6f,0x30,0x5, 0x9c,0xe8,0x60,0x6f,0x2e,0xc7,0x81,0xe8,0x25,0x6f,0xcf,0x0, 0x83,
+0x17,0x0, 0xaf,0xf, 0xe8,0x60,0x4f,0xb0,0xe2,0x0, 0xcf,0x81,0x1, 0x91,0xe8,0x25,
+0x4f,0x85,0xe8,0x60,0x4f,0x2a,0x3f,0x7f,0x5, 0x8b,0x17,0x0, 0xe8,0x60,0x6f,0x30,
+0xc7,0x81,0xe8,0x25,0x6f,0x85,0x38,0x82,0xae,0x8f,0x17,0x80,0x0, 0xe7,0x17,0x81,
+0x0, 0xf9,0x8, 0xb2,0xe0,0x1, 0xd6,0xb4,0x17,0x81,0xe8,0x60,0x6f,0xb0,0xe8,0x30,
+0x57,0x96,0xe2,0x0, 0xcf,0x80,0x3, 0x4, 0x17,0x80,0xe8,0x60,0x6f,0xb0,0xe8,0x55,
+0x4f,0x8f,0x27,0x84,0x17,0x80,0xe8,0x60,0x6f,0xb0,0xe8,0xe7,0x4f,0x9c,0x2f,0x83,
+0xe8,0x60,0x6f,0xb0,0xe8,0x25,0x4c,0x45,0xdf,0x40,0x24,0xe, 0xe8,0xf3,0x4f,0xa7,
+0xe2,0x0, 0xcf,0x81,0x1, 0x89,0xe8,0x25,0x4f,0xb1,0xe2,0x0, 0xcf,0xba,0x2, 0x84,
+0x17,0x80,0xe8,0x60,0x6f,0xb0,0x17,0x80,0xe8,0x30,0x57,0x16,0xe8,0x30,0x77,0x97,
+0x3f,0xee,0xe2,0x80,0xc7,0x80,0x27,0x84,0x17,0x81,0xe8,0x60,0x6f,0xae,0x3f,0xee,
+0xe8,0xe7,0x4e,0x9c,0xe2,0x4, 0xc7,0x80,0x26,0x82,0x2f,0x84,0x17,0x80,0xe8,0x60,
+0x6f,0xae,0xe8,0x28,0x56,0xcb,0xe8,0x28,0x56,0x41,0x3f,0xed,0xe4,0x0, 0xc7,0x86,
+0xe2,0x0, 0xcf,0x80,0x3, 0x2, 0xc7,0x83,0x37,0x82,0x3e,0x7f,0xe0,0x0, 0x4, 0x55,
+0x3e,0x7d,0xe0,0x0, 0x4, 0x55,0xe0,0x2, 0x36,0xcf,0x39,0x1d,0x31,0x1, 0xe0,0x22,
+0x39,0x1c,0xc1,0x1, 0xe2,0x2, 0xc7,0x0, 0xe2,0x0, 0xcf,0x0, 0x17,0x84,0xe0,0x6f,
+0x39,0x22,0x39,0x6f,0xe0,0x1, 0xdb,0xab,0xe2,0x0, 0xcc,0x0, 0x17,0x81,0xe0,0x6f,
+0x39,0x22,0x39,0x6f,0xe8,0xd, 0x4f,0x9f,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xa0,
+0x3f,0xce,0x39,0x3f,0xe8,0xd, 0x4f,0xa1,0xe8,0x50,0x4f,0x78,0xe8,0x30,0x71,0x14,
+0xe8,0x60,0x6f,0xaa,0x27,0xc, 0xe8,0x30,0x57,0x16,0xe2,0x0, 0xcf,0x0, 0x4, 0x7,
+0xe2,0x0, 0xc9,0x1, 0x5, 0x27,0x31,0x1, 0xe8,0x30,0x71,0x14,0xe8,0xf3,0x4f,0xa7,
+0xe2,0x0, 0xcf,0x81,0x1, 0x87,0xe8,0x30,0x57,0x94,0xe4,0x0, 0xc7,0x85,0xe8,0x30,
+0x77,0x94,0xe8,0xf2,0x4f,0x8e,0xc7,0xff,0xe2,0x0, 0xcf,0x83,0x2, 0x8a,0xe8,0x51,
+0x4f,0xa8,0xe2,0x0, 0xcf,0x81,0x1, 0x85,0xe8,0x30,0x77,0x94,0xe8,0x60,0x6f,0xaa,
+0x9, 0x21,0xe7,0xfe,0x0, 0xa3,0x11,0x4, 0xe7,0xff,0x0, 0xb6,0x11,0x3, 0xe7,0xff,
+0x0, 0xb3,0x37,0xa1,0xe8,0x60,0x6f,0xaa,0x0, 0xda,0x8, 0xb2,0xdf,0x53,0xdd,0x5f,
+0x2c,0xa, 0x39,0x68,0xe0,0x5, 0xd0,0x92,0xe8,0x28,0x71,0x3c,0xe8,0x60,0x69,0x2e,
+0xe8,0x60,0x69,0x30,0xe8,0x60,0x4f,0xae,0x27,0x8a,0x17,0x80,0xe8,0x25,0x6f,0xcf,
+0x17,0x80,0xe8,0x12,0x77,0xe5,0x17,0x87,0xe8,0x60,0x6f,0x9e,0xe8,0x60,0x4f,0xb0,
+0x27,0x85,0x14,0x0, 0x9, 0x21,0xe0,0x9f,0x0, 0xf5,0x9, 0x61,0xe8,0x51,0x4f,0x8e,
+0x27,0x97,0xe2,0x0, 0xcf,0x81,0xe8,0x50,0x4f,0x78,0x1, 0x12,0xe2,0x0, 0xcf,0x2,
+0x1, 0x8f,0x3f,0xe8,0xe4,0x0, 0xc7,0x8e,0xe0,0x4c,0x14,0x58,0x3c,0x1f,0xe0,0x10,
+0x8f,0xa8,0xe2,0x0, 0xcf,0x94,0x5, 0x84,0x17,0x84,0xaf,0x89,0xaf,0x8a,0x38,0x82,
+0x8, 0xb7,0xc0,0x7a,0xd1,0x4b,0xe8,0xe7,0x4b,0x9c,0xe8,0x55,0x4e,0xa6,0xe8,0x55,
+0x4f,0x27,0x17,0x80,0xe2,0x0, 0xcb,0x81,0xe8,0x4c,0x6f,0xd5,0x76,0x81,0x77,0x2,
+0xe0,0x0, 0x1, 0xd5,0xe8,0x72,0x57,0xac,0x3b,0x68,0x97,0x1f,0xe0,0x4, 0x96,0xcf,
+0x3e,0x9e,0xe0,0xe, 0x36,0xcf,0x3f,0x1d,0x37,0x1, 0xb7,0xf, 0x3f,0x6f,0x3e,0xef,
+0xe0,0x9, 0xc7,0x0, 0xe0,0x9, 0xc7,0xca,0x97,0x8f,0x97,0xe, 0xe0,0x9, 0xc6,0xc8,
+0x3f,0x1f,0xe0,0xf, 0x37,0x4f,0x3f,0x9e,0x37,0x81,0xb7,0x8d,0xe8,0x50,0x4f,0xf8,
+0xe2,0x0, 0xcf,0x8a,0x5, 0xb5,0x12,0x0, 0x3b,0xe4,0x11,0x80,0x3a,0xe3,0x39,0x63,
+0xe8,0x50,0x4f,0x78,0xe2,0x1, 0xc1,0x7f,0x39,0x7e,0x3, 0x9d,0xe2,0x0, 0xcb,0x81,
+0x1, 0xa9,0x3d,0xe2,0x3d,0x62,0x3c,0xe4,0x3c,0x64,0xe0,0x5, 0xd3,0xda,0x3f,0xe3,
+0xe4,0x0, 0xc7,0x8e,0xe0,0x4c,0x17,0x58,0x3f,0x9e,0xe0,0x10,0x8f,0xaf,0xc1,0x81,
+0xe2,0x0, 0xc9,0x8a,0xe1,0x25,0x3f,0xe5,0xc1,0x1, 0xe2,0x1, 0xc2,0xff,0xe2,0x1,
+0xc1,0x7f,0x1, 0xde,0xe8,0x72,0x57,0xac,0x17,0x0, 0xe8,0x50,0x69,0x78,0xe8,0x4c,
+0x6a,0xd5,0xb7,0xf, 0xe0,0x9, 0xc7,0xc8,0xb7,0xf, 0xc0,0x6, 0xb, 0xe1,0x12,0x6,
+0x0, 0xcd,0xe0,0xf, 0x31,0xa1,0xe0,0x4c,0x16,0xd8,0x3f,0x9d,0x8c,0xf, 0x8c,0x9f,
+0x17,0x83,0x6f,0x86,0x6f,0x87,0xe8,0x51,0x4f,0xa9,0x27,0x8b,0x17,0x84,0x6f,0x86,
+0x6f,0x87,0x3d,0xe2,0x4c,0x87,0x4c,0x6, 0x3d,0x62,0xe0,0x5, 0xd1,0x98,0x0, 0xc8,
+0xe2,0x0, 0xcf,0x5, 0x5, 0x91,0xd0,0xbb,0x24,0xd, 0xe2,0x0, 0xcb,0x1, 0x1, 0x83,
+0x17,0x85,0x0, 0xee,0xe2,0x0, 0xcb,0x2, 0x2, 0x83,0x17,0x83,0x0, 0xe9,0x17,0x82,
+0x0, 0xe7,0x17,0x81,0x0, 0xe5,0xe2,0x0, 0xcf,0x3, 0x5, 0x87,0xd0,0xa8,0x24,0x7a,
+0xe2,0x0, 0xcb,0x1, 0x1, 0xf3,0x0, 0xed,0xe2,0x0, 0xcc,0x1, 0x5, 0x85,0x57,0x81,
+0xc7,0xfe,0x3c,0x7f,0x4, 0x3, 0x17,0x82,0x6f,0x86,0xe2,0x0, 0xcc,0x81,0x5, 0x85,
+0x57,0x82,0xc7,0xfe,0x3c,0xff,0x4, 0x3, 0x17,0x82,0x6f,0x87,0x15,0x80,0x3d,0x62,
+0xe0,0x4, 0xdf,0xb3,0xe2,0x1, 0xcc,0x7f,0x1, 0x4, 0x17,0x82,0x6f,0x86,0x6f,0x87,
+0x3d,0x60,0x3c,0xe0,0xc5,0x7, 0xc4,0x86,0x3c,0x62,0xdf,0x29,0xe7,0xff,0x0, 0xbb,
+0x8, 0xb7,0xc0,0x7c,0x12,0x0, 0x39,0x64,0x11,0x83,0xe8,0x50,0x4f,0xf8,0x3f,0xf2,
+0x2, 0x84,0x3c,0x64,0xc0,0x4, 0xb, 0xe1,0xe0,0x4c,0x17,0x58,0xe0,0xf, 0x31,0x21,
+0x3f,0x9e,0x3c,0x62,0x8b,0xf, 0x8b,0x9f,0xe0,0x2, 0xd9,0x3b,0xe8,0x28,0x57,0xd3,
+0xe0,0x28,0x3c,0x33,0xe8,0x55,0x4c,0xa4,0xe1,0x25,0x3c,0x6f,0x3d,0xe0,0xe8,0x55,
+0x4f,0xa5,0xc5,0x84,0x15,0x3, 0x3c,0x66,0x77,0x81,0xe0,0x4, 0xdf,0xc0,0x57,0x81,
+0x3d,0xe0,0x3b,0x68,0x3c,0xef,0x3c,0x67,0xc5,0x85,0x15,0x3, 0xe0,0x4, 0xdf,0xb7,
+0x4c,0x85,0xe8,0x55,0x4f,0xa5,0x4f,0x4, 0x3e,0x69,0xe0,0xac,0x3f,0xf, 0xe0,0x7,
+0x37,0xa1,0xe0,0xf, 0x36,0x21,0xe8,0x72,0x56,0x2c,0xe0,0xd, 0x3f,0x16,0x3c,0x19,
+0xe8,0x51,0x4b,0x11,0x3e,0x1f,0xe2,0x1, 0xc6,0xff,0xe2,0x1, 0xc4,0x7f,0x17,0x80,
+0x3f,0x7d,0x4, 0x9f,0xe1,0x24,0x3f,0xe4,0xc1,0x1, 0xe2,0x1, 0xc2,0x7f,0xe2,0x1,
+0xc1,0x7f,0xe7,0xff,0x0, 0xb4,0xe1,0x80,0x95,0x11,0x3d,0x26,0xe2,0x0, 0xcd,0x0,
+0x5, 0x6, 0x3a,0xfa,0x2, 0x84,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xc5,0x81,0xe2,0x1,
+0xc5,0xff,0x3d,0xf8,0x4, 0xf1,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x3e,0x17,0x0, 0xe1,
+0x38,0xec,0x3d,0xe9,0x0, 0xf7,0xe2,0x0, 0xcc,0x81,0x5, 0x8f,0xe8,0x55,0x4f,0xa7,
+0xc7,0xfe,0x3c,0xff,0x3, 0xa, 0xe2,0x0, 0xcc,0x1, 0x5, 0x87,0xe8,0x55,0x4f,0xa6,
+0xc7,0xfe,0xe0,0x28,0x3f,0x98,0x38,0x82,0x14,0x0, 0x0, 0xfe,0x24,0x8d,0xe8,0x55,
+0x4f,0xa7,0xc7,0xff,0x3c,0xff,0x1, 0x8, 0x24,0x6, 0xe8,0x55,0x4c,0xa6,0xc4,0xff,
+0xe1,0x28,0x3c,0x88,0x38,0x82,0x14,0x0, 0x0, 0xfe,0x8, 0xb4,0x11,0x80,0x39,0x63,
+0xe0,0x4c,0x12,0x58,0xe8,0x50,0x4f,0xf8,0x3f,0xf2,0x2, 0x83,0x3c,0x63,0xa, 0x61,
+0x3c,0x62,0xe0,0x2, 0xd8,0x92,0x24,0xb, 0xe0,0xf, 0x31,0x21,0x3f,0x94,0x8c,0x9f,
+0x8c,0xf, 0xdf,0xca,0x24,0x4, 0xc1,0x81,0xe2,0x1, 0xc1,0xff,0xc1,0x1, 0xe2,0x1,
+0xc1,0x7f,0x0, 0xe9,0x8f,0x88,0x3f,0xf9,0x2, 0x8b,0x8f,0xa8,0x3f,0xf9,0x5, 0x88,
+0x8f,0x98,0x3f,0xfa,0x2, 0x85,0x8c,0x38,0xe1,0x28,0x3c,0x1a,0x38,0x82,0x14,0x0,
+0x0, 0xfe,0x8, 0xb7,0xc0,0x78,0xe0,0xe, 0x3c,0x2a,0xe2,0x1, 0xc7,0x7f,0xe0,0xf,
+0x34,0x21,0xe0,0x43,0x3e,0xe, 0xe0,0xe, 0x3f,0xae,0xe0,0xd, 0x3c,0xaa,0xe2,0x1,
+0xc7,0x7f,0x11,0x0, 0xe8,0x55,0x42,0xa6,0xe8,0x55,0x43,0x27,0xe8,0x72,0x50,0xac,
+0xe8,0x55,0x4a,0x25,0xe6,0xa9,0xcb,0x89,0x39,0xe2,0x3c,0x1a,0x3c,0x9a,0x77,0x1,
+0x76,0x84,0x3e,0x78,0x5, 0x5, 0x3c,0x62,0x3c,0xe3,0xc0,0x8, 0xb, 0xe1,0xe2,0x0,
+0xce,0x0, 0x3, 0x1e,0x57,0x1, 0xe0,0x43,0x3d,0xe, 0x3e,0x75,0x4, 0x4, 0x57,0x81,
+0xe0,0x43,0x3d,0xf, 0x57,0x84,0x3d,0x34,0xe2,0x1, 0xc7,0xff,0xe0,0x43,0x3d,0x8f,
+0xe0,0xf, 0x3b,0xaf,0x3d,0xf9,0xe2,0x1, 0xc7,0xff,0x5, 0xc, 0x57,0x1, 0xc6,0x1,
+0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0xe0,0x43,0x3e,0xc, 0x77,0x1, 0x0, 0xdb,0x3d,0x6c,
+0x0, 0xe5,0xe2,0x0, 0xcd,0x80,0x3, 0x19,0xe0,0x43,0x3e,0x8f,0x3d,0xf6,0x4, 0x3,
+0xe0,0x43,0x3e,0x8f,0x3e,0x9a,0x36,0xa1,0x3e,0x91,0x96,0x8d,0x3f,0x60,0x76,0x83,
+0x36,0x8f,0xc7,0x4, 0x76,0x82,0x97,0x1e,0x39,0x9e,0xe0,0x22,0x39,0x7d,0xc5,0x81,
+0xe0,0x43,0x3d,0x8b,0xc7,0xff,0x0, 0xd7,0x3e,0xeb,0x0, 0xe9,0x34,0x21,0xe0,0x4c,
+0x17,0xd8,0x3f,0x98,0x8c,0xf, 0xe8,0x55,0x4e,0xa6,0xe0,0x43,0x3f,0x8, 0x3e,0xfe,
+0x5, 0x7, 0x3d,0x69,0x8c,0x9f,0xe2,0x1, 0xc5,0x7f,0xe7,0xff,0x0, 0x8c,0x14,0x0,
+0x3c,0xe8,0x38,0x82,0xe8,0x12,0x57,0x60,0x97,0x88,0x3f,0xfe,0x5, 0x86,0xe8,0x12,
+0x57,0x60,0x3f,0xae,0xb7,0x88,0x38,0x82,0x17,0x80,0x0, 0xfd,0x8, 0xb4,0xe0,0x4c,
+0x14,0xd8,0x12,0x0, 0xe8,0x50,0x49,0x78,0xe0,0x0, 0x16,0xe4,0x3e,0x64,0x39,0xe9,
+0x39,0x7c,0x1, 0x8b,0xe2,0x0, 0xce,0xe4,0x1, 0x82,0x16,0x80,0xe2,0x0, 0xcc,0x0,
+0x3c,0x6d,0xe0,0x68,0x39,0xa4,0xa, 0x61,0xc6,0x1, 0xe2,0x1, 0xc6,0x7f,0xe0,0xa,
+0x36,0x21,0x3d,0x13,0x38,0xec,0x39,0x71,0xc5,0x2, 0x1, 0x83,0xc4,0x82,0x0, 0xe9,
+0xe0,0x40,0x8f,0xaa,0x8f,0x9, 0xe0,0x40,0x8d,0x9a,0x3f,0x2f,0x8f,0x99,0xe0,0x41,
+0x3f,0x2e,0x3f,0xab,0xe0,0x41,0x3f,0xaf,0x3d,0xef,0xe2,0x1, 0xc7,0x7f,0xe2,0x1,
+0xc5,0xff,0xe1,0x2f,0x3f,0x6b,0xe1,0x2d,0x3e,0xdf,0xe1,0x2f,0x3a,0x6f,0x3a,0x6f,
+0xc0,0x81,0xe2,0x1, 0xc6,0xff,0xe2,0x1, 0xc2,0x7f,0xe2,0x1, 0xc0,0xff,0x0, 0xdc,
+0x8, 0xb4,0xc0,0x5c,0x39,0x68,0x3c,0x60,0x3a,0x69,0x39,0xea,0x14,0x80,0x15,0x22,
+0xc4,0x4, 0xe0,0x5, 0xd4,0x40,0xe0,0x55,0x17,0xa0,0x8f,0x5f,0x8f,0xcf,0x3c,0x60,
+0x6f,0x82,0x32,0x41,0x17,0x81,0x31,0xc1,0x31,0x41,0xc4,0x2, 0x6f,0x3, 0x72,0x4,
+0x71,0x85,0x71,0x6, 0x77,0x87,0xe0,0x4, 0xd9,0xa6,0xc0,0x24,0xa, 0x61,0x8, 0xb5,
+0xc0,0x5c,0x39,0x68,0x3c,0x60,0x3a,0x69,0x39,0xea,0x14,0x80,0x15,0x22,0xc4,0x4,
+0x3a,0xeb,0xe0,0x5, 0xd4,0x20,0xe0,0x55,0x17,0xa0,0x8f,0x5f,0x8f,0xcf,0x32,0x41,
+0x6f,0x82,0x17,0x82,0x3c,0x6f,0x31,0xc1,0x31,0x41,0x3c,0x10,0x6f,0x3, 0x6a,0x85,
+0x72,0x4, 0x71,0x85,0x71,0x6, 0x77,0x87,0xe0,0x4, 0xd9,0x85,0xc0,0x24,0xa, 0xe1,
+0x8, 0xb3,0xc0,0x5c,0x39,0x68,0x3c,0x60,0x15,0x22,0x39,0xe9,0xc4,0x4, 0x14,0x80,
+0xe0,0x5, 0xd4,0x1, 0xe0,0x55,0x17,0xa0,0x8f,0x5f,0x8f,0xcf,0x3c,0x60,0x6f,0x82,
+0x31,0xc1,0x17,0x84,0x31,0x41,0xc4,0x2, 0x6f,0x3, 0x71,0x84,0x71,0x6, 0x77,0x87,
+0xe0,0x4, 0xd9,0x69,0xc0,0x24,0x9, 0xe1,0x8, 0xb1,0xc0,0x66,0xe8,0x55,0x4f,0xa5,
+0xe2,0x0, 0xc5,0x2, 0x6f,0x89,0xe8,0x55,0x4f,0xa4,0x6f,0x88,0x25,0xe, 0x17,0x80,
+0x77,0x8b,0x34,0x41,0x74,0xa, 0x34,0xc1,0x3c,0x60,0x74,0x87,0xc4,0x2, 0x14,0x80,
+0xe0,0x4, 0xdb,0xae,0xc0,0x1a,0x8, 0xe1,0xe0,0x20,0x17,0x80,0xe0,0x90,0xc4,0x80,
+0x77,0x8b,0x0, 0xf0,0x8, 0xb6,0xc0,0x5c,0x39,0xe8,0x3c,0x60,0x3a,0xe9,0x3a,0x6a,
+0x14,0x80,0x15,0x22,0xc4,0x4, 0x39,0x6b,0x3b,0x6c,0xe0,0x5, 0xd3,0xc4,0xe0,0x55,
+0x17,0xa0,0x8f,0x5f,0x8f,0xcf,0x3c,0x60,0x6f,0x82,0xe6,0xaf,0xcf,0xf2,0x6f,0x85,
+0x32,0xc1,0xe6,0xae,0xcf,0xf2,0x32,0x41,0x31,0xc1,0x3c,0xe6,0xc4,0x2, 0xe6,0xad,
+0xc9,0x72,0x6f,0x3, 0x72,0x84,0x72,0x5, 0x71,0x86,0x6f,0x90,0x69,0x11,0xe0,0x4,
+0xda,0xb6,0xc0,0x24,0xb, 0x61,0x8, 0xb5,0xc0,0x5c,0x39,0xe8,0x3c,0x60,0x3a,0xe9,
+0x3a,0x6a,0x14,0x80,0x15,0x22,0xc4,0x4, 0x39,0x6b,0xe0,0x5, 0xd3,0x9c,0xe0,0x55,
+0x17,0xa0,0x8f,0x5f,0x8f,0xcf,0x3c,0x60,0x6f,0x82,0xe6,0xaf,0xcf,0xf2,0x6f,0x85,
+0x32,0xc1,0xe6,0xae,0xcf,0xf2,0x32,0x41,0x31,0xc1,0xc4,0x2, 0xe6,0xad,0xc9,0x72,
+0x6f,0x3, 0x72,0x84,0x72,0x5, 0x71,0x86,0x6f,0x90,0x69,0x11,0xe0,0x4, 0xda,0xfa,
+0xc0,0x24,0xa, 0xe1,0x8, 0xb4,0xc0,0x5c,0x39,0xe8,0x3c,0x60,0x39,0x6a,0x3a,0x69,
+0x15,0x22,0x14,0x80,0xc4,0x4, 0xe0,0x5, 0xd3,0x76,0xe8,0x55,0x4f,0xa5,0x32,0x41,
+0x6f,0x83,0x31,0xc1,0xe8,0x55,0x4f,0xa4,0x72,0x4, 0x6f,0x82,0xe6,0xaf,0xcf,0xf2,
+0x6f,0x85,0xe6,0xae,0xcf,0xf2,0x6f,0x90,0xe6,0xad,0xcf,0xf2,0x71,0x86,0x31,0x43,
+0x6f,0x91,0x21,0xa, 0xe0,0x40,0x17,0x80,0x3c,0x60,0xc4,0x2, 0x77,0x87,0xe0,0x4,
+0xda,0x9f,0xc0,0x24,0xa, 0x61,0xe0,0x80,0x17,0x80,0x0, 0xf7,0x8, 0xb4,0xc0,0x5c,
+0x39,0x68,0x3c,0x60,0x39,0xe9,0x3a,0x6a,0x14,0x80,0x15,0x22,0xc4,0x4, 0xe0,0x5,
+0xd3,0x4a,0xe0,0x55,0x17,0xa0,0x8f,0x5f,0x3c,0x60,0x8f,0xcf,0x31,0x41,0x3d,0x64,
+0x3c,0xe3,0xc4,0x2, 0x6f,0x82,0x6f,0x3, 0x71,0x4, 0xe0,0x4, 0xda,0xe8,0xc0,0x24,
+0xa, 0x61,0x8, 0xb1,0xc0,0x78,0xe0,0xe4,0x17,0xda,0x37,0xc1,0x77,0x82,0xe0,0xe5,
+0x17,0x82,0x37,0xc1,0x77,0x83,0xe0,0xe5,0x17,0xaa,0xe8,0x72,0x74,0x2d,0x37,0xc1,
+0x3c,0x60,0xc4,0x2, 0x77,0x84,0xe0,0x2, 0x17,0x81,0xe8,0x72,0x74,0xae,0x14,0x80,
+0xe8,0x72,0x75,0x41,0xe8,0x72,0x75,0xc2,0x77,0x81,0xe0,0x4, 0xd9,0x57,0xe8,0x72,
+0x54,0x55,0xc0,0x8, 0x8, 0xe1,0xe8,0xff,0x4f,0xc9,0xe2,0x0, 0xcf,0x83,0x1, 0xae,
+0xe8,0xf2,0x4f,0xab,0xe2,0x0, 0xcf,0x81,0x1, 0x29,0x8, 0xb2,0x39,0x68,0x3c,0x69,
+0xda,0xf4,0xe8,0xf2,0x4f,0xa3,0xe2,0x0, 0xcf,0x84,0x24,0x17,0x5, 0x9a,0xe2,0x1,
+0xc1,0x7d,0x29,0x1e,0xe8,0x25,0x4f,0xd0,0xe0,0x23,0x17,0x2a,0x3f,0x1f,0xc7,0x81,
+0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0x83,0x8c,0xe, 0x2, 0x84,0xe8,0x25,0x6f,0xd0,
+0x9, 0x61,0xe8,0x25,0x69,0x50,0x0, 0xfd,0x5, 0x84,0xe0,0x28,0x39,0x8, 0x0, 0xf9,
+0xe8,0xf2,0x4f,0xa3,0xe0,0x28,0x39,0xf, 0x0, 0xf4,0x14,0x1, 0x38,0x82,0x14,0x0,
+0x0, 0xf0,0x8, 0xb4,0xe8,0x25,0x49,0x45,0xef,0xfe,0xd6,0x6c,0x24,0x7e,0xe8,0x45,
+0x4a,0x6c,0xe0,0x45,0x17,0xda,0xe0,0xe, 0x3f,0x94,0xe0,0x7, 0x89,0x8e,0x8e,0xce,
+0x26,0xa0,0x8e,0xce,0xc6,0xff,0xe8,0xf2,0x6e,0xc5,0x8f,0x4e,0xe2,0x0, 0xcf,0x1,
+0xe0,0x0, 0x1, 0xd5,0x3f,0x94,0xe8,0xe7,0x6f,0x1c,0x17,0x0, 0xaf,0x4f,0x3c,0x63,
+0xe0,0x1, 0x89,0x2f,0x3c,0xe2,0xe8,0x25,0x69,0x44,0xe0,0x5, 0xd1,0x19,0x3c,0xe2,
+0x3c,0x64,0xe0,0x1, 0xd4,0xdb,0xe8,0x45,0x4f,0xec,0xc7,0x81,0xe8,0x45,0x6f,0xec,
+0xe8,0xe7,0x4f,0x9c,0xe2,0x0, 0xcf,0x81,0x1, 0x6, 0xe8,0xff,0x4f,0xc9,0xe2,0x0,
+0xcf,0x83,0x1, 0x9b,0xe8,0x72,0x54,0x2a,0x3c,0xe2,0xef,0xfe,0xd7,0x42,0x3c,0xe2,
+0x3c,0x63,0xdf,0x8a,0x3a,0x68,0x3c,0xe2,0x3c,0x63,0xe0,0x1, 0xd4,0x69,0x22,0xd,
+0xe0,0x5, 0xd1,0x11,0x3c,0xe2,0x3c,0x63,0xe0,0x1, 0xd5,0x9b,0xe8,0xe7,0x69,0x9d,
+0xe8,0xf2,0x69,0xc6,0xe8,0x25,0x69,0x46,0xe8,0x45,0x4f,0xec,0xe8,0x45,0x4f,0x6d,
+0x3f,0x7f,0x2, 0x8c,0xef,0xff,0xd0,0xc4,0xef,0xfe,0xdc,0x21,0xda,0x85,0xe8,0x25,
+0x4c,0x45,0xe0,0x1, 0xd6,0xe1,0xef,0xfe,0xd5,0xc6,0xd9,0xc, 0xd9,0x18,0x24,0x9,
+0x3c,0xe3,0x3c,0x62,0xa, 0x21,0xe0,0x2e,0x0, 0x95,0x17,0x0, 0xe7,0xff,0x0, 0xac,
+0xa, 0x61,0x8, 0xb2,0x11,0x0, 0xdf,0x8e,0xc1,0x1, 0xe8,0x45,0x4f,0xed,0xe2,0x1,
+0xc1,0x7f,0x39,0x7f,0x3, 0x86,0xe8,0xf2,0x4f,0xab,0xe2,0x0, 0xcf,0x81,0x1, 0xf4,
+0xe8,0xf2,0x4c,0x46,0xe8,0x25,0x4c,0xc6,0x9, 0x21,0xe0,0xa1,0x0, 0xb9,0x17,0x0,
+0xe8,0x0, 0x4f,0xfa,0xe8,0xf2,0x6f,0x1a,0xe8,0x0, 0x4f,0x7b,0xe8,0xf2,0x6f,0x9c,
+0xe8,0x1, 0x4f,0xb4,0xe8,0xf2,0x6f,0x1d,0xe8,0x0, 0x4f,0x7e,0xe8,0xf2,0x6f,0xd1,
+0xe8,0x0, 0x4f,0xff,0xe8,0xf2,0x6f,0x38,0xe8,0xf2,0x6f,0xb9,0xe8,0x1, 0x4f,0x31,
+0xe8,0x1, 0x4f,0xb0,0xe8,0x0, 0x4d,0xf7,0x3f,0x9e,0xe8,0xf2,0x6f,0xc9,0xe8,0x1,
+0x4f,0x32,0xe8,0x1, 0x4f,0xb3,0xe0,0xd, 0x37,0x27,0x37,0xa6,0x3f,0xcd,0xcf,0x81,
+0xe8,0xf2,0x6f,0xc0,0xe8,0x0, 0x4e,0x79,0xe8,0x0, 0x4e,0xf6,0xe8,0x0, 0x4f,0xf8,
+0xe0,0x0, 0x2f,0x6f,0xe8,0xf2,0x6e,0xea,0xe8,0xf2,0x6f,0xeb,0xe8,0xf2,0x6d,0xec,
+0xe8,0xf2,0x6e,0x6d,0x17,0x80,0xe8,0xb, 0x4f,0x73,0xe8,0xf2,0x6f,0x1f,0x17,0x3,
+0xe8,0xf2,0x6f,0xa0,0xe8,0xf2,0x6f,0xa5,0xe8,0xf2,0x6f,0x2a,0xe8,0xf2,0x6f,0xa9,
+0xe8,0x25,0x4f,0x43,0xe8,0xf2,0x6f,0x26,0xe8,0x25,0x4f,0x45,0xe8,0xf2,0x6f,0x4a,
+0xe0,0x24,0x17,0x6c,0xe8,0xf2,0x6f,0xa7,0xe8,0xf2,0x6f,0xa8,0xe8,0x25,0x4e,0xc5,
+0xe4,0x0, 0xc6,0x85,0x3e,0x9e,0x8e,0x8d,0xe8,0xf2,0x6e,0xba,0xe8,0x25,0x4e,0xc5,
+0xe4,0x0, 0xc6,0x85,0x3e,0x9e,0x8e,0x9d,0xe8,0xf2,0x6e,0xbb,0xe8,0x25,0x4e,0xc5,
+0xe4,0x0, 0xc6,0x85,0x3e,0x9e,0x8e,0xad,0xe8,0xf2,0x6e,0xbe,0xe8,0x25,0x4e,0xc5,
+0xe4,0x0, 0xc6,0x85,0x3f,0x1d,0x8f,0x3e,0xe8,0xf2,0x6f,0x3d,0xe0,0x24,0x17,0x7c,
+0xe8,0x25,0x4e,0xc5,0xe4,0x0, 0xc6,0x83,0x3e,0x9e,0x8e,0x8d,0xe8,0xf2,0x6e,0xc2,
+0xe8,0x25,0x4e,0xc5,0xe4,0x0, 0xc6,0x83,0x3e,0x9e,0x8e,0x9d,0xe8,0xf2,0x6e,0xc3,
+0xe8,0x25,0x4e,0xc5,0xe4,0x0, 0xc6,0x83,0x3f,0x1d,0x8f,0x2e,0xe8,0xf2,0x6f,0x44,
+0xe8,0xd, 0x4f,0x4e,0xe0,0xd, 0x37,0x28,0xe8,0xd, 0x4f,0x4f,0x3f,0x4d,0xe8,0x79,
+0x77,0x3a,0xe8,0xf2,0x6f,0xc8,0x17,0xbb,0xe8,0x25,0x6f,0xd1,0x38,0x82,0xe8,0xf2,
+0x6d,0xea,0xe8,0xf2,0x6e,0x6b,0xe8,0xf2,0x6e,0xec,0xe8,0xf2,0x6f,0xed,0xe7,0xff,
+0x0, 0x93,0x8, 0xb1,0xe0,0x55,0x16,0x20,0x3c,0x6c,0xe0,0xa, 0x15,0x66,0xe0,0x0,
+0x14,0xf6,0xe0,0x5, 0xd1,0x5c,0xe8,0x2a,0x57,0xe6,0xe8,0x2a,0x56,0xe7,0xe8,0x55,
+0x4d,0xdb,0xe0,0xe, 0x3f,0x9d,0xe8,0x30,0x77,0x3, 0x3e,0x68,0xe8,0x55,0x4f,0x5a,
+0x3c,0x6f,0x3f,0x1b,0xe8,0x30,0x77,0x7, 0xc4,0x20,0xe8,0x55,0x4f,0x5c,0x34,0x21,
+0x3c,0x1c,0xe0,0x55,0x16,0x60,0x27,0x1c,0x17,0x0, 0xe8,0x30,0x76,0x84,0xe8,0x30,
+0x77,0x85,0xe8,0x30,0x74,0x8, 0xe8,0x30,0x76,0x9, 0xe8,0x30,0x77,0x8a,0xe8,0x30,
+0x77,0xb, 0xe8,0x30,0x77,0x8c,0xe8,0x30,0x77,0xd, 0xe8,0xc, 0x4f,0xfa,0x2f,0x99,
+0xe8,0x55,0x4f,0xa5,0x37,0xa6,0xc7,0xff,0xe8,0x30,0x77,0x86,0x8, 0xe1,0xe8,0x30,
+0x77,0x84,0xe8,0x30,0x76,0x85,0xe8,0x30,0x76,0x8, 0xe8,0x30,0x74,0x9, 0xe8,0x30,
+0x77,0xa, 0xe8,0x30,0x77,0x8b,0xe8,0x30,0x77,0xc, 0xe8,0x30,0x77,0x8d,0x0, 0xe6,
+0xe8,0x55,0x4f,0xa4,0x0, 0xe8,0x8, 0xb3,0xe0,0xa, 0x11,0xa4,0xe0,0x90,0x11,0x10,
+0x3d,0x63,0xe0,0xb9,0x14,0x20,0x14,0x80,0xe8,0x72,0x71,0x2c,0xe8,0x72,0x74,0x2b,
+0xe0,0x5, 0xd1,0x51,0x3d,0x63,0x14,0x80,0x3c,0x62,0xe0,0x5, 0xd1,0x4c,0x17,0x80,
+0xe8,0xe7,0x6f,0x9c,0x9, 0xe1,0x8, 0xb4,0xe8,0xb, 0x4f,0xfd,0xe0,0xf3,0x11,0x2,
+0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xfe,0x11,0x80,0x3f,0xce,0xe6,0xa3,0xcf,0x8f,
+0xaf,0x82,0xe0,0x0, 0x15,0x69,0xe8,0xb, 0x4f,0xff,0xe0,0xc, 0x14,0x91,0xe0,0xe,
+0x37,0xa8,0xe8,0xc, 0x4f,0x80,0xe0,0xf3,0x14,0x8, 0x3f,0xce,0xe6,0xa3,0xcf,0x8f,
+0xaf,0x92,0x12,0x2, 0xe8,0xc, 0x4f,0x83,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x84,
+0x3f,0xce,0xe6,0xa3,0xcf,0x8f,0xaf,0xa2,0xe8,0xc, 0x4f,0x85,0xe0,0xe, 0x37,0xa8,
+0xe8,0xc, 0x4f,0x86,0x3f,0xce,0xe6,0xa3,0xcf,0x8f,0xaf,0xb2,0xe8,0xc, 0x4f,0x8d,
+0xa9,0xc2,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x8e,0x3f,0xce,0xe6,0xa3,0xcf,0x8f,
+0xaf,0xd2,0xe0,0x5, 0xd0,0xbc,0xe7,0xff,0x17,0xaa,0xe0,0x1, 0xaa,0x52,0xe0,0x6,
+0xaf,0xc2,0xef,0xfe,0xda,0x97,0xe0,0x3, 0xa9,0xa2,0x17,0x8e,0xe0,0x3, 0xa9,0xb2,
+0xe0,0x3, 0xaa,0x42,0xe0,0x3, 0xaf,0xd2,0xe0,0x0, 0x17,0xf0,0xe0,0x3, 0xaf,0xe2,
+0xa, 0x61,0xe8,0xb, 0x4f,0xf3,0xe8,0xb, 0x4e,0xf6,0xe8,0x51,0x6f,0x90,0xe2,0x0,
+0xce,0x93,0xe8,0xb, 0x4f,0xf5,0xe8,0x51,0x6e,0xa5,0xe8,0x51,0x6f,0x91,0xe8,0xb,
+0x4f,0xfd,0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xfe,0x3f,0xce,0xe8,0x28,0x77,0xc9,
+0xe8,0xb, 0x4f,0xff,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x80,0x3f,0xce,0xe8,0x28,
+0x77,0xca,0xe8,0xc, 0x4f,0x81,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x82,0x3f,0xce,
+0xe0,0x41,0x3f,0xcf,0xe8,0x28,0x77,0xcb,0xe8,0xc, 0x4f,0x83,0xe0,0xe, 0x37,0xa8,
+0xe8,0xc, 0x4f,0x84,0x3f,0xce,0xe8,0x28,0x77,0xcc,0xe8,0xc, 0x4f,0x85,0xe0,0xe,
+0x37,0xa8,0xe8,0xc, 0x4f,0x86,0x3f,0xce,0xe8,0x28,0x77,0xcd,0xe8,0xc, 0x4f,0x87,
+0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x88,0x3f,0xce,0xe0,0x41,0x3f,0xcf,0xe8,0x28,
+0x77,0xce,0xe8,0xc, 0x4f,0x89,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x8a,0x3f,0xce,
+0xe8,0x28,0x77,0xcf,0xe8,0xc, 0x4f,0x8b,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x8c,
+0x3f,0xce,0xe0,0x41,0x3f,0xcf,0xe8,0x28,0x77,0xd0,0xe8,0xc, 0x4f,0xbd,0xe8,0x51,
+0x6f,0xa4,0xe8,0xb, 0x4f,0xf7,0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xf8,0x3f,0xce,
+0xe8,0x28,0x77,0xd3,0x2, 0x84,0x17,0x94,0xe8,0x51,0x6f,0xa5,0xe8,0xc, 0x4f,0x8d,
+0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x8e,0x3f,0xce,0xe8,0x28,0x77,0xd1,0xe0,0x2,
+0x17,0x80,0xe8,0x28,0x77,0xd4,0x38,0x82,0x8, 0xb1,0xe0,0x4, 0x15,0x38,0x14,0x80,
+0xe0,0x4c,0x14,0x58,0xe0,0x5, 0xd0,0x6f,0xe8,0xb, 0x4d,0x74,0xe0,0x1, 0x14,0xff,
+0xe4,0x0, 0xc5,0xe, 0xe0,0x4d,0x14,0x54,0x8, 0xa1,0xe0,0xa0,0x0, 0xe4,0x8, 0xb3,
+0xe8,0xb, 0x49,0x73,0xe0,0x1, 0x11,0xff,0xe4,0x0, 0xc1,0xe, 0x3c,0xe3,0x3d,0x62,
+0xe0,0x51,0x14,0x2e,0xe0,0x5, 0xd0,0x57,0x3d,0x62,0x3c,0xe3,0xe0,0x53,0x14,0x46,
+0xe0,0x5, 0xd0,0x51,0x3d,0x62,0x3c,0xe3,0xe0,0x52,0x14,0x3a,0xe0,0x5, 0xd0,0x4b,
+0xe0,0x54,0x14,0x52,0xe0,0x3, 0xd8,0xda,0x15,0x12,0x14,0x80,0xe0,0x55,0x14,0xe,
+0x9, 0xa1,0xe0,0xa0,0x0, 0xc0,0xe8,0xd, 0x4f,0x1b,0xe0,0x60,0x17,0xa2,0xe0,0xd,
+0x37,0x28,0xe8,0xd, 0x4f,0x1c,0x3f,0x4d,0xb7,0x1f,0xe8,0xd, 0x4f,0x1d,0xe0,0xd,
+0x37,0x28,0xe8,0xd, 0x4f,0x1e,0x3f,0x4d,0xb7,0x2f,0xe8,0xd, 0x4f,0x1f,0xe0,0xd,
+0x37,0x28,0xe8,0xd, 0x4f,0x20,0x3f,0x4d,0xb7,0x3f,0xe8,0xd, 0x4f,0x21,0xe0,0x1,
+0xaf,0xf, 0xe8,0xd, 0x4f,0x22,0xe0,0x1, 0xaf,0x1f,0x17,0x0, 0xe8,0x30,0x57,0x96,
+0xe7,0xb, 0xcf,0x9e,0xe7,0xa, 0xcf,0x9e,0xe7,0x7, 0xcf,0x9e,0xe7,0x6, 0xcf,0x9e,
+0xe8,0x30,0x77,0x96,0x38,0x82,0x8, 0xb1,0x15,0x15,0xe0,0xb, 0x14,0xdc,0xe0,0x4c,
+0x14,0x40,0xe0,0x4, 0xdf,0xbc,0x14,0x0, 0xef,0xff,0xd7,0x4e,0x14,0x1, 0xef,0xff,
+0xd7,0x4b,0x14,0x2, 0x8, 0xa1,0xe7,0xee,0x0, 0xc7,0xe8,0xc, 0x4f,0xff,0xe0,0xe,
+0x37,0xa8,0xe8,0xd, 0x4f,0x80,0x3f,0xce,0xc7,0xff,0xe8,0x12,0x77,0xeb,0xe8,0xd,
+0x4f,0x8d,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0x8e,0x3f,0xce,0xc7,0xff,0xe0,0x55,
+0x17,0x20,0xe8,0x12,0x77,0xea,0x8f,0xce,0xc7,0xff,0xe8,0x25,0x6f,0xd3,0x8f,0xde,
+0xc7,0xff,0xe8,0x25,0x6f,0xd2,0x38,0x82,0x8, 0xb1,0xde,0x96,0xdd,0x81,0xde,0x2a,
+0xde,0x7b,0xdf,0xca,0xdf,0x99,0xde,0xe6,0xdf,0x60,0xdf,0x72,0xe0,0x1, 0xdf,0x40,
+0xef,0xff,0xd7,0x83,0xe0,0x1, 0xd3,0x5a,0x8, 0xa1,0x0, 0xd0,0x8, 0xb7,0xc0,0x7e,
+0xe8,0x51,0x4f,0xa9,0xe0,0x5, 0x12,0x3c,0xe2,0x0, 0xcf,0x80,0xe0,0x7, 0x17,0xe8,
+0xe0,0x64,0x39,0x2f,0xe8,0x51,0x4f,0xac,0x11,0x80,0xe2,0x0, 0xcf,0x81,0xe0,0x1,
+0x17,0xf0,0xe0,0x6f,0x39,0xa4,0xe0,0x4c,0x13,0x58,0xe8,0x28,0x52,0xbf,0x3a,0x6f,
+0x39,0x63,0x3b,0xe6,0xe8,0x50,0x4f,0xf8,0x3f,0xf2,0x2, 0x89,0xe8,0x51,0x6f,0x8d,
+0xe8,0x55,0x69,0x8e,0xe8,0x30,0x72,0x99,0xc0,0x2, 0xb, 0xe1,0x3c,0x62,0xe0,0x2,
+0xd3,0x28,0xe0,0xf, 0x31,0x21,0x3f,0x96,0x3f,0x68,0x8c,0xf, 0x77,0x1, 0xe0,0x2,
+0xd3,0x41,0x57,0x1, 0x3c,0x7e,0x3, 0x18,0x3c,0x62,0xe0,0x2, 0xd2,0xf6,0x24,0x28,
+0x3c,0xe2,0x3f,0xe3,0xe4,0x0, 0xc4,0x8e,0xe4,0x0, 0xc7,0x8e,0xe0,0x0, 0xc4,0xfc,
+0xe0,0x51,0x14,0x2e,0x15,0xe, 0x3c,0x97,0x3c,0x1f,0xc1,0x81,0xe0,0x4, 0xdf,0x37,
+0xe2,0x1, 0xc1,0xff,0x0, 0x95,0xe8,0x50,0x4f,0x78,0xe8,0x55,0x4f,0x8f,0x3f,0x7f,
+0x1, 0x8f,0xe8,0x30,0x57,0x99,0x37,0xc1,0x3f,0xf5,0x3, 0x8a,0x14,0x81,0x3c,0x62,
+0xda,0xc6,0xe2,0x0, 0xcc,0x0, 0x2, 0x59,0x1, 0x83,0x3c,0xf4,0x2, 0xd6,0xc1,0x1,
+0xe2,0x1, 0xc1,0x7f,0xe7,0xff,0x0, 0xb8,0xe7,0xff,0x0, 0x9a,0x8, 0xb3,0xe4,0x0,
+0xc4,0xe, 0xe0,0x51,0x11,0x2e,0x39,0x18,0x94,0x2, 0xe0,0x1, 0xdd,0xe1,0x39,0xe8,
+0x94,0x12,0xe0,0x1, 0xde,0x30,0xe8,0x12,0x57,0x6a,0xe8,0x12,0x57,0xeb,0xe1,0xfc,
+0xc7,0x70,0xe1,0x2e,0x3f,0x18,0x27,0x11,0xe0,0x3, 0x17,0x10,0xe1,0x28,0x3c,0x1e,
+0x24,0xc, 0x3c,0x6f,0xe1,0xfe,0xc4,0x38,0xe0,0x1, 0x17,0xc7,0xe1,0x28,0x39,0x98,
+0xe1,0x2f,0x3f,0xa3,0x3c,0x4f,0x9, 0xe1,0x14,0x0, 0x0, 0xfe,0x8, 0xb7,0xc0,0x70,
+0xe4,0x0, 0xc4,0xe, 0xe0,0x51,0x17,0xae,0x3c,0x1f,0xe8,0x55,0x4f,0xa6,0x75,0x87,
+0xe0,0xe, 0x37,0xc1,0x8d,0xf8,0x74,0x85,0x3f,0x7b,0x75,0x6, 0xe0,0x1, 0x8e,0x8,
+0xe0,0x0, 0x2, 0xd1,0x3e,0xef,0x3f,0x6f,0xc6,0xff,0xc7,0x7e,0xc7,0xfd,0xe2,0x1,
+0xc6,0xff,0xe2,0x1, 0xc7,0x7f,0xe2,0x1, 0xc7,0xff,0xe8,0x55,0x48,0xa5,0x39,0xec,
+0xe0,0xa3,0x3d,0x81,0xe8,0x72,0x51,0x2c,0x3d,0xe3,0x35,0xa1,0x3d,0x92,0x95,0xb,
+0x3f,0xb1,0x3e,0xb1,0x3f,0x31,0xe0,0xb, 0x35,0x1, 0xe0,0x9, 0x35,0x2, 0xe0,0x43,
+0x3c,0xc, 0x3a,0x6f,0xe5,0xff,0xc2,0x7e,0x36,0xa1,0x37,0x21,0x3c,0x9b,0xe0,0xb,
+0x3c,0x1f,0x35,0xa1,0x77,0x3, 0x17,0x0, 0x76,0x84,0x16,0x81,0x72,0x2, 0xc5,0xa,
+0x3d,0x92,0x39,0xed,0x3a,0xee,0x3b,0xee,0x3a,0x6e,0x76,0x81,0xe2,0x0, 0xcc,0x0,
+0x3, 0x1e,0xc6,0x1, 0xe0,0x43,0x3e,0xc, 0x3f,0x9c,0x16,0x81,0x37,0xa1,0xe8,0x55,
+0x43,0x27,0x39,0x1f,0x39,0xed,0x3d,0xed,0x14,0x0, 0x38,0xed,0x3b,0x7c,0xe0,0x0,
+0x2, 0x5d,0x52,0x5, 0x53,0x6, 0xab,0x84,0x55,0x7, 0xaa,0x86,0xaf,0xa, 0xc0,0x10,
+0xb, 0xe1,0x17,0x82,0x17,0x1, 0x16,0x80,0xe7,0xff,0x0, 0xb9,0x21,0x91,0x53,0x2,
+0x50,0x84,0x3b,0x1b,0x3b,0x11,0x90,0x86,0xe0,0x26,0x38,0x99,0x23,0x3b,0xe0,0x21,
+0x3d,0x11,0x20,0xb8,0x38,0xe7,0xc0,0x81,0x3b,0xe1,0xe2,0x1, 0xc3,0xff,0x50,0x81,
+0xe2,0x0, 0xc8,0x81,0x1, 0xb1,0x50,0x82,0x53,0x3, 0x38,0x9b,0x38,0x96,0x90,0x81,
+0xe0,0x26,0x38,0x99,0x23,0x29,0xe0,0x21,0x3d,0x11,0x20,0xa6,0x38,0xe5,0xc0,0x81,
+0xe2,0x0, 0xce,0x81,0x3a,0xe1,0xe2,0x1, 0xc2,0xff,0xe0,0x0, 0x1, 0xf3,0x90,0x8b,
+0xe0,0x26,0x38,0x99,0x23,0x20,0xe0,0x21,0x3d,0x11,0x20,0x9d,0xc7,0x1, 0xe2,0x1,
+0xc7,0x7f,0x10,0x81,0xe0,0x6, 0x39,0xcd,0x3b,0x41,0xe2,0x1, 0xc3,0x7f,0xc5,0xfe,
+0xe7,0xff,0x23,0x29,0xc4,0x7f,0x76,0x81,0xe0,0x43,0x3c,0x8, 0x3e,0xe1,0xe7,0xff,
+0x0, 0x9f,0x39,0xe4,0x0, 0xcd,0xe2,0x0, 0xce,0x81,0x1, 0x83,0x3e,0xe4,0x0, 0xe0,
+0x38,0xed,0x0, 0xe9,0x38,0xe4,0x0, 0xe7,0x25,0x91,0x57,0x82,0x52,0x4, 0x3f,0x92,
+0x3f,0x94,0x97,0x8f,0xe0,0x24,0x3f,0x99,0x22,0x39,0xe0,0x2f,0x3d,0x1f,0x27,0xb6,
+0x3f,0xe7,0xc7,0x81,0x3b,0xef,0xe2,0x1, 0xc3,0xff,0xe2,0x0, 0xc9,0x81,0x1, 0xb0,
+0x57,0x82,0x51,0x83,0x3f,0x92,0x3f,0x93,0x97,0x8f,0xe0,0x23,0x3f,0x99,0x21,0xa8,
+0xe0,0x2f,0x3d,0x1f,0x27,0xa5,0x3f,0xe5,0xc7,0x81,0xe2,0x0, 0xce,0x81,0x3a,0xef,
+0xe2,0x1, 0xc2,0xff,0x1, 0xab,0x97,0x82,0xe0,0x23,0x3f,0x99,0x21,0xa0,0xe0,0x2f,
+0x3d,0x1f,0x27,0x9d,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x3f,0xe1,0xe0,0x3, 0x3d,0xcd,
+0x39,0xcf,0xe2,0x1, 0xc1,0xff,0xc1,0x2, 0xe7,0xfe,0x21,0xed,0xc6,0x1, 0x39,0xed,
+0xe0,0x43,0x3e,0xc, 0x3e,0xef,0xe7,0xfe,0x0, 0xe3,0x3d,0xe8,0x0, 0xcf,0xe2,0x0,
+0xce,0x81,0x1, 0x83,0x3e,0xe8,0x0, 0xe0,0x3f,0xed,0x0, 0xe9,0x3f,0xe8,0x0, 0xe7,
+0x38,0xed,0xc5,0xfe,0x16,0x81,0xe7,0xff,0x0, 0x9f,0x3f,0xed,0xc1,0x2, 0x3e,0xe1,
+0x0, 0xe6,0x8, 0xb1,0xc0,0x7c,0x3d,0xe0,0x3d,0x60,0x3c,0xe0,0xc5,0x85,0xc5,0x4,
+0xc4,0x83,0xde,0xed,0x4f,0x84,0x4c,0x3, 0x3c,0x1f,0x4f,0x85,0x3c,0x1f,0xe2,0x1,
+0xc4,0x7f,0x17,0x85,0xe1,0x28,0x3c,0x1f,0xc0,0x4, 0x8, 0xe1,0x8, 0xb1,0xc0,0x7c,
+0x3d,0xe0,0x3d,0x60,0x3c,0xe0,0xc5,0x85,0xc5,0x4, 0xc4,0x83,0xde,0xd8,0x4f,0x3,
+0x4c,0x4, 0x4e,0x85,0xe0,0xf, 0x3f,0x18,0x3f,0x9d,0xe2,0x1, 0xc7,0xff,0xe2,0x0,
+0xcf,0x8c,0x5, 0x8d,0xe2,0x0, 0xcf,0x4, 0x5, 0x8a,0xe2,0x0, 0xcc,0x2, 0x5, 0x87,
+0x3f,0x78,0x4, 0x85,0xe1,0x28,0x3c,0x2d,0xc0,0x4, 0x8, 0xe1,0x14,0x0, 0x0, 0xfd,
+0x8, 0xb4,0xe0,0x64,0x11,0x7a,0xe0,0xf, 0x34,0xa1,0x39,0x1f,0x17,0x80,0xaf,0x82,
+0x3a,0x68,0xaf,0x92,0xde,0x8c,0xe2,0x0, 0xcc,0x1, 0x1, 0x4, 0x11,0x80,0x3c,0x63,
+0xa, 0x61,0x39,0xe8,0x3c,0x64,0xdf,0xb6,0x24,0x7a,0x17,0x8a,0xa9,0x82,0xaf,0x92,
+0x0, 0xf7,0xe0,0x64,0x17,0xfa,0x34,0x21,0x3c,0x1f,0x8f,0x88,0xe2,0x0, 0xcf,0x81,
+0x1, 0x8a,0xe8,0xf2,0x4f,0xfa,0x14,0x4, 0xe2,0x0, 0xcf,0x80,0x17,0x88,0xe0,0x68,
+0x39,0xaf,0x38,0x82,0xe2,0x0, 0xcf,0x82,0x14,0x0, 0x17,0x88,0xe0,0x68,0x39,0x2f,
+0x0, 0xf9,0xe8,0x55,0x4e,0xe, 0xe0,0x51,0x17,0x2e,0x17,0x80,0x3e,0x7f,0x1, 0x83,
+0x14,0x0, 0x38,0x82,0x8e,0xce,0xc7,0xe, 0xe6,0xac,0xce,0xcd,0x3e,0xf8,0x1, 0x5,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x0, 0xf3,0x14,0x1, 0x0, 0xf4,0x8, 0xb3,0xe0,0x60,
+0x11,0xb6,0x11,0x0, 0x3c,0x62,0xdf,0xe6,0x2c,0x3, 0xe0,0x2, 0xac,0x53,0xc1,0x1,
+0xe2,0x1, 0xc1,0x7f,0xe2,0x0, 0xc9,0xa, 0xc1,0xba,0x1, 0xf5,0x9, 0xe1,0xe0,0x60,
+0x17,0xb6,0xe0,0x64,0x16,0xfa,0xe0,0x2, 0x8f,0x5f,0xe2,0x1, 0xcf,0x7f,0x1, 0x4,
+0xc7,0x1, 0xe0,0x2, 0xaf,0x5f,0xc7,0xba,0x3f,0xfd,0x1, 0xf6,0x38,0x82,0x3f,0x68,
+0xe4,0x0, 0xc7,0xe, 0xe0,0x51,0x17,0xae,0x3f,0x9e,0x8f,0x7f,0xe8,0x55,0x4e,0xa6,
+0x3e,0xfe,0x5, 0xa5,0xe0,0x1, 0x8f,0x8f,0xe8,0x55,0x4e,0xa7,0x3e,0xff,0x4, 0x9f,
+0xe8,0x55,0x4e,0xa5,0xe4,0x0, 0xc4,0x3a,0xe0,0xaf,0x3e,0x8e,0xe8,0x72,0x57,0x2c,
+0x37,0xa1,0x3f,0x9e,0x96,0x8f,0xe0,0x60,0x17,0xb6,0xe0,0xe, 0x3f,0x98,0xe0,0x1,
+0x96,0xe, 0x3e,0x7d,0x3, 0x3, 0xe0,0x1, 0xb6,0x8e,0x3c,0x1f,0xe8,0x28,0x57,0x3f,
+0xe0,0x1, 0x97,0x98,0x3f,0x7f,0x5, 0x3, 0xe0,0x1, 0xb7,0x18,0x38,0x82,0xe8,0xf3,
+0x4f,0x8e,0xe0,0x0, 0x2f,0xc6,0x8, 0xb5,0x3f,0x68,0xe4,0x0, 0xc7,0x3a,0xe0,0x60,
+0x17,0xb6,0x3f,0x9e,0xe0,0x2, 0x89,0xcf,0x3a,0x68,0x21,0x83,0xa, 0xa1,0x0, 0xc0,
+0xe0,0x2, 0x8f,0x5f,0xe2,0x0, 0xcf,0x1d,0x2, 0x85,0x17,0x1, 0xe0,0x2, 0xaf,0x4f,
+0x0, 0xf6,0x8f,0x1f,0xe2,0x0, 0xcf,0x1d,0x2, 0x8b,0x39,0x6f,0xe8,0x55,0x4a,0xa6,
+0xc1,0x14,0xe8,0x55,0x4f,0xe, 0xe0,0x51,0x17,0xae,0x3f,0x73,0x2, 0x82,0xa, 0xe1,
+0x3e,0xe3,0xe4,0x0, 0xc6,0x8e,0x3e,0x9f,0x8f,0x4d,0xe4,0x0, 0xc7,0x6, 0x3f,0x9e,
+0xe0,0x3, 0xc7,0xa4,0x8e,0xf, 0x2e,0x10,0x3f,0xe5,0x8f,0x7d,0xc7,0xff,0xe2,0x1,
+0xc7,0xff,0xe1,0x2f,0x3f,0x9e,0x27,0x88,0xe1,0x2e,0x3f,0xc, 0x27,0x5, 0x17,0x82,
+0x3c,0x64,0xaf,0x82,0xdf,0x8d,0xc1,0x81,0xe2,0x1, 0xc1,0xff,0x0, 0xdb,0x38,0x82,
+0xe8,0xf3,0x4f,0x8e,0xe0,0x60,0x17,0x36,0xe2,0x0, 0xcf,0x82,0xe4,0x0, 0xc4,0x3a,
+0x1, 0x88,0x3f,0x18,0xe0,0x6, 0x8c,0x3e,0x17,0x87,0xe1,0x28,0x3c,0x1f,0x0, 0x8e,
+0xe8,0xf3,0x4f,0x8e,0xe2,0x0, 0xcf,0x81,0x1, 0x8a,0xe8,0x55,0x4f,0xa6,0x3f,0x18,
+0xe0,0x6, 0x8c,0x3e,0xc7,0xf9,0xe0,0x28,0x3f,0x98,0x38,0x82,0x3f,0x18,0xe0,0x6,
+0x8c,0x4e,0x17,0x84,0x0, 0xeb,0x8, 0xb2,0x39,0x68,0xdf,0xdb,0xe0,0x0, 0x24,0x47,
+0xe4,0x0, 0xc1,0x3a,0xe0,0x60,0x14,0x36,0x3c,0x12,0x8e,0xb8,0xe2,0x1, 0xce,0xb4,
+0x2, 0xbe,0x8f,0x48,0xe2,0x0, 0xcf,0xb, 0x2, 0xba,0x8f,0xd8,0xe2,0x1, 0xcf,0xb4,
+0x2, 0xb6,0x8c,0x68,0xe2,0x0, 0xcc,0xb, 0x2, 0xb2,0xe2,0x0, 0xce,0xa8,0x5, 0x84,
+0xe2,0x0, 0xcf,0x9, 0x2, 0xac,0xe2,0x0, 0xcf,0xa8,0x5, 0x84,0xe2,0x0, 0xcc,0x9,
+0x2, 0xa6,0xe2,0x0, 0xce,0xd0,0x5, 0x84,0xe2,0x0, 0xcf,0x7, 0x2, 0xa0,0xe2,0x0,
+0xcf,0xd0,0x5, 0x84,0xe2,0x0, 0xcc,0x7, 0x2, 0x9a,0xe2,0x1, 0xce,0x82,0x5, 0x84,
+0xe2,0x0, 0xcf,0x5, 0x2, 0x94,0xe2,0x1, 0xcf,0x82,0x5, 0x84,0xe2,0x0, 0xcc,0x5,
+0x2, 0x8e,0xe2,0x1, 0xce,0x96,0x5, 0x84,0xe2,0x0, 0xcf,0x3, 0x2, 0x88,0xe2,0x1,
+0xcf,0x96,0x5, 0x87,0x17,0x83,0xe1,0x28,0x3c,0x1f,0x9, 0x61,0x14,0x1, 0x0, 0xfe,
+0x14,0x0, 0x0, 0xfc,0x8, 0xb2,0x39,0x68,0xdf,0x8c,0x24,0x36,0x3f,0x62,0xe4,0x0,
+0xc7,0x3a,0xe0,0x60,0x14,0x36,0xe0,0xd, 0x3c,0x1e,0xe0,0x1, 0x8f,0x8d,0xc7,0xff,
+0xe2,0x0, 0xcf,0x81,0x3f,0xe8,0x5, 0xb0,0x8e,0x3d,0xe2,0x0, 0xce,0x55,0x2, 0x8b,
+0x8e,0xcd,0xe2,0x0, 0xce,0x87,0x2, 0x87,0xe2,0x0, 0xce,0x37,0x5, 0x86,0xe2,0x0,
+0xce,0x85,0x5, 0x8a,0x14,0x1, 0x0, 0x98,0xe2,0x0, 0xce,0x2d,0x5, 0x85,0xe2,0x0,
+0xce,0x87,0x14,0x1, 0x1, 0x11,0xe0,0x8, 0x3f,0x9e,0x8f,0xd8,0xe2,0x0, 0xcf,0xd5,
+0x2, 0xf2,0x8c,0x68,0xe2,0x0, 0xcc,0x7, 0x2, 0xee,0xe2,0x0, 0xcf,0xb7,0x5, 0x85,
+0x17,0x85,0xe1,0x28,0x3c,0x1f,0x9, 0x61,0xe2,0x0, 0xcf,0xad,0x5, 0x85,0x17,0x87,
+0xe0,0x28,0x3c,0xf, 0x0, 0xf9,0x14,0x0, 0x0, 0xf7,0x8, 0xb7,0xc0,0x7c,0xe8,0xf3,
+0x4f,0x8e,0x3f,0x68,0xe4,0x0, 0xc7,0xe, 0xe0,0x51,0x13,0xae,0xe2,0x0, 0xcf,0x81,
+0xe0,0x6, 0x3b,0x9e,0x3a,0x69,0x39,0x6a,0x3a,0xeb,0xe0,0x60,0x11,0xb6,0xe4,0x0,
+0xc2,0x3a,0x94,0x6, 0x1, 0x6, 0xe8,0xf3,0x4f,0x8e,0xe2,0x0, 0xcf,0x82,0x1, 0xb1,
+0x77,0x2, 0xe0,0x1, 0xda,0xcd,0xe0,0xf, 0x39,0x94,0x3b,0x68,0xe0,0x2, 0x94,0x6f,
+0x77,0x81,0xe0,0x1, 0xda,0xc5,0x57,0x2, 0x3b,0x28,0x3b,0x9e,0x94,0x17,0xe0,0x1,
+0xdb,0x12,0x57,0x81,0x3b,0xe8,0xe0,0x2, 0x94,0x7f,0xe0,0x1, 0xdb,0xc, 0x3b,0xa8,
+0xe0,0xf, 0x39,0x94,0xe0,0x1, 0x8e,0x9f,0xe0,0x41,0x3d,0x27,0xc6,0xfd,0xe2,0x0,
+0xce,0x81,0xe0,0x41,0x3f,0x26,0x2, 0xa3,0x8f,0xef,0xe2,0x0, 0xc9,0xb, 0x1, 0xa4,
+0xe0,0x8, 0x3f,0x1a,0xe0,0x1, 0x15,0x7a,0xe1,0x28,0x3c,0x1a,0xc0,0x4, 0xb, 0xe1,
+0xe0,0x1, 0xda,0x9e,0xe0,0xf, 0x39,0x94,0x3b,0xe8,0xe0,0x2, 0x94,0x6f,0x77,0x81,
+0xe0,0x1, 0xda,0x96,0x3b,0xa8,0x94,0x16,0xe0,0x1, 0xda,0xe5,0x57,0x81,0x3b,0x68,
+0xe0,0x2, 0x94,0x7f,0xe0,0x1, 0xda,0xdf,0x3b,0x28,0x0, 0xd3,0x3e,0xee,0x8f,0xcf,
+0x3f,0x6a,0x3d,0x6d,0x0, 0xdb,0xe2,0x0, 0xc9,0x1, 0x1, 0xa0,0xe0,0xd, 0x3f,0x1a,
+0xe2,0x2, 0xce,0xde,0x2, 0xbd,0x16,0x84,0xe1,0x2f,0x3e,0xaf,0x27,0xbc,0x2a,0xbb,
+0x39,0x94,0x8f,0xa3,0xe0,0x2d,0x3f,0x8d,0x2e,0x85,0x16,0x88,0xe0,0x2f,0x3f,0x8d,
+0x27,0x8b,0xe0,0x0, 0x17,0xe4,0xe0,0x0, 0x14,0x64,0xe1,0x28,0x3d,0x18,0xe1,0x2f,
+0x3f,0x1f,0x3c,0x4f,0x0, 0xc4,0x17,0xbc,0x0, 0xf7,0x3c,0x6f,0xe4,0x0, 0xc4,0xa,
+0xe0,0x0, 0x16,0xe3,0x15,0x81,0xe1,0x2c,0x3e,0xa8,0xe0,0x25,0x3a,0x8b,0x26,0x2,
+0x2a,0x91,0x16,0x32,0xe1,0x28,0x3c,0x6c,0xe6,0xa7,0xcf,0x8f,0xc7,0x81,0xe4,0x0,
+0xc7,0x8a,0xe1,0x2d,0x3e,0xaf,0x26,0x82,0x2a,0x88,0x16,0xb2,0xe1,0x2f,0x3f,0xed,
+0x0, 0xdd,0xe0,0x0, 0x14,0x64,0x0, 0xf1,0xe0,0x0, 0x17,0xe4,0x0, 0xd7,0x3c,0x62,
+0xe7,0xff,0x0, 0x9e,0x14,0x0, 0xe7,0xff,0x0, 0x9b,0x8, 0xb6,0xe0,0x64,0x11,0x7a,
+0xe0,0xf, 0x34,0xa1,0x39,0x1f,0x89,0x82,0xe2,0x0, 0xc9,0x81,0x1, 0x9b,0x8f,0x92,
+0x27,0x97,0xc7,0xff,0xaf,0x92,0x3b,0x68,0x3a,0xe9,0xdd,0x89,0x3a,0x68,0x24,0x4,
+0x17,0x82,0xaf,0x82,0x0, 0x88,0x3d,0xe8,0x3d,0x63,0x3c,0xe5,0x3c,0x66,0xdf,0x36,
+0x2c,0x4, 0x11,0x81,0x3c,0x63,0xb, 0x61,0xaa,0x2, 0x11,0x82,0x0, 0xfc,0xaf,0x82,
+0x0, 0xfd,0xe2,0x0, 0xc9,0x82,0x1, 0x87,0x15,0x80,0x15,0xb, 0xdf,0x27,0x24,0x72,
+0x17,0x80,0x0, 0xe8,0x11,0x80,0x0, 0xef,0x3e,0xe9,0xe4,0x0, 0xc6,0xba,0xe0,0x60,
+0x17,0xb6,0xe0,0xe, 0x3f,0x9d,0xe0,0x1, 0x8e,0x1e,0xc6,0x7d,0xe2,0x0, 0xce,0x1,
+0x2, 0xb1,0x8d,0x5e,0x8d,0xee,0xe8,0xf3,0x4e,0xe, 0x14,0x1, 0xe2,0x0, 0xce,0x0,
+0x17,0x3, 0x3e,0x68,0xe0,0x6c,0x39,0x2e,0x2d,0x23,0xe1,0x2e,0x3e,0x1b,0x27,0x20,
+0x3f,0x69,0xe4,0x0, 0xc7,0xe, 0xe0,0x51,0x14,0xae,0x3c,0x9e,0xe0,0xc, 0x3f,0x9d,
+0x8f,0x79,0xe0,0x6, 0x8d,0xbc,0x3f,0x2b,0xe0,0x41,0x3f,0x2e,0xe1,0x2e,0x3c,0x2e,
+0x27,0xb, 0xe0,0x1, 0x8f,0x9, 0xe0,0x6, 0x8e,0x4c,0x3f,0x2c,0xe0,0x41,0x3f,0x2e,
+0xe1,0x2e,0x3c,0x2e,0x2f,0x6, 0x3f,0x9d,0x17,0x1, 0xe0,0x4, 0xaf,0x6f,0x14,0x0,
+0x38,0x82,0x8d,0x3e,0x8d,0xce,0x0, 0xd0,0x8, 0xb5,0x3f,0x69,0xe4,0x0, 0xc7,0x3a,
+0xe0,0x60,0x17,0xb6,0x3f,0x9e,0x3a,0x68,0x39,0xe9,0xe0,0x1, 0x8a,0x8f,0xdf,0xb5,
+0x2c,0xb, 0x39,0x68,0xe1,0x2b,0x3a,0x88,0x15,0x1, 0x3c,0xe3,0x3c,0x64,0xde,0xce,
+0xe1,0x28,0x3c,0x2, 0xa, 0xe1,0x14,0x1, 0x0, 0xfe,0x8, 0xb7,0xc0,0x78,0xe8,0x60,
+0x49,0x35,0x29,0x20,0xe8,0xd, 0x4a,0xd, 0xe0,0x51,0x16,0xae,0xe0,0xf, 0x32,0x28,
+0xe8,0xd, 0x4a,0xe, 0x3b,0xe8,0x3a,0x4f,0x32,0x41,0x3e,0x62,0x39,0xe2,0x3a,0xed,
+0x75,0x4, 0xe8,0x55,0x4f,0x8e,0x3f,0xf3,0x2, 0x90,0x57,0x84,0xe2,0x0, 0xcf,0x82,
+0xe0,0x1, 0x1, 0xa0,0xe0,0x8, 0x36,0x24,0x39,0x18,0xe8,0x60,0x69,0x35,0xe8,0x60,
+0x49,0x35,0x3c,0x62,0xc0,0x8, 0xb, 0xe1,0x3b,0xf3,0xe0,0x0, 0x1, 0x47,0x3f,0xe3,
+0xe4,0x0, 0xc7,0x8e,0xe0,0x6, 0x3e,0x9f,0x94,0x6, 0x76,0x81,0x76,0x2, 0xe0,0x1,
+0xd9,0x7f,0x3f,0x68,0x94,0x16,0x77,0x3, 0xe0,0x1, 0xd9,0xcd,0xe8,0xf3,0x4d,0x8e,
+0x8f,0xc6,0xe2,0x0, 0xcd,0x81,0x56,0x81,0x56,0x2, 0x57,0x3, 0x1, 0x6, 0xe8,0xf3,
+0x4d,0x8e,0xe2,0x0, 0xcd,0x82,0x1, 0xae,0x3d,0xef,0xe4,0x0, 0xc5,0x86,0x3d,0x95,
+0xe0,0x3, 0xc5,0xa4,0x8d,0xb, 0x15,0x82,0xe0,0x2b,0x3d,0xb, 0x3a,0x78,0x5, 0xaf,
+0x29,0x1c,0xe2,0x1, 0xcc,0x48,0x5, 0xa0,0xe2,0x0, 0xcf,0x2d,0x5, 0x96,0xe8,0x12,
+0x55,0x6b,0xc5,0x53,0x3f,0x7a,0x3, 0x91,0xe4,0x0, 0xc7,0x86,0x3f,0x95,0xe0,0x3,
+0xc7,0xa4,0x8f,0xf, 0xe1,0x22,0x3f,0x2, 0x21,0x5, 0xe6,0xaf,0xcf,0xfb,0xe0,0x0,
+0x2f,0xcb,0x11,0x0, 0xe0,0x22,0x3f,0x2, 0xc1,0x81,0xe2,0x1, 0xc1,0xff,0xe7,0xff,
+0x0, 0xa2,0x15,0x80,0x0, 0xdc,0xe2,0x0, 0xcc,0x2d,0x5, 0xf7,0xe2,0x1, 0xcf,0x48,
+0x5, 0xf4,0xe8,0x12,0x55,0x6b,0xe1,0xfe,0xc5,0x38,0x0, 0xdd,0x2e,0x6e,0xe8,0x12,
+0x55,0x6a,0x3c,0xea,0xe1,0xfe,0xc4,0xb8,0x3c,0x79,0x3, 0x9a,0xe2,0x0, 0xcf,0x2d,
+0x5, 0xe4,0xe8,0x12,0x55,0x6b,0xc5,0x53,0x3f,0x7a,0x3, 0xdf,0x3f,0x6f,0xe4,0x0,
+0xc7,0x6, 0x3f,0x15,0xe0,0x3, 0xc7,0x24,0x8f,0xe, 0xe1,0x28,0x3f,0xc, 0x24,0x4,
+0xe6,0xaf,0xcf,0xfb,0x2f,0x9b,0x14,0x0, 0xe0,0x2c,0x3f,0x8, 0x0, 0xce,0xc5,0x53,
+0x3c,0x7a,0x3, 0xcb,0xe2,0x1, 0xcf,0x48,0x5, 0xc8,0xe8,0x12,0x55,0x6b,0xe1,0xfe,
+0xc5,0x38,0x3f,0x7a,0x3, 0xc2,0xe4,0x0, 0xc7,0x86,0x3f,0x95,0xe0,0x3, 0xc7,0xa4,
+0x8f,0xf, 0x0, 0xe4,0x11,0x1, 0xe7,0xff,0x0, 0xb9,0x16,0x1, 0xe7,0xff,0x0, 0xb6,
+0xe0,0x8, 0x31,0x24,0x3c,0x1c,0xe8,0x60,0x6c,0x35,0xe7,0xfe,0x0, 0xe2,0x8, 0xb7,
+0xc0,0x78,0xe8,0x55,0x4a,0xa7,0xe8,0x55,0x4b,0x25,0xc2,0xff,0x3f,0xeb,0xe2,0x1,
+0xc2,0xff,0xe0,0xaf,0x3d,0x6, 0x72,0x83,0x37,0xa1,0xe8,0x72,0x52,0xac,0xe0,0x43,
+0x39,0xb, 0x3f,0x95,0x97,0x8f,0x3b,0x3c,0xe0,0x4, 0x37,0xcf,0x3a,0x1f,0xe0,0x43,
+0x3b,0x88,0x11,0x80,0x16,0x10,0x74,0x84,0x32,0x1, 0x3f,0xe2,0x3f,0xf7,0x3, 0xf,
+0x57,0x84,0x16,0x90,0xe0,0x43,0x3b,0x8f,0x39,0x77,0x5, 0x2e,0xe0,0x1, 0x14,0x7f,
+0xe1,0x28,0x39,0xd8,0xe2,0x1, 0xc4,0x7f,0xc0,0x8, 0xb, 0xe1,0xe2,0x0, 0xcf,0x80,
+0x5, 0x1f,0xe0,0xb, 0x3f,0x96,0x35,0xa1,0x3d,0x95,0x94,0x8b,0xe0,0x40,0x95,0x9b,
+0xe0,0x2a,0x3c,0x94,0x25,0x15,0xe0,0x2a,0x3d,0x9c,0x25,0x12,0xe0,0x8, 0x34,0x8f,
+0xe0,0x1, 0x34,0xcc,0x34,0x24,0xe0,0xa, 0x35,0x8f,0x3c,0x41,0x34,0xa4,0x76,0x1,
+0x77,0x82,0xe0,0x4, 0xd9,0xb2,0x56,0x1, 0x57,0x82,0xe1,0x23,0x39,0xe9,0xc7,0xff,
+0xe0,0x43,0x3f,0x8f,0x0, 0xcc,0x57,0x83,0x39,0x7f,0x3, 0x1c,0xe0,0xf, 0x39,0x16,
+0x37,0xa1,0x3f,0x95,0x94,0x8f,0x95,0x9f,0xe0,0x2f,0x3c,0x94,0x27,0x93,0xe0,0x2f,
+0x3d,0x9d,0x27,0x90,0xe0,0xf, 0x34,0x8f,0xe0,0x8, 0x34,0xcc,0x37,0xa4,0xe0,0xa,
+0x35,0x8f,0x3c,0x4f,0x34,0xa4,0x76,0x82,0xe0,0x4, 0xd9,0x8f,0x56,0x82,0xe1,0x23,
+0x39,0xe9,0xc1,0x1, 0xe0,0x43,0x39,0x2, 0xe7,0xff,0x0, 0xb0,0xe6,0xa9,0xcc,0x8,
+0xe0,0xf, 0x3c,0x29,0xe0,0x43,0x3f,0x8f,0x3f,0xfc,0x2, 0x2, 0x3f,0xea,0x3c,0x2a,
+0xe0,0x43,0x3c,0x8, 0x3c,0x7b,0x4, 0x2, 0x3c,0x69,0xc7,0x81,0xe0,0x8, 0x3f,0xa8,
+0xe2,0x1, 0xc4,0x7f,0x38,0x82,0x8, 0xb7,0xc0,0x7e,0x3e,0xe8,0x3a,0x6a,0xe0,0x0,
+0x2d,0xe9,0xe8,0x55,0x4f,0x27,0x3f,0xee,0xc7,0xff,0xc7,0x7e,0xe0,0x43,0x3f,0x8f,
+0xe0,0x43,0x3f,0xe, 0xe8,0x55,0x4a,0xa5,0xe0,0x43,0x3c,0xd, 0xe0,0xb, 0x3c,0x35,
+0x3d,0x65,0xe5,0xff,0xc5,0x7e,0xe0,0x6, 0x3d,0x9f,0x16,0x0, 0x3d,0x9e,0xe8,0x72,
+0x50,0xac,0x75,0x1, 0x33,0x21,0x35,0xa1,0x3c,0xed,0x39,0xec,0x39,0x6c,0x3d,0x68,
+0xe2,0x0, 0xcd,0x0, 0xe0,0x0, 0x3, 0x4a,0x3b,0x6d,0xc3,0x1, 0xe0,0x43,0x3b,0x6,
+0xe0,0xa, 0x32,0xa1,0x3a,0xb6,0xe8,0x55,0x4e,0x26,0x3f,0x95,0x3a,0x9e,0xe0,0x43,
+0x3d,0x8c,0x37,0xa1,0x32,0xa1,0x13,0x0, 0x3f,0x6d,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,
+0xe0,0x43,0x3b,0x8e,0x3d,0xf7,0xe0,0x0, 0x2, 0x4d,0xc6,0x7f,0xe0,0x43,0x3e,0xc,
+0x15,0x80,0xe0,0x43,0x3d,0xd, 0xe0,0x43,0x3c,0x89,0xdf,0xa1,0xe4,0x0, 0xc2,0x3a,
+0xe0,0x60,0x17,0xb6,0xe0,0xe, 0x3f,0x94,0x39,0x73,0xac,0x6e,0x3a,0xef,0xe0,0x0,
+0x5, 0xce,0x3d,0xe3,0x15,0x0, 0xc5,0x81,0xe0,0x8, 0x31,0x4c,0xe0,0x9, 0x31,0x24,
+0xe0,0x4, 0xd9,0x13,0x21,0x9, 0x21,0x86,0x39,0x69,0x2c,0x4, 0xe2,0x1, 0xcc,0xff,
+0x5, 0x83,0xe0,0x1, 0x11,0x7f,0xe0,0xf, 0x3a,0x94,0xa9,0x5f,0xc0,0x2, 0xb, 0xe1,
+0x17,0x1, 0x17,0x80,0xe7,0xff,0x0, 0xa0,0xe0,0x7, 0x3e,0x16,0x3b,0x91,0x93,0x87,
+0xe2,0x0, 0xcb,0xe4,0xe7,0xff,0x5, 0x32,0x3c,0xea,0xe0,0xa, 0x3e,0x1b,0x3d,0x11,
+0x95,0xa, 0xe2,0x1, 0xc4,0xff,0xe2,0x0, 0xcd,0x0, 0x39,0x17,0x5, 0x2, 0x39,0x9a,
+0x55,0x1, 0x3e,0x1a,0x3d,0x69,0xc5,0x7f,0xe0,0x43,0x3d,0xa, 0xe7,0xff,0x0, 0x9a,
+0xe0,0x7, 0x3b,0x1f,0x3b,0x91,0x93,0x87,0xe2,0x0, 0xcb,0xe4,0xe7,0xff,0x5, 0x2f,
+0xe0,0xd, 0x3b,0x15,0x3e,0x91,0x96,0x8d,0x39,0x17,0xe2,0x0, 0xce,0x80,0x5, 0x2,
+0x39,0x9d,0x3b,0x1a,0x3e,0xee,0xe7,0xff,0x0, 0x99,0x14,0x0, 0x3c,0xe8,0xe7,0xff,
+0x0, 0xbb,0x8, 0xb7,0xc0,0x7c,0x3a,0x6a,0xe0,0x0, 0x2d,0xfa,0xe8,0x55,0x4d,0xa6,
+0x3e,0x6b,0xc6,0x7f,0xc5,0xfe,0xe0,0x43,0x3e,0xc, 0xe0,0x43,0x3d,0x8b,0xe8,0x55,
+0x4f,0xa5,0xe0,0x43,0x3e,0x89,0x3d,0xbf,0xe8,0x72,0x55,0x2c,0xe0,0xe, 0x3e,0x9b,
+0x38,0xeb,0x3f,0xbc,0x37,0x21,0x11,0x80,0xe5,0xff,0xc0,0xfe,0x3f,0x1a,0x37,0xa1,
+0x3a,0xe9,0x3b,0x6d,0x39,0x63,0xe2,0x0, 0xcb,0x0, 0xe0,0x0, 0x3, 0x5d,0xe8,0x55,
+0x4f,0x27,0x3b,0x69,0xe0,0x43,0x3b,0x8e,0x77,0x2, 0x3f,0x69,0xc7,0x1, 0xe0,0x43,
+0x3f,0xe, 0x3d,0x9e,0x35,0xa1,0xe0,0xe, 0x3d,0x1b,0x3d,0xe6,0xc5,0x81,0xe2,0x1,
+0xc5,0xff,0xe0,0x43,0x3d,0xb, 0x3d,0x77,0xe0,0x0, 0x4, 0x5e,0x3d,0xe9,0xe2,0x1,
+0xc6,0x7f,0x3d,0x68,0x3b,0xe4,0x3c,0xe6,0x3c,0x65,0x76,0x81,0xe4,0x0, 0xc3,0xba,
+0xde,0x87,0xe0,0x60,0x16,0x36,0xe0,0xe, 0x3e,0x17,0xe0,0x1, 0x8d,0xde,0xe0,0x1,
+0xac,0x3e,0x3d,0xf8,0x3a,0x6c,0x56,0x81,0x3, 0x83,0xe0,0x1, 0xac,0x5e,0x15,0x80,
+0x56,0x2, 0xe0,0x43,0x3d,0x6, 0xc6,0x7f,0xe0,0x43,0x3c,0x85,0x3c,0x6d,0xe0,0x43,
+0x3e,0xc, 0xde,0xe5,0xe0,0xe, 0x3a,0x17,0x39,0x73,0xac,0x4e,0xe0,0x0, 0x5, 0xc6,
+0x3d,0xe3,0x15,0x0, 0xc5,0x81,0xe0,0x8, 0x31,0x4c,0xe0,0x9, 0x31,0x24,0xe0,0x4,
+0xd8,0x5c,0x21,0x9, 0x21,0x86,0x39,0x69,0x2c,0x4, 0xe2,0x1, 0xcc,0xff,0x5, 0x83,
+0xe0,0x1, 0x11,0x7f,0x3a,0x17,0xa9,0x34,0xc0,0x4, 0xb, 0xe1,0x15,0x81,0x16,0x0,
+0xe7,0xff,0x0, 0x8f,0xe0,0x7, 0x3f,0x11,0x3b,0x9f,0x93,0x87,0xe2,0x0, 0xcb,0xe4,
+0xe7,0xff,0x5, 0x1f,0x3a,0xe6,0xe1,0xc0,0x93,0x1e,0xe2,0x1, 0xc2,0xff,0xe2,0x0,
+0xcb,0x0, 0x39,0x17,0x5, 0x2, 0x39,0x96,0x3b,0x65,0xc3,0x7f,0xe0,0x43,0x3b,0x6,
+0xe7,0xff,0x0, 0x8b,0xe0,0xa, 0x3f,0x11,0x3d,0x1f,0x95,0xa, 0xe2,0x0, 0xcd,0x64,
+0xe7,0xff,0x5, 0x1e,0x39,0x1a,0xe1,0x80,0x95,0x1e,0xe2,0x0, 0xcd,0x0, 0x5, 0x2,
+0x39,0x9a,0x3b,0x6b,0xe7,0xff,0x0, 0x8b,0x14,0x0, 0x3c,0xe8,0x0, 0xc3,0x8, 0xb7,
+0x3a,0x6c,0xe4,0x0, 0xc2,0x3a,0xe0,0x60,0x17,0xb6,0xe0,0xe, 0x3f,0x94,0x16,0x80,
+0xae,0xbe,0x3a,0xe8,0xae,0xce,0x3b,0x69,0xae,0xde,0x3b,0xea,0xae,0xee,0x39,0xec,
+0xe8,0xd, 0x4f,0xd, 0x39,0x6f,0xe0,0xd, 0x37,0x28,0xe8,0xd, 0x4f,0xe, 0x3f,0x4d,
+0xe0,0xd, 0x37,0x42,0x3e,0xfb,0x4, 0xb0,0x15,0x81,0x3d,0x63,0xde,0x8d,0xe8,0xc,
+0x4f,0xff,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0x80,0x3f,0xce,0xe0,0xe, 0x37,0xc2,
+0x3f,0x77,0x5, 0xac,0x15,0x81,0x3d,0x63,0x3c,0xe6,0x3c,0x65,0xdf,0x23,0xe8,0xf3,
+0x4f,0x8e,0xe2,0x0, 0xcf,0x81,0x1, 0x6, 0xe8,0xf3,0x4f,0x8e,0xe2,0x0, 0xcf,0x82,
+0x1, 0x8b,0xe0,0xf, 0x39,0x14,0x8f,0x3f,0x8e,0xdf,0xaf,0x5f,0xae,0xbf,0x8f,0x6f,
+0x8e,0xcf,0xaf,0x4f,0xae,0xef,0xe0,0xf, 0x39,0x14,0x8f,0x6f,0x8e,0xcf,0x37,0x41,
+0x3f,0x1d,0xaf,0x4f,0xb, 0xe1,0x3f,0xee,0xe4,0x0, 0xc7,0x83,0x37,0xc2,0x3f,0xfb,
+0x2, 0xcf,0x3f,0x7b,0x4, 0xcd,0x15,0x80,0x0, 0xc9,0x3f,0x6f,0xe4,0x0, 0xc7,0x3,
+0x37,0x42,0x3f,0x77,0x3, 0xd5,0x3f,0xf7,0x4, 0xd3,0x15,0x80,0x0, 0xcd,0x8, 0xb7,
+0xc0,0x76,0xe4,0x0, 0xc4,0xe, 0xe0,0x51,0x11,0x2e,0x39,0x18,0x94,0x2, 0x3a,0x69,
+0xe8,0xf3,0x4b,0x1e,0xe0,0x1, 0xd6,0xa4,0x3a,0xe8,0x94,0x12,0xe4,0x0, 0xc2,0x3a,
+0xe0,0x1, 0xd6,0xf1,0xe0,0x60,0x11,0xb6,0xe0,0xf, 0x39,0x94,0x16,0x80,0xe0,0x60,
+0x16,0x3e,0x17,0x0, 0x3e,0x14,0xae,0x8f,0xe0,0x4, 0xae,0xef,0xb7,0xc, 0xe0,0x1,
+0xaf,0x2f,0xe0,0x1, 0xb7,0xf, 0xe0,0x1, 0xb7,0x1f,0xe8,0xf3,0x4f,0xe, 0xe0,0x2,
+0xb2,0xcf,0xe2,0x0, 0xcf,0x1, 0xe8,0x12,0x55,0x6a,0xe0,0x2, 0xae,0xcf,0x3b,0xea,
+0xe0,0x2, 0xb4,0x5f,0xe1,0x22,0x3d,0x58,0xe8,0x12,0x57,0xeb,0x3e,0x6f,0xe1,0x25,
+0x3f,0xd5,0x1, 0x6, 0xe8,0xf3,0x4f,0xe, 0xe2,0x0, 0xcf,0x2, 0x1, 0xa8,0xe8,0xf3,
+0x4f,0xe, 0xe2,0x0, 0xcf,0x1, 0x1, 0x90,0xe0,0x5, 0x3f,0xa5,0xe2,0x0, 0xcb,0x1,
+0xe0,0x1, 0x1, 0x5, 0x4, 0x91,0xe2,0x0, 0xcb,0x3, 0x1, 0x14,0xe0,0x1, 0x13,0x2a,
+0xe0,0x0, 0x17,0x64,0x0, 0x8b,0xe8,0xf3,0x4f,0xe, 0xe2,0x0, 0xcf,0x2, 0x1, 0xef,
+0xe0,0x2, 0x3d,0x22,0x0, 0xec,0x13,0x0, 0x3f,0x66,0x3c,0xe6,0x15,0xb2,0x16,0x8f,
+0x0, 0x92,0xe0,0x1, 0x13,0x7a,0xe0,0x1, 0x17,0x16,0x0, 0xf8,0x3f,0x62,0x3b,0xef,
+0x39,0x65,0x3e,0x6a,0x3a,0xee,0xe0,0x0, 0x13,0x64,0x17,0x32,0xe0,0x1, 0x14,0xc8,
+0x15,0xad,0x16,0x9e,0xe8,0xf3,0x4c,0xe, 0x2c,0x1c,0x3c,0x6a,0x35,0x41,0x3d,0x75,
+0xe1,0xfe,0xc4,0x38,0xe0,0x0, 0x3, 0xd9,0x3a,0xf8,0xe0,0x0, 0x3, 0xd6,0xe2,0x0,
+0xc9,0x2d,0x5, 0x8f,0xc7,0xd3,0x3f,0xf2,0x5, 0x8c,0x77,0x1, 0x74,0x82,0x75,0x83,
+0x76,0x84,0x76,0x5, 0xd9,0xec,0x57,0x1, 0x54,0x82,0x55,0x83,0x56,0x84,0x56,0x5,
+0xe0,0x9, 0x3e,0x29,0x3c,0xf5,0xe0,0xf, 0x33,0x81,0x3, 0x90,0x3f,0xf2,0xe0,0xa,
+0x39,0x94,0xe0,0x0, 0x5, 0xc5,0x14,0x81,0x3b,0xf2,0xe0,0x1, 0xac,0x8a,0xe0,0x0,
+0x3, 0xc2,0xe0,0xe, 0x39,0x94,0x15,0x4, 0xad,0xe, 0xe0,0xe, 0x39,0x94,0x8d,0xe,
+0x2d,0xe, 0x3f,0xf2,0xe0,0x0, 0x5, 0xd2,0x17,0x81,0x3b,0xf2,0xe0,0x1, 0xaf,0x9e,
+0xe0,0x0, 0x3, 0xcf,0xe0,0xf, 0x39,0x94,0x17,0x1, 0xaf,0xf, 0xe0,0xf, 0x39,0x94,
+0x8f,0xf, 0x2f,0x10,0xe0,0xe, 0x36,0x1, 0x3f,0x75,0xe0,0x0, 0x5, 0xdc,0x17,0x3,
+0x3e,0x75,0xe0,0x1, 0xaf,0x1f,0xe0,0xf, 0x39,0x94,0xe0,0x0, 0x3, 0xd7,0x17,0x1,
+0xaf,0xf, 0x39,0x94,0x8c,0x3, 0xc0,0xa, 0xb, 0xe1,0xe0,0x0, 0x13,0x64,0xe0,0x0,
+0x17,0x50,0xe7,0xff,0x0, 0x8c,0x3a,0xf8,0xe7,0xff,0x5, 0xbc,0xe2,0x0, 0xc9,0x64,
+0xe7,0xff,0x5, 0xb8,0xe1,0xff,0xc7,0x9c,0xe7,0xff,0x0, 0xa7,0x14,0x82,0xe7,0xff,
+0x0, 0xbd,0x3f,0x72,0x2, 0x85,0xe0,0xe, 0x3b,0xae,0x3f,0x72,0x3, 0x86,0xe0,0xe,
+0x39,0x94,0x15,0x5, 0xe7,0xff,0x0, 0xba,0x3b,0x72,0xe0,0xe, 0x39,0x94,0x2, 0x85,
+0xe0,0x6, 0x3b,0xa6,0x3b,0x72,0x3, 0x84,0x15,0x6, 0xe7,0xff,0x0, 0xaf,0x15,0x0,
+0xe0,0x1, 0xad,0xe, 0xe7,0xff,0x0, 0xab,0x17,0x82,0xe7,0xff,0x0, 0xb0,0x3e,0xf2,
+0x2, 0x85,0xe0,0xf, 0x3b,0xad,0x3f,0xf2,0x3, 0x86,0xe0,0xf, 0x39,0x94,0x17,0x2,
+0xe7,0xff,0x0, 0xad,0x3d,0xf2,0xe0,0xf, 0x39,0x94,0x2, 0x84,0x3b,0xab,0x3b,0xf2,
+0x3, 0x84,0x17,0x3, 0xe7,0xff,0x0, 0xa3,0x17,0x0, 0xe0,0x1, 0xaf,0x1f,0xe7,0xff,
+0x0, 0x9f,0x17,0x4, 0xe7,0xff,0x0, 0xa6,0x17,0x0, 0xe0,0x1, 0xaf,0x1f,0xe7,0xff,
+0x0, 0xaa,0x8, 0xb5,0x3a,0x69,0x3a,0xe8,0x39,0xe4,0xde,0xda,0xe4,0x0, 0xc1,0xba,
+0xe4,0x0, 0xc2,0x8e,0x39,0x68,0xe0,0x51,0x14,0xae,0xe0,0x60,0x14,0x62,0x15,0xe,
+0x3c,0x95,0x3c,0x13,0xe0,0x4, 0xd6,0xab,0x29,0x4, 0x11,0x0, 0x3c,0x62,0xa, 0xe1,
+0x3c,0x64,0xd9,0x8e,0x3c,0x64,0xd9,0xf8,0x24,0x7, 0xe0,0x60,0x11,0x36,0x39,0x13,
+0x17,0x84,0xaf,0xa2,0x0, 0x90,0xe2,0x0, 0xc9,0x1, 0x1, 0x86,0xe0,0x60,0x17,0xb6,
+0x39,0x9f,0xa9,0x23,0x0, 0xec,0xe2,0x0, 0xc9,0x2, 0x1, 0x87,0xe0,0x60,0x17,0xb6,
+0x39,0x9f,0xa9,0x23,0x11,0x1, 0x0, 0xe3,0xe2,0x0, 0xc9,0x3, 0x1, 0x8b,0x3c,0x64,
+0xda,0x2a,0x24,0x5c,0xe0,0x60,0x17,0xb6,0x39,0x9f,0x17,0x82,0xa9,0x23,0xaf,0xf3,
+0x0, 0xf2,0xe2,0x0, 0xc9,0x4, 0x1, 0x86,0xe0,0x60,0x11,0x36,0x39,0x13,0x17,0x85,
+0x0, 0xd9,0xe2,0x0, 0xc9,0x5, 0x1, 0x90,0xe0,0x60,0x11,0x36,0x17,0x86,0x39,0x13,
+0xaf,0xa2,0xe8,0xf3,0x4f,0x8e,0x27,0xdf,0xe8,0x25,0x4f,0x86,0xe2,0x0, 0xcf,0x9d,
+0x2, 0xda,0x17,0x88,0x0, 0xc7,0xe2,0x0, 0xc9,0x6, 0xe7,0xff,0x1, 0xb8,0xe8,0xf3,
+0x4f,0x8e,0xe0,0x60,0x11,0x36,0x27,0x88,0xe8,0x25,0x4f,0x86,0xe2,0x0, 0xcf,0x9d,
+0x2, 0x83,0x39,0x13,0x0, 0xef,0x3c,0x64,0xd9,0xf6,0x17,0x87,0x39,0x13,0xaf,0xa2,
+0x24,0x5, 0x17,0x84,0xaf,0xf2,0xe7,0xff,0x0, 0xbf,0x17,0x82,0x0, 0xfc,0x8, 0xb5,
+0x3a,0xe8,0x3c,0x69,0x39,0x69,0x3a,0x6a,0xd9,0x97,0x24,0xd, 0xe4,0x0, 0xc1,0x3a,
+0xe0,0x60,0x17,0xb6,0x39,0x1f,0x22,0x5, 0x17,0x88,0xaf,0xa2,0x14,0x1, 0x0, 0x91,
+0x17,0x84,0x0, 0xfc,0x39,0xe8,0x3d,0x68,0x3d,0xe4,0x3c,0xe2,0x3c,0x65,0xda,0x16,
+0x24,0x76,0xe4,0x0, 0xc1,0x3a,0xe0,0x60,0x17,0xb6,0x39,0x1f,0x14,0x2, 0xa9,0xa2,
+0xa, 0xe1,0x8, 0xb5,0x3a,0xe8,0x3c,0x69,0x39,0x69,0x3a,0x6a,0xd9,0x75,0x24,0xd,
+0xe4,0x0, 0xc1,0x3a,0xe0,0x60,0x17,0xb6,0x39,0x1f,0x22,0x5, 0x17,0x88,0xaf,0xa2,
+0x14,0x1, 0x0, 0x91,0x17,0x84,0x0, 0xfc,0x39,0xe8,0x3d,0x68,0x3d,0xe4,0x3c,0xe2,
+0x3c,0x65,0xd9,0xf4,0x24,0x76,0xe4,0x0, 0xc1,0x3a,0xe0,0x60,0x17,0xb6,0x39,0x1f,
+0x14,0x2, 0xa9,0xa2,0xa, 0xe1,0x8, 0xb7,0x3a,0x69,0x3b,0xe8,0x3c,0x69,0x3b,0x6a,
+0x39,0xe4,0xd9,0x52,0xe0,0x60,0x11,0x36,0xe4,0x0, 0xc1,0xba,0x24,0x9, 0x39,0x13,
+0x23,0x5, 0x17,0x88,0xaf,0xa2,0x14,0x1, 0xb, 0xe1,0x17,0x84,0x0, 0xfc,0x3c,0x64,
+0xd9,0x92,0x3a,0xe8,0x24,0x5, 0x39,0x13,0x17,0x82,0xaf,0xf2,0x0, 0xf5,0x3d,0x68,
+0x3d,0xe6,0x3c,0xe4,0x3c,0x67,0xd9,0xca,0x39,0x13,0x24,0x4, 0xaa,0xa2,0x14,0x2,
+0x0, 0xec,0x8f,0xf2,0x27,0x83,0xc7,0xff,0x0, 0xf1,0xaf,0xa2,0x0, 0xf9,0x8, 0xb2,
+0x3c,0x69,0x39,0x69,0xd9,0x29,0x24,0x8, 0xe4,0x0, 0xc1,0x3a,0xe0,0x60,0x14,0xb6,
+0x39,0x19,0x17,0x88,0xaf,0xa2,0x14,0x1, 0x9, 0x61,0x8, 0xb7,0xc0,0x7e,0x3b,0xe9,
+0xe4,0x0, 0xc3,0xba,0xe0,0x60,0x11,0xb6,0xe0,0xf, 0x39,0x97,0x8f,0xaf,0x3a,0x68,
+0xc7,0xff,0x3f,0x6f,0xe2,0x1, 0xc7,0x7f,0xe2,0x0, 0xcf,0x8, 0x3a,0xe9,0x2, 0x88,
+0x37,0xa8,0x37,0xc7,0xe0,0x23,0x17,0x2e,0x3f,0x9e,0x97,0x8f,0x3f,0x82,0x11,0x0,
+0xe0,0xe, 0x39,0x97,0xe0,0x1, 0x8f,0x8e,0xc7,0xff,0xe2,0x0, 0xcf,0x81,0xe0,0x0,
+0x2, 0xeb,0x8f,0xae,0xe2,0x0, 0xcf,0x88,0xe0,0x0, 0x1, 0x66,0xe0,0x1, 0x8f,0x2e,
+0x27,0x5, 0xe2,0x0, 0xcf,0x89,0xe0,0x0, 0x1, 0xdf,0xe0,0x6, 0x39,0x97,0x17,0x1,
+0xe0,0x1, 0xaf,0x26,0x16,0x9e,0xe8,0xf3,0x4f,0xe, 0xe2,0x0, 0xcf,0x0, 0x17,0x30,
+0xe0,0x6e,0x39,0xad,0x8e,0x96,0x3e,0xfe,0xe0,0x0, 0x3, 0xf5,0xe8,0xf3,0x4d,0xe,
+0x3c,0xe5,0x3c,0x64,0xda,0xa3,0xe8,0xf3,0x4f,0xe, 0x3f,0xe8,0x2f,0x2e,0x24,0x20,
+0x17,0x88,0xaf,0xa6,0xe0,0x0, 0x0, 0xd7,0x15,0x0, 0x3c,0xe5,0x3c,0x64,0xdf,0x30,
+0x0, 0x85,0x15,0x0, 0x3c,0xe5,0x3c,0x64,0xdf,0x4d,0x39,0x68,0x0, 0xc2,0x15,0x0,
+0x3c,0xe5,0x3c,0x64,0xdf,0x69,0x0, 0xfa,0x15,0x1, 0x0, 0xf0,0x15,0x1, 0x0, 0xf3,
+0x15,0x1, 0x0, 0xf7,0xdf,0x8d,0x0, 0xf2,0x11,0x1, 0xe7,0xff,0x0, 0xb3,0x3d,0x68,
+0x15,0x81,0x3c,0xe5,0x3c,0x64,0x77,0x81,0xd9,0x41,0x57,0x81,0x24,0x4, 0xaf,0xa6,
+0x11,0x2, 0x0, 0x99,0x17,0x89,0x0, 0xd6,0xe8,0xf3,0x4f,0xe, 0xe2,0x0, 0xcf,0x1,
+0x1, 0x6, 0xe8,0xf3,0x4f,0xe, 0xe2,0x0, 0xcf,0x2, 0x1, 0x8d,0xe0,0xe, 0x39,0x97,
+0xe0,0x1, 0x89,0xe, 0xe2,0x0, 0xc9,0x1, 0x1, 0x95,0xe2,0x1, 0xc7,0xf0,0x27,0x9c,
+0x17,0x88,0xaf,0xae,0x39,0x97,0x8f,0xa3,0x27,0xb9,0x3c,0x65,0xd8,0x21,0x3c,0xe5,
+0x3c,0x64,0xda,0x3b,0x24,0x4, 0x17,0x80,0x11,0x2, 0xaf,0xa3,0x3c,0x62,0xc0,0x2,
+0xb, 0xe1,0xe2,0x0, 0xc9,0x2, 0x1, 0x88,0xe6,0xac,0xcf,0xcf,0x27,0x85,0x17,0x88,
+0xaf,0xae,0x11,0x1, 0x0, 0xe8,0x15,0x81,0x15,0x0, 0x3c,0xe5,0x3c,0x64,0xd9,0x6,
+0xe0,0xf, 0x39,0x97,0x24,0x4, 0x17,0x0, 0xaf,0x2f,0x0, 0xc3,0x17,0x9, 0xaf,0x2f,
+0x0, 0xf1,0xe2,0x0, 0xcf,0x89,0x1, 0xd7,0x8f,0x86,0xe2,0x0, 0xcf,0x86,0x1, 0x85,
+0x17,0x80,0x11,0x3, 0xaf,0xa6,0x0, 0xcf,0xe2,0x0, 0xcf,0x85,0x1, 0x7a,0xe2,0x0,
+0xcf,0x84,0x1, 0xc9,0x17,0x85,0xe7,0xff,0x0, 0x86,0xe4,0x0, 0xc2,0xe, 0xe0,0x51,
+0x17,0xae,0x3a,0x1f,0x94,0x4, 0xe0,0x1, 0xd3,0xcb,0xe0,0x2, 0xb4,0x43,0x94,0x14,
+0xe0,0x1, 0xd4,0x19,0xe0,0x2, 0xb4,0x53,0x0, 0xc2,0xe4,0x0, 0xc4,0x3a,0xe8,0xf3,
+0x4f,0x8e,0xe0,0x60,0x17,0x36,0x3c,0x1e,0x2f,0x9b,0xe0,0x1, 0x8f,0x58,0xe2,0x0,
+0xcf,0x33,0x5, 0x9c,0xe0,0x1, 0x96,0x88,0xe0,0x1, 0x97,0x18,0xe0,0x2c,0x3e,0x9f,
+0x26,0x17,0xe0,0x2c,0x3f,0x1f,0x26,0x14,0x37,0x21,0x16,0x3, 0xe0,0x2e,0x3f,0x3c,
+0x3e,0xfe,0x3, 0x10,0x8c,0x38,0x17,0x9d,0xe1,0x28,0x3c,0x1f,0x38,0x82,0xe0,0x1,
+0x8f,0xe8,0x14,0x27,0xe1,0x28,0x3c,0x2f,0x0, 0xfa,0x14,0x1, 0x0, 0xf8,0x14,0x0,
+0x0, 0xf6,0x3c,0x6f,0x0, 0xf4,0x8, 0xb7,0xc0,0x7e,0xe8,0xf3,0x4f,0x8e,0x2f,0x85,
+0x11,0x0, 0x3c,0x62,0xc0,0x2, 0xb, 0xe1,0xe8,0xd, 0x49,0x8d,0x3a,0x68,0xe0,0xf,
+0x31,0xa8,0xe8,0xd, 0x49,0x8e,0x11,0x0, 0x39,0xcf,0x31,0xc1,0xe0,0x51,0x13,0xae,
+0xe0,0x1, 0x17,0x16,0xe8,0x55,0x4f,0x8e,0x3f,0xf2,0x2, 0xa3,0x11,0x0, 0xe4,0x0,
+0xc2,0x3a,0xe0,0x60,0x17,0xb6,0x3a,0x1f,0xe0,0x2, 0x94,0x64,0xe0,0x1, 0xd3,0x70,
+0x39,0xe8,0xe0,0x2, 0x94,0x74,0xe0,0x1, 0xd3,0xbe,0xe8,0xf3,0x4f,0x8e,0xe2,0x0,
+0xcf,0x81,0xe0,0x0, 0x1, 0xd7,0xe2,0x0, 0xc9,0x1, 0xe0,0x0, 0x1, 0xc2,0xe0,0x1,
+0x17,0x95,0xe1,0x23,0x3f,0xa3,0xe1,0x2f,0x3f,0xa8,0xe0,0x2, 0x39,0xdf,0x0, 0xca,
+0x3b,0x62,0xe4,0x0, 0xc3,0xe, 0x3b,0x17,0x94,0x6, 0x77,0x1, 0xe0,0x1, 0xd3,0x50,
+0x3a,0xe8,0x94,0x16,0xe0,0x1, 0xd3,0x9f,0x57,0x1, 0xe1,0x2f,0x3c,0x1e,0x27,0x8f,
+0xe1,0x2f,0x39,0xa8,0x27,0x8c,0xe2,0x1, 0xca,0x96,0x5, 0x9a,0xe8,0x12,0x57,0xeb,
+0xe1,0xfe,0xc7,0xea,0x3a,0xff,0x3, 0x94,0x11,0x1, 0x0, 0xc2,0x39,0xf8,0x3, 0x90,
+0xe8,0x12,0x57,0xea,0xe1,0xfe,0xc7,0xea,0x3c,0x7f,0x3, 0x8a,0xe2,0x1, 0xca,0x96,
+0x5, 0x87,0xe8,0x12,0x57,0xeb,0xe1,0xfe,0xc7,0xea,0x3a,0xff,0x4, 0x86,0xc1,0x1,
+0xe2,0x1, 0xc1,0x7f,0xe7,0xff,0x0, 0xa8,0x11,0x2, 0xe7,0xff,0x0, 0xaa,0xe2,0x0,
+0xc9,0x2, 0xe7,0xff,0x1, 0x8f,0xe2,0x1, 0xc9,0x95,0xe7,0xff,0x2, 0x8b,0xe8,0x12,
+0x57,0xea,0xe1,0xfe,0xc7,0xea,0x3c,0x7f,0xe7,0xff,0x5, 0x84,0xe7,0xff,0x0, 0x83,
+0xe8,0xf3,0x4f,0x8e,0xe2,0x0, 0xcf,0x82,0xe7,0xfe,0x1, 0xfc,0xe2,0x0, 0xc9,0x1,
+0x1, 0x8f,0xe8,0x12,0x57,0xeb,0xe1,0xfe,0xc7,0xea,0x39,0xff,0xe7,0xfe,0x5, 0xf2,
+0xe2,0x1, 0xcc,0x15,0xe7,0xfe,0x2, 0xee,0x11,0x3, 0xe7,0xfe,0x0, 0xec,0xe2,0x0,
+0xc9,0x2, 0xe7,0xfe,0x1, 0xe7,0xe8,0x12,0x57,0xeb,0xe1,0xfe,0xc7,0xea,0x39,0xff,
+0xe7,0xfe,0x5, 0xe0,0xe8,0x12,0x57,0xea,0xe1,0xfe,0xc7,0xea,0x3c,0x7f,0xe7,0xfe,
+0x5, 0xd9,0x11,0x4, 0xe7,0xfe,0x0, 0xd7,0x8, 0xb5,0x3a,0xe8,0xe4,0x0, 0xc2,0xba,
+0xe0,0x60,0x17,0xb6,0xe0,0xe, 0x3f,0x95,0x8e,0xae,0x39,0xef,0x3e,0x6d,0xe2,0x1,
+0xc6,0x7b,0xe2,0x0, 0xce,0x1, 0x1, 0x2a,0xe2,0x0, 0xce,0x2, 0x3a,0x68,0x1, 0xb4,
+0x8f,0x9e,0xe2,0x0, 0xcf,0xbb,0x2, 0xa2,0xe0,0x2, 0x94,0x6e,0xe0,0x1, 0xd2,0xc8,
+0xe2,0x0, 0xcc,0xe, 0x5, 0x8b,0xe8,0xc, 0x4f,0xff,0xe0,0xe, 0x37,0xa8,0xe8,0xd,
+0x4f,0x80,0x3f,0xce,0xc7,0xf0,0x3f,0xf8,0x3, 0x86,0x3c,0x64,0xde,0xf7,0xe2,0x0,
+0xcc,0x1, 0x1, 0xc, 0xe8,0xf2,0x4f,0xfa,0x11,0x4, 0xe2,0x0, 0xcf,0x80,0x17,0x88,
+0xe0,0x62,0x39,0xaf,0x3c,0x64,0xdf,0x18,0x24,0x2, 0x11,0x8, 0xe0,0xf, 0x39,0x95,
+0x17,0x0, 0x3c,0x62,0xaf,0x1f,0xaf,0x2f,0xe0,0x1, 0xaf,0x5f,0xe0,0x1, 0xaf,0x6f,
+0xe0,0x4, 0xaf,0x6f,0xa, 0xe1,0xe2,0x0, 0xce,0x3, 0x1, 0x8a,0xe8,0xf2,0x4f,0xfa,
+0x11,0x4, 0xe2,0x0, 0xcf,0x80,0x17,0x88,0xe0,0x62,0x39,0xaf,0x0, 0xe5,0x11,0x4,
+0xe0,0x2f,0x3e,0x82,0x2f,0xe3,0x17,0x88,0xe0,0x2c,0x3e,0x8f,0x2e,0x5f,0xe2,0x0,
+0xce,0x89,0x1, 0xa7,0xe8,0xf2,0x4e,0xfa,0xe2,0x0, 0xce,0x80,0xe0,0x62,0x39,0xaf,
+0x8f,0x9e,0xe2,0x0, 0xcf,0xbb,0x2, 0xcf,0xe0,0x2, 0x94,0x6e,0xe0,0x1, 0xd2,0x78,
+0xe2,0x0, 0xcc,0xe, 0x5, 0x8c,0xe8,0xc, 0x4f,0xff,0xe0,0xe, 0x37,0xa8,0xe8,0xd,
+0x4f,0x80,0x3f,0xce,0xc7,0xf0,0x3f,0xf8,0xe7,0xff,0x3, 0xbe,0x3c,0x64,0xde,0xa6,
+0xe2,0x0, 0xcc,0x1, 0x17,0x88,0xe0,0x6f,0x39,0xa2,0x39,0x6f,0xe7,0xff,0x0, 0xb4,
+0xe8,0xf3,0x49,0xe, 0xe7,0xff,0x21,0x34,0xe8,0xf3,0x4f,0x8e,0xe2,0x0, 0xcf,0x81,
+0x1, 0x99,0xe0,0x2, 0x97,0xce,0xe2,0x1, 0xcf,0xfa,0x5, 0x87,0x17,0x80,0xe8,0x25,
+0x6f,0x86,0x11,0x0, 0xe7,0xff,0x0, 0xa4,0xe0,0x2, 0x97,0x5e,0xe2,0x1, 0xcf,0x7a,
+0x5, 0x87,0xe8,0x12,0x57,0xea,0xe1,0xfe,0xc7,0x86,0x3f,0x7f,0x4, 0xf0,0x17,0xff,
+0x0, 0xef,0xe8,0xf3,0x4f,0x8e,0xe2,0x0, 0xcf,0x82,0x1, 0x8e,0xe8,0x12,0x57,0xeb,
+0xe0,0x2, 0x97,0x4e,0xe1,0xfe,0xc7,0x86,0x3f,0x7f,0x4, 0xe1,0xe0,0xf, 0x39,0x95,
+0xe0,0x2, 0x97,0x5f,0x0, 0xe4,0x39,0x6c,0xe7,0xff,0x0, 0x82,0xe8,0x55,0x4e,0x8e,
+0x26,0x9e,0x8, 0xb1,0x3f,0xe8,0xe4,0x0, 0xc7,0x8e,0xc6,0xff,0xe0,0x51,0x17,0x2e,
+0x3f,0x9e,0xe8,0x55,0x6e,0x8e,0x16,0xff,0xae,0xcf,0x3f,0xe9,0xe4,0x0, 0xc7,0x86,
+0x3c,0x69,0x3f,0x1f,0xe0,0x3, 0xc7,0x24,0x17,0x83,0xaf,0x8e,0xe0,0x2, 0xdc,0xbb,
+0xe8,0x60,0x4f,0xb4,0xc7,0x81,0xe8,0x60,0x6f,0xb4,0x8, 0xe1,0x38,0x82,0xe0,0x51,
+0x16,0xae,0xe8,0xb, 0x4d,0xf3,0x17,0x0, 0x3f,0xed,0x3e,0x6e,0xe2,0x1, 0xc6,0x7f,
+0x3d,0xfc,0x2, 0x82,0x38,0x82,0x8d,0x4d,0x3e,0x6e,0x3d,0x78,0xc7,0x1, 0xc6,0x8e,
+0x1, 0xf5,0x8, 0xb2,0x3f,0x6c,0xe4,0x0, 0xc7,0xe, 0xe0,0x60,0x14,0xe2,0x3f,0x9e,
+0x3f,0x68,0xe4,0x0, 0xc7,0x3a,0x39,0x68,0x3c,0x9e,0x15,0xe, 0x3c,0x6f,0xe0,0x4,
+0xd3,0x16,0x3f,0xe8,0x16,0x81,0xe0,0xf, 0xd, 0x8c,0x3d,0x62,0x14,0x80,0x3c,0x6d,
+0xe0,0x2, 0xdc,0x39,0xe8,0x55,0x4f,0x8e,0x3c,0x62,0xc7,0x81,0xe8,0x55,0x6f,0x8e,
+0x9, 0x21,0xe0,0x59,0x0, 0x80,0x3e,0x68,0xe4,0x0, 0xc6,0x6, 0xe0,0x51,0x17,0xae,
+0xe0,0xe, 0x3f,0x9c,0xe0,0x3, 0xc7,0x24,0x8f,0xe, 0xe2,0x0, 0xcf,0x1, 0x1, 0x90,
+0xe8,0x55,0x4f,0xe, 0x15,0xff,0x3e,0xee,0xe4,0x0, 0xc6,0x8e,0x3e,0x9f,0xe2,0x0,
+0xcf,0x9, 0x5, 0x87,0x3f,0x9c,0xe0,0x3, 0xc7,0xa4,0x17,0x3, 0xaf,0xf, 0x38,0x82,
+0x8d,0x4d,0x3d,0x78,0x1, 0x82,0xad,0xcd,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0xc6,0x8e,
+0x0, 0xef,0x8, 0xb7,0xe1,0xfe,0xc0,0x72,0x39,0x60,0xe0,0x51,0x12,0x2e,0xc1,0x4,
+0xe0,0x52,0x12,0xba,0x3f,0xe2,0x39,0xe4,0x13,0xe, 0x3c,0xe4,0x3c,0x6f,0x3d,0x66,
+0xe0,0x4, 0xd2,0xcd,0xc2,0xe, 0x3a,0x75,0x3f,0xe8,0xc7,0x8e,0x1, 0xf7,0xe0,0x1,
+0x15,0xc, 0xe0,0x1, 0x14,0xff,0xe0,0x51,0x14,0x2e,0xe0,0x4, 0xd3,0xc, 0x3a,0xe2,
+0x13,0x0, 0xe0,0x1, 0xc2,0x8c,0x3b,0xe6,0x17,0x7d,0x12,0xe, 0x8f,0xc2,0xe2,0x1,
+0xcf,0xff,0x1, 0x17,0xe4,0x0, 0xc7,0x86,0x3f,0x93,0xe0,0x3, 0xc7,0xa4,0x8f,0x8f,
+0xe0,0xd, 0x3f,0xde,0x2e,0x94,0x3c,0x67,0xe4,0x0, 0xc4,0xe, 0xc3,0x81,0x3d,0x64,
+0x3c,0xe2,0x3c,0x13,0xe2,0x1, 0xc3,0xff,0x77,0x1, 0xe0,0x4, 0xd2,0xa0,0x57,0x1,
+0xc1,0xe, 0x39,0x75,0x1, 0xe4,0xe0,0x1, 0xc0,0xe, 0xb, 0xe1,0xe2,0x0, 0xcf,0x81,
+0x1, 0xf8,0xe8,0x55,0x4c,0xe, 0x3d,0x64,0x3c,0x16,0xe4,0x0, 0xc4,0xe, 0xc3,0x1,
+0x3c,0xe2,0x3c,0x13,0xe2,0x1, 0xc3,0x7f,0x77,0x1, 0xe0,0x4, 0xd2,0x88,0x0, 0xe8,
+0x8, 0xb4,0x39,0xe8,0xc1,0xff,0x3a,0x63,0x11,0x0, 0xe0,0x80,0x8f,0x94,0xe2,0x0,
+0xcf,0x84,0x1, 0x83,0x3c,0x62,0xdf,0x44,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe2,0x0,
+0xc9,0xa, 0x1, 0xf4,0x11,0x0, 0xe0,0x80,0x8f,0x93,0xe2,0x0, 0xcf,0x88,0x1, 0x83,
+0x3c,0x62,0xdf,0x6a,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe2,0x0, 0xc9,0xa, 0x1, 0xf4,
+0xa, 0x21,0xe7,0xff,0x0, 0x88,0x8, 0xb7,0x3d,0x69,0xe4,0x0, 0xc5,0x3a,0xe0,0x60,
+0x17,0xb6,0xe0,0x1, 0x3f,0x9a,0xe4,0x0, 0xc4,0xe, 0xe0,0x1, 0x92,0xf1,0xe0,0x2,
+0x95,0x91,0xe0,0x51,0x16,0x2e,0xe0,0xe, 0x3e,0x18,0xe0,0x41,0x3b,0x25,0xe0,0x41,
+0x39,0x2b,0x92,0xe, 0x91,0x9e,0xe0,0x1, 0x96,0xd1,0xe0,0x1, 0x97,0x61,0x3b,0x72,
+0xe0,0xd, 0x3a,0x2d,0xe0,0xe, 0x39,0xae,0xe0,0x1, 0x4, 0x0, 0xe0,0xc, 0x36,0xcf,
+0x3e,0x1d,0x36,0x1, 0xe0,0x41,0x3b,0xac,0x39,0x77,0xe0,0x6c,0x3b,0x2b,0x3d,0xec,
+0xe0,0x41,0x3e,0x2c,0x3b,0x7c,0x3e,0x65,0xe0,0x6c,0x3b,0x2b,0x3a,0xac,0x3d,0xec,
+0xe0,0x1, 0xb2,0xf1,0x3d,0x1f,0xe0,0x2, 0x90,0x8a,0xe0,0x2, 0x96,0x2a,0xe0,0x41,
+0x3b,0x21,0xe0,0x41,0x3a,0xac,0x3b,0x75,0xe0,0x0, 0x4, 0x63,0xe0,0xa, 0x37,0x4f,
+0x3d,0x1e,0x35,0x1, 0xe0,0x41,0x3b,0xaa,0x3a,0xf7,0xe0,0x6a,0x3b,0x2c,0x3e,0x6a,
+0xe0,0x41,0x3d,0x2a,0x3b,0x7a,0x3d,0x61,0x3b,0x69,0xe0,0x6a,0x3b,0x2c,0xe4,0x0,
+0xc3,0x3a,0x3e,0x6a,0xe0,0x60,0x15,0x36,0x3d,0x16,0x38,0xac,0xe0,0x2, 0xb0,0x8a,
+0xe4,0x0, 0xc4,0xba,0xe0,0xa, 0x3f,0x99,0xe0,0x1, 0x90,0xba,0x3e,0x91,0x3d,0x9d,
+0xe0,0x1, 0x96,0xca,0x3f,0x1d,0xe8,0xc, 0x4e,0xff,0x3f,0x1c,0xe0,0xa, 0x36,0xa8,
+0xe8,0xd, 0x4e,0x80,0x16,0x0, 0xe0,0x2b,0x3d,0xec,0x3e,0xca,0x3e,0xfb,0x2, 0x83,
+0xe8,0x12,0x55,0xeb,0xe0,0x2c,0x3f,0x6c,0xe8,0xd, 0x4f,0xd, 0xe0,0xd, 0x37,0x28,
+0xe8,0xd, 0x4f,0xe, 0x3f,0x4d,0x3f,0x7c,0x2, 0x83,0xe8,0x12,0x56,0x6a,0x3f,0x99,
+0xe0,0x51,0x17,0x2e,0x3c,0x1e,0xe0,0x1, 0x97,0x7f,0xe0,0x8, 0xd, 0x9c,0xe0,0x41,
+0x3f,0x2e,0x39,0x7e,0xe0,0x1, 0xb5,0xbf,0xe0,0x1, 0xb6,0x4f,0xe0,0x1, 0xb2,0x5f,
+0xe0,0x1, 0xb1,0xef,0x5, 0x9, 0xe0,0x2, 0x97,0xf, 0xe0,0x41,0x3f,0x2e,0x3a,0xfe,
+0x5, 0x3, 0x17,0x0, 0xaf,0x2f,0xb, 0xe1,0x15,0x80,0xe7,0xff,0x0, 0x95,0x16,0x0,
+0xe7,0xff,0x0, 0xb8,0x8, 0xb5,0xe4,0x0, 0xc4,0xe, 0xe0,0x51,0x17,0xae,0x3a,0x69,
+0xe0,0xd, 0x3f,0x98,0xe4,0x0, 0xc2,0x3a,0x97,0xd, 0x96,0x1d,0xe0,0x60,0x11,0x36,
+0xe0,0xb, 0x39,0x14,0xe8,0xf3,0x4e,0x8e,0xe0,0x1, 0xb7,0x5b,0x3a,0xe9,0xe0,0x1,
+0xb6,0x6b,0xe0,0x2, 0x91,0xfb,0x2e,0x83,0x39,0x9c,0x31,0xc1,0xe0,0xd, 0x39,0x14,
+0xe0,0x2, 0x95,0xed,0x3e,0x23,0x3f,0x2b,0x15,0x8c,0xe0,0x2b,0x3f,0x3b,0xe0,0x1,
+0xb7,0x7d,0xe0,0x2, 0xb6,0xd, 0x25,0xb4,0xe0,0xe, 0x39,0x14,0xe0,0x2, 0xb5,0x9e,
+0xe0,0xd, 0x39,0x14,0xe0,0x2, 0x97,0x1d,0xe2,0x0, 0xcf,0x0, 0x5, 0x33,0xe2,0x0,
+0xcf,0x2, 0x2, 0x4, 0x17,0x3, 0xe0,0x2, 0xb7,0x1d,0x17,0xc, 0xe0,0x2e,0x3e,0x3e,
+0x27,0x2f,0xe0,0xd, 0x39,0x14,0xe0,0x2, 0xb7,0x2d,0x3f,0x98,0xe0,0x60,0x14,0xe2,
+0x3c,0x94,0x15,0xe, 0x3c,0x6f,0xe0,0x4, 0xd1,0x72,0x3c,0xe5,0xe4,0x0, 0xc4,0x86,
+0xe0,0x54,0x17,0x52,0x3c,0x9e,0xb1,0x98,0x17,0x0, 0xb7,0x9, 0x39,0x14,0x97,0x88,
+0x17,0xa, 0xe0,0x1, 0xb1,0xc2,0xaf,0x22,0xe0,0x1, 0xb7,0xb2,0xa, 0xe1,0xe2,0x0,
+0xcf,0x0, 0x5, 0x5, 0x17,0x1, 0xe0,0x2, 0xb7,0x1d,0x0, 0xcb,0x27,0x46,0x17,0x7f,
+0x0, 0xfb,0x27,0x54,0xe3,0xff,0xcf,0x7e,0x4, 0x51,0x17,0x7d,0x0, 0xcd,0xe2,0x0,
+0xce,0x0, 0x5, 0x7, 0xe0,0xe, 0x39,0x14,0x16,0x81,0xe0,0x2, 0xb6,0xae,0x0, 0xce,
+0x26,0x49,0xe0,0xe, 0x39,0x14,0x16,0xff,0x0, 0xf9,0x8, 0xb7,0x13,0x0, 0x39,0x68,
+0xe8,0x55,0x49,0x8e,0xe0,0x51,0x13,0xae,0xc1,0x7f,0xe0,0x54,0x12,0x52,0x3a,0xe6,
+0x3b,0x73,0x1, 0x82,0xb, 0xe1,0xe0,0x80,0x8f,0x92,0x8c,0xc7,0xe2,0x0, 0xcf,0x81,
+0xe6,0xac,0xcc,0xc9,0x1, 0x88,0x3c,0x66,0xdd,0xd2,0xc3,0x1, 0xe2,0x1, 0xc3,0x7f,
+0xc3,0x8e,0x0, 0xef,0xe2,0x0, 0xcf,0x82,0x1, 0x84,0x3c,0x66,0xdf,0x64,0x0, 0xf6,
+0xe2,0x0, 0xcf,0x83,0x1, 0xf3,0xe4,0x0, 0xc4,0x86,0x3c,0x94,0xb2,0x89,0x0, 0xee,
+0xe8,0xf3,0x4f,0xd2,0x17,0x0, 0xe2,0x0, 0xcf,0x81,0xe8,0x60,0x6f,0x34,0xe0,0x1,
+0x1, 0x1e,0x8, 0xb7,0xc0,0x66,0xe8,0x25,0x4f,0x86,0xe8,0x60,0x6f,0x35,0xe2,0x1,
+0xcf,0xff,0x1, 0x4, 0xc7,0x81,0xe8,0x25,0x6f,0x86,0xe0,0x51,0x12,0xae,0xef,0xff,
+0xd3,0xa8,0x11,0x0, 0x3b,0xe5,0xe8,0x55,0x4f,0x8e,0x3f,0xf2,0x2, 0xb1,0x3c,0x60,
+0xc4,0x12,0x3a,0x60,0x11,0x0, 0xdf,0xb2,0xc2,0x8, 0x3a,0xe2,0xe0,0x64,0x11,0xfa,
+0x3f,0xe2,0xe4,0x0, 0xc7,0x86,0x3b,0x62,0xe0,0x3, 0xc7,0xa4,0x3f,0x97,0x8f,0x8f,
+0xe1,0x80,0xaa,0x94,0xe2,0x0, 0xcf,0x81,0xe2,0x1, 0xc3,0x7f,0x1, 0x90,0x3c,0x66,
+0xdc,0xcc,0xe0,0x40,0xac,0x14,0x2c,0x6, 0x3c,0x66,0xef,0xff,0xd3,0x44,0xe0,0x40,
+0xac,0x14,0xe0,0xf, 0x31,0x21,0x3f,0x93,0xaa,0x8f,0xaa,0x9f,0xc1,0x1, 0xe2,0x0,
+0xc9,0xa, 0x1, 0xdf,0x3c,0x60,0xc4,0x8, 0xde,0x44,0xc0,0x1a,0xb, 0xe1,0x3a,0x62,
+0xe4,0x0, 0xc2,0xe, 0x3a,0x15,0x89,0xc4,0xe0,0x1, 0x8c,0x84,0xe6,0xac,0xc9,0xc3,
+0x3f,0xe3,0xe4,0x0, 0xc7,0x86,0x94,0x4, 0x3f,0x95,0xe0,0x3, 0xc7,0xa4,0x8f,0x8f,
+0x8b,0x74,0x77,0x81,0x74,0x82,0xe0,0x0, 0xdf,0x83,0x3d,0x68,0x94,0x14,0x75,0x3,
+0xe0,0x0, 0xdf,0xd1,0x54,0x82,0x55,0x3, 0x3d,0xe8,0x3e,0x63,0x3c,0x66,0xd8,0x68,
+0x57,0x81,0x3b,0x63,0xe0,0x60,0x12,0x36,0xe4,0x0, 0xc3,0x3a,0x2f,0x9a,0x3c,0xe3,
+0x3c,0x62,0xd9,0xe0,0x2c,0x5, 0x3c,0xe3,0x3c,0x62,0xef,0xff,0xd2,0xeb,0x3f,0xe0,
+0xc7,0x9a,0x3f,0x92,0x3a,0x16,0xe0,0x41,0xac,0xf, 0x8f,0x94,0xe2,0x1, 0xcf,0xff,
+0x1, 0x3, 0xc7,0x81,0xaf,0x94,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe7,0xff,0x0, 0x8d,
+0xe2,0x0, 0xcf,0x82,0x1, 0x8a,0xe0,0xf, 0x3a,0x16,0x8f,0xaf,0x3c,0xe3,0xe2,0x0,
+0xcf,0x8a,0x3c,0x62,0x1, 0x84,0xde,0x18,0x14,0x0, 0x0, 0xe2,0xda,0xaf,0x2c,0x60,
+0x3c,0xe3,0x3c,0x62,0xef,0xff,0xd5,0xb, 0x0, 0xdb,0x38,0x82,0x8, 0xb7,0xc0,0x7c,
+0xe8,0x30,0x57,0x96,0x11,0x0, 0xe7,0xf, 0xcf,0x92,0xe8,0x30,0x77,0x96,0x3c,0x60,
+0xe8,0x55,0x4f,0xa4,0xc4,0x4, 0xe1,0xc0,0xaf,0xa8,0xe8,0x55,0x4f,0xa5,0x71,0x1,
+0xaf,0xb8,0xe8,0x50,0x4f,0xf8,0x27,0x91,0xe8,0x28,0x52,0x4a,0xe8,0x28,0x52,0xcd,
+0xe0,0x4c,0x13,0x58,0x39,0xe8,0xe8,0x50,0x4f,0xf8,0xe8,0x72,0x57,0x2c,0x3f,0xf2,
+0xe8,0x55,0x4e,0xa5,0xe0,0x0, 0x2, 0xf5,0x17,0x0, 0xe8,0x30,0x57,0x96,0xe8,0x28,
+0x54,0xbd,0xe8,0x28,0x55,0x3e,0xe8,0x30,0x56,0x93,0xe7,0xf, 0xcf,0x9e,0xe0,0xe,
+0x3c,0x9a,0xe1,0x2e,0x3f,0x1d,0xe7,0xa, 0xcf,0x9e,0xe0,0x65,0x16,0x4a,0xe0,0x65,
+0x17,0xe, 0xe8,0x55,0x4c,0x25,0xe8,0x25,0x49,0xda,0xe8,0x72,0x50,0xac,0xe8,0x30,
+0x52,0x12,0xe8,0x30,0x77,0x96,0x39,0x6c,0x3d,0xee,0x16,0x80,0x3e,0xf3,0xe0,0x0,
+0x1, 0xeb,0x17,0x1, 0xe8,0x50,0x4e,0xf8,0x2e,0x83,0xe8,0x25,0x6e,0xda,0xe8,0x30,
+0x57,0x96,0xe7,0x9, 0xcf,0x9e,0x17,0x0, 0xe7,0xe, 0xcf,0x9e,0xe8,0x50,0x4f,0x79,
+0xe8,0x30,0x77,0x96,0x27,0x15,0xe8,0x28,0x57,0xcb,0xe4,0x0, 0xc7,0x86,0xe2,0x0,
+0xcf,0x80,0x3, 0x2, 0xc7,0x83,0xe8,0x28,0x56,0x41,0x37,0x82,0x3e,0x7f,0x3, 0x8,
+0xe8,0x30,0x57,0x96,0x16,0x1, 0xe7,0xe, 0xcf,0x9c,0xe8,0x30,0x77,0x96,0xe8,0x30,
+0x57,0x96,0x3e,0x6f,0xe2,0x80,0xc6,0x0, 0x26,0xd, 0xc7,0x7f,0xe2,0x0, 0xcf,0x1,
+0x2, 0x89,0xe2,0x0, 0xce,0x81,0x1, 0x86,0x17,0x0, 0xe7,0xe, 0xcf,0x9e,0xe8,0x30,
+0x77,0x96,0x16,0x80,0xe8,0x30,0x57,0x3, 0xe8,0x30,0x57,0x96,0x37,0x42,0xe7,0xb,
+0xcf,0x9d,0x3f,0x79,0xe8,0x30,0x77,0x96,0xe0,0x0, 0x4, 0xde,0x3f,0x7a,0xe0,0x0,
+0x4, 0xdb,0xe7,0x8, 0xcf,0x9d,0xe8,0x30,0x77,0x96,0xc0,0x4, 0xb, 0xe1,0xe0,0xf,
+0x31,0x21,0x3f,0x96,0x8d,0x1f,0x8c,0x8f,0x3f,0xea,0xe0,0xaf,0x3c,0x8d,0x3c,0x63,
+0x37,0xa1,0x3f,0x1f,0x93,0x8e,0xef,0xfe,0xda,0xf7,0x24,0x8, 0x3a,0x77,0x4, 0x8,
+0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe7,0xfe,0x0, 0xf0,0x3a,0xf7,0x0, 0xf9,0x17,0x1,
+0xe7,0xfe,0x0, 0xf5,0x3f,0xeb,0x8b,0xf, 0x8f,0x9f,0xe1,0x80,0x92,0x92,0xe0,0xaf,
+0x3b,0x8, 0xc5,0x82,0x37,0xa1,0x3f,0x91,0x97,0x8f,0xe0,0x5, 0x3f,0xa5,0xe0,0x41,
+0x3a,0xa5,0x3a,0xf4,0x5, 0x8f,0xe8,0x50,0x4a,0x78,0xe0,0x4c,0x15,0xd8,0x17,0x80,
+0x3f,0xf4,0xc5,0x82,0xc7,0x2, 0x1, 0x8b,0xe8,0x25,0x6f,0xda,0x17,0x0, 0xe7,0xfe,
+0x0, 0xfb,0xc6,0x81,0xe2,0x1, 0xc6,0xff,0xe7,0xfe,0x0, 0xf2,0xe0,0x40,0x89,0x1b,
+0xe0,0x40,0x89,0xab,0x3e,0xe2,0xe0,0xad,0x39,0x88,0xc7,0x81,0x36,0xa1,0x3e,0x91,
+0x96,0x8d,0xe2,0x1, 0xc7,0xff,0xe1,0x80,0xb6,0x9c,0xe0,0x40,0xa9,0xae,0xe0,0x40,
+0xa9,0x1e,0x0, 0xdf,0xe8,0x30,0x57,0x96,0x17,0x1, 0xe7,0x8, 0xcf,0x9e,0xe7,0xff,
+0x0, 0xa4,0xe0,0x51,0x17,0x90,0xb5,0xff,0xe0,0x41,0x3d,0xcb,0xac,0x1f,0xb4,0x9f,
+0xe6,0xa3,0xcc,0x89,0xb5,0x2f,0xe6,0xa3,0xcd,0xa, 0xe0,0x1, 0xb5,0x8f,0xe0,0xf3,
+0x17,0x82,0xac,0x8f,0xad,0x1f,0x38,0x82,0x8, 0xb4,0xe8,0xb, 0x49,0x75,0xe0,0x1,
+0x17,0x52,0x17,0x81,0xe8,0x28,0x77,0x49,0xe0,0x3, 0x31,0x41,0xe0,0x1, 0x17,0x34,
+0xe8,0x25,0x4a,0xd, 0xe8,0x66,0x6f,0x86,0xe8,0x25,0x6f,0x8d,0xe8,0x51,0x69,0x91,
+0xe8,0x28,0x77,0x4a,0xe0,0x3, 0xde,0x25,0xe8,0x50,0x4f,0xf8,0xe8,0x25,0x6a,0xd,
+0xe2,0x0, 0xcf,0x84,0x2, 0xb6,0x14,0x1, 0xef,0xfe,0xdb,0xa, 0xe8,0x50,0x4f,0xf8,
+0xe0,0x1, 0x27,0x95,0xe8,0x25,0x4f,0x43,0xe0,0x1, 0x27,0x11,0xe2,0x0, 0xcf,0x88,
+0x5, 0xab,0xe8,0x28,0x57,0x3f,0xe2,0x5, 0xcf,0x6d,0x2, 0x29,0xe0,0x1, 0x15,0xc8,
+0xe0,0x1, 0x15,0x34,0xe0,0x1, 0x14,0xd2,0x3c,0x63,0xdf,0xb4,0xe8,0x66,0x4f,0x86,
+0xe0,0x1, 0x2f,0x82,0xe8,0xc, 0x4e,0x89,0xe8,0xb, 0x4f,0x7f,0xe8,0xb, 0x4f,0xfd,
+0xe8,0xc, 0x4d,0x8a,0xe8,0xc, 0x4d,0x0, 0xe8,0xb, 0x4c,0xfe,0x36,0xa8,0x37,0x28,
+0x37,0xa8,0x3d,0xcd,0x3d,0x4e,0x3c,0xcf,0x3c,0x62,0xa, 0x21,0xe7,0xff,0x0, 0x9b,
+0xe0,0x0, 0x14,0x64,0x0, 0xcc,0xe2,0x0, 0xcf,0x85,0x5, 0x8d,0xe8,0x28,0x57,0x3f,
+0xe2,0x6, 0xcf,0x51,0x2, 0xb, 0xe0,0x1, 0x15,0xc8,0x3d,0x6b,0xe0,0x1, 0x14,0xe6,
+0x3c,0x62,0x0, 0xd4,0xe2,0x0, 0xcf,0x83,0x5, 0x90,0xe8,0x28,0x57,0x3f,0xe2,0x7,
+0xcf,0x35,0x2, 0xc, 0xe2,0x0, 0xcc,0x1, 0x5, 0x89,0xe0,0x2, 0x15,0xac,0xe0,0x1,
+0x15,0x7a,0xe0,0x2, 0x14,0x98,0x0, 0xed,0x1, 0x90,0xe8,0x28,0x57,0x3f,0xe2,0x8,
+0xcf,0x4b,0x2, 0xe, 0xe2,0x0, 0xcc,0x1, 0x5, 0x8b,0xe0,0x2, 0x15,0xac,0xe0,0x2,
+0x15,0x18,0xe0,0x2, 0x14,0xca,0x0, 0xdd,0xe2,0x0, 0xcf,0x82,0x1, 0xaf,0xe8,0x28,
+0x57,0x3f,0xe2,0xa, 0xcf,0x13,0x2, 0x2a,0xe2,0x0, 0xcc,0x1, 0x5, 0xa7,0xe8,0x55,
+0x4f,0x19,0xe2,0x0, 0xcf,0x2, 0x1, 0xc, 0xe2,0x0, 0xcf,0x1, 0x1, 0x98,0xe2,0x0,
+0xcf,0x82,0x1, 0x95,0xe8,0x55,0x4f,0x8f,0xe2,0x0, 0xcf,0x82,0x1, 0x90,0xe8,0x51,
+0x4f,0xb3,0xe2,0x0, 0xcf,0xc6,0x2, 0x86,0xe8,0x51,0x4f,0xc1,0xe2,0x0, 0xcf,0xc6,
+0x5, 0x86,0xe0,0x2, 0x15,0xac,0xe0,0x1, 0x15,0x48,0x0, 0xc4,0xe0,0x2, 0x15,0xac,
+0x3d,0x6b,0xe0,0x2, 0x14,0xfc,0xe7,0xff,0x0, 0xad,0x17,0x80,0xe8,0x66,0x6f,0x86,
+0xe7,0xfe,0x0, 0xfe,0x17,0x81,0xe8,0x27,0x6f,0x9c,0xa, 0x61,0x8, 0xb1,0xe8,0xf3,
+0x4f,0xd2,0xe0,0x1, 0x27,0x8c,0xe8,0xb, 0x4f,0x7d,0xe0,0xf, 0x37,0x28,0xe8,0xb,
+0x4f,0x7e,0x3f,0x4f,0xe8,0xb, 0x4f,0xf5,0xe8,0x28,0x77,0x49,0xe6,0xa3,0xcf,0xe,
+0xe8,0x51,0x6f,0x91,0xe8,0xb, 0x4f,0xff,0xe8,0xf3,0x6f,0x2, 0xe0,0xd, 0x37,0xa8,
+0xe8,0xc, 0x4f,0x80,0x3f,0xcd,0xe8,0xc, 0x4e,0x89,0xe8,0x28,0x77,0xca,0xe0,0xc,
+0x36,0xa8,0xe8,0xc, 0x4e,0x8a,0xe6,0xa3,0xcf,0x8f,0x3e,0xcc,0xe8,0x28,0x76,0xcf,
+0xe8,0xc, 0x4e,0x8b,0xe8,0xf3,0x6f,0x83,0xe0,0xc, 0x36,0xa8,0xe8,0xc, 0x4e,0x8c,
+0x17,0x80,0x3e,0xcc,0xe0,0x41,0x3e,0xcd,0xe8,0x28,0x76,0xd0,0xe8,0x66,0x6f,0x86,
+0xe8,0xf3,0x4f,0x8e,0x27,0x97,0xe8,0xf3,0x4f,0x9f,0xe2,0x0, 0xcf,0x8e,0x1, 0x12,
+0x3f,0x6f,0xc7,0x78,0xe2,0x0, 0xcf,0x11,0x2, 0x8d,0x37,0xa5,0x3f,0x6f,0xc7,0x4e,
+0xe8,0x28,0x77,0x4a,0x17,0x32,0xe8,0x28,0x77,0xc9,0xe0,0xf, 0x3f,0x2f,0xe8,0x28,
+0x77,0xcb,0xe8,0xf3,0x4f,0x8d,0x27,0xa2,0xe8,0x28,0x56,0xc9,0xe8,0x28,0x57,0x4a,
+0xe4,0x0, 0xc6,0x8a,0xe4,0x0, 0xc7,0xa, 0xe0,0xf, 0x36,0xc3,0xe8,0x28,0x77,0xc9,
+0xe0,0xf, 0x37,0x3, 0xe8,0x28,0x77,0xca,0x36,0xc8,0xe8,0x28,0x57,0xcf,0xe8,0xf3,
+0x6e,0x82,0xe4,0x0, 0xc7,0x8a,0x37,0x48,0x37,0x83,0xe8,0x28,0x77,0xcf,0xe0,0x41,
+0x3f,0xcf,0xe8,0x28,0x77,0xd0,0xe8,0xf3,0x6f,0x3, 0xe8,0xf3,0x4f,0x86,0xe2,0x1,
+0xcf,0xaa,0x1, 0x13,0xe8,0xc, 0x4f,0x83,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x84,
+0x3f,0xce,0xe8,0x28,0x77,0xcc,0xe8,0xc, 0x4f,0x85,0xe0,0xe, 0x37,0xa8,0xe8,0xc,
+0x4f,0x86,0x3f,0xce,0xe8,0x28,0x77,0xcd,0x8, 0xe1,0xde,0xaf,0xe8,0xc, 0x4f,0x81,
+0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x82,0x3f,0xce,0xe0,0x41,0x3f,0xcf,0xe8,0x28,
+0x77,0xcb,0xe8,0x51,0x4f,0xac,0xe7,0xff,0x2f,0x9d,0xe8,0x66,0x4f,0x86,0xe7,0xff,
+0x2f,0x99,0xe8,0x55,0x4f,0x8f,0xe7,0xff,0x2f,0x95,0xe8,0xc, 0x4f,0x8f,0xe0,0xe,
+0x37,0xa8,0xe8,0xc, 0x4f,0x90,0x3f,0xce,0xe8,0x28,0x77,0xc9,0xe7,0xff,0x0, 0x8a,
+0x15,0x12,0x14,0x80,0xe0,0x66,0x14,0x16,0xe0,0x7c,0x0, 0xbd,0x8, 0xb1,0x17,0x80,
+0xaf,0x89,0xef,0xfe,0xd6,0x23,0x24,0x2, 0x14,0x2, 0x8, 0xe1,0x8, 0xb6,0xc0,0x7e,
+0x3a,0xe8,0x3c,0x69,0x39,0xe9,0xef,0xfe,0xd6,0x19,0x3c,0xe0,0x3b,0x68,0xc4,0x83,
+0x3c,0x63,0xdf,0xed,0x3c,0x75,0xe0,0x66,0x11,0x16,0x1, 0x11,0x3c,0xe3,0x3c,0x65,
+0xef,0xfd,0xd1,0xe3,0xc4,0x3, 0x34,0x21,0x39,0x18,0xe8,0x33,0x57,0xc, 0x97,0x82,
+0x3f,0x7f,0x3, 0x83,0xe8,0x33,0x77,0x8c,0xc0,0x2, 0xb, 0x61,0x2b,0x1d,0x3c,0xe3,
+0xef,0xfd,0xd1,0xd3,0xc4,0x3, 0x34,0x21,0x39,0x18,0x97,0x82,0xe8,0x33,0x77,0x8c,
+0xe8,0xd, 0x4f,0xce,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xcf,0x3f,0xce,0xe8,0x33,
+0x57,0xc, 0x3f,0x7f,0xe8,0x30,0x57,0x96,0x5, 0x9e,0x17,0x1, 0xe7,0x5, 0xcf,0x9e,
+0xe8,0x30,0x77,0x96,0x0, 0xe2,0x3c,0xe3,0x3a,0x68,0xef,0xfd,0xd1,0xb6,0xc4,0x3,
+0x34,0x21,0x3c,0x12,0x92,0x88,0x4c,0x3, 0x3c,0xe3,0xef,0xfd,0xd1,0xae,0xc4,0x3,
+0x34,0x21,0x3c,0x12,0x97,0x88,0x3c,0xe3,0x3a,0xff,0x5, 0x83,0x3c,0x64,0x0, 0xd1,
+0x4c,0x3, 0x0, 0xcf,0x17,0x0, 0x0, 0xe3,0x8, 0xb5,0x39,0xe9,0xe0,0xe, 0x34,0xa1,
+0xe0,0x4c,0x17,0xba,0xe4,0x0, 0xc1,0x87,0x3f,0x9e,0xe0,0x4c,0x11,0x40,0x8d,0x9f,
+0xe0,0xf, 0x39,0x13,0x8f,0x5f,0xe2,0x0, 0xcf,0x3, 0x1, 0x23,0xc5,0x81,0x35,0xc1,
+0x3a,0x68,0xc2,0x3, 0xe0,0xf, 0x32,0x21,0xe4,0x0, 0xc4,0x6, 0xe0,0x66,0x12,0x16,
+0x3a,0x1f,0xe1,0x2, 0x17,0xaa,0x3c,0x1f,0x15,0x0, 0x92,0xa8,0xe0,0x80,0x14,0x80,
+0x3c,0x6a,0xe0,0x3, 0xdd,0x4a,0xe0,0x8e,0x3a,0xd9,0x39,0x13,0xe0,0xae,0x3c,0x5,
+0x37,0xcc,0x37,0x24,0x3f,0xce,0xb7,0x84,0x8f,0x82,0xe8,0x66,0x6f,0x94,0xa, 0xe1,
+0x8d,0xef,0x0, 0xdf,0xe8,0xd, 0x4f,0xc0,0x3f,0xf8,0x1, 0xb, 0xe8,0xd, 0x4f,0xc1,
+0x3f,0xf8,0x1, 0x9, 0xe8,0xd, 0x4f,0xc2,0xe0,0x28,0x3f,0x88,0x34,0x21,0x38,0x82,
+0x14,0x0, 0x0, 0xfe,0x14,0x1, 0x0, 0xfc,0xe8,0x12,0x57,0xaa,0xe0,0x6, 0x97,0xcf,
+0xe6,0xaf,0xcf,0xff,0x27,0x96,0x8, 0xb3,0x39,0x68,0xe8,0x66,0x4c,0x14,0x39,0xe9,
+0xdf,0xe2,0xe4,0x0, 0xc4,0x18,0xe0,0x66,0x17,0xac,0x3f,0x98,0xe2,0x0, 0xc9,0x80,
+0x97,0x4f,0x94,0xdf,0x3c,0x62,0xe0,0x69,0x39,0x2e,0x9, 0xa1,0xe7,0x97,0x0, 0xdc,
+0x38,0x82,0xe8,0x60,0x4f,0x9d,0xe8,0x25,0x4d,0xdf,0xe0,0x8, 0x37,0xd8,0x17,0x80,
+0xe6,0xaf,0xcc,0x78,0xe0,0x66,0x17,0x2c,0x16,0x81,0x3e,0x6f,0x3d,0xff,0x1, 0x8d,
+0xe0,0x2, 0xae,0x2e,0xe0,0x2, 0xae,0x3e,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0,
+0xcf,0x83,0xc7,0x18,0x1, 0xf4,0x38,0x82,0x24,0x78,0xe0,0x2, 0xae,0xae,0xe0,0x2,
+0xae,0xbe,0x0, 0xf3,0xe8,0x60,0x4f,0x9e,0xe8,0x60,0x4e,0x9d,0xe8,0x25,0x4d,0xdf,
+0x36,0xd8,0xe0,0x8, 0x37,0xd8,0x17,0x80,0xe6,0xaf,0xce,0xfd,0xe6,0xaf,0xcc,0x78,
+0xe0,0x66,0x17,0x2c,0x16,0x1, 0x3d,0x6f,0x3d,0xff,0x1, 0x8b,0xe0,0x2, 0xad,0x3e,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0x83,0xc7,0x18,0x1, 0xf6,0x38,0x82,
+0x26,0x83,0xe0,0x2, 0xae,0x3e,0x24,0x75,0xe0,0x2, 0xae,0x3e,0x0, 0xf2,0x8, 0xb1,
+0xdf,0xb9,0xe0,0x66,0x17,0xac,0x17,0x0, 0x14,0x1, 0xe0,0x2, 0xaf,0x2f,0xe0,0x5,
+0xaf,0x2f,0xe0,0x8, 0xaf,0x2f,0x8, 0xe1,0x8, 0xb7,0x3b,0x68,0xef,0xfe,0xd5,0xe,
+0x3a,0xe8,0xe0,0x66,0x11,0x2c,0xe0,0x66,0x12,0x74,0x11,0x81,0x13,0x80,0xe0,0x2,
+0x8f,0xb2,0x27,0x97,0xe2,0x0, 0xcb,0x2, 0x1, 0x98,0xe0,0x1, 0x94,0xd2,0x3d,0xe3,
+0xe0,0xb9,0x15,0x20,0x3c,0x69,0xef,0xfe,0xd8,0xe4,0x22,0x89,0xe0,0x1, 0x94,0xc2,
+0x3d,0xe3,0xe0,0xc3,0x15,0x44,0x3c,0x69,0xef,0xfe,0xd8,0xdb,0xe0,0x2, 0xab,0xb2,
+0xc1,0x18,0x39,0x74,0x1, 0xe5,0xb, 0xe1,0xe0,0x1, 0x94,0xb2,0x0, 0xe9,0xe8,0x60,
+0x4f,0x9c,0x27,0xb8,0x8, 0xb3,0x39,0x68,0xe8,0x66,0x4c,0x14,0x39,0xe9,0xdf,0x4b,
+0xe8,0x25,0x4f,0xdf,0x3f,0xf8,0x1, 0x2d,0x29,0x14,0xe4,0x0, 0xc4,0x18,0xe0,0x66,
+0x17,0xac,0xe2,0x0, 0xc9,0x82,0x3c,0x1f,0xe0,0x1, 0x95,0x38,0x1, 0x83,0xe0,0x1,
+0x95,0x58,0xe8,0x72,0x54,0xac,0x15,0x80,0x3c,0x69,0x9, 0xa1,0xe7,0xd1,0x0, 0xb1,
+0xe2,0x0, 0xc9,0x2, 0x1, 0x89,0xc4,0x1, 0xe4,0x0, 0xc4,0x18,0xe0,0x66,0x17,0xac,
+0x3c,0x1f,0x95,0x8, 0x0, 0xef,0xe2,0x0, 0xc9,0x1, 0x1, 0x89,0xe4,0x0, 0xc4,0x18,
+0xe0,0x66,0x17,0xac,0x3c,0x1f,0xe0,0x1, 0x95,0x68,0x0, 0xe4,0x15,0x0, 0x0, 0xe2,
+0x9, 0xe1,0x38,0x82,0x8, 0xb3,0xe4,0x0, 0xc4,0x98,0xe0,0x66,0x11,0x2c,0x39,0x19,
+0x39,0xe8,0x8c,0x62,0x17,0x81,0xe8,0x25,0x6f,0xde,0xef,0xfc,0xd6,0x31,0x8c,0xf2,
+0x3c,0x63,0x9, 0xa1,0xe7,0x8d,0x0, 0x92,0x8, 0xb2,0xe8,0x66,0x4f,0xaf,0x39,0x68,
+0x27,0x86,0xe8,0x25,0x4c,0x45,0xe8,0x66,0x4c,0xac,0xdf,0xe5,0xe0,0x66,0x17,0x8,
+0xe0,0x66,0x16,0x94,0x17,0x80,0xe1,0x80,0xaf,0x9e,0x3e,0xfe,0x1, 0xfd,0x17,0x7f,
+0xe8,0x66,0x6f,0x31,0x17,0x0, 0xe8,0x66,0x6f,0xad,0xe8,0x66,0x6f,0xae,0xe8,0x66,
+0x6f,0xb0,0xe8,0x66,0x6f,0xaf,0xe8,0x33,0x77,0x1d,0xe8,0x33,0x77,0x1e,0xe8,0x66,
+0x6f,0xb8,0xe8,0x33,0x77,0x29,0xe8,0x33,0x77,0x2a,0xe8,0x66,0x6f,0xd0,0xe8,0x33,
+0x77,0x35,0xe8,0x33,0x77,0x36,0xe8,0x66,0x6f,0xe8,0x21,0x6, 0x17,0x87,0xe8,0x60,
+0x6f,0x9d,0xe8,0x60,0x6f,0x9e,0x9, 0x61,0x8, 0xb5,0x14,0x1, 0xdf,0xc6,0xe0,0x66,
+0x17,0xac,0x15,0x0, 0xe0,0x4c,0x11,0x40,0xe8,0x66,0x4c,0xac,0xe0,0xd, 0x14,0x40,
+0x3e,0x6f,0x3e,0xea,0x3a,0x62,0x10,0x81,0x11,0x83,0xe8,0x25,0x4a,0xc5,0xe1,0x80,
+0x8f,0x18,0xb0,0xcc,0x3d,0xee,0x3f,0x65,0xe4,0x0, 0xc7,0x7, 0x3a,0xed,0x3f,0x12,
+0x8f,0xe, 0xc6,0x81,0x3f,0x7b,0xe2,0x1, 0xc6,0xff,0xe0,0x65,0x39,0xa9,0x3f,0x7b,
+0x3f,0x61,0xe0,0x6e,0x39,0xaa,0x3d,0x6e,0x8f,0x38,0xe2,0x0, 0xce,0x83,0xaf,0x7c,
+0x3c,0xe5,0xe8,0x25,0x4f,0x45,0xad,0xec,0xe4,0x0, 0xc7,0x7, 0xc6,0x18,0x3f,0x14,
+0x8f,0x1e,0x3f,0x1b,0xe4,0x0, 0xc7,0x19,0xe0,0x2e,0x3f,0x33,0xe0,0x40,0xb7,0x7c,
+0x1, 0xd5,0x25,0x3, 0xe8,0x66,0x6a,0xac,0xe8,0x66,0x4f,0x2c,0xe2,0x0, 0xcf,0x2,
+0x5, 0x84,0x17,0x0, 0xe8,0x66,0x6f,0x2c,0x16,0x80,0xe8,0x66,0x4d,0x2c,0xe0,0x3b,
+0x14,0xb6,0xe0,0x1, 0x35,0x22,0xe0,0x23,0x11,0x40,0xe0,0x66,0x16,0x7c,0xe0,0xb9,
+0x14,0x20,0xe0,0xc3,0x11,0xc4,0xe0,0xd8,0x12,0xe, 0x3f,0x6d,0xe2,0x1, 0xc7,0x7f,
+0x3d,0x7e,0x1, 0x95,0xe0,0x1, 0xb4,0xaf,0xe0,0x1, 0xb4,0x3f,0xe0,0x1, 0xb1,0xcf,
+0xe0,0x1, 0xb4,0x5f,0xe0,0x1, 0xb2,0x6f,0xc6,0x81,0xe2,0x0, 0xce,0x83,0xc7,0x98,
+0x1, 0xed,0xe8,0x66,0x4f,0xac,0xe8,0x25,0x6f,0xdf,0xa, 0xe1,0xe0,0xe, 0x3e,0x91,
+0x3f,0x12,0x8f,0xe, 0xe0,0x1, 0xb4,0xaf,0xe4,0x14,0xc7,0x4a,0x3d,0xee,0xe0,0x5,
+0x3f,0x1c,0xe0,0xa, 0xc5,0xa4,0xe0,0x14,0xc7,0x48,0x3d,0x9c,0x3f,0x1c,0xe0,0x1,
+0xb2,0xbf,0xe0,0x1, 0xb5,0xcf,0xe0,0x1, 0xb2,0xdf,0xe0,0x1, 0xb7,0x6f,0x0, 0xdd,
+0x8, 0xb6,0x11,0x0, 0x3a,0xe8,0xe0,0x66,0x11,0xac,0xde,0x8d,0x3a,0x62,0x13,0x1,
+0xe0,0x2, 0x8f,0xb3,0x27,0x94,0x3c,0x66,0xef,0xfc,0xdf,0x52,0x3c,0xe4,0x3c,0x65,
+0xdf,0x1a,0xe2,0x0, 0xca,0x82,0x1, 0x95,0xe0,0x1, 0x94,0x53,0xe0,0x1, 0x94,0xc3,
+0xe0,0x1, 0x95,0x63,0x3d,0xe5,0x39,0x66,0xe0,0x3, 0xd5,0x41,0xef,0xfe,0xd3,0xbc,
+0x24,0xb, 0x21,0x5, 0xe8,0x66,0x4c,0xac,0x3c,0x65,0xdf,0x5, 0x14,0x0, 0xb, 0x61,
+0xe0,0x1, 0x94,0x33,0x0, 0xec,0xc2,0x1, 0xe2,0x1, 0xc2,0x7f,0xe2,0x0, 0xca,0x3,
+0xc1,0x98,0x1, 0xd7,0x21,0x5, 0xe8,0x66,0x4c,0xac,0x3c,0x65,0xde,0xf4,0x14,0x1,
+0x0, 0xef,0x17,0x2, 0xe1,0x2d,0x3c,0x9e,0x2e,0x8d,0xe1,0x2a,0x3d,0x1e,0x2d,0xa,
+0x8, 0xb2,0x39,0x69,0xde,0xe8,0x17,0x81,0xe8,0x66,0x69,0x2c,0xe8,0x25,0x6f,0xdd,
+0x9, 0x61,0x38,0x82,0x17,0x80,0xe8,0x25,0x6f,0xde,0xe8,0x66,0x4f,0xaf,0x27,0x95,
+0xe8,0x66,0x4c,0xad,0xc4,0x81,0xe2,0x1, 0xc4,0xff,0xe2,0x0, 0xcc,0x82,0x5, 0x82,
+0x14,0x80,0xe8,0x66,0x4f,0xac,0x3f,0xf9,0x1, 0x86,0xe8,0x66,0x4f,0xae,0xc7,0x81,
+0xe8,0x66,0x6f,0xae,0xe7,0xfd,0x0, 0xc8,0x38,0x82,0xe8,0xd, 0x4f,0xce,0xe0,0xe,
+0x37,0xa8,0xe8,0xd, 0x4f,0xcf,0x3f,0xce,0xe8,0x51,0x4f,0x28,0x2f,0x8, 0xe0,0xb,
+0x17,0x5c,0xe8,0x33,0x77,0x15,0xe8,0x33,0x77,0x94,0x0, 0x8f,0xe0,0x1, 0x17,0x48,
+0xe8,0x33,0x77,0x15,0x17,0x3, 0xe1,0x2e,0x3f,0xbe,0xe8,0x33,0x77,0x14,0xe8,0x28,
+0x57,0x3f,0xe2,0x7, 0xcf,0x68,0x2, 0x6c,0x38,0x82,0xe8,0x66,0x4c,0x30,0x38,0x82,
+0xe8,0xf3,0x4f,0xd2,0xe0,0x2, 0x2f,0xa8,0xe8,0x60,0x4f,0x9c,0xe0,0x2, 0x27,0xa4,
+0xe8,0xf3,0x4f,0xa7,0xe2,0x0, 0xcf,0x81,0xe0,0x2, 0x1, 0x1e,0x8, 0xb4,0xc0,0x7e,
+0x3a,0x69,0x3c,0xe0,0xc4,0x82,0x39,0x68,0xdd,0x12,0x3c,0x74,0x39,0xe8,0xe0,0x0,
+0x1, 0xd5,0xdf,0xc4,0x3c,0xe0,0xc4,0x83,0x3c,0x62,0xe8,0x33,0x52,0xc, 0xdd,0x7,
+0x39,0xf8,0xe0,0x0, 0x1, 0xc1,0xe8,0x66,0x4e,0xaf,0x2e,0xbd,0xe8,0x25,0x4f,0xdb,
+0xe8,0x25,0x4f,0x5c,0xc7,0x81,0xc7,0x1, 0xe2,0x1, 0xc7,0xff,0xe2,0x1, 0xc7,0x7f,
+0xe2,0x0, 0xcf,0x8b,0xe8,0x25,0x6f,0x5c,0x2, 0xba,0xe8,0x25,0x6f,0xdb,0xe8,0x33,
+0x56,0x14,0xe8,0x25,0x4e,0xdb,0xe0,0xf, 0x36,0x21,0x3a,0x7f,0xe0,0x66,0x17,0x88,
+0x3f,0x9d,0x5, 0xb0,0x16,0x82,0xae,0x8f,0xe0,0x66,0x16,0x14,0xe0,0x66,0x16,0x88,
+0x17,0x80,0xe1,0x80,0x8d,0x9d,0x3e,0x7d,0x3f,0x9b,0x1, 0xfc,0xe2,0x0, 0xcf,0x87,
+0x5, 0xa7,0x17,0x80,0xe8,0x25,0x6f,0xdc,0x15,0xc, 0xe8,0x66,0x4f,0xb0,0x14,0x80,
+0xcf,0x81,0xe8,0x66,0x6f,0xb0,0xe0,0x66,0x14,0x8, 0x17,0x81,0xe8,0x66,0x6f,0xaf,
+0xe0,0x3, 0xdb,0x1, 0xe8,0x66,0x4f,0xaf,0xe0,0x66,0x12,0x2c,0xe2,0x0, 0xcf,0x81,
+0x1, 0x19,0xe2,0x0, 0xcf,0x82,0x1, 0x34,0xc0,0x2, 0xa, 0x61,0xe8,0x25,0x6e,0xdb,
+0x0, 0xc7,0x3a,0x7c,0x5, 0x83,0x16,0x81,0x0, 0xcf,0x16,0x80,0x0, 0xcd,0xe2,0x0,
+0xcf,0x1f,0x5, 0xe9,0x17,0xa0,0xe8,0x25,0x6f,0xdc,0x17,0x80,0xe8,0x66,0x6f,0xb0,
+0x0, 0xe2,0xe8,0x66,0x4f,0xac,0xe8,0x66,0x6f,0xad,0x17,0xff,0xe8,0x66,0x6f,0xb1,
+0x17,0x80,0xe8,0x33,0x77,0x9d,0xe8,0x33,0x77,0x9e,0xe8,0x66,0x6f,0xb8,0xe8,0x33,
+0x77,0xa9,0xe8,0x33,0x77,0xaa,0xe8,0x66,0x6f,0xd0,0xe8,0x33,0x77,0xb5,0xe8,0x33,
+0x77,0xb6,0xe8,0x66,0x6f,0xe8,0x17,0x82,0xe8,0x33,0x77,0x97,0x0, 0xce,0xe8,0x66,
+0x4f,0xad,0xe8,0x33,0x56,0x8c,0xe4,0x0, 0xc7,0x98,0xe0,0xc, 0x3a,0x1f,0x97,0x7c,
+0x3f,0x1d,0xe2,0xff,0xcf,0x7e,0xe0,0x0, 0x2, 0xe5,0x3f,0x94,0xb7,0x7c,0xe0,0x1,
+0x97,0xf, 0x3e,0xfe,0x5, 0x83,0xe0,0x1, 0xb6,0x8f,0x3c,0xe0,0xc4,0x82,0x3c,0x62,
+0xdc,0x6e,0x39,0xf8,0x1, 0x8a,0xe8,0x66,0x4f,0xad,0xe2,0x0, 0xcf,0x81,0xe0,0x0,
+0x2, 0xd5,0xc7,0x81,0xe8,0x66,0x6f,0xad,0xe8,0x66,0x4f,0x2e,0xe8,0xd, 0x4f,0xc3,
+0x3f,0x7f,0xe7,0xff,0x4, 0xa3,0xe8,0x33,0x57,0x9d,0xe3,0xff,0xcf,0xff,0xe0,0x0,
+0x1, 0x48,0xe8,0x33,0x55,0x1e,0xe8,0x33,0x57,0x29,0x3f,0xfe,0xe0,0x0, 0x5, 0xc4,
+0xe8,0x33,0x55,0x2a,0x3f,0xee,0x11,0x81,0xe8,0x33,0x57,0x35,0x3f,0x7f,0x3, 0x85,
+0xe8,0x33,0x55,0x36,0x3f,0xee,0x11,0x82,0xe8,0x66,0x4f,0x2c,0x3f,0x73,0x1, 0x24,
+0xe4,0x0, 0xc7,0x18,0xe0,0xd, 0x3a,0x1e,0x96,0xfd,0xe0,0xc, 0x36,0xc2,0xe4,0x0,
+0xc6,0x3, 0x3e,0x7f,0x5, 0x8a,0xe8,0xd, 0x4e,0x48,0xe0,0xb, 0x36,0x28,0xe8,0xd,
+0x4e,0x49,0x3e,0x4b,0x3e,0x7a,0x2, 0xa1,0x36,0xc1,0x3e,0xff,0x5, 0x8d,0xe8,0xd,
+0x4f,0xc8,0x3a,0x1e,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xc9,0x3f,0xce,0xe0,0x1,
+0x97,0x4, 0x3f,0x7f,0x2, 0x92,0x17,0x80,0xe8,0x66,0x6f,0xaf,0xe7,0xfe,0x0, 0xde,
+0xe0,0xff,0x17,0x7f,0xe7,0xff,0x0, 0x9b,0x17,0x80,0xe7,0xff,0x0, 0xad,0x15,0x0,
+0xe7,0xff,0x0, 0xbb,0x11,0x80,0x0, 0xc1,0x14,0x1, 0xef,0xfc,0xdd,0xb9,0xe8,0x66,
+0x4d,0x2c,0x3c,0xe3,0x3c,0x62,0xde,0x8e,0xef,0xfc,0xdd,0x85,0x17,0x80,0xe8,0x66,
+0x6f,0xb0,0x0, 0xe2,0x38,0x82,0xe2,0x0, 0xcc,0x81,0x1, 0x91,0xe8,0x66,0x4f,0xb2,
+0x3f,0xf8,0x1, 0xf, 0xe8,0x66,0x4f,0xca,0x3f,0xf8,0x1, 0xb, 0xe8,0x66,0x4f,0xe2,
+0x3f,0xf8,0x1, 0x7, 0xe8,0x66,0x6c,0x32,0x3c,0x69,0x38,0x82,0x14,0x81,0x0, 0xfd,
+0x14,0x80,0x0, 0xfb,0x8, 0xb2,0xe2,0x1, 0xcc,0x80,0x1, 0x9b,0xe8,0x66,0x4f,0xb2,
+0xe8,0x66,0x4f,0x4a,0x3f,0xfe,0x4, 0x93,0x3f,0xee,0x11,0x1, 0xe8,0x66,0x4f,0x62,
+0x3f,0x7f,0x17,0x82,0xe0,0x6f,0x3a,0xa2,0x39,0x6f,0xe8,0x66,0x4d,0x2c,0x3d,0x72,
+0x1, 0x3, 0x3c,0xe2,0xde,0x57,0xe8,0xf2,0x69,0x24,0x9, 0x61,0x11,0x0, 0x0, 0xef,
+0xe2,0x1, 0xcc,0x81,0x39,0x69,0x1, 0x92,0xe8,0x66,0x4f,0xb2,0xe8,0x66,0x4f,0x4a,
+0x3f,0xfe,0x2, 0x8a,0x3f,0xee,0x11,0x1, 0xe8,0x66,0x4f,0x62,0x3f,0x7f,0x17,0x82,
+0xe0,0x6f,0x3c,0xa2,0x0, 0xe2,0x11,0x0, 0x0, 0xf8,0xe2,0x0, 0xcc,0x82,0x5, 0xde,
+0x11,0x0, 0x0, 0xdc,0x8, 0xb3,0xc0,0x6c,0x39,0x68,0x3c,0x60,0x39,0xe9,0x15,0x14,
+0xe0,0x23,0x14,0xd0,0xc4,0x2, 0xe0,0x3, 0xd9,0x92,0x17,0x80,0x39,0xff,0xe0,0x17,
+0x17,0x38,0x3d,0x6f,0xe0,0x6a,0x39,0xae,0x3d,0xe0,0xc5,0x92,0x17,0x0, 0x3d,0x9f,
+0x3e,0xee,0xe1,0x80,0x8e,0x1b,0x36,0x21,0x3e,0x12,0x96,0xc, 0x3e,0x2a,0xe0,0x41,
+0x3e,0x2c,0xe2,0x1, 0xce,0x48,0x5, 0x4, 0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0xc6,0x81,
+0xe2,0x1, 0xc6,0xff,0xe2,0x0, 0xce,0x84,0x1, 0xed,0xe2,0x0, 0xcf,0x2, 0x2, 0x87,
+0xc7,0xfc,0xe3,0xff,0xcf,0xec,0x1, 0xe1,0x14,0x0, 0x0, 0x82,0x14,0x1, 0xc0,0x14,
+0x9, 0xe1,0x8, 0xb7,0xe1,0xfe,0xc0,0x6a,0x3c,0x60,0x15,0x24,0xe0,0x23,0x14,0xe4,
+0xc4,0x4, 0xe0,0x3, 0xd9,0x5c,0x3c,0x60,0x15,0x24,0xe0,0x24,0x14,0x88,0xc4,0x28,
+0xe0,0x3, 0xd9,0x55,0xe8,0x55,0x4f,0x26,0xe8,0x55,0x49,0xf, 0x77,0x1, 0xe8,0x55,
+0x4a,0x27,0x21,0x6, 0xe8,0x25,0x49,0x60,0x17,0x80,0xe1,0x22,0x39,0xf, 0xe8,0x72,
+0x54,0xac,0x15,0x2, 0x97,0x99,0x3f,0x69,0xb7,0x89,0xe0,0x9, 0xc7,0x46,0x3f,0xe9,
+0x97,0xe, 0xe0,0x9, 0xc7,0xc8,0xe0,0xe2,0x14,0x34,0xb7,0xf, 0x11,0x80,0xe8,0x55,
+0x4a,0xa4,0xef,0xfe,0xd6,0x1, 0x3e,0xe0,0x3e,0x60,0x3d,0xe0,0x3d,0x60,0xc6,0x84,
+0xe0,0xe3,0x17,0xc2,0xc6,0x28,0xe0,0x0, 0xc5,0xce,0xe0,0x0, 0xc5,0x74,0xe0,0x9,
+0x32,0xa1,0xe0,0x17,0x14,0x38,0xe7,0xe8,0x10,0xc8,0x39,0xf5,0xe0,0x0, 0x1, 0xd8,
+0x21,0xa, 0xe8,0x72,0x54,0xac,0x3d,0x60,0x15,0x80,0xe0,0x0, 0xc5,0x74,0x3c,0x69,
+0xef,0xfe,0xd5,0xbb,0xe8,0x72,0x54,0xac,0x16,0x0, 0x15,0x82,0xe0,0xe3,0x15,0x44,
+0xe0,0xe2,0x14,0x7c,0xef,0xfe,0xd5,0x88,0xe0,0xe3,0x17,0x44,0xe0,0xc, 0x31,0xa1,
+0x17,0x80,0x39,0xff,0xe0,0x0, 0x1, 0xd2,0xe8,0x72,0x54,0xac,0x16,0x1, 0x15,0x80,
+0xe0,0xe3,0x15,0x44,0xe0,0xe2,0x14,0x7c,0xef,0xfe,0xd5,0x76,0x3c,0xe2,0xe0,0xe2,
+0x14,0x7c,0xdf,0x59,0xe0,0x90,0x12,0x90,0xe8,0x25,0x6c,0x60,0xe0,0x6, 0x32,0x21,
+0xe0,0xe2,0x17,0xfc,0x3e,0xe5,0x16,0x0, 0xe0,0x3, 0x13,0x90,0x57,0x1, 0x3e,0x7e,
+0xe0,0x0, 0x1, 0xc4,0x21,0xa, 0xe8,0x72,0x54,0xac,0x3d,0x60,0x15,0x80,0xe0,0x0,
+0xc5,0x4e,0x3c,0x69,0xef,0xfe,0xd5,0x81,0xe8,0x25,0x4f,0x60,0xe8,0x72,0x57,0xac,
+0x27,0x6, 0x3e,0x6f,0x17,0x0, 0x39,0xfe,0xe0,0x1, 0x1, 0xd3,0x17,0x0, 0xb7,0xf,
+0xe0,0x9, 0xc7,0xc8,0xb7,0xf, 0xe0,0x1, 0xc0,0x16,0xb, 0xe1,0xe1,0x80,0x97,0x1d,
+0xc1,0x81,0xe0,0x17,0xc7,0x38,0xe0,0x80,0xb7,0x1f,0xe0,0x6, 0x3f,0x99,0xe1,0x80,
+0x97,0x1c,0xe1,0x80,0xb4,0x1b,0xe0,0x17,0xc7,0x38,0xe1,0x80,0xb0,0x9a,0xe2,0x1,
+0xc1,0xff,0xb7,0x6, 0xe7,0xff,0x0, 0x93,0xe0,0x44,0x96,0xce,0x15,0x81,0x3d,0x9d,
+0xb5,0x8e,0xc7,0x81,0xe0,0xb, 0x3f,0x1c,0xe0,0x41,0x3e,0x8d,0xe2,0x1, 0xc7,0xff,
+0xc7,0x2, 0xb6,0x8b,0xe7,0xff,0x0, 0x9f,0xe0,0x44,0x95,0xcf,0xe2,0x0, 0xcd,0x93,
+0x2, 0x12,0xe8,0xf3,0x4f,0x29,0xe2,0x0, 0xcf,0x1, 0x1, 0x8d,0x21,0x5, 0x97,0xf,
+0xe1,0xe8,0xc7,0x48,0xb7,0xf, 0xc6,0x1, 0xe2,0x1, 0xc6,0x7f,0x3e,0x96,0xc7,0x82,
+0xe7,0xff,0x0, 0xa6,0xe8,0x25,0x4f,0x43,0xe0,0x3, 0x10,0xf4,0xe2,0x0, 0xcf,0x2,
+0xe0,0x2, 0x15,0x2c,0xe0,0x6a,0x39,0x21,0x3c,0xe7,0xe0,0x4, 0x10,0xd8,0xe0,0x69,
+0x39,0x21,0xe0,0x3, 0x17,0x74,0xe0,0x5, 0x10,0xbc,0xe0,0x6e,0x39,0x21,0xe2,0xf,
+0xcd,0xd0,0x5, 0x19,0xe0,0x44,0xb7,0x4f,0xe8,0x25,0x4f,0x43,0x2f,0x3, 0xe0,0x44,
+0xb3,0xcf,0x24,0x5, 0xe0,0x7, 0x14,0xe8,0xe0,0x44,0xb4,0xcf,0x21,0x5, 0x97,0xf,
+0xe1,0xe8,0xc7,0x48,0xb7,0xf, 0xe0,0x44,0x97,0x4f,0x95,0x8f,0x3f,0x7b,0x3, 0xf,
+0xb7,0xf, 0x0, 0x91,0xe2,0x7, 0xcd,0xe8,0x5, 0x4, 0xe0,0x44,0xb4,0xcf,0x0, 0xe5,
+0xe2,0x0, 0xcd,0x80,0x5, 0x41,0xe0,0x44,0xb5,0x4f,0x0, 0xdf,0xe0,0x41,0x3f,0x4e,
+0x3d,0xfe,0x4, 0x6f,0x94,0x8f,0xe2,0x0, 0xcc,0x80,0xe0,0xa, 0x34,0x81,0x4, 0x24,
+0x38,0xed,0xc0,0xfe,0x29,0xf, 0x3f,0x62,0x3f,0x74,0xe7,0xff,0x1, 0x2e,0xe0,0x80,
+0x95,0x91,0x3d,0x7b,0x3, 0x3, 0x3d,0xa9,0xb5,0x81,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,
+0x0, 0xf4,0x15,0x80,0x3d,0xf4,0xe7,0xff,0x1, 0x20,0xe0,0x80,0x97,0x11,0xe1,0xe8,
+0xc7,0x48,0x3d,0x7e,0x3, 0x5, 0x3f,0x29,0xe0,0x17,0xc7,0x38,0xb7,0x1, 0xc5,0x81,
+0xe2,0x1, 0xc5,0xff,0x0, 0xf0,0x3c,0xed,0xc4,0xfe,0x29,0x10,0x3f,0x62,0x3f,0x74,
+0xe7,0xff,0x1, 0xb, 0xe0,0x80,0x95,0x99,0x3d,0xfa,0x3, 0x4, 0x90,0x8f,0x3d,0xa1,
+0xb5,0x89,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x0, 0xf3,0x17,0x0, 0x3f,0x74,0xe7,0xfe,
+0x1, 0x7c,0xe0,0x80,0x95,0x99,0x38,0xeb,0xe1,0xe8,0xc0,0xc9,0x38,0xfa,0x2, 0x4,
+0x90,0x8f,0x3d,0xa1,0xb5,0x89,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x0, 0xf0,0x3e,0xe5,
+0xe0,0xa, 0xc6,0xa4,0x95,0x8d,0xe2,0x0, 0xcd,0x80,0x2, 0xc, 0x96,0x8c,0xe2,0x0,
+0xce,0x80,0x5, 0x8, 0xe0,0x41,0x3d,0xcb,0x3e,0xfb,0x3, 0x4, 0xe6,0xac,0xce,0xcd,
+0xb6,0x8c,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x3e,0x16,0x3a,0x96,0xe7,0xfe,0x0, 0x95,
+0x8, 0xb5,0xe1,0xfe,0xc0,0x22,0xe8,0x55,0x4f,0x25,0x3f,0xe0,0xe0,0x0, 0xc7,0xcc,
+0xe0,0xd, 0x37,0x21,0x11,0x0, 0xe0,0x7, 0x16,0x68,0xe7,0xf8,0x15,0x98,0x39,0x7e,
+0xc7,0x82,0xe0,0x0, 0x1, 0xc3,0x15,0x84,0x3c,0x6b,0x3d,0x60,0xe8,0x72,0x54,0xac,
+0x16,0x0, 0xe0,0x0, 0xc5,0x4e,0x3c,0x10,0xef,0xfe,0xd4,0x46,0x57,0x3, 0x57,0x82,
+0x3a,0xe0,0x3f,0x9e,0x37,0x81,0xe8,0x73,0x77,0xd0,0x3f,0xe2,0xe0,0xff,0xc7,0xff,
+0x3f,0x60,0x37,0xa1,0xe0,0x1, 0xc2,0xde,0xc7,0x2, 0x3f,0x1f,0x3f,0x95,0x3d,0x62,
+0x97,0xe, 0xe0,0x4d,0x97,0xdf,0xc5,0x7f,0xe0,0xe7,0x16,0x20,0xe0,0xd, 0x35,0x21,
+0x3f,0x9e,0x37,0x81,0x3e,0x9c,0xb7,0x8d,0x14,0x0, 0x10,0x83,0x17,0x81,0x3d,0x7f,
+0x2, 0x1d,0x17,0x80,0xe0,0xe7,0x17,0x20,0x3e,0x6f,0xe0,0x7, 0x15,0xe8,0x39,0x7f,
+0x1, 0xb8,0xe8,0x72,0x54,0xac,0x15,0x84,0xe0,0xe7,0x15,0x20,0x3c,0x69,0xef,0xfe,
+0xd4,0x3c,0xe0,0x1, 0xc0,0x5e,0xa, 0xe1,0xe0,0xa, 0x3f,0x9d,0xc1,0x1, 0xb6,0xf,
+0xe2,0x1, 0xc1,0x7f,0xb5,0x8a,0xe7,0xff,0x0, 0xb4,0xe0,0xd, 0x37,0xa1,0x3f,0x6f,
+0x3e,0x9c,0xc7,0x7f,0x3a,0x6f,0xe2,0x1, 0xc7,0x7f,0x39,0xed,0xc2,0x1, 0xb4,0xd,
+0x3f,0x74,0x95,0x83,0x5, 0x8, 0xe0,0x2b,0x3d,0xb1,0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0xb5,0x8d,0x0, 0xce,0x3a,0xe0,0xe0,0x9, 0x37,0x21,0xe0,0x1, 0xc2,0xe0,0x3c,0x95,
+0xe0,0x4d,0x94,0xe9,0xc7,0x1, 0x3d,0x99,0xe2,0x1, 0xc7,0x7f,0xb5,0x83,0x0, 0xe9,
+0x96,0x8e,0xe2,0x7, 0xce,0xe7,0x5, 0x8, 0xb5,0x8e,0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0xc7,0x2, 0xe7,0xff,0x0, 0xbe,0xe2,0x0, 0xce,0x80,0x3, 0x78,0xb6,0xe, 0x0, 0xf6,
+0xe8,0x72,0x54,0xac,0xe0,0x9a,0x14,0x34,0xe7,0xc7,0x0, 0x94,0x8, 0xb1,0xdf,0xf9,
+0xdd,0xe9,0x17,0x81,0xe8,0x25,0x6f,0x8d,0x8, 0xe1,0x8, 0xb1,0x15,0x81,0xc4,0x2,
+0xe0,0xff,0x17,0x7f,0x17,0x82,0x3f,0xf9,0x4, 0x97,0xe0,0x0, 0x17,0xe4,0xe0,0x8e,
+0x3f,0x4f,0xe0,0xa, 0x35,0x8f,0x3c,0xef,0x3c,0x6e,0xe0,0x3, 0xd6,0xdd,0xe2,0x0,
+0xcc,0x0, 0x17,0x81,0x2, 0x6, 0x2c,0x4, 0xe2,0x0, 0xcc,0xd0,0x2, 0x82,0x17,0x80,
+0xe6,0xaf,0xcc,0x7f,0x8, 0xe1,0xe0,0x80,0x96,0x98,0xc7,0x81,0xe0,0x2e,0x3f,0x5d,
+0xe0,0x2b,0x3d,0xed,0xe2,0x1, 0xc7,0xff,0x0, 0xdf,0x8, 0xb2,0x17,0x80,0x15,0x12,
+0x14,0x80,0xe0,0x26,0x14,0x7a,0xe8,0x27,0x6f,0x8d,0x11,0x24,0xe8,0x27,0x6f,0x8c,
+0xe0,0x3, 0xd7,0x61,0x3d,0x62,0x14,0x80,0xe0,0x26,0x14,0x56,0xe0,0x3, 0xd7,0x5b,
+0x3d,0x62,0x14,0x80,0xe0,0x26,0x14,0x32,0xe0,0x3, 0xd7,0x55,0xe0,0x0, 0x15,0x48,
+0x14,0x80,0xe0,0x25,0x14,0x6a,0x9, 0x21,0xe0,0x6e,0x0, 0xcd,0x8, 0xb6,0x11,0x0,
+0xe0,0x2, 0x12,0x5e,0xe0,0x4, 0x12,0xd8,0xe8,0x50,0x4f,0xf8,0x3f,0xf2,0x2, 0x82,
+0xb, 0x61,0x3c,0x62,0xe0,0x0, 0xda,0xa1,0x24,0x1f,0xe0,0xf, 0x31,0x21,0xe0,0x4c,
+0x11,0xd8,0x39,0x9f,0x8c,0x93,0x8c,0x3, 0xef,0xfe,0xd1,0xea,0x24,0x19,0x8f,0x93,
+0x3b,0x65,0xe2,0x0, 0xcf,0x81,0x11,0x80,0xe0,0x66,0x39,0x24,0x14,0x81,0x3c,0x62,
+0xef,0xfe,0xd2,0x7e,0x39,0xf8,0x2, 0x4, 0x1, 0x87,0x3b,0x79,0x5, 0x85,0x14,0x80,
+0x3c,0x62,0xe0,0x0, 0xda,0x91,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0x0, 0xd6,0x39,0xe8,
+0x3b,0x64,0x0, 0xed,0x8, 0xb4,0x11,0x0, 0xe0,0x4c,0x11,0xd8,0x12,0x2, 0xe8,0x50,
+0x4f,0xf8,0x3f,0xf2,0x2, 0x82,0xa, 0x61,0x3c,0x62,0xe0,0x0, 0xda,0x6e,0x24,0x2b,
+0xe0,0xf, 0x31,0x21,0x3f,0x93,0x8e,0x8f,0xe2,0x0, 0xce,0x81,0x5, 0xa4,0xe8,0x55,
+0x4f,0x26,0xc7,0x7e,0x3f,0x7d,0x5, 0x1f,0x8f,0x1f,0xe2,0x0, 0xcf,0x2, 0x5, 0x9b,
+0xe8,0x55,0x4f,0xa7,0xc7,0xfe,0x3f,0xfe,0x5, 0x16,0x3c,0x62,0xe0,0x0, 0xda,0x79,
+0xe2,0x2, 0xcc,0x2c,0x5, 0x10,0x3c,0xe4,0x3c,0x62,0xef,0xfe,0xd2,0x41,0xe2,0x0,
+0xcc,0x0, 0x2, 0x9, 0x2c,0x4, 0xe2,0x7, 0xcc,0xe7,0x2, 0x85,0x14,0x80,0x3c,0x62,
+0xe0,0x0, 0xda,0x52,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0x0, 0xca,0xe8,0x50,0x4f,0xf8,
+0x27,0xb7,0x8, 0xb4,0x14,0x82,0x3a,0x68,0xef,0xfe,0xd2,0x2a,0x39,0x68,0x39,0xe9,
+0x3c,0x64,0x14,0x81,0xef,0xfe,0xd2,0x24,0x3d,0x68,0x39,0x7a,0x3d,0xe9,0x2, 0x4,
+0x1, 0xa4,0x39,0xf9,0x5, 0xa2,0x39,0xab,0xe1,0x22,0x39,0x7a,0xe0,0xf, 0x31,0x2c,
+0x31,0xc4,0x39,0xcf,0x31,0x4, 0x3c,0x64,0xe0,0x0, 0xda,0x43,0x3c,0xe8,0xe4,0x0,
+0xc4,0x8a,0x3d,0x62,0x3d,0xe3,0xe0,0x8, 0x34,0x8f,0xe0,0x3, 0xd6,0xd, 0xe2,0x0,
+0xcc,0x0, 0x2, 0x5, 0x2c,0x6, 0xe2,0x1, 0xcc,0xff,0x5, 0x83,0xe0,0x1, 0x14,0xff,
+0x3c,0x69,0xe2,0x1, 0xc4,0x7f,0xa, 0x61,0x11,0x0, 0x11,0x81,0x0, 0xe5,0xe0,0x1,
+0x14,0x7f,0x38,0x82,0x8, 0xb4,0xc0,0x7e,0xe8,0x50,0x49,0xf8,0x39,0x68,0xe0,0x0,
+0x29,0xcc,0xdf,0x2c,0xe8,0xf2,0x69,0x8e,0xe8,0x25,0x4f,0xe3,0xe2,0x0, 0xcf,0x85,
+0x5, 0x86,0xe8,0x4c,0x4f,0xd6,0xe2,0x0, 0xcf,0x86,0x2, 0x86,0x17,0x80,0xe8,0x27,
+0x6f,0x8d,0xe8,0x27,0x6f,0x8c,0xe8,0x51,0x4f,0xa9,0xe8,0xf2,0x4f,0xe, 0xe0,0x1,
+0x2f,0xfd,0x3e,0xee,0xc6,0xff,0xe2,0x0, 0xce,0x83,0xe0,0x1, 0x2, 0xf2,0xc7,0x7e,
+0xe2,0x0, 0xcf,0x2, 0x11,0x6, 0x17,0x8, 0xe0,0x62,0x3a,0xae,0xe8,0x27,0x4f,0xd,
+0xe8,0x51,0x4d,0x0, 0xe0,0x0, 0x27,0x7e,0xe0,0x26,0x14,0xfa,0x3e,0xef,0x3d,0xe9,
+0xe1,0x80,0x8e,0x19,0x3d,0x7c,0xe0,0x0, 0x1, 0x7e,0x3e,0x6d,0xc6,0x1, 0xe2,0x1,
+0xc6,0x7f,0x3f,0x7c,0xe0,0x1, 0x1, 0x96,0xe0,0xc, 0x3d,0x9e,0xad,0xc, 0x37,0x21,
+0xe0,0x26,0x16,0x32,0x3f,0x1c,0xe8,0x28,0x56,0x3f,0xc6,0x82,0xe8,0x27,0x6e,0x8d,
+0xb6,0xe, 0xe0,0x0, 0x0, 0xe8,0xe8,0x28,0x57,0xbf,0xe2,0x4, 0xcf,0xd8,0x5, 0x1d,
+0x17,0x81,0xe8,0x25,0x6f,0xe2,0x17,0x80,0x14,0x82,0x14,0x0, 0xe8,0xf2,0x6f,0x8e,
+0xef,0xfe,0xd1,0x96,0x39,0xe8,0x14,0x0, 0x74,0x81,0xe0,0x0, 0xd9,0xc2,0x54,0x81,
+0x3d,0xe8,0xe0,0xa, 0x34,0xf, 0x3c,0x63,0xe0,0x3, 0xd5,0x8e,0x14,0x0, 0xe8,0x25,
+0x6c,0xe3,0xdf,0x55,0xe7,0xff,0x0, 0x9a,0xe8,0x51,0x4c,0x81,0xe8,0x51,0x4c,0x0,
+0x15,0x2, 0xef,0xfe,0xd1,0x18,0x3f,0x68,0xe2,0x0, 0xcf,0x0, 0x3f,0xe9,0x3, 0x5,
+0xc7,0x8f,0x16,0x80,0xe0,0x2e,0x3f,0x7d,0xe0,0xd, 0x37,0xc4,0xe8,0x28,0x57,0xca,
+0xe0,0xc, 0x37,0x2c,0x3e,0xcc,0x37,0x4, 0xe0,0xc, 0x37,0x8f,0x3f,0x7c,0x2, 0x4,
+0x1, 0x97,0x3e,0xff,0x5, 0x95,0xe0,0xc, 0x37,0xa1,0xe0,0xb, 0x36,0xf, 0x3f,0x7b,
+0x2, 0x4, 0x1, 0x91,0x3e,0xfc,0x5, 0x8f,0x37,0xa2,0xe0,0xc, 0x37,0x8f,0x3f,0x7c,
+0x2, 0xd, 0x1, 0x83,0x3e,0xff,0x2, 0x8a,0x17,0x83,0xe7,0xff,0x0, 0xb7,0x17,0x81,
+0xe7,0xff,0x0, 0xb4,0x17,0x82,0xe7,0xff,0x0, 0xb1,0x17,0x84,0xe7,0xff,0x0, 0xae,
+0xe8,0x28,0x57,0x3f,0xe8,0x26,0x6d,0x7a,0xe8,0x13,0x77,0x19,0x17,0x1, 0xe8,0x27,
+0x6f,0xd, 0xe8,0x27,0x4f,0xc, 0xe8,0x51,0x4d,0x81,0x27,0x1e,0xe0,0x26,0x15,0x56,
+0x3e,0x6a,0xe1,0x80,0x8e,0x9a,0x3d,0xfd,0x1, 0x20,0x3e,0xef,0xc6,0x81,0xe2,0x1,
+0xc6,0xff,0x3f,0x7d,0xe0,0x0, 0x1, 0xcf,0xe0,0xd, 0x3e,0x1e,0xad,0x8d,0x37,0x21,
+0xe0,0x25,0x16,0xea,0x3f,0x1d,0xe8,0x28,0x56,0xbf,0xc7,0x82,0xb6,0x8e,0x0, 0x8b,
+0x3e,0xec,0xe7,0xfe,0x0, 0xdf,0xe8,0x28,0x57,0xbf,0xe8,0x26,0x6d,0xd6,0xe8,0x12,
+0x77,0xf5,0x17,0x81,0xe8,0x27,0x6f,0x8c,0xe8,0x27,0x4a,0xd, 0x39,0x74,0x2, 0x89,
+0xe2,0x0, 0xca,0x3, 0x5, 0x86,0x3c,0xe4,0xe0,0x26,0x14,0x32,0xde,0x1f,0x2c,0x24,
+0xe8,0x27,0x49,0x8c,0x39,0x73,0x2, 0x89,0xe2,0x0, 0xc9,0x83,0x5, 0x86,0x3c,0xe3,
+0xe0,0x25,0x14,0x6a,0xde,0x13,0x2c,0x18,0xe4,0x0, 0xc1,0x3, 0xe0,0xf, 0x3a,0x13,
+0x31,0x1, 0x3f,0xf2,0x4, 0x15,0xe2,0x0, 0xca,0x3, 0x5, 0x92,0x3c,0xe4,0xe0,0x26,
+0x14,0x32,0xde,0x4, 0x24,0xd, 0xe2,0x0, 0xc9,0x83,0x5, 0x8a,0x3c,0xe3,0xe0,0x25,
+0x14,0x6a,0xdd,0xfc,0x24,0x5, 0xde,0x22,0x17,0x82,0xe8,0x51,0x6f,0xa9,0xc0,0x2,
+0xa, 0x61,0x3f,0xed,0xe7,0xff,0x0, 0xa7,0x27,0xc, 0x17,0x82,0xe8,0x51,0x6f,0xa9,
+0x17,0x80,0x17,0x1, 0xe0,0x22,0x39,0xe, 0x29,0x2, 0x27,0xf2,0x17,0x80,0x0, 0xee,
+0xe8,0x50,0x4f,0xf8,0x2f,0x85,0x17,0x1, 0xe8,0x51,0x6f,0x29,0x0, 0xf3,0xe8,0x28,
+0x57,0xbf,0xe2,0x7, 0xcf,0x84,0x5, 0x6a,0x17,0x81,0x0, 0xec,0xe8,0x28,0x57,0xbf,
+0xe2,0x4, 0xcf,0xd7,0x2, 0xc, 0xe8,0x50,0x4f,0xf8,0xe2,0x0, 0xcf,0x82,0x2, 0x87,
+0x8, 0xb1,0xef,0xfd,0xdf,0x97,0xe8,0x4c,0x6c,0x56,0x8, 0xe1,0x17,0xff,0xe8,0x4c,
+0x6f,0xd6,0x38,0x82,0xe8,0x12,0x57,0xf4,0xe3,0x91,0xcf,0xc7,0x2, 0xac,0x8, 0xb4,
+0xe8,0x25,0x49,0x64,0x21,0x23,0xa, 0x61,0xe0,0xf, 0x31,0x21,0x3f,0x93,0x8e,0xf,
+0x26,0xd, 0xe8,0x55,0x4f,0x26,0xc7,0x7f,0x3f,0x7c,0x1, 0x8, 0x8f,0x1f,0x27,0x6,
+0xe8,0x55,0x4f,0xa7,0xc7,0xff,0x3f,0xfe,0x1, 0x86,0x14,0x80,0x3c,0x62,0xe0,0x0,
+0xd8,0xab,0x3e,0xe4,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe8,0x50,0x4f,0xf8,0x3f,0xf2,
+0x2, 0xe4,0x26,0xe2,0xa, 0x21,0xe0,0x11,0x0, 0xdf,0x3e,0xe2,0xe0,0x4c,0x11,0xd8,
+0x12,0x1, 0x0, 0xf4,0x38,0x82,0x8, 0xb5,0xc0,0x7a,0x3c,0x60,0x15,0x6, 0xe0,0x24,
+0x14,0xac,0xc4,0x2, 0xe0,0x3, 0xd4,0xd3,0xe8,0x51,0x4f,0xa8,0xe0,0x0, 0x27,0xe5,
+0xe8,0x51,0x4f,0xa9,0xe0,0x0, 0x27,0xe1,0xe8,0x50,0x4f,0xf8,0xe2,0x0, 0xcf,0x81,
+0xe0,0x0, 0x1, 0x5b,0xe8,0x4c,0x4f,0x56,0x17,0x80,0xe2,0x1, 0xcf,0x7f,0xe8,0xf2,
+0x6f,0x8f,0x1, 0x37,0xe2,0x0, 0xcf,0x1a,0x2, 0xb0,0xe2,0x0, 0xcf,0x16,0x2, 0xaf,
+0xe2,0x0, 0xcf,0xf, 0x17,0x88,0x5, 0x8b,0x17,0x82,0x17,0x1, 0xe8,0xf2,0x6f,0xf,
+0x3f,0x60,0x37,0xa1,0xc7,0x6, 0x3f,0x9e,0xe0,0x40,0x8f,0xbf,0xe8,0x28,0x56,0xbf,
+0x17,0x14,0x3f,0xbd,0xe8,0x28,0x56,0x49,0xe0,0x2f,0x3f,0xbe,0x3e,0x7f,0x3, 0x83,
+0xe8,0x28,0x77,0xc9,0xe4,0x0, 0xc6,0x87,0xe0,0x4c,0x12,0x58,0xe0,0x23,0x3e,0xbe,
+0x17,0x0, 0x39,0x6e,0x12,0x81,0xe8,0x50,0x4f,0xf8,0x3f,0xf2,0x2, 0x8c,0x27,0x24,
+0xc0,0x6, 0xa, 0xa1,0xe0,0x11,0x0, 0x88,0x17,0x80,0x0, 0xd8,0x17,0x81,0x0, 0xd6,
+0x17,0x88,0x0, 0xdd,0xe0,0xf, 0x31,0x21,0x3f,0x94,0x8e,0xf, 0xe8,0x55,0x4e,0xa5,
+0x8f,0x9f,0xe0,0xaf,0x3e,0xd, 0xe8,0x72,0x56,0xac,0x37,0xa1,0x3f,0x9d,0x97,0x8f,
+0x39,0xff,0x5, 0x6, 0x14,0x80,0x3c,0x62,0xe0,0x0, 0xd8,0x2e,0x3f,0x65,0xc1,0x1,
+0xe2,0x1, 0xc1,0x7f,0x0, 0xd9,0xc0,0x6, 0xa, 0xe1,0xe2,0x0, 0xcc,0x1, 0x1, 0x9c,
+0xe8,0xf3,0x4f,0x8d,0xe8,0xb, 0x4e,0xf5,0xe2,0x0, 0xcf,0x81,0xe8,0x51,0x6e,0x91,
+0xe0,0x2, 0x17,0xac,0xe7,0xfd,0x17,0x54,0x1, 0x90,0xe0,0x1, 0x16,0xc8,0xe8,0x28,
+0x76,0xc9,0xe8,0x28,0x76,0xca,0xe8,0x28,0x77,0xcf,0xe8,0x28,0x77,0x50,0xe8,0x28,
+0x77,0xcc,0xe8,0x28,0x77,0xcd,0x38,0x82,0xe8,0x28,0x77,0x50,0xe8,0x55,0x4f,0xf,
+0xe8,0x28,0x77,0xcc,0xe8,0x28,0x77,0xcd,0xe8,0x28,0x77,0xcf,0xe0,0x1, 0x17,0x82,
+0x2f,0x8, 0xe0,0x1, 0x17,0x2a,0xe8,0x28,0x77,0x49,0xe8,0x28,0x77,0xca,0x0, 0xec,
+0xe0,0x1, 0x17,0xc, 0x0, 0xf9,0xe8,0x12,0x57,0xf4,0xe3,0x91,0xcf,0xc7,0x2, 0x9c,
+0xe8,0x51,0x4f,0xa9,0x2f,0x83,0xe8,0x12,0x77,0xf3,0xe8,0x12,0x57,0xf3,0xe2,0x42,
+0xcf,0xf6,0x5, 0x84,0x17,0x81,0xe8,0x25,0x6f,0xe4,0xe8,0x51,0x4f,0xa8,0xe8,0x27,
+0x4f,0x12,0xe8,0xf3,0x6f,0xc2,0x2f,0x4, 0xe8,0x27,0x4f,0x13,0x27,0xe, 0x17,0x80,
+0xe8,0x51,0x6f,0xa9,0x38,0x82,0xe3,0x91,0xcf,0xc8,0x1, 0x70,0xe8,0x25,0x4f,0xe4,
+0x2f,0xed,0xe8,0x51,0x6f,0xa8,0x0, 0xea,0x27,0xf3,0xe8,0x51,0x4f,0xa9,0x2f,0x8d,
+0xe8,0x55,0x4f,0x8f,0x27,0x85,0x17,0x85,0xe8,0x25,0x6f,0xe1,0x38,0x82,0xe8,0x25,
+0x4f,0xe1,0x27,0x83,0xc7,0xff,0x0, 0xf9,0x8, 0xb2,0x14,0x1, 0x11,0x0, 0xe8,0x51,
+0x69,0xd, 0xdf,0x8c,0xe0,0x3, 0xd2,0xc5,0xe8,0x28,0x57,0xbf,0xe2,0x6, 0xcf,0xa0,
+0x5, 0x10,0xe8,0x50,0x4f,0xf8,0x27,0x8d,0xe8,0x51,0x69,0x29,0xe8,0xe7,0x4f,0x9c,
+0xe2,0x0, 0xcf,0x81,0x1, 0x85,0xe8,0x50,0x4f,0xf8,0xe8,0x51,0x6f,0x8c,0x9, 0x61,
+0xde,0xd2,0xdc,0xdd,0xe8,0x28,0x57,0xbf,0xe2,0x2, 0xcf,0xac,0x5, 0x2, 0xdd,0xb,
+0xd7,0xd2,0xde,0xb5,0x14,0x0, 0xdd,0x7f,0x0, 0xea,0x8, 0xb7,0xc0,0x7e,0xe8,0x50,
+0x4a,0x78,0xe8,0xd, 0x4f,0xaf,0xe8,0x28,0x53,0x3f,0x3f,0xf4,0xe8,0xd, 0x49,0xae,
+0xe0,0x0, 0x5, 0xd0,0xc1,0xff,0x39,0xbf,0xe8,0xd, 0x49,0x2c,0xe8,0xd, 0x4c,0xab,
+0xe0,0xf, 0x31,0x28,0xe8,0xd, 0x49,0x2d,0xe8,0x72,0x54,0x2c,0x39,0x4f,0xe8,0xd,
+0x4f,0xaa,0x3d,0x62,0x37,0xa8,0x3c,0xcf,0xef,0xfe,0xd0,0xaa,0xe8,0x13,0x74,0x48,
+0x3d,0x62,0xe8,0x72,0x54,0x2c,0xe0,0x0, 0x14,0xd0,0xef,0xfe,0xd0,0xa1,0x11,0x0,
+0xe8,0xd, 0x4b,0xb3,0xe8,0xd, 0x4f,0x34,0xe8,0x13,0x74,0x47,0x3a,0xe2,0xe8,0x50,
+0x4f,0xf8,0x3f,0xf5,0x2, 0xa9,0xe8,0x13,0x57,0xc8,0xe8,0x79,0x57,0x8, 0x3f,0xf3,
+0xe0,0x0, 0x5, 0xcd,0xe8,0xd, 0x4f,0xb5,0xe0,0xd, 0x37,0xa8,0xe8,0xd, 0x4f,0xb6,
+0x3f,0xcd,0x3f,0xf6,0x3, 0x4, 0xe2,0x0, 0xca,0x1, 0x2, 0x86,0x3f,0xe4,0x31,0x21,
+0xc7,0xff,0x39,0x7f,0x4, 0x25,0x17,0x81,0xe8,0xf2,0x6f,0x92,0xe8,0xd, 0x4f,0xb1,
+0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xb2,0x3f,0xce,0xe8,0x79,0x77,0x88,0x0, 0x9c,
+0x39,0xb4,0xe7,0xff,0x0, 0xb3,0x3c,0x65,0x77,0x1, 0xd7,0x42,0xe0,0xf, 0x34,0x21,
+0x3f,0xf6,0x57,0x1, 0x4, 0x6, 0xe0,0xf, 0x33,0xa8,0x3f,0xce,0x3f,0xf8,0x5, 0x4,
+0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xc2,0x81,0xe2,0x1, 0xc2,0xff,0x0, 0xc1,0x17,0x80,
+0xe8,0xf2,0x6f,0x92,0x2f,0x5c,0xe8,0xd, 0x4f,0xb7,0xe8,0x79,0x54,0x8, 0xe0,0xe,
+0x37,0xa8,0xe8,0xd, 0x4f,0xb8,0x16,0x80,0x3f,0xce,0x3f,0xf6,0xe1,0x28,0x3c,0xd,
+0x3, 0x3, 0xe8,0x50,0x6e,0xf8,0xc0,0x2, 0xb, 0xe1,0x17,0x80,0xe8,0xf2,0x6f,0x92,
+0x27,0x6b,0xc7,0x7f,0xe8,0x79,0x77,0x8, 0x0, 0xe7,0x8, 0xb7,0xc0,0x6e,0xe8,0x55,
+0x4f,0xa5,0xe8,0x55,0x45,0xa6,0x77,0x83,0x3f,0xe9,0x75,0x86,0xe6,0xa9,0xc9,0x89,
+0x55,0x83,0xe8,0x72,0x57,0x2c,0xe0,0xaf,0x3d,0x88,0xe8,0x55,0x46,0x27,0x37,0xa1,
+0x3f,0x9e,0x97,0x8f,0x77,0x2, 0x3f,0x68,0x76,0x7, 0x3e,0x69,0xc7,0x7e,0x3b,0xe8,
+0x3b,0x69,0x39,0xa9,0xc6,0x7e,0x77,0x88,0x17,0x80,0x39,0x68,0xc3,0x82,0xc3,0x2,
+0xc1,0x82,0xe0,0x43,0x3e,0x8e,0x76,0x4, 0x38,0xef,0x77,0x9, 0x3e,0xf7,0x5, 0x16,
+0x30,0x83,0xe0,0x8, 0x37,0x84,0xe0,0x8, 0x38,0xa8,0xe2,0x0, 0xcc,0x5a,0xe0,0x0,
+0x2, 0x5f,0x57,0x88,0x3f,0xa1,0xe2,0x0, 0xcf,0xf7,0xe0,0x0, 0x5, 0x5c,0x17,0xbc,
+0xe0,0x28,0x3c,0x1f,0xb0,0x8a,0xc0,0x12,0xb, 0xe1,0xe2,0x0, 0xce,0x80,0x3, 0x24,
+0x3d,0xe2,0xc5,0x82,0xe0,0x43,0x3d,0x8b,0x57,0x6, 0x3e,0xfe,0x4, 0x5, 0x3d,0xe2,
+0xc5,0x82,0xe0,0x43,0x3d,0x8b,0x57,0x3, 0x56,0x4, 0x3f,0x3b,0xe2,0x1, 0xc6,0x7f,
+0x12,0x80,0x77,0x1, 0x76,0x5, 0x3a,0x65,0x56,0x5, 0xe2,0x1, 0xc2,0x7f,0x3e,0x14,
+0xe0,0x43,0x3e,0xc, 0x3e,0x76,0x5, 0xa, 0xc6,0x81,0xc1,0x7f,0xe0,0x43,0x3e,0x8d,
+0xe2,0x1, 0xc1,0x7f,0x0, 0xc4,0x3d,0xed,0x0, 0xe0,0xe2,0x0, 0xce,0x0, 0x3, 0x1f,
+0xe0,0xe, 0x39,0xa4,0xe0,0x43,0x3f,0xe, 0x55,0x87,0x3d,0xfc,0x2, 0x5, 0xe0,0xe,
+0x39,0xa4,0xe0,0x43,0x3f,0xe, 0x55,0x81,0x3f,0x1b,0x55,0x82,0x37,0x21,0x3f,0x1b,
+0x55,0x89,0x97,0xe, 0x3d,0xfd,0x1, 0x8, 0x3e,0xf7,0x1, 0x6, 0x55,0x84,0x3d,0xfc,
+0x1, 0x3, 0x3e,0x76,0x1, 0x86,0x3f,0x9e,0xc2,0x81,0x0, 0xce,0x3f,0x6c,0x0, 0xe5,
+0x3c,0x7d,0x1, 0x83,0x3e,0x79,0x1, 0x79,0x38,0x9e,0x0, 0xf7,0x14,0x1, 0xe7,0xff,
+0x0, 0xab,0x14,0x0, 0xe7,0xff,0x0, 0xa8,0x8, 0xb7,0xc0,0x74,0xe8,0x28,0x57,0xbf,
+0xe8,0x50,0x4a,0xf8,0xe2,0x1, 0xcf,0xc7,0x2, 0xb, 0x17,0x80,0xe8,0x27,0x6f,0x94,
+0xe8,0x27,0x4f,0x92,0x27,0x8f,0xc7,0xff,0xe8,0x27,0x6f,0x92,0x0, 0x8b,0xe2,0x7,
+0xcf,0xe8,0x5, 0x77,0xe0,0x0, 0x17,0xd0,0xe8,0x27,0x6f,0x92,0x17,0x80,0xe8,0x51,
+0x6f,0xa9,0xe8,0x27,0x4f,0x93,0x27,0x84,0xc7,0xff,0xe8,0x27,0x6f,0x93,0xde,0xb6,
+0xe8,0x27,0x6c,0x15,0x22,0xbb,0x2c,0xb, 0xe8,0x13,0x57,0xc8,0xe2,0x0, 0xcf,0xbc,
+0x5, 0xb5,0xe8,0x13,0x57,0xc7,0xe2,0x0, 0xcf,0xd0,0x5, 0xb0,0xe8,0x55,0x4f,0xa6,
+0xc7,0xff,0xe2,0x1, 0xc7,0xff,0x77,0x83,0xe8,0x55,0x4f,0xa7,0xc7,0xff,0xe2,0x1,
+0xc7,0xff,0x77,0x84,0x24,0x25,0xe8,0x28,0x51,0xbf,0x17,0x83,0xe0,0x23,0x39,0xbf,
+0xe0,0x6, 0x17,0xa0,0xe1,0x23,0x39,0xef,0xe0,0x0, 0x17,0xf8,0xe8,0x27,0x6f,0x93,
+0x17,0x80,0xe8,0x51,0x6f,0xa9,0x13,0x3, 0x12,0x0, 0xe1,0x2e,0x3a,0x96,0x3b,0xe4,
+0x77,0x5, 0x39,0x64,0xe2,0x1, 0xc1,0x7f,0x39,0x75,0x4, 0x8d,0x23,0x87,0xd6,0x4b,
+0xe8,0x50,0x4f,0xf8,0x2f,0x83,0xe8,0x51,0x6f,0xa9,0xc0,0xc, 0xb, 0xe1,0xe0,0x3,
+0x11,0xf4,0x0, 0xea,0x3c,0x62,0xd5,0xf0,0x24,0x36,0xe0,0xf, 0x32,0x21,0xe0,0x4c,
+0x16,0xd8,0x3f,0x9d,0x8c,0xf, 0x24,0x28,0x57,0x3, 0xe1,0x2d,0x3f,0x18,0x26,0xa4,
+0x8f,0x9f,0x16,0x82,0xe1,0x2d,0x3f,0x9d,0x26,0x9f,0x57,0x4, 0xe1,0x2d,0x3f,0x1f,
+0x26,0x9b,0xe8,0x55,0x4e,0xa5,0x3f,0x6f,0xe0,0xae,0x3e,0x88,0xe8,0x72,0x56,0xac,
+0xe0,0xc, 0x37,0x21,0x3e,0x9c,0x96,0xd, 0x3e,0x73,0x3, 0x8e,0x3d,0x60,0x3c,0xef,
+0xc5,0xc, 0x76,0x1, 0x77,0x82,0xde,0xda,0x3c,0xe8,0x56,0x1, 0x57,0x82,0x2c,0xe,
+0x3c,0x62,0xd5,0xd1,0x13,0x81,0x3c,0x62,0xd5,0xf3,0x24,0x5, 0x23,0x84,0x17,0x81,
+0xe8,0x27,0x6f,0x94,0xc2,0x1, 0xe7,0xff,0x0, 0xb6,0x57,0x5, 0xe8,0x28,0x56,0xbf,
+0x2f,0x5, 0x15,0x9c,0xe1,0x2f,0x3f,0x9b,0x27,0x89,0xe0,0xf, 0x36,0xcf,0x3e,0x9f,
+0x36,0x81,0x3e,0xfc,0x5, 0x69,0x14,0x80,0x0, 0xe4,0xe0,0x2d,0x3e,0xb6,0x0, 0xfa,
+0xe8,0x25,0x4c,0x1d,0xe8,0x13,0x57,0x4c,0xe0,0xf, 0x34,0x22,0xc7,0x81,0x3f,0xfe,
+0x4, 0x94,0x3f,0xee,0xc7,0x81,0xe2,0x0, 0xcf,0x81,0xe8,0x13,0x77,0xcc,0x1, 0x84,
+0xe8,0xf3,0x4c,0x55,0x38,0x82,0xe2,0x0, 0xcf,0x82,0x1, 0x7d,0xe8,0x12,0x57,0x9d,
+0x3f,0x9e,0xe0,0x40,0x8c,0x2f,0x0, 0xf7,0xe0,0x1, 0x14,0x7f,0x0, 0xf4,0xe8,0xf2,
+0x6c,0x1a,0xe8,0xf2,0x4f,0x9a,0xe6,0xa9,0xcf,0xdf,0xe2,0x0, 0xcf,0x84,0x1, 0x83,
+0x17,0x83,0x0, 0x85,0xe2,0x0, 0xcf,0x81,0x2, 0x85,0x17,0x81,0xe8,0xf3,0x6f,0xa9,
+0x38,0x82,0xe2,0x0, 0xcf,0x82,0x1, 0x75,0x17,0x81,0xe8,0xf3,0x6f,0xa9,0x17,0x80,
+0xe8,0xf2,0x6f,0x9a,0x0, 0xf6,0x8, 0xb1,0xe2,0x1, 0xcc,0x1a,0x3f,0xe8,0x1, 0x95,
+0x17,0x0, 0x16,0x82,0xe8,0xf2,0x6c,0xf6,0xe8,0xf2,0x6f,0x77,0xe8,0xf3,0x6f,0x1d,
+0xe8,0xf2,0x6e,0xf8,0xe8,0xf2,0x6f,0x79,0x3c,0x6f,0xe4,0x1, 0xcc,0x0, 0xe2,0x0,
+0xcc,0x6f,0x2, 0x8a,0xd3,0x91,0x0, 0x84,0x2c,0x78,0x3c,0x69,0xdf,0xc9,0x17,0x81,
+0xe8,0x24,0x6f,0xc5,0x8, 0xe1,0xe2,0x1, 0xcf,0xfd,0x1, 0x84,0xe8,0x27,0x6c,0x96,
+0x0, 0xf7,0xe2,0x1, 0xcf,0xfc,0x1, 0xf4,0x3c,0x69,0x8, 0xa1,0xe7,0x7d,0x0, 0xcc,
+0x2c,0x4, 0xe8,0xf2,0x4c,0x1a,0x38,0x82,0xe2,0x0, 0xcc,0x3, 0x2, 0x99,0x17,0x80,
+0xe2,0x0, 0xcc,0x1, 0xe8,0x33,0x6f,0xab,0x1, 0x4, 0xe0,0x1, 0x14,0x7f,0x38,0x82,
+0x8, 0xb2,0x39,0x68,0xe0,0x2, 0xd1,0xe9,0xe8,0x12,0x57,0xb4,0xe0,0x1, 0x14,0x7f,
+0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x12,0xe0,0x2, 0xb7,0x2f,0x9, 0x61,0xc4,0x2d,
+0xe2,0x1, 0xc4,0x7f,0xe2,0x0, 0xcc,0x1, 0x2, 0xe9,0xe7,0xfe,0x0, 0xf3,0xe8,0xf2,
+0x4f,0x9a,0xe6,0xa9,0xcf,0xdf,0x2f,0x82,0x0, 0xd4,0xe2,0x0, 0xcf,0x84,0x1, 0x83,
+0xe7,0x73,0x0, 0x87,0x14,0x0, 0x38,0x82,0xe8,0xf2,0x4f,0x9a,0xe6,0xa9,0xcf,0xdf,
+0x2f,0x83,0xe7,0xff,0x0, 0x9a,0xe2,0x0, 0xcf,0x84,0x1, 0x83,0xe7,0x70,0x0, 0x98,
+0x38,0x82,0x8, 0xb3,0xe0,0x1, 0x11,0xff,0x11,0x0, 0x3c,0xe3,0x15,0x3e,0xe1,0x0,
+0x14,0x30,0xe8,0xf2,0x69,0x1a,0xe0,0x3, 0xd1,0x8e,0x15,0x3e,0x3c,0xe3,0xe0,0xff,
+0x14,0x4a,0xe0,0x3, 0xd1,0x88,0xe1,0x0, 0x17,0xb0,0xe8,0x27,0x69,0x1a,0xe8,0x81,
+0x77,0x91,0xe8,0xf2,0x69,0x18,0x9, 0xa1,0xe7,0x8f,0x0, 0xab,0xe8,0xd, 0x4d,0x3,
+0x3d,0x78,0x5, 0xa2,0xe8,0xd, 0x4f,0x85,0xe0,0x8, 0x3d,0x28,0xe0,0xe, 0x37,0xa8,
+0xe8,0xd, 0x4f,0x86,0x3d,0xea,0x3f,0xce,0x3c,0x3f,0xc5,0xff,0xe0,0xd, 0x34,0x48,
+0x3d,0x7d,0x3f,0xeb,0x35,0x8f,0x16,0x0, 0x3f,0x6b,0x2, 0x83,0x3e,0x6b,0x3e,0xef,
+0x3f,0xad,0xe1,0x2e,0x3f,0x7c,0x2f,0x4, 0xe2,0x8, 0xcf,0xb6,0x5, 0x83,0xe0,0x8,
+0x17,0xb8,0x3c,0x6f,0x38,0x82,0xe8,0x12,0x57,0xeb,0xe8,0xd, 0x4d,0x84,0xe0,0xe,
+0x3f,0xab,0x3f,0x78,0x3, 0xa4,0xe8,0xc, 0x4d,0x7f,0xe0,0xf, 0x3d,0xaf,0xe0,0xe,
+0x35,0x28,0x3c,0x1f,0xe8,0xd, 0x4d,0x0, 0xe8,0xd, 0x4f,0x87,0x3d,0x4e,0xe0,0xe,
+0x37,0xa8,0xe8,0xd, 0x4f,0x88,0x16,0x0, 0x3f,0xce,0x3c,0x3f,0xe0,0xd, 0x34,0x48,
+0x3d,0xfd,0x2, 0x86,0x3f,0xeb,0xc7,0xff,0x3e,0xef,0xe0,0xc, 0x37,0x8f,0xe0,0xf,
+0x3d,0x2b,0x17,0x0, 0x3f,0x9d,0xe0,0x2e,0x3f,0x7c,0x0, 0xce,0x17,0x0, 0x3f,0xe8,
+0x0, 0xcb,0xe8,0xd, 0x4d,0x91,0x3d,0xf8,0x5, 0xa4,0xe0,0xf, 0x3d,0xa8,0xe8,0xd,
+0x4c,0x13,0x15,0x0, 0xe0,0xe, 0x34,0x28,0xe8,0xd, 0x4c,0x14,0x3e,0x6a,0x3c,0x4e,
+0x3f,0xb8,0x3f,0x6a,0xe0,0xd, 0x37,0xc8,0x3d,0xfd,0x3f,0xeb,0x2, 0x85,0xc5,0xff,
+0x3e,0xeb,0xe0,0xc, 0x35,0x8f,0x3f,0xad,0xe1,0x2e,0x3f,0x7c,0xe2,0x0, 0xcf,0x0,
+0x2, 0x3c,0x2f,0x4, 0xe2,0x0, 0xcf,0x81,0x2, 0xb8,0x17,0x0, 0x3f,0xee,0x0, 0xb5,
+0xe8,0xd, 0x4f,0x8d,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0x8e,0x3f,0xce,0xe8,0xd,
+0x4f,0x12,0xe0,0xb, 0x3f,0xae,0x3d,0xf8,0x3, 0xaa,0x3f,0xf8,0x4, 0xef,0xe0,0xf,
+0x3f,0x2f,0x3f,0x98,0xe8,0xd, 0x4c,0x15,0x16,0x0, 0xe0,0xd, 0x34,0x28,0xe8,0xd,
+0x4c,0x16,0x3c,0x4d,0x3f,0xb8,0xe0,0xd, 0x37,0xc8,0x3f,0x7d,0x2, 0x85,0xc7,0x7f,
+0x3e,0xee,0xe0,0xc, 0x37,0xf, 0x3f,0xeb,0x17,0x0, 0x3f,0x9d,0xe0,0x2e,0x3f,0x7c,
+0xe2,0x0, 0xcf,0x0, 0x2, 0x8, 0x2f,0x52,0xe2,0x0, 0xcf,0x81,0x5, 0xcf,0xe2,0x12,
+0xcf,0xde,0x5, 0x83,0xe0,0x12,0x17,0xe0,0x3c,0x6f,0x38,0x82,0x17,0x0, 0x3f,0xe8,
+0x0, 0xf0,0x8, 0xb4,0xe8,0x55,0x4f,0x8e,0xe8,0x55,0x4f,0xf, 0x2f,0x9b,0xe8,0x55,
+0x6f,0x97,0x27,0x6, 0x17,0x1, 0xe8,0x55,0x6f,0x13,0xe8,0x55,0x6f,0x96,0xe0,0x51,
+0x14,0xae,0xe8,0xb, 0x4a,0x73,0xe0,0x52,0x14,0x3a,0x3d,0x64,0xe4,0x0, 0xc5,0xe,
+0xe0,0x51,0x11,0x2e,0xe0,0x3, 0xd0,0x63,0x11,0x80,0x3a,0x73,0xc1,0xe, 0x1, 0x89,
+0xa, 0x61,0x17,0x81,0xe8,0x55,0x6f,0x97,0x2f,0x6b,0xe8,0x55,0x6f,0x92,0x0, 0xe8,
+0xe0,0x40,0x94,0x72,0xc1,0x81,0xdf,0x23,0xe0,0x7, 0xb4,0x72,0xe2,0x1, 0xc1,0xff,
+0xe0,0x40,0x94,0x62,0xdf,0x6f,0xe0,0x8, 0xb4,0x2, 0x0, 0xe8,0xe0,0xf2,0x17,0xfa,
+0x17,0x0, 0xb7,0xf, 0xb7,0x1f,0xaf,0x4f,0xb7,0x3f,0x38,0x82,0xe8,0x79,0x57,0xc0,
+0x27,0x85,0xc7,0xff,0xe8,0x79,0x77,0xc0,0x38,0x82,0xe8,0xf2,0x4f,0x76,0xe8,0x79,
+0x77,0xbd,0xe8,0xf2,0x6f,0xfc,0x27,0x79,0xe8,0xf2,0x4f,0x77,0x27,0xd, 0xe8,0x12,
+0x57,0x34,0xe8,0xf2,0x6f,0xf7,0xe8,0xf3,0x6f,0x9d,0xe0,0x2, 0x96,0xae,0xe7,0x6,
+0xce,0x9f,0xe0,0x2, 0xb6,0xae,0x17,0x82,0xe8,0xf2,0x6f,0xf8,0x17,0x80,0xe8,0xf2,
+0x6f,0xf9,0x0, 0xe3,0xe8,0xf2,0x4f,0xf6,0x27,0x8d,0xe8,0xf2,0x4f,0xf7,0x2f,0x8a,
+0xe8,0xf2,0x4f,0xf9,0x2f,0x87,0x17,0x81,0xe8,0xf2,0x6f,0xf9,0x17,0x82,0xe8,0xf2,
+0x6f,0xf8,0x38,0x82,0xe8,0xf2,0x4f,0xf6,0x27,0x9d,0xe8,0xf2,0x4f,0xf7,0x2f,0x9a,
+0xe8,0xf2,0x4f,0x79,0xe2,0x0, 0xcf,0x1, 0x1, 0x95,0xe8,0xf2,0x4f,0xf8,0xc7,0xff,
+0xe2,0x1, 0xc7,0xff,0xe8,0xf2,0x6f,0xf8,0x2f,0x8d,0xe8,0xf2,0x6f,0x77,0xe8,0xf3,
+0x6f,0x1d,0xe8,0x12,0x57,0x34,0xe0,0x2, 0x96,0xae,0xe7,0x6, 0xce,0x9f,0xe0,0x2,
+0xb6,0xae,0x38,0x82,0x8, 0xb7,0xc0,0x52,0xdf,0xde,0xe8,0x50,0x48,0xf8,0x70,0x8b,
+0x28,0x85,0xc0,0x2e,0xb, 0xa1,0xe7,0xff,0x0, 0xa3,0xe8,0xf3,0x4f,0xd2,0xe0,0x3,
+0x2f,0x8f,0xe8,0xf3,0x4f,0x44,0xe2,0x0, 0xcf,0x1, 0xe0,0x3, 0x1, 0x9, 0xe8,0xf2,
+0x4a,0xf6,0xe8,0x28,0x57,0x3f,0xe2,0x0, 0xca,0x80,0x37,0x1, 0xe8,0xd, 0x4e,0xb9,
+0xe8,0xf2,0x4d,0xfc,0x77,0x10,0x17,0x32,0xe0,0x6e,0x39,0x2d,0xe8,0x55,0x4e,0x25,
+0xe2,0x0, 0xcd,0x80,0xe0,0xd, 0x37,0x41,0xe8,0x55,0x49,0x24,0xe0,0x6d,0x39,0x2e,
+0x3f,0x6c,0xe8,0x72,0x51,0xac,0xe8,0x25,0x4c,0x53,0xe8,0x25,0x4c,0xd2,0xe5,0xff,
+0xc7,0x7e,0xe0,0x4c,0x15,0x58,0xe0,0x1, 0x36,0x21,0x71,0x7, 0xc1,0x7e,0x71,0x85,
+0x75,0x8, 0x77,0x8a,0x72,0x8c,0x74,0xd, 0x70,0x8e,0x74,0x91,0x77,0xf, 0x76,0x92,
+0x71,0x17,0x51,0x8, 0x52,0x85,0x89,0x92,0x8e,0x82,0x3f,0xe3,0xe0,0xaf,0x3e,0x8c,
+0x54,0x10,0x37,0xa1,0x3f,0x95,0x93,0x8f,0x71,0x83,0x3c,0x77,0xe0,0x2, 0x2, 0x4a,
+0x54,0x87,0xe1,0x2f,0x3e,0xa9,0xe0,0x2, 0x2f,0xc5,0xe1,0x2f,0x39,0xac,0xe0,0x2,
+0x2f,0xc1,0x55,0xc, 0x25,0x31,0xe2,0x0, 0xce,0x81,0xe0,0x2, 0x5, 0xbb,0x57,0x17,
+0x3e,0xfe,0xe0,0x2, 0x3, 0x37,0xe0,0x2, 0x17,0xac,0x77,0x86,0xe0,0x43,0x3d,0xd,
+0x3f,0xed,0xe0,0x2, 0x3e,0x3a,0xc7,0x81,0x50,0x83,0xe2,0x1, 0xc7,0xff,0xe0,0x43,
+0x3c,0x81,0x77,0x84,0x3f,0xe2,0x51,0x85,0x3f,0x99,0x37,0xa1,0x39,0x9f,0x71,0x95,
+0x11,0x80,0x3f,0x6d,0x3b,0x6a,0x71,0x9, 0x3f,0xed,0x75,0x13,0x3d,0xe3,0x74,0x94,
+0xe2,0x0, 0xcc,0x80,0x4, 0x3e,0x52,0x95,0xe0,0x2, 0x31,0xa1,0x3a,0xa2,0x3c,0x6a,
+0x10,0x80,0x72,0x81,0x0, 0xa5,0xe0,0xf, 0x33,0x82,0xe0,0xe, 0x33,0x81,0xe0,0xe,
+0x3f,0x9e,0x77,0x6, 0x0, 0xd4,0x52,0x81,0x51,0x6, 0x92,0x85,0xe0,0x22,0x3a,0xa2,
+0x72,0x82,0x21,0x21,0xe0,0x25,0x3b,0xa5,0x22,0x9e,0x3c,0x7e,0xc0,0x81,0x3a,0xe8,
+0xc5,0x81,0xe2,0x1, 0xc0,0xff,0xe2,0x1, 0xc2,0xff,0x3, 0x2, 0x3f,0x65,0x3c,0x7f,
+0x2, 0x16,0x52,0x81,0x51,0xf, 0xc4,0x7f,0x3a,0x92,0x3b,0x64,0x72,0x81,0xe0,0x43,
+0x3a,0x8, 0xe2,0x0, 0xca,0x0, 0x3, 0x60,0xc1,0x81,0x20,0x8b,0xc4,0xff,0xe0,0x43,
+0x3c,0x89,0x0, 0xc7,0x3a,0x76,0x5, 0x79,0x3a,0x66,0x0, 0xec,0x3f,0xe5,0x0, 0xea,
+0x54,0xd, 0x3e,0xf8,0x3, 0xbc,0x54,0x84,0x54,0x14,0x50,0x85,0xe0,0xa8,0x3c,0x8c,
+0x11,0x80,0x34,0x21,0x38,0x98,0x3a,0xe9,0x70,0x94,0x54,0x83,0x3c,0xa3,0xe0,0x43,
+0x3c,0x89,0xe2,0x0, 0xcc,0x80,0x4, 0x2b,0x54,0x94,0xe0,0x2, 0x31,0xa1,0xe0,0x2,
+0x3c,0xa2,0x10,0x80,0x54,0x84,0x0, 0x9b,0x54,0x6, 0x92,0x2, 0xe0,0x26,0x3a,0x28,
+0x23,0x1a,0xe0,0x24,0x3b,0xa4,0x22,0x17,0xc0,0x81,0xe1,0x2e,0x3c,0xde,0xe1,0x2f,
+0x3c,0xef,0xc5,0x81,0xe2,0x1, 0xc0,0xff,0xe2,0x1, 0xc7,0x7f,0xe2,0x1, 0xc7,0xff,
+0x3a,0xe9,0x54,0xe, 0xc4,0x81,0xe2,0x1, 0xc4,0xff,0x39,0x18,0x54,0x7, 0x3c,0x79,
+0x2, 0xe4,0x0, 0x83,0x3c,0xf5,0x4, 0xf6,0xc1,0x81,0x28,0xd0,0x50,0x83,0x51,0x11,
+0x38,0xf2,0xe0,0x0, 0x3, 0xf7,0x3c,0x61,0xc4,0x1, 0x51,0x89,0xe2,0x1, 0xc4,0x7f,
+0x39,0x98,0x12,0x0, 0x71,0x94,0xe0,0x9, 0x3c,0x14,0xe2,0x1, 0xc4,0xff,0x3e,0x79,
+0x5, 0xa8,0x54,0x94,0x50,0x85,0x3c,0x94,0x34,0xa1,0x3c,0x91,0x11,0x0, 0x50,0x93,
+0x0, 0x99,0x51,0x86,0x93,0x9, 0xe0,0x23,0x3b,0x23,0x21,0xb3,0xe0,0x26,0x3b,0xa6,
+0x23,0x30,0x38,0xfe,0xc1,0x1, 0x3d,0x61,0xc5,0x81,0xe2,0x1, 0xc1,0x7f,0xe2,0x1,
+0xc5,0x7f,0x3, 0x2, 0x3f,0x6a,0x38,0xff,0x2, 0x28,0x55,0xf, 0xc0,0xff,0x3c,0x9a,
+0x3d,0x65,0xe0,0x43,0x3a,0x81,0xe2,0x0, 0xca,0x80,0x3, 0x64,0xc2,0x1, 0x29,0x54,
+0x51,0xd, 0x3e,0xf2,0x3, 0xbe,0x52,0x84,0x39,0xe8,0xe0,0xa3,0x3a,0x8c,0x11,0x0,
+0x3a,0x65,0x71,0x89,0xe0,0xa, 0x3c,0x12,0xe2,0x1, 0xc5,0x7f,0x3e,0x7a,0x5, 0xb1,
+0x54,0x89,0x55,0x5, 0x3c,0x92,0x34,0xa1,0x3c,0x9a,0x10,0x80,0x55,0x4, 0x0, 0xa1,
+0x3a,0xfa,0x5, 0x65,0x3a,0xea,0x0, 0xda,0x3f,0xea,0x0, 0xd8,0x52,0x86,0x91,0x89,
+0xe0,0x26,0x39,0xa5,0x23,0x1a,0xe0,0x23,0x3b,0xa3,0x21,0x97,0xc0,0x81,0xe1,0x2e,
+0x3d,0x5e,0xe1,0x2f,0x3d,0x6f,0xc5,0x81,0xe2,0x1, 0xc0,0xff,0xe2,0x1, 0xc7,0x7f,
+0xe2,0x1, 0xc7,0xff,0x3a,0x6a,0x51,0x8e,0xc5,0x1, 0xe2,0x1, 0xc5,0x7f,0x3c,0x93,
+0x52,0x87,0x3a,0xfa,0x2, 0xe4,0x0, 0x83,0x3d,0x74,0x4, 0xf6,0xc1,0x1, 0x28,0xcb,
+0x50,0x92,0x3d,0xf1,0x4, 0x9e,0x3f,0xae,0xe2,0x0, 0xcf,0x83,0x5, 0x1a,0xe8,0xd,
+0x4f,0xbe,0x51,0x3, 0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xbf,0xe8,0xf2,0x6e,0xfd,
+0x3f,0xce,0xe8,0x79,0x77,0xc0,0x17,0x81,0xe8,0xf2,0x6f,0xfc,0xe8,0xf2,0x6f,0xfa,
+0xe8,0xf2,0x69,0x7e,0xde,0x38,0xe8,0xf2,0x4f,0xfc,0x2f,0x9b,0xc0,0x2e,0xb, 0xe1,
+0x57,0x8a,0x51,0x88,0x52,0x8b,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xc1,0x82,0x3a,0xff,
+0x71,0x88,0x77,0x8a,0xe7,0xfd,0x1, 0x9f,0x0, 0xef,0x3c,0x62,0x3c,0xe3,0xc1,0x1,
+0xd1,0xfa,0xe2,0x1, 0xc1,0x7f,0xe8,0x50,0x4f,0xf8,0x3f,0xf2,0x2, 0xf7,0x0, 0xe7,
+0x11,0x0, 0x39,0xe2,0x0, 0xf9,0xe8,0x27,0x4f,0x9c,0x27,0x9d,0x17,0x80,0xe8,0x27,
+0x6f,0x9c,0xe8,0xf3,0x4f,0x82,0x37,0xa5,0xe8,0x28,0x77,0xc9,0xe8,0xf3,0x4f,0x83,
+0x37,0xa5,0xe8,0x28,0x77,0xca,0xe8,0xf3,0x4f,0x84,0x37,0xa5,0xe8,0x28,0x77,0xcc,
+0xe8,0xf3,0x4f,0x85,0x37,0xa5,0xe8,0x28,0x77,0xcd,0xe8,0xf3,0x4f,0x87,0x37,0xa5,
+0xe8,0x28,0x77,0xd1,0x38,0x82,0x3f,0xe8,0xc7,0xdd,0x3f,0x6f,0xe2,0x1, 0xc7,0x7f,
+0xe2,0x0, 0xcf,0xc, 0x2, 0x86,0x17,0x81,0x37,0xbe,0xe2,0x30,0xc7,0xa9,0x2f,0x89,
+0x17,0x81,0xe2,0x0, 0xcc,0x25,0xe8,0x27,0x6f,0x9c,0x1, 0x83,0xe8,0x27,0x6f,0x9b,
+0x38,0x82,0x8, 0xb4,0xe8,0x55,0x4f,0x25,0xe8,0x72,0x56,0xac,0x3f,0x38,0xe0,0x43,
+0x3a,0x9, 0xe0,0xf, 0x3c,0x9e,0x37,0xa1,0x3f,0x9d,0x97,0x8f,0xe0,0x2, 0x3a,0x1e,
+0xe0,0x0, 0x16,0x50,0x31,0x21,0xe0,0x8, 0x37,0x82,0x39,0x1d,0x38,0xe9,0xe0,0x2c,
+0x3c,0x6c,0x39,0xe4,0xe2,0x1, 0xc1,0xff,0xe2,0x0, 0xca,0x0, 0xe0,0x8, 0x3c,0xa3,
+0xe2,0x1, 0xc4,0x7f,0x3, 0x23,0xc4,0x81,0xe0,0x43,0x3c,0x89,0x3f,0x19,0x37,0x21,
+0xe8,0x55,0x41,0x27,0x3f,0x1d,0x39,0x79,0x2, 0x25,0xe2,0x0, 0xcf,0xf7,0xe0,0x1,
+0x17,0x7f,0xe0,0x6e,0x3a,0x28,0x3c,0x6e,0x97,0xa, 0xe0,0xd, 0x37,0x1, 0xe0,0xc,
+0x3f,0x1d,0x3e,0x7f,0x4, 0x28,0x3f,0x2d,0x3f,0x7f,0xe0,0x1, 0x17,0x7e,0xe0,0x6e,
+0x3d,0x28,0x3c,0x6e,0xa8,0x8b,0xb7,0x8a,0xa, 0x61,0xe1,0xc0,0x92,0x12,0x3e,0x74,
+0x3, 0x5b,0x3f,0xf4,0x3, 0x3, 0x38,0xe3,0x3f,0xe4,0xc1,0xff,0xe0,0x43,0x3a,0x3,
+0x0, 0xc9,0xe1,0x80,0x96,0x9e,0x3e,0x7d,0x3, 0x59,0x3f,0xfd,0xc4,0x1, 0xe2,0x1,
+0xc4,0x7f,0xe2,0x1, 0xc4,0xff,0x3, 0x3, 0x38,0xe9,0x3f,0xed,0xc4,0x81,0xe0,0x43,
+0x3c,0x89,0x0, 0xca,0xe0,0x1, 0x14,0x7e,0x0, 0xde,0x8, 0xb6,0xe8,0x55,0x49,0xa5,
+0x3f,0x69,0xe0,0xae,0x3c,0x3, 0xe8,0x72,0x56,0xac,0x37,0x21,0x3f,0x1d,0x97,0xe,
+0xe0,0x0, 0x16,0x50,0xe0,0x2, 0x37,0x2, 0xe0,0x43,0x3a,0x88,0xe0,0x22,0x39,0x6c,
+0x3e,0x69,0xe0,0xac,0x3a,0x83,0x3b,0x63,0x36,0x21,0xe5,0xff,0xc3,0x7e,0x3f,0xe8,
+0x38,0xe8,0x3e,0x1d,0x3a,0x65,0xe2,0x1, 0xc2,0x7f,0xe2,0x0, 0xca,0x80,0xe0,0x8,
+0x3f,0xa4,0xe2,0x1, 0xc4,0x7f,0x3, 0x26,0xc7,0x81,0xe0,0x43,0x3f,0x8f,0xe0,0xa9,
+0x3f,0x83,0xe8,0x55,0x46,0x26,0x34,0xa1,0xe0,0x4, 0x31,0xa1,0x3c,0x9d,0x3e,0x7f,
+0x2, 0x25,0xe2,0x0, 0xcf,0x77,0xe0,0x1, 0x17,0xff,0xe0,0x6f,0x3a,0x28,0x3c,0x6f,
+0x97,0x8a,0xe0,0xd, 0x37,0x81,0xe0,0xc, 0x3f,0x9d,0x3e,0x7e,0x4, 0x28,0x3f,0xad,
+0x3f,0xfe,0xe0,0x1, 0x17,0xfe,0xe0,0x6f,0x3d,0x28,0x3c,0x6f,0xa8,0x8b,0xb7,0xa,
+0xb, 0x61,0x92,0x8c,0x39,0x75,0x3, 0x59,0x3f,0x75,0x3, 0x3, 0x38,0xe4,0x3f,0x65,
+0xc2,0x7f,0x3e,0x16,0xe0,0x43,0x3a,0x84,0x0, 0xc6,0x96,0x89,0x39,0x7d,0x3, 0x5a,
+0x3f,0x7d,0xc4,0x1, 0xe2,0x1, 0xc4,0x7f,0xe2,0x1, 0xc7,0xff,0x3, 0x3, 0x38,0xef,
+0x3f,0x6d,0xc7,0x81,0x3c,0x94,0xe0,0x43,0x3f,0x8f,0x0, 0xca,0xe0,0x1, 0x14,0x7e,
+0x0, 0xde,0x8, 0xb7,0xc0,0x7c,0xe8,0x55,0x4f,0xa5,0x3f,0x69,0xe0,0xae,0x3f,0x88,
+0xe8,0x72,0x57,0xac,0x37,0x21,0x3f,0x9e,0x92,0xf, 0x3d,0xe0,0x3d,0x60,0xc5,0x83,
+0xc5,0x4, 0x39,0xe8,0x3b,0x69,0x72,0x2, 0xdf,0x1d,0x3d,0xe0,0xc5,0x84,0x3d,0x60,
+0x3a,0xe8,0xe1,0xc0,0xb2,0x1b,0xc5,0x4, 0x3c,0xe6,0x3c,0x63,0xdf,0x77,0x17,0x83,
+0xe1,0x2e,0x3c,0x1f,0x27,0x7, 0xe1,0x2f,0x3a,0x9f,0x27,0x84,0x14,0x0, 0xc0,0x4,
+0xb, 0xe1,0x3a,0xf8,0x3, 0xbc,0xe0,0x43,0x39,0x83,0x3f,0xe3,0x6b,0x3, 0x72,0x2,
+0xe2,0x0, 0xcf,0x80,0x3a,0xef,0xe2,0x1, 0xc2,0xff,0x4, 0xb, 0x3d,0xe0,0x3d,0x60,
+0x4c,0x83,0xc5,0x83,0xc5,0x4, 0x3c,0x65,0xde,0xf5,0xe2,0x0, 0xcc,0x3, 0x5, 0x9f,
+0x6b,0x3, 0x72,0x2, 0x3a,0x63,0xe8,0x55,0x47,0xa6,0xe2,0x1, 0xc2,0x7f,0x3f,0xf3,
+0xe0,0x2, 0x3a,0x25,0xe2,0x1, 0xc1,0x7f,0x5, 0xb, 0x3d,0xe0,0x3d,0x60,0x4c,0x83,
+0xc5,0x83,0xc5,0x4, 0x3c,0x64,0xde,0xde,0xe2,0x0, 0xcc,0x3, 0x5, 0x8c,0x3a,0xf4,
+0x1, 0x4e,0x3c,0x62,0xc4,0x7f,0xe2,0x1, 0xc4,0x7f,0x0, 0xca,0xc2,0xff,0xe0,0x43,
+0x3f,0x85,0x0, 0xcf,0xc2,0x1, 0xe0,0x43,0x39,0x84,0x0, 0xdd,0x3b,0xe0,0xc3,0x84,
+0xe0,0x43,0x3b,0x6, 0xe1,0xc0,0xb2,0x17,0x3c,0xe6,0x69,0x82,0xe2,0x0, 0xcc,0x80,
+0x3a,0xe9,0xe2,0x1, 0xc2,0xff,0x4, 0xa, 0x3d,0x60,0x4c,0x2, 0x3d,0xe7,0xc5,0x4,
+0x3c,0xe5,0xdf,0x1c,0xe2,0x0, 0xcc,0x3, 0x5, 0x9c,0x3b,0xe0,0xc3,0x84,0xe1,0xc0,
+0xb2,0x17,0x69,0x82,0x39,0xe6,0xe8,0x55,0x47,0xa7,0xe2,0x1, 0xc1,0xff,0x3f,0xf6,
+0xe0,0x2, 0x39,0xa5,0xe2,0x1, 0xc1,0x7f,0x5, 0xa, 0x3d,0x60,0x4c,0x2, 0x3d,0xe7,
+0xc5,0x4, 0x3c,0xe3,0xdf,0x3, 0xe2,0x0, 0xcc,0x3, 0x5, 0x88,0x39,0xf5,0x0, 0xc1,
+0x3c,0xe5,0xc4,0xff,0xe0,0x43,0x3c,0x89,0x0, 0xd2,0xc1,0x81,0xe0,0x43,0x3b,0x3,
+0x0, 0xe2,0x8, 0xb4,0xe8,0x50,0x4f,0xf8,0xe2,0x0, 0xcf,0x81,0x5, 0x93,0xe2,0x0,
+0xcf,0x82,0x1, 0x12,0xe2,0x0, 0xcf,0x83,0x11,0x8a,0x17,0x88,0xe0,0x63,0x39,0x2f,
+0x11,0x0, 0xe0,0x4c,0x12,0x58,0xe8,0x50,0x4f,0xf8,0x3f,0xf2,0x2, 0x87,0x14,0x0,
+0xa, 0x61,0x11,0x86,0x0, 0xf6,0x11,0x87,0x0, 0xf4,0xe0,0xf, 0x31,0x21,0x3f,0x94,
+0x8c,0xf, 0xe2,0x0, 0xcc,0x1, 0x2, 0x85,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0x0, 0xec,
+0xe8,0x55,0x4f,0x26,0xc7,0x7e,0x3f,0x78,0x5, 0x78,0x8c,0x9f,0xe2,0x0, 0xcc,0x81,
+0x5, 0xf4,0xe8,0x55,0x4f,0xa7,0xc7,0xfe,0x3f,0xf9,0x5, 0x6f,0xdf,0x2b,0x39,0xf8,
+0x3, 0xec,0x14,0x1, 0x0, 0xde,0xe0,0xf, 0x34,0x43,0xe0,0x4c,0x17,0x58,0x3f,0x1f,
+0xe6,0xad,0xcc,0x58,0xe0,0x24,0x17,0xb2,0x3c,0x1f,0xe0,0xf, 0x8f,0xe, 0x8c,0x8,
+0x3c,0x5e,0x38,0x82,0xe6,0xad,0xcf,0x58,0xe0,0x24,0x17,0xb2,0x3f,0x9e,0xe0,0xe,
+0x34,0x43,0xe0,0x4c,0x14,0x58,0x3c,0x1e,0x8f,0x8f,0xe0,0xf, 0x8f,0x8, 0x24,0x85,
+0x3f,0xce,0xe0,0xf, 0xaf,0x88,0x38,0x82,0xe3,0xf, 0x3f,0x5f,0x0, 0xfb,0xe0,0x4c,
+0x17,0xd8,0x34,0x21,0x3c,0x1f,0x8e,0x88,0xe8,0x55,0x4f,0x25,0x8f,0x98,0xe0,0xaf,
+0x3e,0x8e,0xe8,0x72,0x57,0x2c,0x37,0xa1,0x3f,0x9e,0x94,0xf, 0x38,0x82,0x34,0x21,
+0xe0,0x4c,0x17,0xd8,0x3f,0x98,0xe8,0x51,0x4e,0x80,0x8f,0xf, 0x3e,0xfe,0x1, 0x87,
+0xe8,0x51,0x4c,0x1, 0x8f,0x9f,0xe0,0x28,0x3c,0xf, 0x38,0x82,0x14,0x0, 0x0, 0xfe,
+0xe8,0x55,0x4f,0x26,0xe8,0x28,0x57,0xc9,0x3f,0x78,0x2, 0x83,0xe8,0x28,0x57,0xcc,
+0x3c,0x6f,0x38,0x82,0x8, 0xb5,0x11,0x0, 0x39,0xe2,0xe0,0x4c,0x12,0x58,0x12,0x81,
+0xe8,0x50,0x4f,0xf8,0x3f,0xf3,0x2, 0x84,0xe8,0x50,0x69,0x78,0xa, 0xe1,0x3c,0x63,
+0xdf,0xa3,0x24,0x11,0xe0,0xe, 0x31,0xa1,0x3f,0x14,0x8e,0x8e,0xe0,0xf, 0x31,0x21,
+0x3f,0x94,0xae,0x8f,0x3c,0x62,0x8f,0x1e,0xc1,0x1, 0x3c,0xe5,0xe2,0x1, 0xc1,0x7f,
+0xaf,0x1f,0xdf,0xa1,0xc1,0x81,0xe2,0x1, 0xc1,0xff,0x0, 0xe3,0x8, 0xb4,0xe8,0x27,
+0x4f,0xda,0x27,0x84,0xc7,0xff,0xe8,0x27,0x6f,0xda,0xe8,0x28,0x57,0xbf,0xe2,0x6,
+0xcf,0xa0,0x5, 0x8, 0x17,0x80,0xe8,0x27,0x6f,0xda,0xe8,0x27,0x4f,0xda,0x2f,0x97,
+0xa, 0x61,0xdf,0x40,0xe2,0x0, 0xcc,0x1, 0x1, 0xf9,0x17,0xa8,0x0, 0xf5,0x3c,0x62,
+0x3c,0xe3,0xdf,0x81,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0x3f,0xe4,0xe8,0x50,0x4f,0x78,
+0x3f,0x72,0x2, 0xf6,0x27,0xee,0xa, 0x21,0xe7,0xff,0x0, 0xb6,0x11,0x0, 0x3f,0xe2,
+0x39,0xe2,0x12,0x1, 0x0, 0xf4,0x8, 0xb7,0xe1,0xfe,0xc0,0x76,0xe8,0x50,0x4a,0x78,
+0x39,0xe0,0xc1,0x94,0xe0,0xa, 0x32,0x21,0xe0,0x4c,0x14,0xd8,0x3c,0x63,0xe0,0x2,
+0xdb,0xa6,0xe8,0x72,0x57,0xac,0xe0,0x27,0x13,0x9e,0x77,0x86,0x11,0x0, 0xe8,0x27,
+0x4f,0x9d,0xe8,0x55,0x4b,0x25,0x37,0xa1,0x3f,0x97,0x3a,0xe2,0x77,0x89,0x57,0x89,
+0x3f,0xf7,0xe0,0x0, 0x1, 0xfc,0xe8,0xb, 0x49,0xf3,0xe0,0x1, 0x15,0x7f,0x14,0xff,
+0x39,0xf5,0xe0,0x1, 0x2, 0xc0,0xe8,0xb, 0x4d,0x74,0x3c,0xe0,0x3c,0x60,0x35,0x21,
+0xe0,0x0, 0xc4,0xd0,0xc4,0x14,0xe0,0x2, 0xdb,0x82,0xe0,0xa, 0x31,0xa1,0xe0,0x1,
+0x14,0xff,0xe0,0x27,0x14,0x1e,0xe0,0x2, 0xdb,0xc6,0xe0,0x1, 0x29,0x30,0x39,0xf2,
+0xe8,0x27,0x69,0x1d,0xe0,0x1, 0x4, 0xc7,0xe8,0x50,0x69,0x78,0xe0,0x1, 0xc0,0xa,
+0xb, 0xe1,0x3c,0x6a,0x75,0x81,0x77,0x2, 0x75,0x3, 0x74,0x84,0xdf,0x15,0x55,0x81,
+0x57,0x2, 0x55,0x3, 0x54,0x84,0x24,0x17,0xe0,0x1, 0x35,0xa1,0x38,0x93,0x8c,0x1,
+0xe2,0x1, 0xcc,0x7f,0x1, 0x10,0x88,0x91,0x8e,0x97,0x3e,0xa1,0x88,0x87,0xe0,0x41,
+0x3e,0xad,0xe0,0x8, 0x38,0xa8,0xe0,0x41,0x3c,0x28,0x3c,0x1d,0x3c,0xf8,0x5, 0x83,
+0x3c,0xe8,0x3f,0x6a,0xc5,0x81,0x3d,0x6b,0xe2,0x1, 0xc5,0x7f,0x3d,0x74,0x4, 0xda,
+0xe2,0x1, 0xcf,0x7f,0x1, 0x28,0x37,0x21,0x3f,0x13,0x8d,0x8e,0x8d,0x1e,0x3c,0x6b,
+0x75,0x81,0x77,0x2, 0x75,0x3, 0xdf,0x2d,0x55,0x3, 0x55,0x81,0x3e,0xea,0xe0,0xad,
+0x3d,0x86,0x57,0x86,0x36,0xa1,0x3e,0x9f,0x96,0x8d,0x57,0x2, 0x3e,0xf8,0x4, 0x13,
+0x3f,0xe0,0xe0,0xd, 0x31,0x21,0xe0,0x0, 0xc7,0xd0,0x3e,0x9f,0x17,0xff,0xaf,0x8e,
+0x3f,0xe5,0xc7,0x81,0xc1,0x1, 0x3a,0xef,0xe2,0x1, 0xc1,0x7f,0xad,0x8d,0xe2,0x1,
+0xc2,0xff,0xad,0x1d,0xc3,0x82,0xe7,0xff,0x0, 0x84,0x15,0x80,0xe0,0x7, 0x14,0xff,
+0xe0,0x1, 0x17,0x7f,0x0, 0xc9,0x3c,0x6c,0x75,0x81,0x77,0x2, 0x75,0x3, 0x74,0x84,
+0x76,0x5, 0xde,0xba,0x55,0x81,0x57,0x2, 0x55,0x3, 0x54,0x84,0x56,0x5, 0x24,0x18,
+0x3f,0xe0,0xe0,0xd, 0x37,0x21,0xc7,0x94,0x3e,0x9f,0x8c,0xd, 0xe2,0x1, 0xcc,0x7f,
+0x1, 0xf, 0x88,0x9d,0x57,0x86,0x3e,0xe1,0xe0,0xad,0x3c,0x6, 0x36,0xa1,0x3e,0x9f,
+0x96,0x8d,0x3d,0xfd,0x3, 0x5, 0x3b,0xec,0x3d,0xed,0x74,0x7, 0x70,0x88,0xc7,0x1,
+0x3e,0x6e,0xe2,0x1, 0xc6,0x7f,0x3e,0x74,0x4, 0xd7,0xe2,0x1, 0xcb,0xff,0x1, 0x13,
+0x3f,0xe0,0xe0,0xe, 0x31,0x21,0xe0,0x0, 0xc7,0xd0,0x3f,0x1f,0x57,0x87,0x33,0xa1,
+0xaf,0x8e,0xc1,0x1, 0x57,0x88,0xe2,0x1, 0xc1,0x7f,0xaf,0x9e,0x3f,0xe0,0xc7,0x94,
+0x3b,0x9f,0xac,0x87,0x3f,0xe5,0xc7,0x81,0x3a,0xef,0xe2,0x1, 0xc2,0xff,0xe7,0xfe,
+0x0, 0xc1,0x17,0x0, 0x3b,0xea,0x3d,0xee,0x0, 0xdc,0xe0,0x4, 0x31,0x21,0x3c,0xe0,
+0x3d,0x64,0xc4,0x94,0xe0,0x4c,0x14,0x58,0xe0,0x2, 0xda,0xc1,0x3c,0xe0,0x3d,0x64,
+0xc4,0x94,0xe0,0x27,0x14,0x1e,0xe0,0x2, 0xda,0xba,0x12,0x0, 0x12,0x81,0x3c,0x64,
+0x3c,0xe5,0xc2,0x1, 0xde,0x70,0xe2,0x1, 0xc2,0x7f,0x39,0x74,0x1, 0xf9,0xe7,0xfe,
+0x0, 0xb8,0xe8,0x50,0x69,0xf8,0xe7,0xfe,0x0, 0xbb,0xe8,0xf3,0x4f,0xd2,0x27,0xb1,
+0x8, 0xb6,0xe8,0x55,0x49,0xa6,0xe8,0x55,0x4a,0x27,0xc1,0xfd,0xc2,0x7d,0x17,0x0,
+0xe2,0x1, 0xc1,0xff,0xe2,0x1, 0xc2,0x7f,0x39,0x6e,0xe0,0x4c,0x12,0xd8,0x13,0x1,
+0xe8,0x50,0x4f,0xf8,0x3f,0xf2,0x2, 0x85,0x27,0x1b,0xb, 0x21,0xe7,0xfd,0x0, 0x8c,
+0xe0,0xf, 0x31,0x21,0x3f,0x95,0x8e,0x8f,0xe2,0x0, 0xce,0x81,0x5, 0x89,0x39,0xfd,
+0x4, 0x87,0x8f,0x9f,0xe2,0x0, 0xcf,0x81,0x5, 0x83,0x3a,0x7f,0x3, 0x85,0x14,0x80,
+0x3c,0x62,0xde,0x39,0x3f,0x66,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0x0, 0xe2,0xb, 0x61,
+0x38,0x82,0x8, 0xb7,0xe8,0x50,0x4a,0xf8,0xe2,0x0, 0xca,0x83,0xe0,0x0, 0x5, 0xfb,
+0x15,0x80,0xe8,0x0, 0x4b,0x7a,0xe0,0x4c,0x11,0xd8,0x39,0x6b,0xe7,0xff,0x12,0x1c,
+0x8f,0x93,0x3f,0x6f,0xc7,0x7e,0xe2,0x0, 0xcf,0x1f,0xe0,0x0, 0x5, 0xd8,0x8f,0x3,
+0xe8,0x55,0x4d,0x25,0xe8,0x72,0x56,0xac,0xe0,0x9, 0x3f,0x3a,0xe0,0xc, 0x3c,0x9f,
+0x36,0x21,0x3e,0x1d,0x96,0xc, 0xe2,0x2, 0xce,0x22,0xe0,0x0, 0x2, 0x48,0xe0,0x0,
+0x27,0x51,0x3e,0x6e,0xc6,0x7f,0xe2,0x1, 0xc6,0x7f,0x3c,0x6f,0xe0,0xa8,0x3e,0xa,
+0x3e,0x68,0x36,0x21,0x3e,0x1d,0x96,0xc, 0x3c,0x66,0xc4,0x7f,0x3f,0x78,0xe0,0x0,
+0x3, 0x44,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x3c,0x6f,0xe0,0xa8,0x3f,0xa, 0x3f,0x68,
+0x37,0x21,0x3f,0x1d,0x97,0xe, 0x27,0xba,0x3d,0x6f,0xc5,0x7f,0xe2,0x1, 0xc5,0x7f,
+0x3d,0x19,0x35,0x21,0x3d,0x1d,0x95,0xa, 0xe8,0x0, 0x4c,0x7b,0xc4,0x7f,0x3f,0xf8,
+0x3, 0x2f,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3f,0x99,0x37,0xa1,0x3f,0x9d,0x97,0x8f,
+0xe8,0x27,0x4b,0x95,0xe2,0x0, 0xcb,0x81,0x1, 0x91,0xe0,0x2a,0x3a,0x1a,0x2d,0xa,
+0xe0,0x2e,0x3a,0x1e,0x2f,0x7, 0xe0,0x2c,0x3a,0x1c,0x2e,0x4, 0xe0,0x2f,0x3a,0x1f,
+0x27,0x85,0x14,0x80,0x3c,0x62,0xdd,0xc7,0x3d,0xe7,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,
+0x3a,0xf2,0xc1,0x82,0xe7,0xff,0x1, 0x9e,0x25,0x8d,0xb, 0xa1,0xe7,0xfb,0x0, 0xfc,
+0x3e,0x6e,0xe7,0xff,0x0, 0xbb,0x17,0x0, 0x0, 0xc7,0x3d,0x6f,0x0, 0xce,0x17,0x80,
+0x0, 0xd8,0xb, 0xe1,0x8, 0xb1,0xef,0xff,0xd5,0x18,0xdf,0x48,0xef,0xff,0xd7,0x46,
+0xda,0x2, 0xdd,0xe9,0xd3,0xc2,0xdd,0xe7,0xdd,0xe6,0xdd,0xe5,0xde,0x8, 0xdf,0x72,
+0x8, 0xa1,0xe7,0xfc,0x0, 0xb2,0xe8,0x33,0x57,0x8c,0xe2,0x2, 0xcf,0xac,0x5, 0x89,
+0xe8,0xf3,0x4f,0xa7,0x2f,0x86,0xe0,0x2, 0x17,0xe8,0xe8,0x13,0x77,0xee,0x38,0x82,
+0xe8,0x13,0x57,0xee,0x27,0xfd,0xc7,0xff,0x0, 0xf9,0x8, 0xb7,0xc0,0x6c,0x3d,0x78,
+0x76,0x4, 0x39,0xe8,0x39,0x69,0x3b,0xea,0x3a,0x6b,0x2, 0x98,0xe1,0x25,0x3c,0x1a,
+0xe0,0x41,0x3a,0xc5,0x3a,0x72,0x2, 0x94,0xe1,0x26,0x39,0x14,0xe0,0x41,0x3b,0x46,
+0xe0,0xff,0x16,0x7f,0xe7,0xb1,0x15,0xf0,0xe1,0x2f,0x39,0x87,0x2f,0x8b,0xe1,0x2f,
+0x39,0x4, 0x2f,0x88,0x3c,0x6c,0xc0,0x14,0xb, 0xe1,0x12,0x81,0x0, 0xec,0x13,0x1,
+0x0, 0xf0,0x3c,0x60,0x15,0xc, 0xe0,0x1, 0x14,0xff,0xc4,0xa, 0x75,0x81,0x76,0x82,
+0x76,0x3, 0xe0,0x2, 0xd9,0xf0,0x39,0xf7,0x69,0xb, 0x69,0x8e,0x55,0x81,0x56,0x82,
+0x56,0x3, 0x1, 0xb7,0x39,0x16,0xe2,0x1, 0xc1,0x7f,0x69,0xf, 0x69,0x13,0x3c,0x60,
+0xe8,0x72,0x51,0x2c,0xe8,0x55,0x49,0xa5,0xc4,0xa, 0xe0,0x1, 0x17,0x7f,0x3c,0xeb,
+0x15,0x0, 0x88,0x88,0xe2,0x1, 0xc8,0xff,0x1, 0xe, 0x8f,0x98,0xe2,0x1, 0xcf,0xff,
+0x1, 0xa, 0xe0,0xaf,0x38,0x83,0x37,0xa1,0x3f,0x92,0x97,0x8f,0x3f,0xf9,0x5, 0x3,
+0x3f,0x6a,0x3c,0xef,0xc5,0x1, 0xe2,0x1, 0xc5,0x7f,0xe2,0x0, 0xcd,0x3, 0xc4,0x4,
+0x1, 0xe9,0x3f,0xe0,0x37,0x22,0xc7,0x8a,0x3e,0x79,0x3f,0x1f,0x89,0x8e,0x89,0x1e,
+0xe7,0xff,0x5, 0x34,0x57,0x84,0x3e,0x69,0xa9,0x8f,0xa9,0xd, 0xe7,0xff,0x0, 0xae,
+0x39,0x95,0xe2,0x1, 0xc1,0xff,0x39,0x74,0x69,0x8a,0x69,0x92,0x1, 0x49,0x0, 0xc3,
+0x8, 0xb7,0xc0,0x70,0xe8,0x55,0x43,0xa6,0xe8,0x55,0x45,0xa7,0xe8,0x50,0x4f,0xf8,
+0x73,0x84,0xe0,0xf3,0x11,0x74,0x75,0x85,0xe0,0x4c,0x14,0x58,0xe8,0x72,0x53,0xac,
+0xe8,0x55,0x4d,0xa5,0x14,0x80,0x77,0x83,0x73,0x81,0x75,0x82,0x57,0x83,0x3f,0xf9,
+0x1, 0x83,0xc0,0x10,0xb, 0xe1,0x8f,0x98,0x8e,0x88,0x3d,0xef,0xe0,0x43,0x39,0x8d,
+0xe0,0x43,0x3a,0xf, 0x3f,0x6d,0xe6,0xa9,0xce,0xf, 0x3b,0xe3,0xc5,0xff,0xc7,0x7f,
+0xc3,0x81,0xe0,0x43,0x3d,0x8b,0x3e,0x2f,0x3a,0xe4,0xe0,0x43,0x3f,0xe, 0xe7,0x0,
+0x10,0x81,0xc2,0x81,0x73,0x86,0x75,0x87,0x76,0x8, 0x55,0x86,0x3f,0x7b,0x5, 0x8,
+0xc4,0x81,0xe1,0x80,0xb0,0x92,0xe2,0x1, 0xc4,0xff,0xc4,0x2, 0x0, 0xd8,0xe2,0x0,
+0xcf,0x0, 0x3, 0x1d,0x3e,0x6d,0xc6,0x1, 0xe0,0x43,0x3e,0xc, 0x55,0x84,0x3f,0x7b,
+0x4, 0x5, 0x3e,0x6d,0xc6,0x1, 0xe0,0x43,0x3e,0xc, 0x53,0x2, 0x55,0x8, 0x55,0x87,
+0x3b,0x3c,0xe2,0x1, 0xc5,0x7f,0xe0,0x2c,0x3e,0x3, 0x3d,0xf5,0x5, 0xa, 0xc7,0x1,
+0xc6,0xff,0xe0,0x43,0x3f,0xe, 0xe2,0x1, 0xc6,0xff,0x0, 0xd8,0x3e,0x6e,0x0, 0xe7,
+0xe2,0x0, 0xcd,0x80,0x3, 0x1e,0x3f,0xea,0xc7,0x81,0xe0,0x43,0x3f,0x8f,0x53,0x85,
+0x3d,0xf7,0x4, 0x5, 0x3f,0xea,0xc7,0x81,0xe0,0x43,0x3f,0x8f,0x26,0x4, 0xe0,0x27,
+0x3f,0x84,0x2b,0x88,0x3f,0x96,0x53,0x81,0x37,0xa1,0x3f,0x97,0x97,0x8f,0xe0,0x21,
+0x38,0xef,0xc5,0x81,0xc5,0x7f,0xe0,0x43,0x3d,0x8b,0xe2,0x1, 0xc5,0x7f,0x0, 0xd6,
+0x3f,0xeb,0x0, 0xe6,0xe0,0xf3,0x17,0xf4,0x34,0x21,0x34,0xa1,0x3c,0x1f,0x3f,0x99,
+0x94,0x8, 0x97,0x8f,0x3f,0x98,0xe0,0x8, 0x37,0xcf,0x3c,0x1f,0x34,0x1, 0xe0,0x8,
+0x3e,0x28,0xe0,0x41,0x3c,0x28,0x3e,0x2b,0xe0,0x41,0x3e,0x2c,0xe0,0xf, 0x34,0x22,
+0x3f,0xfc,0x3, 0x9, 0xe0,0x0, 0x17,0xe4,0xe0,0x2c,0x3e,0x1f,0xe0,0x28,0x3c,0x1f,
+0x3c,0x5c,0x38,0x82,0x14,0x0, 0x0, 0xfe,0xe8,0x50,0x4d,0xf8,0xe2,0x0, 0xcd,0x82,
+0x5, 0xa0,0xe0,0x4c,0x17,0x5a,0x17,0x80,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3e,0x6e,
+0x3e,0xef,0x3d,0xfd,0x2, 0x86,0x3d,0xff,0xc7,0x2, 0x1, 0xf7,0x14,0x1, 0x38,0x82,
+0xe0,0x40,0x8c,0xae,0x8d,0xc, 0x3c,0xfa,0x1, 0xc, 0xc6,0x2, 0xe0,0x40,0x8c,0x9e,
+0xe0,0x40,0x8d,0x1c,0x3c,0xfa,0x1, 0x5, 0xc6,0x81,0xe2,0x1, 0xc6,0xff,0x0, 0xea,
+0x14,0x0, 0x0, 0xee,0x8, 0xb7,0xc0,0x68,0xe8,0xb, 0x49,0x74,0xe8,0x50,0x4f,0x78,
+0x17,0x80,0x3d,0x62,0x14,0x80,0x74,0xb, 0xe0,0xf4,0x14,0x74,0xe8,0xf4,0x6f,0xf1,
+0xe8,0xf4,0x6f,0xf2,0xe8,0xf4,0x6f,0xb1,0xe8,0xf4,0x6f,0xb0,0x77,0x3, 0xe0,0x2,
+0xd8,0xca,0xe0,0xa, 0x31,0x21,0x14,0x80,0xe0,0xf4,0x14,0x34,0xe0,0x2, 0xd8,0xc3,
+0x57,0x83,0xe2,0x0, 0xcf,0x81,0x5, 0xa7,0xdf,0x14,0xe0,0xf4,0x11,0xf4,0x11,0x0,
+0x3f,0x62,0xe2,0x1, 0xc7,0x7f,0xe0,0xf, 0x31,0x21,0x77,0xa, 0xe0,0x4c,0x17,0x58,
+0x3f,0x9e,0x8f,0xf, 0x8f,0x9f,0x77,0x5, 0x77,0x86,0x21,0x3, 0x8f,0x83,0x2f,0x84,
+0x57,0x8a,0xc7,0x81,0xaf,0x83,0xc1,0x1, 0x71,0x2, 0x53,0x82,0x57,0x83,0xe2,0x1,
+0xc3,0xff,0x3b,0xff,0x4, 0x8a,0x3f,0xe2,0x57,0x3, 0xe2,0x1, 0xc7,0xff,0x3f,0x7f,
+0xc1,0x81,0x2, 0xdf,0xc0,0x18,0xb, 0xe1,0x57,0x82,0xe0,0x4c,0x17,0x58,0x37,0xa1,
+0x3f,0x9e,0x8d,0xf, 0x57,0x5, 0x3f,0x2a,0xe0,0x41,0x3f,0x2e,0x3e,0xee,0x77,0x8,
+0xe2,0x1, 0xc6,0xff,0xe8,0x25,0x4f,0xa, 0x3f,0x7d,0xe0,0x1, 0x5, 0xf0,0x8d,0x9f,
+0x57,0x86,0x3f,0xab,0xe0,0x41,0x3f,0xaf,0x3c,0xef,0xe2,0x1, 0xc4,0xff,0x3f,0x79,
+0x77,0x89,0xe0,0x1, 0x5, 0xe4,0x17,0x81,0xe1,0x2e,0x3f,0xad,0x27,0x1d,0xe1,0x2f,
+0x3f,0xa9,0x27,0x9a,0x57,0x8b,0xe6,0xaf,0xcf,0xff,0x27,0x96,0xe8,0xf4,0x4f,0xb1,
+0xc7,0x81,0xe8,0xf4,0x6f,0xb1,0xe8,0xf4,0x4f,0xf1,0xc7,0x81,0xe8,0xf4,0x6f,0xf1,
+0xe0,0xf4,0x17,0x74,0x57,0x82,0x8e,0x83,0x3f,0x1f,0x8f,0x8e,0xe0,0x1, 0x2f,0xde,
+0xae,0x8e,0xe0,0x1, 0x0, 0xc4,0x57,0x8b,0xe2,0x0, 0xc7,0x82,0xe0,0x1, 0x27,0xbf,
+0xe8,0x55,0x4c,0x25,0x57,0x5, 0x57,0x86,0xe8,0x72,0x56,0x2c,0xe0,0xaf,0x3f,0x8,
+0x37,0xa1,0x3f,0x9c,0x97,0xf, 0x3f,0xeb,0xe0,0xaf,0x3d,0x8, 0x54,0x5, 0x37,0xa1,
+0x3e,0x1f,0x92,0x8c,0x16,0x2, 0xe1,0x2d,0x3e,0x2d,0xe1,0x29,0x3e,0x29,0xe0,0x9,
+0x3e,0xd9,0x74,0x84,0x3e,0xe0,0x3e,0x60,0x54,0x86,0xc6,0x18,0xc6,0x99,0x77,0x1,
+0xde,0x15,0x57,0x1, 0xe0,0x4, 0x34,0xf, 0xe0,0xc, 0x3f,0x15,0x3b,0x68,0x36,0x1,
+0x2a,0x5, 0xe2,0xff,0xcc,0x7f,0x1, 0x82,0x3b,0x64,0x54,0xa, 0xe0,0x2f,0x3f,0x65,
+0x3d,0x64,0x3d,0xe6,0x3c,0xe7,0x77,0x1, 0x77,0x87,0xde,0xf5,0x3b,0xe8,0xdf,0x15,
+0x57,0x1, 0xe0,0x2f,0x3f,0x55,0x3d,0x6f,0xe0,0xb, 0x37,0x8f,0xe0,0x1, 0x24,0x4,
+0x54,0x87,0x3c,0x69,0x34,0xf, 0xe8,0x28,0x57,0x3f,0xe2,0x5, 0xcf,0x3b,0xe0,0x0,
+0x2, 0x7f,0xe8,0x50,0x4e,0x78,0x10,0xbc,0xe2,0x0, 0xce,0x3, 0x16,0x0, 0xe0,0x0,
+0x17,0x52,0xe0,0x6c,0x3d,0xa7,0xe0,0x6e,0x3a,0xa1,0x3b,0xec,0xe8,0x13,0x56,0x6e,
+0x26,0xd, 0xe8,0x50,0x4e,0x78,0x10,0xb2,0xe2,0x0, 0xce,0x5, 0x16,0x0, 0xe0,0x61,
+0x3c,0xae,0xe0,0x6c,0x3c,0xa7,0x3f,0x61,0x3b,0xec,0xe8,0xf3,0x4e,0x52,0xe2,0x0,
+0xce,0x1, 0x16,0x3c,0xe0,0x6c,0x39,0xae,0x3f,0x6c,0xe8,0x51,0x4e,0x29,0xe0,0x0,
+0x26,0x5b,0x56,0x4, 0xe0,0x0, 0x26,0x5d,0x56,0x8, 0x56,0x89,0x12,0x81,0x3e,0x1d,
+0xe2,0x0, 0xce,0x6, 0x16,0x32,0xe0,0x6c,0x3a,0x2e,0x3f,0x6c,0xe0,0x8, 0x3d,0xbe,
+0xe0,0x9, 0x37,0xf, 0x3d,0xe8,0xe0,0xab,0x3c,0x8a,0xe0,0x8c,0x3f,0x5a,0x15,0x0,
+0xe0,0x8, 0x3d,0x9c,0x3c,0xed,0xe0,0x0, 0x15,0xe4,0x77,0x81,0xe0,0x2, 0xd7,0x1c,
+0x3a,0x78,0x57,0x81,0x2, 0x4, 0x1, 0x84,0x3b,0x79,0x5, 0x82,0x12,0x81,0xe0,0x0,
+0x16,0x5a,0xe0,0x8e,0x3f,0xcc,0x15,0x0, 0xe0,0x0, 0x15,0xe4,0x3c,0x6e,0x3c,0xef,
+0xe0,0x2, 0xd7,0xa, 0x3a,0x78,0x2, 0x2f,0x1, 0x83,0x3b,0x79,0x2, 0xac,0x56,0x87,
+0xe0,0x0, 0x16,0x5a,0xe0,0x8e,0x3e,0xcc,0x15,0x0, 0xe0,0x0, 0x15,0xe4,0x3c,0x6e,
+0x3c,0xef,0xe0,0x2, 0xd6,0xf9,0x3a,0x78,0x2, 0x1e,0x1, 0x83,0x3b,0x79,0x2, 0x9b,
+0x23,0x83,0x57,0x4, 0x27,0x3, 0xe7,0xfe,0x2a,0xb5,0x57,0x2, 0xc7,0x1, 0x77,0x2,
+0xe7,0xfd,0x0, 0xed,0x3c,0x6b,0x3c,0xef,0xe7,0xfe,0x0, 0xff,0xe0,0x0, 0x17,0x52,
+0xe7,0xff,0x0, 0x8e,0x3d,0xe8,0x3d,0x69,0x3a,0xec,0xe7,0xff,0x0, 0xb1,0x52,0x84,
+0xe7,0xff,0x0, 0xae,0x12,0x81,0x0, 0xe5,0xe1,0x2d,0x3f,0xdd,0xe0,0xf4,0x15,0xf3,
+0x17,0x80,0xe0,0x80,0x8e,0x1b,0x8d,0xe, 0x3d,0x7c,0x1, 0x4, 0x8d,0x3, 0x3d,0x7c,
+0x1, 0x82,0xae,0x8b,0xc7,0x81,0x56,0x3, 0xe2,0x1, 0xc7,0xff,0x3e,0x7f,0x1, 0xf2,
+0x0, 0xd5,0xe8,0x51,0x4e,0x8e,0xe0,0x4c,0x17,0x58,0x17,0x80,0x3e,0xff,0x1, 0x83,
+0x14,0x0, 0x38,0x82,0xc7,0xe, 0xe0,0xe, 0x8e,0x4e,0xe2,0x0, 0xce,0x10,0x2, 0x85,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x0, 0xf3,0x14,0x1, 0x0, 0xf4,0x8, 0xb5,0x16,0x80,
+0xe0,0x1, 0x17,0xff,0xe8,0x50,0x4a,0xf8,0xe8,0x72,0x51,0xac,0xe8,0x55,0x4a,0x25,
+0xe0,0x4c,0x11,0x58,0xe0,0xff,0x14,0x7f,0x3e,0x6d,0x3f,0x6f,0x38,0xed,0x3a,0xf1,
+0xe0,0x0, 0x1, 0xce,0x3f,0xfd,0x34,0x21,0x15,0x83,0xe0,0x28,0x3c,0x3b,0xe0,0x0,
+0x1, 0xfc,0xe0,0x0, 0x27,0xf7,0x3d,0xef,0xc5,0xff,0xe2,0x1, 0xc5,0xff,0xe8,0x55,
+0x4d,0x27,0xc5,0x7f,0x3e,0xfa,0x3, 0x5, 0x3f,0xed,0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0x3f,0x7c,0xe0,0x0, 0x1, 0xf1,0xe0,0x0, 0x27,0x6c,0x3c,0xee,0xc4,0xff,0xe2,0x1,
+0xc4,0xff,0xe8,0x55,0x4e,0xa6,0xc6,0xff,0x3e,0x7d,0x3, 0x5, 0x3f,0x6c,0xc7,0x1,
+0xe2,0x1, 0xc7,0x7f,0x16,0x80,0x3d,0x6d,0x3d,0xff,0xe0,0x0, 0x5, 0xfa,0xe8,0x55,
+0x4f,0x8f,0xe2,0x0, 0xcf,0x82,0xe0,0x0, 0x5, 0xf8,0xe8,0x7a,0x57,0x99,0xe2,0x7,
+0xcf,0xe7,0x2, 0x84,0xc7,0x81,0xe8,0x7a,0x77,0x99,0x20,0xbd,0xe4,0x0, 0xc5,0x3,
+0x36,0xa1,0x3d,0x7d,0x17,0x0, 0xe0,0x0, 0x5, 0x7d,0xe8,0x79,0x57,0xf9,0xe8,0x7a,
+0x77,0x19,0xe2,0x3, 0xcf,0xf3,0x2, 0xaf,0xc7,0x81,0x0, 0xab,0x8d,0x92,0x8d,0x2,
+0x3c,0xeb,0xe0,0xa9,0x3d,0x4, 0xe1,0x2e,0x3f,0x5a,0xe1,0x2c,0x3e,0x6a,0x34,0xa1,
+0xe2,0x1, 0xc7,0x7f,0xe2,0x1, 0xc6,0x7f,0xe1,0x2f,0x3f,0xdb,0xe1,0x2d,0x3e,0xeb,
+0x3c,0x93,0xe0,0xb, 0x3e,0x2e,0x94,0x89,0xe2,0x0, 0xcd,0x87,0xe2,0x1, 0xc7,0xff,
+0xe2,0x1, 0xc6,0xff,0xe0,0x28,0x3c,0x59,0x2, 0x7, 0xe0,0xb, 0x3e,0xaf,0xe2,0x0,
+0xcd,0x87,0xc1,0x2, 0x5, 0x9, 0xe0,0x3, 0x17,0xf4,0xe8,0x7a,0x77,0x99,0x17,0x80,
+0xe8,0x79,0x77,0xf9,0xa, 0xe1,0xc0,0x81,0xe2,0x1, 0xc0,0xff,0xe7,0xff,0x0, 0x81,
+0x3d,0xef,0xe7,0xff,0x0, 0x8e,0x3d,0xef,0x3f,0xed,0xe7,0xff,0x0, 0x93,0x3c,0xee,
+0xe7,0xff,0x0, 0x99,0x3c,0xee,0x3f,0x6c,0xe7,0xff,0x0, 0x9e,0x39,0x6b,0xe0,0xa2,
+0x3e,0x4, 0x31,0x21,0x39,0x13,0x96,0x82,0x3e,0xf8,0x5, 0x4, 0xc5,0x1, 0xe2,0x1,
+0xc5,0x7f,0xc6,0x1, 0xe2,0x1, 0xc6,0x7f,0x3e,0x7e,0xe0,0xd, 0x3e,0x15,0xe2,0x1,
+0xc6,0xff,0x5, 0xed,0xc5,0x81,0xe2,0x1, 0xc5,0xff,0xe7,0xff,0x0, 0x87,0x3e,0x69,
+0xe0,0x5, 0x3e,0xa9,0x0, 0xf2,0xe7,0xff,0x1, 0x12,0xe8,0x7a,0x57,0x99,0xe2,0x0,
+0xcf,0x82,0x5, 0x84,0xc7,0xfe,0xe8,0x7a,0x77,0x99,0xe8,0x79,0x57,0xf9,0xe2,0x3,
+0xcf,0xf3,0xe7,0xff,0x2, 0x84,0xc7,0x81,0xe8,0x79,0x77,0xf9,0xe7,0xfe,0x0, 0xff,
+0xe8,0x7a,0x57,0x99,0xe2,0x7, 0xcf,0xe7,0x2, 0x84,0xc7,0x82,0xe8,0x7a,0x77,0x99,
+0xe8,0x79,0x77,0x79,0xe7,0xff,0x0, 0xb0,0x8, 0xb7,0xc0,0x78,0x17,0x80,0xe8,0xf4,
+0x6f,0xf0,0x17,0x86,0xe8,0x25,0x6f,0x8a,0xe8,0x55,0x4a,0x19,0xdc,0x3d,0xe8,0x13,
+0x57,0xee,0x27,0x86,0xe8,0x25,0x4f,0x8a,0xc7,0x83,0xe8,0x25,0x6f,0x8a,0xdf,0xf,
+0xe8,0x50,0x4f,0xf8,0xe2,0x0, 0xcf,0x81,0xe0,0x1, 0x5, 0xda,0x14,0x3, 0xdd,0x7b,
+0x22,0x17,0xe2,0x0, 0xca,0x1, 0x5, 0x87,0xe8,0x25,0x4f,0x7, 0xe8,0x25,0x4f,0x8a,
+0x3f,0x7f,0x2, 0x8e,0xe8,0x50,0x4f,0xf8,0x3f,0xf4,0xe0,0x0, 0x1, 0xc7,0xde,0xe2,
+0xe2,0x0, 0xcc,0x0, 0x17,0x81,0x14,0x3, 0xe0,0x68,0x39,0x2f,0xdd,0x64,0x17,0x0,
+0xe8,0x50,0x4e,0x78,0xe0,0xf4,0x16,0xf4,0x38,0xee,0x3e,0x7e,0xe0,0x0, 0x1, 0xcc,
+0xe8,0x72,0x52,0x2c,0xe8,0x55,0x4d,0xa5,0xe8,0x25,0x4e,0x88,0xe8,0x25,0x4a,0x89,
+0xe0,0x1, 0x13,0x7f,0x15,0x0, 0x14,0x1, 0x76,0x82,0x72,0x3, 0x75,0x84,0x38,0xf8,
+0xe0,0x1, 0x3, 0x9d,0xe2,0x0, 0xcd,0x1, 0xe0,0x1, 0x1, 0x9d,0xe8,0xf4,0x4f,0xb4,
+0xe8,0x25,0x6f,0x89,0xe8,0xf4,0x4f,0xb5,0xe8,0xf4,0x6d,0x70,0xe0,0xf4,0x14,0xb4,
+0xe8,0x50,0x6d,0x78,0xe0,0x4c,0x14,0x58,0x35,0x21,0xe8,0x25,0x6f,0x88,0xe0,0x2,
+0xd5,0xc6,0xe8,0x50,0x4f,0xf8,0x14,0x0, 0xe8,0x27,0x6f,0xdb,0xef,0xfd,0xd1,0x80,
+0xe8,0x25,0x6c,0x7, 0xc0,0x8, 0xb, 0xe1,0xe8,0xf4,0x4f,0x71,0xe0,0xe, 0x3f,0xae,
+0xc7,0x1, 0x3a,0x7e,0x1, 0xd, 0xe8,0xf4,0x4e,0xb1,0xe8,0x27,0x4f,0x5b,0x3f,0xad,
+0xc7,0x81,0x3f,0x7f,0xe7,0xff,0x1, 0xb5,0x14,0x3, 0xe7,0xff,0x0, 0xb1,0x14,0x1,
+0xe7,0xff,0x0, 0xae,0xe1,0x80,0x8f,0x9d,0xc7,0x1, 0xe1,0x21,0x38,0xef,0xe2,0x1,
+0xc0,0xff,0xe2,0x1, 0xc7,0x7f,0xe7,0xff,0x0, 0xaa,0xe0,0xf4,0x17,0xf4,0x3f,0x9c,
+0x8f,0x8f,0x3f,0xf8,0x1, 0xab,0xe0,0x4c,0x12,0x58,0xe0,0xf, 0x36,0x21,0x3f,0x94,
+0xc6,0x81,0x8d,0x8f,0x8c,0x9f,0xe2,0x1, 0xc6,0xff,0xe2,0x0, 0xce,0x81,0x3f,0xe9,
+0x3a,0x6b,0xe0,0x6f,0x39,0xa3,0xe0,0x64,0x39,0xa2,0xe2,0x0, 0xc8,0x81,0x39,0xef,
+0x39,0x64,0x1, 0xae,0xe2,0x1, 0xca,0xff,0x1, 0x2b,0xe0,0xf, 0x3d,0xa5,0xe0,0x41,
+0x3f,0xaf,0x77,0x81,0x57,0x82,0xe0,0x4, 0x3c,0xaf,0x57,0x81,0xe0,0x41,0x3a,0x24,
+0x3f,0x94,0xe2,0x1, 0xc7,0xff,0x3f,0xf6,0x4, 0xa7,0x3c,0xe3,0x3d,0xe2,0xc6,0x1,
+0x39,0xe9,0x39,0x6b,0x3f,0xec,0xe2,0x1, 0xc7,0xff,0x3f,0x7f,0x2, 0xc7,0x26,0x8b,
+0xe0,0xf, 0x35,0x21,0xe0,0xf4,0x15,0xb4,0x3f,0x9b,0xc5,0x1, 0xe2,0x1, 0xc5,0x7f,
+0xa9,0xf, 0xa9,0x9f,0xc4,0x1, 0xe2,0x1, 0xc4,0x7f,0xe7,0xfe,0x0, 0xf2,0x52,0x4,
+0x3f,0xe9,0xe0,0xaf,0x3d,0x84,0x52,0x3, 0x37,0xa1,0x3f,0x94,0x97,0x8f,0x3f,0xf7,
+0x5, 0x5d,0x3b,0xef,0x0, 0xdd,0x3b,0x6f,0x0, 0xdb,0x16,0x0, 0x3e,0xec,0x3b,0xec,
+0x0, 0xda,0x17,0xff,0xe8,0x25,0x6f,0x89,0xe7,0xfe,0x0, 0xe8,0xe0,0x0, 0x17,0x64,
+0xe8,0x27,0x6f,0xdb,0x17,0xff,0xe8,0x25,0x6f,0x7, 0xe8,0x25,0x6f,0x89,0xe8,0x25,
+0x6f,0x88,0xe7,0xfe,0x0, 0xf1,0x8, 0xb6,0x39,0x69,0xe4,0x0, 0xc1,0xe, 0xe0,0x51,
+0x16,0xae,0xe8,0xb, 0x49,0xf3,0xe0,0x53,0x16,0x46,0x39,0x1d,0x12,0x0, 0x3f,0xe4,
+0xe2,0x1, 0xc7,0xff,0x39,0xff,0x2, 0xb7,0xb, 0x61,0xc7,0x81,0xc2,0x8e,0x3f,0x6f,
+0xe2,0x1, 0xc7,0x7f,0x3d,0x7e,0x5, 0xac,0x8b,0x45,0x8f,0x4c,0x38,0xec,0x3f,0x76,
+0x1, 0xf5,0xe2,0x1, 0xcf,0x7f,0x1, 0x72,0xe4,0x0, 0xc7,0x6, 0xe4,0x0, 0xc7,0x8e,
+0x3f,0x1d,0xe0,0x3, 0xc7,0x24,0x8f,0xe, 0x2f,0x3, 0xe0,0x1, 0x3e,0x9f,0x3f,0x68,
+0xe4,0x0, 0xc7,0xe, 0x8a,0xc1,0x3f,0x1b,0xaa,0xce,0x3f,0x9d,0x92,0x81,0x90,0x91,
+0xb2,0x8e,0xc4,0x1, 0xb0,0x9e,0xe2,0x1, 0xc4,0x7f,0x88,0xdf,0xa8,0xde,0x88,0xef,
+0xa8,0xee,0x88,0xff,0xa8,0xfe,0xe0,0x1, 0x8f,0x8f,0xe0,0x1, 0xaf,0x8e,0xc2,0x1,
+0xc6,0xe, 0x0, 0xc6,0x3a,0xe2,0x3f,0xe9,0x0, 0xcb,0xe8,0x32,0x4f,0xfa,0xe2,0x1,
+0xcf,0xf9,0x2, 0x84,0xc7,0x81,0xe8,0x32,0x6f,0xfa,0x38,0x82,0xe0,0x3, 0x15,0x28,
+0x14,0x80,0xe0,0xf9,0x14,0x2a,0xe0,0x4a,0x0, 0x9e,0x8, 0xb5,0xe8,0xf9,0x4f,0xaa,
+0xe0,0xf9,0x15,0x2a,0xe0,0xe, 0x3d,0x1f,0x39,0x6f,0x16,0x80,0x3c,0xee,0xe0,0x51,
+0x16,0x2e,0xe8,0x55,0x4c,0xe, 0xe4,0x0, 0xc1,0xa, 0xae,0xbe,0x15,0x80,0xe0,0x1,
+0xae,0xde,0x38,0xec,0xc4,0x83,0xc7,0xd, 0x3c,0x7b,0x1, 0xa4,0xc7,0x81,0xe2,0x1,
+0xc7,0xff,0xe2,0x0, 0xcf,0x8a,0x17,0x0, 0x1, 0x3e,0xe8,0xf9,0x6f,0xaa,0x17,0x80,
+0xe8,0xf9,0x6f,0x2c,0xe0,0xf9,0x16,0xad,0xe0,0xf9,0x16,0x37,0x3f,0x6f,0xe1,0x80,
+0x8d,0x9d,0xe1,0x2e,0x3f,0x6b,0xe0,0x1, 0x8d,0x9d,0x3e,0x7d,0x3f,0x9b,0xe2,0x1,
+0xc7,0x7f,0xe2,0x1, 0xc7,0xff,0x1, 0xf4,0xe8,0xf9,0x6f,0xac,0xe8,0xf9,0x6f,0x2b,
+0xa, 0xe1,0x8a,0x9, 0x92,0x8c,0xe0,0xd, 0x39,0x14,0x39,0xed,0xc1,0x86,0x31,0xa2,
+0x39,0x9a,0xb2,0x83,0x36,0xa2,0x91,0x9c,0x3e,0x9a,0xe0,0x1, 0xb1,0xdd,0xc2,0x1,
+0x8e,0xcc,0xaa,0x9, 0xe4,0x0, 0xc6,0x86,0x3e,0x91,0xe0,0x3, 0xc6,0xa4,0x8e,0x8d,
+0x2e,0x84,0x8e,0x8e,0xc6,0x81,0xae,0x8e,0xc5,0x81,0xe2,0x1, 0xc5,0xff,0xc6,0xe,
+0xe7,0xff,0x0, 0xbc,0xe8,0xf9,0x6f,0x2a,0x0, 0xc3,0x8, 0xb3,0xe0,0xf9,0x15,0x2d,
+0xe0,0xf9,0x16,0xaa,0xe0,0xfc,0x11,0x3a,0xe0,0x0, 0x10,0xe3,0xe1,0x80,0x8d,0x9a,
+0x3e,0x6d,0x17,0x0, 0x0, 0x98,0x39,0xec,0xe0,0x1, 0x97,0xc3,0xc6,0x4, 0xe0,0xf,
+0x3c,0x2f,0xe0,0x41,0x3f,0xaf,0xe1,0x2f,0x38,0xaf,0x27,0x8a,0xe0,0x1, 0x97,0xd3,
+0xe0,0xf, 0x3c,0xaf,0xe0,0x41,0x3f,0xaf,0xe1,0x2f,0x38,0xaf,0x2f,0x8b,0xc7,0x1,
+0xe2,0x1, 0xc7,0x7f,0x3d,0xfe,0x1, 0xe8,0xc6,0xa8,0x39,0x7d,0x1, 0xe0,0x14,0x0,
+0x0, 0x82,0x14,0x1, 0x9, 0xe1,0x8, 0xb7,0xe1,0xfb,0xc0,0x6e,0xe8,0x55,0x4f,0xe,
+0x77,0x8, 0xe0,0x1, 0x27,0x4f,0xe8,0x19,0x57,0x93,0xc7,0x81,0xe2,0x0, 0xcf,0xe4,
+0xe0,0x1, 0x2, 0xc4,0xe8,0x19,0x77,0x93,0xe8,0xf3,0x4f,0xa7,0xe2,0x0, 0xcf,0x81,
+0xe0,0x1, 0x1, 0xc3,0x17,0x83,0xe8,0x32,0x6f,0xa4,0xe8,0x7a,0x57,0xe3,0xe8,0x24,
+0x56,0x83,0x3f,0x6f,0xe8,0x24,0x57,0x83,0xe2,0x1, 0xc7,0x7f,0x3f,0xae,0xe2,0x1,
+0xc7,0xff,0x77,0x85,0xe8,0x24,0x57,0x83,0xe8,0x55,0x49,0x95,0xe8,0x7a,0x77,0xe3,
+0xe0,0x8, 0x29,0xf6,0x3c,0x60,0x15,0xa, 0x3c,0xe3,0xc4,0x2c,0xe8,0x32,0x69,0xa8,
+0xe0,0x2, 0xd4,0x59,0x57,0x85,0x57,0x5, 0xe4,0x0, 0xc7,0x86,0xe4,0x0, 0xc7,0x1e,
+0xc7,0x94,0x77,0x94,0x77,0x15,0x57,0x85,0x57,0x5, 0xe4,0x0, 0xc7,0x8e,0xe4,0x1,
+0xc7,0x16,0xe8,0xf5,0x69,0xc4,0x71,0x8c,0x71,0x8d,0x77,0x8e,0x77,0xf, 0xe0,0x51,
+0x17,0xae,0x52,0x8d,0xe4,0x0, 0xc2,0x8e,0x3a,0x9f,0x89,0x45,0xe2,0x0, 0xc9,0x9,
+0xe0,0x6, 0x2, 0xfd,0x3f,0x62,0xe4,0x0, 0xc7,0x6, 0x3f,0x9e,0xe0,0x3, 0xc7,0xa4,
+0x8f,0x8f,0xe2,0x0, 0xcf,0x82,0xe0,0x9, 0x1, 0x90,0xe0,0x7, 0x31,0x21,0xe0,0x32,
+0x17,0x90,0x3f,0x97,0x97,0xf, 0x3a,0x62,0xc7,0x1, 0xe4,0x0, 0xc2,0x78,0xe0,0x5,
+0xc, 0x9, 0xb7,0xf, 0xe0,0x28,0x17,0xe0,0x3a,0x1f,0xe0,0x28,0x17,0x38,0xe0,0xf,
+0x31,0x22,0x3f,0x1f,0xe0,0xe, 0xd, 0xb, 0x77,0x81,0xef,0xfd,0xd0,0xdc,0x57,0x81,
+0xe0,0x28,0x17,0x10,0x3f,0x9e,0x3b,0x68,0xe0,0xf, 0xd, 0xb, 0xe0,0x5, 0xc, 0x9,
+0xef,0xfd,0xd0,0xd1,0xe0,0x27,0x17,0xfc,0x3f,0x97,0x97,0xf, 0x74,0x10,0x3f,0x16,
+0xe2,0x1f,0xcf,0x20,0xe0,0x0, 0x2, 0xd0,0xb7,0xf, 0xe0,0xd, 0x31,0x21,0x8f,0xe5,
+0x97,0x5, 0x77,0x86,0x97,0x95,0x77,0x9, 0xe0,0x32,0x17,0x10,0x77,0x8a,0xe0,0x27,
+0x17,0xfc,0x3f,0x1d,0x3f,0x9d,0x97,0xe, 0x97,0x8f,0x77,0x4, 0xe0,0xe, 0x31,0x22,
+0x77,0x91,0xe0,0x28,0x17,0xb8,0x3f,0x9e,0xe0,0xf, 0xf, 0xf, 0x55,0x9, 0x3d,0x2e,
+0x57,0xa, 0x75,0x12,0x3f,0x2f,0xe0,0x27,0x17,0xf2,0x3f,0x92,0x8b,0x8f,0x77,0x13,
+0x23,0xae,0x3f,0xe7,0xe4,0x0, 0xc7,0x98,0x3c,0x60,0x3f,0x94,0x3c,0xef,0x15,0x18,
+0xc4,0xe8,0xe0,0x0, 0xc4,0x40,0x77,0x81,0xe0,0x2, 0xd3,0x81,0xe2,0x0, 0xcb,0x81,
+0x57,0x81,0x57,0x25,0x2, 0xa5,0x3c,0x60,0x15,0x18,0x14,0x80,0xe0,0x0, 0xc4,0x58,
+0x77,0x2, 0xe0,0x2, 0xd3,0xc0,0x0, 0xa5,0xe0,0x0, 0x17,0xe4,0xe7,0xfe,0x0, 0xbc,
+0x57,0x88,0xe7,0xfe,0x0, 0xb9,0xe8,0x32,0x4f,0xa4,0xe7,0xfe,0x27,0xc0,0xc7,0xff,
+0xe7,0xfe,0x0, 0xbb,0xe0,0x1f,0x17,0x20,0xe7,0xff,0x0, 0xb0,0x3c,0x60,0x15,0x18,
+0x3c,0xe7,0xe0,0x0, 0xc4,0x40,0xe0,0x2, 0xd3,0xa6,0x3f,0x67,0x0, 0xdd,0x3c,0xef,
+0x3c,0x60,0x15,0x18,0xc4,0xd0,0xe0,0x0, 0xc4,0x58,0x77,0x2, 0xe0,0x2, 0xd3,0x4f,
+0x3e,0xe4,0x15,0x0, 0x57,0x2, 0xc6,0x8a,0x3f,0xe3,0x75,0x7, 0x3b,0xff,0xc6,0x98,
+0xe0,0x2, 0x1, 0x9b,0x23,0x85,0x57,0x87,0xe1,0x2f,0x3f,0xb7,0x77,0x87,0xe0,0x27,
+0x17,0xe8,0x3f,0x92,0x8e,0x8f,0xe0,0x2, 0x2e,0xbf,0x57,0x94,0x3f,0xfe,0x3, 0x86,
+0x3f,0xf6,0x3, 0x84,0x17,0x81,0xe8,0x32,0x6f,0xa8,0xe0,0x0, 0x4f,0xc0,0x56,0xa5,
+0xe4,0x0, 0xc7,0x86,0x3e,0xff,0xe0,0x2, 0x5, 0x8a,0xe0,0x0, 0x4f,0xd8,0x56,0xb1,
+0xe4,0x0, 0xc7,0x86,0x3e,0xff,0xe0,0x2, 0x5, 0x82,0x56,0xaa,0x17,0x94,0xe1,0x2f,
+0x3e,0x9f,0x77,0x8b,0x57,0x95,0x3f,0x9e,0x3f,0xf6,0xe0,0x1, 0x4, 0xfb,0x3f,0xee,
+0xe4,0x0, 0xc7,0x83,0x3f,0xf6,0xe0,0x2, 0x3, 0x85,0xe2,0x0, 0xcb,0x6e,0xe0,0x2,
+0x5, 0x81,0x57,0x8b,0xe0,0x2, 0x2f,0x82,0xe0,0x1, 0x17,0xc8,0x55,0x7, 0xe2,0x0,
+0xcd,0xa, 0xe0,0x1, 0x5, 0xfd,0x56,0xaa,0xe2,0x0, 0xce,0x8a,0xe0,0x1, 0x5, 0xf8,
+0x56,0xb6,0xe2,0x0, 0xce,0x8a,0xe0,0x1, 0x5, 0xf3,0x55,0x23,0x56,0x24,0x56,0xa7,
+0x55,0xa8,0x3e,0x9a,0x3d,0x9c,0x15,0x0, 0x54,0x9, 0x54,0x8a,0xe0,0x2b,0x3d,0xea,
+0xe0,0x2a,0x3e,0xea,0x77,0x81,0x77,0x2, 0xef,0xfc,0xdf,0xfd,0x56,0xab,0x57,0x81,
+0xe2,0x1f,0xce,0x9f,0x57,0x2, 0x56,0xaa,0xe0,0x1, 0x5, 0xc8,0xe4,0x0, 0xc6,0x8a,
+0x3c,0x7d,0xe1,0x27,0x3c,0x2d,0x16,0xa8,0xe0,0x6d,0x3b,0xaf,0x3f,0xed,0xe8,0xf5,
+0x4e,0xc4,0xe2,0x0, 0xce,0x81,0xe0,0x1, 0x1, 0xce,0xe0,0x27,0x17,0xde,0x3f,0x92,
+0x16,0x80,0xae,0x8f,0x57,0x8e,0xe2,0x1, 0xcf,0xc8,0xe0,0x1, 0x2, 0xd7,0xe0,0x0,
+0x17,0xee,0x13,0x80,0x56,0xe, 0xe0,0x27,0x16,0xde,0x3e,0x92,0x8d,0x8d,0xe0,0x1,
+0x2d,0xe8,0xe1,0x2c,0x3b,0x1c,0x26,0x7, 0x23,0x86,0xe0,0x27,0x17,0x5e,0x3f,0x12,
+0x16,0x81,0xae,0x8e,0x57,0x4, 0xc7,0x7c,0xe2,0x0, 0xcf,0xf, 0xe0,0x1, 0x2, 0xcc,
+0xe2,0x1, 0xcb,0x7a,0xe0,0x1, 0x2, 0xc1,0x17,0x0, 0x55,0x8f,0xe2,0xa, 0xcd,0x80,
+0xe0,0x3, 0x5, 0x44,0xe8,0x32,0x4e,0xa4,0xe2,0x0, 0xce,0x80,0xe0,0xa, 0x16,0x80,
+0xe0,0x6d,0x39,0xab,0x3e,0xf6,0x3, 0x85,0x56,0x4, 0xe2,0x0, 0xce,0x2, 0x2, 0x83,
+0xe0,0x0, 0x27,0x4f,0xe0,0x27,0x17,0x5e,0x3f,0x12,0x16,0x80,0xae,0x8e,0xe0,0xff,
+0x17,0x7f,0x16,0x81,0x3e,0x6e,0x3d,0xee,0x3c,0xed,0x3d,0x62,0x14,0x2, 0x77,0x81,
+0x77,0x2, 0xe0,0x0, 0xdb,0xb0,0x15,0xe, 0x3c,0x6a,0x3c,0x32,0x3e,0xe0,0xe0,0x3,
+0xc6,0x88,0x3c,0x1d,0x3c,0xe5,0xe0,0x2, 0xd2,0x7a,0x3e,0xe0,0xc6,0xac,0x3e,0x92,
+0x16,0x2, 0xae,0xd, 0xe0,0xc, 0x31,0x22,0xe0,0xf9,0x16,0x82,0x57,0x2, 0x3e,0x9c,
+0xe8,0xb, 0x4d,0x73,0x57,0x81,0xe0,0x51,0x15,0xae,0xb7,0xd, 0x16,0x80,0x3f,0x6d,
+0xe2,0x1, 0xc7,0x7f,0x3d,0x7e,0x5, 0x93,0x3f,0x6d,0xc6,0x81,0x3e,0x6d,0xe4,0x0,
+0xc6,0xe, 0xe0,0x2, 0xc6,0xe, 0x3e,0x1b,0x8e,0xc, 0x3e,0x72,0x1, 0xf1,0xe4,0x0,
+0xc7,0xe, 0x16,0xff,0x3f,0x1b,0xe0,0x2, 0xc7,0x1c,0xae,0x8e,0x57,0x8, 0xe0,0x2,
+0x27,0x70,0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0x16,0x1, 0x77,0x8, 0x76,0xc, 0xe0,0x27,
+0x17,0x5e,0x3f,0x12,0x8f,0xe, 0xe0,0x5, 0xd, 0x8c,0xe0,0x5, 0x27,0x40,0xe2,0x0,
+0xcf,0x1, 0xe0,0x5, 0x1, 0xa0,0x57,0x4, 0xe2,0x0, 0xcf,0x2, 0xe0,0x2, 0x1, 0xdd,
+0xe0,0xd, 0x31,0x22,0xe0,0x28,0x17,0x38,0x3f,0x1d,0xe0,0xe, 0xc, 0x8a,0x17,0x0,
+0x3e,0xee,0xe0,0x2, 0x0, 0xd6,0x55,0x87,0xe0,0x41,0x96,0x4d,0xc7,0x81,0x3d,0x9c,
+0xe2,0x1, 0xc7,0xff,0x75,0x87,0xe7,0xfd,0x0, 0xdb,0x17,0x80,0xe7,0xfe,0x0, 0x83,
+0xe0,0x0, 0x17,0xe4,0xe7,0xfe,0x0, 0x94,0x55,0x86,0xe2,0x0, 0xcd,0x8a,0x5, 0x85,
+0xe4,0x0, 0xc6,0x86,0xe7,0xfe,0x0, 0xb6,0xe4,0x0, 0xc6,0x83,0xe7,0xfe,0x0, 0xb2,
+0x17,0x94,0x13,0x80,0xe7,0xfe,0x0, 0xb5,0x17,0x8a,0x0, 0xfc,0x13,0x81,0xe7,0xfe,
+0x0, 0xb0,0x55,0xe, 0xe2,0x1, 0xcd,0x48,0xe7,0xfe,0x5, 0xbe,0xe0,0x1, 0x16,0x48,
+0xe7,0xfe,0x0, 0xbb,0xc6,0xff,0xae,0x8f,0x13,0x81,0xe0,0x1, 0x16,0x34,0x71,0x8b,
+0xe0,0x0, 0x17,0xf8,0xe7,0xfe,0x0, 0xb1,0x13,0x80,0xe0,0x0, 0x17,0xee,0xe0,0x1,
+0x16,0x48,0xe7,0xfe,0x0, 0xb0,0x57,0x25,0xe4,0x0, 0xc7,0x14,0xe1,0x2e,0x3b,0x1e,
+0xe7,0xfe,0x0, 0xbd,0x57,0x4, 0xe2,0x0, 0xcf,0x3, 0xe7,0xfe,0x1, 0xb7,0xe2,0x1,
+0xcb,0x7a,0xe7,0xfe,0x5, 0xb3,0x57,0x25,0xe4,0x0, 0xc7,0x1e,0x0, 0xf0,0xe2,0x0,
+0xcd,0x81,0xe0,0x1, 0x1, 0xe4,0x55,0xb6,0xe2,0x0, 0xcd,0x82,0x2, 0x91,0x56,0xa5,
+0xe2,0x0, 0xce,0xcf,0x2, 0x8d,0x55,0x4, 0xe2,0x0, 0xcd,0x13,0x2, 0x95,0x56,0xb2,
+0xe2,0x0, 0xce,0x9d,0x2, 0x85,0x56,0xa6,0xe2,0x0, 0xce,0xcf,0x5, 0xad,0x55,0x4,
+0x56,0xaa,0xe2,0x0, 0xcd,0x9, 0x2, 0x88,0xe2,0x0, 0xce,0x88,0x5, 0x85,0x56,0x86,
+0xe2,0x0, 0xce,0x8e,0x5, 0x8f,0x56,0xaa,0xe2,0x0, 0xce,0x8f,0xe0,0x0, 0x5, 0xd5,
+0xe2,0x0, 0xcd,0x8f,0xe0,0x0, 0x5, 0xd1,0x55,0x6, 0xe2,0x0, 0xcd,0x9, 0xe0,0x0,
+0x2, 0xcc,0xe0,0x0, 0x4e,0xc0,0x55,0x85,0xe1,0x2e,0x3f,0x3d,0x37,0x42,0x3f,0x3b,
+0xe2,0x0, 0xcf,0x78,0xe0,0x0, 0x2, 0xec,0xe2,0x0, 0xce,0x8a,0x5, 0x85,0xe0,0x0,
+0x16,0xd0,0xe1,0x2e,0x3f,0x6d,0x3f,0x76,0xe0,0x1, 0x2, 0x94,0xe1,0x2c,0x3b,0x1c,
+0xe0,0x5, 0x26,0x5f,0xe0,0x5, 0x23,0xdd,0x56,0x4, 0xe0,0x27,0x17,0x5e,0x3f,0x12,
+0x16,0x83,0xe2,0x0, 0xce,0x1d,0xae,0x8e,0x17,0x0, 0xe0,0x1, 0x2, 0x89,0xe8,0xf9,
+0x4e,0xab,0x57,0x32,0xe2,0x0, 0xce,0x82,0xe0,0x0, 0x5, 0xce,0xe0,0x0, 0x4e,0xc3,
+0xe0,0x0, 0x2e,0xca,0xe2,0x0, 0xcf,0x31,0x2, 0x95,0x54,0x9, 0x54,0x8a,0x77,0x81,
+0x76,0x83,0xdc,0xfc,0x3f,0x68,0x57,0x81,0xe0,0x0, 0x24,0x4b,0xe8,0xf9,0x4f,0x2c,
+0xe2,0x0, 0xcf,0x2, 0xe0,0x0, 0x2, 0xe4,0xe0,0x27,0x17,0x5e,0x3f,0x12,0x16,0x2,
+0xae,0xe, 0x17,0x0, 0x0, 0xbd,0xe0,0x0, 0x4d,0xc0,0x57,0x25,0x55,0x5, 0xe1,0x2e,
+0x3f,0x3b,0xe0,0x0, 0x4d,0xc2,0x37,0x41,0x3f,0x3a,0x55,0x6, 0x35,0xa1,0x3d,0x7b,
+0x5, 0x11,0xe2,0x0, 0xce,0x9d,0x2, 0x8e,0xe0,0x0, 0x4e,0xda,0xe0,0xd, 0x3d,0x2d,
+0xe0,0x41,0x3e,0xad,0xe2,0x0, 0xce,0x85,0x5, 0x5, 0xe0,0x1, 0x16,0xc8,0xe7,0xff,
+0x0, 0xaa,0x55,0x86,0xe2,0x0, 0xcd,0x8f,0x5, 0x87,0xe0,0x1, 0x16,0xc8,0xe1,0x2e,
+0x3f,0x5d,0xe7,0xff,0x0, 0xa2,0xe0,0x0, 0x16,0xf8,0x0, 0xfa,0xe0,0x0, 0x17,0x78,
+0xe7,0xff,0x0, 0x9b,0xe2,0x0, 0xcf,0x1d,0x2, 0xcd,0x57,0x10,0xe2,0x0, 0xcf,0x1d,
+0x2, 0xc9,0xe8,0x19,0x57,0x13,0xe0,0x0, 0x16,0xf7,0xe1,0x2e,0x3e,0xae,0xe0,0x27,
+0x16,0xde,0x3e,0x92,0x8e,0x8d,0xe2,0x0, 0xce,0x81,0x1, 0x9d,0x54,0x9, 0x54,0x8a,
+0x55,0x33,0x55,0xb4,0x77,0x81,0x77,0x2, 0xef,0xfc,0xde,0x25,0xe2,0x0, 0xcc,0x3b,
+0x57,0x81,0x57,0x2, 0x2, 0x87,0xe0,0x27,0x17,0x72,0x3f,0x12,0x16,0x80,0xae,0x8e,
+0x17,0x0, 0xe0,0x27,0x16,0xde,0x3e,0x92,0x16,0x0, 0x0, 0x8d,0x17,0x1, 0x0, 0xe0,
+0x17,0x1, 0x0, 0xe5,0xe2,0x0, 0xce,0x83,0xe7,0xfc,0x1, 0xd1,0xe0,0x27,0x16,0xde,
+0x3e,0x92,0x16,0x1, 0xae,0xd, 0xe7,0xfc,0x0, 0xca,0xe2,0x0, 0xcd,0x82,0xe7,0xfc,
+0x1, 0xc5,0xe0,0x0, 0x4e,0x58,0x57,0x31,0x55,0x5, 0xe1,0x2e,0x3f,0x3c,0x37,0x41,
+0x3f,0x3a,0xe1,0x2e,0x3f,0x16,0x0, 0xe1,0x56,0x8f,0xe7,0xfc,0x0, 0xc5,0x16,0x81,
+0x76,0x8c,0xe7,0xfd,0x0, 0x96,0x56,0xa3,0x57,0x24,0x54,0xa7,0x55,0x28,0x3e,0x99,
+0xe8,0xc, 0x4c,0xff,0x3f,0x1a,0xe8,0xd, 0x4d,0x0, 0x34,0xa8,0x3c,0xca,0xe8,0xd,
+0x4d,0xd, 0xe8,0xd, 0x4c,0xe, 0xe2,0x0, 0xce,0x80,0x35,0x28,0x3d,0x48,0xe0,0x2,
+0x4, 0x40,0xc4,0xff,0xe0,0x2d,0x3c,0xdd,0xe2,0x0, 0xcf,0x0, 0xe0,0x2, 0x4, 0x3c,
+0xc5,0x7f,0xe0,0x2e,0x3d,0x5e,0xe0,0x9, 0x31,0x22,0xe0,0x28,0x15,0x38,0x3d,0x19,
+0xe0,0x5, 0xe, 0x9e,0xe0,0xa, 0xd, 0x9c,0xe0,0x27,0x17,0x72,0x39,0x1e,0x8e,0x82,
+0xe2,0x0, 0xce,0x85,0xe0,0x2, 0x1, 0xb4,0x3a,0xe4,0x3c,0x64,0xe0,0x0, 0xc2,0xe0,
+0x17,0x18,0x39,0x68,0xc1,0x18,0x3d,0x6e,0x3c,0xe2,0x77,0x81,0x77,0x2, 0xe0,0x2,
+0xd0,0x9e,0x3a,0xf2,0x3c,0x62,0x57,0x81,0x57,0x2, 0x1, 0xf4,0x57,0x5, 0xe0,0xc,
+0xaf,0x94,0xe0,0xc, 0xaf,0x4, 0x57,0x86,0x57,0xb, 0xe0,0xc, 0xaf,0xa4,0xe0,0xc,
+0xaf,0x34,0x57,0x92,0x57,0x13,0xe0,0x6, 0xb7,0xb4,0xe0,0x6, 0xb7,0x44,0x57,0x90,
+0x57,0x9, 0xe0,0x6, 0xb7,0xe4,0xe0,0x6, 0xb7,0x74,0x57,0x8a,0x57,0x4, 0xe0,0x7,
+0xb7,0x84,0xe0,0x7, 0xb7,0x14,0x57,0x87,0x57,0x11,0xe0,0xc, 0xab,0xc4,0xe0,0x6,
+0xb3,0x54,0xe0,0x7, 0xb7,0xa4,0xe0,0x7, 0xb7,0x34,0x57,0xd, 0xc7,0x1, 0xe2,0x0,
+0xcf,0xa, 0x77,0xd, 0xe7,0xf8,0x1, 0xf5,0xe8,0x55,0x4f,0x8e,0x57,0x8, 0x3f,0xfe,
+0x5, 0x85,0xe8,0x55,0x6f,0xe, 0xef,0xfd,0xdd,0x86,0x57,0x8c,0xe0,0x1, 0x27,0xbd,
+0x3a,0xe0,0xc2,0xb6,0x15,0xa, 0x14,0x80,0x3c,0x65,0xe0,0x2, 0xd0,0xa4,0x3c,0x60,
+0xe0,0x51,0x12,0x2e,0xe0,0x1, 0x15,0xc, 0xe0,0x1, 0x14,0xff,0xe0,0x0, 0xc4,0x70,
+0xe0,0x2, 0xd0,0x99,0x3b,0x64,0x39,0x63,0x3b,0xe4,0x8f,0xc6,0xe2,0x0, 0xcf,0x89,
+0x2, 0x9e,0xe0,0xd, 0x3a,0x9f,0xe4,0x0, 0xc7,0x86,0x16,0x1, 0x3f,0x97,0xe0,0x3,
+0xc7,0xa4,0x8f,0x8f,0xae,0xd, 0x3e,0xef,0xe2,0x1, 0xc6,0xfd,0xe0,0x2, 0x2e,0xd3,
+0x3c,0x63,0xe4,0x0, 0xc4,0xe, 0x3d,0xe0,0xe0,0x0, 0xc5,0xf0,0x15,0xe, 0x3c,0xe6,
+0x3c,0x1b,0xc1,0x81,0xe0,0x2, 0xd0,0x2b,0xe2,0x1, 0xc1,0xff,0xc3,0xe, 0xe0,0x52,
+0x16,0xba,0x3e,0xf6,0x1, 0xdb,0x3b,0xe0,0xc3,0xac,0x13,0x0, 0xe1,0x80,0x8e,0x97,
+0xe0,0x0, 0x26,0xda,0x3e,0x60,0xc6,0x36,0x12,0x80,0xe1,0x80,0x8f,0x9c,0x3f,0x65,
+0xe2,0x1, 0xc7,0x7f,0xe0,0x2, 0x2f,0xcb,0x3e,0x60,0xc6,0x36,0x3e,0x15,0x15,0x81,
+0xad,0x8c,0x3e,0x63,0x3d,0x60,0xe4,0x0, 0xc6,0xe, 0xe0,0x0, 0xc5,0x70,0x3e,0x1a,
+0x15,0xe, 0x3c,0xea,0x3c,0xb6,0x3d,0xe0,0xe0,0x3, 0xc5,0x88,0x3c,0x9b,0x3c,0x6c,
+0x76,0x83,0x77,0x2, 0x77,0x81,0xe0,0x1, 0xdf,0xfa,0x57,0x2, 0x3e,0x68,0x95,0x8c,
+0xe0,0x8, 0x32,0xa2,0xaf,0x4c,0xe0,0x28,0x15,0x38,0x96,0x1c,0x3d,0x18,0x57,0x81,
+0xb5,0x8a,0xe0,0x28,0x14,0x90,0xb6,0x1a,0xe0,0x27,0x15,0x72,0x3d,0x15,0xaf,0x8a,
+0xe0,0x27,0x15,0x5e,0x3c,0x98,0x3d,0x15,0xe0,0x8, 0x32,0xa1,0xaf,0x8a,0xe0,0x32,
+0x15,0x10,0xb5,0x89,0x3d,0x18,0xb6,0x19,0xe0,0x27,0x14,0xfc,0x3c,0x98,0x14,0x1,
+0xb4,0xa, 0xe0,0x27,0x15,0x68,0x3a,0x9a,0xac,0x5, 0x56,0x83,0xb7,0x89,0x3e,0xf8,
+0xe0,0x1, 0x1, 0xfc,0x3d,0x6e,0x3c,0xef,0x3c,0x6d,0xe0,0x0, 0xd8,0xf4,0xc1,0x81,
+0xe2,0x1, 0xc1,0xff,0xc3,0x1, 0xe2,0x0, 0xcb,0xa, 0xe7,0xff,0x1, 0xa1,0x3b,0x63,
+0xe4,0x0, 0xc3,0xe, 0x12,0x80,0x3f,0xe5,0xe2,0x1, 0xc7,0xff,0x3f,0xf2,0xe0,0x1,
+0x4, 0xf5,0x39,0x60,0x3a,0xe0,0xe0,0x0, 0xc1,0x70,0xe0,0x1, 0xc2,0xfc,0x13,0xe,
+0x3c,0xe2,0x3c,0x64,0x3d,0x66,0xe0,0x1, 0xdf,0xaa,0xc1,0xe, 0x3a,0xf2,0xc2,0xe,
+0x1, 0xf8,0xe8,0x55,0x69,0x8e,0x17,0x80,0xe8,0x32,0x6f,0xfa,0xe0,0x4, 0xc0,0x12,
+0xb, 0xe1,0xe2,0x0, 0xcf,0x2, 0x1, 0x8e,0x57,0x4, 0xe2,0x0, 0xcf,0x3, 0xe7,0xfa,
+0x5, 0xe1,0x56,0xaf,0x57,0x30,0x54,0xb3,0x55,0x34,0x36,0xa1,0x37,0x21,0xe7,0xfd,
+0x0, 0xb8,0x15,0x0, 0x3c,0xea,0x3f,0x6a,0x3e,0xea,0xe7,0xfd,0x0, 0xb2,0x16,0x80,
+0xe7,0xfd,0x0, 0xc4,0x17,0x0, 0xe7,0xfd,0x0, 0xc8,0xe0,0xd, 0x31,0x22,0xe0,0x28,
+0x17,0x38,0x3f,0x1d,0xe0,0xe, 0xd, 0x9c,0xe7,0xfd,0x0, 0xc8,0x3f,0x6d,0xe4,0x0,
+0xc7,0x18,0xc6,0x81,0x3a,0x1e,0x57,0x5, 0xaf,0x94,0xaf,0x4, 0x57,0x86,0x57,0xb,
+0xaf,0xa4,0xaf,0x34,0x57,0x92,0x57,0x13,0xb7,0xb4,0xb7,0x44,0x57,0x90,0x57,0x9,
+0xb7,0xe4,0xb7,0x74,0x57,0x8a,0x57,0x4, 0xe0,0x1, 0xb7,0x84,0xe0,0x1, 0xb7,0x14,
+0x57,0x87,0x57,0x11,0xae,0x82,0xab,0xc4,0xb3,0x54,0xe0,0x1, 0xb7,0xa4,0xe0,0x1,
+0xb7,0x34,0xe7,0xfd,0x0, 0xe4,0x2f,0xa9,0xe0,0x5, 0xd, 0x8c,0xe0,0xa, 0x31,0x22,
+0xe0,0x28,0x16,0x90,0x3e,0x9a,0xe0,0x28,0x17,0x38,0x3f,0x1a,0x55,0xd, 0xe0,0xd,
+0xd, 0x9c,0xe0,0xd, 0x31,0x21,0xe0,0xe, 0xd, 0x9c,0xe0,0x27,0x17,0x7c,0x3f,0x1d,
+0xb7,0x8e,0xe0,0x27,0x17,0x72,0x3f,0x12,0xaf,0x8e,0xe0,0x27,0x17,0x5e,0x39,0x1e,
+0xaf,0x82,0xe0,0x32,0x17,0x90,0x17,0x1, 0x3f,0x9d,0xb7,0xf, 0xe0,0x27,0x17,0xe8,
+0x3f,0x9a,0xaf,0xf, 0xe7,0xfd,0x0, 0xbb,0xe2,0x0, 0xcf,0x81,0xe7,0xfd,0x1, 0xb7,
+0xe0,0x27,0x17,0xde,0x3f,0x92,0x8f,0x8f,0xe2,0x0, 0xcf,0x81,0xe7,0xfd,0x1, 0xaf,
+0xe8,0x55,0x4f,0x8f,0xe2,0x0, 0xcf,0x81,0xe7,0xfd,0x5, 0xa9,0xe0,0x27,0x17,0xf2,
+0x3f,0x92,0x8c,0x8f,0x2c,0x9a,0xe0,0xd, 0x31,0x22,0x3f,0xe2,0xe0,0x28,0x17,0x38,
+0xe4,0x0, 0xc7,0x8e,0x3d,0xe0,0x3f,0x1d,0xe0,0xe, 0xe, 0x8e,0xe0,0x3, 0xc5,0x88,
+0x3e,0x60,0x3f,0x9b,0xc6,0x2c,0xe0,0xf, 0xe, 0x9e,0x39,0x1c,0x17,0x81,0x16,0x81,
+0x76,0x8c,0xaf,0x82,0xe7,0xfd,0x0, 0x8b,0x3f,0xe2,0xe4,0x0, 0xc7,0xf8,0xe4,0x0,
+0xc4,0x98,0x3c,0x60,0x3c,0x9f,0xe0,0x28,0x17,0xc8,0x3c,0x9f,0x15,0x18,0xe0,0x0,
+0xc4,0x40,0xe0,0x1, 0xde,0xec,0x57,0xa5,0xe2,0x7, 0xcf,0xe7,0x5, 0xd5,0xe7,0xfc,
+0x0, 0xf6,0x3f,0xfc,0xe7,0xfd,0x1, 0xbc,0x3c,0x62,0xe4,0x0, 0xc4,0xe, 0x3e,0x60,
+0xe0,0x1, 0xc6,0x7c,0x15,0xe, 0x3c,0xe6,0x3c,0x1c,0xc1,0x1, 0xe0,0x1, 0xde,0xd7,
+0xe2,0x1, 0xc1,0x7f,0xe7,0xfd,0x0, 0xac,0xe2,0x0, 0xce,0x82,0xe7,0xfe,0x1, 0x89,
+0x3e,0xef,0x3d,0x6e,0x3c,0xef,0xe7,0xfe,0x0, 0x82,0xc2,0x81,0xe2,0x0, 0xca,0x8a,
+0xe7,0xfd,0x1, 0xad,0xe7,0xfe,0x0, 0x80,0x3c,0xe5,0xe4,0x0, 0xc4,0x8e,0x3e,0x60,
+0x3e,0xe0,0xe0,0x8, 0x3b,0x19,0xe0,0x1, 0xc6,0x7c,0xe0,0x0, 0xc6,0xf0,0x15,0xe,
+0x3c,0x9c,0x3c,0x1d,0xe0,0x1, 0xde,0xb3,0xc2,0x81,0xe7,0xfd,0x0, 0xf6,0x57,0x4,
+0xe2,0x0, 0xcf,0x1d,0xe7,0xfa,0x5, 0xad,0x17,0x0, 0xe7,0xfb,0x0, 0x91,0x8, 0xb2,
+0xe8,0xb, 0x49,0x73,0x14,0x80,0x31,0x21,0x3d,0x62,0xe0,0x32,0x14,0x52,0xe0,0x1,
+0xde,0xea,0x3d,0x62,0x14,0x80,0xe0,0x32,0x14,0x66,0x9, 0x21,0xe0,0x3d,0x0, 0xe3,
+0x8, 0xb7,0xe1,0xfe,0xc0,0x5c,0xe8,0x55,0x4e,0xe, 0xe8,0x55,0x49,0x8f,0x76,0x5,
+0xe0,0x51,0x13,0x2e,0xe8,0xb, 0x4a,0xf3,0x2e,0x26,0x21,0x83,0xe8,0x55,0x6e,0x15,
+0xdf,0xdf,0x3b,0xe5,0xe4,0x0, 0xc3,0x8e,0x3a,0x60,0xc2,0x1a,0x3d,0x67,0xe0,0x1,
+0x14,0xff,0x3c,0x64,0xe0,0x1, 0xde,0xc7,0x14,0x80,0x55,0x5, 0x3d,0xe4,0x3c,0x69,
+0xd9,0x4b,0x54,0x85,0x3d,0xe4,0x3d,0x65,0xd9,0x47,0xe0,0x51,0x17,0xae,0x11,0x0,
+0x3e,0xe8,0x3e,0x6f,0x15,0x8e,0x39,0x75,0xe0,0x0, 0x1, 0x55,0x3c,0xe0,0xc4,0x9a,
+0x15,0x0, 0x0, 0xb3,0x21,0x93,0xe0,0x51,0x17,0xae,0x17,0x0, 0x0, 0x9f,0x3f,0xee,
+0xe4,0x0, 0xc7,0x8e,0xc7,0x1, 0xe0,0x2, 0xc7,0x9c,0x3f,0x96,0xae,0x8f,0x3f,0xee,
+0xe2,0x1, 0xc7,0xff,0x3f,0xf5,0x4, 0xf4,0x0, 0xef,0x3f,0x63,0x16,0xff,0x0, 0xf8,
+0xe0,0x40,0x96,0xff,0xc7,0x1, 0x36,0xa4,0xe0,0x40,0xb6,0xff,0xe2,0x1, 0xc7,0x7f,
+0xe0,0x40,0x96,0xef,0x36,0xa4,0xe0,0x40,0xb6,0xef,0xc7,0x8e,0x56,0x85,0x3e,0xfe,
+0x1, 0xf0,0xe7,0xff,0x0, 0xb8,0xc4,0x8e,0x88,0xcc,0xe0,0x41,0x8c,0x29,0x38,0xf8,
+0x1, 0x19,0xc5,0x1, 0xe2,0x1, 0xc5,0x7f,0x3d,0x7d,0x1, 0xf6,0x3c,0x6d,0xe4,0x0,
+0xc4,0xe, 0x3d,0x6b,0x3c,0xec,0x3c,0x14,0x77,0x81,0x76,0x2, 0x76,0x83,0x75,0x84,
+0xe0,0x1, 0xde,0x25,0x56,0x83,0x57,0x81,0xc6,0x81,0x56,0x2, 0x55,0x84,0xe2,0x1,
+0xc6,0xff,0x3f,0x62,0xc7,0x1, 0x39,0x6e,0xe2,0x1, 0xc1,0x7f,0xc6,0xe, 0xe7,0xff,
+0x0, 0xac,0x3c,0xe0,0x3d,0x67,0xc4,0x9a,0xe0,0x53,0x14,0x46,0x77,0x81,0xe0,0x1,
+0xde,0xe, 0x57,0x81,0x29,0x98,0x3d,0x67,0xe0,0x51,0x14,0xae,0xe0,0x53,0x14,0x46,
+0xe0,0x1, 0xde,0x5, 0x15,0x14,0x3c,0xe3,0xe0,0x32,0x14,0x3e,0xe0,0x1, 0xde,0x4b,
+0x15,0x14,0x3c,0xe3,0xe0,0x32,0x14,0x2a,0xe0,0x1, 0xde,0x45,0x57,0x81,0x16,0x80,
+0xe0,0x2, 0x0, 0xd4,0xe8,0x55,0x4e,0x15,0x2e,0x7b,0xe0,0x32,0x14,0xe6,0x3d,0x6c,
+0xe0,0x32,0x14,0x52,0xe0,0x32,0x10,0xbe,0xe0,0x32,0x11,0xaa,0x0, 0xa1,0x3e,0xec,
+0xe4,0x0, 0xc6,0x8e,0xe0,0x2, 0xc6,0x9c,0x3e,0x96,0x8e,0x8d,0x39,0x7d,0x5, 0x97,
+0x3d,0xed,0xe4,0x0, 0xc5,0x86,0x3d,0x96,0xe0,0x3, 0xc5,0xa4,0x8d,0x8b,0xe2,0x0,
+0xcd,0x81,0x1, 0x8d,0x36,0xa1,0xe0,0xb, 0x3c,0x9d,0xb5,0xb, 0xe0,0xb, 0x3c,0x1d,
+0xb5,0xb, 0xe0,0xb, 0x38,0x9d,0x3e,0x93,0xb5,0xb, 0xb5,0xd, 0xc6,0x1, 0x3e,0xec,
+0xe2,0x1, 0xc6,0xff,0x39,0x7d,0x2, 0xdc,0xe8,0x55,0x4e,0xa4,0xe8,0x55,0x4f,0xe,
+0xc6,0xff,0xe2,0x1, 0xc6,0xff,0xc6,0xff,0x76,0x8b,0xe0,0x51,0x13,0xae,0xe8,0x55,
+0x4e,0xa5,0x77,0xa, 0xc6,0xff,0xe2,0x1, 0xc6,0xff,0xc6,0xff,0x3b,0x67,0x17,0x0,
+0x76,0x8c,0x3e,0xee,0x56,0x5, 0xe2,0x1, 0xc6,0xff,0x3e,0x7d,0xe7,0xff,0x5, 0xb1,
+0x16,0x80,0x3e,0x6d,0xe2,0x1, 0xc6,0x7f,0x39,0x7c,0xe7,0xff,0x5, 0xaa,0x3e,0x6d,
+0xe4,0x0, 0xc6,0xe, 0x76,0x87,0x3e,0xec,0xe0,0x2, 0xc6,0x9c,0x3e,0x96,0x8d,0x8d,
+0x8d,0x47,0x56,0x87,0x3d,0x7b,0xc6,0x81,0x1, 0xed,0xe0,0x51,0x15,0x2e,0x3d,0xee,
+0x3e,0x1a,0xe4,0x0, 0xc5,0x8e,0x3e,0xec,0x3d,0x9a,0xe0,0x2, 0xc6,0x9c,0x8a,0x8d,
+0x96,0x8b,0x95,0x9b,0x76,0x88,0x39,0xeb,0xe0,0x11,0x96,0xcc,0x75,0x89,0xe0,0x3,
+0x15,0x7e,0xe0,0x11,0x96,0x5c,0xe8,0xf3,0x4d,0xa0,0x52,0x8, 0x39,0xac,0x35,0xa5,
+0x3a,0x2d,0xe1,0x2b,0x3d,0xea,0xe0,0x41,0x3a,0x24,0xe0,0x23,0x15,0x68,0xe0,0x41,
+0x39,0xa3,0xe1,0x2b,0x3d,0xda,0x76,0x6, 0xe0,0xc, 0x3a,0x13,0x3e,0x7b,0xe0,0x1,
+0x3, 0x83,0xe0,0x8, 0x36,0x48,0xe0,0x9, 0x36,0x28,0x15,0x0, 0x77,0x81,0x76,0x2,
+0x76,0x83,0x77,0x4, 0xe0,0x1, 0xdd,0x39,0x15,0x90,0x57,0x81,0x56,0x2, 0x56,0x83,
+0x57,0x4, 0xe1,0x29,0x3c,0xeb,0x32,0xa1,0xe0,0x32,0x15,0xd2,0x3d,0x95,0x95,0x8b,
+0x3e,0x7b,0xe0,0x32,0x15,0xe6,0x3d,0x95,0xe0,0x0, 0x3, 0xea,0x94,0x8b,0xe0,0x32,
+0x15,0x52,0x3a,0x9a,0xb6,0x5, 0xe0,0x2, 0x15,0x80,0x56,0xa, 0xe1,0x29,0x3c,0xdb,
+0xe2,0x0, 0xce,0x5, 0x5, 0x82,0x34,0xc2,0x3e,0x6e,0xe4,0x0, 0xc6,0xe, 0x3e,0x16,
+0x8d,0xfc,0xe0,0x1, 0x8e,0xc, 0xe2,0x0, 0xcd,0x81,0xe0,0x0, 0x5, 0xd4,0x55,0xb,
+0x3d,0x7b,0xe0,0x0, 0x5, 0x50,0xe2,0x0, 0xce,0x1, 0xe0,0x0, 0x5, 0xcc,0x55,0x8c,
+0x3d,0xfc,0xe0,0x0, 0x5, 0x48,0xe2,0x1, 0xcc,0x80,0xe0,0x0, 0x2, 0xcb,0x16,0x10,
+0xe1,0x28,0x3c,0xec,0x56,0xa, 0xe2,0x0, 0xce,0x1, 0x1, 0x85,0xe2,0x0, 0xcc,0xed,
+0x2, 0x82,0x34,0x21,0xe0,0xc, 0x32,0xf, 0xe0,0x84,0x3a,0x58,0xe0,0xa4,0x3e,0x8,
+0xe0,0xc, 0x32,0xc8,0xe0,0xb, 0x32,0x28,0x3e,0x4b,0x15,0xfc,0x3d,0xdc,0x56,0x8,
+0x3e,0x7d,0x56,0x7, 0xe4,0x0, 0xc6,0xe, 0xe0,0xa, 0x3b,0x1c,0x5, 0xad,0x3e,0x9b,
+0xe0,0x11,0xb6,0xca,0xe0,0x8a,0x39,0xd8,0xe0,0xd, 0x31,0x8f,0xe0,0xaa,0x3e,0x88,
+0xe0,0xd, 0x35,0xc8,0x35,0x28,0x3e,0xca,0x55,0x86,0x55,0x9, 0x3e,0x16,0x3d,0x7b,
+0xe3,0xff,0xc6,0xfc,0x5, 0x9b,0x3e,0x9b,0xc7,0x1, 0xc3,0x8e,0xe0,0x11,0xb6,0xdc,
+0xe7,0xfe,0x0, 0xb9,0xe0,0x2, 0x14,0x80,0xe7,0xff,0x0, 0x8f,0xb4,0x8b,0xe7,0xff,
+0x0, 0x98,0xe2,0x1, 0xcc,0x9c,0xe7,0xff,0x5, 0xbc,0xe0,0x1, 0x14,0x1c,0x0, 0xc3,
+0xe0,0x1, 0x14,0x0, 0x0, 0xc0,0x3e,0xab,0x0, 0xd4,0x55,0x6, 0xe0,0xd, 0x3d,0x2d,
+0x0, 0xe4,0xe0,0x10,0x96,0x5f,0xc6,0x81,0x36,0x44,0xe0,0x40,0xb6,0x7f,0xe2,0x1,
+0xc6,0xff,0xe0,0x10,0x96,0x6f,0x36,0x44,0xe0,0x40,0xb6,0x6f,0x3e,0x6f,0xe0,0x2,
+0xc6,0xe, 0x8e,0xc, 0xe0,0x41,0xae,0x2f,0x3e,0x6f,0xe0,0x2, 0xc6,0xf, 0x8e,0xc,
+0xe0,0x41,0xae,0x1f,0x3e,0x6f,0xe0,0x2, 0xc6,0x10,0x8e,0xc, 0xe0,0x41,0xae,0xf,
+0x3e,0x6f,0xe0,0x2, 0xc6,0x11,0x8e,0xc, 0xe0,0x40,0xae,0x7f,0x3e,0x6f,0xe0,0x2,
+0xc6,0x12,0x8e,0xc, 0xe0,0x40,0xae,0x6f,0x39,0x7d,0xc7,0x8e,0x1, 0xd3,0xe0,0x1,
+0xc0,0x24,0xb, 0xe1,0xe8,0x12,0x56,0xeb,0xe8,0x12,0x56,0x6a,0x14,0x0, 0xe8,0x55,
+0x4c,0x8e,0xc6,0xdd,0xc6,0x6a,0xe0,0x51,0x17,0x2e,0x3f,0xe8,0x3c,0xff,0x1, 0x82,
+0x38,0x82,0xe0,0xe, 0xd, 0xb, 0xe2,0x0, 0xcd,0x23,0x5, 0x8b,0x3e,0xfa,0x5, 0x89,
+0xe2,0x0, 0xcd,0x96,0x5, 0x86,0x3e,0x7b,0x5, 0x84,0xc4,0x1, 0xe2,0x1, 0xc4,0x7f,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xc7,0xe, 0x0, 0xea,0xe4,0x0, 0xc4,0x2c,0xe0,0xf5,
+0x17,0xc8,0x3f,0x98,0xe0,0x28,0x17,0x0, 0xb7,0xf, 0xe0,0xf5,0x17,0x4a,0x3c,0x1e,
+0xe0,0x2, 0x17,0x0, 0xb7,0x8, 0x16,0x0, 0xae,0x4f,0x8f,0x59,0xaf,0x5f,0x8f,0x69,
+0xae,0x7f,0xaf,0x6f,0xe0,0xff,0x17,0x7f,0x96,0x89,0xb7,0x4f,0x97,0x19,0xe0,0x4,
+0xae,0x7f,0xb7,0x6f,0xe0,0x1, 0xb7,0xf, 0xe0,0x1, 0xb7,0x2f,0xe0,0x1, 0xb7,0x4f,
+0x17,0x0, 0xe0,0x1, 0xb7,0x5f,0xe0,0x1, 0xb7,0x6f,0xe0,0x2, 0xb7,0x1f,0xe0,0x2,
+0xb7,0x2f,0x97,0x59,0xb6,0xdf,0xe0,0x2, 0xb7,0x4f,0x97,0x69,0xb6,0xff,0xe0,0x1,
+0xb6,0x9f,0xe0,0x1, 0xb6,0xbf,0x16,0x81,0xe0,0x1, 0xb6,0xff,0xe0,0x2, 0xb6,0x8f,
+0xe0,0x2, 0xb7,0x5f,0x38,0x82,0x8, 0xb7,0xc0,0x4e,0xe8,0x12,0x53,0xeb,0xe8,0x12,
+0x55,0x6a,0xe8,0x55,0x4b,0x19,0x15,0x94,0x16,0x0, 0x73,0x91,0xc3,0xce,0x75,0x12,
+0xc5,0x4e,0xe0,0xf5,0x11,0xc8,0x76,0xf, 0x73,0x10,0x75,0x95,0x73,0x98,0x75,0x19,
+0xe8,0xb, 0x4f,0xf3,0x53,0x8f,0x3f,0xf7,0x2, 0x83,0xc0,0x32,0xb, 0xe1,0x57,0x8f,
+0xe0,0x51,0x14,0xae,0xe4,0x0, 0xc7,0x8e,0xe0,0x5, 0x3f,0x99,0x89,0x45,0xe2,0x0,
+0xc9,0x9, 0xe0,0x5, 0x2, 0x8d,0x93,0x85,0xe0,0x0, 0x23,0xf8,0x56,0x91,0xe1,0x2d,
+0x3b,0xad,0x76,0x93,0x97,0x95,0xe0,0x0, 0x27,0xf5,0x53,0x12,0xe1,0x26,0x3f,0xa6,
+0x73,0x14,0x3e,0xe2,0xe4,0x0, 0xc6,0x86,0xe0,0x54,0x17,0x52,0x3f,0x1d,0x8f,0xe,
+0xe2,0x0, 0xcf,0x2, 0xe0,0x7, 0x1, 0x91,0x3f,0x62,0xe4,0x0, 0xc7,0x2c,0x3f,0x13,
+0xe0,0x4, 0x8e,0xfe,0xe0,0x0, 0x26,0xe2,0xe0,0x1, 0x93,0x1e,0xe0,0x1, 0x92,0x2e,
+0xe0,0x6, 0x3b,0xa6,0x3e,0xe2,0xe0,0x41,0x3b,0x26,0x8f,0x55,0xe4,0x0, 0xc6,0xac,
+0x73,0xe, 0xe0,0xa, 0x39,0x9d,0x93,0x55,0x77,0x1, 0xe0,0x4, 0x3f,0xa4,0x8c,0xda,
+0x73,0xc, 0xe0,0x41,0x3a,0x24,0x53,0x1, 0x94,0x65,0x3c,0xf6,0x74,0xd, 0x95,0xfa,
+0xe0,0x1, 0x96,0xa, 0x8f,0x65,0x3, 0x82,0xab,0x5a,0x3e,0x93,0x8d,0x6d,0x3d,0x7e,
+0x3, 0x82,0xaf,0x6d,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0xe0,0x9, 0x39,0x9d,0x8d,0x19,
+0xe2,0x1, 0xcd,0x79,0x2, 0x83,0xc5,0x1, 0xad,0x19,0x3c,0x62,0x76,0x87,0x77,0x8,
+0x76,0x9, 0x75,0x8a,0x77,0x8b,0xd5,0x3d,0x56,0x87,0x57,0x8, 0x56,0x9, 0x55,0x8a,
+0x57,0x8b,0x24,0x5, 0xe0,0xa, 0x39,0x9d,0x8d,0xa, 0x75,0x15,0x3e,0x93,0x88,0xbd,
+0xe0,0x2, 0x28,0xf4,0x55,0x10,0x3b,0xab,0x3f,0xac,0xe2,0x0, 0xcd,0x7, 0xe0,0x41,
+0x3b,0xa7,0xe0,0x41,0x3f,0xaf,0x3b,0x9f,0x5, 0x96,0xe2,0x0, 0xcb,0xd0,0x16,0x9e,
+0x17,0x8f,0xe0,0x6f,0x3c,0x2d,0x0, 0x99,0x17,0x1, 0x77,0x13,0xe7,0xff,0x0, 0x8c,
+0x14,0x81,0x74,0x94,0xe7,0xff,0x0, 0x8f,0x93,0x5e,0x92,0x6e,0xe0,0x6, 0x3b,0xa6,
+0xe7,0xff,0x0, 0xa2,0x55,0x90,0xe2,0x0, 0xcd,0x84,0x5, 0x9c,0xe2,0x0, 0xcb,0xbb,
+0x16,0x8a,0x17,0x94,0xe0,0x6f,0x3a,0x2d,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0x3e,0x93,
+0x8e,0x1d,0xe2,0x0, 0xce,0x11,0x5, 0x98,0x55,0x1, 0xe2,0x0, 0xcd,0x78,0xe0,0x2,
+0x5, 0x92,0xe2,0x0, 0xcb,0xf7,0xe0,0x2, 0x2, 0x2c,0x17,0x32,0xaf,0xd, 0xe0,0x0,
+0x0, 0xcc,0x56,0x10,0xe2,0x0, 0xce,0x2, 0xe0,0x6, 0x5, 0x86,0xe2,0x0, 0xcb,0xb2,
+0x16,0x8f,0x17,0x87,0x0, 0xc7,0x8e,0xd, 0x55,0x81,0xe4,0x0, 0xc6,0x3, 0x35,0xa1,
+0x3e,0x7b,0xe0,0x1, 0x3, 0x65,0x53,0x1, 0xe2,0x0, 0xcb,0x28,0xe0,0x1, 0x5, 0xe0,
+0x3e,0x66,0x36,0x41,0xae,0xd, 0x3e,0xe2,0x53,0x81,0xe4,0x0, 0xc6,0xac,0xe2,0x0,
+0xcb,0xcf,0x3e,0x93,0xe0,0x1, 0x2, 0xe0,0x8e,0x7d,0xc6,0x1, 0xae,0x7d,0x3e,0xe2,
+0xe4,0x0, 0xc6,0xac,0x3e,0x93,0x8e,0x5d,0xe2,0x0, 0xce,0x50,0x5, 0x9d,0x8d,0xfd,
+0xe2,0x0, 0xcd,0x82,0x2, 0x99,0x55,0x81,0xc5,0x94,0x3d,0xfc,0x4, 0x5, 0x8e,0xed,
+0x37,0x21,0x3f,0x7d,0x3, 0x11,0x57,0xe, 0x3f,0x14,0xe2,0x0, 0xcf,0x63,0xe0,0x1,
+0x5, 0xc6,0x54,0x8e,0x32,0x42,0x34,0xc2,0x74,0x8e,0x3f,0x62,0xe4,0x0, 0xc7,0x2c,
+0x16,0x82,0x3f,0x13,0xae,0xce,0x57,0xe, 0x3f,0x14,0xe2,0x0, 0xcf,0x3, 0xe0,0x1,
+0x5, 0xe8,0x93,0x5, 0xe2,0x0, 0xcb,0x31,0x73,0x6, 0xe0,0x1, 0x5, 0xe6,0x53,0x98,
+0x3b,0x77,0xe0,0x1, 0x2, 0xe2,0x97,0x15,0xe2,0x0, 0xcf,0x31,0xe0,0x1, 0x5, 0xdd,
+0x55,0x19,0xe1,0x2e,0x3f,0x1a,0x53,0xd, 0x16,0x3, 0xe0,0x88,0x3b,0x5c,0x3d,0x60,
+0xc5,0x8, 0xb4,0x9a,0x55,0x8c,0x3d,0xbc,0x3c,0x1b,0x3d,0xe2,0xe4,0x0, 0xc5,0xac,
+0x74,0x4, 0xe0,0xa, 0x39,0x9b,0x53,0x84,0xe0,0x2, 0x94,0x4a,0xe0,0x2, 0x94,0xda,
+0x3c,0x77,0x2, 0x5, 0x1, 0x8a,0x55,0x5, 0x3c,0xfa,0x5, 0x87,0x3d,0x93,0x95,0xcb,
+0xe2,0x0, 0xcd,0xbb,0xe0,0x3, 0x5, 0x9d,0x3e,0x60,0xc6,0x18,0x3e,0xec,0xe0,0xd,
+0xe, 0xd, 0x3d,0xe0,0xe0,0x7, 0x3e,0x9d,0xe0,0x26,0x3e,0x7c,0xc5,0x84,0x3c,0x76,
+0xe0,0xb, 0xb, 0x17,0x2, 0x4, 0x1, 0x8c,0x3c,0xf7,0x5, 0x8a,0x3d,0xe2,0xe4,0x0,
+0xc5,0xac,0x3d,0x93,0x95,0xcb,0xe2,0x0, 0xcd,0xbb,0xe0,0x3, 0x5, 0x86,0xe0,0xb,
+0x3c,0x99,0x56,0x4, 0xe0,0x2a,0x3c,0x78,0x3d,0x7c,0x2, 0x5, 0x1, 0x8d,0x56,0x85,
+0x3d,0xfd,0x5, 0x8a,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0x3e,0x93,0x96,0xcd,0xe2,0x0,
+0xce,0xbb,0xe0,0x2, 0x5, 0xf5,0x16,0x3, 0x3d,0xe8,0x3d,0xbc,0xe0,0x8c,0x3c,0xdc,
+0x55,0xd, 0x3e,0x1b,0x55,0x8c,0x35,0x4e,0x35,0xa2,0x3d,0xca,0x3e,0x7b,0x55,0xd,
+0x35,0x22,0x2, 0x6, 0xe0,0x0, 0x1, 0xfc,0x3e,0xfa,0xe0,0x0, 0x5, 0xf9,0xe2,0x0,
+0xc8,0x80,0x16,0x8a,0xe0,0x6d,0x39,0xaf,0x3f,0xed,0x56,0x8e,0x3e,0x94,0xe2,0x0,
+0xce,0xe3,0x2, 0x90,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0x3e,0x93,0x96,0xcd,0xe2,0x0,
+0xce,0x9d,0x2, 0x88,0x53,0x1, 0x16,0xb2,0xe2,0x0, 0xcb,0x51,0xe0,0x6d,0x3c,0xaf,
+0x3f,0xed,0x27,0xa, 0xe2,0x0, 0xc8,0x81,0x1, 0x87,0x3f,0xe2,0xe4,0x0, 0xc7,0xac,
+0x3f,0x93,0xa8,0x8f,0x17,0x80,0x3f,0x62,0xe4,0x0, 0xc7,0x2c,0x3f,0x13,0x8e,0x8e,
+0xe0,0x0, 0x2e,0xe1,0x16,0x81,0xae,0x8e,0xe0,0x0, 0x0, 0xdd,0x3e,0xe2,0xe4,0x0,
+0xc6,0xac,0x3e,0x93,0x8e,0x5d,0xe2,0x0, 0xce,0x18,0xe7,0xfe,0x2, 0x9e,0x16,0xa,
+0xe7,0xfe,0x0, 0x9a,0x16,0x0, 0xe7,0xfe,0x0, 0xa3,0x12,0x0, 0x72,0xe, 0xe7,0xfe,
+0x0, 0xbe,0x55,0x81,0xe2,0x0, 0xcd,0xee,0x5, 0x87,0xe2,0x0, 0xcb,0xed,0x2, 0x18,
+0x17,0x28,0xe7,0xfd,0x0, 0xed,0x56,0x1, 0xe2,0x0, 0xce,0x64,0x5, 0x87,0xe2,0x0,
+0xcb,0xe3,0x2, 0xe, 0x17,0x1e,0xe7,0xfd,0x0, 0xe3,0x57,0x1, 0xe2,0x0, 0xcf,0x50,
+0x5, 0x8c,0xe2,0x0, 0xcb,0xc5,0x2, 0x4, 0x17,0x14,0xe7,0xfd,0x0, 0xd9,0xe0,0xff,
+0x17,0x7f,0xb7,0x7d,0xe7,0xfe,0x0, 0xa1,0x8f,0xd, 0xe2,0x0, 0xcf,0x14,0xe7,0xfe,
+0x5, 0x9c,0xc7,0x7e,0xe7,0xfd,0x0, 0xcc,0x17,0x80,0xe7,0xfe,0x0, 0x9c,0x12,0x0,
+0x72,0xe, 0xe7,0xfe,0x0, 0x98,0x17,0x1, 0xe7,0xfe,0x0, 0xa7,0x3e,0xe2,0xe4,0x0,
+0xc6,0xac,0xe8,0xf3,0x4e,0xe, 0x3e,0x93,0x8d,0x8d,0xe0,0x1, 0x2e,0x30,0xe7,0xff,
+0x20,0xa4,0xe2,0x0, 0xcd,0x8a,0xe0,0x1, 0x5, 0xa2,0x16,0xa, 0xae,0xd, 0xe7,0xff,
+0x2f,0x13,0x3d,0xe0,0x3b,0x62,0xe0,0x1, 0x95,0x4b,0xe4,0x0, 0xc3,0x2c,0xc5,0x98,
+0x95,0x9b,0xe0,0xe, 0x39,0x96,0x3c,0x9b,0xe0,0x28,0x3c,0x7a,0xe0,0xb, 0x34,0x4f,
+0x16,0x0, 0x75,0x97,0x3d,0xe0,0x76,0x16,0xc5,0xac,0x95,0x9b,0x3c,0x9b,0xe0,0x28,
+0x3c,0x7c,0xe0,0xd, 0x34,0x2f,0xe0,0xc, 0x34,0xc1,0x3e,0x4d,0x56,0x8e,0x55,0x86,
+0x3e,0x94,0xb6,0xce,0x34,0x1, 0x96,0x95,0xe0,0x1, 0xb5,0x9e,0xe0,0x1, 0xb6,0xae,
+0x8e,0x8e,0xe0,0x2, 0xb4,0x4e,0x3e,0xff,0xe0,0x2, 0xb6,0x5e,0x3, 0x82,0xaf,0x8e,
+0x3c,0x62,0xd3,0x6f,0x24,0x5, 0x56,0x15,0xe0,0xf, 0x39,0x96,0xae,0xf, 0x3f,0xe2,
+0xe4,0x0, 0xc7,0xba,0xe0,0x60,0x17,0x36,0x3f,0x1f,0x8f,0xae,0xe2,0x0, 0xcf,0x8a,
+0x3f,0xe2,0xe4,0x0, 0xc7,0xac,0x1, 0x87,0x8f,0xe, 0x27,0x5, 0xe0,0xe, 0x39,0x9f,
+0x16,0x81,0xae,0x8e,0x3f,0x93,0x8d,0xf, 0x56,0x8e,0x94,0x85,0x3d,0x7d,0x97,0x15,
+0xe0,0x1, 0x5, 0xaa,0x3d,0x74,0xe0,0x1, 0x5, 0xa7,0x8e,0xbf,0xe0,0x1, 0xb4,0xbf,
+0xe0,0x1, 0xb7,0x4f,0x2e,0xa5,0x96,0xdf,0x3c,0xad,0x96,0xef,0xe2,0x0, 0xcc,0x80,
+0x3f,0x2d,0xe0,0x1, 0xb4,0xdf,0x3e,0xe9,0xe0,0x1, 0xb7,0x6f,0x3, 0x2, 0xc6,0x8f,
+0x3f,0xe2,0xe4,0x0, 0xc7,0xac,0x36,0x84,0x3f,0x93,0xe0,0x0, 0x26,0xec,0xe0,0x1,
+0xb6,0xff,0xe2,0x0, 0xcf,0x0, 0x3e,0xee,0x3, 0x2, 0xc6,0x8f,0x3f,0xe2,0x36,0x84,
+0xe4,0x0, 0xc7,0xac,0xe0,0x0, 0x26,0xf0,0x3f,0x93,0xe0,0x2, 0xb6,0x8f,0xe4,0x0,
+0xc1,0x2c,0x57,0x13,0xe2,0x0, 0xcf,0x1, 0x1, 0x5, 0xe0,0xf, 0x39,0x92,0x97,0xdf,
+0xb7,0x85,0x57,0x94,0xe2,0x0, 0xcf,0x81,0x1, 0x5, 0xe0,0xf, 0x39,0x92,0x97,0xef,
+0xb7,0x95,0x39,0x13,0x8f,0xc2,0x2f,0x83,0x17,0x81,0xaf,0xc2,0x57,0x8f,0xc7,0x81,
+0xe2,0x1, 0xc7,0xff,0x77,0x8f,0xe7,0xfa,0x0, 0xdd,0xe2,0x0, 0xcd,0x81,0xe7,0xfd,
+0x5, 0xf2,0xc5,0xfe,0xad,0x8d,0xe7,0xfd,0x0, 0xee,0xe7,0xfd,0x20,0xf6,0xe0,0x4,
+0x8e,0x7d,0x2e,0x16,0x96,0xcd,0xe2,0x0, 0xce,0x84,0x2, 0x92,0x3b,0xe0,0xe0,0x1,
+0x93,0x47,0xc3,0x98,0x93,0x97,0xe0,0xd, 0x3c,0xa7,0xe1,0x2c,0x3c,0x76,0xe2,0x0,
+0xce,0x0, 0x2, 0x5, 0x2e,0x5, 0xe2,0x3, 0xce,0x90,0x5, 0x82,0x17,0x9e,0xe2,0x0,
+0xcd,0x9e,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0x5, 0x85,0x3e,0x93,0x16,0x1e,0xe7,0xfe,
+0x0, 0xb7,0xe2,0x0, 0xcd,0x81,0xe7,0xfd,0x5, 0xc6,0x3e,0x93,0x0, 0xd3,0xe0,0x0,
+0x17,0xe4,0xe7,0xfd,0x0, 0xc0,0x17,0xb2,0xe7,0xfd,0x0, 0xbd,0x17,0xa8,0xe7,0xfd,
+0x0, 0xba,0xe2,0x0, 0xcc,0x80,0x4, 0xd, 0x16,0x81,0xe0,0x1, 0xb6,0xff,0x3f,0xe2,
+0xe4,0x0, 0xc7,0xac,0x16,0x80,0x3f,0x93,0xe0,0x1, 0xb6,0xdf,0xe7,0xff,0x0, 0x8b,
+0x16,0xff,0x0, 0xf4,0xe2,0x0, 0xcf,0x0, 0xe0,0xe, 0x39,0x9f,0x4, 0xa, 0x16,0x81,
+0x3f,0x93,0xe0,0x2, 0xb6,0x8e,0x17,0x0, 0xe0,0x1, 0xb7,0x6f,0xe7,0xff,0x0, 0x89,
+0x16,0xff,0x0, 0xf7,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0x3e,0x93,0xe0,0x1, 0x96,0x5d,
+0xe0,0x1, 0x90,0xfd,0xe0,0x1, 0x97,0xbd,0xe0,0x41,0x3b,0x21,0xe0,0x41,0x3c,0x2c,
+0xe0,0x1, 0x95,0xcd,0xe0,0xf, 0x3c,0xaf,0x3c,0x76,0x77,0x8e,0xe0,0xb, 0x3f,0x2b,
+0x73,0x13,0xe0,0x0, 0x4, 0x78,0xe0,0x0, 0x27,0xfa,0x3e,0x21,0x14,0x1, 0xe0,0x1,
+0xb6,0x5d,0xe0,0x41,0x3e,0x2c,0xe0,0x4, 0xac,0x7d,0xe0,0x2c,0x3b,0x1c,0x3b,0x62,
+0xe4,0x0, 0xc3,0x2c,0x3b,0x13,0xe0,0x1, 0x97,0xe6,0xe0,0x2, 0x94,0x6, 0xe0,0x41,
+0x3b,0xaf,0xe0,0x41,0x3a,0x28,0x3b,0xf4,0xe0,0x0, 0x4, 0x63,0xe0,0x0, 0x25,0xe5,
+0x3f,0xa8,0x13,0x81,0xe0,0x41,0x3e,0xaf,0xe0,0x2d,0x3a,0x1d,0xe0,0x1, 0xb7,0xe6,
+0xe0,0x4, 0xab,0xf6,0x3b,0x62,0xe4,0x0, 0xc3,0x2c,0x53,0x8e,0x3b,0x13,0x97,0xd6,
+0x3b,0x9f,0x97,0xe6,0x38,0x97,0x3d,0x9f,0x3c,0x1b,0x15,0x80,0xe0,0x21,0x38,0xeb,
+0xe0,0x28,0x3c,0x6b,0xe8,0x12,0x57,0xeb,0xe8,0x12,0x55,0xea,0xe1,0x21,0x38,0xdf,
+0xe1,0x28,0x3c,0x5b,0x26,0x5, 0xe0,0xc, 0x38,0xa9,0xe0,0x2, 0xb6,0x16,0x3e,0x62,
+0xe4,0x0, 0xc6,0x2c,0x26,0x87,0xe0,0xd, 0x39,0x9c,0xe0,0x6, 0x3c,0x2e,0xe0,0x2,
+0xb3,0x2d,0x3e,0x13,0xe0,0x1, 0x96,0xdc,0x53,0x13,0xe0,0x41,0x3e,0xad,0x3b,0x7d,
+0xe0,0x1, 0xb4,0xbc,0xe0,0x1, 0xb7,0x4c,0x2, 0x2b,0xb0,0x85,0xe4,0x0, 0xc1,0x2c,
+0xe0,0xd, 0x39,0x92,0xe0,0x1, 0x97,0xed,0xe0,0x41,0x3f,0xaf,0x3a,0x7f,0x2, 0x2a,
+0xb4,0x15,0x39,0x13,0x17,0x81,0xaf,0xb2,0x17,0x80,0xaf,0xc2,0xe2,0x0, 0xcd,0x13,
+0x97,0x85,0xb7,0xd2,0x97,0x95,0xb7,0xe2,0x5, 0xa7,0x17,0x8a,0xaf,0x82,0xe7,0xfe,
+0x0, 0x8f,0x16,0x0, 0x38,0xec,0xe7,0xff,0x0, 0x94,0x56,0xe, 0x0, 0xfc,0x16,0x80,
+0x3c,0x6d,0xe7,0xff,0x0, 0xa9,0x3e,0xeb,0x3c,0x6b,0xe7,0xff,0x0, 0xa5,0xe0,0x2,
+0x96,0x9c,0x3c,0x9d,0x16,0x80,0xe0,0x29,0x3c,0xed,0xe1,0x29,0x3c,0xdf,0xb4,0x85,
+0x0, 0xce,0xe0,0x2, 0x97,0xad,0x3f,0x1f,0x17,0x80,0xe0,0x2e,0x3f,0x6f,0xe1,0x2e,
+0x3f,0x5b,0xb7,0x15,0x0, 0xcf,0xe2,0x0, 0xcd,0x1, 0xe7,0xfd,0x5, 0xe9,0xc5,0x7f,
+0xad,0x2, 0xe7,0xfd,0x0, 0xe5,0xe7,0xfd,0x2f,0x63,0x3c,0xe5,0x3c,0x62,0xdb,0xee,
+0xe7,0xfd,0x0, 0xde,0x3f,0xe1,0xe7,0xf9,0x0, 0xe1,0xe0,0xf5,0x17,0x9c,0xe0,0xf9,
+0x17,0x2, 0xe0,0xf5,0x15,0xc4,0x16,0x7f,0xe0,0xff,0x16,0xff,0xb6,0xf, 0xc7,0x84,
+0xe0,0x40,0xb6,0x1f,0x3f,0xfb,0xb6,0x8e,0xc7,0x4, 0xe0,0x40,0xb6,0x9e,0x1, 0xf7,
+0x38,0x82,0x8, 0xb7,0xc0,0x7e,0x17,0x80,0xe8,0xf9,0x6f,0x80,0xe0,0x51,0x11,0x2e,
+0x89,0xc2,0xe2,0x0, 0xc9,0x89,0x2, 0xaa,0x3f,0xe3,0xe4,0x0, 0xc7,0x86,0xe0,0x51,
+0x17,0x2e,0x3f,0x9e,0xe0,0x3, 0xc7,0xa4,0x8c,0x8f,0x2c,0x8a,0xe0,0xf5,0x17,0x9c,
+0x31,0xa2,0x39,0x9f,0x97,0x82,0xb7,0x83,0x97,0x92,0xb7,0x93,0x0, 0x97,0xe2,0x0,
+0xcc,0x82,0x1, 0xa1,0x31,0xa2,0xe0,0xf5,0x17,0x9c,0xe0,0xf9,0x17,0x2, 0x3f,0x13,
+0x39,0x9f,0xe0,0x2, 0xe, 0xd, 0x97,0x83,0xb6,0x3, 0xe0,0xf, 0x3e,0x2f,0xb7,0x8e,
+0x97,0x93,0xb6,0x93,0xe0,0xf, 0x3e,0xaf,0xb7,0x9e,0xc1,0xe, 0xe0,0x52,0x17,0x3a,
+0x39,0x7e,0x1, 0xcf,0xe8,0xf9,0x4f,0x80,0xe0,0x1, 0x27,0xdb,0xc0,0x2, 0xb, 0xa1,
+0xe7,0xaa,0x0, 0xb1,0xe2,0x0, 0xcc,0x81,0x1, 0xf1,0xe0,0xf, 0x31,0xa2,0xe0,0xf9,
+0x17,0x2, 0x3f,0x1f,0x96,0x8e,0xe2,0xff,0xce,0xff,0xe0,0x1, 0x1, 0x31,0x96,0x1e,
+0xe0,0x41,0x3c,0x2d,0xe0,0x41,0x3d,0xac,0xe0,0xe, 0x3c,0x1b,0xe2,0x0, 0xcf,0x2,
+0xe0,0x1, 0x5, 0x26,0xe0,0xf5,0x17,0x1c,0xe8,0xc, 0x4d,0x7f,0x3f,0x9e,0xe8,0xd,
+0x4a,0x80,0x35,0x28,0xe0,0xf, 0xb, 0x7, 0x3a,0xca,0xe8,0xd, 0x4d,0xd, 0xe8,0xd,
+0x4a,0xe, 0xe0,0xe, 0x3e,0x96,0x35,0x28,0xe2,0x0, 0xcf,0x0, 0x3a,0x4a,0xc2,0xff,
+0xc2,0x7f,0xe0,0xf, 0x3e,0x17,0xe0,0x0, 0x5, 0x41,0x3f,0x75,0xe0,0x1, 0x3, 0x17,
+0xe2,0x0, 0xcf,0x80,0x5, 0x8, 0x3f,0xf4,0x3, 0xa, 0x15,0x0, 0xe0,0x1, 0x0, 0x96,
+0x3f,0xe4,0x0, 0xb9,0x17,0x80,0x15,0x0, 0xe0,0x0, 0x0, 0xc5,0x3f,0xe4,0x14,0x81,
+0x0, 0xfb,0x3b,0xa9,0xe0,0x0, 0x0, 0xd8,0x13,0x80,0xe0,0x0, 0x0, 0xdb,0xe4,0x0,
+0xcd,0x1, 0x3d,0x59,0x25,0x1f,0xe0,0xe, 0x3f,0xa7,0xe0,0x41,0x3f,0x2e,0xb7,0x92,
+0xe0,0x8e,0x3f,0x48,0xe0,0xa, 0x35,0x8f,0x3c,0x6e,0x3c,0xef,0x76,0x81,0xe0,0x1,
+0xd7,0x8c,0x56,0x81,0xe2,0x0, 0xce,0x80,0x5, 0x9, 0x3b,0x19,0xe2,0x0, 0xcb,0x0,
+0x5, 0x7, 0xe0,0x26,0x3b,0x55,0xb3,0x2, 0x0, 0xbd,0x3b,0x29,0x0, 0xf8,0x13,0x0,
+0x0, 0xfb,0xe0,0x2, 0xf, 0x1f,0x0, 0xb6,0x17,0x0, 0xe2,0x0, 0xcf,0x80,0xe0,0x0,
+0x2, 0x59,0x17,0x80,0xe0,0x1, 0x3f,0x26,0xe0,0xa, 0x3f,0xa7,0xe0,0x41,0x38,0xa1,
+0xe0,0x41,0x3d,0x2a,0x38,0xfa,0xe1,0x29,0x38,0x9a,0x15,0x1, 0x10,0x80,0xe0,0x6a,
+0x3a,0xa1,0x38,0xe9,0xe4,0x0, 0xc8,0x81,0x38,0xda,0x20,0xc2,0xb7,0x2, 0x3f,0x26,
+0xe0,0x41,0x3f,0x2e,0xe0,0x8e,0x3f,0x4b,0xe0,0xa, 0x34,0xf, 0x3d,0xe8,0x3c,0xef,
+0x3c,0x6e,0x76,0x1, 0xe0,0x1, 0xd7,0x51,0x56,0x1, 0xe2,0x0, 0xce,0x0, 0xe7,0xff,
+0x5, 0x2a,0x3b,0x99,0xe2,0x0, 0xcb,0x80,0xe7,0xff,0x5, 0x28,0xe0,0x27,0x3b,0xd4,
+0xb3,0x92,0x16,0x81,0xe0,0x2, 0xd, 0x8c,0x3d,0x63,0x14,0x82,0x3c,0x6d,0xd0,0x8a,
+0xe8,0x55,0x4f,0x8e,0xe0,0xf5,0x17,0x12,0xc7,0x81,0xe8,0x55,0x6f,0x8e,0xe8,0xf9,
+0x4f,0x80,0x3f,0x1f,0xc7,0x81,0xe8,0xf9,0x6f,0x80,0xa9,0x8e,0x31,0xa2,0xe0,0xf5,
+0x17,0x9c,0x3f,0x93,0x17,0x7f,0xb7,0xf, 0xb7,0x1f,0xe0,0xf9,0x17,0x82,0x39,0x9f,
+0xe0,0xff,0x17,0xff,0xb7,0x83,0xe7,0xfe,0x0, 0x92,0x3f,0x65,0xe7,0xff,0x0, 0xa7,
+0x3f,0xf4,0xe7,0xfe,0x3, 0x6f,0x15,0x1, 0x14,0x80,0xe7,0xff,0x0, 0xb4,0xc0,0x2,
+0xb, 0xe1,0xe2,0x0, 0xcc,0x3, 0x1, 0x90,0x8, 0xb1,0xef,0xff,0xd2,0xee,0xef,0xff,
+0xd2,0x5e,0xda,0x91,0xe8,0x55,0x6c,0x19,0xda,0xef,0xef,0xfd,0xd6,0x13,0xd8,0x91,
+0x8, 0xa1,0xe7,0xfd,0x0, 0xd8,0x38,0x82,0x8, 0xb1,0xe8,0xb, 0x4e,0x73,0x17,0x80,
+0x17,0x3, 0xe0,0xff,0x16,0xff,0x3e,0x7f,0xc4,0x6, 0x1, 0xb7,0x15,0xa, 0x14,0x81,
+0xe0,0xfc,0x14,0x5c,0xe0,0x1, 0xd7,0x5f,0x15,0xa, 0x14,0x80,0xe0,0xfc,0x14,0x66,
+0xe0,0x1, 0xd7,0x59,0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0x4, 0xe0,0x1, 0xd7,0x53,
+0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0xe, 0xe0,0x1, 0xd7,0x4d,0x15,0xa, 0x14,0x80,
+0xe0,0xfc,0x14,0x70,0xe0,0x1, 0xd7,0x47,0x15,0xa, 0x14,0x80,0xe0,0xfc,0x14,0x7a,
+0xe0,0x1, 0xd7,0x41,0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0x18,0xe0,0x1, 0xd7,0x3b,
+0xe0,0x1, 0x15,0xc, 0xe0,0x1, 0x14,0xff,0xe0,0xfd,0x14,0x24,0xe0,0x1, 0xd7,0x33,
+0x17,0x80,0xe8,0x7e,0x77,0xd1,0x8, 0xe1,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe0,0x40,
+0xaf,0x68,0xe0,0x40,0xaf,0x58,0xe0,0x40,0xb6,0xa8,0xe0,0x40,0xb6,0x98,0xe7,0xff,
+0x0, 0xbc,0x3c,0x79,0x3f,0xea,0xe0,0x0, 0x1, 0x4c,0xe2,0x0, 0xcc,0x1, 0x1, 0xba,
+0x17,0x7d,0x3f,0x59,0xe0,0x0, 0x2f,0x45,0xe8,0x33,0x4f,0x24,0xc7,0x1, 0xe8,0x33,
+0x6f,0x24,0x26,0x87,0xe8,0x7e,0x57,0x51,0x34,0x3a,0x3c,0x4e,0xe8,0x7e,0x74,0x51,
+0xe4,0x0, 0xc7,0x86,0xe0,0x51,0x15,0x2e,0xe0,0xd, 0x3d,0x1f,0x3c,0x6d,0x3f,0x69,
+0xe0,0x3, 0xc4,0x25,0xe2,0x1, 0xc7,0x7f,0xaf,0x8, 0x3c,0x6d,0xe0,0x3, 0xc4,0x24,
+0xe2,0xff,0xcd,0xff,0xaf,0x8, 0x1, 0x3, 0xe0,0x1a,0xb5,0xbd,0xe2,0xff,0xce,0x7f,
+0x1, 0x5, 0xe0,0xe, 0x3d,0x1f,0xe0,0x1a,0xb6,0x4e,0xe2,0x0, 0xcc,0x81,0x1, 0x88,
+0x3d,0x1f,0xe0,0xff,0x17,0xff,0xe0,0x1a,0xb7,0xba,0xe0,0x1a,0xb7,0xca,0x14,0x1,
+0x0, 0x90,0xe2,0x0, 0xcc,0x2, 0x1, 0x8c,0x24,0xd4,0xe2,0x0, 0xcc,0x81,0x1, 0x88,
+0xe8,0x33,0x4f,0x24,0x27,0x4e,0xc7,0x7f,0xe8,0x33,0x6f,0x24,0x0, 0xca,0x14,0x0,
+0x38,0x82,0xe0,0xfc,0x17,0xdc,0x3c,0x1f,0x17,0x81,0xe0,0x6, 0xaf,0xa8,0x38,0x82,
+0xe0,0xfc,0x17,0xdc,0x3c,0x1f,0xe0,0x5, 0x8c,0x8, 0x38,0x82,0x8, 0xb5,0x8e,0x78,
+0xe0,0x1, 0x8c,0x8, 0x16,0x80,0x10,0x83,0x11,0x4, 0x11,0x85,0xe0,0x51,0x12,0x2e,
+0x3e,0xfa,0x1, 0x83,0x14,0x0, 0xa, 0xe1,0x3e,0xfb,0x1, 0x22,0x8f,0x79,0xe0,0x1,
+0x8f,0x89,0x3f,0x2c,0xe0,0x41,0x3f,0x2e,0x3f,0xa8,0xe2,0x1, 0xc7,0x7f,0xe0,0x41,
+0x3f,0xaf,0xe2,0x1, 0xc7,0xff,0xe1,0x25,0x39,0x2e,0xe1,0x2f,0x38,0xaf,0x22,0x82,
+0x2f,0x94,0xe1,0x2e,0x39,0xae,0x27,0xc, 0x27,0x8b,0x8f,0xc9,0xe4,0x0, 0xc7,0x86,
+0x3f,0x94,0xe0,0x3, 0xc7,0xa5,0x8f,0x8f,0xe2,0x0, 0xcf,0x83,0x1, 0x6, 0xc6,0x81,
+0xe2,0x1, 0xc6,0xff,0xc4,0x8e,0x0, 0xd5,0x14,0x1, 0x0, 0xd6,0x8, 0xb7,0xc0,0x7a,
+0xe8,0x25,0x4f,0x8b,0xe0,0x0, 0x27,0xd3,0xe8,0x25,0x4f,0xc6,0xe0,0x0, 0x27,0xcf,
+0xe0,0xfc,0x13,0xdc,0x3b,0x69,0x39,0xe8,0x3a,0xe9,0xc3,0x7f,0xc1,0x82,0xc2,0x89,
+0x3a,0x67,0x39,0x67,0xe0,0x51,0x17,0x2e,0x16,0x81,0xe0,0x80,0x8e,0x16,0xe0,0xf,
+0x39,0x27,0x26,0xd, 0x17,0x80,0xe0,0x7, 0xaf,0xc2,0x3b,0x75,0xc1,0x1, 0xc2,0xe,
+0xc1,0x86,0x1, 0xf4,0xe8,0x55,0x4c,0xe, 0xc0,0x6, 0xb, 0xe1,0xe0,0x7, 0x8e,0x42,
+0x26,0x75,0xe8,0x55,0x4c,0xe, 0x3c,0xe4,0x3e,0x68,0xe4,0x0, 0xc4,0xe, 0xc6,0x1,
+0x3c,0x1e,0x15,0xe, 0xe0,0x1, 0xc4,0xd4,0xe8,0x55,0x6e,0xe, 0x76,0x81,0x77,0x2,
+0x77,0x83,0xe0,0x1, 0xd6,0x4, 0xe0,0xd, 0x96,0x24,0x56,0x81,0xb6,0x3, 0xe0,0xd,
+0x96,0x34,0xb6,0x13,0xae,0x86,0x8e,0x2, 0xe0,0x2, 0xae,0x42,0xe0,0x7, 0x8e,0x42,
+0xc6,0x7f,0xe0,0x7, 0xae,0x42,0x16,0x1, 0x57,0x83,0x57,0x2, 0x36,0x3f,0xe8,0x7e,
+0x57,0xd1,0x3f,0xcc,0xe8,0x7e,0x77,0xd1,0x0, 0xc9,0x15,0xa, 0x14,0x80,0xe0,0xfd,
+0x14,0x18,0xe0,0x1, 0xd6,0x30,0x0, 0xc7,0x8, 0xb7,0xe1,0xfe,0xc0,0x46,0x3a,0xe8,
+0x3c,0x60,0x15,0xa, 0x74,0x86,0xc4,0x1c,0x14,0x80,0xe0,0x1, 0xd6,0x24,0x3c,0x60,
+0x15,0xa, 0x14,0x80,0xc4,0x26,0xe0,0x1, 0xd6,0x1e,0x3c,0x60,0xe0,0x1, 0x15,0xc,
+0xe0,0x1, 0x14,0xff,0xc4,0x30,0xe0,0x1, 0xd6,0x16,0xe8,0x12,0x57,0xeb,0x11,0x0,
+0xc7,0xe2,0x77,0x84,0xe0,0xfc,0x13,0xd2,0xe8,0x12,0x57,0xea,0xc7,0xe2,0x77,0x85,
+0xe8,0xb, 0x4a,0x73,0x3a,0x72,0xe0,0x0, 0x2, 0xc2,0x11,0x0, 0xe0,0x51,0x17,0x2e,
+0x39,0xe2,0x3b,0x6e,0xe8,0x55,0x4f,0x8e,0x3f,0xf3,0xe0,0x2, 0x2, 0xb3,0x3f,0x60,
+0x13,0x80,0xc7,0x26,0x39,0xe7,0xe0,0xfd,0x16,0xa4,0x3d,0xe7,0xe2,0x1, 0xc5,0xff,
+0x3a,0x7b,0xe0,0x2, 0x2, 0xc8,0x3f,0xe2,0x17,0x0, 0x3a,0x7e,0xe0,0x2, 0x1, 0xfd,
+0x3a,0xe0,0xc2,0xb0,0x12,0x0, 0xe0,0xfc,0x17,0xdc,0x13,0x8e,0x3c,0x64,0xe0,0x0,
+0xc4,0x48,0x3c,0xe5,0x3c,0x1f,0x3d,0x67,0x77,0x82,0xe0,0x1, 0xd5,0x90,0x3c,0xe5,
+0xe0,0x8, 0x3b,0x14,0x3d,0x67,0xe0,0x1, 0xd5,0x8a,0xc2,0xe, 0xe2,0x1, 0xca,0xc,
+0xc2,0x8e,0x57,0x82,0x1, 0xec,0xe8,0x33,0x4f,0xa4,0xe8,0x55,0x69,0xe, 0x39,0x9f,
+0xe8,0x33,0x69,0xa4,0xe0,0x1, 0xc0,0x3a,0xb, 0xe1,0x57,0x6, 0x39,0xe2,0x3f,0x12,
+0x8f,0xe, 0xe4,0x0, 0xc1,0x86,0xe2,0x0, 0xcf,0x1, 0x39,0x95,0x8f,0x93,0xe0,0x1,
+0x1, 0x96,0xe2,0x0, 0xcf,0x81,0x1, 0x83,0x17,0x83,0xaf,0x93,0x8f,0x93,0xe2,0x0,
+0xcf,0x83,0xe0,0x1, 0x1, 0x85,0xe0,0xfc,0x12,0x5c,0xe0,0xf, 0x3a,0x12,0xe0,0x2,
+0x8f,0x4f,0x8f,0x8f,0x3f,0xfe,0xe0,0x0, 0x5, 0xf8,0xe8,0x25,0x4f,0xc4,0xe2,0x0,
+0xcf,0x81,0xe0,0x0, 0x1, 0xf2,0xe8,0x55,0x4d,0xe, 0xe0,0x51,0x15,0xae,0x16,0x0,
+0x3f,0xec,0xe2,0x1, 0xc7,0xff,0x3f,0xfa,0x3, 0x9e,0x8c,0xcb,0x3f,0xec,0x39,0x79,
+0xc6,0x1, 0xc5,0x8e,0x1, 0xf6,0xe4,0x0, 0xc7,0x8e,0xe0,0x51,0x16,0x2e,0x3f,0x9c,
+0x56,0x85,0x96,0x1f,0x3e,0xfc,0xe0,0x0, 0x4, 0xd8,0xe2,0x0, 0xce,0x1d,0xe0,0x0,
+0x5, 0xd4,0x56,0x4, 0x97,0x8f,0x3e,0x7f,0xe0,0x0, 0x4, 0xcf,0xe2,0x0, 0xcf,0x9d,
+0xe0,0x0, 0x5, 0xcb,0x3f,0xe0,0x3a,0x12,0xc7,0x1, 0xe0,0x1, 0xc7,0xba,0xe0,0x2,
+0xaf,0x44,0x3f,0x92,0x17,0x1, 0xe0,0x53,0xaf,0x6f,0x17,0x83,0x13,0x0, 0xc2,0x3c,
+0xaf,0x83,0xe8,0x55,0x4e,0xe, 0x3e,0x76,0x2, 0x8b,0x8f,0x83,0xe0,0xe, 0x3b,0x92,
+0xaf,0x93,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xaf,0x8e,0xe7,0xfe,0x0, 0xd3,0x3f,0x66,
+0xe4,0x0, 0xc7,0xe, 0xe0,0x51,0x16,0xae,0x3f,0x1d,0x8d,0xce,0x3d,0xf2,0x1, 0x9e,
+0x15,0xe, 0x3c,0x6a,0x3c,0xee,0x3c,0x10,0x77,0x1, 0x76,0x3, 0xe0,0x1, 0xd4,0xff,
+0x56,0x3, 0x3c,0x60,0x3d,0xe6,0xe0,0x51,0x14,0xae,0xc4,0xe, 0x3d,0x6c,0xde,0x7f,
+0x57,0x1, 0x2c,0xc, 0x15,0xe, 0x3c,0xee,0x3f,0x6a,0x3f,0x32,0xe0,0xfe,0x14,0x30,
+0x16,0x2, 0x3c,0x1e,0xae,0x4, 0xe0,0x1, 0xd4,0xea,0x3f,0xe6,0xc7,0x81,0x3b,0x6f,
+0xe2,0x1, 0xc3,0x7f,0x0, 0xc7,0x17,0x80,0xaf,0x83,0x0, 0xc8,0x2f,0x83,0x17,0x82,
+0x0, 0xfc,0xe2,0x0, 0xcf,0x82,0x1, 0xc2,0x0, 0xf8,0x3f,0x6f,0xe2,0x1, 0xc7,0x7d,
+0xe0,0xfc,0x17,0xdc,0xe0,0x0, 0x2f,0x4a,0xe0,0xe, 0x3b,0x92,0x8f,0xe, 0x2f,0x6,
+0xe0,0xe, 0x3f,0x92,0x16,0x1, 0xe0,0x1, 0xae,0x2e,0xe0,0xe, 0x3f,0x92,0xe0,0x3,
+0x8e,0x6e,0xe0,0x1, 0x8d,0xae,0x3d,0xfc,0x5, 0xa3,0xe0,0x6, 0x8d,0xae,0x2d,0xa0,
+0xc6,0x1, 0xe0,0x3, 0xae,0x6e,0x3e,0x60,0x17,0x82,0xe0,0x1, 0xc6,0x3a,0xaf,0x83,
+0x3e,0x12,0x17,0x81,0xe0,0x52,0xaf,0xcc,0xe0,0x5, 0xaf,0x8e,0xe0,0xf, 0x3b,0x92,
+0x8f,0x8f,0xe0,0x1, 0xad,0xae,0xe7,0xff,0x2f,0x92,0x17,0x81,0xe0,0xe, 0x37,0xb2,
+0xe8,0x7e,0x57,0xd1,0x3f,0xce,0xe8,0x7e,0x77,0xd1,0xe7,0xff,0x0, 0x88,0x17,0x1,
+0xaf,0x3, 0x3f,0x92,0x17,0x0, 0xe0,0x1, 0xaf,0x2f,0xe0,0x2, 0xaf,0x4f,0xe0,0x3,
+0xaf,0x6f,0xe0,0x5, 0xaf,0xf, 0xe0,0x6, 0xaf,0x2f,0x17,0x81,0xe8,0x7e,0x57,0x51,
+0x37,0xb2,0xe3,0xf, 0x3f,0x5f,0x0, 0xe8,0x17,0x3, 0xaf,0x3, 0x3f,0x92,0x17,0x0,
+0xe0,0x2, 0xaf,0x4f,0xe0,0x3, 0xaf,0x6f,0xe0,0x5, 0xaf,0xf, 0xe7,0xfe,0x0, 0xe7,
+0x3c,0xe3,0xe4,0x0, 0xc4,0x8e,0x3e,0x60,0x3c,0x9e,0x8f,0xc9,0xe0,0x1, 0xc6,0x3a,
+0x3f,0x9c,0xe0,0x53,0x8f,0xef,0x2f,0x91,0x3c,0x62,0xe4,0x0, 0xc4,0xe, 0x3e,0xe0,
+0xc6,0xb0,0x3b,0xe2,0x15,0xe, 0x3c,0x1d,0x77,0x1, 0xc3,0x81,0xe0,0x1, 0xd4,0x67,
+0xe2,0x1, 0xc3,0xff,0x57,0x1, 0x39,0x67,0xc1,0x81,0xe2,0x1, 0xc1,0xff,0xe7,0xfd,
+0x0, 0xab,0xe1,0x80,0x8f,0x9e,0x27,0xaf,0xc1,0x81,0xe0,0xfc,0x17,0xdc,0xe2,0x1,
+0xc1,0xff,0x14,0x80,0x3e,0x6f,0xe0,0x9, 0x8d,0x4f,0x3d,0x7b,0x1, 0xa7,0xe4,0x0,
+0xc4,0x8e,0x3c,0x62,0xe0,0xf, 0x3e,0x19,0x3e,0x67,0xe4,0x0, 0xc6,0x6, 0xe0,0x4,
+0x95,0xcf,0x3e,0x15,0xb5,0x9c,0xe4,0x0, 0xc4,0xe, 0xe0,0x4, 0x97,0xdf,0x3c,0x9d,
+0xb7,0xac,0x3f,0xe2,0x3e,0x60,0xc6,0x30,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x15,0xe,
+0x3c,0x1c,0x76,0x83,0x77,0x1, 0x77,0x82,0xe0,0x1, 0xd4,0x31,0x57,0x82,0x57,0x1,
+0x56,0x83,0x39,0x6f,0xc3,0x81,0xe7,0xfd,0x0, 0x82,0xc4,0x81,0xe2,0x0, 0xcc,0x8a,
+0xc7,0x8e,0x1, 0xd2,0x0, 0xf8,0x8e,0x85,0xe2,0x0, 0xce,0x81,0x1, 0x8b,0x3e,0x9f,
+0x3e,0x60,0xe4,0x0, 0xc7,0x8e,0xc6,0x30,0x3f,0x9c,0xaf,0x4f,0x3f,0xed,0xe2,0x1,
+0xc7,0xff,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0xc2,0x86,0xe7,0xfc,0x0, 0xf0,0x8, 0xb7,
+0xc0,0x46,0x3d,0x60,0xe0,0x51,0x13,0x2e,0xc5,0x24,0x3d,0xe0,0x3e,0x60,0x16,0x80,
+0xe8,0xb, 0x49,0x73,0xc5,0x9a,0xc6,0x10,0x3f,0x6a,0x3f,0xe6,0x3c,0x66,0x14,0xff,
+0x38,0xed,0x39,0x7d,0xc7,0x8e,0xe0,0x1, 0x1, 0x80,0xe8,0x55,0x4f,0xe, 0xe8,0x33,
+0x4f,0xa4,0xe0,0x1, 0x2f,0x14,0x27,0x8d,0xe0,0x33,0x15,0x10,0xe0,0x32,0x15,0xfc,
+0xe0,0x51,0x17,0xae,0xe0,0xff,0x16,0x7f,0x3e,0xfe,0xc7,0x86,0xe0,0x0, 0x1, 0xfa,
+0xe8,0x7e,0x57,0xd1,0xe0,0x4, 0x27,0x94,0xe0,0x51,0x11,0xae,0x3a,0xe0,0xc2,0x90,
+0x13,0x80,0x3a,0x63,0xe1,0x80,0x8f,0x95,0x3e,0x67,0xe2,0x1, 0xc6,0x7f,0xe0,0x4,
+0x27,0x81,0xe8,0x7e,0x55,0x51,0x17,0x81,0x37,0xb7,0x3f,0xda,0xe0,0x3, 0x27,0xfa,
+0x3e,0xe0,0x3c,0xe3,0xc6,0x90,0x14,0x0, 0xe0,0x3, 0xc4,0xa5,0x10,0xfd,0x3d,0xed,
+0x3f,0x68,0xe2,0x1, 0xc7,0x7f,0x8f,0x8b,0x77,0x2, 0xc6,0x81,0x2f,0x8b,0x11,0x1,
+0x31,0x38,0x39,0x5a,0x29,0x7, 0x8f,0x89,0x3f,0xd1,0xe2,0x0, 0xcf,0x81,0xe0,0x3,
+0x1, 0x37,0xc4,0x1, 0xe2,0x0, 0xcc,0xa, 0x1, 0xeb,0xe8,0x55,0x49,0xe, 0x3f,0xe6,
+0x16,0x80,0x3c,0x6d,0xe2,0x1, 0xc6,0xff,0x3e,0xf2,0x3, 0x8d,0x8d,0xcf,0x3e,0xe8,
+0x3d,0xfc,0xc6,0x81,0xc7,0x8e,0x1, 0xf6,0x3f,0xe8,0xe4,0x0, 0xc7,0x8e,0x16,0xff,
+0x3f,0x94,0xae,0xcf,0xe4,0x0, 0xc4,0xe, 0xc1,0x7f,0xe0,0xf, 0x3a,0x18,0x3c,0x60,
+0x3c,0xef,0xe2,0x1, 0xc1,0x7f,0x15,0xe, 0xc4,0x2e,0x77,0x81,0xe8,0x55,0x69,0xe,
+0xe0,0x1, 0xd3,0x8d,0xe4,0x0, 0xc1,0xe, 0x57,0x81,0x39,0x14,0x3c,0xe2,0x15,0xe,
+0x3c,0x6f,0xe0,0x1, 0xd3,0x84,0x3c,0xe0,0x15,0xe, 0xc4,0xae,0x3c,0x62,0xe0,0x1,
+0xd3,0x7e,0xe0,0x3, 0x0, 0x9e,0xc6,0x81,0xe1,0x80,0xac,0x9e,0xe2,0x1, 0xc6,0xff,
+0xe1,0x80,0xa8,0x9c,0xe1,0x80,0xa8,0x9b,0xe0,0x41,0xac,0xaf,0xe7,0xfe,0x0, 0xf3,
+0xc7,0x1, 0xe1,0x80,0xb6,0x1a,0xe2,0x1, 0xc7,0x7f,0xe1,0x80,0xb6,0x1b,0xe0,0x1a,
+0xb6,0xf, 0xe0,0x1a,0xb6,0x1f,0xe7,0xfe,0x0, 0xf9,0x2f,0x9e,0xe0,0x54,0x16,0x52,
+0x15,0x81,0xe8,0x55,0x4f,0xe, 0x3f,0x7f,0xe7,0xfe,0x5, 0xf4,0x3f,0x6f,0xe4,0x0,
+0xc7,0xe, 0x3e,0xef,0x3f,0x18,0xe4,0x0, 0xc6,0x86,0x95,0xe, 0x3e,0x9c,0xb5,0x1d,
+0x95,0x1e,0xb5,0x2d,0x3e,0xe0,0xc6,0x90,0x3e,0x9f,0xaf,0xce,0xc7,0x81,0xe2,0x1,
+0xc7,0xff,0xad,0x8d,0x0, 0xe7,0xe0,0xe4,0x16,0x5a,0x15,0x80,0xe0,0xff,0x14,0xff,
+0x3e,0xfb,0xc6,0x4, 0xe0,0x0, 0x1, 0xed,0x3f,0x7f,0xe0,0x0, 0x3, 0xf7,0x14,0x81,
+0xe1,0x29,0x3f,0x99,0xe8,0x12,0x54,0x6b,0xe8,0x12,0x56,0x6a,0x15,0x80,0xe0,0x90,
+0x12,0x10,0xe0,0x33,0x13,0x90,0x74,0x2, 0x76,0x3, 0x3f,0x6b,0xe2,0x1, 0xc7,0x7f,
+0x3f,0xfe,0xe0,0x1, 0x2, 0xbd,0xe0,0x51,0x17,0x2e,0xe8,0xb, 0x4d,0xf3,0xe0,0x33,
+0x16,0x90,0xe0,0x32,0x16,0x7c,0x11,0x0, 0x39,0xee,0x3d,0xf2,0xc7,0x6, 0xe0,0x1,
+0x1, 0xb3,0x16,0x80,0x14,0x81,0x39,0x7d,0xe0,0x1, 0x1, 0xbb,0xe0,0xe5,0x16,0x82,
+0xe8,0x55,0x4d,0xe, 0xe0,0x51,0x16,0x2e,0x17,0x0, 0x3d,0xed,0x3d,0x7e,0xc6,0xe,
+0xc6,0x84,0xe0,0x1, 0x1, 0xcd,0xe0,0xe4,0x17,0x5a,0x37,0x41,0x77,0x5, 0xe0,0xe,
+0x35,0xc1,0x77,0x6, 0x3c,0x60,0xe0,0xe5,0x17,0x2a,0x37,0x41,0xc4,0x8, 0x6d,0x9,
+0x77,0x7, 0x6f,0x88,0xe0,0x0, 0xd9,0xa4,0x17,0x0, 0x15,0x81,0xe0,0x54,0x15,0x52,
+0xe8,0x55,0x4f,0x8e,0x3f,0xfe,0xe0,0x1, 0x5, 0xe3,0xe0,0xe5,0x16,0x2a,0x17,0x80,
+0x3e,0xef,0xe2,0x1, 0xc6,0xff,0x39,0x7d,0x5, 0x8f,0xe1,0x80,0x94,0x9c,0x3e,0xef,
+0x3f,0x79,0xc7,0x81,0x1, 0xf6,0x3f,0xe0,0xc7,0xa4,0x3f,0x9d,0x8f,0x8f,0xe2,0x1,
+0xcf,0xff,0xe0,0x1, 0x1, 0xaa,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x0, 0xe2,0xc5,0x81,
+0xe2,0x1, 0xc5,0xff,0xe0,0x40,0xb4,0xac,0xe0,0x40,0xb4,0x9c,0xe0,0x2, 0xb4,0xac,
+0xe0,0x2, 0xb4,0xbc,0xe7,0xff,0x0, 0x86,0x14,0x80,0xe7,0xff,0x0, 0x8d,0xe0,0xe,
+0x35,0xa2,0x3f,0x14,0x38,0xee,0xe0,0x54,0xc0,0xca,0xe0,0x54,0xc7,0x4c,0xb4,0x1,
+0xb1,0xe, 0xe0,0x0, 0x0, 0xc1,0xc6,0x1, 0xc7,0x6, 0x3a,0xec,0xe2,0x1, 0xc2,0xff,
+0x3e,0xf5,0xe0,0x0, 0x5, 0xc2,0xe0,0x1a,0x94,0x3e,0x38,0xee,0xe2,0xff,0xcc,0x7f,
+0xe0,0x3, 0xc0,0xa4,0x1, 0x71,0x39,0x60,0xc1,0x1a,0x39,0x1c,0x89,0x82,0x29,0xec,
+0xe2,0x0, 0xcc,0x81,0x91,0x21,0x1, 0xdc,0xe0,0x1, 0x36,0x21,0xe0,0xe, 0x3b,0x91,
+0x97,0xe, 0xe2,0xff,0xcf,0x7f,0x1, 0x54,0xe0,0xe, 0x3c,0x2e,0x3f,0x18,0xe0,0x32,
+0x14,0x7c,0x38,0x98,0x94,0x1, 0xe0,0x2e,0x3f,0x63,0xe0,0x8, 0x39,0x28,0x39,0x18,
+0x54,0x2, 0xe0,0x23,0x39,0x63,0xe1,0x2e,0x3f,0x58,0x54,0x3, 0xe0,0x54,0x10,0xca,
+0xe1,0x23,0x39,0xd8,0xe0,0x8, 0x35,0xa2,0x3c,0x14,0x38,0x98,0xb7,0x1, 0xe0,0x54,
+0xc4,0x4c,0xb1,0x88,0x3f,0x60,0xc7,0x24,0x3f,0x1b,0xaa,0x8e,0x3f,0x60,0xc7,0x1a,
+0x14,0x1, 0x3e,0x1e,0xac,0xc, 0xc5,0x81,0xe7,0xfe,0x0, 0xc1,0x3f,0x66,0x16,0x0,
+0xe7,0xff,0x0, 0xb5,0xe0,0x1a,0x94,0x8e,0xc1,0x1, 0xe1,0x80,0xb4,0x9d,0xe2,0x1,
+0xc1,0x7f,0xe0,0x1a,0x94,0x9e,0xe1,0x80,0xb4,0x9c,0xe7,0xfe,0x0, 0xc0,0x8f,0xa,
+0xe2,0x1, 0xcf,0x7f,0x1, 0x8f,0x3d,0xe0,0xc5,0x9a,0x17,0x0, 0xe1,0x80,0x8e,0x1b,
+0x3c,0x6e,0xe2,0x1, 0xc4,0x7f,0x2e,0xc, 0x3e,0x60,0xc6,0x1a,0x3f,0x1c,0xac,0xa,
+0xac,0x8e,0xc6,0x81,0xe2,0x1, 0xc6,0xff,0xc5,0x1, 0xe7,0xfe,0x0, 0xae,0xc7,0x1,
+0x3e,0x6e,0xe2,0x1, 0xc6,0x7f,0x39,0x7c,0x2, 0xea,0x0, 0xf4,0xe0,0x40,0x94,0xfc,
+0xc7,0x1, 0xe0,0x40,0xb4,0xad,0xe2,0x1, 0xc7,0x7f,0xe0,0x40,0x94,0xec,0xe0,0x40,
+0xb4,0x9d,0xe7,0xfe,0x0, 0xa5,0x3e,0xee,0xe4,0x0, 0xc6,0x8e,0x3e,0x60,0xc6,0x10,
+0x3e,0x1f,0x3e,0x93,0xaf,0xcd,0xe4,0x0, 0xc7,0x86,0xad,0x8c,0x3f,0x9a,0xe0,0xd,
+0xe, 0xd, 0xb6,0x1f,0xb6,0xaf,0xe7,0xfe,0x0, 0xc8,0xe1,0x80,0x8d,0x9d,0xe2,0x0,
+0xcd,0x81,0x1, 0x5, 0xe0,0x1a,0xb6,0x3e,0xe0,0x1a,0xb6,0x4e,0xc7,0x81,0xe2,0x1,
+0xc7,0xff,0xc7,0x6, 0x39,0x7f,0x1, 0xf2,0xe7,0xfc,0x0, 0xa4,0x3e,0xe0,0xe0,0x51,
+0x17,0x2e,0xc6,0x90,0x17,0x80,0xe0,0xff,0x16,0x7f,0x0, 0xf5,0xe4,0x0, 0xc4,0x6,
+0xaf,0x8b,0x3c,0xe3,0xe0,0x54,0x17,0xd2,0x15,0x6, 0xe0,0x3, 0xc4,0xa4,0x3c,0x1f,
+0x76,0x1, 0xe0,0x1, 0xd1,0xf4,0xe8,0x55,0x4d,0x8e,0x56,0x1, 0x3e,0xe6,0x3f,0xe2,
+0xe2,0x1, 0xc7,0xff,0x3d,0xff,0x5, 0x8c,0x8d,0x4d,0x3f,0xe2,0x3d,0x7c,0xc1,0x1,
+0xc6,0x8e,0x1, 0xf6,0xe4,0x0, 0xc7,0x8e,0x56,0x2, 0x3f,0x94,0xae,0x4f,0xe0,0xff,
+0x17,0x7f,0x17,0x80,0xe0,0x1a,0xb7,0x33,0xe0,0x1a,0xb7,0x43,0xe0,0x40,0xaf,0x95,
+0xc3,0x81,0xe2,0x0, 0xcb,0x8a,0xc1,0x86,0xe7,0xfb,0x1, 0xf6,0x3c,0xe0,0xc4,0x90,
+0xe0,0x54,0x14,0x52,0xdb,0x8c,0x3c,0xe0,0xe8,0x33,0x6c,0x24,0xc4,0x90,0xe0,0x54,
+0x14,0x52,0xdb,0xe3,0xc0,0x3a,0xb, 0xe1,0x8, 0xb3,0x3f,0x83,0x14,0x0, 0xef,0xfb,
+0xd2,0xd0,0xef,0xfb,0xd2,0xea,0xef,0xfb,0xd4,0xf6,0xef,0xfa,0xd8,0x3d,0xef,0xfb,
+0xd3,0x3, 0x17,0x80,0xe8,0x19,0x77,0xd4,0xe0,0x13,0x17,0xc4,0xe8,0x19,0x77,0xd3,
+0xef,0xfb,0xd4,0x7, 0xef,0xfb,0xd3,0x76,0xef,0xfb,0xd3,0x53,0xef,0xfe,0xd0,0x5b,
+0xef,0xfb,0xd3,0x26,0xef,0xfb,0xd4,0xf9,0xef,0xfb,0xd3,0x97,0xef,0xfb,0xd3,0xbe,
+0xef,0xfb,0xd7,0xd4,0x3b,0x0, 0xe0,0x0, 0x17,0x8a,0xe0,0xe, 0x89,0xf, 0xe0,0xe,
+0x89,0x9f,0x3c,0x62,0x3c,0xe3,0xe7,0x2b,0x15,0x3d,0xd6,0xe2,0xe7,0x0, 0x15,0x39,
+0x3c,0xe3,0x3c,0x62,0x9, 0xa1,0xe0,0xe, 0x0, 0x81,0x17,0x80,0xe8,0x19,0x77,0xd4,
+0xe8,0x19,0x74,0x53,0x38,0x82,0xe8,0x19,0x57,0xd4,0xe8,0x19,0x57,0x53,0xc7,0x81,
+0x3f,0xfe,0xe8,0x19,0x77,0xd4,0x3, 0x83,0xe7,0x66,0x0, 0xbc,0x38,0x82,0x38,0x82,
+0xe8,0x25,0x4f,0xc5,0x27,0x84,0xe8,0x25,0x4f,0xc3,0x2f,0x85,0x17,0x80,0xe8,0x33,
+0x6f,0xad,0x38,0x82,0xe8,0x33,0x4f,0xad,0xe0,0x2, 0x27,0xa7,0xe8,0x55,0x4f,0x8e,
+0xe9,0x2, 0x4f,0x28,0xe2,0x0, 0xcf,0x81,0x5, 0x8a,0x3c,0x7e,0x1, 0xf3,0x8f,0x89,
+0xe2,0x0, 0xcf,0x82,0x1, 0xec,0x17,0x80,0xaf,0x89,0x0, 0xe9,0x8, 0xb3,0x3c,0x7e,
+0x2f,0xa6,0x1, 0xa4,0x8f,0x9, 0xe2,0x0, 0xcf,0x1, 0x1, 0x9d,0xaf,0x89,0x39,0x68,
+0xe8,0x81,0x55,0x93,0x3d,0x68,0xb5,0x8c,0x3c,0xef,0xe8,0x81,0x56,0x12,0x3c,0x6e,
+0xb6,0xd, 0xe8,0x55,0x4e,0x8e,0xe8,0x81,0x56,0x12,0xc6,0x81,0xe8,0x81,0x55,0x93,
+0xe8,0x55,0x6e,0x8e,0x3e,0xee,0xe8,0x33,0x6f,0x2c,0xe8,0x55,0x6f,0x93,0xda,0x62,
+0x3c,0x62,0xda,0xb0,0x17,0x80,0xe8,0x33,0x6f,0xad,0x9, 0xe1,0x1, 0xff,0xe8,0xc,
+0x48,0xff,0xe8,0xd, 0x49,0xd, 0xe0,0xf, 0x30,0xa8,0xe8,0xd, 0x48,0x80,0x38,0xcf,
+0xe0,0xf, 0x31,0x28,0xe8,0xd, 0x49,0xe, 0x39,0x4f,0xe9,0x0, 0x4f,0xa4,0x3f,0x6f,
+0xc7,0x7f,0xe2,0x0, 0xcf,0x1, 0x2, 0x9e,0x8f,0x89,0xe2,0x0, 0xcf,0x82,0x1, 0xb1,
+0x17,0x80,0xaf,0x89,0xe8,0x33,0x4f,0xaa,0xe8,0x81,0x57,0x12,0xc7,0x81,0xe2,0x1,
+0xc7,0xff,0xe8,0x33,0x6f,0xaa,0xe0,0xe, 0x3d,0xae,0xe3,0xff,0xcf,0x7e,0x4, 0x21,
+0xe2,0x0, 0xcf,0x2, 0x2, 0x1e,0xe2,0x0, 0xcf,0x83,0x2, 0x9b,0x17,0x83,0xaf,0x89,
+0x0, 0xcd,0xc7,0xfd,0xe2,0x0, 0xcf,0x81,0xe0,0x0, 0x2, 0xcb,0x8f,0x89,0xe2,0x0,
+0xcf,0x82,0x1, 0x8f,0x17,0x80,0xaf,0x89,0xe8,0x33,0x4f,0xaa,0xe8,0x81,0x57,0x13,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe8,0x33,0x6f,0xaa,0xe0,0xe, 0x3d,0x2e,0x0, 0xde,
+0xe8,0x81,0x57,0x13,0xe8,0x81,0x57,0x92,0xe0,0xe, 0x3d,0x2e,0xe0,0xf, 0x3d,0xaf,
+0xe9,0x0, 0x49,0xa4,0x3c,0x61,0xe2,0x0, 0xc9,0x81,0xc4,0x7f,0x1, 0xb5,0xe2,0x0,
+0xcf,0x80,0x5, 0x2d,0xe8,0x81,0x55,0x12,0xe0,0xb, 0x37,0xa1,0xe0,0xb, 0x3d,0x2b,
+0xe2,0x0, 0xcd,0x80,0x4, 0x22,0x15,0x5, 0xe0,0x2f,0x3f,0x9a,0x27,0x87,0xe2,0x0,
+0xcd,0xb1,0x17,0x80,0xe0,0x6f,0x3a,0x2b,0x3d,0xef,0xb5,0x8d,0xe8,0x81,0x57,0x93,
+0xe0,0xe, 0x3f,0xae,0xe2,0x0, 0xcf,0x0, 0x4, 0x31,0xe1,0x28,0x3c,0x5e,0xb4,0xc,
+0x17,0x80,0xe8,0x33,0x6f,0xad,0xe9,0x0, 0x6f,0xa4,0xe7,0xff,0x0, 0x80,0x17,0x80,
+0xaf,0x89,0x17,0x80,0x3f,0x6f,0x0, 0xcd,0x15,0x80,0x0, 0xe8,0xe8,0x81,0x57,0x93,
+0xb7,0x8c,0xe0,0x0, 0x0, 0xc3,0xe2,0x0, 0xc9,0x82,0x3c,0xe2,0xc4,0xff,0x1, 0x98,
+0xe2,0x0, 0xcf,0x80,0x3, 0x74,0xe8,0x81,0x55,0x12,0x37,0xa1,0xe0,0xf, 0x3d,0x2f,
+0x3c,0xff,0x3, 0x84,0x3f,0xe9,0xb7,0x8d,0x0, 0xd2,0xc5,0x85,0x3d,0x7b,0x5, 0xfc,
+0xc1,0x4d,0x3f,0xf2,0xe0,0x69,0x3d,0xaf,0x0, 0xf6,0x14,0x0, 0x0, 0xd1,0xe2,0x0,
+0xc9,0x83,0x1, 0xa6,0xe2,0x0, 0xcf,0x0, 0xe8,0x81,0x55,0x93,0x3, 0x1d,0xe0,0xf,
+0x37,0x4f,0x3f,0x1f,0x37,0x1, 0xe0,0xe, 0x3d,0xae,0x3c,0x7e,0x3, 0x8d,0x3f,0x68,
+0xb7,0xc, 0xe8,0x81,0x57,0x92,0xe2,0x0, 0xcf,0x80,0x4, 0x2c,0xe1,0x2f,0x3f,0xd9,
+0xb7,0x8d,0xe7,0xff,0x0, 0xb7,0xc5,0x5, 0x3d,0x7b,0x3, 0xf3,0xc0,0xe1,0x3f,0x71,
+0xe0,0x68,0x3d,0xae,0x0, 0xed,0xb5,0x8c,0xe8,0x81,0x57,0x92,0x0, 0xf2,0xe2,0x0,
+0xc9,0x84,0xe7,0xff,0x1, 0xa7,0xe2,0x0, 0xcf,0x0, 0xe8,0x81,0x57,0x93,0xe7,0xff,
+0x5, 0x31,0xe0,0xb, 0x37,0x1, 0x3f,0xab,0xe2,0x0, 0xcf,0x80,0x4, 0x9, 0xe2,0x0,
+0xcf,0x6, 0x17,0x0, 0xe0,0x6e,0x3c,0x2f,0x3f,0xee,0xb7,0x8c,0x0, 0xd3,0x17,0x80,
+0x0, 0xfd,0x17,0x80,0x0, 0xd6,0x8f,0x9, 0x2f,0x1c,0xe8,0x55,0x4f,0x8e,0xe2,0x0,
+0xcf,0x81,0x1, 0x97,0xe2,0x1, 0xcd,0xc7,0x2, 0x94,0x3e,0xea,0xc6,0xc4,0xe2,0x7,
+0xce,0xbf,0x2, 0x8f,0x16,0x83,0xae,0x89,0xe8,0x33,0x6f,0x2a,0xe9,0x2, 0x6c,0x28,
+0xe8,0x81,0x75,0x13,0xe8,0x81,0x75,0x92,0xe8,0x33,0x6f,0xad,0xe9,0x0, 0x6f,0xa4,
+0x8f,0x89,0xe7,0xfd,0x2f,0xb8,0xe8,0x55,0x4f,0xe, 0xe2,0x0, 0xcf,0x1, 0xe7,0xfd,
+0x1, 0xb2,0xe2,0x11,0xcd,0x97,0x5, 0x96,0x3e,0xea,0xc6,0xc4,0xe2,0x7, 0xce,0xbf,
+0x2, 0x91,0x16,0x83,0xae,0x89,0xe8,0x33,0x6f,0x2d,0x17,0x2, 0xe9,0x2, 0x6c,0x28,
+0xe8,0x81,0x75,0x13,0xe8,0x81,0x75,0x92,0xe9,0x0, 0x6f,0x24,0xe8,0x33,0x6f,0xaa,
+0x38,0x82,0xe2,0x7, 0xcd,0x67,0x5, 0x90,0x17,0x83,0xaf,0x89,0x17,0x1, 0xe9,0x2,
+0x6c,0x28,0xe8,0x81,0x75,0x13,0xe8,0x81,0x75,0x92,0xe8,0x33,0x6f,0x2d,0xe9,0x0,
+0x6f,0xa4,0x17,0x80,0x0, 0xec,0xe2,0x0, 0xcd,0x4f,0xe7,0xfd,0x2, 0x84,0x17,0x83,
+0xaf,0x89,0x17,0x81,0xe8,0x33,0x6f,0xad,0x17,0x84,0xe9,0x2, 0x6c,0x28,0xe8,0x81,
+0x75,0x13,0xe8,0x81,0x75,0x92,0x0, 0xec,0x9, 0x33,0xe0,0x61,0x3f,0x82,0xe7,0xfd,
+0x17,0x7f,0x3f,0xde,0xe0,0x61,0x3f,0x92,0xe8,0x12,0x55,0x2e,0xe8,0x12,0x54,0xb4,
+0x97,0x8a,0x17,0x1, 0xe0,0x1, 0xcf,0x80,0xb7,0x8a,0x16,0x0, 0xe0,0x1, 0x97,0xa9,
+0x3e,0xe8,0xe7,0x3, 0xcf,0x9e,0xe0,0x1, 0xb7,0xa9,0x3e,0x9c,0x17,0xa, 0xe8,0x12,
+0x55,0xa8,0x3f,0xec,0xe0,0x2c,0x3e,0x7e,0x3f,0x6c,0xb7,0x2b,0x11,0xa, 0xb6,0xbb,
+0x3e,0xe8,0xc6,0x81,0x3e,0x9f,0xe0,0x2c,0x3f,0xf2,0x3f,0x6c,0xb7,0x4b,0xb6,0xdb,
+0x3e,0xe8,0xc6,0x82,0x3e,0x9f,0xe0,0x2c,0x3f,0xf2,0xb6,0x6b,0xb6,0xfb,0xe0,0x1,
+0x97,0x29,0xe7,0x3, 0xcf,0x1f,0xe0,0x1, 0xb7,0x29,0xe7,0xfe,0x17,0x7f,0x97,0x8a,
+0x3f,0xde,0xb7,0x8a,0xe0,0x61,0x3f,0x82,0xe0,0x2, 0xcf,0x80,0xe0,0x61,0x3f,0x92,
+0x9, 0xe2,0xe9,0x1, 0x4f,0x8a,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe9,0x1, 0x6f,0x8a,
+0xe8,0xf3,0x6f,0x91,0x38,0x82,0xe9,0x1, 0x4f,0x8b,0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0xe9,0x1, 0x6f,0x8b,0xe8,0xf3,0x6f,0x92,0x38,0x82,0x8f,0x89,0x8f,0x8, 0x2f,0x83,
+0xaf,0x9, 0x38,0x82,0xe0,0xd, 0x3f,0x2f,0xe0,0x41,0x3e,0xad,0x3e,0xfb,0x5, 0x5,
+0x3f,0xfe,0x3, 0x86,0x3f,0x9a,0xaf,0x89,0x8f,0x89,0xaf,0x88,0x0, 0xf3,0x3f,0xaa,
+0x0, 0xfb,0x8, 0xb7,0xc0,0x7c,0x3b,0x6a,0xe4,0x0, 0xc3,0xe, 0xe0,0x51,0x11,0xae,
+0xe0,0xf, 0x39,0x96,0xe0,0x12,0x8e,0x9f,0xe0,0x12,0x89,0xf, 0x6e,0x84,0x3f,0x68,
+0xe0,0x12,0x8e,0xaf,0xe8,0x51,0x4f,0x90,0x36,0xa3,0x3f,0xf2,0x6e,0x85,0x3b,0xe9,
+0x5, 0xa9,0xe8,0x55,0x4f,0x95,0xe1,0x2, 0x12,0x98,0xe1,0x0, 0x12,0x26,0x2f,0xb7,
+0x3c,0x60,0x15,0x8f,0x15,0x1, 0xe0,0x9, 0x3a,0x92,0xc4,0x4, 0x77,0x1, 0xdf,0xc6,
+0x3c,0x60,0x15,0x90,0x15,0x8, 0xe0,0x9, 0x3a,0x12,0xc4,0x5, 0xdf,0xbf,0x57,0x1,
+0x3f,0xe2,0xe4,0x0, 0xc7,0x86,0x3f,0x93,0xe0,0x3, 0xc7,0xa4,0x8f,0x8f,0xe2,0x0,
+0xcf,0x81,0x1, 0x88,0x17,0x80,0x3a,0x92,0x39,0x14,0x6f,0x84,0x6f,0x85,0xaf,0x82,
+0xaf,0x85,0xe8,0x51,0x4f,0xa4,0xe2,0x1, 0xcf,0xff,0x1, 0x8b,0x17,0x80,0x39,0x96,
+0x6f,0x84,0xe0,0x12,0x8f,0x83,0xe2,0x1, 0xcf,0xff,0x1, 0x3, 0x17,0x81,0x6f,0x84,
+0x4f,0x84,0xaf,0x8e,0x4f,0x85,0xaf,0x87,0xc0,0x4, 0xb, 0xe1,0xe0,0xf, 0x3a,0x92,
+0x8f,0x8f,0x6f,0x84,0xe0,0xf, 0x3a,0x12,0x8f,0x8f,0x6f,0x85,0x0, 0xd2,0x8, 0xb7,
+0xc0,0x74,0x17,0x80,0x6f,0x87,0x6f,0x88,0x17,0x83,0x6f,0x89,0xe8,0xf3,0x4f,0xd2,
+0xe0,0x1, 0x2f,0xa0,0xe8,0x33,0x6f,0xab,0xe8,0xb, 0x4f,0x73,0xe8,0x55,0x4f,0x97,
+0x6f,0x5, 0x2f,0x88,0xe8,0x55,0x4f,0x93,0x2f,0x85,0xe8,0x55,0x49,0x94,0xe0,0x3,
+0x21,0x82,0xe8,0x33,0x4f,0xae,0xe0,0xff,0x11,0x4a,0xe2,0x0, 0xcf,0x80,0xe1,0x0,
+0x17,0xb0,0xe0,0x62,0x39,0x2f,0x15,0x3e,0xe0,0x1, 0x14,0xff,0x3c,0x62,0xe0,0x0,
+0xdf,0x3a,0x3c,0x62,0x11,0x80,0x15,0x1c,0x14,0x80,0xc4,0x3e,0xe0,0x0, 0xdf,0x33,
+0x3b,0x63,0x3a,0xe3,0x3a,0x63,0x4f,0x5, 0x3f,0xee,0xe8,0x51,0x4f,0x10,0x3f,0x74,
+0xe0,0x0, 0x2, 0xf9,0xe8,0xf3,0x4f,0xd2,0xe2,0x0, 0xcf,0x81,0xe0,0x2, 0x1, 0xba,
+0xe0,0x7, 0xaf,0xe2,0xe8,0xf3,0x4f,0xd5,0xe0,0x8, 0xaf,0x82,0xe8,0x55,0x4f,0x94,
+0xe2,0x0, 0xcf,0x81,0x1, 0x8f,0xe8,0x25,0x4e,0x1d,0xe0,0x33,0x17,0x42,0x17,0x80,
+0xe0,0x8, 0xae,0x12,0x3e,0xef,0xe2,0x1, 0xc6,0xff,0x3e,0xfc,0xc7,0x4, 0xe0,0x2,
+0x4, 0x88,0xe8,0x55,0x4f,0x90,0xaa,0x92,0xe6,0xac,0xcf,0xcf,0xe1,0xff,0xc7,0x90,
+0xaf,0x82,0xe8,0xf3,0x4f,0xd2,0xe2,0x0, 0xcf,0x81,0xe0,0x2, 0x1, 0x98,0xe8,0x55,
+0x4a,0x14,0xe2,0x0, 0xca,0x1, 0x1, 0xa1,0xe0,0x0, 0x17,0xe4,0xe8,0x25,0x6f,0xc7,
+0x12,0x80,0xe8,0x33,0x4f,0xae,0x3c,0x62,0xe0,0x2f,0x3f,0x85,0xe8,0x33,0x6f,0xae,
+0xe8,0x12,0x57,0xb4,0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x14,0xe0,0x2, 0xb7,0x2f,
+0xde,0xb4,0xe8,0x12,0x57,0xb4,0xe8,0x33,0x6a,0x2b,0xe0,0x2, 0x97,0x2f,0xe7,0x6,
+0xcf,0x15,0xe0,0x2, 0xb7,0x2f,0xde,0xee,0x17,0x80,0xe8,0x55,0x6f,0x97,0xe8,0x55,
+0x6f,0x93,0xe8,0x55,0x6f,0x94,0xe0,0x52,0x14,0xba,0x49,0x5, 0xe1,0x1, 0x14,0xc,
+0xe4,0x0, 0xc1,0xe, 0x3d,0x62,0xe0,0x0, 0xde,0x7a,0xe0,0x2, 0x29,0x87,0x3d,0x62,
+0xe0,0x1, 0x14,0xff,0xe1,0x1, 0x14,0xc, 0xc0,0xc, 0xb, 0xa1,0xe0,0x1d,0x0, 0xbb,
+0xe8,0x33,0x4f,0xab,0xe7,0xfe,0x27,0xe2,0x17,0x81,0xe8,0x55,0x6f,0x94,0xe7,0xfe,
+0x0, 0xdd,0x3f,0x64,0xe4,0x0, 0xc7,0xe, 0xe0,0x51,0x16,0xae,0x3f,0x1d,0xe0,0x12,
+0x8b,0x8e,0xe0,0x8, 0x95,0x6e,0xe0,0x8, 0x95,0xfe,0x3b,0xff,0x75,0x5, 0x75,0x86,
+0xe0,0x1, 0x3, 0x8b,0xe6,0xac,0xce,0x47,0xe4,0x0, 0xc6,0x6, 0xe0,0x54,0x16,0xd2,
+0x3e,0x9c,0x8e,0x8d,0x3e,0x60,0x6e,0x89,0x3c,0xe0,0x3e,0xe0,0xc6,0x8c,0xc6,0xa,
+0xc4,0x89,0x3c,0x67,0x77,0x81,0xdc,0xcd,0x4e,0x89,0x57,0x81,0xe2,0x0, 0xce,0x83,
+0xe0,0x0, 0x1, 0x73,0xe2,0x0, 0xce,0x81,0x1, 0x9a,0xe1,0x1, 0x15,0x8c,0x16,0x0,
+0x3c,0xeb,0x3e,0xec,0xe2,0x1, 0xc6,0xff,0x3e,0xff,0x3, 0x91,0x8d,0x4b,0x3e,0xec,
+0xe6,0xac,0xcd,0x4a,0x3d,0x77,0xc6,0x1, 0xc5,0x8e,0x1, 0xf4,0x3f,0xed,0xe4,0x0,
+0xc7,0x8e,0x3f,0x99,0x96,0x8f,0x97,0x9f,0x76,0x85,0x77,0x86,0x3c,0xe0,0x3c,0x60,
+0x3d,0xe5,0x3d,0x64,0xc4,0x88,0xc4,0x7, 0xde,0xa5,0xe8,0x33,0x4f,0xac,0x27,0x88,
+0x17,0x80,0xe8,0x33,0x6f,0xac,0x17,0xa8,0x6f,0x87,0x17,0x8a,0x6f,0x88,0x16,0x80,
+0xe8,0xf9,0x4c,0x80,0x4d,0x87,0x4e,0x8, 0xe0,0xf5,0x15,0x12,0x3f,0xed,0x14,0x1,
+0x3c,0xff,0x1, 0xbf,0x26,0x83,0x6d,0x87,0x6e,0x8, 0x3f,0x64,0xe4,0x0, 0xc7,0xe,
+0xe0,0x51,0x16,0xae,0x3f,0x1d,0xe0,0x12,0x8e,0x8e,0x57,0x6, 0xe0,0xc, 0x36,0xac,
+0xe6,0x84,0xcf,0x4e,0x57,0x85,0x3f,0x1c,0xe2,0x1, 0xce,0xff,0x77,0x6, 0xe6,0x84,
+0xcf,0xcf,0x1, 0x33,0x4e,0x89,0xe2,0x0, 0xce,0x81,0x1, 0x4, 0xc2,0x81,0xe2,0x1,
+0xc2,0xff,0xc1,0x81,0x36,0xae,0xe2,0x1, 0xc1,0xff,0x3f,0x9d,0x77,0x85,0x3f,0xe6,
+0xe4,0x0, 0xc7,0x86,0x56,0x85,0x3f,0x92,0xe0,0xc, 0x36,0xc8,0xae,0xbf,0xe0,0xd,
+0x37,0x48,0xaf,0x5f,0xc3,0x1, 0x4f,0x7, 0xe2,0x1, 0xc3,0x7f,0xaf,0x6f,0x4f,0x8,
+0xae,0x2f,0xae,0xcf,0xaf,0x7f,0xc2,0x1, 0xe2,0x1, 0xc2,0x7f,0xe7,0xfd,0x0, 0xe5,
+0xe1,0x80,0x88,0x9a,0x3b,0xf1,0x1, 0x84,0x16,0xa, 0x3e,0xe8,0x15,0xa8,0xc7,0x81,
+0xe2,0x1, 0xc7,0xff,0xe7,0xff,0x0, 0xb6,0xe1,0x80,0xc7,0x80,0x0, 0xd8,0x3d,0xef,
+0xe0,0x40,0x95,0x2e,0xc5,0x81,0xe0,0xd, 0x35,0xa2,0x3e,0x92,0xe0,0x9, 0x35,0x48,
+0xe0,0x7, 0xad,0x7d,0xc7,0x91,0xe0,0x7, 0xac,0xed,0x37,0xa2,0xe0,0x40,0x96,0x9e,
+0x3f,0x92,0xe0,0xa, 0x36,0xc8,0xad,0xf, 0xae,0x9f,0x3f,0xeb,0xe7,0xfd,0x0, 0xdc,
+0x17,0x80,0xe0,0x7, 0xaf,0xe2,0xe7,0xfd,0x0, 0xde,0xe7,0xfe,0x21,0x8f,0xe8,0x33,
+0x4f,0xae,0x12,0x0, 0xe0,0x2f,0x3f,0x84,0xe8,0x33,0x6f,0xae,0x16,0x81,0xe8,0x12,
+0x57,0xb4,0x3c,0x62,0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x1d,0xe0,0x2, 0xb7,0x2f,
+0xdd,0xa4,0xe8,0x12,0x57,0xb4,0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x14,0xe7,0xfd,
+0x0, 0xf2,0xe8,0x12,0x57,0xb4,0x16,0x81,0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x1d,
+0xe0,0x2, 0xb7,0x2f,0xe7,0xfd,0x0, 0xf1,0xc0,0xc, 0xb, 0xe1,0xe4,0x0, 0xc4,0x14,
+0xe0,0x49,0x17,0xee,0x3f,0x98,0x97,0x6f,0xe6,0xad,0xcc,0xd9,0xe7,0x6, 0xcf,0x39,
+0xb7,0x6f,0xe0,0x4a,0x17,0xbe,0x3c,0x1f,0x97,0xe8,0xe7,0x6, 0xcf,0xb9,0xb7,0xe8,
+0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x49,0x17,0xee,0xe0,0xe, 0x3f,0x98,0x97,0x6e,
+0xe6,0xad,0xcf,0x5e,0x2f,0x4, 0xc4,0x81,0xe2,0x1, 0xc4,0xff,0x3f,0x98,0x97,0x2f,
+0xe6,0xad,0xcd,0x5a,0xe7,0x0, 0xcf,0x3a,0xb7,0x2f,0xe6,0xa9,0xcc,0x99,0x97,0x2f,
+0xe7,0x3, 0xcf,0x79,0xb7,0x2f,0xe0,0x4a,0x17,0xbe,0x3c,0x1f,0x97,0xa8,0xe7,0x0,
+0xcf,0xba,0xb7,0xa8,0x97,0xa8,0xe7,0x3, 0xcf,0xf9,0xb7,0xa8,0x38,0x82,0xe4,0x0,
+0xc4,0x14,0xe0,0x49,0x17,0xee,0x3f,0x98,0x97,0x2f,0xe6,0xab,0xcc,0xb9,0xe7,0xa,
+0xcf,0x59,0xb7,0x2f,0xe0,0x4a,0x17,0xbe,0x3c,0x1f,0x97,0xa8,0xe7,0xa, 0xcf,0xd9,
+0xb7,0xa8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x49,0x17,0xee,0x3f,0x98,0xb4,0xff,
+0xe0,0x4a,0x17,0xbe,0x3c,0x1f,0xb4,0xf8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x49,
+0x17,0xee,0x3f,0x98,0x8e,0x9, 0x97,0x3f,0xe6,0xab,0xce,0x3c,0xe7,0x0, 0xcf,0x5c,
+0xb7,0x3f,0x8e,0x99,0x97,0x3f,0xe6,0xab,0xce,0xbd,0xe7,0x5, 0xcf,0x5d,0xb7,0x3f,
+0x8f,0x29,0x95,0xbf,0xe6,0xab,0xcf,0x3e,0xe7,0xa, 0xcd,0xde,0xb5,0xbf,0xe0,0x4a,
+0x17,0xbe,0x3c,0x1f,0x97,0xb8,0xe7,0x0, 0xcf,0xdc,0xb7,0xb8,0x97,0xb8,0xe7,0x5,
+0xcf,0xdd,0xb7,0xb8,0x97,0xb8,0xe7,0xa, 0xcf,0xde,0xb7,0xb8,0x38,0x82,0xe4,0x0,
+0xc4,0x14,0xe0,0x49,0x17,0xee,0x3f,0x98,0x97,0x4f,0xe6,0xaf,0xcc,0xf9,0xe7,0x1,
+0xcf,0x19,0xb7,0x4f,0xe6,0xaf,0xcd,0x7a,0x97,0x4f,0xe7,0x2, 0xcf,0x1a,0xb7,0x4f,
+0x97,0x4f,0xe7,0x23,0xcf,0xb, 0xb7,0x4f,0x97,0x4f,0xe7,0x0, 0xcf,0x19,0xb7,0x4f,
+0xe0,0x4a,0x17,0xbe,0x3c,0x1f,0x97,0xc8,0xe7,0x1, 0xcf,0x99,0xb7,0xc8,0x97,0xc8,
+0xe7,0x2, 0xcf,0x9a,0xb7,0xc8,0x97,0xc8,0xe7,0x23,0xcf,0x8b,0xb7,0xc8,0x97,0xc8,
+0xe7,0x0, 0xcf,0x99,0xb7,0xc8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x49,0x17,0xee,
+0x3f,0x98,0x97,0x4f,0xe6,0xaf,0xcc,0xf9,0xe7,0x0, 0xcf,0x19,0xb7,0x4f,0xe0,0x4a,
+0x17,0xbe,0x3c,0x1f,0x97,0xc8,0xe7,0x0, 0xcf,0x99,0xb7,0xc8,0x38,0x82,0xe4,0x0,
+0xc4,0x14,0xe0,0x49,0x17,0xee,0x3f,0x98,0xb4,0xdf,0xe0,0x4a,0x17,0xbe,0x3c,0x1f,
+0xb4,0xd8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x49,0x17,0xee,0x3f,0x98,0xe0,0x1,
+0x97,0xf, 0xe6,0x85,0xcc,0xd9,0xe7,0x20,0xcf,0x39,0xe0,0x1, 0xb7,0xf, 0xe0,0x4a,
+0x17,0xbe,0x3c,0x1f,0xe0,0x1, 0x97,0x88,0xe7,0x20,0xcf,0xb9,0xe0,0x1, 0xb7,0x88,
+0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x49,0x17,0xee,0x3f,0x98,0xe0,0x1, 0x97,0x1f,
+0xe6,0x85,0xcc,0xd9,0xe7,0x20,0xcf,0x39,0xe0,0x1, 0xb7,0x1f,0xe0,0x4a,0x17,0xbe,
+0x3c,0x1f,0xe0,0x1, 0x97,0x98,0xe7,0x20,0xcf,0xb9,0xe0,0x1, 0xb7,0x98,0x38,0x82,
+0xe4,0x0, 0xc4,0x14,0xe0,0x49,0x17,0xee,0x3f,0x98,0x97,0x6f,0xe6,0xad,0xcc,0xd9,
+0xe7,0x3, 0xcf,0x39,0xb7,0x6f,0xe0,0x4a,0x17,0xbe,0x3c,0x1f,0x97,0xe8,0xe7,0x3,
+0xcf,0xb9,0xb7,0xe8,0x38,0x82,0xe0,0x48,0x17,0xc2,0xe0,0x2, 0x97,0x2f,0xe6,0xae,
+0xcc,0x68,0xe7,0x0, 0xcf,0x28,0xe0,0x2, 0xb7,0x2f,0xe6,0xae,0xcc,0xe9,0xe0,0x2,
+0x97,0x2f,0xe7,0x2, 0xcf,0x29,0xe0,0x2, 0xb7,0x2f,0xe0,0x4b,0x17,0x8e,0xe0,0x2,
+0x97,0x2f,0xe7,0x0, 0xcf,0x28,0xe0,0x2, 0xb7,0x2f,0xe0,0x2, 0x97,0x2f,0xe7,0x2,
+0xcf,0x29,0xe0,0x2, 0xb7,0x2f,0x38,0x82,0x97,0x8, 0xe0,0x48,0x17,0xc2,0xe0,0x7,
+0xb7,0x6f,0x97,0x9, 0xe0,0x7, 0xb7,0x7f,0xe0,0x4b,0x17,0x8e,0x94,0x8, 0xe0,0x7,
+0xb4,0x6f,0x94,0x89,0xe0,0x7, 0xb4,0xff,0x38,0x82,0x97,0x88,0xe8,0x24,0x77,0xde,
+0x94,0x8, 0xe8,0x26,0x74,0x4, 0x38,0x82,0x97,0x88,0xe8,0x24,0x77,0xe1,0x94,0x8,
+0xe8,0x26,0x74,0x7, 0x38,0x82,0x97,0x88,0xe8,0x24,0x77,0xdd,0x94,0x8, 0xe8,0x26,
+0x74,0x3, 0x38,0x82,0xe8,0x12,0x57,0xaa,0x16,0x0, 0xe0,0x4, 0x97,0x4f,0xe0,0x4,
+0x96,0xcf,0x37,0x4f,0xe7,0xf, 0xce,0x9c,0xe0,0x4, 0xb6,0xcf,0x16,0x1, 0xe0,0x7,
+0x96,0xaf,0xe7,0x0, 0xce,0x9c,0xe0,0x7, 0xb6,0xaf,0xe0,0x4, 0x96,0xcf,0xe7,0xf,
+0xce,0x9e,0xe0,0x4, 0xb6,0xcf,0x38,0x82,0x8, 0xb6,0x14,0x80,0x3a,0x68,0x3c,0x69,
+0xe8,0x12,0x51,0xaa,0xdf,0x99,0xe8,0x24,0x54,0xb3,0x14,0x12,0xd1,0x28,0xe8,0x12,
+0x57,0xaa,0x8e,0x84,0x97,0xf, 0xc1,0x84,0xe7,0x0, 0xcf,0x3d,0xb7,0xf, 0x11,0x0,
+0x8e,0x94,0x97,0xf, 0xe0,0x49,0x12,0xee,0xe7,0x3, 0xcf,0x3d,0xe0,0x4a,0x13,0x3e,
+0xb7,0xf, 0x8f,0x84,0x3f,0xf2,0x3, 0x82,0xb, 0x61,0x3f,0xe2,0xc7,0x82,0x37,0xa1,
+0x3f,0x94,0xe0,0xe, 0x31,0x22,0x3f,0x13,0x94,0xf, 0x96,0x8e,0x34,0x4e,0xe7,0x6,
+0xce,0xa8,0xb6,0x8e,0xc1,0x1, 0x96,0x8f,0x96,0xe, 0xe6,0xa2,0xce,0xad,0xe7,0x0,
+0xce,0x6d,0xb6,0xe, 0x3f,0x68,0xe4,0x0, 0xc7,0x14,0x97,0x8f,0xe0,0xd, 0x3a,0x9e,
+0x96,0x2d,0xe6,0xa8,0xcf,0xdf,0xe7,0x0, 0xce,0x3f,0xb6,0x2d,0x3f,0x16,0x96,0x2e,
+0xe4,0x1, 0xc4,0x4b,0xe7,0x0, 0xce,0x3f,0xb6,0x2e,0xe0,0x2, 0xc4,0x2, 0x94,0xad,
+0xe2,0x1, 0xc1,0x7f,0xd0,0xe4,0x0, 0xce,0x17,0x81,0xe8,0x33,0x6f,0xb2,0xe8,0x25,
+0x6f,0x8c,0x24,0x5, 0xe8,0x33,0x6f,0xb1,0xe0,0x9, 0x0, 0xc4,0xe8,0x12,0x57,0xaa,
+0x16,0x81,0x97,0xf, 0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0x0, 0xf7,0xe8,0x12,0x57,0xaa,
+0x97,0xf, 0xe7,0xd, 0xcf,0x18,0xb7,0xf, 0xe8,0x12,0x57,0xa9,0xe0,0x1, 0x97,0x2f,
+0xe7,0x0, 0xcf,0x19,0xe0,0x1, 0xb7,0x2f,0x38,0x82,0xe8,0x33,0x4c,0x32,0xe8,0x33,
+0x4f,0xb2,0x27,0x9a,0xe8,0x12,0x57,0x34,0x17,0x80,0xe8,0x33,0x6f,0xb1,0x16,0x81,
+0xe0,0x1, 0x97,0xae,0xe7,0x2, 0xcf,0x9d,0xe0,0x1, 0xb7,0xae,0x17,0x80,0xe0,0x1,
+0x96,0xae,0xe7,0x2, 0xce,0x9f,0xe0,0x1, 0xb6,0xae,0xe8,0x33,0x6f,0xb2,0xe8,0x25,
+0x6f,0x8c,0xe8,0x45,0x6f,0xdd,0x38,0x82,0xe8,0x12,0x57,0x2a,0xe8,0x30,0x57,0x8c,
+0xe0,0x2, 0x96,0xee,0xc7,0x81,0xe6,0x86,0xcf,0xff,0xe7,0x20,0xce,0x9f,0xe0,0x2,
+0xb6,0xee,0xe8,0x30,0x57,0x8d,0xe0,0x3, 0x96,0x8e,0xc7,0x81,0xe6,0x86,0xcf,0xff,
+0xe7,0x20,0xce,0x9f,0xe0,0x3, 0xb6,0x8e,0xe0,0x9, 0x0, 0x9c,0xe0,0x61,0x3e,0x2,
+0xe8,0x12,0x57,0xb5,0x15,0x81,0x97,0x2f,0x96,0xaf,0xe6,0xa1,0xcf,0x7e,0xe7,0xe,
+0xce,0x9b,0xb6,0xaf,0xe0,0x61,0x3e,0x82,0xe7,0xef,0x15,0xff,0x3e,0xdb,0xe0,0x61,
+0x3e,0x92,0xe1,0x0, 0xc4,0x80,0xb4,0x88,0xe0,0x1, 0x96,0x88,0x26,0xfe,0xb5,0x8,
+0xe0,0x1, 0x96,0x88,0x26,0xfe,0x16,0x81,0xb6,0xe8,0x96,0xe8,0x2e,0xff,0xe0,0x61,
+0x3e,0x12,0x96,0xaf,0xe7,0xe, 0xce,0x9e,0xb6,0xaf,0x38,0x82,0x8, 0xb1,0xe0,0x61,
+0x3e,0x2, 0xe8,0x12,0x57,0xb5,0x10,0x81,0x96,0xaf,0x97,0x2f,0xe6,0xa1,0xce,0xfd,
+0xe7,0xe, 0xcf,0x11,0xb7,0x2f,0xe0,0x61,0x3f,0x2, 0xe7,0xef,0x10,0xff,0x3f,0x51,
+0xe0,0x61,0x3f,0x12,0xb4,0x88,0xe0,0x1, 0x97,0x8, 0x27,0x7e,0x17,0x0, 0x3c,0xee,
+0x3f,0x7b,0x1, 0x8c,0x17,0x1, 0xb7,0x68,0x97,0x68,0x2f,0x7f,0xe0,0x61,0x3e,0x12,
+0x97,0x2f,0xe7,0xe, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0xb4,0x88,0xe0,0x1, 0x90,0x88,
+0x20,0xfe,0x90,0xa8,0xc7,0x1, 0xe1,0x80,0xb0,0x9a,0x0, 0xeb,0x8, 0xb1,0xe0,0x61,
+0x3e,0x2, 0xe8,0x12,0x57,0xb5,0x10,0x81,0x97,0x2f,0x96,0xaf,0xe6,0xa1,0xcf,0x7e,
+0xe7,0xe, 0xce,0x91,0xb6,0xaf,0xe0,0x61,0x3e,0x82,0xe7,0xef,0x10,0xff,0x3e,0xd1,
+0xe0,0x61,0x3e,0x92,0xe1,0x0, 0xc4,0x80,0xb4,0x88,0xe0,0x1, 0x96,0x88,0x26,0xfe,
+0x16,0x80,0x3e,0xfb,0x1, 0x8c,0x16,0x81,0xb6,0xe8,0x96,0xe8,0x2e,0xff,0xe0,0x61,
+0x3e,0x12,0x96,0xaf,0xe7,0xe, 0xce,0x9e,0xb6,0xaf,0x8, 0xe1,0xe1,0x80,0x94,0x9a,
+0xb4,0x88,0xe0,0x1, 0x94,0x88,0x24,0xfe,0xc6,0x81,0x0, 0xec,0x8, 0xb3,0x39,0x68,
+0x39,0xe9,0x3d,0x69,0x3c,0xe8,0xe8,0x12,0x54,0x2d,0xdf,0x71,0xe8,0x12,0x54,0x2c,
+0x3d,0x63,0x3c,0xe2,0x9, 0xa1,0xe7,0xfe,0x0, 0xeb,0x8, 0xb4,0x39,0x68,0x39,0xe9,
+0x3a,0x6a,0x3d,0xea,0x3d,0x69,0x3c,0xe8,0xe8,0x12,0x54,0x2d,0xdf,0xb8,0xe8,0x12,
+0x54,0x2c,0x3d,0xe4,0x3d,0x63,0x3c,0xe2,0xa, 0x21,0xe7,0xff,0x0, 0xb1,0xe8,0x12,
+0x57,0x35,0x16,0x81,0x97,0xae,0xe6,0xa9,0xcc,0x18,0xe7,0xd, 0xcf,0x9d,0xb7,0xae,
+0xe6,0xa9,0xcc,0x99,0xe8,0x12,0x57,0xaf,0xe0,0x9, 0xb6,0xef,0xe0,0x8, 0xb6,0xaf,
+0xe0,0x1, 0x96,0x8f,0xe7,0x28,0xce,0x88,0xe0,0x1, 0xb6,0x8f,0xe0,0x1, 0x96,0x8f,
+0xe7,0x20,0xce,0x89,0xe0,0x1, 0xb6,0x8f,0x16,0x80,0xe0,0x9, 0xb5,0x2f,0x97,0xae,
+0xe7,0xd, 0xcf,0x9d,0xb7,0xae,0x38,0x82,0xe8,0x12,0x57,0x35,0x16,0x81,0x97,0xae,
+0xe6,0x8a,0xcc,0x28,0xe7,0xd, 0xcf,0x9d,0xb7,0xae,0xe6,0xaa,0xcc,0xa9,0xe8,0x12,
+0x57,0xaf,0x3c,0x98,0xe0,0xa, 0xb6,0x8f,0xe0,0xf, 0xb6,0x8f,0x16,0x80,0xe0,0xd,
+0xb4,0xcf,0xe0,0xd, 0xb4,0xef,0xe0,0xe, 0xb4,0x8f,0xe0,0x9, 0xb5,0x4f,0x97,0xae,
+0xe7,0xd, 0xcf,0x9d,0xb7,0xae,0x38,0x82,0xe8,0x33,0x4f,0x33,0xe8,0x12,0x57,0xaf,
+0x27,0x1e,0x17,0x0, 0xe0,0x3, 0xb7,0x4f,0xe0,0x3, 0xb4,0x6f,0x17,0x1, 0xe0,0x4,
+0xb7,0xf, 0xe0,0x3, 0x96,0x8f,0xe6,0xaf,0xce,0xfd,0x26,0x96,0x17,0x0, 0xe8,0x33,
+0x6f,0x33,0x16,0x81,0xe0,0x3, 0x97,0x2f,0xe0,0x3, 0x97,0x2f,0xe7,0x0, 0xcf,0x1d,
+0xe0,0x3, 0xb7,0x2f,0x17,0x0, 0xe0,0x4, 0xb7,0xf, 0x38,0x82,0xe0,0x3, 0xb4,0x4f,
+0xe0,0x3, 0xb7,0x6f,0x0, 0xe4,0xe0,0x8, 0x96,0xcf,0x26,0xe4,0xe0,0x9, 0xb7,0xf,
+0x0, 0xe1,0x8, 0xb2,0xe8,0x12,0x57,0xb5,0x16,0x81,0x97,0x2f,0x39,0x68,0xe7,0xd,
+0xcf,0x1d,0xb7,0x2f,0x97,0x38,0xe8,0x12,0x57,0xaf,0xb7,0x2f,0x97,0x48,0xb7,0x4f,
+0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,
+0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x8e,0xa8,0x97,0xf, 0xe7,0x0, 0xcf,0x5d,0xb7,0xf,
+0x94,0x68,0x24,0x7, 0xe2,0x0, 0xcc,0x2, 0x5, 0x93,0xe2,0x0, 0xcc,0x4, 0x1, 0x1a,
+0xdf,0xac,0xe8,0x12,0x57,0xaf,0x16,0x80,0xe0,0x4, 0x97,0xcf,0xe0,0x1, 0xb7,0x82,
+0xe8,0x12,0x57,0xb5,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x9, 0x61,0x97,0xf,
+0x16,0xdf,0x3f,0x5d,0xb7,0xf, 0x8f,0x32,0x96,0x8f,0x37,0x25,0x3f,0x4d,0xb7,0xf,
+0x0, 0xe8,0x8e,0xb2,0x97,0xf, 0xe7,0xb, 0xcf,0x1d,0x0, 0xfa,0x8, 0xb1,0xe8,0x12,
+0x57,0xb5,0x16,0x81,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xaf,
+0x97,0x38,0xb7,0x2f,0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,
+0xe0,0x1, 0xb7,0x2f,0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x8e,0xa8,0x97,0xf, 0x14,0x10,
+0xe7,0x0, 0xcf,0x5d,0xb7,0xf, 0xe0,0x1, 0xb4,0xcf,0xdf,0x6f,0xe8,0x12,0x57,0xb5,
+0x16,0x80,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0x8, 0xb3,0xe8,0x12,
+0x57,0xb5,0x16,0x81,0x97,0x2f,0x11,0x80,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x39,0x69,
+0xe8,0x12,0x57,0xaf,0x97,0x28,0xb7,0x2f,0x97,0x48,0xb7,0x4f,0x97,0x38,0xb7,0x6f,
+0x8f,0x18,0x8e,0x88,0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,0x8f,0x28,0xe0,0x2,
+0xb7,0xf, 0x97,0x58,0xe0,0x2, 0xb1,0xaf,0xe0,0x1, 0xb7,0x4f,0x97,0x68,0xe0,0x1,
+0xb7,0x6f,0x97,0x78,0xe0,0x2, 0xb7,0x4f,0xe0,0x1, 0x97,0x8, 0xe0,0x2, 0xb7,0x6f,
+0x8e,0xb8,0x97,0xf, 0xe0,0x2, 0x14,0x0, 0xe7,0x7, 0xcf,0x1d,0xb7,0xf, 0xdf,0x35,
+0xe8,0x12,0x57,0xaf,0xe0,0x5, 0x97,0xf, 0x37,0x46,0xaf,0x2, 0xe0,0x5, 0x97,0xf,
+0xe6,0xaa,0xcf,0x2e,0xaf,0x12,0xe0,0x5, 0x97,0x2f,0xb7,0x12,0xe0,0x5, 0x97,0x4f,
+0xb7,0x22,0xe0,0x6, 0x97,0x2f,0xb7,0x32,0xe0,0x6, 0x97,0x4f,0xb7,0x42,0xe0,0x5,
+0x97,0x6f,0xe0,0x6, 0x97,0x8f,0xb7,0x52,0xb7,0xe2,0xe8,0x12,0x57,0xb5,0x97,0x2f,
+0xe7,0xd, 0xcf,0x13,0xb7,0x2f,0x9, 0xe1,0x8, 0xb2,0xe8,0x12,0x57,0xb5,0x16,0x81,
+0x91,0x2f,0x97,0x2f,0xe6,0xa2,0xc9,0x72,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,
+0x57,0xaf,0x97,0x18,0xb7,0x2f,0x97,0x28,0xb7,0x4f,0x97,0x38,0xb7,0x6f,0x8f,0x8,
+0x8e,0x98,0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,0x17,0x0, 0xe0,0x2, 0xb7,0x2f,
+0xe0,0x0, 0x14,0x40,0x97,0xf, 0xe7,0xe, 0xcf,0x19,0xb7,0xf, 0xde,0xee,0xe8,0x12,
+0x57,0xb5,0x97,0x2f,0xe7,0xd, 0xcf,0x12,0xb7,0x2f,0x9, 0x61,0x8, 0xb4,0x8f,0x88,
+0x39,0x68,0x89,0x98,0x94,0x38,0xe0,0x1, 0x15,0x72,0xe0,0x1, 0x14,0xff,0x34,0x21,
+0xe1,0x23,0x39,0xef,0xe0,0x0, 0xd9,0x8f,0xe8,0x12,0x57,0xb5,0x14,0x81,0x97,0x2f,
+0x16,0x8b,0xe7,0xd, 0xcf,0x19,0xb7,0x2f,0x3c,0x62,0xe8,0x12,0x57,0xaf,0xe4,0x2,
+0xc1,0x81,0xe0,0x1, 0x92,0xf, 0xe0,0x1, 0x97,0xf, 0xe7,0x28,0xcf,0xd, 0xe0,0x1,
+0xb7,0xf, 0xe0,0x1, 0x97,0xf, 0xe7,0x20,0xcf,0xd, 0xe0,0x1, 0xb7,0xf, 0xdf,0xad,
+0xe8,0x12,0x57,0xaf,0x97,0x32,0xe0,0x1, 0xb2,0xf, 0xe0,0x8, 0x14,0x0, 0xb7,0x2f,
+0xe0,0x1, 0xb1,0xaf,0xde,0xb2,0xe8,0x12,0x56,0x2f,0x17,0x80,0x97,0x32,0xe2,0x0,
+0xcf,0x83,0x3e,0xef,0x3f,0x1f,0xe2,0x1, 0xc6,0xff,0x37,0x21,0x2, 0x95,0xe0,0x7,
+0x96,0x8c,0xe0,0xb, 0x37,0xa2,0x36,0xdb,0xc7,0x81,0xe6,0xac,0xce,0xcd,0xe2,0x0,
+0xcf,0x8b,0xb6,0x8e,0x1, 0xec,0xe8,0x12,0x57,0xb5,0x16,0x80,0x97,0x2f,0xe7,0xd,
+0xcf,0x1d,0xb7,0x2f,0xa, 0x61,0xe2,0x0, 0xce,0x87,0x2, 0x84,0xe0,0x7, 0x96,0xac,
+0x0, 0xe9,0xe0,0x7, 0x96,0xcc,0x0, 0xe6,0x8, 0xb2,0xe8,0x12,0x57,0xb5,0x16,0x81,
+0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x97,0x38,0xe8,0x12,0x57,0xaf,0xb7,0x2f,
+0x97,0x48,0xb7,0x4f,0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,
+0xe0,0x1, 0xb7,0x2f,0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x8f,0x38,0x2f,0x1f,0x96,0x8f,
+0x34,0xa8,0xe7,0x7, 0xce,0x9e,0x3d,0x49,0xb6,0x8f,0xe0,0x1, 0xb5,0x4f,0x11,0x0,
+0x97,0xf, 0x14,0x8, 0xe7,0x8, 0xcf,0x12,0xb7,0xf, 0xe0,0x2, 0x97,0xf, 0xe0,0x1,
+0xcf,0x3, 0xe0,0x2, 0xb7,0xf, 0xe0,0x1, 0xb1,0x6f,0xde,0x57,0xe8,0x12,0x57,0xb5,
+0x97,0x2f,0xe7,0xd, 0xcf,0x12,0xb7,0x2f,0x9, 0x61,0xe2,0x0, 0xcf,0x1, 0x1, 0xe8,
+0x96,0x8f,0xe7,0x7, 0xce,0x9e,0xb6,0x8f,0xe0,0x1, 0xb4,0xcf,0xe0,0x1, 0x8e,0xf8,
+0x97,0xf, 0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0x0, 0xdb,0x8, 0xb1,0xe8,0x12,0x57,0xb5,
+0x16,0x81,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xaf,0x97,0x38,
+0xb7,0x2f,0x97,0x48,0xb7,0x4f,0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,
+0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x97,0xf, 0xe7,0x7,
+0xcf,0x19,0xb7,0xf, 0x97,0xf, 0xe0,0x1, 0x8e,0xf8,0xe7,0x6, 0xcf,0x1d,0xb7,0xf,
+0xe0,0x1, 0x8e,0xe8,0x97,0xf, 0xe7,0x9, 0xcf,0x1d,0xb7,0xf, 0x8e,0xb8,0x97,0xf,
+0xe0,0x20,0x14,0x0, 0xe7,0x5, 0xcf,0x1d,0xb7,0xf, 0xde,0xf, 0xe8,0x12,0x57,0xb5,
+0x16,0x80,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0x8, 0xb1,0xe8,0x12,
+0x57,0xb5,0x16,0x81,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xaf,
+0x97,0x38,0xb7,0x2f,0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,
+0xe0,0x1, 0xb7,0x2f,0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x97,0xf, 0xe0,0x1, 0x8e,0xf8,
+0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0xe0,0x1, 0x8e,0xe8,0x97,0xf, 0xe7,0x9, 0xcf,0x1d,
+0xb7,0xf, 0x8e,0xb8,0x97,0xf, 0xe7,0x5, 0xcf,0x1d,0xb7,0xf, 0x94,0x68,0xdd,0xdd,
+0xe8,0x12,0x57,0xb5,0x16,0x80,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,
+0x8, 0xb1,0xe8,0x12,0x57,0xb5,0x16,0x81,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,
+0xe8,0x12,0x57,0xaf,0x97,0x38,0xb7,0x2f,0x97,0x48,0xb7,0x4f,0x97,0x58,0xb7,0x6f,
+0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,0x97,0x28,0xe0,0x2,
+0xb7,0x2f,0x97,0xf, 0xe0,0x1, 0x8e,0xf8,0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0xe0,0x1,
+0x8e,0xe8,0x97,0xf, 0xe7,0x9, 0xcf,0x1d,0xb7,0xf, 0x8e,0xb8,0x97,0xf, 0xe7,0x0,
+0x14,0x0, 0xe7,0x5, 0xcf,0x1d,0xb7,0xf, 0xdd,0xa8,0xe8,0x12,0x57,0xb5,0x16,0x80,
+0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0x8, 0xb1,0xe8,0x12,0x57,0xb5,
+0x3e,0xe8,0x97,0x2f,0x14,0x1, 0xe7,0xd, 0xcf,0x18,0xb7,0x2f,0x97,0x3d,0xe8,0x12,
+0x57,0xaf,0xb7,0x2f,0x8f,0xd, 0x8e,0x1d,0x37,0x28,0x96,0xad,0x3f,0x1c,0xe0,0x1,
+0xb7,0x2f,0xe0,0x2, 0xb6,0xaf,0xe0,0x1, 0xb5,0x4f,0xe0,0x1, 0xb4,0xef,0xe8,0x33,
+0x6c,0x33,0xdd,0x83,0xe8,0x12,0x57,0xaf,0x16,0x80,0xe0,0x4, 0x94,0x6f,0xe8,0x12,
+0x57,0xb5,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0xe8,0x12,0x57,0x35,
+0x15,0x81,0x96,0x2e,0x97,0xae,0x15,0x0, 0xe7,0xd, 0xcf,0x9b,0xb7,0xae,0xe6,0xa2,
+0xce,0x7c,0xe8,0x12,0x57,0xaf,0xe0,0xc, 0x96,0xaf,0xe7,0x1, 0xce,0x99,0xe0,0xc,
+0xb6,0xaf,0xe0,0xc, 0x96,0xaf,0xe7,0x3, 0xce,0x9a,0xe0,0xc, 0xb6,0xaf,0x96,0xe8,
+0xe0,0xc, 0xb6,0xcf,0x96,0xf8,0xe0,0xc, 0xb6,0xef,0xe0,0x1, 0x96,0x88,0xe0,0xd,
+0xb6,0x8f,0xe0,0x1, 0x96,0x98,0xe0,0xd, 0xb6,0xaf,0x8e,0xe8,0x8d,0x78,0x36,0xa8,
+0x3e,0x9a,0xe0,0xe, 0xb6,0xaf,0xe0,0x1, 0x8e,0x88,0xe0,0x1, 0x8d,0x18,0x36,0xa8,
+0x3e,0x9a,0xe0,0xe, 0xb6,0xcf,0xe0,0x1, 0x8e,0xa8,0xe0,0x1, 0x8d,0x38,0x36,0xa8,
+0xe0,0x1, 0x94,0x28,0x3e,0x9a,0xe0,0xe, 0xb6,0xef,0xe0,0x2, 0xb4,0x2f,0xe0,0xc,
+0x96,0xaf,0xe7,0x0, 0xce,0x9b,0xe0,0xc, 0xb6,0xaf,0xe0,0xc, 0xb5,0x8f,0xe0,0x3,
+0x96,0x8f,0xe6,0xae,0xce,0xfd,0x26,0x90,0xe0,0x3, 0x96,0xaf,0x15,0x81,0xe7,0x1,
+0xce,0x9b,0xe0,0x3, 0xb6,0xaf,0x16,0x80,0xe0,0xc, 0xb6,0x8f,0x97,0xae,0xe7,0xd,
+0xcf,0x9c,0xb7,0xae,0x38,0x82,0xe0,0xf, 0x96,0xaf,0x26,0xea,0xe0,0xf, 0x96,0xef,
+0xce,0x81,0xe0,0xf, 0xb6,0xef,0x0, 0xe4,0x3f,0x83,0xe8,0x12,0x57,0xb5,0x16,0x81,
+0x97,0x2f,0xe7,0x4, 0xcf,0x1d,0xb7,0x2f,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0xe8,0x12,0x57,0xb5,0x16,0x80,0x97,0x2f,0xe7,0x4, 0xcf,0x1d,0xb7,0x2f,0x3b,0x0,
+0x38,0x82,0xe8,0x12,0x57,0xb5,0x16,0x81,0x97,0x2f,0x14,0xa, 0xe7,0x4, 0xcf,0x1d,
+0xb7,0x2f,0xe7,0x59,0x0, 0xe3,0xe8,0x12,0x57,0xb5,0x16,0x80,0x97,0x2f,0xe7,0x4,
+0xcf,0x1d,0xb7,0x2f,0x0, 0x0, 0x0, 0xd9,0xc0,0x7e,0xe8,0x12,0x57,0xab,0x16,0x80,
+0xb6,0x89,0x97,0x6f,0xe7,0x2, 0xcf,0x1d,0xb7,0x6f,0x17,0x20,0x6f,0x3, 0x97,0x4f,
+0xe6,0xae,0xcf,0x7e,0x2f,0x7, 0x4f,0x3, 0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0x6f,0x3,
+0x2f,0x77,0x4f,0x3, 0x2f,0x4, 0x14,0x1, 0xc0,0x2, 0x38,0x82,0x17,0x20,0xb4,0xf,
+0x6f,0x3, 0x97,0x4f,0xe6,0xaf,0xcf,0x7e,0x2f,0x7, 0x4f,0x3, 0xc7,0x7f,0xe2,0x1,
+0xc7,0x7f,0x6f,0x3, 0x2f,0x77,0x4f,0x3, 0x27,0x6f,0x97,0xaf,0x14,0x0, 0xb7,0x89,
+0x0, 0xec,0x8, 0xb3,0xc0,0x7e,0x39,0xe8,0x39,0x69,0x14,0x7e,0x3c,0xe0,0xc4,0x82,
+0x3c,0x53,0xdf,0xcb,0xe2,0x0, 0xcc,0x1, 0x1, 0x7, 0xe6,0xaf,0xcc,0x73,0x57,0x81,
+0x24,0x5, 0x14,0x0, 0xaf,0x82,0xc0,0x2, 0x9, 0xe1,0x37,0xc8,0xaf,0x82,0x0, 0xfc,
+0xe8,0x12,0x57,0xab,0x16,0x81,0x97,0x6f,0xe7,0x2, 0xcf,0x1d,0xb7,0x6f,0x17,0x20,
+0x96,0xcf,0xe6,0xae,0xce,0xfd,0x2e,0x89,0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0x2f,0x79,
+0x14,0x1, 0x38,0x82,0x14,0x0, 0x0, 0xfe,0xb4,0xf, 0x17,0x20,0xb4,0xaf,0x96,0xcf,
+0xe6,0xad,0xce,0xfd,0x2e,0xf8,0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0x2f,0x79,0x0, 0xf1,
+0x8, 0xb3,0x39,0x68,0x39,0xe9,0x3c,0xe3,0x3c,0x62,0xdf,0xc4,0x2c,0x7d,0x9, 0xe1,
+0xe8,0x25,0x4f,0xaf,0xe2,0x0, 0xcf,0x81,0x1, 0x88,0xe8,0x12,0x57,0x32,0x96,0x8e,
+0xe7,0x6, 0xce,0x9f,0xb6,0x8e,0x0, 0xfc,0xe8,0x25,0x4f,0xb0,0xe2,0x1, 0xcf,0xb3,
+0x5, 0x97,0x8, 0xb1,0x17,0x80,0xe8,0x25,0x6f,0xb0,0xdf,0x6c,0xe8,0xf3,0x4f,0xa5,
+0xe2,0x1, 0xcf,0x86,0x1, 0x8a,0x14,0x82,0xe7,0x67,0x14,0x21,0xdf,0xba,0xe0,0x1,
+0x14,0xd0,0xe7,0x67,0x14,0x22,0xdf,0xb5,0x8, 0xa1,0xe7,0xfe,0x0, 0xe6,0x38,0x82,
+0x8, 0xb2,0xe8,0x12,0x57,0xaa,0xe0,0x6, 0x91,0x4f,0xe6,0xad,0xc9,0x72,0x29,0x39,
+0x14,0x1, 0xef,0xfa,0xd0,0x90,0xe0,0x33,0x14,0xb4,0xe7,0xe9,0x14,0x30,0xdf,0xc1,
+0xe0,0x33,0x14,0xb5,0xe7,0xe9,0x14,0x31,0xdf,0xbc,0xe0,0x33,0x14,0xb6,0xe7,0xe9,
+0x14,0x32,0xdf,0xb7,0xe0,0x33,0x14,0xb7,0xe7,0xe9,0x14,0x33,0xdf,0xb2,0xe0,0x33,
+0x14,0xb8,0xe7,0xe9,0x14,0x34,0xdf,0xad,0xe0,0x33,0x14,0xb9,0xe7,0xe9,0x14,0x35,
+0xdf,0xa8,0xe0,0x33,0x14,0xba,0xe7,0xe9,0x14,0x36,0xdf,0xa3,0xe0,0x33,0x14,0xbb,
+0xe7,0xa4,0x14,0x2, 0xdf,0x9e,0xe0,0x33,0x14,0xbc,0xe7,0xf0,0x14,0x1, 0xdf,0x99,
+0xe7,0xf0,0x14,0x3, 0xe0,0x33,0x14,0xbd,0xdf,0x94,0x3c,0x62,0xef,0xfa,0xd0,0x5b,
+0xe8,0x33,0x4f,0xbd,0x27,0x84,0x17,0x81,0xe8,0x25,0x6f,0xaf,0xe8,0x33,0x4f,0xbb,
+0xe2,0x1, 0xcf,0x86,0x1, 0x6, 0xe8,0x33,0x4f,0xbc,0xe2,0x1, 0xcf,0x86,0x1, 0x86,
+0xe7,0xff,0x17,0x86,0xe8,0xf3,0x6f,0xa5,0x9, 0x61,0xe7,0xff,0x17,0x87,0x0, 0xfb,
+0x8, 0xb2,0xc0,0x5c,0x39,0x68,0x3c,0x60,0x15,0x24,0x14,0x80,0xc4,0x2, 0xd6,0xaa,
+0x29,0x1b,0xe8,0x55,0x4f,0xa5,0xe8,0x30,0x55,0x14,0x6f,0x83,0x3c,0x60,0xe8,0x55,
+0x4f,0xa4,0xe8,0x30,0x54,0x94,0x6f,0x82,0xe0,0x9a,0x17,0xb4,0x37,0xc1,0x77,0x84,
+0xe2,0x1, 0xc5,0x7f,0xe8,0x72,0x57,0xab,0xe2,0x1, 0xc4,0xff,0x37,0xc1,0xc4,0x2,
+0x77,0x85,0x77,0x86,0xdd,0x52,0xc0,0x24,0x9, 0x61,0x8, 0xb7,0xc0,0x7e,0x3b,0x68,
+0x3c,0x6b,0x3a,0x69,0x39,0x6a,0x39,0xeb,0xe8,0x30,0x53,0x83,0xef,0xfa,0xde,0x6e,
+0x3a,0xe8,0xef,0xf9,0xd9,0xc8,0xe0,0xa, 0x15,0x24,0x14,0x80,0x3c,0x66,0xd6,0x7a,
+0x22,0x88,0xe0,0xa, 0x15,0x24,0x14,0x80,0x3c,0x64,0xd6,0x74,0xe0,0xae,0x11,0x7c,
+0xe8,0x12,0x57,0xaa,0xe0,0x6, 0x97,0xcf,0xe8,0x24,0x57,0x1c,0xe6,0xa1,0xcf,0xff,
+0xe7,0x6, 0xcf,0x1f,0xe8,0x24,0x77,0x1c,0x17,0x80,0x3c,0x6f,0x3c,0xe3,0x77,0x81,
+0xef,0xf9,0xda,0x2e,0x57,0x81,0x24,0x7a,0x3f,0x66,0xc7,0x7e,0x17,0x80,0xe0,0xa4,
+0x16,0x58,0x3f,0xf7,0x1, 0x99,0x14,0x1, 0x77,0x81,0xef,0xf9,0xd9,0xc9,0x57,0x81,
+0x22,0x87,0x3f,0x64,0x37,0xa1,0xc7,0x7e,0x3f,0x92,0x39,0x7f,0x1, 0x97,0x3c,0xe3,
+0x3c,0x66,0xef,0xf9,0xda,0xe6,0x22,0x85,0x3c,0xe3,0x3c,0x64,0xef,0xf9,0xda,0xe1,
+0x14,0x1, 0xc0,0x2, 0xb, 0xe1,0xe0,0xd, 0x37,0xa1,0x3e,0x9c,0x95,0x8d,0xe0,0x80,
+0x96,0x9e,0xc7,0x81,0x3e,0x9b,0xb6,0x8e,0x0, 0xdd,0xe1,0x80,0x96,0x12,0xe0,0x80,
+0x96,0x9e,0x3e,0x9c,0xb6,0x8e,0x0, 0xe2,0xe8,0x72,0x54,0xab,0xe0,0x9a,0x15,0x34,
+0x3c,0x69,0xe7,0x63,0x0, 0xdf,0x8, 0xb7,0xe8,0x50,0x4a,0xf8,0x3b,0x68,0xe0,0x1,
+0x14,0x7f,0xe0,0x4c,0x10,0xd8,0x3e,0x68,0x16,0x80,0x11,0x81,0x12,0x2, 0x11,0x3,
+0x3a,0xfd,0x1, 0x82,0xb, 0xe1,0x3e,0xfa,0x1, 0x28,0x8f,0x81,0x8f,0x11,0xe0,0xf,
+0x3b,0x2f,0xe0,0x41,0x3f,0xaf,0xe2,0x1, 0xc7,0xff,0xe0,0xe, 0x3c,0xae,0xe0,0x41,
+0x3f,0x2e,0xe1,0x27,0x39,0xaf,0xe2,0x1, 0xc7,0x7f,0x23,0x84,0xe1,0x27,0x39,0xae,
+0x2b,0x9b,0xe1,0x27,0x3a,0x2f,0x23,0x84,0xe1,0x27,0x3a,0x2e,0x2b,0x93,0x25,0x89,
+0xe1,0x2f,0x39,0x2f,0x27,0x86,0x39,0x7e,0x3f,0xe2,0xe0,0x6f,0x3c,0xac,0x3e,0x6f,
+0xe1,0x28,0x3e,0x58,0xe2,0x1, 0xc4,0x7f,0xc6,0x81,0xe2,0x1, 0xc6,0xff,0xc0,0x82,
+0x0, 0xd0,0x16,0x2, 0x0, 0xf6,0x14,0x1, 0x0, 0xce,0x3d,0x78,0x2, 0x91,0x3f,0x69,
+0xc7,0x7f,0x3f,0x2a,0x3c,0x7e,0xe0,0xf, 0x3c,0x2a,0xe2,0x1, 0xc7,0xff,0x2, 0xe,
+0xe0,0x8, 0x35,0x29,0xe0,0x2, 0xc4,0x0, 0x34,0x48,0xaf,0x8b,0x38,0x82,0xc4,0x1,
+0x3c,0x1a,0xe2,0x1, 0xc4,0x7f,0x17,0x80,0x0, 0xf9,0xe0,0x8, 0x3d,0x28,0x3c,0x19,
+0xe2,0x1, 0xc4,0x7f,0x0, 0xf3,0x8, 0xb6,0xe8,0x55,0x4f,0xa5,0x3b,0x69,0xe0,0xa6,
+0x3f,0x88,0xe0,0x90,0x17,0x90,0x33,0x21,0x3f,0x96,0xe8,0x51,0x4f,0x11,0x91,0x8f,
+0x39,0xae,0xe2,0x0, 0xc9,0x80,0xe0,0x0, 0x5, 0x62,0xe8,0x19,0x51,0x5f,0x3a,0xe8,
+0x97,0xf2,0x3a,0x69,0x3f,0xf3,0x2, 0x6, 0xe0,0x1, 0x8f,0xa2,0xc7,0x81,0xe0,0x1,
+0xaf,0xa2,0x16,0x81,0x8f,0x2, 0xe0,0xe, 0x3c,0x2e,0xe0,0x41,0x3f,0x2e,0xe2,0x1,
+0xc7,0x7f,0xe1,0x2e,0x3f,0x1d,0x2f,0xb, 0x8f,0x92,0xe0,0xf, 0x3c,0xaf,0xe0,0x41,
+0x3f,0xaf,0xe2,0x1, 0xc7,0xff,0xe1,0x2f,0x3f,0x9d,0x27,0x94,0x8f,0xc2,0x8d,0x22,
+0xe2,0x0, 0xcf,0x82,0x5, 0xbc,0x8f,0xd2,0xe2,0x0, 0xcf,0x82,0x5, 0xb8,0x15,0x81,
+0xdf,0x63,0x3f,0xe8,0xc7,0xfe,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0x81,0x2, 0xb1,
+0x31,0x81,0x3d,0xe2,0xc5,0x92,0x97,0x9b,0xe0,0x1, 0x97,0x12,0x3f,0x93,0xe0,0xc,
+0x31,0x8f,0xe0,0x2e,0x3f,0x7c,0xe0,0x1, 0xb7,0x12,0xb7,0x9b,0xe8,0x25,0x4f,0xd8,
+0x27,0x89,0xe8,0x81,0x57,0xa8,0x3f,0x96,0x92,0x8f,0xe8,0x81,0x57,0xa7,0x3b,0x1f,
+0x92,0x6, 0x3e,0xe2,0xc6,0x96,0x97,0x9d,0xe0,0x1, 0x97,0x32,0xe0,0x8e,0x39,0x85,
+0xe0,0x1, 0xb7,0x32,0xb7,0x9d,0x3e,0xe2,0xc6,0x9a,0xe0,0x1, 0x97,0x52,0x97,0x9d,
+0xe0,0x8e,0x39,0x84,0xe0,0x1, 0xb7,0x52,0xb7,0x9d,0xb, 0x61,0x15,0x80,0x0, 0xc9,
+0xe2,0x0, 0xcc,0x1, 0x17,0x80,0xe0,0x6f,0x39,0xa3,0x39,0xef,0x0, 0xcb,0x8, 0xb7,
+0xc0,0x7e,0xe8,0x19,0x51,0x5f,0x3f,0x62,0xc7,0x12,0xe0,0x1, 0x97,0x92,0x96,0x9e,
+0x3f,0xcd,0x2f,0x85,0xe0,0x1, 0xb7,0x92,0x17,0x81,0xb7,0x9e,0xe8,0x25,0x4a,0xd8,
+0x2a,0x9b,0x3d,0x62,0xc5,0x16,0x96,0x1a,0xe0,0x1, 0x97,0x32,0x3d,0xe2,0xc5,0x9a,
+0x96,0x9b,0xe0,0x1, 0x97,0xd2,0xe0,0x9, 0x36,0x4a,0x37,0x26,0x3f,0x49,0xe0,0x1,
+0xb7,0x32,0x36,0x26,0xe0,0xe, 0x36,0xca,0x37,0xa6,0xb6,0x1a,0x3f,0xce,0x36,0xa6,
+0xe0,0x1, 0xb7,0xd2,0xb6,0x9b,0xe0,0x1, 0x91,0xa2,0xe0,0x1, 0x93,0x12,0xe0,0x1,
+0x94,0x32,0xe0,0x1, 0x94,0xc2,0x3d,0xe3,0x3d,0x66,0xd4,0x6d,0x3a,0x69,0xe0,0x1,
+0x94,0x52,0xe0,0x1, 0x94,0xe2,0x3d,0xe3,0x3d,0x66,0xd4,0x65,0x8f,0xb2,0xe0,0x4c,
+0x11,0xd8,0xe4,0x0, 0xc7,0x8e,0xe0,0xe, 0x39,0x9f,0xe0,0x0, 0x22,0xf7,0x16,0x80,
+0xe0,0x24,0x3a,0x6d,0xe0,0x29,0x3c,0xed,0xe0,0x7, 0xb2,0x6e,0x3f,0x93,0xe0,0x7,
+0xb4,0xfe,0xe0,0x1, 0x8f,0x22,0xe2,0x0, 0xcf,0x20,0xe0,0x0, 0x2, 0xed,0xe0,0x10,
+0xaf,0x2f,0x13,0x1, 0x8c,0x22,0xef,0xfd,0xd8,0x74,0xe8,0x19,0x52,0xdf,0xe0,0x26,
+0x3c,0x66,0x8d,0x95,0xe0,0x0, 0x25,0xe3,0xe8,0x55,0x4f,0xa7,0x3f,0x6f,0xc7,0x7f,
+0x3d,0xfe,0xe0,0x0, 0x1, 0x5c,0xe2,0x0, 0xcd,0x81,0xe0,0x0, 0x1, 0x5b,0xc7,0xfe,
+0xe0,0x2b,0x3d,0x8f,0x35,0xa2,0x8f,0x5, 0x27,0x8, 0xe8,0x55,0x4f,0xa6,0x3e,0xef,
+0xc6,0xff,0x3f,0x7d,0xe0,0x0, 0x1, 0xd1,0xc5,0x86,0xe2,0x1, 0xc5,0xff,0xe8,0x51,
+0x4f,0xa5,0xe0,0x1, 0x92,0x15,0xe0,0x1, 0x91,0x25,0xe0,0xb, 0x3f,0xab,0xe0,0xa,
+0x35,0x8f,0x3c,0x64,0x3c,0xe2,0xd4,0x17,0x8f,0xb5,0xe0,0xa, 0x33,0xf, 0x13,0x8e,
+0x3b,0xbf,0x3d,0x78,0xe0,0xd, 0x39,0x97,0x3f,0xea,0x3f,0x66,0x2, 0x84,0x1, 0x85,
+0x3b,0x79,0x5, 0x83,0x3f,0xe8,0x3f,0x69,0x3c,0x6f,0xe0,0x0, 0x17,0xff,0xe0,0x8e,
+0x3f,0x5f,0xe4,0x0, 0xc4,0x7f,0x3d,0xe6,0x3c,0x1e,0x3c,0xef,0x76,0x81,0xd4,0x34,
+0x56,0x81,0xe0,0xf, 0x39,0x97,0xe0,0x10,0xac,0x9d,0x8f,0x25,0xe0,0x8, 0xb2,0x3f,
+0x37,0x21,0x39,0x9e,0x8f,0x3, 0xe0,0x8, 0xb1,0x4f,0xe0,0x10,0xaf,0x3f,0x8f,0x13,
+0xe0,0x10,0xaf,0x4f,0xc0,0x2, 0xb, 0xe1,0xc2,0x20,0xc4,0xa0,0xe0,0x7, 0xb2,0x6e,
+0xe7,0xff,0x0, 0x8e,0x17,0x20,0xe7,0xff,0x0, 0x94,0x15,0x86,0xe7,0xff,0x0, 0xad,
+0x15,0x84,0xe7,0xff,0x0, 0xaa,0xe2,0x0, 0xcf,0x1, 0x1, 0x5, 0xc7,0xfe,0x3f,0x7f,
+0xe7,0xff,0x1, 0xaf,0xc5,0x84,0xe7,0xff,0x0, 0xaa,0x8, 0xb6,0xc0,0x62,0x3b,0x68,
+0x3c,0x6a,0x39,0xe9,0x3a,0xea,0x3a,0x6b,0xef,0xfd,0xd7,0xf3,0x17,0x83,0xe0,0x28,
+0x3c,0x3f,0xe8,0x28,0x57,0xd3,0x74,0x8, 0x3c,0x7f,0x3, 0x2, 0x77,0x88,0xe0,0xe,
+0x32,0xa1,0xe0,0x4c,0x17,0xd8,0x3f,0x9e,0x39,0x60,0x8c,0xf, 0x8f,0x9f,0xc1,0x2,
+0xe8,0x55,0x4c,0xa4,0xaf,0x92,0x3d,0xe0,0x17,0x80,0xc5,0x88,0x3d,0x66,0xe0,0x1,
+0xaf,0xa2,0x17,0x80,0x77,0x8a,0x77,0x8b,0x77,0x8c,0x77,0x8d,0x77,0x8e,0x77,0x8f,
+0xa9,0xd2,0x6c,0x2, 0xaa,0xa2,0xaa,0x32,0xab,0x42,0xde,0x60,0xac,0x72,0x3d,0xe0,
+0xe8,0x55,0x4c,0xa5,0x8c,0x12,0x3d,0x63,0xc5,0x8a,0xde,0x58,0x8f,0xf2,0x89,0xe2,
+0xe8,0x19,0x71,0x5f,0x3f,0x93,0xaf,0xf2,0xe0,0x1, 0x8f,0x82,0x3c,0x1f,0xe0,0x1,
+0xac,0x12,0x8f,0xf2,0x3f,0xf3,0x2, 0x84,0xde,0xe3,0xc0,0x1e,0xb, 0x61,0xe0,0x1,
+0x8a,0x2, 0xe0,0x1, 0x8f,0x92,0x3f,0xf4,0x2, 0x85,0xc1,0x81,0xe2,0x1, 0xc1,0xff,
+0x0, 0xf1,0x3c,0xe4,0x3c,0x63,0xc2,0x1, 0xde,0x57,0xe2,0x1, 0xc2,0x7f,0x0, 0xf2,
+0x8, 0xb7,0xc0,0x70,0x3a,0x60,0x11,0x0, 0xe0,0x3, 0x17,0xff,0xc2,0x10,0x3b,0xe8,
+0x3f,0x69,0xe1,0xc0,0xb7,0xb4,0x3b,0x62,0x77,0x85,0x71,0x6, 0x71,0x7, 0x3f,0xe0,
+0xc7,0x8e,0x3f,0x92,0x39,0xe6,0xe0,0x5, 0x3a,0x12,0x77,0x84,0x0, 0x82,0x11,0x81,
+0xe0,0xf, 0x3a,0x93,0x8c,0xf, 0x57,0x84,0x3c,0x17,0x3f,0x93,0x8c,0x8f,0xe2,0x1,
+0xc4,0x7f,0xe0,0x43,0x3e,0x8, 0x3c,0x9e,0xe2,0x1, 0xc4,0xff,0xe0,0x2d,0x3e,0xa,
+0xe0,0x43,0x3f,0x89,0x26,0x84,0xe0,0x2d,0x3f,0x8b,0x2e,0xab,0xe8,0x19,0x56,0xdf,
+0x80,0xed,0x38,0xfc,0x2, 0x26,0x80,0xfd,0x38,0xfc,0x5, 0x23,0xe0,0x1, 0x80,0x8d,
+0x38,0xff,0x2, 0x1f,0xe0,0x1, 0x80,0x9d,0x38,0xff,0x5, 0x1b,0xe8,0x55,0x48,0xa5,
+0xe0,0xaf,0x38,0x8c,0x96,0x6d,0x3e,0x1f,0x88,0x8c,0x28,0x93,0x37,0xa1,0xe0,0x90,
+0x10,0x90,0x3f,0x91,0xe0,0x1, 0x96,0x8d,0x97,0x8f,0x3f,0xfd,0x2, 0xa, 0x17,0x82,
+0xaf,0x8c,0x77,0x3, 0x75,0x2, 0x75,0x81,0xdd,0xff,0x55,0x81,0x55,0x2, 0x57,0x3,
+0xe7,0xff,0x21,0xbf,0xc1,0x2, 0xe2,0x0, 0xc9,0x4, 0xe7,0xff,0x1, 0xb2,0xc0,0x10,
+0xb, 0xe1,0x8, 0xb7,0x3b,0xe8,0x39,0xe8,0x39,0x69,0xc3,0xff,0xe8,0x55,0x4f,0xa5,
+0x3f,0x62,0xe0,0xae,0x3f,0x83,0xe8,0x19,0x57,0xdf,0x97,0xef,0x3f,0x9e,0x8f,0xf,
+0xe0,0x1, 0x2f,0x45,0x3a,0xe3,0x3a,0x62,0x16,0x81,0xe2,0x1, 0xc2,0xff,0xe2,0x1,
+0xc2,0x7f,0xae,0x8f,0x3c,0xe4,0x3c,0x65,0xdd,0xd7,0xe8,0x19,0x56,0x5f,0x8f,0xec,
+0x39,0xff,0x5, 0x1d,0xe8,0x55,0x4f,0xa5,0x3f,0x62,0xe0,0xae,0x3b,0x8f,0x97,0xec,
+0x3f,0x9e,0x8e,0x8f,0x2e,0x94,0xe0,0x90,0x15,0x90,0x37,0x21,0x3f,0x1b,0x95,0x8e,
+0xe0,0x1, 0x97,0xc, 0x3c,0x65,0xc4,0x7f,0x3d,0xfe,0xe2,0x1, 0xc4,0x7f,0xe0,0x43,
+0x3b,0x8, 0xe0,0x0, 0x5, 0x7b,0x3c,0xe2,0x3c,0x66,0xdf,0xc4,0xe8,0x19,0x56,0x5f,
+0xe0,0x1, 0x8f,0x8c,0x39,0x7f,0x5, 0x1e,0xe8,0x55,0x4f,0x25,0x3f,0xe2,0xc7,0xff,
+0xe0,0xaf,0x3f,0x3, 0x96,0xec,0x3e,0x9f,0x8f,0xd, 0x2f,0x14,0xe0,0x90,0x15,0x90,
+0x37,0xa1,0x3f,0x9b,0x95,0x8f,0xe0,0x1, 0x97,0x8c,0x3c,0xe4,0xc4,0xff,0x3d,0xff,
+0xe2,0x1, 0xc4,0xff,0xe0,0x43,0x3b,0x9, 0xe0,0x0, 0x5, 0x63,0x3c,0xe6,0x3c,0x63,
+0xdf,0xa1,0xe8,0x19,0x56,0x5f,0x3f,0xe3,0x8f,0x7c,0xc7,0x81,0x3f,0xfe,0x3, 0x1e,
+0xe8,0x55,0x4f,0x25,0x3e,0xe2,0xe0,0xad,0x3f,0xf, 0x97,0xec,0x3f,0x6d,0x3f,0x9d,
+0x8e,0x8f,0x2e,0x94,0xe0,0x90,0x15,0x90,0x37,0x21,0x3f,0x1b,0x95,0x8e,0xe0,0x1,
+0x97,0xc, 0x3c,0x65,0xc4,0x1, 0x3d,0xfe,0xe2,0x1, 0xc4,0x7f,0xe0,0x43,0x3b,0x8,
+0xe0,0x0, 0x5, 0x4a,0x3c,0xe2,0x3c,0x66,0xdf,0x7d,0xe8,0x19,0x56,0xdf,0x3f,0xe2,
+0xe0,0x1, 0x8f,0x1d,0xc7,0x81,0x3f,0xfe,0xe0,0x0, 0x3, 0x49,0xe8,0x55,0x4f,0x25,
+0xe0,0xaf,0x3f,0x3, 0x97,0x6d,0x3f,0x1f,0x8e,0xe, 0xe0,0x0, 0x2e,0x40,0xe0,0x90,
+0x16,0x10,0x37,0xa1,0x3f,0x9c,0x96,0xf, 0xe0,0x1, 0x97,0x8d,0x3c,0xe4,0xc4,0x81,
+0x3e,0x7f,0xe2,0x1, 0xc4,0xff,0xe0,0x43,0x3a,0x9, 0x2, 0xc, 0x17,0x82,0x3c,0x65,
+0xaf,0x8e,0xdd,0x4a,0x3d,0xe2,0x3d,0x63,0x3c,0xe4,0x3c,0x63,0xb, 0xa1,0xe7,0xfd,
+0x0, 0xf1,0x39,0x64,0xe7,0xfe,0x0, 0xd4,0x17,0x2, 0x3c,0xe4,0xaf,0xf, 0xdd,0x3c,
+0x3d,0xe2,0x3d,0x63,0x3c,0xe2,0x3c,0x66,0xde,0xe4,0xe7,0xff,0x0, 0x81,0x17,0x82,
+0x3c,0x65,0xaf,0x8d,0xdd,0x31,0x3d,0xe2,0x3d,0x63,0x3c,0xe6,0x3c,0x63,0xde,0xd9,
+0xe7,0xff,0x0, 0x99,0x17,0x2, 0x3c,0xe4,0xaf,0xf, 0xdd,0x26,0x3d,0xe2,0x3d,0x63,
+0x3c,0xe2,0x3c,0x66,0xde,0xce,0xe7,0xff,0x0, 0xb2,0xb, 0xe1,0x8, 0xb6,0xc0,0x7e,
+0xe8,0x50,0x4a,0x78,0xe2,0x0, 0xca,0x1, 0xe0,0x0, 0x5, 0xf0,0xe0,0x4c,0x16,0x58,
+0xe0,0xf, 0x34,0x21,0x3f,0x9c,0x3a,0xe8,0xe0,0x1, 0x15,0xff,0x8c,0xf, 0x8c,0x9f,
+0x3d,0x6c,0x38,0xeb,0x16,0x80,0x3a,0xfd,0x1, 0x19,0x8f,0x8a,0x8f,0x1a,0xe0,0xf,
+0x3c,0x2f,0xe0,0xe, 0x3c,0xae,0xe0,0x41,0x3f,0xaf,0xe0,0x41,0x3f,0x2e,0xe2,0x1,
+0xc7,0xff,0xe2,0x1, 0xc7,0x7f,0xe0,0x6, 0x3f,0x9e,0xe2,0x1, 0xc3,0x7f,0x3b,0x71,
+0x3, 0x85,0x39,0x6e,0x39,0xef,0x3d,0xed,0x38,0xe6,0xc6,0x81,0xe2,0x1, 0xc6,0xff,
+0x3a,0x7d,0xc5,0x2, 0x1, 0xe1,0xe2,0x0, 0xc8,0x8f,0x2, 0xbf,0x35,0xa1,0xe0,0xf,
+0x3e,0x1b,0x8d,0x9f,0x8d,0xf, 0x3e,0xe0,0x3e,0x60,0xc6,0x2, 0xc6,0x83,0xef,0xfd,
+0xd8,0x86,0x39,0xf2,0x4f,0x83,0xe8,0x72,0x55,0xac,0x4f,0x2, 0xe8,0x55,0x4e,0x25,
+0x5, 0x98,0x3f,0x3c,0x27,0x8d,0xe0,0xd, 0x3f,0x9e,0xe0,0xff,0xc6,0xff,0x36,0xa1,
+0x3e,0x9b,0x96,0x8d,0xe2,0x0, 0xcf,0xa2,0xe0,0x28,0x3c,0x6d,0x2, 0x88,0x3f,0x9e,
+0xc7,0x81,0x37,0xa1,0x3f,0x9b,0x97,0x8f,0xe0,0x28,0x3c,0x6f,0xc0,0x2, 0xb, 0x61,
+0x27,0xf, 0x3e,0xee,0xc6,0xff,0x3d,0x6f,0xe0,0xaa,0x3e,0x8c,0xe2,0x0, 0xcf,0x10,
+0x3e,0xea,0x36,0xa1,0x3e,0x9b,0x96,0x8d,0xe0,0x28,0x3c,0x6d,0x2, 0xf0,0x3e,0xee,
+0xc6,0x81,0xe0,0xaf,0x3e,0x8c,0x0, 0xe6,0xe0,0xff,0x14,0x7f,0x0, 0xe8,0x8, 0xb7,
+0xe1,0xfa,0xc0,0x3e,0x3b,0x68,0x3c,0x6a,0x3a,0xe9,0x39,0xea,0x39,0x6b,0xe8,0x55,
+0x4a,0x25,0xef,0xfd,0xd5,0xe6,0x17,0x83,0xe0,0x28,0x3c,0x3f,0xe8,0x28,0x57,0xd3,
+0x74,0x11,0x3c,0x7f,0x3, 0x2, 0x77,0x91,0xe0,0xe, 0x31,0xa1,0xe0,0x4c,0x17,0xd8,
+0x3f,0x9e,0x8c,0xf, 0x8f,0x9f,0x69,0x17,0x11,0x0, 0x6f,0x95,0x17,0x80,0x6f,0x9e,
+0x3f,0xe0,0xc7,0x94,0xe0,0x1, 0xb1,0x2f,0x3f,0xe0,0xc7,0x94,0xe8,0x55,0x4c,0xa4,
+0xe0,0x1, 0xb1,0x4f,0x3d,0xe0,0x3f,0xe0,0xc7,0x94,0xc5,0x9a,0x3d,0x66,0xe0,0x1,
+0xb1,0x6f,0x6a,0x99,0x6c,0x14,0x69,0x96,0x6b,0x18,0x71,0x13,0x71,0x15,0x71,0x17,
+0xdc,0x4d,0xe8,0x55,0x4c,0xa5,0x6c,0x1b,0x3d,0xe0,0x4c,0x15,0x3d,0x65,0xc5,0x9c,
+0xdc,0x45,0x4d,0x14,0x4e,0x95,0xe0,0x90,0x16,0x10,0xe0,0xad,0x3d,0x4, 0x4a,0x9c,
+0x36,0xa1,0x3e,0x9c,0x94,0x8d,0x16,0x86,0xc4,0x81,0xe0,0x2d,0x3c,0xbd,0x4f,0x9a,
+0x4f,0x1b,0x76,0x89,0x3e,0xe5,0xe0,0xad,0x3f,0x84,0x3f,0x1f,0x3c,0x15,0x3d,0xe0,
+0xc5,0xb2,0xe2,0x1, 0xc4,0x7f,0xe0,0xa, 0x36,0xa1,0xe2,0x1, 0xc7,0x7f,0xe0,0x1,
+0x32,0x21,0x75,0x90,0x3e,0x9b,0x70,0x81,0x3e,0x1a,0x74,0x83,0x3d,0xe2,0x74,0x4,
+0x71,0x5, 0x71,0x6, 0x6f,0x1b,0x6c,0x1d,0x71,0x12,0x3f,0x7f,0xe0,0x0, 0x2, 0xd4,
+0x25,0x86,0x54,0x5, 0x54,0x86,0x15,0x0, 0xd1,0x87,0x74,0x92,0x3c,0x63,0xdf,0xf,
+0xe2,0xff,0xcc,0x7f,0x1, 0x6, 0x57,0x92,0x3f,0xf8,0x2, 0x3, 0xc4,0x1, 0x74,0x12,
+0x3f,0xe0,0x44,0x95,0x44,0x14,0xc7,0x94,0xe8,0x19,0x77,0xdf,0xde,0x2b,0xdc,0x98,
+0xe0,0x5, 0xc0,0x42,0xb, 0xe1,0x51,0x2, 0x53,0x2, 0x31,0x21,0x39,0x1c,0x54,0x9,
+0x91,0x2, 0x3b,0x1d,0x13,0x80,0xab,0x86,0xe0,0x26,0x39,0x18,0x23,0x1b,0x54,0x83,
+0xe0,0x26,0x3c,0x92,0x23,0x17,0x38,0xe0,0x3c,0x60,0x71,0x8, 0xc0,0x8a,0xc4,0xe,
+0x31,0xf, 0x71,0x7, 0x3c,0xe8,0x39,0x61,0xe0,0x9, 0xc, 0x9, 0xe0,0x2, 0x8, 0x82,
+0xe0,0x7, 0x39,0x19,0xe0,0x26,0x38,0xf8,0x3c,0xe0,0xc4,0x8a,0xc5,0x81,0xe0,0x9,
+0xb, 0x17,0xc5,0x1, 0x50,0x82,0xe2,0x1, 0xc5,0x7f,0xc0,0x81,0x70,0x82,0x53,0x4,
+0x3b,0x7a,0x2, 0xd2,0x53,0x81,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3e,0x94,0x3e,0x17,
+0xe7,0xff,0x0, 0xad,0x11,0x0, 0x3d,0x65,0x71,0x2, 0x0, 0xf2,0x24,0xb, 0xe2,0x0,
+0xcc,0x1, 0x1, 0x11,0xe0,0xae,0x17,0xfc,0xe8,0x72,0x77,0xaa,0xe0,0xc3,0x17,0xc4,
+0x0, 0x87,0xe0,0xa4,0x17,0xd8,0xe8,0x72,0x77,0xaa,0xe0,0xb9,0x17,0xa0,0xe8,0x72,
+0x77,0xab,0x38,0x82,0xe0,0xd8,0x17,0x8c,0xe8,0x72,0x77,0xaa,0xe0,0xd8,0x17,0x8e,
+0x0, 0xf7,0xe8,0x60,0x4f,0x9c,0xe8,0x72,0x54,0x2c,0xe8,0x72,0x54,0xaa,0x2f,0x83,
+0xe7,0x5a,0x0, 0xf8,0xe8,0x72,0x55,0x2b,0x15,0x81,0xe7,0x5a,0x0, 0xd2,0x8, 0xb3,
+0xe1,0xff,0xc0,0x22,0xe8,0xb, 0x4f,0x74,0x17,0x80,0xe0,0xc, 0x37,0x43,0xe0,0x4d,
+0x16,0xd0,0x3d,0xef,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3e,0x7f,0xe1,0x80,0xad,0x9d,
+0x3, 0xfa,0x3f,0xe0,0xc7,0xa4,0x37,0xc1,0xe0,0xe5,0x11,0xaa,0x77,0x8c,0xe0,0xf,
+0x31,0xc1,0x77,0x8b,0x3c,0xe0,0xe8,0x55,0x4f,0xa4,0xe8,0x72,0x56,0xac,0x6f,0x91,
+0x3c,0x60,0xe8,0x55,0x4f,0xa5,0x11,0x0, 0x6f,0x90,0x36,0xc1,0xe8,0x28,0x57,0xca,
+0xc7,0x7f,0x77,0x8d,0xc4,0x82,0xe8,0x28,0x57,0xcb,0xc4,0x10,0x77,0x8e,0xe8,0x28,
+0x57,0xcf,0xe8,0x28,0x71,0x3c,0x77,0x8f,0xe8,0x28,0x57,0xd0,0xe8,0x28,0x71,0x3d,
+0x77,0x90,0xe8,0x25,0x4f,0x8d,0xe8,0x28,0x71,0x3e,0x6f,0x93,0xe8,0x28,0x71,0x3f,
+0xe8,0x28,0x71,0x41,0x6f,0x12,0x76,0x8a,0xef,0xff,0xd7,0x1a,0x57,0x82,0x4d,0x82,
+0xe8,0x28,0x77,0xbd,0x14,0x1, 0x57,0x83,0x4e,0x3, 0xe8,0x28,0x77,0xbe,0x57,0x86,
+0xe8,0x50,0x6d,0xf8,0xe8,0x28,0x77,0xbf,0x57,0x87,0xe8,0x50,0x6e,0x79,0xe8,0x51,
+0x6f,0x80,0x37,0xc8,0xe8,0x51,0x6f,0x81,0x57,0x84,0xe8,0x28,0x77,0xc1,0x57,0x85,
+0xe8,0x51,0x6f,0x84,0x37,0xc8,0xe8,0x51,0x6f,0x85,0xe0,0x4c,0x17,0xd8,0x3d,0x6f,
+0x3c,0xef,0x3d,0xf2,0xc5,0x2, 0x1, 0x8a,0x3e,0xe0,0xc6,0xa2,0x17,0x0, 0x3e,0x7e,
+0xc7,0x82,0x1, 0x9c,0xe0,0x0, 0xc0,0x5e,0x9, 0xe1,0xe6,0xa5,0xce,0x82,0x3e,0x99,
+0xe0,0xf, 0x88,0x8d,0xe6,0xad,0xcf,0x52,0xe0,0xe, 0x34,0x3e,0x3f,0x41,0xe0,0xf,
+0xaf,0xd, 0xc1,0x1, 0xe1,0x80,0x97,0x13,0xe2,0x1, 0xc1,0x7f,0xe0,0xd, 0x37,0x48,
+0xe0,0x40,0xae,0xaa,0xe0,0x40,0xaf,0x1a,0x0, 0xdd,0xe0,0x80,0x95,0x9d,0xc7,0x1,
+0xe0,0xa, 0x35,0xc8,0xe2,0x1, 0xc7,0x7f,0xe0,0x7, 0xad,0x2f,0xe0,0x7, 0xad,0xbf,
+0x0, 0xd7,0x8, 0xb1,0x17,0x80,0xe8,0x51,0x6f,0x8d,0xdf,0x62,0xe8,0xe7,0x4f,0x9c,
+0xe2,0x0, 0xcf,0x81,0x1, 0x85,0xe8,0x50,0x4f,0xf8,0xe8,0x51,0x6f,0x8c,0x8, 0xe1,
+0x3f,0x6a,0xe2,0x0, 0xc7,0x10,0xe0,0xf, 0x34,0xc1,0xe0,0x41,0x3e,0x8a,0xe2,0x0,
+0xcf,0x0, 0x37,0xdd,0x34,0xba,0x34,0x3a,0x3c,0x4f,0x3f,0xe9,0xe0,0x6f,0x39,0x28,
+0x3c,0x6f,0x17,0x80,0xe0,0x69,0x39,0xaf,0x38,0x82,0x3f,0x6a,0xe2,0x0, 0xc7,0x10,
+0xe0,0xf, 0x34,0x21,0xe0,0x41,0x3e,0x8a,0xe2,0x0, 0xcf,0x0, 0x37,0xbd,0x34,0x5a,
+0x34,0xda,0x3c,0xcf,0x3f,0xe8,0xe0,0x6f,0x39,0x29,0x3c,0xef,0x17,0x80,0xe0,0x68,
+0x39,0xaf,0x38,0x82,0x8, 0xb3,0xe2,0x0, 0xcc,0x0, 0x3f,0x68,0x3f,0xe9,0x3e,0x6a,
+0x3e,0xeb,0x3, 0x2d,0x15,0x0, 0xe0,0x41,0x39,0xc9,0x3e,0x7a,0xe1,0x22,0x3d,0x78,
+0x3f,0x62,0x3f,0xe3,0x3, 0x19,0x11,0x1, 0xe0,0x41,0x3e,0xcd,0x15,0x80,0xe1,0x2c,
+0x3d,0xfc,0x3c,0x6e,0x3c,0xef,0x3d,0x6c,0x3d,0xed,0xd0,0x1e,0x3f,0x68,0x3f,0xe9,
+0x29,0x8, 0xe0,0x41,0x3e,0xcf,0x15,0x80,0xe1,0x2c,0x3d,0xfe,0x3f,0x6c,0x3f,0xed,
+0x3c,0x6e,0x3c,0xef,0x9, 0xe1,0x3d,0x6c,0x3c,0x62,0x3c,0xe3,0xd0,0xd, 0x3f,0x68,
+0x3f,0xe9,0x0, 0xf0,0x3d,0x6c,0x3c,0x6e,0x9, 0xa1,0x0, 0x86,0xe2,0x0, 0xcd,0x0,
+0x3, 0x7a,0x11,0x0, 0x0, 0xda,0x0, 0x81,0x16,0x0, 0x16,0x80,0x3e,0x1c,0x17,0x21,
+0x0, 0x92,0xe0,0x2d,0x3e,0xfd,0xe0,0x2c,0x3e,0x7c,0x17,0x80,0x3e,0x7a,0x4, 0x8b,
+0x1, 0x83,0x3e,0xfb,0x4, 0x88,0x3e,0xab,0xe1,0x2c,0x3e,0x7a,0xe0,0x60,0x3f,0x82,
+0xe4,0x0, 0xcf,0x90,0xc7,0x7f,0xe0,0x60,0x3f,0x92,0xe0,0x29,0x3c,0xf9,0xe0,0x28,
+0x3c,0x78,0xe2,0x0, 0xcf,0x0, 0x1, 0xe6,0x38,0x82,0xe0,0xc, 0x3c,0xc8,0xe6,0xaf,
+0xce,0x7c,0x3d,0xea,0x3f,0xe9,0x3e,0xe8,0x26,0x18,0x3f,0xe8,0xc7,0xff,0x3d,0x19,
+0x3c,0xfa,0x1, 0xbb,0x38,0x82,0xe0,0x40,0x96,0x4f,0xe0,0x40,0x97,0x3f,0xe0,0x40,
+0xb6,0x4d,0xc5,0x78,0xe0,0x40,0xb7,0x3d,0xe0,0x40,0x96,0x2f,0xe0,0x40,0x97,0x1f,
+0xe0,0x40,0xb6,0x2d,0xe0,0x40,0xb7,0x1d,0xe2,0x0, 0xcd,0x7, 0xc6,0x88,0xc7,0x88,
+0x2, 0xeb,0xe0,0xe, 0x35,0xc3,0xe0,0xd, 0x37,0x23,0xe5,0xff,0xc7,0x78,0xe0,0xf,
+0x3c,0x1d,0x3c,0x9d,0x3f,0x1b,0x3e,0x6f,0xc6,0x7e,0x3e,0xe9,0xe0,0xa, 0x3c,0x9e,
+0xe0,0xb, 0x3d,0x2d,0xe2,0x0, 0xcd,0x81,0x2, 0xb, 0xe0,0xa, 0x37,0x41,0xe0,0xd,
+0x35,0x21,0xe5,0xff,0xc5,0x7e,0x3f,0x9d,0x3c,0x9d,0x3d,0x1e,0x0, 0xc8,0xe1,0x80,
+0x95,0x9d,0xe0,0x80,0xb5,0x9c,0x0, 0xed,0xe1,0x80,0x8f,0x19,0xe0,0x80,0xaf,0x1f,
+0x0, 0xc0,0x3d,0x18,0x3f,0xe8,0x3f,0xfa,0x1, 0x82,0x38,0x82,0xe1,0x80,0xac,0x9f,
+0x0, 0xfb,0x19,0xc2,0x2a,0xe0,0x1d,0xb6,0x48,0x10,0x5, 0x5, 0x5, 0x1, 0x1, 0x4,
+0x0, 0x8, 0x8, 0x0, 0x0, 0x20,0xb8,0x0, 0xc0,0x0, 0xfc,0x0, 0xfd,0x0, 0xfe,0x0,
+0xfa,0x20,0xfa,0x0, 0xf7,0x0, 0xf6,0x0, 0xf5,0x0, 0xf4,0x0, 0xf3,0x0, 0xf2,0x0,
+0xf1,0x0, 0xf0,0x0, 0x8c,0x8f,0xff,0xff,0xff,0x8c,0x8f,0xff,0xff,0xff,0x8c,0x8f,
+0xff,0xff,0xff,0x0, 0x1, 0x0, 0x3, 0x0, 0x1, 0x1, 0x1, 0x0, 0x3, 0x1, 0xff,0x64,
+0xff,0xff,0x6, 0x1, 0x1, 0x1, 0xff,0xff,0x2, 0x94,0x2, 0xd2,0x2, 0xe6,0x2, 0xd2,
+0x3, 0x8e,0x70,0x8f,0x0, 0xff,0xe0,0x1f,0x0, 0xff,0x48,0xb7,0x5a,0xa5,0xb, 0xf4,
+0x0, 0xff,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0xe0,0x1f,0x4a,0x36,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x58,0x4d,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
+0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x9, 0x9,
+0x24,0x24,0x12,0x24,0x12,0x24,0x0, 0x0, 0x1, 0x2, 0x64,0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x44,0x1, 0x44,0x0, 0x0,
+0x0, 0x0, 0x1, 0x44,0x1, 0x44,0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x1, 0x0, 0x2, 0x0, 0x3, 0x0, 0x4, 0x0, 0x5, 0x0, 0x6, 0x0, 0x7, 0x0, 0x8,
+0x0, 0x9, 0x0, 0xa, 0x0, 0xb, 0x0, 0xc, 0x0, 0xd, 0x0, 0xe, 0x0, 0xf, 0x0, 0x10,
+0x0, 0x11,0x0, 0x12,0x0, 0x13,0x0, 0x14,0x0, 0x15,0x0, 0x16,0x0, 0x17,0x0, 0x18,
+0x0, 0x19,0x0, 0x1a,0x0, 0x1b,0x0, 0x1c,0x0, 0x1d,0x0, 0x1e,0x0, 0x1f,0x0, 0x20,
+0x0, 0x21,0x0, 0x22,0x0, 0x23,0x0, 0x24,0x0, 0x25,0x0, 0x26,0x0, 0x27,0x0, 0x28,
+0x0, 0x29,0x0, 0x2a,0x0, 0x2b,0x0, 0x2c,0x0, 0x2d,0x0, 0x2e,0x0, 0x2f,0x0, 0x30,
+0x0, 0x31,0x0, 0x32,0x0, 0x33,0x0, 0x34,0x0, 0x35,0x0, 0x36,0x0, 0x37,0x0, 0x38,
+0x0, 0x39,0x0, 0x3a,0x0, 0x3b,0x0, 0x3c,0x0, 0x3d,0x0, 0x3e,0x0, 0x3f,0x0, 0x40,
+0x0, 0x41,0x0, 0x42,0x0, 0x43,0x0, 0x44,0x0, 0x45,0x0, 0x46,0x0, 0x47,0x0, 0x48,
+0x0, 0x49,0x0, 0x4a,0x0, 0x4b,0x0, 0x4c,0x0, 0x4d,0x0, 0x4e,0x0, 0x4f,0x0, 0x50,
+0x0, 0x51,0x0, 0x52,0x0, 0x53,0x0, 0x54,0x0, 0x55,0x0, 0x56,0x0, 0x57,0x0, 0x58,
+0x0, 0x59,0x0, 0x5a,0x0, 0x5b,0x0, 0x5c,0x0, 0x5d,0x0, 0x5e,0x0, 0x5f,0x0, 0x60,
+0x0, 0x61,0x0, 0x62,0x0, 0x63,0x0, 0x64,0x0, 0x65,0x0, 0x66,0x0, 0x67,0x0, 0x68,
+0x0, 0x69,0x0, 0x6a,0x0, 0x6b,0x0, 0x6c,0x0, 0x6d,0x0, 0x6e,0x0, 0x6f,0x0, 0x70,
+0x0, 0x71,0x0, 0x72,0x0, 0x73,0x0, 0x74,0x0, 0x75,0x0, 0x76,0x0, 0x77,0x0, 0x78,
+0x0, 0x79,0x0, 0x7a,0x0, 0x7b,0x0, 0x7c,0x0, 0x7d,0x0, 0x7e,0x0, 0x7f,0x0, 0x80,
+0x0, 0x81,0x0, 0x82,0x0, 0x83,0x0, 0x84,0x0, 0x85,0x0, 0x86,0x0, 0x87,0x0, 0x88,
+0x0, 0x89,0x0, 0x8a,0x0, 0x8b,0x0, 0x8c,0x0, 0x8d,0x0, 0x8e,0x0, 0x8f,0x0, 0x90,
+0x0, 0x91,0x0, 0x92,0x0, 0x93,0x0, 0x94,0x0, 0x95,0x0, 0x96,0x0, 0x97,0x0, 0x98,
+0x0, 0x99,0x0, 0x9a,0x0, 0x9b,0x0, 0x9c,0x0, 0x9d,0x0, 0x9e,0x0, 0x9f,0x0, 0xa0,
+0x0, 0xa1,0x0, 0xa2,0x0, 0xa3,0x0, 0xa4,0x0, 0xa5,0x0, 0xa6,0x0, 0xa7,0x0, 0xa8,
+0x0, 0xa9,0x0, 0xaa,0x0, 0xab,0x0, 0xac,0x0, 0xad,0x0, 0xae,0x0, 0xaf,0x0, 0xb0,
+0x0, 0xb1,0x0, 0xb2,0x0, 0xb3,0x0, 0xb4,0x0, 0xb5,0x0, 0xb6,0x0, 0xb7,0x0, 0xb8,
+0x0, 0xb9,0x0, 0xba,0x0, 0xbb,0x0, 0xbc,0x0, 0xbd,0x0, 0xbe,0x0, 0xbf,0x0, 0xc0,
+0x0, 0xc1,0x0, 0xc2,0x0, 0xc3,0x0, 0xc4,0x0, 0xc5,0x0, 0xc6,0x0, 0xc7,0x0, 0xc8,
+0x0, 0xc9,0x0, 0xca,0x0, 0xcb,0x0, 0xcc,0x0, 0xcd,0x0, 0xce,0x0, 0xcf,0x0, 0xd0,
+0x0, 0xd1,0x0, 0xd2,0x0, 0xd3,0x0, 0xd4,0x0, 0xd5,0x0, 0xd6,0x0, 0xd7,0x0, 0xd8,
+0x0, 0xd9,0x0, 0xda,0x0, 0xdb,0x0, 0xdc,0x0, 0xdd,0x0, 0xde,0x0, 0xdf,0x0, 0xe0,
+0x0, 0xe1,0x0, 0xe2,0x0, 0xe3,0x0, 0xe4,0x0, 0xe5,0x0, 0xe6,0x0, 0xe7,0x0, 0xe8,
+0x0, 0xe9,0x0, 0xea,0x0, 0xeb,0x0, 0xec,0x0, 0xed,0x0, 0xee,0x0, 0xef,0x0, 0xf0,
+0x0, 0xf1,0x0, 0xf2,0x0, 0xf3,0x0, 0xf4,0x0, 0xf5,0x0, 0xf6,0x0, 0xf7,0x0, 0xf8,
+0x0, 0xf9,0x0, 0xfa,0x0, 0xfb,0x0, 0xfc,0x0, 0xfd,0x0, 0xfe,0x0, 0xff,0x1, 0x0,
+0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x4, 0x1, 0x5, 0x1, 0x6, 0x1, 0x7, 0x1, 0x8,
+0x1, 0x9, 0x1, 0xa, 0x1, 0xb, 0x1, 0xc, 0x1, 0xd, 0x1, 0xe, 0x1, 0xf, 0x1, 0x10,
+0x1, 0x11,0x1, 0x12,0x1, 0x13,0x1, 0x14,0x1, 0x15,0x1, 0x16,0x1, 0x17,0x1, 0x18,
+0x1, 0x19,0x1, 0x1a,0x1, 0x1b,0x1, 0x1c,0x1, 0x1d,0x1, 0x1e,0x1, 0x1f,0x1, 0x20,
+0x1, 0x21,0x1, 0x22,0x1, 0x23,0x1, 0x24,0x1, 0x25,0x1, 0x26,0x1, 0x27,0x1, 0x28,
+0x1, 0x29,0x1, 0x2a,0x1, 0x2b,0x1, 0x2c,0x1, 0x2d,0x1, 0x2e,0x1, 0x2f,0x1, 0x30,
+0x1, 0x31,0x1, 0x32,0x1, 0x33,0x1, 0x34,0x1, 0x35,0x1, 0x36,0x1, 0x37,0x1, 0x38,
+0x1, 0x39,0x1, 0x3a,0x1, 0x3b,0x1, 0x3c,0x1, 0x3d,0x1, 0x3e,0x1, 0x3f,0x1, 0x40,
+0x1, 0x41,0x1, 0x42,0x1, 0x43,0x1, 0x20,0x1, 0x21,0x1, 0x22,0x1, 0x23,0x1, 0x24,
+0x1, 0x25,0x1, 0x26,0x1, 0x27,0x1, 0x28,0x1, 0x29,0x1, 0x2a,0x1, 0x2b,0x1, 0x2c,
+0x1, 0x2d,0x1, 0x2e,0x1, 0x2f,0x1, 0x30,0x1, 0x31,0x1, 0x32,0x1, 0x33,0x1, 0x34,
+0x1, 0x35,0x1, 0x36,0x1, 0x37,0x1, 0x38,0x1, 0x39,0x1, 0x3a,0x1, 0x3b,0x1, 0x3c,
+0x1, 0x3d,0x1, 0x3e,0x1, 0x3f,0x1, 0x40,0x1, 0x41,0x1, 0x42,0x1, 0x43,0x0, 0xfc,
+0x0, 0xfd,0x0, 0xfe,0x0, 0xff,0x1, 0x0, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x4,
+0x1, 0x5, 0x1, 0x6, 0x1, 0x7, 0x1, 0x8, 0x1, 0x9, 0x1, 0xa, 0x1, 0xb, 0x1, 0xc,
+0x1, 0xd, 0x1, 0xe, 0x1, 0xf, 0x1, 0x10,0x1, 0x11,0x1, 0x12,0x1, 0x13,0x1, 0x14,
+0x1, 0x15,0x1, 0x16,0x1, 0x17,0x1, 0x18,0x1, 0x19,0x1, 0x1a,0x1, 0x1b,0x1, 0x1c,
+0x1, 0x1d,0x1, 0x1e,0x1, 0x1f,0x0, 0xd8,0x0, 0xd9,0x0, 0xda,0x0, 0xdb,0x0, 0xdc,
+0x0, 0xdd,0x0, 0xde,0x0, 0xdf,0x0, 0xe0,0x0, 0xe1,0x0, 0xe2,0x0, 0xe3,0x0, 0xe4,
+0x0, 0xe5,0x0, 0xe6,0x0, 0xe7,0x0, 0xe8,0x0, 0xe9,0x0, 0xea,0x0, 0xeb,0x0, 0xec,
+0x0, 0xed,0x0, 0xee,0x0, 0xef,0x0, 0xf0,0x0, 0xf1,0x0, 0xf2,0x0, 0xf3,0x0, 0xf4,
+0x0, 0xf5,0x0, 0xf6,0x0, 0xf7,0x0, 0xf8,0x0, 0xf9,0x0, 0xfa,0x0, 0xfb,0x0, 0xb4,
+0x0, 0xb5,0x0, 0xb6,0x0, 0xb7,0x0, 0xb8,0x0, 0xb9,0x0, 0xba,0x0, 0xbb,0x0, 0xbc,
+0x0, 0xbd,0x0, 0xbe,0x0, 0xbf,0x0, 0xc0,0x0, 0xc1,0x0, 0xc2,0x0, 0xc3,0x0, 0xc4,
+0x0, 0xc5,0x0, 0xc6,0x0, 0xc7,0x0, 0xc8,0x0, 0xc9,0x0, 0xca,0x0, 0xcb,0x0, 0xcc,
+0x0, 0xcd,0x0, 0xce,0x0, 0xcf,0x0, 0xd0,0x0, 0xd1,0x0, 0xd2,0x0, 0xd3,0x0, 0xd4,
+0x0, 0xd5,0x0, 0xd6,0x0, 0xd7,0x0, 0x90,0x0, 0x91,0x0, 0x92,0x0, 0x93,0x0, 0x94,
+0x0, 0x95,0x0, 0x96,0x0, 0x97,0x0, 0x98,0x0, 0x99,0x0, 0x9a,0x0, 0x9b,0x0, 0x9c,
+0x0, 0x9d,0x0, 0x9e,0x0, 0x9f,0x0, 0xa0,0x0, 0xa1,0x0, 0xa2,0x0, 0xa3,0x0, 0xa4,
+0x0, 0xa5,0x0, 0xa6,0x0, 0xa7,0x0, 0xa8,0x0, 0xa9,0x0, 0xaa,0x0, 0xab,0x0, 0xac,
+0x0, 0xad,0x0, 0xae,0x0, 0xaf,0x0, 0xb0,0x0, 0xb1,0x0, 0xb2,0x0, 0xb3,0x0, 0x6c,
+0x0, 0x6d,0x0, 0x6e,0x0, 0x6f,0x0, 0x70,0x0, 0x71,0x0, 0x72,0x0, 0x73,0x0, 0x74,
+0x0, 0x75,0x0, 0x76,0x0, 0x77,0x0, 0x78,0x0, 0x79,0x0, 0x7a,0x0, 0x7b,0x0, 0x7c,
+0x0, 0x7d,0x0, 0x7e,0x0, 0x7f,0x0, 0x80,0x0, 0x81,0x0, 0x82,0x0, 0x83,0x0, 0x84,
+0x0, 0x85,0x0, 0x86,0x0, 0x87,0x0, 0x88,0x0, 0x89,0x0, 0x8a,0x0, 0x8b,0x0, 0x8c,
+0x0, 0x8d,0x0, 0x8e,0x0, 0x8f,0x0, 0x48,0x0, 0x49,0x0, 0x4a,0x0, 0x4b,0x0, 0x4c,
+0x0, 0x4d,0x0, 0x4e,0x0, 0x4f,0x0, 0x50,0x0, 0x51,0x0, 0x52,0x0, 0x53,0x0, 0x54,
+0x0, 0x55,0x0, 0x56,0x0, 0x57,0x0, 0x58,0x0, 0x59,0x0, 0x5a,0x0, 0x5b,0x0, 0x5c,
+0x0, 0x5d,0x0, 0x5e,0x0, 0x5f,0x0, 0x60,0x0, 0x61,0x0, 0x62,0x0, 0x63,0x0, 0x64,
+0x0, 0x65,0x0, 0x66,0x0, 0x67,0x0, 0x68,0x0, 0x69,0x0, 0x6a,0x0, 0x6b,0x0, 0x24,
+0x0, 0x25,0x0, 0x26,0x0, 0x27,0x0, 0x28,0x0, 0x29,0x0, 0x2a,0x0, 0x2b,0x0, 0x2c,
+0x0, 0x2d,0x0, 0x2e,0x0, 0x2f,0x0, 0x30,0x0, 0x31,0x0, 0x32,0x0, 0x33,0x0, 0x34,
+0x0, 0x35,0x0, 0x36,0x0, 0x37,0x0, 0x38,0x0, 0x39,0x0, 0x3a,0x0, 0x3b,0x0, 0x3c,
+0x0, 0x3d,0x0, 0x3e,0x0, 0x3f,0x0, 0x40,0x0, 0x41,0x0, 0x42,0x0, 0x43,0x0, 0x44,
+0x0, 0x45,0x0, 0x46,0x0, 0x47,0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x3, 0x0, 0x4,
+0x0, 0x5, 0x0, 0x6, 0x0, 0x7, 0x0, 0x8, 0x0, 0x9, 0x0, 0xa, 0x0, 0xb, 0x0, 0xc,
+0x0, 0xd, 0x0, 0xe, 0x0, 0xf, 0x0, 0x10,0x0, 0x11,0x0, 0x12,0x0, 0x13,0x0, 0x14,
+0x0, 0x15,0x0, 0x16,0x0, 0x17,0x0, 0x18,0x0, 0x19,0x0, 0x1a,0x0, 0x1b,0x0, 0x1c,
+0x0, 0x1d,0x0, 0x1e,0x0, 0x1f,0x0, 0x20,0x0, 0x21,0x0, 0x22,0x0, 0x23,0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x1f,0x6, 0x1, 0x7, 0x0, 0x2, 0x8, 0x1f,0x6, 0x1, 0x7, 0x1,
+0x0, 0x8, 0x1f,0x6, 0x1, 0x7, 0x2, 0x0, 0x8, 0x2, 0x1, 0xa, 0x1e,0x40,0x17,0x0,
+0x64,0xd, 0xac,0x0, 0xc8,0x1, 0xc2,0x1, 0x7c,0x1, 0x90,0x9, 0xc4,0x7, 0xd0,0x7,
+0xd0,0x1, 0x90,0x1, 0x90,0xe, 0x10,0x1, 0xfa,0x1, 0x3, 0xc, 0x21,0x3c,0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x56,0x1, 0x0, 0x1, 0x87,0x1, 0x0, 0xe, 0x1, 0xe0,0x0, 0x4, 0x0, 0x37,
+0x0, 0x1, 0x1, 0x0, 0x1, 0x1, 0x0, 0xf1,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x1e,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0,0x1, 0x8a,0x13,0x12,0x26,0x24,0x18,0xa6,0x0,
+0x0, 0x0, 0x0, 0x2, 0x40,0x4, 0x80,0x4, 0x38,0x2, 0x1c,0x62,0x62,0x1, 0xa6,0x1,
+0xa6,0x1, 0x0, 0x1, 0x0, 0x9, 0x60,0x4, 0xb0,0x62,0x62,0x1, 0xe2,0x1, 0xe2,0x1,
+0x0, 0x1, 0x0, 0x1, 0x2c,0x0, 0x51,0x0, 0x2, 0x1, 0x5, 0x1, 0x2, 0x2, 0x4, 0x4,
+0x6, 0x80,0x0, 0x5a,0xb, 0xb8,0xf, 0x6, 0x6, 0x0, 0xb4,0x1, 0xf4,0x1, 0xf4,0x1f,
+0x40,0x2d,0x2, 0x58,0x0, 0x64,0x0, 0x4, 0x1f,0x18,0x11,0x3, 0x8, 0xa, 0xc, 0x0,
+0x3, 0xe8,0x1, 0xc2,0x7, 0x8, 0x3, 0xe8,0xf, 0xf, 0x0, 0x50,0x3, 0xe8,0x0, 0x50,
+0x9, 0x10,0x0, 0x32,0x1, 0x9a,0x1, 0x9a,0x3, 0x20,0x0, 0xc8,0x0, 0x3c,0x0, 0x1e,
+0x0, 0x80,0x2, 0x1c,0x0, 0xdc,0x0, 0x3c,0x3, 0xe8,0x4, 0xb0,0x2, 0x1c,0x0, 0x3c,
+0x3, 0xe8,0x0, 0x20,0x4, 0x18,0x0, 0x0, 0x9, 0x60,0x0, 0x64,0x0, 0xa0,0x0, 0xa0,
+0x6, 0x40,0x1, 0x2c,0x0, 0x1e,0x0, 0x1f,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,
+0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,
+0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,
+0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,
+0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x24,0x0, 0x35,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x75,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,
+0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,
+0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,
+0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,
+0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0xb5,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xf5,0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe,
+0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe,
+0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe,
+0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe,
+0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0x35,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x75,0x1, 0x68,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,
+0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,
+0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,
+0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,
+0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0xb5,0x1, 0xbf,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xf4,0x1, 0xf6,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,
+0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,
+0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,
+0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,
+0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x2, 0x45,0x2, 0x42,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x83,0x2, 0x79,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,
+0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,
+0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,
+0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,
+0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0xc3,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x3, 0x3, 0x2, 0xd0,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,
+0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,
+0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,
+0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,
+0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x3, 0x43,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x83,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,
+0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,
+0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,
+0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,
+0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0xc3,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x4, 0x3, 0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,
+0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,
+0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,
+0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,
+0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x4, 0x19,0x4, 0x19,
+0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,
+0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,
+0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,
+0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,
+0x4, 0x1f,0x4, 0x14,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xf6,0x9, 0x2f,
+0x0, 0x28,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3e,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3e,
+0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,
+0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,
+0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,
+0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,
+0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,
+0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,
+0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3e,0x0, 0x28,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,
+0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,
+0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,
+0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,
+0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3e,
+0x0, 0x0, 0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,
+0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9,
+0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,
+0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,
+0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3e,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x96,0x7, 0x16,
+0x6, 0xae,0x7, 0x16,0x6, 0xca,0x7, 0x16,0x6, 0xf0,0x7, 0x16,0x7, 0x16,0x6, 0x4e,
+0x6, 0x4e,0x7, 0x16,0x6, 0x4e,0x6, 0x4e,0x7, 0x2, 0x7, 0x16,0x7, 0x16,0x6, 0x6c,
+0x6, 0x6c,0x6, 0x6c,0x7, 0x16,0x7, 0x16,0x7, 0x16,0x7, 0x16,0x7, 0x16,0x6, 0x3c,
+0x6, 0x76,0x6, 0x7e,0x6, 0x86,0x6, 0x8e,0x1c,0x68,0x1c,0x68,0x1d,0x1c,0x1d,0x1c,
+0x1c,0x68,0x55,0x50,0x47,0x52,0x41,0x44,0x45,0x20,0x66,0xcc,0x99,0x33,0x46,0x4c,
+0x41,0x47,0x1, 0x0, 0x0, 0x1, 0x6c,0xa8,0x6c,0xb2,0x6c,0xbe,0x6c,0xd8,0x6c,0xc8,
+0x6c,0xcc,0x6c,0xd0,0x6c,0xd8,0x6c,0xd4,0xff,0x0, 0x1, 0x2, 0x0, 0xff,0x1, 0x2,
+0x0, 0x1, 0xff,0x2, 0x0, 0x1, 0x2, 0xff,0x0, 0x11,0x8, 0x9, 0x1, 0x10,0x7, 0xa,
+0x2, 0xf, 0x6, 0xb, 0x3, 0xe, 0x5, 0xc, 0x4, 0xd, 0x4, 0xd, 0xb, 0xb8,0xb, 0xb8,
+0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,
+0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,
+0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,
+0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,
+0xf4,0x48,0xf4,0x48,0x1b,0xb, 0x17,0xa, 0x10,0x9, 0x1, 0x2, 0x4, 0x8, 0x10,0x20,
+0x40,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0x0, 0x30,0x47,0x68,0x47,0x68,0x47,0x68,0x47,0x68,0x47,0x68,0x47,0x68,0x47,0x68,
+0x26,0x32,0x47,0x68,0x47,0x68,0x47,0x68,0x47,0x68,0x47,0x68,0x47,0x68,0x47,0x68,
+0x28,0xec,0x47,0x68,0x28,0x30,0x29,0x44,0x47,0x68,0x27,0xc8,0x47,0x68,0x47,0x68,
+0xe0,0x60,0x3c,0x0, 0xe1,0xf0,0xcc,0x2, 0xe0,0x60,0x3c,0x10,0xe1,0x6f,0x10,0x7e,
+0xe0,0x0, 0x14,0x0, 0xe0,0x60,0x3c,0x17,0xe0,0x24,0x14,0x48,0xe1,0xd7,0x14,0xde,
+0x3c,0x79,0x1, 0x8, 0xe0,0x25,0x15,0x1c,0x3d,0x28,0x15,0x80,0x16,0x1, 0xe0,0x2,
+0xd3,0x86,0xe0,0x8e,0x14,0x44,0x3c,0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x76,0x1a,0x89,0xe5,0x4a,0x8e,0xb5,0x71,0x9, 0x24,0xf6,0xdb,0xe0,0x1f,0xe, 0xf1,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff,0x0, 0x0, 0xe0,0x1f,0x0, 0x0, 0xf7,0x56,
+0x70,0x8f,0x0, 0xff,0xe0,0x1f,0x0, 0xff,0x48,0xb7,0x5a,0xa5,0xb, 0xf4,0x0, 0xff,
+0x0, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x1f,
+0x4a,0x36,0x0, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0x58,0x4d,0x0, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xe8,0x12,0x57,0x3a,0xe0,0x2, 0x97,0xae,0xe0,0x2, 0x96,0xae,0xe6,0xa9,0xcf,0xff,
+0xe4,0x0, 0xcf,0x81,0xe7,0x6, 0xce,0x9f,0xe0,0x2, 0xb6,0xae,0x38,0x82,0xe2,0x1,
+0xcc,0x2e,0x1, 0x38,0xe2,0x1, 0xcc,0x2f,0xe0,0x0, 0x1, 0x46,0xe2,0x1, 0xcc,0x2d,
+0xe0,0x0, 0x1, 0xcd,0x8, 0xb2,0x11,0x0, 0xe8,0x1e,0x71,0x1e,0xe0,0x0, 0x14,0x6a,
+0xe8,0x1e,0x57,0x9e,0xe8,0x12,0x54,0xa6,0x3c,0x9f,0xe0,0x1, 0xd9,0x35,0xe8,0x81,
+0x71,0x28,0xe0,0x1, 0x14,0x9, 0xe8,0x81,0x57,0xa8,0xe8,0x12,0x54,0xcc,0x3c,0x9f,
+0xe0,0x1, 0xd9,0x2a,0xe8,0x1e,0x71,0x1d,0xe0,0x0, 0x14,0x6e,0xe8,0x1e,0x57,0x9d,
+0xe8,0x12,0x54,0xa5,0x3c,0x9f,0xe0,0x1, 0xd9,0x1f,0xe8,0x1e,0x71,0x1b,0xe0,0x0,
+0x14,0x6c,0xe8,0x1e,0x57,0x9b,0xe8,0x12,0x54,0xa4,0x3c,0x9f,0x9, 0x21,0xe0,0x32,
+0x0, 0x93,0xe8,0x30,0x57,0xc8,0x37,0xa1,0xe8,0x1e,0x77,0x9e,0xe8,0x1e,0x57,0x9e,
+0x37,0xc9,0xe8,0xf3,0x6f,0xbc,0xe8,0x1e,0x57,0x9e,0xe6,0xa7,0xcf,0x8f,0xe8,0xf3,
+0x6f,0xbd,0x38,0x82,0x17,0x80,0xe8,0x81,0x77,0xa8,0xe0,0x1, 0x14,0x9, 0xe8,0x81,
+0x57,0xa8,0xe8,0x12,0x54,0xcc,0x3c,0x9f,0x0, 0xe3,0x38,0x82,0x8, 0xb3,0xc0,0x7c,
+0x39,0xe8,0x39,0x69,0x3c,0x60,0x3c,0xe0,0xc4,0x84,0xc4,0x2, 0xe0,0x1, 0xde,0x14,
+0xe2,0x1, 0xc9,0x87,0x1, 0x91,0xe8,0x12,0x57,0xba,0xe0,0x5, 0x97,0x2f,0xe7,0x0,
+0xcf,0x32,0xe0,0x5, 0xb7,0x2f,0xe8,0x24,0x69,0x4f,0x54,0x1, 0x54,0x82,0xe0,0x1,
+0xde,0x25,0xc0,0x4, 0x9, 0xe1,0xe2,0x1, 0xc9,0x86,0x1, 0x8c,0xe8,0x12,0x57,0xba,
+0xe0,0x5, 0x97,0x2f,0xe7,0x3, 0xcf,0x32,0xe0,0x5, 0xb7,0x2f,0xe8,0x24,0x69,0x50,
+0x0, 0xed,0xe2,0x1, 0xc9,0x88,0x1, 0xea,0xe8,0x12,0x57,0xba,0xe0,0x5, 0x97,0x2f,
+0xe7,0x6, 0xcf,0x42,0xe0,0x5, 0xb7,0x2f,0xe8,0x24,0x69,0x4e,0x0, 0xdf,0xe8,0x12,
+0x57,0xba,0xe2,0x1, 0xcc,0x7, 0xe0,0x5, 0x97,0x2f,0xe6,0xad,0xcf,0x5e,0xe8,0x24,
+0x6f,0x4f,0xe0,0x5, 0x97,0x2f,0xe6,0xaa,0xcf,0x5e,0xe8,0x24,0x6f,0x50,0xe0,0x5,
+0x97,0xaf,0xe6,0xa6,0xcf,0xcf,0xe8,0x24,0x6f,0xce,0x1, 0x84,0xe8,0x24,0x4c,0x4f,
+0x38,0x82,0xe2,0x1, 0xcc,0x6, 0x1, 0x84,0xe8,0x24,0x4c,0x50,0x0, 0xfa,0xe2,0x1,
+0xcc,0x8, 0x1, 0x84,0xe8,0x24,0x4c,0x4e,0x0, 0xf4,0x14,0x0, 0x0, 0xf2,0x8, 0xb2,
+0x39,0x68,0x3c,0x69,0x29,0x17,0xe0,0x4, 0xd4,0xaf,0xe8,0xf3,0x4f,0xa0,0x37,0xc7,
+0x27,0x88,0xe8,0x25,0x4f,0x9f,0xe2,0x0, 0xcf,0x81,0x1, 0x83,0xe8,0x25,0x69,0x1f,
+0xe8,0x12,0x57,0xd1,0x27,0xa8,0xe8,0xf3,0x4f,0xae,0xcf,0x82,0xe8,0xf3,0x6f,0xae,
+0x0, 0xa2,0xe2,0x0, 0xc9,0xf, 0x1, 0x97,0x17,0x80,0xe2,0x0, 0xcc,0x81,0xe8,0x81,
+0x77,0xa8,0x1, 0x99,0xe8,0xf3,0x6c,0xaf,0xe0,0xd9,0x17,0x98,0xe8,0xf3,0x6c,0xb0,
+0xe0,0x1, 0x14,0x9, 0xe8,0x81,0x54,0xa8,0xe8,0x12,0x77,0xcc,0x3c,0x9f,0x9, 0x21,
+0xe0,0x30,0x0, 0xe2,0xe2,0x1, 0xc9,0x40,0x1, 0x87,0xe2,0x0, 0xcc,0x81,0x1, 0x83,
+0xe9,0x2, 0x6c,0xcd,0x9, 0x61,0xe2,0x1, 0xc9,0x41,0x1, 0x84,0xe9,0x2, 0x6c,0xce,
+0x0, 0xfa,0xe2,0x1, 0xc9,0x42,0x1, 0x84,0xe9,0x2, 0x6c,0xcc,0x0, 0xf4,0xe2,0x0,
+0xc9,0x15,0x1, 0x89,0xe2,0x0, 0xcc,0x81,0x1, 0xee,0xe8,0xf3,0x6c,0xb5,0xe8,0xf3,
+0x6c,0xb6,0x0, 0xe9,0xe2,0x0, 0xc9,0x12,0x1, 0x84,0xe8,0xf3,0x6c,0xb2,0x0, 0xe3,
+0xe2,0x0, 0xc9,0x11,0x1, 0xa0,0x17,0x80,0xe2,0x0, 0xcc,0x81,0xe8,0x1e,0x77,0x9e,
+0x1, 0x96,0xe8,0xf3,0x6c,0xb1,0xe8,0xf3,0x4f,0xa0,0xe7,0x7, 0xcf,0x99,0xe8,0xf3,
+0x6f,0xa0,0xe0,0x32,0x17,0x90,0xe8,0x12,0x77,0xa6,0xe0,0x0, 0x14,0x6a,0xe8,0x1e,
+0x57,0x9e,0xe8,0x12,0x54,0xa6,0x3c,0x9f,0xe7,0xff,0x0, 0xbb,0x2c,0xf7,0xe8,0x72,
+0x57,0xf0,0x0, 0xf2,0xe2,0x0, 0xc9,0x1, 0x1, 0x97,0xe8,0x25,0x4f,0x9f,0x2f,0x85,
+0xe8,0x72,0x57,0xf0,0xe8,0x12,0x77,0xa6,0x17,0x80,0xe8,0x1e,0x77,0x9e,0xe8,0xf3,
+0x6c,0x21,0xde,0xbe,0xe8,0x1e,0x57,0x9e,0xe8,0x12,0x54,0xa6,0xe0,0x0, 0x14,0x6a,
+0x3c,0x9f,0xe0,0x1, 0x0, 0xa2,0xe2,0x0, 0xc9,0x9, 0x1, 0xa0,0xe2,0x0, 0xcc,0x85,
+0xe7,0xff,0x2, 0xa2,0xe8,0xf3,0x6c,0xa9,0x2c,0x85,0xe8,0xf3,0x6c,0xce,0xe7,0xfe,
+0x0, 0xf1,0xe2,0x0, 0xcc,0x82,0x1, 0x86,0x17,0x83,0xe8,0xf3,0x6f,0xce,0xe7,0xfe,
+0x0, 0xe9,0x3f,0xe9,0xe2,0x1, 0xc7,0xfd,0xe2,0x0, 0xcf,0x81,0x1, 0x77,0xe2,0x0,
+0xcc,0x84,0xe7,0xfe,0x1, 0xdf,0x17,0x82,0x0, 0xf1,0xe2,0x0, 0xc9,0x5b,0xe0,0x1,
+0x2, 0xbe,0xe2,0x0, 0xc9,0x30,0x1, 0x9e,0xe8,0x25,0x4f,0xc3,0x3c,0xff,0xe7,0xfe,
+0x1, 0x7b,0xe2,0x0, 0xcc,0x82,0xe7,0xfe,0x2, 0xf7,0xe0,0xf3,0x17,0xa0,0x3f,0x92,
+0xac,0xf, 0x3f,0xe2,0xc7,0xf8,0x3f,0x6f,0xe2,0x1, 0xc7,0x7f,0xe2,0x0, 0xcf,0x2c,
+0x37,0xa8,0xe0,0x1, 0x2, 0x9a,0x37,0xc7,0xe0,0x22,0x17,0x4a,0x3f,0x9e,0x97,0x8f,
+0x3f,0x82,0xe2,0x0, 0xc9,0x26,0xe7,0xfe,0x1, 0x5f,0x2, 0x92,0xe2,0x0, 0xc9,0x7,
+0xe7,0xfe,0x1, 0x5a,0x2, 0x88,0x17,0xfe,0x3f,0x92,0xe2,0x0, 0xcf,0x81,0x2, 0xde,
+0xe7,0xfe,0x0, 0xd2,0x17,0xf5,0x3f,0x92,0xe2,0x0, 0xcf,0x83,0x0, 0xf9,0xe2,0x0,
+0xc9,0x36,0x2, 0x87,0xe2,0x0, 0xc9,0x35,0xe7,0xfe,0x3, 0xc6,0x17,0xd5,0x0, 0xed,
+0xe7,0xff,0x17,0xb0,0x0, 0xf1,0xe8,0x12,0x57,0xd1,0xe7,0x0, 0x17,0x0, 0x3f,0xce,
+0xe8,0x12,0x77,0xd1,0xe7,0xfe,0x0, 0x8e,0xde,0x34,0xe7,0xfe,0x0, 0x8b,0xe8,0x12,
+0x57,0xd1,0xe0,0x40,0xcf,0x80,0xe8,0x12,0x77,0xd1,0xe2,0x0, 0xc9,0xa, 0xe7,0xfe,
+0x1, 0x81,0xe8,0x12,0x57,0xd1,0xe0,0x8, 0xcf,0x80,0x0, 0xeb,0xe8,0x12,0x57,0xd1,
+0xe0,0x2, 0xcf,0x80,0x0, 0xf1,0xe8,0x12,0x57,0xd1,0xcf,0x81,0x0, 0xe2,0xe8,0x12,
+0x57,0xd1,0xcf,0x82,0x0, 0xde,0xe8,0x12,0x57,0xd1,0xcf,0x84,0x0, 0xda,0xe8,0x12,
+0x57,0xd1,0xcf,0x88,0x0, 0xd6,0xe8,0xf3,0x6c,0x37,0xe0,0x1, 0x14,0x1, 0xe8,0xf3,
+0x4c,0xb7,0xe0,0x2, 0xc4,0xa0,0xe0,0x1, 0xd7,0x5f,0xe7,0xfd,0x0, 0xdb,0xe8,0xf3,
+0x4c,0xb8,0x34,0xa8,0x3c,0x19,0xe8,0x1e,0x74,0x1d,0xe0,0x0, 0x14,0x6e,0xe8,0x1e,
+0x57,0x9d,0xe8,0x12,0x54,0xa5,0x3c,0x9f,0x0, 0xef,0xe8,0xf3,0x4c,0xba,0x34,0xa8,
+0x3c,0x19,0x34,0x21,0xe8,0x1e,0x74,0x1b,0xe8,0x1e,0x57,0x9b,0xe8,0x1e,0x77,0x9a,
+0xe8,0x1e,0x57,0x9b,0xe8,0x12,0x54,0xa4,0xe0,0x0, 0x14,0x6c,0x3c,0x9f,0x0, 0xdc,
+0xe8,0xf3,0x4c,0xbc,0x34,0xa8,0x3c,0x19,0x34,0x21,0xe8,0x1e,0x74,0x1e,0xe7,0xfe,
+0x0, 0xab,0xe8,0x25,0x6c,0x31,0xe0,0x49,0x14,0x92,0xe8,0x25,0x4f,0xb1,0xe0,0x0,
+0x14,0x7c,0x3c,0x9f,0x0, 0xc9,0xe2,0x0, 0xc9,0x57,0xe7,0xff,0x5, 0xa0,0xe8,0x12,
+0x57,0xd1,0xe0,0x4, 0xcf,0x80,0xe7,0xff,0x0, 0x8d,0x3f,0xe2,0xe1,0xff,0xc7,0x94,
+0xe2,0x0, 0xcf,0x81,0x2, 0x93,0xe8,0x12,0x57,0xd1,0xe0,0x1, 0xcf,0x80,0xe8,0x12,
+0x77,0xd1,0xe8,0x12,0x57,0xb4,0xe0,0x3, 0x97,0x4f,0xe8,0x1e,0x57,0x9a,0x3f,0x9e,
+0xe8,0x1e,0x77,0x9a,0xe8,0x1e,0x57,0x9a,0x0, 0xc6,0x3f,0xe2,0xe1,0xff,0xc7,0x92,
+0xe2,0x0, 0xcf,0x81,0x2, 0x91,0xe8,0x12,0x57,0xd1,0xcf,0xc0,0xe8,0x12,0x77,0xd1,
+0xe8,0x12,0x57,0xb4,0xe0,0x3, 0x97,0x4f,0xe8,0x1e,0x57,0x9d,0x3f,0x9e,0xe8,0x1e,
+0x77,0x9d,0xe7,0xff,0x0, 0x9c,0xe2,0x1, 0xc9,0x7, 0x1, 0x8a,0xe8,0x12,0x57,0xd0,
+0xcf,0x81,0xe8,0x12,0x77,0xd0,0xe8,0x24,0x6c,0xcf,0xe7,0xfc,0x0, 0xe3,0xe2,0x1,
+0xc9,0x6, 0x1, 0x8a,0xe8,0x12,0x57,0xd0,0xcf,0x82,0xe8,0x12,0x77,0xd0,0xe8,0x24,
+0x6c,0xd0,0xe7,0xfc,0x0, 0xd7,0xe2,0x1, 0xc9,0x8, 0x1, 0x8a,0xe8,0x12,0x57,0xd0,
+0xcf,0x84,0xe8,0x12,0x77,0xd0,0xe8,0x24,0x6c,0xce,0xe7,0xfc,0x0, 0xcb,0xe2,0x1,
+0xc9,0x12,0x1, 0x86,0x17,0x80,0xe8,0x25,0x6f,0x9e,0xe7,0xfc,0x0, 0xc3,0xe2,0x1,
+0xc9,0x7d,0xe7,0xfc,0x1, 0xbf,0xe8,0x25,0x6c,0xe8,0xe7,0xfc,0x0, 0xbb,0xe2,0x0,
+0xcc,0x5b,0x3f,0xe8,0x2, 0x86,0xe0,0xf3,0x17,0x20,0x3f,0x9e,0x8c,0xf, 0x38,0x82,
+0x8, 0xb1,0x3f,0x68,0xe1,0xff,0xc7,0x16,0xe2,0x0, 0xcf,0x1, 0x2, 0x96,0xe8,0x12,
+0x57,0xb4,0xe8,0x12,0x54,0xa6,0xe0,0x3, 0x97,0x4f,0xe8,0x1e,0x57,0x9e,0xe0,0x0,
+0x14,0x6a,0x3f,0x9e,0xe8,0x1e,0x77,0x9e,0xe8,0x1e,0x57,0x9e,0x3c,0x9f,0xe0,0x1,
+0xd6,0x9b,0x14,0x0, 0xe0,0x0, 0x0, 0xeb,0x3f,0x68,0xe1,0xff,0xc7,0x12,0xe2,0x0,
+0xcf,0x1, 0x2, 0x92,0xe8,0x12,0x57,0xb4,0xe8,0x12,0x54,0xa5,0xe0,0x3, 0x97,0x4f,
+0xe8,0x1e,0x57,0x9d,0xe0,0x0, 0x14,0x6e,0x3f,0x9e,0xe8,0x1e,0x77,0x9d,0xe8,0x1e,
+0x57,0x9d,0x3c,0x9f,0x0, 0xe5,0x3f,0x68,0xe1,0xff,0xc7,0x14,0xe2,0x0, 0xcf,0x1,
+0x2, 0x92,0xe8,0x12,0x57,0xb4,0xe8,0x12,0x54,0xa4,0xe0,0x3, 0x97,0x4f,0xe8,0x1e,
+0x57,0x9b,0xe0,0x0, 0x14,0x6c,0x3f,0x9e,0xe8,0x1e,0x77,0x9b,0xe8,0x1e,0x57,0x9b,
+0x3c,0x9f,0x0, 0xce,0x3f,0x68,0xe0,0x0, 0xc7,0x77,0xe2,0x1, 0xc7,0x7f,0xe2,0x0,
+0xcf,0x1, 0x2, 0x93,0xe8,0x12,0x57,0xb4,0xe8,0x12,0x54,0xcc,0xe0,0x3, 0x97,0x4f,
+0xe8,0x81,0x57,0xa8,0xe0,0x1, 0x14,0x9, 0x3f,0x9e,0xe8,0x81,0x77,0xa8,0xe8,0x81,
+0x57,0xa8,0x3c,0x9f,0xe7,0xff,0x0, 0xb5,0x3f,0x68,0xe2,0x1, 0xc7,0x77,0xe2,0x1,
+0xcf,0x42,0xe7,0xff,0x1, 0x30,0x3f,0x68,0xe0,0x0, 0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,
+0xe2,0x0, 0xcf,0x1, 0xe7,0xff,0x5, 0xa7,0x3f,0x68,0xe0,0x0, 0xc7,0x7a,0xe2,0x1,
+0xc7,0x7f,0xe2,0x0, 0xcf,0x2, 0x2, 0x84,0x8, 0xa1,0xe7,0xfa,0x0, 0xfa,0xe2,0x1,
+0xcc,0x7d,0xe7,0xff,0x1, 0x98,0xe8,0x25,0x4c,0x68,0x8, 0xe1,0x8, 0xb4,0xe8,0x12,
+0x57,0x3a,0x16,0x81,0xe0,0x1, 0x97,0xae,0xe0,0x8, 0x16,0x0, 0xe7,0x3, 0xcf,0x9d,
+0xe0,0x1, 0xb7,0xae,0x14,0x80,0xe8,0x12,0x57,0xae,0x3e,0x1f,0x3e,0xef,0xb4,0x8d,
+0xc6,0x84,0xe0,0x40,0xb4,0x9d,0x3e,0x7d,0x1, 0xfb,0xe0,0xf3,0x16,0xa0,0x3e,0x99,
+0x11,0x8, 0xe0,0x2c,0x3c,0xf2,0xb6,0xf, 0x14,0x81,0xe0,0xf3,0x12,0x20,0xb6,0x9f,
+0xe0,0x8, 0x34,0xa2,0x3c,0x1f,0x15,0x0, 0xe0,0xb, 0x3c,0x94,0xe0,0x3, 0x3d,0x9a,
+0x16,0x8, 0xe0,0x22,0x3d,0x7c,0xc4,0x81,0xb1,0x8, 0xe2,0x0, 0xcc,0xdc,0xb1,0x98,
+0x3e,0xea,0x38,0xe2,0x1, 0xee,0xe0,0xf3,0x15,0xa2,0x14,0xa, 0x3d,0x9a,0xe0,0x2a,
+0x3d,0x78,0x3e,0x6a,0xb6,0x4f,0xe0,0x4d,0x14,0xca,0xb5,0xdf,0xe0,0xf3,0x15,0xa3,
+0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xb6,0x6f,0xb5,0xff,0xe8,0x12,0x55,0xa6,
+0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xe0,0x1a,0xb6,0x4f,0x14,0x8, 0xe0,0x1a,
+0xb5,0xdf,0xe0,0x1a,0xb6,0x6f,0xe0,0x1a,0xb5,0xff,0xe8,0x12,0x55,0xa5,0x3d,0x9d,
+0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xe0,0x1b,0xb6,0x4f,0xe0,0x1b,0xb5,0xdf,0xe0,0x1b,
+0xb6,0x6f,0xe0,0x1b,0xb5,0xff,0xe8,0x12,0x55,0xa4,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,
+0x3e,0x6a,0xe0,0x1b,0xb6,0xf, 0xe0,0x1b,0xb5,0x9f,0xe0,0x1b,0xb6,0x2f,0x3e,0x6f,
+0xe0,0x1b,0xb5,0xbf,0xe8,0x12,0x55,0xcc,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0xe0,0x4,
+0xc6,0x24,0xb5,0xc, 0x14,0xa, 0xb5,0x9c,0x3e,0x6f,0xe0,0x4, 0xc6,0x28,0xb5,0xc,
+0xb5,0x9c,0xe0,0x49,0x15,0xca,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xe0,0x1c,
+0xb6,0xf, 0xe0,0x1c,0xb5,0x9f,0xe0,0x49,0x15,0xc8,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,
+0x3e,0x6a,0xe0,0x1c,0xb6,0x2f,0xe0,0x1c,0xb5,0xbf,0xe0,0x49,0x15,0x92,0x3d,0x9d,
+0xe0,0x2a,0x3e,0xf8,0x3e,0x6a,0xe0,0x1f,0xb6,0xf, 0x15,0xe, 0xe0,0x1f,0xb5,0x9f,
+0x14,0x8, 0xe0,0x1f,0xb6,0x2f,0x3e,0x6f,0xe0,0x4, 0xc6,0x4, 0xe0,0x1f,0xb5,0xbf,
+0xe0,0x2, 0x15,0xa0,0xb5,0xc, 0xb5,0x9c,0x3e,0x6f,0xe0,0x4, 0xc6,0x8, 0xb5,0xc,
+0xb5,0x9c,0xe0,0x24,0x15,0xd0,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x4,
+0xc6,0x18,0xb5,0xc, 0xb5,0x9c,0xe0,0x24,0x15,0xcf,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,
+0x3e,0x6f,0xe0,0x4, 0xc6,0x1c,0xb5,0xc, 0xb5,0x9c,0xe0,0x24,0x15,0xce,0x3d,0x9d,
+0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x4, 0xc6,0x20,0xb5,0xc, 0xb5,0x9c,0xe0,0x32,
+0x15,0x82,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x4, 0xc6,0x48,0xb5,0xc,
+0xb5,0x9c,0x3e,0x6f,0xe0,0x4, 0xc6,0x4c,0xb5,0xc, 0xb5,0x9c,0xe1,0x2, 0x15,0xcd,
+0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x6, 0xc6,0x0, 0xb5,0xc, 0xb5,0x9c,
+0xe1,0x2, 0x15,0xce,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x6, 0xc6,0x4,
+0xb5,0xc, 0xb5,0x9c,0xe1,0x2, 0x15,0xcc,0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,
+0xe0,0x6, 0xc6,0x8, 0xb5,0xc, 0xb5,0x9c,0xe0,0x25,0x15,0xcf,0x3d,0x9d,0xe0,0x2a,
+0x3e,0xf8,0x3e,0x6f,0xe0,0x6, 0xc6,0x28,0xb5,0xc, 0xb5,0x9c,0xe0,0x25,0x15,0xe8,
+0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0x3e,0x6f,0xe0,0x7, 0xc6,0x74,0xb5,0xc, 0xb5,0x9c,
+0xe8,0x25,0x4e,0x43,0xe4,0x0, 0xc6,0x7, 0xe0,0xb, 0x3c,0x9c,0x3d,0x9d,0xe0,0x2a,
+0x3e,0xf8,0x3e,0x6f,0xe0,0x7, 0xc6,0x78,0xb5,0xc, 0xb5,0x9c,0xe0,0x48,0x15,0xee,
+0x3d,0x9d,0xe0,0x2a,0x3e,0xf8,0xe0,0x7, 0xc7,0xfc,0xb5,0xf, 0xb5,0x9f,0xe0,0x1,
+0x97,0xae,0xe7,0x3, 0xcf,0x9d,0xe0,0x1, 0xb7,0xae,0xa, 0x61,0x8, 0xb2,0x3f,0x68,
+0xe4,0x0, 0xc7,0x7, 0xe0,0x4d,0x17,0xca,0x3f,0x9e,0x89,0x4f,0xe4,0x0, 0xc4,0x3,
+0xe0,0xf3,0x17,0xa0,0xe0,0x5, 0x8f,0xf, 0xe0,0x25,0x14,0x88,0x3c,0x98,0xaf,0x9,
+0x3c,0x62,0xe0,0x5, 0x8f,0x1f,0xe0,0x5, 0x8f,0xaf,0xaf,0x19,0xaf,0xa9,0xe0,0x6,
+0xd3,0x3c,0x14,0x0, 0xd5,0xd3,0x3f,0x62,0xe4,0x0, 0xc7,0x14,0x3c,0x62,0xe0,0x4a,
+0x17,0xf8,0x3f,0x9e,0xe4,0x1, 0xc4,0x4b,0x94,0xbf,0xe0,0x2, 0xc4,0x3, 0x9, 0x21,
+0xe0,0xca,0x0, 0xf4,0x8, 0xb7,0x3a,0x68,0x14,0x0, 0xd5,0xc0,0xe0,0x7, 0x32,0x23,
+0xe0,0x4d,0x11,0xca,0xe0,0x4d,0x13,0x5f,0xe0,0x4a,0x12,0xf8,0x89,0x43,0x3c,0xe7,
+0x3c,0x62,0xe1,0x80,0xaa,0x73,0xe0,0x6, 0xd3,0x8d,0x3f,0xe2,0xe4,0x0, 0xc7,0x94,
+0x3c,0x62,0x3f,0x95,0xe4,0x1, 0xc4,0x4b,0xe0,0x1, 0x94,0x8f,0xe0,0x2, 0xc4,0x8,
+0xe0,0x6, 0xd5,0x54,0x3b,0x73,0x1, 0xeb,0xb, 0xe1,0x8, 0xb7,0x3a,0x68,0x14,0x0,
+0xd5,0x9d,0xe0,0x7, 0x32,0x23,0xe0,0x4d,0x11,0x4a,0xe0,0x4d,0x13,0x5f,0xe0,0x4a,
+0x12,0xf8,0x89,0xc2,0xaa,0x12,0x3c,0xe7,0x3c,0x63,0xe0,0x6, 0xd3,0x82,0x3f,0xe3,
+0xe4,0x0, 0xc7,0x94,0x3c,0x63,0x3f,0x95,0xe4,0x1, 0xc4,0x4b,0xe0,0x1, 0x94,0x9f,
+0xe0,0x2, 0xc4,0x9, 0xc1,0x7, 0xe0,0x6, 0xd5,0x31,0x3b,0x72,0x1, 0xeb,0xb, 0xe1,
+0x8, 0xb6,0x3a,0x68,0x14,0x0, 0xd5,0x7a,0xe0,0x4d,0x11,0x4a,0xe0,0x4d,0x13,0x5f,
+0xe0,0x4a,0x12,0xf8,0x89,0xc2,0xaa,0x32,0x3c,0xe4,0x3c,0x63,0xe0,0x6, 0xd3,0x78,
+0x3f,0xe3,0xe4,0x0, 0xc7,0x94,0x3c,0x63,0x3f,0x95,0xe4,0x1, 0xc4,0x4b,0x94,0xef,
+0xe0,0x2, 0xc4,0x6, 0xc1,0x7, 0xe0,0x6, 0xd5,0x11,0x3b,0x72,0x1, 0xec,0xb, 0x61,
+0x8, 0xb5,0xc0,0x7e,0x3a,0x68,0xe4,0x0, 0xc2,0x7, 0xe0,0x4d,0x17,0xca,0xe0,0xe,
+0x3f,0x94,0x39,0xe8,0x8a,0xee,0x39,0x6f,0x2c,0x82,0x14,0x81,0x14,0x0, 0x74,0x81,
+0xd5,0x4d,0xe0,0xf, 0x39,0x14,0x89,0x4f,0x54,0x81,0x8d,0x5f,0x3c,0x62,0xac,0xef,
+0xe0,0x6, 0xd2,0x67,0x3f,0x62,0xe4,0x0, 0xc7,0x14,0x3c,0x62,0xe0,0x4a,0x17,0xf8,
+0x3f,0x9e,0xe4,0x1, 0xc4,0x4b,0x94,0xaf,0xe0,0x2, 0xc4,0x2, 0xe0,0x6, 0xd4,0xe6,
+0x3c,0x63,0xe0,0x1, 0xdd,0xf5,0x3c,0x63,0xe0,0x1, 0xde,0x10,0x3c,0x65,0xc0,0x2,
+0xa, 0xe1,0x8, 0xb5,0x3a,0xe8,0x14,0x0, 0xd5,0x29,0x11,0x0, 0xe0,0x4b,0x11,0x82,
+0x12,0x1, 0x3c,0x62,0x3c,0xe5,0xe2,0x1, 0xc4,0x7f,0xe0,0x1, 0xd2,0xe, 0x3c,0xe2,
+0x3c,0x62,0xe4,0x0, 0xc4,0x94,0xe4,0x1, 0xc4,0x4b,0x3d,0x64,0x3c,0x93,0xe0,0x2,
+0xc4,0x5, 0xe0,0x6, 0xd4,0xd2,0xc1,0x1, 0xe2,0x0, 0xc9,0x4, 0x1, 0xeb,0xa, 0xe1,
+0x3f,0x68,0xe4,0x0, 0xc7,0x5, 0xe0,0x24,0x17,0xf8,0xe0,0xd, 0x3f,0x9e,0xe8,0xf3,
+0x4e,0x40,0x8d,0x8d,0x3d,0xfc,0x1, 0x4, 0xe8,0xf3,0x4e,0x40,0xae,0xd, 0xe0,0xd,
+0x3f,0x9e,0xe8,0xf3,0x4e,0x41,0x8d,0x9d,0x3d,0xfc,0x1, 0x4, 0xe8,0xf3,0x4e,0x41,
+0xae,0x1d,0xe0,0xd, 0x3f,0x9e,0xe8,0xf3,0x4e,0x44,0x8d,0xad,0x3d,0xfc,0x1, 0x4,
+0xe8,0xf3,0x4e,0x44,0xae,0x2d,0x3f,0x9e,0xe8,0xf3,0x4e,0xc3,0x8f,0x3f,0x3f,0x7d,
+0x1, 0x4, 0xe8,0xf3,0x4f,0x43,0xaf,0x3f,0xe0,0xc, 0x0, 0xd9,0xe8,0x12,0x57,0xb0,
+0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,0x2f,0x86,0xe8,0x25,0x6f,0xc3,0xe8,0x25,
+0x6f,0xc1,0x0, 0x88,0xe2,0x0, 0xcc,0x2, 0x1, 0x8b,0xe8,0x25,0x6c,0x43,0xe8,0x25,
+0x6c,0x41,0xe8,0x25,0x4c,0xc3,0x2c,0x86,0x3c,0x69,0xe0,0xb, 0x0, 0xde,0x17,0x81,
+0x0, 0xed,0x14,0x81,0x0, 0xfa,0x8, 0xb2,0xe8,0x72,0x57,0xf0,0xe8,0x12,0x77,0xa6,
+0xe8,0x25,0x4f,0xc3,0xe2,0x0, 0xcf,0x82,0xe0,0x0, 0x1, 0xc2,0xe0,0x41,0x17,0xd2,
+0xe8,0x25,0x4c,0xc3,0xe0,0x4d,0x11,0x4a,0xe4,0x0, 0xc4,0x87,0xe8,0x12,0x77,0xa5,
+0x3c,0x92,0xe0,0x56,0x17,0xea,0x15,0x6, 0xe0,0xf3,0x14,0x51,0xe8,0x12,0x77,0xa4,
+0xe0,0x6, 0xdf,0x23,0xe8,0x25,0x4f,0xc3,0xe0,0x25,0x14,0x88,0xe4,0x0, 0xc7,0x87,
+0x15,0x3, 0x39,0x1f,0x8f,0xe2,0xe0,0xf3,0x14,0x48,0xc7,0xff,0xe8,0xf3,0x6f,0xd3,
+0xe8,0x25,0x4f,0xc3,0x3f,0xba,0x3c,0x9f,0xe0,0x6, 0xdf,0xf, 0xe8,0x25,0x4f,0xc3,
+0xe0,0x24,0x14,0xf8,0xe4,0x0, 0xc7,0x85,0x15,0x5, 0x3c,0x9f,0xe0,0xf3,0x14,0x40,
+0xe0,0x6, 0xdf,0x3, 0xe8,0x25,0x4c,0x43,0xd5,0xf9,0xe8,0x25,0x4f,0xc3,0xe8,0xf3,
+0x6f,0xd0,0xe8,0x25,0x4f,0xc1,0xe8,0xf3,0x6f,0xac,0x9, 0x61,0xe0,0x3c,0x17,0xc0,
+0x0, 0xc0,0x8, 0xb2,0x39,0x68,0x14,0x1, 0xe0,0x0, 0xd9,0x8f,0x3c,0x62,0xdf,0x8f,
+0xe8,0x25,0x4c,0x41,0xe0,0x0, 0xd8,0xb4,0xdf,0xa7,0x14,0x1, 0x9, 0x21,0xe0,0x71,
+0x0, 0xb6,0x8, 0xb4,0xe8,0x25,0x49,0x43,0xe0,0x4d,0x17,0xca,0x3f,0x62,0xe4,0x0,
+0xc7,0x7, 0x3f,0x9e,0x8a,0xf, 0x89,0x9f,0xe8,0x12,0x57,0xd1,0xe2,0x2, 0xc7,0x80,
+0x27,0x8a,0xe8,0x12,0x57,0xd1,0xe7,0xfd,0x17,0x7f,0x3f,0xde,0x3c,0x62,0xe8,0x12,
+0x77,0xd1,0xde,0x5d,0xe8,0x12,0x57,0xd1,0xe6,0xaf,0xcf,0xff,0x27,0x91,0xe8,0x12,
+0x57,0xd1,0x17,0x7e,0x3f,0xde,0xe8,0x12,0x77,0xd1,0x14,0x81,0xe8,0xf3,0x4c,0x51,
+0xe0,0x3, 0xda,0xf2,0xe0,0x1, 0x24,0x4f,0xe8,0xf3,0x4c,0x51,0xde,0x74,0xe8,0x12,
+0x57,0xd1,0xe2,0x0, 0xc7,0x82,0x27,0x91,0xe8,0x12,0x57,0xd1,0x17,0x7d,0x3f,0xde,
+0xe8,0x12,0x77,0xd1,0x14,0x80,0xe8,0xf3,0x4c,0x52,0xe0,0x3, 0xda,0xdd,0xe0,0x1,
+0x24,0x3e,0xe8,0xf3,0x4c,0x52,0xde,0x82,0xe8,0x12,0x57,0xd1,0xe2,0x0, 0xc7,0x84,
+0x27,0x94,0xe8,0x12,0x57,0xd1,0x17,0x7b,0x3f,0xde,0xe8,0x12,0x77,0xd1,0x3c,0x62,
+0xe8,0x12,0x57,0xd1,0xe0,0x20,0xcf,0x80,0xe8,0x12,0x77,0xd1,0xe8,0xf3,0x4c,0xd3,
+0xc4,0x81,0xe2,0x1, 0xc4,0xff,0xde,0xad,0xe8,0x12,0x57,0xd1,0xe2,0x0, 0xc7,0x88,
+0x27,0x8a,0xe8,0x12,0x57,0xd1,0x17,0x77,0x3f,0xde,0xe8,0x12,0x77,0xd1,0xe8,0xf3,
+0x4c,0x54,0xde,0x7f,0xe8,0x12,0x57,0xd1,0xe2,0x0, 0xc7,0xc0,0x27,0x93,0xe8,0x12,
+0x57,0xd1,0xe7,0xff,0x17,0x3f,0x3f,0xde,0xe8,0x67,0x4f,0x36,0xe8,0x12,0x77,0xd1,
+0xe4,0x0, 0xc7,0x18,0xe0,0x67,0x17,0xb6,0x3f,0x9e,0xe0,0x1, 0x94,0x2f,0x3c,0xe2,
+0xd4,0xa, 0xe8,0x12,0x57,0xd1,0xe2,0x1, 0xc7,0x80,0x27,0x89,0xe8,0x12,0x57,0xd1,
+0xe7,0xfe,0x17,0x7f,0x3f,0xde,0xe8,0x12,0x77,0xd1,0xd4,0xd6,0xe8,0x12,0x57,0xd1,
+0xe2,0x4, 0xc7,0x80,0x27,0x88,0xe8,0x12,0x57,0xd1,0xe7,0xfb,0x17,0x7f,0x3f,0xde,
+0xe8,0x12,0x77,0xd1,0xe8,0x12,0x57,0xd1,0xe2,0x8, 0xc7,0x80,0x27,0x8d,0xe8,0x12,
+0x57,0xd1,0xe7,0xf7,0x17,0x7f,0x3f,0xde,0xe8,0x12,0x77,0xd1,0x3c,0x62,0xe8,0xf3,
+0x4c,0xaa,0xe0,0x3, 0xda,0x88,0xe8,0x12,0x57,0xd1,0xe2,0x20,0xc7,0x80,0x27,0x8a,
+0xe8,0x12,0x57,0xd1,0xe7,0xdf,0x17,0x7f,0x3f,0xde,0x3c,0x62,0xe8,0x12,0x77,0xd1,
+0xde,0x81,0xe8,0x12,0x57,0xd1,0xe2,0x40,0xc7,0x80,0x27,0x8a,0xe8,0x12,0x57,0xd1,
+0xe7,0xbf,0x17,0x7f,0x3f,0xde,0x3c,0x62,0xe8,0x12,0x77,0xd1,0xde,0x92,0xe8,0x12,
+0x57,0xd0,0xe6,0xaf,0xcf,0xff,0x27,0x8c,0xe8,0x12,0x57,0xd0,0x17,0x7e,0x3f,0xde,
+0xe8,0x12,0x77,0xd0,0xe0,0x1, 0x14,0x7, 0xe8,0x24,0x4c,0xcf,0xd9,0xa8,0xe8,0x12,
+0x57,0xd0,0xe2,0x0, 0xc7,0x82,0x27,0x8c,0xe8,0x12,0x57,0xd0,0x17,0x7d,0x3f,0xde,
+0xe8,0x12,0x77,0xd0,0xe0,0x1, 0x14,0x6, 0xe8,0x24,0x4c,0xd0,0xd9,0x98,0xe8,0x12,
+0x57,0xd0,0xe2,0x0, 0xc7,0x84,0x27,0x96,0xe8,0x12,0x57,0xd0,0x17,0x7b,0x3f,0xde,
+0xe8,0x12,0x77,0xd0,0xe0,0x1, 0x14,0x8, 0xe8,0x24,0x4c,0xce,0xa, 0x21,0xe7,0xf3,
+0x0, 0x87,0xe8,0xf3,0x6a,0x51,0xe7,0xfe,0x0, 0xb4,0xe8,0xf3,0x69,0xd2,0xe7,0xfe,
+0x0, 0xc5,0xa, 0x61,0xe8,0xf3,0x4f,0xa4,0xe2,0x0, 0xcf,0x85,0x1, 0x88,0x17,0x81,
+0xe8,0xf3,0x6f,0xa4,0x17,0x82,0xe8,0xf3,0x6f,0xa4,0x38,0x82,0xe2,0x0, 0xcf,0x84,
+0x1, 0x9c,0x8, 0xb1,0x17,0x81,0xe8,0xf3,0x6f,0xa4,0xe8,0xb, 0x4f,0xef,0xe8,0xb,
+0x4c,0x70,0x37,0xa8,0x3c,0x4f,0xe0,0x5, 0xdb,0x9, 0x14,0x1, 0xe0,0x3, 0xd7,0x97,
+0x17,0x87,0x14,0x1, 0xe8,0x61,0x6f,0xa7,0xe8,0x61,0x6f,0xa8,0xe0,0x0, 0xda,0xf7,
+0x17,0x82,0xe8,0xf3,0x6f,0xa4,0x8, 0xe1,0x38,0x82,0xe8,0xf3,0x4c,0x50,0xe8,0x25,
+0x4f,0xc3,0x3c,0x7f,0x1, 0x3, 0xe7,0xfd,0x0, 0xbe,0x38,0x82,0xe8,0xf3,0x4f,0xaf,
+0x27,0x83,0xe0,0xbd,0x0, 0xf3,0x38,0x82,0x8, 0xb7,0xc0,0x78,0x14,0x1, 0xe0,0x0,
+0xd8,0x44,0xe0,0x49,0x11,0x4c,0xe0,0x7, 0x96,0x62,0xe0,0x7, 0x96,0xf2,0xe0,0x7,
+0x97,0xf2,0x12,0x81,0xe7,0x2, 0xcf,0xa5,0xe0,0x7, 0xb7,0xf2,0x12,0x2, 0xe0,0x7,
+0x97,0xf2,0x3d,0x64,0xe7,0x0, 0xcf,0xa4,0xe0,0x7, 0xb7,0xf2,0xe0,0x4a,0x14,0xc8,
+0x14,0x3e,0x76,0x2, 0xe7,0x8b,0x13,0x34,0x76,0x81,0xe0,0x6, 0xd2,0xc6,0x3c,0x66,
+0xe0,0x0, 0xde,0x2f,0xe0,0x1, 0x15,0x87,0x3b,0xe8,0x14,0x87,0x3c,0x6b,0x75,0x84,
+0xd9,0x16,0xe0,0x1, 0x17,0x6, 0x3c,0x6e,0x14,0x80,0x77,0x3, 0xd9,0x10,0x3c,0xe7,
+0xe2,0x1, 0xc4,0xf1,0x3c,0x66,0xe0,0x0, 0xde,0x2b,0x14,0x32,0xe0,0x1, 0xd9,0xa3,
+0xe8,0xb, 0x4f,0xef,0xe8,0xb, 0x4c,0x70,0x37,0xa8,0xe0,0xf3,0x11,0xa0,0x3c,0x4f,
+0xaa,0xc3,0xe0,0x5, 0xda,0xa3,0x3c,0x65,0xe0,0x3, 0xd7,0x31,0x17,0x87,0x3c,0x65,
+0xe8,0x61,0x6f,0xa7,0xe8,0x61,0x6f,0xa8,0xe0,0x0, 0xda,0x91,0x55,0x84,0x14,0x85,
+0x3c,0x6b,0xaa,0x43,0xd8,0xec,0x57,0x3, 0x14,0x85,0x3c,0x6e,0xd8,0xe8,0x3c,0xe7,
+0x3c,0x66,0xe0,0x0, 0xde,0x5, 0x14,0x32,0xe0,0x1, 0xd9,0x7d,0x56,0x2, 0x56,0x81,
+0x3d,0x64,0xe0,0x7, 0xb6,0x62,0xe0,0x4a,0x14,0xc8,0x14,0x3e,0xe0,0x7, 0xb6,0xf2,
+0xe0,0x6, 0xd2,0x7b,0xe7,0xff,0x17,0xaa,0xe0,0x2, 0xaf,0xe3,0x17,0x80,0xe0,0x2,
+0xaf,0xd3,0xc0,0x8, 0xb, 0xe1,0x8, 0xb1,0xe0,0x0, 0xde,0x72,0xdf,0x4c,0xdf,0x7f,
+0xe8,0xf3,0x4f,0xb5,0x27,0x82,0xdf,0x81,0xe9,0x2, 0x4f,0xcd,0xe2,0x0, 0xcf,0x81,
+0x1, 0x83,0xe0,0x5, 0xdc,0x4b,0xe8,0x12,0x57,0xd1,0x2f,0x84,0xe8,0x12,0x57,0xd0,
+0x27,0x99,0x14,0x1, 0xd7,0xb9,0xe8,0x12,0x57,0xd1,0xe2,0x0, 0xcf,0x80,0x3, 0x8,
+0xe8,0x12,0x57,0xd1,0xe6,0x81,0xcf,0x9f,0xe8,0x12,0x77,0xd1,0xdf,0x57,0xde,0x2a,
+0xe8,0xf3,0x4f,0xae,0xe2,0x1, 0xc7,0xfd,0xe8,0xf3,0x6f,0xae,0x8, 0xa1,0xe0,0xe,
+0x0, 0xf7,0x8, 0xe1,0xe8,0x67,0x4e,0xb6,0xe8,0x25,0x4f,0x43,0xe4,0x0, 0xc6,0x98,
+0xe0,0x67,0x17,0xb6,0xe2,0x0, 0xcf,0x2, 0x3f,0x9d,0xe0,0x1, 0x97,0xaf,0x1, 0x83,
+0xe0,0x5, 0xc7,0x92,0xe8,0x12,0x77,0xa5,0xe8,0x25,0x4f,0xdb,0xe2,0x0, 0xcf,0x81,
+0x1, 0x96,0xe8,0x25,0x4f,0xc3,0xe0,0x4d,0x17,0x4a,0xe4,0x0, 0xc7,0x87,0x3f,0x9e,
+0x8f,0x8f,0xe8,0xf3,0x6f,0xd1,0xe8,0x25,0x4f,0xc3,0xe4,0x0, 0xc7,0x87,0x3f,0x1f,
+0x8f,0x1e,0x17,0x80,0xe8,0xf3,0x6f,0x52,0xe8,0x25,0x6f,0xdb,0x38,0x82,0xe8,0x72,
+0x57,0xf0,0xe0,0x32,0x16,0xe, 0x3e,0xef,0xc6,0xfe,0xe0,0xa, 0xc7,0xa2,0xe0,0x80,
+0x97,0x1d,0xe0,0x80,0x95,0x9c,0xe0,0x41,0x3f,0x2e,0x3d,0xfe,0x3, 0x82,0xb7,0xc,
+0x3e,0xff,0x1, 0xf6,0x38,0x82,0x8, 0xb2,0xe8,0xf3,0x4f,0xb1,0xe8,0x12,0x51,0x4e,
+0xe2,0x0, 0xcf,0x81,0x1, 0xbd,0xe8,0xf3,0x4f,0x20,0xc1,0x1, 0xe7,0x7, 0xcf,0x1f,
+0xe8,0xf3,0x6f,0x20,0xe2,0x0, 0xc9,0x5, 0xe8,0xf3,0x6f,0xb3,0xe8,0x12,0x71,0x4e,
+0x5, 0xac,0xe2,0x0, 0xc9,0x6, 0x1, 0xaa,0xe8,0x72,0x57,0xf0,0xe0,0x32,0x16,0x10,
+0x3f,0x6f,0xc7,0x7e,0xe0,0xa, 0xc7,0xa2,0xe0,0x80,0x96,0x9e,0xe0,0x41,0x3e,0xad,
+0x3f,0x7f,0xe1,0x80,0xb6,0x9c,0x1, 0xf9,0xe8,0xf3,0x4f,0xb2,0x37,0xa2,0xc7,0x85,
+0x39,0x7f,0x1, 0x93,0x17,0x80,0xe0,0x32,0x17,0x10,0xe8,0x1e,0x77,0x9e,0xe8,0x12,
+0x77,0x26,0xe7,0xff,0x17,0x2a,0xe8,0xf3,0x6f,0x31,0xe8,0xf3,0x6f,0x33,0xe8,0x12,
+0x77,0xce,0x17,0x81,0xe8,0x25,0x6f,0x9f,0x9, 0x61,0xdf,0xaa,0x0, 0xe6,0x21,0x7d,
+0x17,0x80,0xe8,0x12,0x77,0xce,0x17,0x1, 0xe8,0x24,0x57,0xe1,0xe7,0x2, 0xcf,0x9e,
+0xe8,0x24,0x77,0xe1,0x0, 0xf2,0x8, 0xb1,0x17,0x80,0xe8,0xf4,0x6f,0xad,0x17,0x80,
+0xe8,0x24,0x57,0x61,0xe7,0x7, 0xcf,0x1f,0xe8,0x24,0x77,0x61,0xe8,0x1e,0x77,0x9d,
+0xe8,0x1e,0x77,0x9e,0xe8,0x1e,0x77,0x9b,0xe8,0x1e,0x77,0x9a,0xe8,0xf3,0x4f,0xa6,
+0xe8,0x61,0x6f,0xa6,0xe0,0x1, 0xdb,0x5, 0xe8,0x25,0x4c,0x43,0xe0,0x1, 0xdb,0x48,
+0x2c,0x1e,0xe8,0xf3,0x6c,0x29,0xdd,0x10,0x14,0x0, 0xe0,0x3, 0xd6,0x20,0xe8,0x72,
+0x54,0xef,0xe8,0x72,0x54,0x70,0xe0,0xa, 0x15,0x24,0xe0,0x6, 0xdc,0x46,0xe0,0x3,
+0xd4,0x82,0xe8,0x25,0x4f,0x43,0xe8,0x61,0x4f,0xa8,0x37,0xde,0xe6,0xaf,0xcf,0xff,
+0x2f,0x82,0xd6,0xad,0x17,0x83,0xe8,0xf3,0x6f,0xb6,0x8, 0xe1,0x17,0x85,0xe8,0xf3,
+0x6f,0xa9,0x0, 0xe2,0xe8,0x25,0x4f,0x41,0xe0,0xf3,0x17,0xa0,0xe0,0x1, 0xaf,0x4f,
+0x14,0x3, 0xe8,0x25,0x4f,0x3c,0xaf,0x7f,0x17,0x0, 0x8f,0xef,0xe8,0x61,0x6f,0xa6,
+0xe0,0x52,0x17,0xb8,0xe0,0x1e,0xb7,0xf, 0xe0,0x1, 0x0, 0xb4,0x8, 0xb3,0xe0,0x13,
+0x11,0x44,0xdf,0xaa,0x11,0x80,0xe8,0xff,0x4f,0xf3,0xe2,0x0, 0xcf,0x83,0x1, 0xb1,
+0xde,0xe3,0x14,0x1, 0xe0,0x0, 0xd9,0x4b,0xdf,0xe, 0x3c,0x62,0xe0,0x5, 0xd9,0x4e,
+0xe8,0xf3,0x4f,0xa0,0x37,0xc7,0x27,0xa3,0xe0,0x1, 0xdb,0x11,0xe0,0x1, 0xdf,0xfe,
+0xe8,0x61,0x4f,0xa6,0xe2,0x0, 0xcf,0x81,0x1, 0x6, 0xe8,0xf3,0x4f,0xb1,0xe2,0x0,
+0xcf,0x81,0x1, 0x89,0xe0,0x3, 0xda,0xcb,0xe0,0x6, 0xdb,0x63,0xe0,0x1, 0xdc,0x36,
+0xe0,0x4, 0xd2,0x69,0xdf,0x31,0xe8,0xf3,0x4f,0xb1,0xe2,0x0, 0xcf,0x81,0x1, 0x7,
+0xe8,0xf3,0x4f,0xa0,0xe7,0x7, 0xcf,0x93,0xe8,0xf3,0x6f,0xa0,0xdf,0xb4,0x0, 0xcc,
+0x17,0x81,0x14,0x1, 0xe8,0x25,0x6f,0xd7,0xd6,0x7f,0xe8,0xf4,0x4f,0xaf,0xe8,0xff,
+0x6f,0xf3,0x9, 0xe1,0xe2,0x0, 0xcc,0x66,0x1, 0x1c,0x2, 0x86,0xe2,0x0, 0xcc,0x55,
+0x1, 0xd, 0x17,0x81,0x0, 0x88,0xe2,0x1, 0xcc,0x8, 0x1, 0x1f,0xe2,0x1, 0xcc,0x2a,
+0x1, 0xf9,0x17,0x85,0xe8,0x24,0x6f,0xd1,0x38,0x82,0xe8,0x24,0x4f,0xd1,0xe2,0x0,
+0xcf,0x85,0x1, 0xfb,0x8, 0xb1,0xe0,0x1, 0xd9,0x79,0x8, 0xa1,0xe0,0x33,0x0, 0x87,
+0xe8,0x24,0x4f,0xd1,0xe2,0x0, 0xcf,0x85,0x1, 0xf0,0xe8,0x12,0x57,0xba,0xe0,0x1,
+0x17,0x7f,0xe0,0x1, 0xb7,0xf, 0x38,0x82,0xe8,0x24,0x4f,0xd1,0xe2,0x0, 0xcf,0x85,
+0x1, 0xe4,0xe0,0x33,0x0, 0x91,0xe8,0xe8,0x4f,0xa4,0x2f,0x9f,0xe8,0xf4,0x4f,0xad,
+0xe2,0x0, 0xcf,0x83,0x1, 0x1a,0x8, 0xb1,0xe0,0x4, 0xd6,0xbd,0xe8,0x25,0x4f,0xa4,
+0xe8,0xf4,0x4f,0x2f,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0xe4,0xe8,0xff,
+0x6f,0x73,0xe8,0x25,0x6f,0xa4,0x5, 0x87,0xe8,0x12,0x57,0xba,0xe0,0x1, 0x17,0x7f,
+0xe0,0x1, 0xb7,0xf, 0x14,0x1, 0x8, 0xe1,0x17,0x80,0xe8,0x25,0x6f,0xa4,0x14,0x0,
+0x38,0x82,0xe8,0x52,0x4f,0x97,0xe8,0x61,0x4f,0x3e,0xe8,0x52,0x6f,0x98,0xe8,0x56,
+0x4f,0x98,0x3f,0x9e,0xe8,0x56,0x6f,0x99,0x17,0x80,0xe8,0x56,0x6f,0x9c,0xe8,0x25,
+0x4f,0xbc,0xe8,0xf4,0x6f,0xb3,0xe0,0x67,0x17,0xa0,0x97,0x1f,0xb7,0x2f,0x38,0x82,
+0xe8,0xf4,0x4f,0xaf,0xe8,0xff,0x6f,0xf3,0x38,0x82,0xe8,0x3c,0x4f,0xbe,0xc7,0x81,
+0xe2,0x1, 0xc7,0xff,0xe8,0x3c,0x6f,0xbe,0xe8,0xf4,0x6f,0x99,0x38,0x82,0x8, 0xb2,
+0x17,0x80,0xe8,0xf4,0x6f,0xad,0x11,0x1, 0xe8,0x25,0x69,0x43,0xe8,0x61,0x69,0x26,
+0xe0,0x1, 0xd9,0xff,0xdc,0x11,0xe0,0x1b,0x14,0x2c,0xe0,0x5, 0xd8,0x8f,0xe0,0x3,
+0xd3,0x8a,0x14,0x1, 0xe0,0x3, 0xd5,0x1b,0xe0,0x4, 0xd6,0x6e,0x17,0x87,0xe8,0x61,
+0x6f,0xa7,0xe8,0x61,0x6f,0xa8,0xe0,0xe, 0x17,0x82,0xe8,0x81,0x77,0xc5,0xe0,0x18,
+0x17,0xa6,0xe8,0x81,0x77,0xc4,0x17,0x80,0xe8,0x25,0x69,0x56,0xe8,0x24,0x77,0xe3,
+0x9, 0x61,0x8, 0xb4,0xe8,0x25,0x4f,0xd7,0xe0,0x0, 0x27,0xf3,0xe8,0xf4,0x4f,0xf6,
+0xe2,0x0, 0xcf,0x81,0xe0,0x0, 0x1, 0xed,0xe8,0x61,0x6f,0xa6,0x17,0x80,0xe8,0xb,
+0x49,0xf1,0xe8,0x25,0x6f,0xd7,0xe8,0xb, 0x4a,0x72,0xe8,0xff,0x49,0x73,0xe2,0x0,
+0xc9,0x1, 0xe0,0x0, 0x1, 0xe1,0xdf,0xb2,0xe0,0x1, 0xd0,0x58,0xe0,0x3, 0xdf,0x57,
+0xe0,0x5, 0xd8,0x66,0x3c,0x62,0xe0,0x0, 0xd8,0x4a,0xe0,0x8, 0x31,0xa8,0x3c,0x44,
+0xe0,0x5, 0xd8,0x4c,0xe0,0x1, 0xde,0x8d,0xdf,0x5f,0x2c,0x68,0xe0,0x3, 0xd9,0xd7,
+0xe8,0xf4,0x4f,0xac,0xe2,0x0, 0xcf,0x81,0x1, 0x89,0xe8,0x12,0x57,0x3a,0xe0,0x2,
+0x96,0xae,0xe7,0x6, 0xce,0x9f,0xe0,0x2, 0xb6,0xae,0xe8,0x52,0x4f,0xb3,0x2f,0x85,
+0xe0,0x3, 0xd2,0x7f,0xe0,0x6, 0xda,0x5d,0xe0,0x1, 0xdb,0x30,0xdf,0x45,0x2c,0x4c,
+0x14,0x1, 0xe0,0x5, 0xd2,0x7f,0xe0,0x4, 0xd1,0x5e,0xe0,0x91,0x14,0x98,0xe0,0xe8,
+0x14,0x72,0xe0,0x1, 0xdd,0x3d,0xe0,0x3, 0xd9,0x1c,0xe0,0x1, 0xdb,0x5a,0xe0,0xe8,
+0x14,0xf2,0xe0,0x91,0x14,0x18,0xe0,0x1, 0xdd,0x33,0xe0,0x2, 0xd1,0xf0,0x14,0x2,
+0xe0,0x5, 0xd2,0x68,0xe0,0x5, 0xd5,0x8b,0x14,0x3, 0xe0,0x5, 0xd2,0x63,0xe0,0x3,
+0xdc,0xcd,0x14,0x4, 0xe0,0x5, 0xd2,0x5e,0xe0,0x5, 0xd8,0xe6,0xdf,0x43,0xe0,0x1,
+0xd2,0x75,0xe8,0xf4,0x4f,0xaf,0xe8,0xff,0x6f,0xf3,0xe7,0xff,0x0, 0x9e,0xdf,0x60,
+0xe7,0xff,0x0, 0x96,0x14,0x1, 0xd5,0x58,0xe8,0xf4,0x4f,0xac,0xe2,0x0, 0xcf,0x81,
+0x1, 0x89,0xe8,0x12,0x57,0x3a,0xe0,0x2, 0x96,0xae,0xe7,0x6, 0xce,0x9f,0xe0,0x2,
+0xb6,0xae,0xa, 0x61,0xe8,0x2, 0x4f,0x0, 0xe0,0xf4,0x17,0x88,0xe8,0xff,0x6f,0x73,
+0x17,0x1, 0xe0,0x4, 0xaf,0x7f,0xe0,0x4, 0x8f,0xff,0xe8,0xff,0x6f,0xf3,0x17,0x80,
+0xe8,0xf3,0x6f,0xa0,0x17,0x87,0xe8,0x61,0x6f,0xa7,0xe8,0x61,0x6f,0xa8,0xe0,0x42,
+0x0, 0xb5,0x8, 0xb1,0xe0,0x5, 0xd7,0x98,0xe0,0x2, 0xd1,0x1f,0xe0,0x1, 0xd9,0x33,
+0xdf,0xe2,0xe8,0xf4,0x4f,0xaf,0xe2,0x0, 0xcf,0x81,0x1, 0x6, 0xe2,0x0, 0xcf,0x83,
+0x1, 0xf9,0xde,0x65,0x0, 0xf7,0xdf,0x4e,0x0, 0xf5,0x8, 0xb1,0x14,0x80,0xe0,0x5,
+0xde,0x1a,0xe8,0x24,0x54,0xf8,0x14,0x12,0x8, 0xa1,0xe0,0xbf,0x0, 0xa7,0x8, 0xb2,
+0xe4,0x0, 0xc4,0x7, 0xe0,0x4d,0x17,0xca,0x3c,0x1f,0x89,0x48,0x3c,0x62,0xe0,0x5,
+0xdd,0x49,0x14,0x0, 0xdf,0xeb,0x3f,0x62,0xe4,0x0, 0xc7,0x14,0x3c,0x62,0xe0,0x4a,
+0x17,0xf8,0x3f,0x9e,0xe4,0x1, 0xc4,0x4b,0x94,0xff,0xe0,0x2, 0xc4,0x7, 0x9, 0x21,
+0xe0,0xbf,0x0, 0x8c,0x8, 0xb4,0xe1,0xfd,0xc0,0x36,0x3f,0x69,0xe4,0x0, 0xc7,0x7,
+0xe0,0x4d,0x17,0xca,0xe2,0x0, 0xcc,0x82,0x3f,0x9e,0x89,0xcf,0xe0,0x0, 0x1, 0x4a,
+0x39,0x68,0x3e,0x60,0xc6,0x2, 0xe0,0x2, 0x15,0x4a,0x3c,0x6c,0x14,0x80,0xe0,0x6,
+0xda,0x90,0xe8,0x30,0x57,0xcf,0xe8,0x30,0x56,0xcd,0x3f,0x92,0xe8,0x30,0x55,0x49,
+0x3e,0x68,0xc6,0xfe,0x3f,0x6f,0xe0,0xb, 0x3f,0x2f,0x3d,0x7b,0x2, 0xb7,0x14,0x0,
+0xe4,0x1, 0xc1,0xcb,0xdf,0xb3,0x3a,0x60,0xc2,0x2, 0xe8,0x12,0x54,0x33,0xe0,0x2,
+0xc1,0x8a,0xe0,0x1, 0x15,0xa5,0x3d,0x64,0x3c,0xe3,0xe0,0x5, 0xdf,0x27,0xe0,0x2,
+0x15,0x4a,0x14,0x80,0x3c,0x64,0xe0,0x6, 0xda,0x6c,0xe8,0x30,0x54,0x50,0xe8,0x30,
+0x57,0x4e,0x39,0x18,0xe8,0x30,0x56,0x4a,0xc7,0x7e,0x3f,0xe2,0xe0,0xd, 0x3f,0xa2,
+0x3e,0x7d,0x2, 0x9f,0x14,0x0, 0xdf,0x92,0x3d,0x60,0xe8,0x12,0x54,0x32,0xe0,0x1,
+0x15,0xa5,0xc5,0x2, 0x3c,0xe3,0xe0,0x5, 0xdf,0x9, 0xe0,0x2, 0xc0,0x4a,0xa, 0x61,
+0x39,0x68,0xe0,0x5, 0xc1,0x12,0xe7,0xff,0x0, 0xb6,0xe0,0x80,0x95,0x9d,0xe2,0x2,
+0xcd,0xc8,0x2, 0x84,0x8c,0x8e,0x3d,0x9c,0xac,0x8b,0xc7,0x1, 0xe7,0xff,0x0, 0xbd,
+0xe0,0x80,0x96,0x9e,0xe2,0x2, 0xce,0xc8,0x2, 0x84,0x8d,0x8f,0x3e,0x94,0xad,0x8d,
+0xc7,0x81,0x0, 0xd5,0x8, 0xb3,0xe1,0xff,0xc0,0x10,0x39,0x60,0xc1,0x2, 0x15,0x38,
+0x14,0x80,0x3c,0x62,0xe0,0x6, 0xda,0x2d,0x3c,0x60,0x15,0x38,0x14,0x80,0xc4,0x3a,
+0xe0,0x6, 0xda,0x27,0xe8,0x2b,0x57,0xaf,0xe0,0x56,0x15,0xea,0x16,0x0, 0x15,0xc,
+0x14,0x81,0x3f,0xfc,0x1, 0xab,0xc7,0xa0,0xe8,0x2b,0x56,0x30,0x37,0xa1,0xe0,0x56,
+0x17,0x2a,0x3f,0x9e,0x36,0x21,0x3e,0x1f,0x15,0x8c,0x15,0x1, 0x3f,0xfc,0x1, 0xb0,
+0x14,0x0, 0xdf,0x44,0xe0,0x3, 0x11,0x2f,0x11,0x9c,0xe8,0x12,0x54,0x33,0x3d,0x60,
+0x3c,0xe2,0x3d,0xe3,0xc5,0x2, 0xe0,0x5, 0xde,0xb9,0x3d,0x60,0xe8,0x12,0x54,0x32,
+0x3c,0xe2,0x3d,0xe3,0xc5,0x3a,0xe0,0x5, 0xde,0xb1,0xe0,0x1, 0xc1,0x4b,0xe2,0x8,
+0xc9,0x10,0x1, 0xec,0xe0,0x0, 0xc0,0x70,0x9, 0xe1,0xe1,0x80,0x97,0x1b,0xe2,0x2,
+0xcf,0x48,0x2, 0x8c,0xe1,0x2d,0x3f,0x3a,0xe1,0x2e,0x3f,0x4a,0x36,0xa1,0x3e,0x92,
+0x94,0xd, 0xe0,0xe, 0x34,0xbe,0x3f,0x48,0xb7,0xd, 0xc6,0x1, 0x0, 0xc3,0xe1,0x80,
+0x97,0x1f,0xe2,0x2, 0xcf,0x48,0x2, 0xcb,0xe1,0x2d,0x3f,0x3b,0x3c,0xe0,0xc4,0xba,
+0x36,0xa1,0x3e,0x99,0xe1,0x2e,0x3f,0x4b,0x94,0x8d,0xe0,0xe, 0x35,0x3e,0x3f,0x49,
+0xb7,0xd, 0xe7,0xff,0x0, 0xbd,0x8, 0xb2,0x14,0x2, 0xdf,0x0, 0xe0,0x2, 0x11,0x0,
+0xe8,0x30,0x55,0xc9,0xe8,0x30,0x55,0x4d,0xe8,0x12,0x54,0x33,0x3c,0xe2,0xe0,0x5,
+0xde,0x75,0xe8,0x30,0x55,0xca,0xe8,0x30,0x55,0x4e,0xe8,0x12,0x54,0x32,0x3c,0xe2,
+0x9, 0x21,0xe0,0xbc,0x0, 0xeb,0x8, 0xb4,0xe2,0x0, 0xcc,0x82,0x3a,0x69,0xe0,0x0,
+0x2, 0xda,0xe0,0xe, 0x34,0xa1,0xe0,0x4d,0x17,0xc4,0x3f,0x9e,0x8c,0x8f,0x39,0x68,
+0xe0,0x5, 0xdb,0xec,0x3f,0xe4,0xe4,0x0, 0xc7,0x87,0xe0,0x4d,0x11,0xca,0x39,0x9f,
+0x8d,0x53,0x8c,0xe3,0x3c,0x62,0xe0,0x5, 0xdb,0xf4,0x8c,0xa3,0x3c,0x62,0xe0,0x5,
+0xdc,0x16,0x3f,0xe4,0xe4,0x0, 0xc7,0x83,0xe0,0x25,0x14,0x88,0x3c,0x9f,0x3c,0x62,
+0xe0,0x5, 0xdc,0x2b,0x8c,0x83,0x3c,0x62,0x34,0xa3,0xe0,0x5, 0xdc,0x9b,0x8c,0x93,
+0x3c,0x62,0x34,0xa3,0xe0,0x5, 0xdc,0xad,0x8c,0xb3,0x3c,0x62,0xe0,0x5, 0xdc,0xc0,
+0x3c,0x62,0x3c,0xe4,0xe0,0x0, 0xdb,0xa1,0x15,0x80,0x3d,0x6b,0x3c,0xeb,0x3c,0x62,
+0xe0,0x5, 0xdc,0x3d,0x14,0x80,0x3c,0x62,0xe0,0x5, 0xdc,0x66,0x39,0xe2,0x14,0x0,
+0xe4,0x1, 0xc1,0xcb,0xde,0xa3,0xe4,0x0, 0xc1,0x14,0xe0,0x2, 0xc1,0x80,0xe8,0x12,
+0x54,0x33,0xe0,0x4a,0x15,0x78,0x15,0x8a,0x3d,0x12,0x3c,0xe3,0xe0,0x5, 0xde,0x16,
+0xe0,0x4b,0x15,0x48,0xe8,0x12,0x54,0x32,0x15,0x8a,0x3d,0x12,0x3c,0xe3,0xe0,0x5,
+0xde,0xd, 0x3c,0x64,0xa, 0x21,0xe0,0x2e,0x0, 0xe9,0x8, 0xb1,0xc0,0x76,0xe4,0x0,
+0xc4,0x5, 0xe0,0x24,0x17,0xf8,0xe0,0xe, 0x3c,0x1f,0xe0,0x49,0x17,0xcc,0xe0,0x7,
+0x95,0x6f,0x3d,0xee,0x75,0x1, 0x3e,0x6e,0xe0,0x7, 0x95,0x7f,0x3e,0xee,0x75,0x2,
+0x3c,0x6e,0xe0,0x8, 0x95,0xf, 0x3c,0xe0,0x75,0x3, 0xc4,0x8a,0xe0,0x7, 0x95,0x5f,
+0x75,0x4, 0xe0,0x7, 0x97,0xcf,0x77,0x85,0x8f,0x8e,0x57,0x1, 0xe6,0xac,0xcd,0x6f,
+0xe7,0x2, 0xcf,0x2f,0x77,0x1, 0x57,0x1, 0xe7,0x0, 0xcf,0x2a,0x77,0x1, 0xe6,0xaa,
+0xcd,0x6f,0x57,0x1, 0x37,0xc6,0xe7,0x8, 0xcf,0x2a,0x77,0x1, 0x57,0x1, 0xe7,0xa,
+0xcf,0x2f,0x77,0x1, 0x57,0x1, 0xe7,0x6, 0xcf,0x2f,0x77,0x1, 0x57,0x2, 0x8f,0x9b,
+0xe7,0x2, 0xcf,0x2f,0x77,0x2, 0xe6,0xac,0xcd,0xef,0x57,0x2, 0xe7,0x0, 0xcf,0x2b,
+0x77,0x2, 0xe6,0xaa,0xcd,0xef,0x57,0x2, 0x37,0xc6,0xe7,0x8, 0xcf,0x2b,0x77,0x2,
+0x57,0x2, 0xe7,0xa, 0xcf,0x2f,0x77,0x2, 0x57,0x2, 0xe7,0x6, 0xcf,0x2f,0x77,0x2,
+0x8f,0xac,0x57,0x3, 0xe6,0xac,0xce,0x6f,0xe7,0x2, 0xcf,0x2f,0x77,0x3, 0x57,0x3,
+0xe7,0x0, 0xcf,0x2c,0x77,0x3, 0xe6,0xaa,0xce,0x6f,0x57,0x3, 0x37,0xc6,0xe7,0x8,
+0xcf,0x2c,0x77,0x3, 0x57,0x3, 0xe7,0xa, 0xcf,0x2f,0x77,0x3, 0x57,0x3, 0xe7,0x6,
+0xcf,0x2f,0x77,0x3, 0x57,0x4, 0x8f,0xbd,0xe7,0x2, 0xcf,0x2f,0x77,0x4, 0xe6,0xac,
+0xce,0xef,0x57,0x4, 0xe7,0x0, 0xcf,0x2d,0x77,0x4, 0xe6,0xaa,0xce,0xef,0x57,0x4,
+0x37,0xc6,0xe7,0x8, 0xcf,0x2d,0x77,0x4, 0x57,0x4, 0xe7,0xa, 0xcf,0x2f,0x77,0x4,
+0x57,0x4, 0xe7,0x6, 0xcf,0x2f,0x77,0x4, 0x57,0x5, 0x8f,0xc8,0x3c,0x60,0xe7,0x2,
+0xcf,0x2f,0x77,0x5, 0xe6,0xac,0xce,0xef,0x57,0x5, 0xc4,0x2, 0xe7,0x0, 0xcf,0x2d,
+0x77,0x5, 0xe6,0xaa,0xce,0xef,0x57,0x5, 0x37,0xc6,0xe7,0x8, 0xcf,0x2d,0x77,0x5,
+0x57,0x5, 0xe7,0xa, 0xcf,0x2f,0x77,0x5, 0x57,0x5, 0xe7,0x6, 0xcf,0x2f,0xe1,0xc0,
+0xb7,0x39,0xe0,0x5, 0xdc,0x21,0x3c,0x60,0xc4,0x6, 0xe0,0x5, 0xdc,0x35,0x3c,0x60,
+0xc4,0x8, 0xe0,0x5, 0xdc,0x2a,0x3c,0x60,0xc4,0xa, 0xe0,0x5, 0xdc,0x34,0x15,0x5,
+0xe0,0x4a,0x14,0xc4,0x14,0x3c,0xe0,0x5, 0xdd,0x90,0xc0,0xa, 0x8, 0xe1,0x16,0x80,
+0xe8,0x0, 0x4d,0xf6,0xe0,0x0, 0x15,0x0, 0x3c,0xed,0x3d,0xfd,0x2, 0x8a,0x16,0x80,
+0xe8,0x1, 0x4d,0x87,0xe0,0x0, 0x15,0x0, 0x3c,0xed,0x3d,0xfd,0x2, 0x90,0x38,0x82,
+0x3f,0x6d,0xc7,0x3b,0x37,0x21,0x3f,0x1a,0x8f,0x9e,0xc6,0x81,0xe0,0xc, 0x37,0xa8,
+0x8f,0xae,0x3f,0xcc,0x37,0xa1,0x3f,0x98,0xb4,0x8f,0x0, 0xe8,0x3f,0x6d,0xe0,0x0,
+0xc7,0x44,0x37,0x21,0x3f,0x1a,0x8f,0x8e,0xc6,0x81,0xe0,0xc, 0x37,0xa8,0x8f,0x9e,
+0x3f,0xcc,0x37,0xa1,0x3f,0x98,0xb4,0x8f,0x0, 0xe1,0xe8,0x46,0x4f,0x75,0xe8,0x25,
+0x4f,0xa5,0xe0,0x0, 0x27,0xc7,0x8, 0xb2,0xe8,0x12,0x57,0xba,0xe8,0x12,0x54,0xad,
+0xe0,0x1, 0x96,0xaf,0x16,0x1, 0xe7,0x7, 0xce,0x9c,0xe0,0x1, 0xb6,0xaf,0x3f,0xe9,
+0xe0,0xa, 0xc7,0xa8,0xe4,0x0, 0xc7,0x6, 0x96,0xf, 0xe1,0x2, 0x17,0xe4,0xe0,0xd,
+0x3f,0x9e,0xb6,0xd, 0x3e,0x69,0xe0,0xa, 0xc6,0x2c,0x96,0xc, 0xb6,0x1d,0x3e,0x69,
+0x3e,0xe9,0xe0,0xa, 0xc6,0x2a,0xe0,0xa, 0xc6,0xae,0x95,0xc, 0x95,0x8d,0x3d,0x7b,
+0x5, 0x9e,0x96,0x8c,0x3f,0x9e,0xb6,0xaf,0x15,0x0, 0xe8,0x30,0x57,0x51,0xe8,0x30,
+0x57,0xd2,0x39,0x68,0xe1,0x2f,0x3f,0xde,0x37,0xa1,0x3c,0x9f,0xe0,0x1, 0xda,0x5c,
+0x3c,0x62,0xdf,0x96,0xe8,0x12,0x57,0x3a,0x17,0x80,0xe0,0x1, 0x96,0xae,0xe7,0x7,
+0xce,0x9f,0xe0,0x1, 0xb6,0xae,0xe8,0x25,0x6f,0xa5,0x9, 0x61,0x96,0x8d,0x0, 0xe3,
+0x38,0x82,0x17,0x0, 0xe8,0x0, 0x4e,0x76,0xe0,0x0, 0x15,0x80,0x3d,0x6e,0x3e,0x7e,
+0x2, 0x8a,0x17,0x0, 0xe8,0x1, 0x4e,0x7, 0xe0,0x0, 0x15,0x80,0x3d,0x6e,0x3e,0x7e,
+0x2, 0x8e,0x38,0x82,0x3f,0xee,0xc7,0xbb,0x37,0xa1,0x3f,0x9b,0x8e,0x9f,0x8f,0xaf,
+0x36,0xa8,0x3f,0xcd,0x3f,0x98,0xc7,0x1, 0xad,0xf, 0x0, 0xea,0x3f,0xee,0xe0,0x0,
+0xc7,0xc4,0x37,0xa1,0x3f,0x9b,0x8e,0x8f,0x8f,0x9f,0x36,0xa8,0x3f,0xcd,0x3f,0x98,
+0xc7,0x1, 0xad,0xf, 0x0, 0xe5,0x8, 0xb1,0xe0,0x48,0x17,0xbe,0x15,0x30,0x14,0x80,
+0x3c,0x6f,0xe0,0x6, 0xd7,0xee,0xe0,0x4d,0x16,0x4a,0x8e,0xdc,0x17,0x1, 0xe6,0xad,
+0xce,0xdd,0xe0,0xb, 0x37,0x28,0x37,0x28,0xe7,0x5, 0xcd,0xbd,0xe7,0x5, 0xcf,0x3d,
+0xe8,0x24,0x75,0xa1,0xe7,0xff,0x16,0x81,0xe8,0x24,0x77,0x22,0xe0,0x4, 0xae,0xc8,
+0xe0,0x2, 0x8f,0x3c,0xe8,0x24,0x55,0xb1,0xe6,0xad,0xcf,0x5e,0xe7,0x5, 0xcd,0xbe,
+0xe8,0x24,0x75,0xb1,0xe0,0x4, 0xae,0xe8,0xe8,0x24,0x56,0xb2,0xe7,0x5, 0xce,0xbe,
+0xe8,0x49,0x4f,0x4a,0xe8,0x24,0x76,0xb2,0xe0,0x2, 0xaf,0x8, 0xe0,0x0, 0x17,0x41,
+0xe0,0x2, 0xaf,0x48,0xe0,0x1, 0x8f,0x4c,0xe8,0x24,0x56,0xa9,0xe6,0xad,0xcf,0x5e,
+0xe7,0x5, 0xce,0xbe,0xe8,0x24,0x76,0xa9,0xe0,0x0, 0x16,0xc6,0xe0,0x2, 0xae,0xe8,
+0xe8,0x24,0x57,0xaa,0xe7,0x5, 0xcf,0xbe,0xe8,0x24,0x77,0xaa,0x8, 0xe1,0xe0,0x46,
+0x17,0xe4,0x17,0x0, 0xaf,0xf, 0x16,0xff,0xaf,0x1f,0xae,0xaf,0xaf,0x3f,0xaf,0x4f,
+0xaf,0x5f,0xaf,0x6f,0xaf,0x7f,0xe0,0x1, 0xaf,0xf, 0xe0,0x1, 0xaf,0x1f,0xe0,0x2,
+0xaf,0xf, 0xe0,0x2, 0xae,0x9f,0xe0,0x2, 0xaf,0x2f,0xe0,0x2, 0xaf,0x3f,0x38,0x82,
+0xe8,0x46,0x4f,0xe4,0xe0,0x46,0x17,0x64,0xe2,0x0, 0xcf,0x87,0xe0,0x0, 0x2, 0xf0,
+0xe8,0x46,0x4f,0xe4,0xe2,0x0, 0xcc,0x3, 0xe4,0x0, 0xc7,0x96,0x3f,0x9e,0xe0,0x2,
+0xb4,0x5f,0xe0,0x0, 0x1, 0x62,0x8e,0x89,0xc6,0x81,0xe2,0x1, 0xc6,0xff,0xe8,0x46,
+0x4f,0xe4,0x15,0x80,0xe4,0x0, 0xc7,0x96,0x15,0x7f,0x3f,0x9e,0x3e,0x6b,0xe0,0x7,
+0xae,0xef,0xe8,0x46,0x4f,0xe4,0xe4,0x0, 0xc7,0x96,0x3f,0x9e,0x3f,0x9b,0xe0,0x7,
+0xad,0xf, 0xe8,0x46,0x4f,0xe4,0xe4,0x0, 0xc7,0x8b,0x3f,0x9b,0xc7,0x96,0x37,0xa1,
+0xc5,0x81,0x3f,0x9e,0xe2,0x0, 0xcd,0x86,0xb6,0xf, 0x1, 0xec,0xe8,0x46,0x6e,0x78,
+0xe8,0x46,0x6e,0x79,0xe8,0x46,0x6e,0x7a,0xe8,0x46,0x6e,0x7b,0xe8,0x46,0x6e,0x7c,
+0xe8,0x46,0x4f,0xe4,0xe4,0x0, 0xc7,0x96,0x3f,0x9e,0xe0,0x7, 0xae,0xf, 0xe8,0x46,
+0x6e,0x78,0xe0,0xa5,0x16,0x60,0xe8,0x46,0x4f,0xe4,0xe4,0x0, 0xc7,0x96,0x3f,0x9e,
+0xe0,0x2, 0xb6,0x6f,0x97,0x99,0x37,0xcf,0x3e,0xaf,0xe2,0x0, 0xce,0x81,0x5, 0x15,
+0xe8,0x46,0x4f,0xe4,0x16,0x82,0xe4,0x0, 0xc7,0x96,0x3f,0x9e,0xe0,0x7, 0xae,0x9f,
+0x17,0x81,0xe8,0x46,0x6f,0xfa,0xe8,0x46,0x4f,0xe4,0xe4,0x0, 0xc7,0x96,0x3f,0x1f,
+0xe0,0xb0,0x17,0x84,0xe0,0x2, 0xb7,0xfe,0x14,0x0, 0xe8,0x46,0x4f,0xe4,0xc7,0x81,
+0xe8,0x46,0x6f,0xe4,0x38,0x82,0x16,0x81,0xe7,0xff,0x0, 0xa3,0x14,0x1, 0x0, 0xfb,
+0x3f,0xe8,0xc7,0xfd,0x3f,0x6f,0xe2,0x1, 0xc7,0x7f,0xe2,0x0, 0xcf,0x4, 0xe0,0x0,
+0x2, 0xec,0x37,0xa8,0x37,0xc7,0xe0,0x23,0x17,0x24,0x3f,0x9e,0x97,0x8f,0x8e,0xa9,
+0x3f,0x82,0x8, 0xb3,0xe8,0x49,0x4e,0x44,0x97,0x29,0xe2,0x0, 0xce,0x1, 0x97,0xb9,
+0x1, 0xb8,0xe7,0x8, 0xcf,0x6c,0xb7,0x29,0x17,0x2, 0xe7,0x8, 0xcf,0xee,0xe2,0x0,
+0xcc,0x7, 0xb7,0xb9,0x1, 0xbe,0x17,0x80,0xaf,0x89,0x17,0x80,0xe7,0x7, 0xce,0x9f,
+0xae,0xa9,0x3e,0xea,0xe4,0x0, 0xc6,0x87,0x3f,0x6c,0xe0,0x4d,0x15,0x4a,0x3d,0x1d,
+0xc7,0x7e,0x10,0x84,0x8d,0x89,0x38,0x9a,0xe2,0x1, 0xc7,0x7f,0x11,0x1, 0xc5,0x5,
+0x3e,0xef,0xc6,0x82,0x36,0xa1,0x3e,0x99,0x89,0x81,0x96,0xd, 0xe2,0x0, 0xcc,0x4,
+0xe7,0xe, 0xce,0x23,0xb6,0xd, 0x1, 0x9f,0xe2,0x0, 0xcf,0x1, 0x2, 0x9c,0xe7,0x5,
+0xce,0x32,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3f,0xfb,0xb6,0xd, 0x5, 0xea,0x9, 0xe1,
+0xe2,0x0, 0xce,0x2, 0x1, 0x87,0x15,0x81,0xe7,0x8, 0xcf,0x6b,0xb7,0x29,0x17,0x6,
+0x0, 0xc5,0x15,0x82,0xe7,0x8, 0xcf,0x6b,0xb7,0x29,0x17,0x7, 0xe7,0xff,0x0, 0xbf,
+0x17,0x81,0x0, 0xc3,0x3e,0xef,0xc6,0x82,0x36,0xa1,0x3e,0x99,0x89,0x8a,0x96,0xd,
+0xe7,0x5, 0xce,0x33,0x0, 0xdf,0x17,0x80,0x17,0x0, 0xaf,0x89,0x3f,0xed,0xe7,0x7,
+0xcf,0x9e,0xaf,0xa9,0x38,0x82,0x38,0x82,0x17,0x80,0xe8,0x46,0x6f,0xf7,0xe0,0x46,
+0x16,0xe4,0x17,0x80,0xe8,0x46,0x4f,0x64,0x3f,0xfe,0x4, 0x82,0x38,0x82,0x3f,0x6f,
+0xe4,0x0, 0xc7,0x16,0xc7,0x81,0x3f,0x1d,0xe0,0x7, 0x8e,0x6e,0xe8,0x46,0x4f,0x77,
+0xe2,0x1, 0xc7,0xff,0x3f,0x1c,0xe8,0x46,0x6f,0x77,0x0, 0xed,0xe2,0x0, 0xcc,0x1,
+0x1, 0x5, 0xe2,0x0, 0xcc,0x2, 0x1, 0x2, 0x14,0x0, 0x38,0x82,0x8, 0xb3,0x39,0x68,
+0xde,0xd7,0x3c,0x62,0xdf,0xf4,0xe0,0x48,0x17,0xbe,0xe0,0x3, 0x31,0x24,0x39,0x9f,
+0x3c,0xe3,0xde,0xe7,0xe0,0x46,0x17,0xe4,0xe0,0x1, 0xa9,0x2f,0x15,0x10,0xe0,0x1,
+0xa9,0x3f,0x3c,0xe3,0xe0,0x1, 0xa9,0x4f,0xe0,0x46,0x14,0x7e,0xe0,0x1, 0xa9,0x5f,
+0xe0,0x1, 0xa9,0x6f,0xe0,0x1, 0xa9,0x7f,0xe0,0x6, 0xd6,0x17,0x9, 0xa1,0xe7,0xff,
+0x0, 0xbd,0x8, 0xb5,0x39,0x69,0x3a,0xe8,0xde,0xb3,0xe0,0xf, 0x31,0x24,0xe0,0x46,
+0x12,0x7e,0xe0,0x48,0x14,0xbe,0x3c,0x9f,0x15,0x10,0x3c,0x64,0xe0,0x6, 0xd6,0x5,
+0x3d,0x62,0x3c,0xe4,0x3c,0x65,0xdf,0x35,0xe0,0x46,0x11,0xe4,0x3c,0xe4,0x3c,0x65,
+0xde,0xb8,0xe0,0x1, 0xa9,0x23,0xe0,0x1, 0xa9,0x33,0xe0,0x1, 0xa9,0x43,0xe0,0x1,
+0xa9,0x53,0xe0,0x1, 0xa9,0x63,0xe0,0x1, 0xa9,0x73,0xa, 0xa1,0xe7,0xff,0x0, 0x96,
+0xe8,0x46,0x4f,0xfa,0x27,0x93,0xe8,0x49,0x4f,0x44,0x96,0xa8,0xc7,0x7e,0xe2,0x0,
+0xcf,0x1, 0xe6,0xa2,0xce,0xad,0x2, 0x8b,0x3f,0x6f,0xc7,0x2, 0x37,0x21,0x3c,0x1e,
+0x97,0x88,0xc6,0x85,0xe7,0x8, 0xcf,0xed,0xb7,0x88,0x38,0x82,0xc7,0x82,0x37,0xa1,
+0x3f,0x98,0x97,0xf, 0xc6,0x81,0xe7,0x8, 0xcf,0x6d,0xb7,0xf, 0x0, 0xf7,0x8, 0xb1,
+0xe0,0x1, 0xd3,0xb6,0xe8,0x12,0x57,0xb0,0x14,0x1, 0xe0,0x6, 0x97,0xcf,0xe8,0x24,
+0x57,0x61,0xe6,0xaf,0xcf,0xff,0xe7,0x9, 0xcf,0x1f,0xe8,0x24,0x77,0x61,0xe0,0x1,
+0xd3,0x17,0x17,0x81,0x14,0x0, 0xe8,0x46,0x6f,0xe7,0x8, 0xa1,0xe0,0xb4,0x0, 0x84,
+0xe2,0x0, 0xcc,0x7, 0x2, 0x8e,0x8, 0xb2,0x39,0x68,0xe0,0x46,0x14,0x7e,0xdf,0xc1,
+0xe0,0x46,0x14,0x7e,0xe0,0x5, 0xd9,0xa8,0x3c,0x62,0xdf,0xda,0x14,0x1, 0x9, 0x61,
+0x14,0x0, 0x38,0x82,0xe8,0x46,0x4f,0xe5,0xe8,0x46,0x4f,0x64,0x3f,0x7f,0x5, 0x8d,
+0xe8,0x46,0x4f,0x65,0xe0,0x46,0x17,0xe4,0xe4,0x0, 0xc7,0x16,0x3f,0x9e,0xe0,0x2,
+0x94,0x5f,0xe2,0x1, 0xc4,0x7f,0x0, 0xdd,0x14,0x0, 0x38,0x82,0x8, 0xb1,0xc0,0x7c,
+0x17,0x80,0xe8,0x46,0x6f,0xe7,0x17,0x7f,0xe8,0x46,0x6f,0xe5,0x3c,0xe0,0xe8,0x46,
+0x6f,0x66,0x3c,0x60,0xe8,0x46,0x6f,0xe8,0xc4,0x84,0xe8,0x46,0x6f,0xe9,0xc4,0x2,
+0xe8,0x46,0x6f,0xea,0xe8,0x46,0x6f,0xeb,0xe8,0x46,0x6f,0xec,0xe8,0x46,0x6f,0xed,
+0xe8,0x46,0x6f,0xf4,0xe8,0x46,0x6f,0x75,0xe8,0x46,0x6f,0xf6,0xe0,0x0, 0xdf,0x24,
+0xdf,0xca,0x2c,0x4, 0x17,0x83,0xe8,0x46,0x6f,0xe7,0x54,0x1, 0x54,0x82,0xe0,0x0,
+0xdf,0x3d,0xc0,0x4, 0x8, 0xe1,0x8, 0xb2,0x39,0x68,0xe8,0x46,0x4f,0xe7,0xe2,0x0,
+0xcf,0x81,0x1, 0x5, 0x21,0x12,0x9, 0x21,0xe0,0xb2,0x0, 0xbc,0xe8,0x24,0x57,0xe1,
+0xe6,0xaf,0xcf,0xff,0x2f,0x86,0xe8,0x24,0x57,0xe1,0xe6,0xa2,0xcf,0xff,0x27,0x83,
+0xe0,0x1, 0xd2,0x55,0xd6,0x8c,0x0, 0xea,0x9, 0x61,0xe8,0x24,0x57,0xe1,0xe6,0xaf,
+0xcf,0xff,0x2f,0x86,0xe8,0x24,0x57,0xe1,0xe6,0xa2,0xcf,0xff,0x27,0x97,0x8, 0xb1,
+0xe0,0x1, 0xd2,0x45,0x17,0x80,0xe0,0x46,0x16,0xe4,0xe8,0x46,0x4f,0x77,0x3f,0xfe,
+0x4, 0x83,0x14,0x0, 0x8, 0xe1,0xe0,0xe, 0x3e,0x9f,0x8f,0x4e,0x2f,0x5, 0xc7,0x81,
+0xe2,0x1, 0xc7,0xff,0x0, 0xf3,0x14,0x1, 0x0, 0xf6,0x17,0x80,0xe0,0x46,0x16,0xe4,
+0xe8,0x46,0x4f,0x77,0x3f,0xfe,0x4, 0x83,0x14,0x0, 0x38,0x82,0xe0,0xe, 0x3e,0x9f,
+0x8f,0x4e,0x2f,0x5, 0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x0, 0xf3,0x14,0x1, 0x38,0x82,
+0xe2,0x0, 0xcc,0x4, 0x2, 0x87,0xe0,0x46,0x17,0xe4,0x3c,0x1f,0xe0,0x2, 0x8c,0x48,
+0x38,0x82,0x14,0x0, 0x0, 0xfe,0x8, 0xb2,0xe8,0x24,0x57,0xe1,0x39,0x68,0xe6,0xaf,
+0xcf,0xff,0x2f,0x86,0xe8,0x24,0x57,0xe1,0xe6,0xa2,0xcf,0xff,0x27,0x83,0xe0,0x1,
+0xd2,0x6, 0xe2,0x0, 0xc9,0x4, 0xe0,0x46,0x17,0x64,0x2, 0x8e,0x39,0x1e,0xe0,0x2,
+0x8f,0xc2,0xe8,0x46,0x4e,0xf7,0x3f,0xfd,0x3, 0x89,0x3f,0x1f,0x8f,0xce,0x14,0x0,
+0xe1,0x28,0x3c,0xf, 0x9, 0x61,0x17,0x80,0x0, 0xf5,0x14,0x1, 0x0, 0xfc,0x8, 0xb1,
+0xe0,0x5, 0xd8,0xc8,0xe0,0x46,0x17,0xe4,0x17,0x2, 0xaf,0x4f,0xaf,0x5f,0xaf,0x6f,
+0xaf,0x7f,0xe0,0x1, 0xaf,0xf, 0xe0,0x1, 0xaf,0x1f,0x17,0x80,0xe8,0x24,0x57,0x61,
+0xe7,0x4, 0xcf,0x1f,0xe8,0x24,0x77,0x61,0xe8,0x24,0x57,0x64,0xe7,0xa, 0xcf,0x1f,
+0xe8,0x24,0x77,0x64,0xe8,0x25,0x6f,0x9a,0xe8,0x12,0x57,0x3a,0xe8,0x31,0x6f,0xfe,
+0xe0,0x1, 0x96,0xae,0xe7,0x7, 0xce,0x9f,0xe0,0x1, 0xb6,0xae,0x8, 0xe1,0xe8,0x46,
+0x4f,0xe7,0xe2,0x0, 0xcf,0x81,0x1, 0xad,0xe8,0x46,0x4f,0xe5,0xe8,0x46,0x6f,0xe6,
+0xe8,0x46,0x4f,0xf5,0xc7,0x81,0xe8,0x46,0x6f,0xf5,0xe8,0x46,0x4f,0xf4,0xc7,0x81,
+0xe8,0x46,0x6f,0xf4,0xe0,0x46,0x17,0xe4,0xe8,0x46,0x4e,0xf4,0xe8,0x46,0x4f,0x65,
+0xe4,0x0, 0xc7,0x16,0x3f,0x9e,0xe0,0x7, 0x8f,0xef,0x3f,0xfd,0x2, 0x92,0x17,0x80,
+0xe8,0x46,0x6f,0xf4,0xe8,0x46,0x4f,0xe5,0xc7,0x81,0xe8,0x46,0x6f,0xe5,0xe8,0x46,
+0x4f,0xe5,0xe8,0x46,0x4f,0x64,0x3f,0x7f,0x5, 0x84,0x17,0x83,0xe8,0x46,0x6f,0xe7,
+0x38,0x82,0x8, 0xb4,0xe8,0x46,0x49,0xf5,0xe8,0x46,0x49,0x66,0xe8,0x25,0x4c,0x43,
+0x3c,0xe3,0xe0,0x2, 0xdd,0x6c,0xe8,0x46,0x4f,0x67,0xe2,0x0, 0xcf,0x1, 0xe0,0x0,
+0x1, 0xc0,0xe8,0x46,0x4f,0xe6,0xe8,0x46,0x4e,0xe4,0x3e,0xff,0x5, 0xad,0xe8,0x46,
+0x4f,0xe6,0x3a,0x63,0xe4,0x0, 0xc7,0x96,0xe0,0x46,0x11,0xe4,0x3f,0x93,0xe0,0x2,
+0x96,0xdf,0x3f,0xe2,0xe4,0x0, 0xc7,0x8b,0x3f,0x94,0xc7,0x96,0x37,0xa1,0x3f,0x93,
+0x94,0xf, 0x24,0x1a,0xe6,0xa8,0xcf,0x8d,0xe2,0x0, 0xcf,0x87,0xe8,0x25,0x6f,0x25,
+0x2, 0x93,0x37,0x3f,0xe2,0x1, 0xc7,0x5f,0x27,0xf, 0xe2,0x1, 0xc6,0xff,0xe2,0x0,
+0xce,0x83,0x1, 0x2, 0xdc,0x33,0xe8,0x24,0x57,0xe1,0x39,0x94,0xe6,0xab,0xcf,0xff,
+0x27,0x92,0x17,0x82,0xaf,0xc3,0xe8,0x46,0x4f,0xe5,0xe8,0x46,0x4f,0x64,0x3f,0x7f,
+0x2, 0x87,0x17,0x82,0xe8,0x46,0x6f,0xe7,0x17,0x80,0xe8,0x31,0x6f,0xff,0xa, 0x21,
+0xe0,0xb0,0x0, 0xa0,0x17,0x81,0x0, 0xef,0x8, 0xb5,0xe1,0xff,0xc0,0x38,0xe0,0x4d,
+0x17,0xc4,0x34,0xa1,0x3c,0x9f,0x8a,0x19,0x39,0xe0,0x17,0x8c,0xc1,0xa6,0xe0,0x1f,
+0x17,0x7f,0x8a,0x89,0xaf,0xa3,0xe0,0x8e,0x3a,0x5e,0x39,0x68,0x3c,0xef,0x3d,0x65,
+0x3c,0x6e,0xe0,0x6, 0xd3,0xb2,0x3f,0xe0,0xc7,0x82,0xe1,0x80,0xb4,0x9f,0x3f,0xf3,
+0x1, 0xfd,0x3d,0x60,0x15,0x80,0xc5,0x2, 0x3c,0xe2,0x3c,0x62,0xe0,0x1, 0xd6,0xd3,
+0xe8,0x56,0x4f,0xae,0x11,0x80,0x6f,0xa6,0xe2,0x0, 0xca,0x4, 0xe8,0x56,0x4f,0xaf,
+0x71,0x95,0x6f,0xa7,0xe0,0xf, 0x31,0x41,0x77,0x96,0x77,0x98,0x1, 0x16,0x3d,0x65,
+0xc5,0xc, 0x3c,0x63,0x14,0x84,0xe0,0x6, 0xd3,0x7b,0x3d,0x63,0x3d,0xe4,0xe0,0x6,
+0xd3,0xda,0xe0,0x41,0x3c,0xc9,0x3c,0x60,0xc4,0x26,0xe0,0x5, 0xd9,0xff,0x3c,0x62,
+0xdb,0xa7,0xe0,0x0, 0xc0,0x48,0xa, 0xe1,0x14,0xff,0x69,0xa8,0x0, 0xf5,0xe2,0x0,
+0xcc,0x2, 0xe0,0x3c,0x17,0x40,0xe0,0x41,0x17,0xd2,0xe0,0x6f,0x39,0xae,0xe2,0x0,
+0xcc,0x85,0x2, 0xb, 0xe8,0x30,0x56,0xc8,0xe0,0x2, 0x17,0x0, 0xe0,0x9, 0x37,0x39,
+0x3e,0x9f,0x34,0xc8,0x3f,0xfd,0x1, 0x82,0x38,0x82,0x8f,0xf, 0x3f,0x49,0xe1,0x80,
+0xaf,0x1f,0x0, 0xf9,0x8, 0xb5,0xe2,0x0, 0xcc,0x2, 0xe0,0x3c,0x17,0xc0,0xe0,0x41,
+0x11,0x52,0xe0,0x62,0x39,0xaf,0xe2,0x0, 0xcc,0x85,0x2, 0x1c,0x34,0x21,0xe0,0x4d,
+0x16,0xc4,0x3e,0x98,0x8f,0x1d,0xe0,0x14,0x17,0xa8,0xe0,0x8e,0x3f,0x5f,0x39,0xea,
+0x8d,0xd, 0x3a,0x69,0x3c,0x6e,0x3c,0xef,0xe0,0x6, 0xd3,0x47,0x17,0x81,0xe8,0x30,
+0x52,0xc8,0x37,0xb4,0xe0,0x41,0x3f,0x8f,0x3a,0x92,0xe2,0x1, 0xc7,0xff,0x39,0x75,
+0x1, 0x82,0xa, 0xe1,0x97,0x3, 0x3f,0x79,0x5, 0x4, 0x8f,0x2, 0x3f,0x5f,0xaf,0x2,
+0xc1,0x82,0xc1,0x1, 0x0, 0xf5,0x8, 0xb5,0x39,0xe8,0xe0,0x1, 0xd2,0x91,0xe2,0x0,
+0xc9,0x82,0x39,0x68,0xe0,0x3c,0x17,0xc0,0xe0,0x41,0x14,0x52,0xe8,0x30,0x55,0x48,
+0x14,0xa0,0xe0,0x68,0x39,0xaf,0xe0,0x6, 0xd3,0xdc,0x21,0x4, 0x3c,0xe3,0x14,0x7,
+0xdd,0x79,0xe8,0x12,0x57,0xb0,0x11,0x5, 0xe0,0x6, 0x97,0xcf,0xe8,0x24,0x57,0x61,
+0xe6,0xa1,0xcf,0xff,0xe7,0x5, 0xcf,0x1f,0xe0,0x13,0x12,0x44,0xe0,0x3c,0x12,0xc0,
+0xe8,0x24,0x77,0x61,0x3c,0x64,0xe0,0x5, 0xd0,0xb9,0x3c,0xe2,0x3c,0x63,0xdf,0x88,
+0x3c,0xe3,0x3c,0x65,0xd9,0x18,0xdd,0xe3,0x14,0x1, 0xde,0xe, 0xe0,0xa5,0x15,0x60,
+0x3c,0xe2,0x3c,0x63,0xdf,0x98,0xe0,0x1, 0xd2,0x61,0x2c,0x13,0xc1,0x7f,0xe0,0x43,
+0x39,0x2, 0xe3,0xff,0xc9,0x7f,0x1, 0xe7,0x3c,0xe3,0xe0,0x3c,0x14,0x40,0xd9,0x3,
+0xe8,0x25,0x4c,0x41,0xdd,0x24,0xe0,0x3c,0x14,0x40,0xa, 0xa1,0xe7,0xf7,0x0, 0x83,
+0xa, 0xe1,0x8, 0xb3,0x17,0x80,0x39,0xe8,0xe8,0x12,0x77,0xdf,0xe0,0x2, 0xdc,0x9a,
+0xe2,0x0, 0xcc,0x1, 0x39,0x68,0x1, 0x83,0x3c,0x63,0xdf,0xa6,0x3c,0x62,0x9, 0xe1,
+0x8, 0xb3,0xe8,0x25,0x49,0xc3,0xe0,0x1, 0xd2,0x39,0x24,0x3, 0x14,0x0, 0x9, 0xe1,
+0xe8,0x61,0x4f,0xa7,0x14,0x1, 0x37,0xd3,0xe6,0xaf,0xcf,0xff,0x27,0xf9,0xe0,0x2,
+0x34,0x33,0xe8,0x61,0x4f,0xa8,0xe2,0x1, 0xc1,0x7f,0x3f,0xc2,0xe8,0x61,0x6f,0xa8,
+0xdd,0xcb,0x3c,0x63,0xdf,0xd7,0x24,0x6b,0xe0,0x1, 0xd2,0x20,0x2c,0x68,0xe8,0x61,
+0x4f,0xa7,0xe2,0x0, 0xc9,0x81,0xe3,0x2, 0x3f,0xd2,0x1, 0x9, 0xe8,0x61,0x69,0x27,
+0xe0,0x0, 0xd8,0x5c,0xe0,0x1, 0xd0,0x9d,0x14,0x1, 0x0, 0xda,0xe2,0x1, 0xc1,0x7b,
+0x0, 0xf6,0x8, 0xb4,0xe8,0x25,0x49,0x43,0x3a,0x68,0xe0,0x1, 0xd2,0x7, 0x24,0x3,
+0x14,0x0, 0xa, 0x61,0xe8,0x61,0x4f,0xa8,0x37,0xd2,0xe6,0xaf,0xcf,0xff,0x27,0xb9,
+0x39,0xe8,0x14,0x1, 0xdd,0xa1,0x3c,0x62,0xe0,0x2, 0xdd,0x95,0x24,0x72,0xe8,0x25,
+0x4c,0xdd,0x3c,0x62,0xe0,0x2, 0xdc,0xb9,0x3c,0xe2,0x3c,0x63,0xe0,0x6, 0xd1,0x9e,
+0xe8,0x72,0x54,0x6f,0x3d,0xe2,0xe0,0xd9,0x15,0x16,0xe0,0xc4,0x14,0xcc,0xe0,0x5,
+0xdc,0xac,0x24,0x5f,0xe8,0x67,0x4c,0xb6,0x3c,0x62,0xe0,0x2, 0xdc,0xa6,0xe0,0x1,
+0xd1,0xdd,0x2c,0x57,0x22,0x2, 0xdd,0x53,0x3c,0x62,0xe0,0x2, 0xdc,0x38,0x14,0x0,
+0xe0,0x2, 0xdc,0xad,0x17,0x81,0xe8,0x61,0x4f,0x28,0x39,0x7f,0x37,0xb2,0xe3,0xf,
+0x3f,0x5f,0x1, 0x9, 0xe8,0x61,0x6f,0xa8,0xe0,0x1, 0xd0,0x53,0xe0,0x0, 0xd8,0xe,
+0x14,0x1, 0x0, 0xc0,0xe2,0x1, 0xc7,0xfb,0x0, 0xf6,0x8, 0xb3,0x39,0x68,0xe0,0x1,
+0xd1,0xce,0xe8,0x61,0x4f,0xa7,0x27,0x85,0xe0,0x13,0x11,0xc4,0xdf,0x7a,0x24,0xa,
+0xe8,0x61,0x4f,0xa8,0x27,0x86,0xe0,0x13,0x11,0xc4,0x3c,0x62,0xdf,0xa3,0x24,0x8,
+0x9, 0xe1,0x3c,0x63,0xe0,0x4, 0xdf,0xf2,0xe0,0x1, 0xd1,0xb9,0x0, 0xf0,0x3c,0x63,
+0xe0,0x4, 0xdf,0xec,0xe0,0x1, 0xd1,0xb3,0x0, 0xf1,0xe0,0xd, 0x0, 0xf7,0xe8,0x12,
+0x57,0xba,0xe0,0x2, 0x94,0x2f,0xe6,0xad,0xcc,0x78,0xe4,0x0, 0xcc,0x1, 0x38,0x82,
+0x17,0x80,0xe0,0x6a,0x3f,0x90,0xe0,0x6a,0x3f,0x9c,0x17,0x81,0xe0,0x6a,0x3f,0x98,
+0x17,0x82,0xe0,0x6a,0x3f,0x9a,0xe0,0x6a,0x3f,0x9b,0x17,0x83,0xe0,0x6a,0x3f,0x91,
+0xe0,0x6a,0x3f,0x92,0xe0,0x6a,0x3f,0x9d,0xe0,0x6a,0x3f,0x9e,0xe0,0x6a,0x3f,0x99,
+0x38,0x82,0x8, 0xb1,0xc, 0x3f,0xc0,0x76,0xe0,0x60,0x38,0x88,0xe0,0x60,0x3c,0x9,
+0x70,0x85,0xe0,0x60,0x38,0x8a,0x74,0x4, 0x70,0x83,0xe0,0x60,0x3c,0xc, 0xe0,0x60,
+0x38,0x8b,0x74,0x2, 0x70,0x81,0x3b,0x0, 0xe8,0x12,0x57,0xbb,0xe0,0x1, 0x97,0x4f,
+0xe6,0xaf,0xcf,0x7e,0x27,0xc, 0xe8,0x12,0x57,0x3a,0x97,0x2e,0xe6,0xaf,0xcf,0x7e,
+0x27,0x6, 0xe8,0x12,0x57,0x59,0xcf,0x1, 0xe8,0x12,0x77,0x59,0xe0,0x1, 0x97,0x4f,
+0xe6,0xa8,0xcf,0x7e,0x27,0x14,0xe8,0x12,0x57,0x3a,0x97,0x2e,0xe6,0xa8,0xcf,0x7e,
+0x27,0xe, 0xe8,0x12,0x57,0x34,0x16,0x0, 0x96,0xce,0xe7,0x2, 0xce,0x9c,0xb6,0xce,
+0xe8,0x12,0x57,0x59,0xe0,0x1, 0xcf,0x0, 0xe8,0x12,0x77,0x59,0xe0,0x1, 0x97,0x4f,
+0xe6,0xad,0xcf,0x7e,0x27,0xc, 0xe8,0x12,0x57,0x3a,0x97,0x2e,0xe6,0xad,0xcf,0x7e,
+0x27,0x6, 0xe8,0x12,0x57,0x59,0xcf,0x4, 0xe8,0x12,0x77,0x59,0xe0,0x1, 0x97,0x4f,
+0xe6,0xa6,0xcf,0x7e,0x27,0x14,0xe8,0x12,0x57,0x3a,0x97,0x2e,0xe6,0xa6,0xcf,0x7e,
+0x27,0xe, 0xe8,0x12,0x57,0x38,0x16,0x1, 0x96,0x8e,0xe7,0x6, 0xce,0x9c,0xb6,0x8e,
+0xe8,0x12,0x57,0x59,0xe0,0x4, 0xcf,0x0, 0xe8,0x12,0x77,0x59,0xe0,0x1, 0x97,0xcf,
+0xe6,0xab,0xcf,0xff,0x27,0x8e,0xe8,0x12,0x57,0xba,0x97,0xaf,0xe6,0xab,0xcf,0xff,
+0x27,0x88,0xe0,0x0, 0xda,0xf3,0xe8,0x12,0x57,0xd9,0xcf,0x90,0xe8,0x12,0x77,0xd9,
+0xe8,0x12,0x57,0x3b,0xe0,0x1, 0x97,0xce,0xe6,0xa9,0xcf,0xff,0x27,0x98,0xe8,0x12,
+0x57,0xba,0x96,0xaf,0xe6,0xa9,0xce,0xfd,0x26,0x92,0x96,0x8f,0x16,0x1, 0xe7,0x1,
+0xce,0x9c,0xb6,0x8f,0x16,0x0, 0xe0,0x3, 0x96,0xcf,0xe7,0x4, 0xce,0x9c,0xe0,0x3,
+0xb6,0xcf,0xe8,0x12,0x57,0xd9,0xcf,0xc0,0xe8,0x12,0x77,0xd9,0xe0,0x1, 0x97,0xce,
+0xe6,0xaa,0xcf,0xff,0x27,0x98,0xe8,0x12,0x57,0xba,0x96,0xaf,0xe6,0xaa,0xce,0xfd,
+0x26,0x92,0x96,0x8f,0x16,0x1, 0xe7,0x0, 0xce,0x9c,0xb6,0x8f,0x16,0x0, 0xe0,0x3,
+0x96,0xcf,0xe7,0x5, 0xce,0x9c,0xe0,0x3, 0xb6,0xcf,0xe8,0x12,0x57,0xd9,0xcf,0xa0,
+0xe8,0x12,0x77,0xd9,0x17,0x80,0xe0,0x1, 0xb7,0xce,0x17,0x81,0xe0,0x61,0x3f,0x91,
+0x38,0x83,0x50,0x85,0x54,0x4, 0xe0,0x60,0x38,0x98,0x50,0x83,0xe0,0x60,0x3c,0x19,
+0x54,0x2, 0xe0,0x60,0x38,0x9a,0x50,0x81,0xc0,0xa, 0xe0,0x60,0x3c,0x1c,0xf, 0xa8,
+0xe0,0x60,0x38,0x9b,0x8, 0xa1,0x38,0x0, 0x8, 0xb1,0xc, 0x3f,0xc0,0x76,0xe0,0x60,
+0x38,0x88,0xe0,0x60,0x3c,0x9, 0x70,0x85,0xe0,0x60,0x38,0x8a,0x74,0x4, 0x70,0x83,
+0xe0,0x60,0x3c,0xc, 0xe0,0x60,0x38,0x8b,0x74,0x2, 0x70,0x81,0x3b,0x0, 0xe8,0x12,
+0x57,0xb9,0x16,0x80,0x97,0x6f,0xe7,0x5, 0xcf,0x1d,0xb7,0x6f,0xe0,0x4, 0xde,0xe4,
+0xe0,0x40,0x17,0x80,0xe0,0x61,0x3f,0x91,0x38,0x83,0x50,0x85,0x54,0x4, 0xe0,0x60,
+0x38,0x98,0x50,0x83,0xe0,0x60,0x3c,0x19,0x54,0x2, 0xe0,0x60,0x38,0x9a,0x50,0x81,
+0xc0,0xa, 0xe0,0x60,0x3c,0x1c,0xf, 0xa8,0xe0,0x60,0x38,0x9b,0x8, 0xa1,0x38,0x0,
+0x8, 0xb1,0xc, 0x3f,0xc0,0x76,0xe0,0x60,0x38,0x88,0xe0,0x60,0x3c,0x9, 0x70,0x85,
+0xe0,0x60,0x38,0x8a,0x74,0x4, 0x70,0x83,0xe0,0x60,0x3c,0xc, 0xe0,0x60,0x38,0x8b,
+0x74,0x2, 0x70,0x81,0x3b,0x0, 0xe8,0x12,0x57,0xdf,0xc7,0x81,0xe8,0x12,0x77,0xdf,
+0xe8,0x24,0x57,0xc8,0xc7,0x81,0xe8,0x24,0x77,0xc8,0xe8,0x25,0x4f,0xc0,0x27,0x90,
+0xe8,0x25,0x4f,0xc0,0xc7,0xff,0xe8,0x25,0x6f,0xc0,0xe8,0x25,0x4f,0xc0,0x2f,0x88,
+0xe8,0x24,0x57,0xe1,0x17,0x1, 0xe7,0x3, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,0xe8,0x24,
+0x57,0xe3,0xc7,0x81,0xe8,0x24,0x77,0xe3,0xe8,0x12,0x57,0xdc,0x27,0x86,0xe8,0x12,
+0x57,0xdc,0xc7,0xff,0xe8,0x12,0x77,0xdc,0xe8,0x12,0x57,0xdd,0x27,0x86,0xe8,0x12,
+0x57,0xdd,0xc7,0xff,0xe8,0x12,0x77,0xdd,0xe0,0x0, 0xd9,0x60,0xe0,0x8, 0x17,0x80,
+0xe0,0x61,0x3f,0x91,0x38,0x83,0x50,0x85,0x54,0x4, 0xe0,0x60,0x38,0x98,0x50,0x83,
+0xe0,0x60,0x3c,0x19,0x54,0x2, 0xe0,0x60,0x38,0x9a,0x50,0x81,0xc0,0xa, 0xe0,0x60,
+0x3c,0x1c,0xf, 0xa8,0xe0,0x60,0x38,0x9b,0x8, 0xa1,0x38,0x0, 0x8, 0xb1,0xc, 0x3f,
+0xc0,0x76,0xe0,0x60,0x38,0x88,0xe0,0x60,0x3c,0x9, 0x70,0x85,0xe0,0x60,0x38,0x8a,
+0x74,0x4, 0x70,0x83,0xe0,0x60,0x3c,0xc, 0xe0,0x60,0x38,0x8b,0x74,0x2, 0x70,0x81,
+0x3b,0x0, 0xd5,0xe3,0xe0,0x2, 0x17,0x80,0xe0,0x61,0x3f,0x91,0x38,0x83,0x50,0x85,
+0x54,0x4, 0xe0,0x60,0x38,0x98,0x50,0x83,0xe0,0x60,0x3c,0x19,0x54,0x2, 0xe0,0x60,
+0x38,0x9a,0x50,0x81,0xc0,0xa, 0xe0,0x60,0x3c,0x1c,0xf, 0xa8,0xe0,0x60,0x38,0x9b,
+0x8, 0xa1,0x38,0x0, 0x8, 0xb2,0xc, 0x3f,0xc0,0x76,0xe0,0x60,0x38,0x88,0xe0,0x60,
+0x39,0x9, 0x70,0x85,0xe0,0x60,0x38,0x8a,0x71,0x4, 0x70,0x83,0xe0,0x60,0x39,0xc,
+0xe0,0x60,0x38,0x8b,0x71,0x2, 0x70,0x81,0x3b,0x0, 0xe8,0x12,0x57,0xb0,0x17,0x7f,
+0xe0,0x5, 0xb7,0x4f,0xe0,0x5, 0xb7,0x6f,0xe0,0x4, 0x97,0x4f,0xe6,0xad,0xcf,0x7e,
+0x27,0xf, 0xe0,0x3, 0x97,0x4f,0xe6,0xad,0xcf,0x7e,0x27,0xa, 0xe0,0x4, 0x97,0xf,
+0x16,0x81,0xe7,0x2, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe0,0x0, 0xde,0x18,0xe8,0x12,
+0x57,0xb0,0xe0,0x4, 0x97,0x4f,0xe6,0xaf,0xcf,0x7e,0x27,0xf, 0xe0,0x3, 0x97,0x4f,
+0xe6,0xaf,0xcf,0x7e,0x27,0xa, 0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0x0, 0xcf,0x1d,
+0xe0,0x4, 0xb7,0xf, 0xe0,0x0, 0xdd,0xeb,0xe8,0x12,0x57,0xb0,0xe0,0x4, 0x97,0x4f,
+0xe6,0xae,0xcf,0x7e,0x27,0xf, 0xe0,0x3, 0x97,0x4f,0xe6,0xae,0xcf,0x7e,0x27,0xa,
+0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0x1, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe0,0x0,
+0xdd,0xee,0xe8,0x12,0x57,0xb0,0xe0,0x4, 0x97,0x4f,0xe6,0xa2,0xcf,0x7e,0x27,0x15,
+0xe0,0x3, 0x97,0x4f,0xe6,0xa2,0xcf,0x7e,0x27,0x10,0xe0,0x4, 0x96,0x8f,0x17,0x1,
+0xe7,0xd, 0xce,0x9e,0xe0,0x4, 0xb6,0x8f,0xe8,0x24,0x57,0xe1,0xe7,0x1, 0xcf,0x9e,
+0xe8,0x24,0x77,0xe1,0xe0,0x0, 0xdd,0x93,0xe8,0x12,0x57,0xb0,0xe0,0x4, 0x97,0x4f,
+0xe6,0xa1,0xcf,0x7e,0x27,0x15,0xe0,0x3, 0x97,0x4f,0xe6,0xa1,0xcf,0x7e,0x27,0x10,
+0xe0,0x4, 0x96,0x8f,0x17,0x1, 0xe7,0xe, 0xce,0x9e,0xe0,0x4, 0xb6,0x8f,0xe8,0x24,
+0x57,0xe1,0xe7,0x1, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,0xe0,0x0, 0xdd,0x78,0xe8,0x12,
+0x57,0xb0,0xe0,0x4, 0x97,0x6f,0xe6,0xad,0xcf,0x7e,0x27,0x13,0xe0,0x3, 0x97,0x6f,
+0xe6,0xad,0xcf,0x7e,0x27,0xe, 0xe0,0x4, 0x97,0x2f,0x16,0x81,0xe7,0x2, 0xcf,0x1d,
+0xe0,0x4, 0xb7,0x2f,0xe8,0x24,0x57,0x64,0xe7,0xa, 0xcf,0x1d,0xe8,0x24,0x77,0x64,
+0xe0,0x4, 0x97,0x4f,0x37,0x4f,0x27,0x1f,0xe0,0x3, 0x97,0x4f,0x37,0x4f,0x27,0x1b,
+0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0xf, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe8,0x24,
+0x57,0xe4,0xe8,0x24,0x57,0x61,0xe6,0xa5,0xcf,0xff,0xe7,0x4, 0xcf,0x1f,0xe8,0x24,
+0x77,0x61,0x17,0x0, 0xe8,0x24,0x57,0xe4,0xe7,0xa, 0xcf,0x9e,0xe8,0x24,0x77,0xe4,
+0xdb,0x77,0xdb,0xa8,0xe8,0x12,0x57,0xb0,0xe0,0x4, 0x97,0x6f,0xe6,0xaf,0xcf,0x7e,
+0x27,0x1f,0xe0,0x3, 0x97,0x6f,0xe6,0xaf,0xcf,0x7e,0x27,0x1a,0xe0,0x4, 0x96,0xaf,
+0x17,0x1, 0xe7,0x0, 0xce,0x9e,0xe0,0x4, 0xb6,0xaf,0xe0,0x4, 0x96,0xef,0xe7,0x1,
+0xce,0x9e,0xe0,0x4, 0xb6,0xef,0xe0,0x6, 0x96,0xaf,0xe7,0x1, 0xce,0x9e,0xe0,0x6,
+0xb6,0xaf,0xe8,0x24,0x56,0xe1,0xe7,0x8, 0xce,0x9e,0xe8,0x24,0x76,0xe1,0xe0,0x4,
+0x97,0x6f,0xe6,0xae,0xcf,0x7e,0x27,0x1e,0xe0,0x3, 0x97,0x6f,0xe6,0xae,0xcf,0x7e,
+0x27,0x19,0xe0,0x4, 0x97,0x2f,0x16,0x81,0xe7,0x1, 0xcf,0x1d,0xe0,0x4, 0xb7,0x2f,
+0xe8,0x46,0x4f,0x67,0x3f,0x7d,0x1, 0x8e,0xe8,0x23,0x56,0xc7,0xe2,0x0, 0xce,0x85,
+0x1, 0x89,0x16,0x80,0xe8,0x31,0x6e,0xff,0xe8,0x46,0x6f,0x68,0x17,0x2, 0xe8,0x46,
+0x6f,0x67,0xe0,0x4, 0x97,0x4f,0xe6,0xab,0xcf,0x7e,0x27,0xd, 0xe0,0x3, 0x97,0x4f,
+0xe6,0xab,0xcf,0x7e,0x27,0x8, 0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0x4, 0xcf,0x1d,
+0xe0,0x4, 0xb7,0xf, 0xe0,0x4, 0x97,0x4f,0xe6,0xaa,0xcf,0x7e,0x27,0xd, 0xe0,0x3,
+0x97,0x4f,0xe6,0xaa,0xcf,0x7e,0x27,0x8, 0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0x5,
+0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe0,0x4, 0x97,0x4f,0xe6,0xa9,0xcf,0x7e,0x27,0x21,
+0xe0,0x3, 0x97,0x4f,0xe6,0xa9,0xcf,0x7e,0x27,0x1c,0xe0,0x4, 0x97,0xf, 0x16,0x81,
+0xe7,0x6, 0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe8,0x31,0x4f,0xfe,0x27,0x8b,0xe8,0x24,
+0x51,0x61,0xe6,0xa3,0xc9,0x72,0x29,0x6, 0x3c,0x62,0xe0,0x5, 0xd3,0xfd,0xe8,0x31,
+0x69,0x7e,0x17,0x0, 0xe8,0x24,0x57,0xe1,0xe7,0xc, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,
+0xe8,0x12,0x57,0xb0,0xe0,0x4, 0x97,0x4f,0xe6,0xac,0xcf,0x7e,0x27,0x31,0xe0,0x3,
+0x97,0x4f,0xe6,0xac,0xcf,0x7e,0x27,0x2c,0xe0,0x4, 0x97,0xf, 0x16,0x81,0xe7,0x3,
+0xcf,0x1d,0xe0,0x4, 0xb7,0xf, 0xe8,0x24,0x57,0x61,0xe6,0xa3,0xcf,0x7e,0x2f,0x4,
+0xe8,0x25,0x4f,0x26,0x2f,0xf, 0xe8,0x24,0x57,0x61,0x16,0x80,0xe7,0xc, 0xcf,0x1d,
+0xe8,0x24,0x77,0x61,0x16,0x81,0xe0,0x1, 0x97,0x6f,0xe7,0x0, 0xcf,0x1d,0xe0,0x1,
+0xb7,0x6f,0x16,0x81,0xe8,0x25,0x6e,0xa6,0xe0,0x1, 0x97,0xef,0xe6,0xa9,0xcf,0xaf,
+0xe8,0x25,0x6f,0xbc,0xe8,0x25,0x4f,0xae,0xc7,0x81,0xe8,0x25,0x6f,0xae,0xe0,0x10,
+0x17,0x80,0xe0,0x61,0x3f,0x91,0x38,0x83,0x50,0x85,0x51,0x4, 0xe0,0x60,0x38,0x98,
+0x50,0x83,0xe0,0x60,0x39,0x19,0xe0,0x60,0x38,0x9a,0x51,0x2, 0x50,0x81,0xc0,0xa,
+0xf, 0xa8,0xe0,0x60,0x39,0x1c,0xe0,0x60,0x38,0x9b,0x9, 0x21,0x38,0x0, 0x8, 0xb1,
+0xc0,0x7c,0x74,0x1, 0xe0,0x5, 0xd7,0xed,0x3c,0xe0,0x54,0x1, 0xc4,0x85,0xe0,0x5,
+0xd8,0x28,0xe0,0x5, 0xd7,0xf0,0x4c,0x5, 0xc0,0x4, 0x8, 0xe1,0x8, 0xb1,0xc0,0x7c,
+0x74,0x81,0x74,0x2, 0xe0,0x5, 0xd7,0xdd,0x54,0x81,0x54,0x2, 0xe0,0x5, 0xd8,0x30,
+0xc0,0x4, 0x8, 0xa1,0xe0,0xaf,0x0, 0xdf,0xe2,0x0, 0xcc,0x1, 0x1, 0x83,0xe0,0xaf,
+0x0, 0xd0,0xe0,0xaf,0x0, 0xd8,0xe7,0xff,0x17,0xa5,0xe8,0xf4,0x6f,0xec,0x38,0x82,
+0xe8,0x25,0x4f,0xab,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0x84,0x1, 0x4,
+0xe8,0x25,0x6f,0xab,0x38,0x82,0x8, 0xb3,0xc0,0x7a,0x17,0x80,0x39,0xe0,0xe8,0x25,
+0x6f,0xab,0xc1,0x86,0xe0,0x5, 0xd7,0xb5,0x3c,0xe3,0xe7,0x58,0x14,0x0, 0xe0,0x5,
+0xd7,0xf0,0xe1,0xc0,0x8f,0xc3,0xe6,0xaf,0xcf,0xff,0xe0,0x0, 0x27,0xcd,0x14,0x81,
+0xe7,0x58,0x14,0x0, 0xe0,0x5, 0xd7,0xfc,0x14,0x80,0xe7,0x58,0x14,0x0, 0xe0,0x5,
+0xd7,0xf7,0x3c,0xe3,0xe0,0x14,0x14,0x0, 0xe0,0x5, 0xd7,0xdb,0x3c,0xe0,0x39,0x68,
+0xc4,0x83,0xe0,0x16,0x14,0x0, 0xe0,0x5, 0xd7,0xd4,0x3c,0xe0,0x39,0x18,0xc4,0x84,
+0xe0,0x1a,0x14,0x0, 0xe2,0x1, 0xc1,0x7f,0xe0,0x5, 0xd7,0xcb,0x3c,0x12,0xe2,0x1,
+0xc4,0x7f,0x2c,0x29,0x8f,0x83,0xe2,0x1, 0xcf,0x9c,0x1, 0x85,0x8f,0x93,0x2f,0x83,
+0x8f,0xa3,0x27,0xa1,0xe8,0x12,0x57,0x3a,0xe0,0x3, 0x14,0x74,0xe0,0x2, 0x97,0xae,
+0xe0,0x2, 0x96,0xae,0xe6,0xa8,0xcf,0xff,0xe4,0x0, 0xcf,0x81,0xe7,0x7, 0xce,0x9f,
+0xe0,0x2, 0xb6,0xae,0xe0,0x0, 0xdb,0x7, 0xe8,0x12,0x57,0x3a,0xe0,0x2, 0x97,0xae,
+0xe0,0x2, 0x96,0xae,0xe6,0xa8,0xcf,0xff,0xe4,0x0, 0xcf,0x81,0xe7,0x7, 0xce,0x9f,
+0xe0,0x2, 0xb6,0xae,0xe0,0x5, 0xd7,0x67,0xc0,0x6, 0x9, 0xe1,0x8, 0xb3,0xe8,0x25,
+0x49,0xe8,0xe2,0x0, 0xc9,0xda,0x1, 0xb7,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x91,0x4f,
+0xe6,0xad,0xc9,0x72,0x29,0x30,0xe8,0x25,0x69,0x68,0xe0,0x5, 0xd7,0x4a,0x3c,0xe2,
+0xe0,0x50,0x14,0x0, 0xe0,0x5, 0xd7,0x9c,0xe0,0x0, 0x14,0x46,0xe0,0x0, 0xdc,0x13,
+0x3c,0xe2,0xe0,0x20,0x14,0x0, 0xe0,0x5, 0xd7,0x93,0xe0,0x0, 0x14,0x46,0xe0,0x0,
+0xdc,0xa, 0x3c,0xe3,0xe7,0xee,0x14,0x0, 0xe0,0x5, 0xd7,0x8a,0xe0,0x1, 0x14,0xa5,
+0xe7,0xee,0x14,0x1, 0xe0,0x5, 0xd7,0x84,0xe0,0x1, 0x14,0x95,0xe7,0xee,0x14,0x2,
+0xe0,0x5, 0xd7,0x7e,0x14,0xa7,0xe7,0xee,0x14,0x3, 0xe0,0x5, 0xd7,0x79,0x9, 0xa1,
+0xe0,0xae,0x0, 0xa9,0x9, 0xe1,0x8, 0xb2,0xc0,0x7e,0x39,0x68,0xe0,0x5, 0xd7,0x19,
+0xe0,0x5, 0xd7,0x17,0x3c,0xe0,0xc4,0x82,0xe7,0x8b,0x14,0x31,0xe0,0x5, 0xd7,0x51,
+0x3c,0xe0,0xc4,0x83,0xe7,0x8b,0x14,0x34,0xe0,0x5, 0xd7,0x4b,0x4c,0x82,0x29,0x30,
+0xe0,0x1, 0xcc,0x80,0xe7,0x8b,0x14,0x31,0xe0,0x5, 0xd7,0x5a,0x4c,0x83,0xe0,0x1,
+0xcc,0x80,0xe7,0x8b,0x14,0x34,0xe0,0x5, 0xd7,0x53,0xe0,0x25,0x14,0xac,0xe7,0xf0,
+0x14,0x52,0xe0,0x5, 0xd7,0x36,0xe8,0x25,0x4f,0xac,0xe2,0x0, 0xcf,0x81,0x1, 0x92,
+0x14,0x82,0xe7,0xeb,0x14,0x46,0xe0,0x5, 0xd7,0x43,0xe0,0x1, 0x14,0xc1,0xe7,0xeb,
+0x14,0x29,0xe0,0x5, 0xd7,0x3d,0xe0,0x1, 0x14,0xd1,0xe7,0x8b,0x14,0x33,0xe0,0x5,
+0xd7,0x37,0xe0,0x5, 0xd6,0xe8,0xe0,0x5, 0xd6,0xe6,0xc0,0x2, 0x9, 0x61,0xe6,0xa9,
+0xcc,0x99,0xe7,0x8b,0x14,0x31,0xe0,0x5, 0xd7,0x2b,0x4c,0x83,0xe6,0xa9,0xcc,0x99,
+0x0, 0xd1,0x8, 0xb2,0x2c,0x37,0x17,0x81,0xe8,0x25,0x6f,0xaa,0x39,0x68,0xe8,0x24,
+0x57,0xe6,0xe8,0x12,0x77,0xd4,0xe8,0x24,0x57,0xe6,0xe7,0x9, 0xcf,0x98,0xe8,0x24,
+0x77,0xe6,0xe8,0x24,0x54,0xe6,0xe0,0x5, 0xd3,0x51,0xe0,0xaa,0x17,0xd5,0xe8,0x25,
+0x77,0xa4,0x14,0x3e,0xe8,0x25,0x77,0xa5,0xe8,0x25,0x54,0xa4,0xe0,0x5, 0xd3,0x46,
+0xe8,0x25,0x54,0xa5,0x14,0x3f,0xe0,0x5, 0xd3,0x41,0xe8,0x25,0x71,0x27,0xe8,0x25,
+0x71,0x28,0xe8,0x25,0x71,0x29,0xe8,0x25,0x71,0x2a,0xe8,0x25,0x71,0x2b,0xe8,0x25,
+0x71,0x2c,0x15,0x6, 0xe0,0x4a,0x14,0xce,0xe0,0x0, 0x14,0x41,0x9, 0x21,0xe0,0xa6,
+0x0, 0xbc,0xe8,0x25,0x4f,0xaa,0x27,0xb3,0x17,0x80,0xe8,0x25,0x6f,0xaa,0x14,0x0,
+0xe8,0x12,0x57,0xd4,0xe8,0x24,0x77,0xe6,0xe8,0x24,0x54,0xe6,0xe0,0x5, 0xd3,0x1e,
+0xe0,0x11,0x17,0xa3,0xe8,0x25,0x77,0xa4,0xe0,0x11,0x17,0xaf,0xe8,0x25,0x77,0xa5,
+0x14,0x3e,0xe8,0x25,0x54,0xa4,0xe0,0x5, 0xd3,0x11,0xe8,0x25,0x54,0xa5,0x14,0x3f,
+0xe0,0x5, 0xd3,0xc, 0x17,0x80,0xe8,0x25,0x77,0xa7,0xe8,0x25,0x77,0xa8,0xe0,0x8,
+0x17,0x80,0xe8,0x25,0x77,0xa9,0xe8,0x25,0x77,0xaa,0xe7,0xfd,0x17,0xfe,0xe8,0x25,
+0x77,0xab,0xe0,0xfe,0x17,0xff,0xe8,0x25,0x77,0xac,0x0, 0xc4,0x9, 0x61,0x8, 0xb4,
+0x39,0xe8,0x14,0x2, 0xef,0xff,0xd3,0x43,0xe0,0x2, 0x12,0x49,0xe0,0x4, 0x11,0x49,
+0xe8,0x12,0x54,0x33,0x3d,0xe4,0x3d,0x63,0x3c,0xe2,0xe0,0x5, 0xd2,0x87,0x3d,0x63,
+0xe8,0x12,0x54,0x32,0x3d,0xe4,0xe0,0x5, 0xc5,0x12,0x3c,0xe2,0xa, 0x21,0xe0,0xa4,
+0x0, 0xfd,0x8, 0xb4,0x39,0xe8,0x14,0x2, 0xef,0xff,0xd3,0x29,0xe0,0x2, 0x12,0x49,
+0xe0,0x4, 0x11,0x49,0xe8,0x12,0x54,0x33,0x3d,0xe4,0x3d,0x63,0x3c,0xe2,0xe0,0x5,
+0xd2,0x9d,0x3d,0x63,0xe8,0x12,0x54,0x32,0x3d,0xe4,0xe0,0x5, 0xc5,0x12,0x3c,0xe2,
+0xa, 0x21,0xe0,0xa5,0x0, 0x93,0xe0,0x2, 0x14,0xac,0xe0,0xa1,0x0, 0xe0,0xe0,0x61,
+0x3f,0x2, 0xe0,0x61,0x3f,0x82,0xe7,0xef,0x16,0xff,0x3f,0xdd,0xe0,0x61,0x3f,0x92,
+0xe8,0x12,0x57,0xb0,0xe6,0xaf,0xcc,0x78,0xe0,0x4, 0x96,0xef,0xe7,0x0, 0xce,0x98,
+0xe0,0x4, 0xb6,0xef,0xe0,0x4, 0x96,0xef,0xe7,0x1, 0xce,0x98,0xe0,0x4, 0xb6,0xef,
+0xe0,0x6, 0x96,0xaf,0xe7,0x0, 0xce,0x98,0xe0,0x6, 0xb6,0xaf,0xe0,0x6, 0x96,0xaf,
+0xe7,0x1, 0xce,0x98,0xe0,0x6, 0xb6,0xaf,0xe6,0xa4,0xcf,0xfe,0x27,0x87,0xe0,0x61,
+0x3f,0x82,0xe0,0x10,0xcf,0x80,0xe0,0x61,0x3f,0x92,0x38,0x82,0x8, 0xb7,0xc0,0x7e,
+0x39,0xe8,0x14,0x0, 0x3b,0x69,0x3b,0xea,0x3a,0x6b,0x11,0x0, 0xef,0xff,0xd2,0xd7,
+0xe0,0x4a,0x12,0xf8,0x3f,0xe2,0xe2,0x1, 0xc7,0xff,0x3c,0x6f,0x3c,0xe3,0x77,0x81,
+0xe0,0x5, 0xd0,0x8a,0x57,0x81,0x3d,0xe7,0x3c,0x6f,0x3d,0x66,0x3c,0xe3,0xe0,0x5,
+0xd0,0x56,0x3f,0xe2,0xe4,0x0, 0xc7,0x94,0x3c,0x62,0x3f,0x95,0xe4,0x1, 0xc4,0x4b,
+0x94,0xcf,0xe0,0x2, 0xc4,0x4, 0xc1,0x1, 0xe0,0x5, 0xd2,0x68,0xe2,0x0, 0xc9,0x4,
+0x1, 0xe2,0x3c,0x63,0xdf,0xa5,0x3c,0xe4,0x3c,0x63,0xc0,0x2, 0xb, 0xa1,0xe0,0xa3,
+0x0, 0x8d,0xe8,0x24,0x4f,0xd2,0xe2,0x0, 0xcf,0x81,0x1, 0x84,0xe1,0x28,0x3c,0x1f,
+0x38,0x82,0x2f,0x84,0xe1,0x28,0x3c,0xf, 0x0, 0xfc,0x14,0x0, 0x0, 0xfa,0xe8,0xf4,
+0x4f,0xad,0xe2,0x0, 0xcf,0x81,0xe0,0x1, 0x1, 0xc9,0x8, 0xb6,0xc0,0x7e,0xe8,0xd,
+0x49,0x15,0x39,0xe8,0xe0,0xf, 0x31,0x28,0xe8,0xd, 0x49,0x16,0x14,0x0, 0x39,0x4f,
+0xda,0x45,0xe8,0x25,0x4f,0xc1,0x27,0x86,0x17,0x80,0xe8,0x49,0x69,0x8e,0xe8,0x25,
+0x6f,0xb0,0x14,0x1, 0xef,0xff,0xd7,0xa1,0xe8,0x25,0x4c,0xc3,0x14,0x5, 0xef,0xff,
+0xd6,0xea,0x14,0x0, 0xe0,0x0, 0xda,0xe1,0xe8,0x24,0x49,0xd2,0xe6,0xa9,0xc9,0x2,
+0xe0,0x0, 0x29,0xf8,0xe0,0xce,0x14,0x70,0xdf,0x45,0x3d,0xe3,0x3d,0x62,0x3c,0xe3,
+0x14,0x1, 0xdf,0x8d,0xe8,0xb, 0x4a,0x71,0xe8,0xb, 0x4a,0xf2,0x11,0x80,0xe8,0x24,
+0x57,0xe1,0xe6,0xaf,0xcf,0xff,0xe0,0x0, 0x2f,0xfc,0xe8,0x24,0x57,0xe1,0xe6,0xa2,
+0xcf,0xff,0xe0,0x0, 0x2f,0xf6,0xe8,0x24,0x57,0xe1,0xe6,0xae,0xcf,0xff,0xe0,0x0,
+0x2f,0xf0,0xe8,0x25,0x4f,0xea,0xe2,0x0, 0xcf,0x81,0xe0,0x0, 0x1, 0x6a,0xe8,0xf4,
+0x4b,0x2f,0xe2,0x0, 0xcb,0x1, 0xe0,0x0, 0x1, 0xe4,0xe8,0x25,0x4d,0xc1,0xe0,0x0,
+0x2d,0xe0,0x75,0x81,0xd2,0x2, 0xe0,0x8, 0x32,0x28,0x3c,0x45,0xe0,0x4, 0xd9,0xfe,
+0xe2,0x0, 0xc9,0x81,0x55,0x81,0xe0,0x0, 0x1, 0xc3,0x3d,0x62,0x3c,0xe3,0x3c,0x63,
+0xdf,0x56,0xe8,0x24,0x57,0xe1,0x17,0x0, 0xe7,0x8, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,
+0xef,0xff,0xd7,0x1e,0xe8,0x25,0x4f,0xc1,0x27,0x82,0xd2,0x80,0x14,0x1, 0xef,0xff,
+0xd7,0x44,0x3c,0x63,0xdf,0x77,0x24,0x31,0x17,0x80,0xe8,0x24,0x6f,0xd2,0xe8,0x24,
+0x57,0xe1,0xe6,0xa7,0xcf,0xff,0x27,0xa9,0xe0,0xce,0x14,0x70,0xde,0xd1,0x15,0x80,
+0x3d,0x62,0x3c,0xeb,0x3c,0x6b,0xdf,0x33,0xd3,0x25,0xe8,0x25,0x4f,0xc1,0x27,0x82,
+0xd2,0x12,0xe8,0x25,0x4c,0x41,0xef,0xff,0xd6,0x53,0xef,0xff,0xd6,0xf9,0xe8,0x24,
+0x57,0xe1,0x17,0x0, 0xe7,0x8, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,0xc0,0x2, 0xb, 0x61,
+0x14,0x81,0x15,0x80,0x3d,0x62,0x3c,0x69,0xe7,0xff,0x0, 0x8d,0x5, 0xc3,0x3d,0x62,
+0x3c,0xeb,0x3c,0x66,0xe7,0xff,0x0, 0xbe,0xe8,0x25,0x4f,0xc1,0x2f,0x9c,0xd2,0x73,
+0xc1,0x81,0xe2,0x1, 0xc1,0xff,0xe2,0x0, 0xc9,0xbc,0xe7,0xff,0x1, 0x82,0xe0,0xce,
+0x14,0x70,0xde,0x9e,0x15,0x80,0x3c,0x6b,0x3d,0x62,0x3c,0xeb,0xdf,0x0, 0xe8,0x25,
+0x4c,0x41,0xef,0xff,0xd6,0x25,0xe8,0x25,0x4f,0xc1,0x2f,0xd9,0xc0,0x2, 0xb, 0x21,
+0xe7,0xed,0x0, 0xc6,0xd2,0x4b,0x0, 0xe5,0x38,0x82,0x8, 0xb5,0xe8,0x12,0x52,0x3a,
+0x17,0x1, 0xe0,0x1, 0x97,0xa4,0x12,0x80,0xe7,0x3, 0xcf,0x9e,0xe0,0x1, 0xb7,0xa4,
+0xe0,0x8, 0x17,0x0, 0xe8,0x12,0x50,0xae,0x3f,0x11,0x3f,0xe1,0xb2,0x8f,0xc7,0x84,
+0xe0,0x40,0xb2,0x9f,0x3f,0xfe,0x1, 0xfb,0xe0,0xf3,0x16,0xa0,0x3f,0xe5,0x3f,0x9d,
+0x17,0x8, 0xe8,0x81,0x56,0xa5,0xe0,0x2e,0x3f,0x75,0x3e,0x61,0x3a,0xed,0xb7,0x1,
+0xc6,0x4, 0xe0,0x0, 0xc2,0xee,0xb7,0x91,0x11,0x0, 0x3f,0xe2,0x3f,0x9d,0x17,0xa,
+0xe0,0x2e,0x3f,0x72,0xc6,0x81,0xb7,0xc, 0x3e,0xf5,0xb7,0x9c,0xc6,0x4, 0x1, 0xf5,
+0x3f,0x61,0xe0,0x1, 0x17,0x80,0xe0,0xf3,0x11,0x8, 0xe0,0x4, 0xc7,0x0, 0xe2,0x1,
+0xcf,0x80,0xe0,0x0, 0x1, 0xd4,0x15,0x0, 0xe0,0x32,0x15,0x8e,0x3e,0xea,0x3e,0x9b,
+0x16,0x8, 0xe0,0x2c,0x3e,0x7a,0xb6,0xe, 0xb6,0x9e,0xc7,0x81,0xe2,0x1, 0xcf,0xf0,
+0x1, 0xef,0x16,0x0, 0xe0,0x48,0x16,0xee,0x3e,0x9c,0x17,0x8, 0x3f,0xec,0xe0,0x2c,
+0x3e,0x7e,0x3f,0x61,0xe0,0x6, 0xc7,0x4c,0xb6,0xe, 0x15,0x8, 0xb6,0x9e,0x3f,0x61,
+0xe0,0x6, 0xc7,0x50,0xb6,0xe, 0x3d,0xe1,0xb6,0x9e,0xe0,0x48,0x16,0xee,0x3e,0x9f,
+0xe0,0x2c,0x3f,0xfa,0xe0,0x7, 0xc5,0xf0,0x3f,0x6c,0xb7,0xb, 0x14,0x8, 0xb6,0x9b,
+0xe0,0x25,0x15,0xe8,0x3d,0x9f,0xe0,0x2a,0x3f,0xf8,0xe0,0x7, 0x16,0x74,0x3e,0x11,
+0xb5,0xc, 0xe0,0x4d,0x14,0xca,0xb5,0x9c,0xe8,0x25,0x4e,0x43,0xe4,0x0, 0xc6,0x7,
+0xe0,0xb, 0x3c,0x9c,0x3d,0x9f,0xe0,0x2a,0x3f,0xf8,0x3e,0x61,0xe0,0x7, 0xc6,0x78,
+0xb5,0xc, 0xe0,0x7, 0xc0,0xfc,0xb5,0x9c,0xb7,0x1, 0xb6,0x91,0xe0,0x1, 0x97,0x24,
+0xe7,0x3, 0xcf,0x1f,0xe0,0x1, 0xb7,0x24,0xa, 0xe1,0x14,0x0, 0xe0,0x3, 0x37,0xa2,
+0x39,0x91,0xe0,0x9, 0x39,0x1f,0x3e,0xe8,0x3e,0x99,0x16,0x8, 0xe0,0x2c,0x3e,0x78,
+0xb6,0x3, 0xb6,0x93,0xe7,0xff,0x0, 0xab,0x8, 0xb1,0xdf,0x60,0xe8,0x12,0x57,0xbb,
+0x16,0x81,0x97,0x2f,0xe7,0x5, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xba,0xe0,0x1,
+0x97,0x4f,0xcf,0x3c,0xe0,0x1, 0xb7,0x4f,0xe0,0x1, 0x97,0x6f,0xcf,0x3c,0xe0,0x1,
+0xb7,0x6f,0x17,0x0, 0xe0,0x4, 0x96,0xf, 0xe7,0x1, 0xce,0x1e,0xe0,0x4, 0xb6,0xf,
+0xe0,0x4, 0x96,0xf, 0xe7,0x0, 0xce,0x1e,0xe0,0x4, 0xb6,0xf, 0xe8,0x12,0x57,0xb4,
+0xb6,0x8f,0x16,0xff,0xb6,0xef,0x16,0x88,0xb6,0xcf,0xe0,0x1, 0x96,0x8f,0xe7,0x8,
+0xce,0x9e,0xe0,0x1, 0xb6,0x8f,0xe0,0x1, 0x16,0xea,0xe0,0x3, 0xb6,0x8f,0xe0,0x1,
+0xb7,0x2f,0xe0,0x6a,0x3f,0x18,0xe0,0x61,0x3f,0x82,0xe0,0x2, 0xcf,0x80,0xe0,0x61,
+0x3f,0x92,0x8, 0xe1,0xe8,0x12,0x57,0x3a,0x16,0x81,0xe0,0x1, 0x97,0xae,0x34,0x22,
+0xe7,0x3, 0xcf,0x9d,0xe0,0x1, 0xb7,0xae,0xe8,0x12,0x57,0xae,0xe0,0xd, 0x3f,0x98,
+0xc4,0x4, 0x96,0x1d,0x3f,0x98,0xb4,0x9d,0x96,0x9f,0xb4,0x9f,0x16,0x80,0xe0,0x1,
+0x97,0xae,0xe7,0x3, 0xcf,0x9d,0xe0,0x1, 0xb7,0xae,0x38,0x82,0xe8,0xf3,0x4f,0xa0,
+0xe6,0xa9,0xcf,0xdf,0x2c,0x9, 0x2f,0x83,0xe7,0xfe,0x0, 0x81,0xe2,0x0, 0xcf,0x84,
+0x1, 0x83,0xe7,0xd3,0x0, 0xad,0x38,0x82,0x8, 0xb3,0xe8,0x12,0x57,0x2e,0xe0,0xd,
+0x34,0x22,0x3f,0x1d,0x91,0x9e,0xe8,0x12,0x57,0x34,0xe0,0x1, 0x97,0x6e,0xe2,0x0,
+0xcf,0x0, 0x3, 0x4, 0x9, 0xa1,0xe0,0x58,0x0, 0xcf,0x39,0x68,0xdf,0xe0,0x8c,0x83,
+0x3c,0x62,0x9, 0xa1,0xe0,0x58,0x0, 0xd5,0x8, 0xb1,0xe8,0x12,0x57,0xb4,0xe7,0xfe,
+0x16,0x80,0x97,0xf, 0xe0,0x1, 0xcf,0x0, 0xb7,0xf, 0x97,0x2f,0x3f,0x5d,0x27,0x18,
+0x97,0xf, 0x16,0x81,0xe7,0x3, 0xcf,0x1d,0xb7,0xf, 0x97,0x2f,0xe2,0xc, 0xc7,0x0,
+0x27,0x5, 0x97,0xf, 0xe7,0x2, 0xcf,0x1d,0xb7,0xf, 0x17,0x7f,0xe8,0x12,0x57,0xb4,
+0xe7,0xfe,0x16,0xff,0xb7,0x6f,0x97,0xf, 0x3f,0x5d,0xb7,0xf, 0x8, 0xe1,0x96,0x8f,
+0xe7,0x3, 0xce,0x9e,0xb6,0x8f,0x96,0x8f,0xe7,0x2, 0xce,0x9e,0xb6,0x8f,0xe0,0x1,
+0x94,0x6f,0xe2,0x1, 0xc4,0x7f,0xdf,0xb9,0x0, 0xe9,0xe8,0xf4,0x4f,0x92,0x3f,0x6f,
+0x2f,0x82,0x17,0x1, 0xe8,0xf4,0x4f,0xad,0x2f,0x91,0xe8,0x25,0x4f,0xc1,0x2f,0xa7,
+0xe8,0xf4,0x4f,0x90,0x3f,0x6f,0x2f,0x82,0x17,0x1, 0x3f,0xee,0xe0,0x0, 0xc7,0xe3,
+0xe0,0x2f,0x3f,0xbe,0xe2,0x1, 0xc7,0xff,0x0, 0x86,0xe8,0x25,0x4f,0xc1,0x2f,0x92,
+0xe8,0xf4,0x4f,0x91,0xe8,0xf4,0x4f,0x34,0xc7,0xff,0x3f,0xbe,0xe6,0xa2,0xcf,0x8f,
+0xe8,0x24,0x6f,0xd6,0xe8,0x24,0x4f,0xd6,0x2f,0x90,0x17,0x81,0xe8,0x24,0x6f,0xd6,
+0x38,0x82,0xe8,0x25,0x4f,0xb0,0xe2,0x0, 0xcf,0xba,0x5, 0x84,0xe0,0x3, 0x17,0xf4,
+0x0, 0xe0,0xe0,0x7, 0x17,0xe8,0x0, 0xdd,0xe8,0x24,0x4f,0xd6,0xe2,0x0, 0xcf,0xfd,
+0x5, 0xf0,0xe0,0x0, 0x17,0xfd,0x0, 0xeb,0x8, 0xb1,0xdf,0xc0,0xe8,0x24,0x4f,0xd6,
+0xe8,0x25,0x6f,0xc0,0x17,0x80,0xe8,0x24,0x57,0x61,0xe7,0x3, 0xcf,0x1f,0xe8,0x24,
+0x77,0x61,0xe8,0x12,0x77,0xdf,0x8, 0xe1,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x97,0xcf,
+0xe6,0xaf,0xcf,0xff,0x27,0xa0,0x8, 0xb2,0xe8,0x24,0x57,0xe1,0x11,0x1, 0xe7,0xb,
+0xcf,0x92,0x3c,0x62,0xe8,0x24,0x77,0xe1,0xef,0xff,0xd5,0x3f,0xe8,0x25,0x69,0x43,
+0xe8,0x25,0x69,0x41,0xe8,0x25,0x4f,0xc3,0xe8,0x25,0x4c,0x41,0xe0,0xe, 0x37,0xa4,
+0xe0,0x48,0x17,0xbe,0x3f,0x9e,0x17,0x0, 0xaf,0xf, 0xef,0xff,0xd4,0x59,0x9, 0x21,
+0xe7,0xe9,0x0, 0xfe,0x38,0x82,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x97,0xcf,0xe6,0xaf,
+0xcf,0xff,0x27,0x88,0xe8,0x24,0x57,0xe1,0x17,0x1, 0xe7,0x7, 0xcf,0x9e,0xe8,0x24,
+0x77,0xe1,0x38,0x82,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,
+0x27,0xa3,0xe8,0x24,0x57,0xe1,0xe6,0xa8,0xcf,0xff,0x27,0x9e,0x8, 0xb1,0xe8,0x24,
+0x57,0xe1,0x17,0x0, 0xe7,0x7, 0xcf,0x9e,0x14,0x1, 0xe8,0x24,0x77,0xe1,0xef,0xff,
+0xd5,0x4, 0x17,0x1, 0xe8,0x25,0x6f,0x43,0xe8,0x25,0x6f,0x41,0xe8,0x25,0x4f,0xc3,
+0xe8,0x25,0x4c,0x41,0xe0,0xd, 0x37,0xa4,0xe0,0x48,0x17,0xbe,0x3f,0x9d,0xaf,0xf,
+0x8, 0xa1,0xe7,0xe8,0x0, 0x9d,0x38,0x82,0x8, 0xb3,0xe7,0xff,0x11,0x1, 0x11,0xff,
+0xef,0xff,0xd7,0xa7,0xe8,0x25,0x69,0x47,0x2c,0x7, 0xe0,0x5, 0x14,0x85,0x14,0x2,
+0x9, 0xa1,0xe0,0x7, 0x0, 0x80,0xef,0xff,0xd4,0xfa,0x2c,0x9, 0xe8,0x24,0x57,0xe1,
+0xe6,0xac,0xcf,0xff,0x2f,0x84,0x3c,0xe3,0xd3,0x75,0x0, 0xeb,0x9, 0xe1,0xe8,0x24,
+0x57,0xe1,0xe6,0xac,0xcf,0xff,0x27,0x82,0x38,0x82,0x8, 0xb1,0xdf,0xde,0xe8,0x24,
+0x57,0xe1,0xe6,0xac,0xcf,0xff,0x27,0xfb,0x8, 0xe1,0x8, 0xb1,0xef,0xff,0xd4,0xdf,
+0x24,0x2, 0x8, 0xe1,0xdf,0xd2,0x0, 0xfb,0x8, 0xb1,0x14,0x1, 0xef,0xff,0xd4,0xbd,
+0xef,0xff,0xd7,0x77,0x2c,0x7e,0x8, 0xe1,0xe8,0x12,0x57,0xbb,0xe6,0xaf,0xcc,0x78,
+0x97,0x2f,0xe7,0x8, 0xcf,0x18,0xb7,0x2f,0x97,0x2f,0xe7,0x9, 0xcf,0x18,0xb7,0x2f,
+0x97,0x2f,0xe7,0xe, 0xcf,0x18,0xb7,0x2f,0x38,0x82,0x8, 0xb1,0xe8,0x24,0x57,0xe1,
+0xe6,0xac,0xcf,0xff,0x2f,0x82,0xdf,0xcc,0xef,0xff,0xd4,0xb9,0x2c,0x3, 0x8, 0xa1,
+0x0, 0xd5,0x8, 0xe1,0x8, 0xb1,0xef,0xff,0xd4,0xb2,0x2c,0x2, 0xdf,0xcf,0x14,0x0,
+0xd6,0xfa,0xe0,0x1, 0x14,0x48,0xd6,0x26,0xe8,0x24,0x57,0xe1,0xe6,0xac,0xcf,0xff,
+0x27,0x8f,0xe8,0x25,0x4f,0xc5,0x27,0x86,0xe8,0x25,0x4f,0xc5,0xc7,0xff,0xe8,0x25,
+0x6f,0xc5,0x14,0x1, 0xdf,0xca,0x14,0x1, 0x8, 0xa1,0xe0,0xd, 0x0, 0xe5,0xdf,0x8d,
+0x0, 0xec,0x8, 0xb4,0xdf,0xba,0x14,0x80,0x3c,0x69,0xd6,0x1e,0xe0,0x5, 0xd2,0x7b,
+0x17,0x80,0xe8,0x12,0x77,0xd9,0xe0,0x61,0x3f,0x82,0xe7,0xbf,0x17,0x7f,0x3f,0xde,
+0xe0,0x61,0x3f,0x92,0xe8,0x12,0x57,0xb8,0x16,0x81,0x97,0xf, 0xe7,0xfb,0x11,0xff,
+0xe7,0x6, 0xcf,0x1d,0xe7,0xff,0x12,0x1, 0xb7,0xf, 0xe8,0x12,0x57,0xd9,0xe8,0x12,
+0x57,0x38,0x3f,0xd3,0xe8,0x12,0x77,0xd9,0xe8,0x25,0x6a,0x47,0xe0,0x1, 0x97,0x8e,
+0x27,0xfe,0xe0,0x4, 0x14,0x80,0x14,0x1, 0xd2,0xed,0xe8,0x12,0x57,0xb8,0x11,0x1,
+0x97,0xf, 0xe7,0x6, 0xcf,0x12,0xb7,0xf, 0xe8,0x12,0x57,0xd9,0x3f,0xd3,0x27,0xe6,
+0xe0,0x61,0x3f,0x82,0xe0,0x40,0xcf,0x80,0xe0,0x61,0x3f,0x92,0x3c,0x62,0xdf,0x85,
+0x14,0x80,0x3c,0x62,0xa, 0x21,0xe0,0xb, 0x0, 0xe0,0x8, 0xb1,0xe8,0xb, 0x4f,0xef,
+0xe8,0xb, 0x4c,0x70,0x37,0xa8,0x3c,0x4f,0xe0,0x4, 0xd6,0xd0,0x17,0x81,0xe8,0xf4,
+0x6f,0xaf,0xe0,0x1b,0x14,0x2c,0xe8,0xff,0x6f,0xf3,0xe0,0x4, 0xd6,0xc7,0x17,0x87,
+0xe8,0x61,0x6f,0xa7,0xe8,0x61,0x6f,0xa8,0x8, 0xe1,0x17,0x81,0xe8,0xf4,0x6f,0xad,
+0xe8,0x24,0x4f,0x56,0xe8,0x25,0x4f,0xc0,0x3f,0x9e,0xe8,0x25,0x6f,0xc0,0x17,0x80,
+0xe8,0x24,0x77,0xe3,0xe8,0x49,0x6f,0x8e,0xe8,0x25,0x6f,0xb0,0xe8,0x25,0x4f,0xc3,
+0x38,0x82,0x17,0x80,0xe8,0xf4,0x6f,0xad,0xe8,0x24,0x4f,0xd6,0xe8,0x25,0x4f,0x40,
+0x37,0xc1,0x3f,0xfe,0x3, 0x8e,0xe8,0x24,0x4f,0x56,0xe8,0x25,0x4f,0xc0,0x37,0x41,
+0x3f,0xae,0xe8,0x25,0x6f,0xc0,0x17,0x80,0xe8,0x24,0x77,0xe3,0xe7,0xfd,0x0, 0xcd,
+0xe8,0x24,0x57,0xe1,0x17,0x1, 0xe7,0x3, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,0x0, 0xf4,
+0x8, 0xb2,0xe8,0xb, 0x4f,0xf1,0xe8,0xb, 0x4c,0x72,0x37,0xa8,0x3c,0x4f,0xe0,0x4,
+0xd6,0x85,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x91,0x4f,0xe6,0xaf,0xc9,0x72,0x29,0xa,
+0xe8,0x25,0x4f,0xac,0xe2,0x0, 0xcf,0x81,0x1, 0x9a,0x3c,0x62,0xda,0xb5,0x3c,0x62,
+0xdb,0x1, 0xdf,0x58,0xdf,0x9b,0xe8,0x25,0x4c,0x2c,0xe2,0x0, 0xcc,0x1, 0x1, 0x82,
+0xda,0xf9,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x94,0x4f,0xe6,0xaf,0xcc,0x78,0x2c,0xa,
+0xda,0xa3,0xdf,0xb8,0xde,0xa8,0x9, 0x21,0xe7,0xe7,0x0, 0x92,0x14,0x1, 0xda,0x9c,
+0x0, 0xe9,0x14,0x1, 0x0, 0xf6,0x8, 0xb2,0xe8,0x49,0x4f,0xc4,0xe0,0x0, 0x27,0xc9,
+0xe8,0x49,0x4f,0xca,0x11,0x3b,0xe2,0x0, 0xcf,0x80,0x17,0xbc,0xe0,0x62,0x39,0x2f,
+0xe8,0xf4,0x4f,0xad,0xe2,0x0, 0xcf,0x81,0x1, 0x88,0xe8,0x25,0x4f,0xc1,0x27,0x85,
+0xe8,0x49,0x4f,0x8e,0x2f,0x82,0xde,0x51,0xe8,0x49,0x4f,0x8e,0x2f,0x86,0xe8,0x25,
+0x4f,0xc1,0x2f,0x83,0x3c,0x62,0xdb,0xdc,0xe8,0xf4,0x4f,0xad,0xe2,0x0, 0xcf,0x81,
+0x1, 0x4, 0xe8,0x25,0x4f,0xea,0x27,0xa3,0xe8,0x25,0x4f,0xc1,0x27,0xa0,0xe8,0x49,
+0x4f,0x8e,0x3f,0xf2,0x1, 0x8a,0xde,0x60,0xde,0x6e,0xe8,0x49,0x4f,0xca,0xe2,0x0,
+0xcf,0x81,0x1, 0x83,0xef,0xff,0xd3,0x54,0xe8,0x49,0x4f,0x8e,0xe8,0x25,0x6f,0xb0,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0xbc,0xe8,0x49,0x6f,0x8e,0x2, 0x84,
+0xe8,0x25,0x4f,0xea,0x27,0x84,0x17,0x80,0xe8,0x49,0x6f,0x8e,0x9, 0x61,0x11,0x3c,
+0x0, 0xc0,0x8, 0xb1,0xe8,0x25,0x4f,0xea,0x27,0x88,0x17,0x80,0xe8,0x25,0x6f,0xea,
+0xe8,0xf4,0x4f,0xad,0x2f,0xac,0xdf,0x56,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x97,0xcf,
+0xe6,0xaf,0xcf,0xff,0x2f,0xab,0xe8,0xf4,0x4f,0xd8,0x2f,0xa8,0xe8,0x25,0x4f,0xaf,
+0x2f,0x84,0x17,0x85,0xe8,0x25,0x6f,0xaf,0xe8,0x25,0x4f,0xaf,0x27,0x8a,0xc7,0xff,
+0xe2,0x1, 0xc7,0xff,0xe8,0x25,0x6f,0xaf,0x2f,0x84,0x17,0x83,0xe8,0xf4,0x6f,0xad,
+0xe8,0xf4,0x4f,0xad,0xe2,0x0, 0xcf,0x81,0x1, 0x34,0x4, 0x92,0xe2,0x0, 0xcf,0x83,
+0xe0,0x0, 0x1, 0x49,0x17,0x81,0xe8,0xf4,0x6f,0xad,0x0, 0x98,0xe8,0xf4,0x4f,0xad,
+0xe2,0x0, 0xcf,0x81,0x1, 0xd2,0xdf,0x12,0x0, 0xd0,0x17,0x80,0x0, 0xdc,0xe8,0x56,
+0x4f,0x98,0x2f,0x89,0xe8,0xf4,0x4f,0x80,0xe2,0x0, 0xcf,0x81,0x1, 0x4, 0xe8,0x61,
+0x4f,0xbe,0x27,0x85,0x17,0x80,0xe8,0x24,0x77,0xe3,0x8, 0xe1,0xe8,0xf4,0x4f,0x8e,
+0xe6,0xaf,0xcf,0xff,0x27,0xfb,0xe8,0x24,0x57,0xe3,0xe0,0x7, 0x16,0xe8,0xe8,0xf4,
+0x4f,0xf, 0xe1,0x2f,0x3f,0xbd,0x3f,0xfe,0x4, 0xf1,0x8, 0xa1,0xe7,0xfd,0x0, 0xef,
+0xe8,0x56,0x4f,0x98,0x2f,0x91,0xe8,0x29,0x57,0x84,0xe2,0x1, 0xcf,0xc8,0x2, 0xc,
+0xe8,0xf4,0x4f,0x8e,0x27,0x89,0xe8,0xf4,0x4f,0x80,0xe2,0x0, 0xcf,0x81,0x1, 0x4,
+0xe8,0x61,0x4f,0xbe,0x27,0x84,0x8, 0xa1,0xe7,0xfd,0x0, 0xed,0xe8,0x25,0x6f,0xc6,
+0x0, 0xd5,0x8, 0xa1,0xe7,0xfe,0x0, 0x86,0x8, 0xb1,0xdf,0x84,0xe8,0x25,0x4f,0xc1,
+0x2f,0x8a,0xe8,0xf4,0x4f,0xad,0xe2,0x0, 0xcf,0x81,0x1, 0x2, 0xde,0x4c,0x8, 0xa1,
+0xe7,0xfe,0x0, 0xab,0xde,0x3b,0x0, 0xfc,0xe8,0x12,0x57,0xbb,0x16,0x81,0x97,0x2f,
+0xe2,0x0, 0xcc,0x7, 0xe7,0xf, 0xcf,0x1d,0xb7,0x2f,0x17,0x0, 0x96,0xcf,0xe7,0xc,
+0xce,0x9e,0xb6,0xcf,0x96,0xcf,0xe7,0xd, 0xce,0x9e,0xb6,0xcf,0x96,0xaf,0xe7,0x1,
+0xce,0x9e,0xb6,0xaf,0x2, 0x85,0x97,0x4f,0xe7,0x0, 0xcf,0x38,0xb7,0x4f,0x38,0x82,
+0xe8,0x12,0x57,0x39,0x17,0x80,0x96,0xee,0xe7,0x5, 0xce,0x9f,0xb6,0xee,0x96,0xee,
+0xe7,0x7, 0xce,0x9f,0xb6,0xee,0xe8,0x12,0x57,0x37,0xb7,0xae,0x96,0x8e,0xe7,0x0,
+0xce,0x9f,0xb6,0x8e,0x96,0x8e,0xe7,0x1, 0xce,0x9f,0xb6,0x8e,0xb7,0xee,0xe8,0x12,
+0x57,0x3a,0xb7,0xce,0xe0,0x61,0x3f,0x92,0xe0,0x61,0x3f,0x91,0x38,0x82,0xe8,0x12,
+0x57,0xba,0xe0,0x1, 0x17,0x7c,0xe0,0x1, 0xb7,0x6f,0xe0,0x1, 0x17,0x7f,0xe0,0x2,
+0xb7,0x6f,0xe0,0x2, 0xb7,0x2f,0x17,0x3, 0xe0,0x1, 0xb7,0x4f,0xe0,0x1, 0x17,0x40,
+0xe0,0x2, 0xb7,0xf, 0xe0,0x1, 0x97,0x4f,0xcf,0x3c,0xe0,0x1, 0xb7,0x4f,0x38,0x82,
+0xe8,0x12,0x57,0xbb,0x16,0x81,0x97,0x6f,0xe7,0x0, 0xcf,0x1d,0xb7,0x6f,0x97,0xf,
+0xe7,0x1, 0xcf,0x18,0xb7,0xf, 0x38,0x82,0xe8,0x12,0x57,0xb6,0xe8,0x12,0x57,0x2c,
+0x16,0x81,0xb7,0x2f,0x97,0xf, 0xe7,0x0, 0xcf,0x1d,0xb7,0xf, 0x97,0xf, 0xe7,0x7,
+0xcf,0x1d,0xb7,0xf, 0x38,0x82,0xe8,0x12,0x57,0xbb,0x17,0x1, 0x96,0xaf,0xe7,0x7,
+0xce,0x9e,0xb6,0xaf,0x16,0xa0,0xe8,0x12,0x76,0xac,0x96,0xaf,0xe7,0xa, 0xce,0x9e,
+0xb6,0xaf,0xe8,0x12,0x57,0xb6,0x96,0x8f,0xe7,0x2, 0xce,0x9e,0xb6,0x8f,0x17,0x0,
+0x96,0x8f,0xe7,0xb, 0xce,0x9e,0xb6,0x8f,0x96,0x8f,0xe7,0x1, 0xce,0x9e,0xb6,0x8f,
+0x96,0x8f,0xe7,0x8, 0xce,0x9e,0xb6,0x8f,0xb7,0x4f,0xe0,0x61,0x3f,0x82,0xe0,0x8,
+0xcf,0x80,0xe0,0x61,0x3f,0x92,0x0, 0xc9,0xe8,0x12,0x57,0xb8,0x16,0x81,0x97,0x4f,
+0xe0,0xf, 0x16,0x77,0xe7,0xb, 0xcf,0x1d,0xb7,0x4f,0x97,0x4f,0xe7,0x20,0xcf,0x3c,
+0xb7,0x4f,0x97,0xf, 0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0xe0,0x61,0x3f,0x82,0xe7,0xdf,
+0x17,0x7f,0x3f,0xde,0xe0,0x61,0x3f,0x92,0x38,0x82,0xe8,0x12,0x57,0xb8,0x16,0x81,
+0x97,0xf, 0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0x38,0x82,0xe8,0x12,0x57,0xbb,0x17,0x1,
+0x96,0xaf,0x15,0x82,0xe7,0x3, 0xce,0x9e,0xb6,0xaf,0x16,0x80,0xe8,0x12,0x57,0xb9,
+0x96,0x6f,0xe7,0x4, 0xce,0x1d,0xb6,0x6f,0xe0,0x1, 0xb6,0x8f,0x96,0x4f,0xe7,0x0,
+0xce,0x2b,0xb6,0x4f,0xe0,0x2, 0x16,0x0, 0xb6,0xf, 0x96,0x6f,0xe7,0x5, 0xce,0x1d,
+0xb6,0x6f,0x96,0xef,0xe7,0x4, 0xce,0x9e,0xb6,0xef,0x96,0xef,0xe7,0x0, 0xce,0x9e,
+0xb6,0xef,0xe0,0x61,0x3f,0x82,0xe0,0x40,0xcf,0x80,0xe0,0x61,0x3f,0x92,0x38,0x82,
+0xe8,0x12,0x57,0xba,0x16,0x1, 0x97,0xf, 0xe7,0x9, 0xcf,0x1c,0xb7,0xf, 0x17,0x0,
+0x96,0x8f,0xe7,0x9, 0xce,0x9e,0xb6,0x8f,0x96,0x8f,0xe7,0xa, 0xce,0x9c,0xb6,0x8f,
+0x96,0x8f,0xe7,0xa, 0xce,0x9e,0xb6,0x8f,0x16,0x82,0xe8,0x12,0x57,0xaf,0xb6,0x8f,
+0x16,0x8e,0xb6,0xaf,0xe0,0x36,0x16,0xa8,0xb6,0xcf,0xe0,0x3, 0x16,0x88,0xb6,0xef,
+0xe0,0x9, 0x16,0x93,0xe0,0x1, 0xb6,0x8f,0xe0,0x1, 0xb7,0x2f,0xe0,0x1, 0xb7,0x4f,
+0x38,0x82,0xe8,0x12,0x57,0xba,0x17,0x0, 0x96,0x8f,0x16,0x1, 0xe7,0x6, 0xce,0x9e,
+0xb6,0x8f,0x96,0x8f,0xe7,0x1, 0xce,0x9c,0xb6,0x8f,0x96,0x8f,0xe7,0x0, 0xce,0x9c,
+0xb6,0x8f,0xe0,0x3, 0xb7,0x4f,0x38,0x82,0xe8,0x12,0x57,0xb0,0x17,0x0, 0xe0,0x7,
+0xb7,0xf, 0xe0,0x6, 0x97,0x4f,0xe6,0xaf,0xcf,0x7e,0x27,0xf, 0xe0,0x7, 0x97,0xf,
+0x16,0x81,0xe7,0x1, 0xcf,0x1d,0xe0,0x7, 0xb7,0xf, 0xe0,0x7, 0x97,0xf, 0xe7,0x4,
+0xcf,0x1d,0xe0,0x7, 0xb7,0xf, 0x38,0x82,0xe0,0x6, 0x96,0xcf,0xe0,0x7, 0x96,0x8f,
+0x17,0x1, 0xe7,0x0, 0xce,0x9e,0xe0,0x7, 0xb6,0x8f,0xe0,0x7, 0x96,0x8f,0xe7,0x3,
+0xce,0x9e,0xe0,0x7, 0xb6,0x8f,0x0, 0xf0,0x8, 0xb1,0xe8,0x12,0x57,0xba,0x17,0x0,
+0xb7,0x2f,0x17,0xb0,0xe8,0x12,0x77,0xda,0xdf,0xd0,0xe0,0x61,0x3f,0x82,0x17,0x7b,
+0x3f,0xde,0xe0,0x61,0x3f,0x92,0xe0,0x61,0x3f,0x82,0xcf,0x81,0xe0,0x61,0x3f,0x92,
+0x8, 0xe1,0x8, 0xb2,0x39,0x68,0xdf,0xc1,0xe8,0x12,0x57,0x5a,0xe8,0x12,0x57,0xbb,
+0x16,0x81,0xe0,0x1, 0xb7,0x4f,0xe0,0x1, 0x97,0x4f,0xe0,0x8, 0x3f,0x42,0xe0,0x1,
+0xb4,0x4f,0xe8,0x12,0x57,0xba,0xe0,0x1, 0x97,0x2f,0xe7,0x5, 0xcf,0x1d,0xe0,0x1,
+0xb7,0x2f,0x16,0x80,0xe0,0x1, 0x97,0x2f,0xe7,0x5, 0xcf,0x1d,0xe0,0x1, 0xb7,0x2f,
+0x9, 0x61,0xe8,0x25,0x4f,0xc7,0xe2,0x1, 0xcf,0x81,0xe0,0x0, 0x1, 0xf1,0x8, 0xb2,
+0x3f,0xe9,0xe2,0x1, 0xc7,0x80,0x39,0x68,0x27,0x88,0xe8,0x12,0x57,0xb4,0x16,0x81,
+0x97,0x4f,0xe7,0x2, 0xcf,0x1d,0xb7,0x4f,0x21,0x2c,0xe2,0x0, 0xc9,0x1, 0x3c,0x69,
+0x1, 0xb7,0x3f,0x83,0xe8,0x12,0x57,0x34,0x97,0x8e,0xcf,0xa0,0xb7,0x8e,0xdf,0xc2,
+0xe8,0x12,0x57,0xbb,0x16,0x80,0x97,0x6f,0xe7,0x0, 0xcf,0x12,0xb7,0x6f,0x97,0xf,
+0xe7,0x7, 0xcf,0x1d,0xb7,0xf, 0x97,0x6f,0xe7,0x0, 0xcf,0x12,0xb7,0x6f,0x97,0xf,
+0xe7,0x6, 0xcf,0x12,0xb7,0xf, 0x3b,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0xe8,0x12,0x57,0x34,0x16,0xdf,0x97,0x8e,0x3f,0xdd,0xb7,0x8e,
+0xe8,0x12,0x57,0xb4,0x97,0x4f,0xe6,0xad,0xcf,0x7e,0x27,0x6, 0x97,0x4f,0x16,0x80,
+0xe7,0x2, 0xcf,0x1d,0xb7,0x4f,0x17,0x80,0xe8,0x25,0x6f,0xc7,0x9, 0x61,0xe2,0x0,
+0xc9,0x2, 0x1, 0xef,0x3f,0x83,0xdf,0x8e,0xef,0xff,0xd3,0xcb,0xe8,0x12,0x57,0xbb,
+0x2c,0x1a,0x96,0xef,0x17,0x1, 0xe7,0x0, 0xce,0x9e,0xb6,0xef,0x96,0x8f,0xe7,0x7,
+0xce,0x9e,0xb6,0x8f,0x96,0xef,0xe7,0x0, 0xce,0x9e,0xb6,0xef,0x96,0x8f,0xe7,0x6,
+0xce,0x9e,0xb6,0x8f,0x3b,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0xcf,0x17,0x0, 0xe0,0x1, 0xb7,0x4f,0x0, 0xf5,0x17,0x80,0xe8,0x25,
+0x6f,0xc7,0x38,0x82,0xe0,0x61,0x3f,0x2, 0xe0,0x61,0x3f,0x82,0xe7,0xef,0x16,0xff,
+0x3f,0xdd,0xe0,0x61,0x3f,0x92,0xe8,0x12,0x57,0xb0,0xe7,0x0, 0x16,0x78,0xe0,0x4,
+0x96,0xcf,0xb6,0x88,0xe0,0x4, 0x96,0xef,0xb6,0x89,0xe0,0x4, 0x96,0xcf,0x3e,0xdc,
+0xe0,0x4, 0xb6,0xcf,0xe7,0xff,0x16,0x7, 0xe0,0x4, 0x96,0xef,0x3e,0xdc,0xe0,0x4,
+0xb6,0xef,0xe0,0x61,0x3f,0x12,0x38,0x82,0xe0,0x61,0x3f,0x82,0xe0,0x61,0x3f,0x2,
+0xe7,0xef,0x16,0xff,0x3f,0x5d,0xe0,0x61,0x3f,0x12,0xe8,0x12,0x57,0x30,0xe0,0x4,
+0xb4,0x4e,0xe0,0x4, 0xb4,0xee,0xe0,0x61,0x3f,0x92,0x38,0x82,0x8, 0xb2,0xe8,0x12,
+0x57,0xbb,0x11,0x1, 0x97,0x2f,0xe7,0x8, 0xcf,0x12,0xb7,0x2f,0x97,0x2f,0xe7,0x9,
+0xcf,0x12,0xb7,0x2f,0x97,0x2f,0xe7,0xc, 0xcf,0x12,0xb7,0x2f,0x97,0x2f,0xe7,0xe,
+0xcf,0x12,0xb7,0x2f,0xe0,0x4, 0xde,0xa7,0x3c,0x62,0x9, 0x21,0xe7,0xfc,0x0, 0x92,
+0x8, 0xb1,0xe8,0x12,0x57,0xba,0x17,0x0, 0xe0,0x1, 0x96,0xaf,0xe7,0x7, 0xce,0x9e,
+0xe0,0x1, 0xb6,0xaf,0x16,0x81,0xe0,0x1, 0x96,0x2f,0xe7,0x2, 0xce,0x1d,0xe0,0x1,
+0xb6,0x2f,0xe0,0x1, 0x96,0x2f,0xe7,0x2, 0xce,0x1e,0xe0,0x1, 0xb6,0x2f,0x16,0x7f,
+0xe8,0x12,0x57,0xb0,0xb7,0xf, 0xe0,0x2, 0xb7,0xf, 0xe0,0x2, 0xb6,0x2f,0xe0,0x2,
+0xb6,0x4f,0xb6,0xaf,0xb6,0xcf,0xb6,0xef,0xe0,0x1, 0xb6,0x8f,0xe0,0x1, 0xb6,0xaf,
+0xe0,0x1, 0xb6,0xcf,0xe0,0x1, 0x16,0xa5,0xe0,0x2, 0xb7,0x6f,0xe0,0x3, 0xb6,0x8f,
+0xe0,0x2, 0x16,0xca,0xe0,0x3, 0xb6,0xaf,0xe7,0xc0,0x16,0x8f,0xe0,0x4, 0xb6,0xf,
+0xe0,0x4, 0xb6,0x2f,0xe0,0x5, 0xb6,0x4f,0xe0,0x5, 0xb6,0x6f,0xe0,0x7, 0xb7,0xf,
+0xe0,0x4, 0xb6,0xcf,0x16,0x84,0xe0,0x4, 0xb6,0xef,0xe0,0x4, 0x96,0xcf,0xe0,0x6,
+0xb6,0x8f,0xe0,0x4, 0x96,0xef,0xe0,0x6, 0xb6,0xaf,0xe8,0xb, 0x4f,0xe7,0xe8,0x24,
+0x77,0x61,0xe8,0x49,0x6f,0xc4,0xe8,0xb, 0x4f,0xe8,0xe8,0x24,0x77,0x64,0xe8,0x49,
+0x6f,0xca,0xef,0xfe,0xde,0x46,0xe0,0x4, 0xd9,0x85,0xe0,0x61,0x3f,0x82,0xe0,0x10,
+0xcf,0x80,0xe0,0x61,0x3f,0x92,0x8, 0xe1,0x8, 0xb5,0xc0,0x7e,0xe0,0x4, 0x15,0x80,
+0xe8,0x24,0x75,0xe6,0x16,0x81,0xe8,0x24,0x57,0xe6,0xe7,0x2d,0x14,0x8, 0xe7,0x7,
+0xcf,0x9d,0xe8,0x24,0x77,0xe6,0xe0,0x5, 0x15,0x1c,0xe8,0x24,0x57,0xe6,0xe0,0x20,
+0x16,0x32,0xe7,0x5, 0xcf,0x9d,0xe8,0x24,0x77,0xe6,0x17,0x80,0xe8,0x24,0x74,0x67,
+0x17,0x3c,0xe8,0x24,0x75,0x68,0xe0,0x3, 0x14,0x24,0xe8,0x24,0x76,0x69,0xe0,0x1,
+0x15,0x40,0xe8,0x24,0x77,0xea,0x16,0x30,0xe8,0x24,0x77,0xeb,0xe0,0x0, 0x14,0xc0,
+0xe8,0x24,0x77,0xec,0xe8,0x24,0x77,0x6d,0xe0,0x2, 0x17,0x44,0xe8,0x24,0x74,0x6e,
+0xe0,0x0, 0x14,0x48,0xe8,0x24,0x75,0x6f,0xe0,0x4, 0x15,0x22,0xe8,0x24,0x76,0x70,
+0xe0,0x2b,0x16,0x6, 0xe8,0x24,0x77,0xf1,0xe8,0x24,0x77,0xf2,0xe8,0x24,0x77,0x73,
+0x17,0x12,0xe8,0x24,0x74,0x74,0x14,0x8, 0xe8,0x24,0x77,0xf6,0xe8,0x24,0x77,0xf7,
+0xe8,0x24,0x77,0xf8,0xe8,0x24,0x76,0xf9,0xe8,0x24,0x77,0xfa,0xe8,0x24,0x77,0xfb,
+0xe8,0x24,0x74,0xfc,0xe8,0x24,0x75,0x7d,0xe8,0x24,0x76,0x7e,0x16,0x4, 0xe8,0x24,
+0x76,0x7f,0xe8,0x25,0x77,0x0, 0xe8,0x25,0x77,0x1, 0xe8,0x25,0x77,0x2, 0x17,0x2,
+0xe8,0x25,0x77,0x3, 0xe8,0x25,0x77,0x4, 0xe8,0x25,0x76,0x5, 0xe0,0x10,0x16,0x0,
+0xe8,0x25,0x77,0x6, 0xe8,0x25,0x77,0x7, 0xe8,0x25,0x77,0x8, 0xe8,0x25,0x77,0x9,
+0xe8,0x25,0x77,0x8a,0xe8,0x25,0x77,0x8b,0xe8,0x25,0x76,0xc, 0xe8,0x25,0x74,0xd,
+0xe0,0x11,0x14,0x23,0xe8,0x25,0x74,0x8e,0xe8,0x25,0x75,0xf, 0xe7,0x21,0x15,0x7,
+0xe8,0x25,0x77,0x10,0xe8,0x25,0x77,0x91,0xe8,0x25,0x77,0x92,0xe8,0x25,0x77,0x93,
+0xe8,0x25,0x77,0x94,0xe8,0x25,0x77,0x95,0xe8,0x25,0x77,0x16,0xe8,0x25,0x77,0x17,
+0xe8,0x25,0x77,0x18,0xe8,0x25,0x77,0x19,0xe8,0x25,0x77,0x1a,0xe8,0x25,0x77,0x9b,
+0xe8,0x25,0x77,0x9c,0xe8,0x25,0x77,0x9d,0xe8,0x25,0x76,0x1e,0xe8,0x25,0x76,0x1f,
+0xe0,0x1f,0x16,0x7f,0xe8,0x25,0x75,0x20,0xe0,0x11,0x15,0x2f,0xe8,0x25,0x77,0x21,
+0xe8,0x25,0x76,0x22,0xe8,0x25,0x76,0x23,0xe8,0x25,0x74,0x24,0xe0,0xa0,0x14,0x0,
+0xe8,0x25,0x75,0x25,0xe7,0xfd,0x15,0x7e,0xe8,0x25,0x76,0x26,0xe0,0x8, 0x16,0x0,
+0xe8,0x25,0x77,0xa7,0xe8,0x25,0x77,0xa8,0xe8,0x25,0x76,0x29,0xe8,0x25,0x76,0x2a,
+0xe8,0x25,0x77,0xb5,0xe8,0x25,0x74,0x36,0xe0,0xfc,0x14,0x7e,0xe8,0x25,0x77,0xb7,
+0xe8,0x25,0x76,0x38,0xe0,0xfe,0x16,0x7f,0xe8,0x25,0x75,0x2b,0xe0,0xfe,0x15,0x7e,
+0xe8,0x25,0x76,0x2c,0xe0,0x2, 0x16,0x0, 0xe8,0x25,0x74,0x39,0xe0,0x6e,0x14,0x45,
+0xe8,0x25,0x75,0x3a,0xe0,0x3, 0x15,0x45,0xe8,0x25,0x75,0xad,0xe8,0x25,0x76,0x2e,
+0xe8,0x25,0x74,0x2f,0xe8,0x25,0x75,0x30,0xe8,0x25,0x77,0xb1,0xe8,0x25,0x4f,0xac,
+0x3f,0xfd,0xe8,0x25,0x57,0xaf,0xe0,0x0, 0x1, 0xd5,0xe7,0xd, 0xcf,0xae,0xe8,0x25,
+0x77,0xaf,0xe8,0x25,0x57,0xb0,0xe7,0x2, 0xcf,0xae,0xe8,0x25,0x77,0xb0,0xe8,0x25,
+0x57,0xb0,0xe7,0x0, 0xcf,0xae,0xe8,0x25,0x77,0xb0,0x17,0x82,0xe8,0x25,0x77,0xb2,
+0xe0,0x1, 0x15,0x2a,0xe8,0x25,0x77,0xb3,0xe0,0x49,0x14,0xcc,0xe0,0x4c,0x14,0x18,
+0xe8,0x25,0x77,0xb4,0xe0,0x5, 0xd4,0x89,0xe0,0x0, 0x15,0x55,0xe0,0x49,0x14,0xcc,
+0x14,0x0, 0xe0,0x4, 0xd9,0xc2,0xe8,0x24,0x57,0xf3,0xe8,0x30,0x57,0x49,0xe8,0x12,
+0x54,0x33,0xe7,0x20,0xcf,0x9e,0xe8,0x24,0x77,0xf3,0x14,0x8d,0xe8,0x26,0x57,0x99,
+0xe8,0x30,0x57,0x4a,0xe7,0x2d,0x11,0x88,0xe7,0x20,0xcf,0x9e,0xe8,0x26,0x77,0x99,
+0xe0,0x5, 0x12,0x1c,0xe8,0x24,0x55,0x73,0xe0,0x4, 0xd9,0x10,0xe8,0x26,0x55,0x19,
+0xe8,0x12,0x54,0x32,0x14,0x8d,0xe0,0x4, 0xd9,0x9, 0x14,0x0, 0xef,0xfe,0xd9,0xdf,
+0x16,0x0, 0x76,0x1, 0x57,0x81,0xe2,0x0, 0xcf,0x83,0x5, 0x93,0xc0,0x2, 0xa, 0xe1,
+0xe7,0xd, 0xcf,0xad,0xe8,0x25,0x77,0xaf,0xe8,0x25,0x57,0xb0,0xe7,0x2, 0xcf,0xad,
+0xe8,0x25,0x77,0xb0,0xe8,0x25,0x57,0xb0,0xe7,0x0, 0xcf,0xad,0xe7,0xff,0x0, 0xad,
+0x57,0x81,0xe0,0x4a,0x11,0x78,0xe4,0x0, 0xc7,0x94,0xe0,0x20,0x17,0x32,0x3f,0x92,
+0xb1,0x8f,0x14,0x3c,0x57,0x81,0xe0,0x3, 0x15,0x24,0xe4,0x0, 0xc7,0x94,0xe0,0x1,
+0x16,0x40,0x3f,0x92,0xb2,0x1f,0x15,0x8a,0x57,0x81,0xe0,0x4b,0x12,0xc8,0xe4,0x0,
+0xc7,0x94,0x3f,0x92,0xb7,0x2f,0x17,0x0, 0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x92,
+0xb7,0x3f,0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xb7,0x4f,0x57,0x81,0xe4,0x0,
+0xc7,0x94,0x3f,0x92,0xb7,0x5f,0x17,0x30,0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x92,
+0xb4,0x6f,0x57,0x81,0xe8,0x12,0x54,0x33,0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xb5,0x7f,
+0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x92,0xe0,0x1, 0xb6,0xf, 0x57,0x81,0xe4,0x0,
+0xc7,0x94,0x3f,0x92,0xe0,0x1, 0xb7,0x1f,0x54,0x81,0x55,0x1, 0xe4,0x1, 0xc4,0xcb,
+0xe4,0x0, 0xc5,0x14,0xe0,0x2, 0xc4,0x80,0x3d,0x12,0xe0,0x4, 0xd8,0xf7,0x54,0x1,
+0x54,0x81,0xe4,0x0, 0xc4,0x14,0xe4,0x0, 0xc4,0x94,0x15,0x14,0x3c,0x92,0x3c,0x15,
+0xe0,0x5, 0xd3,0xeb,0x57,0x81,0xe0,0x21,0x14,0x1c,0xe4,0x0, 0xc7,0x94,0x15,0x8a,
+0x3f,0x95,0xb1,0x8f,0x57,0x81,0xe4,0x0, 0xc7,0x94,0x3f,0x95,0xb4,0x1f,0x54,0x81,
+0x55,0x1, 0xe4,0x1, 0xc4,0xcb,0xe4,0x0, 0xc5,0x14,0xe8,0x12,0x54,0x32,0x3d,0x15,
+0xe0,0x2, 0xc4,0x80,0xe0,0x4, 0xd8,0xd2,0x57,0x81,0xc7,0x81,0x77,0x81,0xe7,0xfe,
+0x0, 0xf3,0xc4,0x7f,0xe3,0xff,0xcc,0x7f,0x1, 0x8d,0x38,0x82,0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc7,0xff,0xe2,0x1, 0xc7,0xff,0x2f,0xf7,
+0x0, 0xf1,0x17,0x85,0x0, 0xfa,0x8, 0xb4,0xc0,0x7c,0x39,0xe8,0x3c,0xe0,0x3c,0x60,
+0xc4,0x84,0xc4,0x2, 0xdd,0x68,0xe8,0x12,0x57,0xaf,0x11,0x1, 0x97,0xf, 0x12,0x0,
+0xe7,0x0, 0xcf,0x12,0xb7,0xf, 0x97,0x2f,0xe7,0x0, 0xcf,0x34,0xb7,0x2f,0x97,0xf,
+0xe0,0x0, 0x21,0xce,0xe7,0x1, 0xcf,0x12,0xb7,0xf, 0xe0,0xa, 0x14,0x28,0xdf,0xd2,
+0xe8,0x12,0x57,0xaf,0xe0,0x0, 0x14,0x63,0x97,0xf, 0xe7,0x2, 0xcf,0x12,0xb7,0xf,
+0x97,0xf, 0xe7,0x5, 0xcf,0x32,0xb7,0xf, 0xdf,0xc5,0xe8,0x12,0x57,0xaf,0x16,0x87,
+0x97,0xf, 0xe0,0x0, 0x14,0x63,0xe7,0x5, 0xcf,0x3d,0xb7,0xf, 0x97,0xf, 0xe7,0x3,
+0xcf,0x12,0xb7,0xf, 0x97,0xf, 0xe7,0x4, 0xcf,0x12,0xb7,0xf, 0xdf,0xb3,0xe8,0x12,
+0x57,0xaf,0x14,0x21,0x97,0xf, 0xe7,0x8, 0xcf,0x12,0xb7,0xf, 0x97,0xf, 0xe7,0x9,
+0xcf,0x12,0xb7,0xf, 0xdf,0xa7,0xe8,0x12,0x57,0xaf,0x3c,0x64,0x97,0xf, 0xe7,0xa,
+0xcf,0x12,0xb7,0xf, 0x97,0xf, 0xe7,0xb, 0xcf,0x12,0xb7,0xf, 0xdf,0x9b,0xe8,0x12,
+0x57,0xaf,0x97,0xf, 0xe7,0xc, 0xcf,0x12,0xb7,0xf, 0x97,0xf, 0xe7,0xd, 0xcf,0x12,
+0xb7,0xf, 0x54,0x1, 0x54,0x82,0xdd,0x31,0xc0,0x4, 0xa, 0x61,0xe7,0x8, 0xcf,0x13,
+0xb7,0xf, 0x14,0x21,0x97,0xf, 0xe7,0x9, 0xcf,0x13,0xb7,0xf, 0x97,0xf, 0xe7,0xa,
+0xcf,0x13,0xb7,0xf, 0x97,0xf, 0xe7,0xb, 0xcf,0x13,0xb7,0xf, 0x97,0xf, 0xe7,0xc,
+0xcf,0x13,0xb7,0xf, 0x97,0xf, 0xe7,0xd, 0xcf,0x13,0xb7,0xf, 0xdf,0x73,0xe8,0x12,
+0x57,0xaf,0x14,0x21,0x97,0xf, 0xe7,0x5, 0xcf,0x32,0xb7,0xf, 0x97,0xf, 0xe7,0x3,
+0xcf,0x13,0xb7,0xf, 0xdf,0x67,0xe8,0x12,0x57,0xaf,0x14,0x21,0x97,0xf, 0xe7,0x2,
+0xcf,0x13,0xb7,0xf, 0x97,0xf, 0xe7,0x5, 0xcf,0x33,0xb7,0xf, 0x97,0xf, 0xe7,0x4,
+0xcf,0x13,0xb7,0xf, 0xdf,0x57,0xe8,0x12,0x57,0xaf,0x97,0xf, 0xe7,0x1, 0xcf,0x13,
+0x0, 0xc0,0x8, 0xb3,0xe8,0x12,0x57,0xba,0x11,0x80,0xe0,0x5, 0xb1,0xcf,0x11,0x1,
+0xe0,0x5, 0x97,0x4f,0x14,0x85,0xe7,0xd, 0xcf,0x12,0xe0,0x5, 0xb7,0x4f,0xe0,0x1,
+0x14,0x7, 0xef,0xfd,0xde,0xa5,0x14,0x85,0xe0,0x1, 0x14,0x6, 0xef,0xfd,0xde,0xa0,
+0x14,0x85,0xe0,0x1, 0x14,0x8, 0xef,0xfd,0xde,0x9b,0x3c,0xe3,0x3c,0x62,0x9, 0xa1,
+0xe7,0xfe,0x0, 0xc3,0x14,0x80,0xe7,0xfe,0x0, 0xc0,0x8, 0xb2,0xe0,0x61,0x39,0x2,
+0xe0,0x61,0x3f,0x82,0xe7,0xef,0x17,0x7f,0x3f,0xde,0xe0,0x61,0x3f,0x92,0x17,0x80,
+0xe8,0x46,0x6f,0xe7,0xe0,0x4, 0xd7,0x59,0x2c,0x7, 0xe8,0x31,0x4f,0xfc,0x2f,0x84,
+0xe8,0x31,0x4f,0xfd,0x27,0x8b,0x17,0x80,0xe8,0x25,0x6f,0xa6,0x14,0x80,0xe8,0x31,
+0x6f,0xfc,0x14,0x1, 0xe8,0x31,0x6f,0xfd,0xdf,0x1f,0xe8,0x25,0x4f,0x9a,0x2f,0x83,
+0xef,0xfe,0xdd,0xef,0xe0,0x61,0x39,0x12,0x9, 0x61,0xe8,0x24,0x57,0xe1,0x17,0x1,
+0xe7,0x0, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x97,0xcf,
+0xe6,0xaf,0xcf,0xff,0x27,0x87,0x8, 0xb1,0xdf,0xc9,0x17,0x80,0xe8,0x25,0x6f,0xa6,
+0x8, 0xe1,0x17,0x80,0xe8,0x25,0x6f,0xa6,0x38,0x82,0xe8,0x24,0x57,0xe1,0x17,0x1,
+0xe7,0x0, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x97,0xcf,
+0xe6,0xaf,0xcf,0xff,0x2f,0x83,0xe7,0xff,0x0, 0xb2,0x38,0x82,0x8, 0xb1,0xc0,0x7c,
+0x3c,0xe0,0x3c,0x60,0xc4,0x84,0xc4,0x2, 0xdc,0x56,0xe8,0x31,0x4f,0xfd,0xe2,0x0,
+0xcf,0x81,0x1, 0x3, 0x14,0x0, 0xde,0xce,0x54,0x1, 0x54,0x82,0xdc,0x6e,0xc0,0x4,
+0x8, 0xe1,0x8, 0xb4,0xe0,0x1, 0x11,0x7a,0x39,0xe8,0xe0,0x0, 0x12,0x50,0xc1,0xff,
+0xe3,0xff,0xc9,0xff,0x1, 0xc, 0x3c,0x62,0xde,0xbd,0x3c,0x62,0xde,0xbb,0x3c,0x62,
+0xde,0xb9,0x3c,0x62,0xde,0xb7,0x3c,0x64,0xde,0xb5,0x0, 0xf2,0xa, 0x61,0x17,0x80,
+0xe8,0x25,0x6f,0xb6,0x17,0x80,0xe8,0x24,0x77,0xe3,0x38,0x82,0xe8,0x25,0x4f,0xb6,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x1, 0xcf,0xc8,0x2, 0x84,0xe8,0x25,0x6f,0xb6,
+0x38,0x82,0x17,0xc8,0x0, 0xfc,0xe8,0x25,0x4f,0xc1,0xe8,0x24,0x4c,0x53,0x2f,0x86,
+0xe8,0x25,0x4f,0xb6,0xe1,0x28,0x3f,0x98,0x38,0x82,0xe8,0xff,0x4f,0xf3,0xe2,0x0,
+0xcf,0x83,0x1, 0x8d,0xe8,0x25,0x4f,0xc1,0xe2,0x0, 0xcf,0x81,0x1, 0xf2,0xe8,0x49,
+0x4f,0xca,0xc7,0x81,0x3c,0x3f,0xe2,0x1, 0xc4,0x7f,0x0, 0xeb,0x14,0x1, 0x0, 0xed,
+0x16,0x0, 0x15,0x81,0xe0,0x0, 0x0, 0xe3,0x8, 0xb2,0xc0,0x70,0x11,0x10,0x3c,0x60,
+0x3d,0x62,0xe0,0x23,0x14,0xae,0xc4,0x2, 0xe0,0x5, 0xd2,0x3f,0x3c,0xe0,0x3d,0x62,
+0xc4,0x82,0x14,0x0, 0xdf,0xee,0xc0,0x10,0x9, 0x61,0x8, 0xb1,0xc0,0x7e,0xe8,0x12,
+0x57,0xba,0x15,0x2, 0xe0,0x0, 0x17,0x6b,0x3c,0xea,0xb7,0x6f,0x3c,0x90,0x17,0x80,
+0xe0,0x2, 0x14,0x4, 0x77,0x81,0xdf,0xdd,0x15,0x2, 0x3c,0xea,0x3c,0x90,0xe0,0x2,
+0x14,0x8, 0xdf,0xd7,0xe8,0x12,0x57,0xba,0xe0,0x1, 0x17,0x7f,0xe0,0x1, 0xb7,0xf,
+0xc0,0x2, 0x8, 0xe1,0x0, 0xe3,0xe8,0x12,0x74,0x5c,0x38,0x82,0xe8,0x25,0x4f,0xc1,
+0x2f,0x99,0x8, 0xb1,0xe8,0x12,0x57,0xdc,0x2f,0xfe,0xef,0xff,0xd7,0x4f,0xe8,0x24,
+0x4f,0xd6,0xe8,0x12,0x77,0xdc,0xe8,0xf4,0x4f,0x34,0xe8,0x12,0x57,0xaa,0x3f,0xbe,
+0xe8,0x12,0x57,0x5c,0xc7,0xbf,0x37,0xc6,0x3f,0x7f,0x5, 0x83,0xe8,0x12,0x77,0xdc,
+0x8, 0xe1,0x38,0x82,0xe0,0x25,0x14,0x1c,0x14,0x80,0xe1,0x3, 0x15,0xc, 0x3d,0x28,
+0xe0,0x5, 0xd2,0x3f,0xe0,0x0, 0x14,0x0, 0x24,0x2, 0x3c,0x1, 0x14,0x0, 0x14,0x80,
+0xef,0xfe,0xd7,0x59,0x3a,0x80,0x0, 0x0, 0x3a,0x80,0x25,0x1c,0xe0,0x64,0x3f,0x80,
+0x17,0x7b,0x3f,0xde,0x26,0x2, 0x16,0x4, 0x25,0x82,0x15,0x84,0x3f,0x3, 0xc4,0xff,
+0xc4,0x7f,0x3e,0x4f,0x3d,0xcf,0xe0,0x64,0x3e,0x10,0xc4,0x81,0x86,0x89,0xe0,0x64,
+0x3d,0x90,0xc4,0x1, 0xae,0x88,0xc5,0x7f,0x2d,0x77,0xe0,0x64,0x3f,0x90,0x0, 0x0,
+0x3f,0x4, 0x38,0x82,0x17,0x80,0xe2,0x0, 0xcc,0x4, 0x2, 0x83,0x3c,0x6f,0x38,0x82,
+0xc4,0x1, 0xc7,0x81,0x34,0x41,0xe2,0x1, 0xc7,0xff,0x0, 0xf6,0x8, 0xb3,0x3f,0x68,
+0xe4,0x0, 0xc7,0x7, 0xe0,0x4d,0x17,0xca,0xe0,0xd, 0x3f,0x9e,0x8e,0x5d,0x39,0xe8,
+0xe2,0x0, 0xce,0x3, 0x1, 0x3, 0x16,0x1, 0xae,0x2d,0x3f,0x9e,0x89,0x6f,0x8f,0xaf,
+0x31,0xa1,0x39,0x3f,0xe2,0x1, 0xc1,0x7f,0x3c,0x62,0xdf,0xdd,0xe0,0x4d,0x17,0xc4,
+0x3f,0x93,0xac,0xf, 0xa9,0x1f,0x9, 0xe1,0x8, 0xb2,0x3f,0x68,0xe4,0x0, 0xc7,0x7,
+0xe0,0x4d,0x17,0xca,0x3f,0x9e,0x89,0x4f,0x34,0x21,0xe0,0x4d,0x17,0xc4,0x3c,0x1f,
+0x8c,0x88,0x3c,0x62,0xe0,0x4, 0xd4,0x22,0x14,0x0, 0xef,0xfe,0xd7,0x10,0x3f,0x62,
+0xe4,0x0, 0xc7,0x14,0x3c,0x62,0xe0,0x4a,0x17,0xf8,0x3f,0x9e,0xe4,0x1, 0xc4,0x4b,
+0x94,0xef,0xe0,0x2, 0xc4,0x6, 0x9, 0x21,0xe0,0x8d,0x0, 0xb0,0x8, 0xb1,0xdb,0xe5,
+0x8, 0xa1,0xe0,0x8c,0x0, 0x89,0x8, 0xb2,0xe0,0x4d,0x11,0x4a,0xef,0xfe,0xd7,0x8c,
+0x8c,0x42,0x14,0x80,0xef,0xfe,0xd8,0x9, 0xe0,0x1, 0x8c,0x32,0x14,0x81,0xef,0xfe,
+0xd8,0x4, 0xe0,0x2, 0x8c,0x22,0x14,0x82,0xef,0xfe,0xd7,0xff,0xe8,0x25,0x4f,0xc3,
+0xe8,0x25,0x4c,0xc3,0xe4,0x0, 0xc7,0x87,0x39,0x1f,0x8c,0x42,0x9, 0x21,0xe7,0xcf,
+0x0, 0xf4,0x8, 0xb1,0xdf,0xdc,0xef,0xfe,0xd7,0xd8,0x8, 0xa1,0x0, 0xdd,0x8, 0xb1,
+0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x97,0x4f,0xe6,0xaf,0xcf,0x7e,0x27,0x1f,0x14,0x1,
+0xef,0xff,0xd2,0xcb,0x17,0x81,0xe8,0x25,0x6f,0xc1,0x14,0x81,0xe8,0x25,0x6f,0xc3,
+0xe8,0x12,0x57,0xb0,0xe0,0x1, 0x97,0xef,0xe6,0xa9,0xcf,0xaf,0xe8,0x25,0x6f,0xbc,
+0x3c,0x69,0xef,0xfe,0xd7,0xd2,0x17,0x81,0xe8,0x24,0x6f,0xd2,0xef,0xfe,0xd9,0x8d,
+0xe8,0x25,0x4c,0x41,0x8, 0xa1,0xe7,0xd5,0x0, 0xfb,0xe0,0x6, 0x97,0x4f,0xe0,0x6,
+0x97,0xcf,0xe6,0xaf,0xcf,0xff,0x2f,0x89,0xe8,0xf4,0x4f,0xd8,0x2f,0x86,0xe8,0x25,
+0x4f,0xac,0xe2,0x0, 0xcf,0x81,0x1, 0x86,0x14,0xa, 0xde,0x8c,0x14,0x0, 0xef,0xff,
+0xd2,0x9c,0x17,0x80,0xe8,0x25,0x6f,0xc1,0x14,0x80,0xe8,0x25,0x6f,0xc3,0xe8,0x25,
+0x6f,0xbc,0xe8,0xf4,0x6f,0xad,0xe8,0x49,0x6f,0x8e,0x0, 0xd3,0x17,0x80,0xe2,0x1,
+0xc4,0x7d,0xe1,0x28,0x3c,0xf, 0x38,0x82,0xe8,0x24,0x57,0xe1,0xe6,0xaf,0xcf,0xff,
+0x2f,0x8b,0xe8,0x24,0x57,0xe1,0xe6,0xae,0xcf,0xff,0x2f,0x86,0xe8,0x24,0x54,0x61,
+0xe6,0xa2,0xcc,0x78,0x38,0x82,0x14,0x1, 0x0, 0xfe,0x8, 0xb1,0xc0,0x7c,0xef,0xff,
+0xd2,0x37,0x3c,0xe0,0x3c,0x60,0xc4,0x84,0xc4,0x2, 0xda,0xa5,0xe8,0x24,0x57,0xe1,
+0xe6,0xae,0xcf,0xff,0x27,0x88,0xe8,0x24,0x57,0xe1,0x17,0x0, 0xe7,0x1, 0xcf,0x9e,
+0xe8,0x24,0x77,0xe1,0xe8,0x24,0x57,0xe1,0xe6,0xaf,0xcf,0xff,0x2f,0x86,0xe8,0x24,
+0x57,0xe1,0xe6,0xa2,0xcf,0xff,0x27,0xa8,0x14,0x1, 0xef,0xfe,0xdb,0x76,0xe8,0x24,
+0x57,0xe1,0x17,0x0, 0xe7,0x0, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,0xe8,0x24,0x57,0xe1,
+0xe7,0xd, 0xcf,0x9e,0xe8,0x24,0x77,0xe1,0xdf,0x73,0xef,0xfe,0xd1,0x86,0x14,0x1,
+0xe0,0x1, 0xda,0x95,0xe8,0x12,0x57,0xb0,0xe0,0x6, 0x97,0xcf,0xe6,0xaf,0xcf,0xff,
+0x2f,0xa2,0xe8,0xf4,0x4f,0xd8,0x2f,0x9f,0x17,0x3, 0xe8,0xf4,0x6f,0x2d,0xe8,0x61,
+0x6f,0xa7,0xe8,0x61,0x6f,0xa8,0x54,0x1, 0x54,0x82,0xda,0x87,0xe8,0x25,0x4f,0x43,
+0xe8,0x61,0x4f,0xa8,0x37,0xde,0xe6,0xaf,0xcf,0xff,0x2f,0x89,0xe8,0x25,0x4f,0x43,
+0xe8,0x61,0x4f,0xa7,0x37,0xde,0xe6,0xaf,0xcf,0xff,0x27,0x83,0xef,0xff,0xd6,0x24,
+0xc0,0x4, 0x8, 0xe1,0x17,0x87,0x0, 0xe4,0xe8,0xe8,0x4f,0x25,0xe8,0x61,0x4e,0xb8,
+0xe2,0x0, 0xcf,0x4, 0x2, 0x8c,0xe0,0x25,0x17,0xc8,0x3f,0x9e,0x26,0xae,0x8f,0xf,
+0xe8,0x61,0x4e,0x35,0x3e,0x7e,0x5, 0x95,0xc7,0x1, 0xaf,0xf, 0xe2,0x0, 0xce,0x81,
+0x1, 0xa5,0xe8,0x25,0x4f,0xcd,0xe8,0x61,0x4e,0xb5,0x17,0x0, 0x3e,0xff,0xe8,0x61,
+0x6f,0x3a,0x5, 0x9c,0xe8,0x61,0x6f,0x38,0xc7,0x81,0xe8,0x25,0x6f,0xcd,0x0, 0x83,
+0x17,0x0, 0xaf,0xf, 0xe8,0x61,0x4f,0xba,0xe2,0x0, 0xcf,0x81,0x1, 0x91,0xe8,0x25,
+0x4f,0x91,0xe8,0x61,0x4f,0x34,0x3f,0x7f,0x5, 0x8b,0x17,0x0, 0xe8,0x61,0x6f,0x3a,
+0xc7,0x81,0xe8,0x25,0x6f,0x91,0x38,0x82,0xae,0x8f,0x17,0x80,0x0, 0xe7,0x17,0x81,
+0x0, 0xf9,0x8, 0xb2,0xe0,0x1, 0xd6,0x1d,0x17,0x81,0xe8,0x61,0x6f,0xba,0xe8,0x30,
+0x57,0xdb,0xe2,0x0, 0xcf,0x80,0x3, 0x4, 0x17,0x80,0xe8,0x61,0x6f,0xba,0xe8,0x56,
+0x4f,0x99,0x27,0x84,0x17,0x80,0xe8,0x61,0x6f,0xba,0xe8,0xe8,0x4f,0xa4,0x2f,0x83,
+0xe8,0x61,0x6f,0xba,0xe8,0x25,0x4c,0x43,0xdf,0x32,0x24,0xe, 0xe8,0xf4,0x4f,0xad,
+0xe2,0x0, 0xcf,0x81,0x1, 0x89,0xe8,0x25,0x4f,0xb0,0xe2,0x0, 0xcf,0xba,0x2, 0x84,
+0x17,0x80,0xe8,0x61,0x6f,0xba,0x17,0x80,0xe8,0x30,0x57,0x5b,0xe8,0x30,0x77,0xdc,
+0x3f,0xee,0xe2,0x80,0xc7,0x80,0x27,0x84,0x17,0x81,0xe8,0x61,0x6f,0xb8,0x3f,0xee,
+0xe8,0xe8,0x4e,0xa4,0xe2,0x4, 0xc7,0x80,0x26,0x82,0x2f,0x84,0x17,0x80,0xe8,0x61,
+0x6f,0xb8,0xe8,0x29,0x56,0x90,0xe8,0x29,0x56,0x6, 0x3f,0xed,0xe4,0x0, 0xc7,0x86,
+0xe2,0x0, 0xcf,0x80,0x3, 0x2, 0xc7,0x83,0x37,0x82,0x3e,0x7f,0xe0,0x0, 0x4, 0x46,
+0x3e,0x7d,0xe0,0x0, 0x4, 0x45,0xe0,0x2, 0x36,0xcf,0x39,0x1d,0x31,0x1, 0xe0,0x22,
+0x39,0x1c,0xc1,0x1, 0xe2,0x2, 0xc7,0x0, 0xe2,0x0, 0xcf,0x0, 0x17,0x84,0xe0,0x6f,
+0x39,0x22,0x39,0x6f,0xe0,0x1, 0xdb,0x2, 0xe2,0x0, 0xcc,0x0, 0x17,0x81,0xe0,0x6f,
+0x39,0x22,0x39,0x6f,0xe8,0xd, 0x4f,0x95,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0x96,
+0x3f,0xce,0x39,0x3f,0xe8,0xd, 0x4f,0x97,0xe8,0x52,0x4f,0x2, 0xe8,0x30,0x71,0x59,
+0xe8,0x61,0x6f,0xb4,0x27,0xc, 0xe8,0x30,0x57,0x5b,0xe2,0x0, 0xcf,0x0, 0x4, 0x7,
+0xe2,0x0, 0xc9,0x1, 0x5, 0x16,0x31,0x1, 0xe8,0x30,0x71,0x59,0xe8,0xf4,0x4f,0xad,
+0xe2,0x0, 0xcf,0x81,0x1, 0x87,0xe8,0x30,0x57,0xd9,0xe4,0x0, 0xc7,0x85,0xe8,0x30,
+0x77,0xd9,0x9, 0x21,0xe7,0xfe,0x0, 0xb2,0x11,0x4, 0x0, 0xc5,0x11,0x3, 0x0, 0xc3,
+0x37,0xa1,0xe8,0x61,0x6f,0xb4,0x0, 0xeb,0x8, 0xb2,0xdf,0x64,0xdd,0x55,0x2c,0xa,
+0x39,0x68,0xe0,0x4, 0xd9,0xd9,0xe8,0x29,0x71,0x1, 0xe8,0x61,0x69,0x38,0xe8,0x61,
+0x69,0x3a,0xe8,0x61,0x4f,0xb8,0x27,0x8a,0x17,0x80,0xe8,0x25,0x6f,0xcd,0x17,0x80,
+0xe8,0x12,0x77,0xe4,0x17,0x87,0xe8,0x61,0x6f,0xa8,0xe8,0x61,0x4f,0xba,0x27,0x85,
+0x14,0x0, 0x9, 0x21,0xe0,0x92,0x0, 0xbc,0x9, 0x61,0xe8,0x52,0x4f,0x98,0x27,0x97,
+0xe2,0x0, 0xcf,0x81,0xe8,0x52,0x4f,0x2, 0x1, 0x12,0xe2,0x0, 0xcf,0x2, 0x1, 0x8f,
+0x3f,0xe8,0xe4,0x0, 0xc7,0x8e,0xe0,0x4d,0x14,0x62,0x3c,0x1f,0xe0,0x10,0x8f,0xa8,
+0xe2,0x0, 0xcf,0x94,0x5, 0x84,0x17,0x84,0xaf,0x89,0xaf,0x8a,0x38,0x82,0x8, 0xb7,
+0xc0,0x7a,0xd0,0xb6,0xe8,0xe8,0x4b,0xa4,0xe8,0x56,0x4e,0xb0,0xe8,0x56,0x4f,0x31,
+0x17,0x80,0xe2,0x0, 0xcb,0x81,0xe8,0x4d,0x6f,0xdf,0x76,0x81,0x77,0x2, 0x1, 0xb2,
+0xe8,0x52,0x4f,0x82,0x3b,0x68,0xe2,0x0, 0xcf,0x8a,0x5, 0xae,0x12,0x0, 0x3b,0xe4,
+0x11,0x80,0x3a,0xe3,0x39,0x63,0xe8,0x52,0x4f,0x2, 0xe2,0x1, 0xc1,0x7f,0x39,0x7e,
+0x3, 0x9d,0xe2,0x0, 0xcb,0x81,0x1, 0xa2,0x3d,0xe2,0x3d,0x62,0x3c,0xe4,0x3c,0x64,
+0xe0,0x4, 0xdd,0x3d,0x3f,0xe3,0xe4,0x0, 0xc7,0x8e,0xe0,0x4d,0x17,0x62,0x3f,0x9e,
+0xe0,0x10,0x8f,0xaf,0xc1,0x81,0xe2,0x0, 0xc9,0x8a,0xe1,0x25,0x3f,0xe5,0xc1,0x1,
+0xe2,0x1, 0xc2,0xff,0xe2,0x1, 0xc1,0x7f,0x1, 0xde,0xe8,0x52,0x69,0x2, 0xe8,0x4d,
+0x6a,0xdf,0xc0,0x6, 0xb, 0xe1,0x12,0x6, 0x0, 0xd4,0xe0,0xf, 0x31,0xa1,0xe0,0x4d,
+0x16,0xe2,0x3f,0x9d,0x8c,0xf, 0x8c,0x9f,0xe2,0x0, 0xcf,0x5, 0x17,0x83,0x6f,0x86,
+0x6f,0x87,0x5, 0x99,0xd0,0x56,0x24,0x15,0xe2,0x0, 0xcb,0x1, 0x1, 0x8b,0x17,0x85,
+0x6f,0x86,0x6f,0x87,0x3d,0xe2,0x4c,0x87,0x4c,0x6, 0x3d,0x62,0xe0,0x4, 0xda,0xfd,
+0x0, 0xca,0xe2,0x0, 0xcb,0x2, 0x2, 0x83,0x17,0x83,0x0, 0xf3,0x17,0x82,0x0, 0xf1,
+0x17,0x81,0x0, 0xef,0x3f,0x7f,0x5, 0x87,0xd0,0x3c,0x24,0x7b,0xe2,0x0, 0xcb,0x1,
+0x1, 0xf4,0x0, 0xe6,0xe2,0x0, 0xcc,0x1, 0x5, 0x85,0x57,0x81,0xc7,0xfe,0x3c,0x7f,
+0x4, 0x3, 0x17,0x82,0x6f,0x86,0xe2,0x0, 0xcc,0x81,0x5, 0x85,0x57,0x82,0xc7,0xfe,
+0x3c,0xff,0x4, 0x3, 0x17,0x82,0x6f,0x87,0x15,0x80,0x3d,0x62,0xe0,0x4, 0xd9,0x23,
+0xe2,0x1, 0xcc,0x7f,0x1, 0x4, 0x17,0x82,0x6f,0x86,0x6f,0x87,0x3d,0x60,0x3c,0xe0,
+0xc5,0x7, 0xc4,0x86,0x3c,0x62,0xdf,0x52,0x0, 0xc6,0xe2,0x0, 0xcc,0x81,0x5, 0x8f,
+0xe8,0x56,0x4f,0xb1,0xc7,0xfe,0x3c,0xff,0x3, 0xa, 0xe2,0x0, 0xcc,0x1, 0x5, 0x87,
+0xe8,0x56,0x4f,0xb0,0xc7,0xfe,0xe0,0x28,0x3f,0x98,0x38,0x82,0x14,0x0, 0x0, 0xfe,
+0x24,0x8d,0xe8,0x56,0x4f,0xb1,0xc7,0xff,0x3c,0xff,0x1, 0x8, 0x24,0x6, 0xe8,0x56,
+0x4c,0xb0,0xc4,0xff,0xe1,0x28,0x3c,0x88,0x38,0x82,0x14,0x0, 0x0, 0xfe,0x8, 0xb4,
+0x11,0x80,0x39,0x63,0xe0,0x4d,0x12,0x62,0xe8,0x52,0x4f,0x82,0x3f,0xf2,0x2, 0x83,
+0x3c,0x63,0xa, 0x61,0x3c,0x62,0xe0,0x2, 0xd3,0x38,0x24,0xb, 0xe0,0xf, 0x31,0x21,
+0x3f,0x94,0x8c,0x9f,0x8c,0xf, 0xdf,0xca,0x24,0x4, 0xc1,0x81,0xe2,0x1, 0xc1,0xff,
+0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0x0, 0xe9,0x8f,0x88,0x3f,0xf9,0x2, 0x8b,0x8f,0xa8,
+0x3f,0xf9,0x5, 0x88,0x8f,0x98,0x3f,0xfa,0x2, 0x85,0x8c,0x38,0xe1,0x28,0x3c,0x1a,
+0x38,0x82,0x14,0x0, 0x0, 0xfe,0x8, 0xb7,0xc0,0x78,0xe0,0xe, 0x3c,0x2a,0xe2,0x1,
+0xc7,0x7f,0xe0,0xf, 0x34,0x21,0xe0,0x43,0x3e,0xe, 0xe0,0xe, 0x3f,0xae,0xe0,0xd,
+0x3c,0xaa,0xe2,0x1, 0xc7,0x7f,0x11,0x0, 0xe8,0x56,0x42,0xb0,0xe8,0x56,0x43,0x31,
+0xe8,0x72,0x50,0xf0,0xe8,0x56,0x4a,0x2f,0xe6,0xa9,0xcb,0x89,0x39,0xe2,0x3c,0x1a,
+0x3c,0x9a,0x77,0x1, 0x76,0x84,0x3e,0x78,0x5, 0x5, 0x3c,0x62,0x3c,0xe3,0xc0,0x8,
+0xb, 0xe1,0xe2,0x0, 0xce,0x0, 0x3, 0x1e,0x57,0x1, 0xe0,0x43,0x3d,0xe, 0x3e,0x75,
+0x4, 0x4, 0x57,0x81,0xe0,0x43,0x3d,0xf, 0x57,0x84,0x3d,0x34,0xe2,0x1, 0xc7,0xff,
+0xe0,0x43,0x3d,0x8f,0xe0,0xf, 0x3b,0xaf,0x3d,0xf9,0xe2,0x1, 0xc7,0xff,0x5, 0xc,
+0x57,0x1, 0xc6,0x1, 0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0xe0,0x43,0x3e,0xc, 0x77,0x1,
+0x0, 0xdb,0x3d,0x6c,0x0, 0xe5,0xe2,0x0, 0xcd,0x80,0x3, 0x19,0xe0,0x43,0x3e,0x8f,
+0x3d,0xf6,0x4, 0x3, 0xe0,0x43,0x3e,0x8f,0x3e,0x9a,0x36,0xa1,0x3e,0x91,0x96,0x8d,
+0x3f,0x60,0x76,0x83,0x36,0x8f,0xc7,0x4, 0x76,0x82,0x97,0x1e,0x39,0x9e,0xe0,0x22,
+0x39,0x7d,0xc5,0x81,0xe0,0x43,0x3d,0x8b,0xc7,0xff,0x0, 0xd7,0x3e,0xeb,0x0, 0xe9,
+0x34,0x21,0xe0,0x4d,0x17,0xe2,0x3f,0x98,0x8c,0xf, 0xe8,0x56,0x4e,0xb0,0xe0,0x43,
+0x3f,0x8, 0x3e,0xfe,0x5, 0x7, 0x3d,0x69,0x8c,0x9f,0xe2,0x1, 0xc5,0x7f,0xe7,0xff,
+0x0, 0x8c,0x14,0x0, 0x3c,0xe8,0x38,0x82,0x8, 0xb4,0xe0,0x4d,0x14,0xe2,0x12,0x0,
+0xe8,0x52,0x49,0x2, 0xe0,0x0, 0x16,0xe4,0x3e,0x64,0x39,0xe9,0x39,0x7c,0x1, 0x8b,
+0xe2,0x0, 0xce,0xe4,0x1, 0x82,0x16,0x80,0xe2,0x0, 0xcc,0x0, 0x3c,0x6d,0xe0,0x68,
+0x39,0xa4,0xa, 0x61,0xc6,0x1, 0xe2,0x1, 0xc6,0x7f,0xe0,0xa, 0x36,0x21,0x3d,0x13,
+0x38,0xec,0x39,0x71,0xc5,0x2, 0x1, 0x83,0xc4,0x82,0x0, 0xe9,0xe0,0x40,0x8f,0xaa,
+0x8f,0x9, 0xe0,0x40,0x8d,0x9a,0x3f,0x2f,0x8f,0x99,0xe0,0x41,0x3f,0x2e,0x3f,0xab,
+0xe0,0x41,0x3f,0xaf,0x3d,0xef,0xe2,0x1, 0xc7,0x7f,0xe2,0x1, 0xc5,0xff,0xe1,0x2f,
+0x3f,0x6b,0xe1,0x2d,0x3e,0xdf,0xe1,0x2f,0x3a,0x6f,0x3a,0x6f,0xc0,0x81,0xe2,0x1,
+0xc6,0xff,0xe2,0x1, 0xc2,0x7f,0xe2,0x1, 0xc0,0xff,0x0, 0xdc,0x8, 0xb4,0xc0,0x5c,
+0x39,0x68,0x3c,0x60,0x3a,0x69,0x39,0xea,0x14,0x80,0x15,0x22,0xc4,0x4, 0xe0,0x4,
+0xde,0x28,0xe0,0x56,0x17,0xaa,0x8f,0x5f,0x8f,0xcf,0x3c,0x60,0x6f,0x82,0x32,0x41,
+0x17,0x81,0x31,0xc1,0x31,0x41,0xc4,0x2, 0x6f,0x3, 0x72,0x4, 0x71,0x85,0x71,0x6,
+0x77,0x87,0xe0,0x4, 0xd3,0x8e,0xc0,0x24,0xa, 0x61,0x8, 0xb5,0xc0,0x5c,0x39,0x68,
+0x3c,0x60,0x3a,0x69,0x39,0xea,0x14,0x80,0x15,0x22,0xc4,0x4, 0x3a,0xeb,0xe0,0x4,
+0xde,0x8, 0xe0,0x56,0x17,0xaa,0x8f,0x5f,0x8f,0xcf,0x32,0x41,0x6f,0x82,0x17,0x82,
+0x3c,0x6f,0x31,0xc1,0x31,0x41,0x3c,0x10,0x6f,0x3, 0x6a,0x85,0x72,0x4, 0x71,0x85,
+0x71,0x6, 0x77,0x87,0xe0,0x4, 0xd3,0x6d,0xc0,0x24,0xa, 0xe1,0x8, 0xb3,0xc0,0x5c,
+0x39,0x68,0x3c,0x60,0x15,0x22,0x39,0xe9,0xc4,0x4, 0x14,0x80,0xe0,0x4, 0xdd,0xe9,
+0xe0,0x56,0x17,0xaa,0x8f,0x5f,0x8f,0xcf,0x3c,0x60,0x6f,0x82,0x31,0xc1,0x17,0x84,
+0x31,0x41,0xc4,0x2, 0x6f,0x3, 0x71,0x84,0x71,0x6, 0x77,0x87,0xe0,0x4, 0xd3,0x51,
+0xc0,0x24,0x9, 0xe1,0x8, 0xb1,0xc0,0x66,0xe8,0x56,0x4f,0xaf,0xe2,0x0, 0xc5,0x2,
+0x6f,0x89,0xe8,0x56,0x4f,0xae,0x6f,0x88,0x25,0xe, 0x17,0x80,0x77,0x8b,0x34,0x41,
+0x74,0xa, 0x34,0xc1,0x3c,0x60,0x74,0x87,0xc4,0x2, 0x14,0x80,0xe0,0x4, 0xd5,0x96,
+0xc0,0x1a,0x8, 0xe1,0xe0,0x20,0x17,0x80,0xe0,0x90,0xc4,0x80,0x77,0x8b,0x0, 0xf0,
+0x8, 0xb6,0xc0,0x5c,0x39,0xe8,0x3c,0x60,0x3a,0xe9,0x3a,0x6a,0x14,0x80,0x15,0x22,
+0xc4,0x4, 0x39,0x6b,0x3b,0x6c,0xe0,0x4, 0xdd,0xac,0xe0,0x56,0x17,0xaa,0x8f,0x5f,
+0x8f,0xcf,0x3c,0x60,0x6f,0x82,0xe6,0xaf,0xcf,0xf2,0x6f,0x85,0x32,0xc1,0xe6,0xae,
+0xcf,0xf2,0x32,0x41,0x31,0xc1,0x3c,0xe6,0xc4,0x2, 0xe6,0xad,0xc9,0x72,0x6f,0x3,
+0x72,0x84,0x72,0x5, 0x71,0x86,0x6f,0x90,0x69,0x11,0xe0,0x4, 0xd4,0x9e,0xc0,0x24,
+0xb, 0x61,0x8, 0xb5,0xc0,0x5c,0x39,0xe8,0x3c,0x60,0x3a,0xe9,0x3a,0x6a,0x14,0x80,
+0x15,0x22,0xc4,0x4, 0x39,0x6b,0xe0,0x4, 0xdd,0x84,0xe0,0x56,0x17,0xaa,0x8f,0x5f,
+0x8f,0xcf,0x3c,0x60,0x6f,0x82,0xe6,0xaf,0xcf,0xf2,0x6f,0x85,0x32,0xc1,0xe6,0xae,
+0xcf,0xf2,0x32,0x41,0x31,0xc1,0xc4,0x2, 0xe6,0xad,0xc9,0x72,0x6f,0x3, 0x72,0x84,
+0x72,0x5, 0x71,0x86,0x6f,0x90,0x69,0x11,0xe0,0x4, 0xd4,0xe2,0xc0,0x24,0xa, 0xe1,
+0x8, 0xb4,0xc0,0x5c,0x39,0xe8,0x3c,0x60,0x39,0x6a,0x3a,0x69,0x15,0x22,0x14,0x80,
+0xc4,0x4, 0xe0,0x4, 0xdd,0x5e,0xe8,0x56,0x4f,0xaf,0x32,0x41,0x6f,0x83,0x31,0xc1,
+0xe8,0x56,0x4f,0xae,0x72,0x4, 0x6f,0x82,0xe6,0xaf,0xcf,0xf2,0x6f,0x85,0xe6,0xae,
+0xcf,0xf2,0x6f,0x90,0xe6,0xad,0xcf,0xf2,0x71,0x86,0x31,0x43,0x6f,0x91,0x21,0xa,
+0xe0,0x40,0x17,0x80,0x3c,0x60,0xc4,0x2, 0x77,0x87,0xe0,0x4, 0xd4,0x87,0xc0,0x24,
+0xa, 0x61,0xe0,0x80,0x17,0x80,0x0, 0xf7,0x8, 0xb4,0xc0,0x5c,0x39,0x68,0x3c,0x60,
+0x39,0xe9,0x3a,0x6a,0x14,0x80,0x15,0x22,0xc4,0x4, 0xe0,0x4, 0xdd,0x32,0xe0,0x56,
+0x17,0xaa,0x8f,0x5f,0x3c,0x60,0x8f,0xcf,0x31,0x41,0x3d,0x64,0x3c,0xe3,0xc4,0x2,
+0x6f,0x82,0x6f,0x3, 0x71,0x4, 0xe0,0x4, 0xd4,0xd0,0xc0,0x24,0xa, 0x61,0x8, 0xb1,
+0xc0,0x78,0xe0,0xe5,0x17,0xe2,0x37,0xc1,0x77,0x82,0xe0,0xe6,0x17,0x8a,0x37,0xc1,
+0x77,0x83,0xe0,0xe6,0x17,0xb2,0xe8,0x72,0x74,0x71,0x37,0xc1,0x3c,0x60,0xc4,0x2,
+0x77,0x84,0xe0,0x2, 0x17,0x81,0xe8,0x72,0x74,0xf2,0x14,0x80,0xe8,0x73,0x75,0x5,
+0xe8,0x73,0x75,0x86,0x77,0x81,0xe0,0x4, 0xd3,0x3f,0xe8,0x73,0x54,0x19,0xc0,0x8,
+0x8, 0xe1,0xe8,0xff,0x4f,0xf3,0xe2,0x0, 0xcf,0x83,0x1, 0xae,0xe8,0xf3,0x4f,0xb1,
+0xe2,0x0, 0xcf,0x81,0x1, 0x29,0x8, 0xb2,0x39,0x68,0x3c,0x69,0xdb,0x98,0xe8,0xf3,
+0x4f,0xa9,0xe2,0x0, 0xcf,0x84,0x24,0x17,0x5, 0x9a,0xe2,0x1, 0xc1,0x7d,0x29,0x1e,
+0xe8,0x25,0x4f,0xce,0xe0,0x23,0x17,0x3e,0x3f,0x1f,0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0xe2,0x0, 0xcf,0x83,0x8c,0xe, 0x2, 0x84,0xe8,0x25,0x6f,0xce,0x9, 0x61,0xe8,0x25,
+0x69,0x4e,0x0, 0xfd,0x5, 0x84,0xe0,0x28,0x39,0x8, 0x0, 0xf9,0xe8,0xf3,0x4f,0xa9,
+0xe0,0x28,0x39,0xf, 0x0, 0xf4,0x14,0x1, 0x38,0x82,0x14,0x0, 0x0, 0xf0,0x8, 0xb4,
+0xe8,0x25,0x49,0x43,0xef,0xfe,0xd7,0x33,0x2c,0x6, 0xe8,0xf4,0x4f,0xad,0xe2,0x0,
+0xcf,0x83,0x1, 0xf9,0xe8,0x46,0x4a,0x76,0xe0,0x46,0x17,0xe4,0xe0,0xe, 0x3f,0x94,
+0xe0,0x7, 0x89,0x8e,0x8e,0xce,0x26,0xa0,0x8e,0xce,0xc6,0xff,0xe8,0xf3,0x6e,0xcb,
+0x8f,0x4e,0xe2,0x0, 0xcf,0x1, 0xe0,0x0, 0x1, 0xd5,0x3f,0x94,0xe8,0xe8,0x6f,0x24,
+0x17,0x0, 0xaf,0x4f,0x3c,0x63,0xe0,0x1, 0x89,0x2f,0x3c,0xe2,0xe8,0x25,0x69,0x42,
+0xe0,0x4, 0xda,0xfc,0x3c,0xe2,0x3c,0x64,0xe0,0x1, 0xd4,0xf1,0xe8,0x46,0x4f,0xf6,
+0xc7,0x81,0xe8,0x46,0x6f,0xf6,0xe8,0xe8,0x4f,0xa4,0xe2,0x0, 0xcf,0x81,0x1, 0x6,
+0xe8,0xff,0x4f,0xf3,0xe2,0x0, 0xcf,0x83,0x1, 0x9b,0xe8,0x72,0x54,0x6e,0x3c,0xe2,
+0xef,0xfe,0xd8,0x4, 0x3c,0xe2,0x3c,0x63,0xdf,0x85,0x3a,0x68,0x3c,0xe2,0x3c,0x63,
+0xe0,0x1, 0xd4,0x7f,0x22,0xd, 0xe0,0x4, 0xda,0xf4,0x3c,0xe2,0x3c,0x63,0xe0,0x1,
+0xd5,0xb1,0xe8,0xe8,0x69,0xa5,0xe8,0xf3,0x69,0xcc,0xe8,0x25,0x69,0x44,0xe8,0x46,
+0x4f,0xf6,0xe8,0x46,0x4f,0x77,0x3f,0x7f,0x2, 0x8c,0xef,0xff,0xd1,0xa5,0xef,0xfe,
+0xdc,0xf1,0xdb,0x24,0xe8,0x25,0x4c,0x43,0xe0,0x1, 0xd6,0xf7,0xef,0xfe,0xd6,0x88,
+0xd9,0x9e,0xd9,0xaa,0x24,0x9, 0x3c,0xe3,0x3c,0x62,0xa, 0x21,0xe0,0x2e,0x0, 0x99,
+0x17,0x0, 0xe7,0xff,0x0, 0xac,0xa, 0x61,0x8, 0xb2,0x11,0x0, 0xdf,0x89,0xc1,0x1,
+0xe8,0x46,0x4f,0xf7,0xe2,0x1, 0xc1,0x7f,0x39,0x7f,0x3, 0x86,0xe8,0xf3,0x4f,0xb1,
+0xe2,0x0, 0xcf,0x81,0x1, 0xf4,0xe8,0xf3,0x4c,0x4c,0xe8,0x25,0x4c,0xc4,0x9, 0x21,
+0xe0,0x95,0x0, 0x9c,0x17,0x0, 0xe8,0x0, 0x4f,0xf0,0xe8,0xf3,0x6f,0x20,0xe8,0x0,
+0x4f,0x71,0xe8,0xf3,0x6f,0xa2,0xe8,0x1, 0x4f,0xaa,0xe8,0xf3,0x6f,0x23,0xe8,0x0,
+0x4f,0x74,0xe8,0xf3,0x6f,0xd7,0xe8,0x0, 0x4f,0xf5,0xe8,0xf3,0x6f,0x3e,0xe8,0xf3,
+0x6f,0xbf,0xe8,0x1, 0x4f,0x27,0xe8,0x1, 0x4f,0xa6,0xe8,0x0, 0x4d,0xed,0x3f,0x9e,
+0xe8,0xf3,0x6f,0xcf,0xe8,0x1, 0x4f,0x28,0xe8,0x1, 0x4f,0xa9,0xe0,0xd, 0x37,0x27,
+0x37,0xa6,0x3f,0xcd,0xcf,0x81,0xe8,0xf3,0x6f,0xc6,0xe8,0x0, 0x4e,0x6f,0xe8,0x0,
+0x4e,0xec,0xe8,0x0, 0x4f,0xee,0xe0,0x0, 0x2f,0x73,0xe8,0xf3,0x6e,0xf0,0xe8,0xf3,
+0x6f,0xf1,0xe8,0xf3,0x6d,0xf2,0xe8,0xf3,0x6e,0x73,0x17,0x80,0xe8,0xb, 0x4f,0x69,
+0xe8,0xf3,0x6f,0x25,0x17,0x3, 0xe8,0xf3,0x6f,0xa6,0xe8,0xf3,0x6f,0xab,0xe8,0xf3,
+0x6f,0x30,0xe8,0xf3,0x6f,0xaf,0xe8,0x25,0x4f,0x41,0xe8,0xf3,0x6f,0x2c,0xe8,0x25,
+0x4f,0x43,0xe8,0xf3,0x6f,0x50,0xe0,0x24,0x17,0x78,0xe8,0xf3,0x6f,0xad,0xe8,0xf3,
+0x6f,0xae,0xe8,0x25,0x4e,0xc3,0xe4,0x0, 0xc6,0x85,0x3e,0x9e,0x8e,0x8d,0xe8,0xf3,
+0x6e,0xc0,0xe8,0x25,0x4e,0xc3,0xe4,0x0, 0xc6,0x85,0x3e,0x9e,0x8e,0x9d,0xe8,0xf3,
+0x6e,0xc1,0xe8,0x25,0x4e,0xc3,0xe4,0x0, 0xc6,0x85,0x3e,0x9e,0x8e,0xad,0xe8,0xf3,
+0x6e,0xc4,0xe8,0x25,0x4e,0xc3,0xe4,0x0, 0xc6,0x85,0x3f,0x1d,0x8f,0x3e,0xe8,0xf3,
+0x6f,0x43,0xe0,0x25,0x17,0x8, 0xe8,0x25,0x4e,0xc3,0xe4,0x0, 0xc6,0x83,0x3e,0x9e,
+0x8e,0x8d,0xe8,0xf3,0x6e,0xc8,0xe8,0x25,0x4e,0xc3,0xe4,0x0, 0xc6,0x83,0x3e,0x9e,
+0x8e,0x9d,0xe8,0xf3,0x6e,0xc9,0xe8,0x25,0x4e,0xc3,0xe4,0x0, 0xc6,0x83,0x3f,0x1d,
+0x8f,0x2e,0xe8,0xf3,0x6f,0x4a,0xe8,0xd, 0x4f,0x44,0xe0,0xd, 0x37,0x28,0xe8,0xd,
+0x4f,0x45,0x3f,0x4d,0xe8,0x79,0x77,0x7d,0xe9,0x2, 0x6f,0xcd,0xe9,0x2, 0x6f,0xce,
+0xe8,0xf3,0x6f,0xce,0x17,0xbb,0xe8,0x25,0x6f,0xcf,0x38,0x82,0xe8,0xf3,0x6d,0xf0,
+0xe8,0xf3,0x6e,0x71,0xe8,0xf3,0x6e,0xf2,0xe8,0xf3,0x6f,0xf3,0xe7,0xff,0x0, 0x8f,
+0x8, 0xb1,0xe0,0x56,0x16,0x2a,0x3c,0x6c,0xe0,0xa, 0x15,0x66,0xe0,0x0, 0x14,0xec,
+0xe0,0x4, 0xdb,0x3b,0xe8,0x2b,0x57,0xab,0xe8,0x2b,0x56,0xac,0xe8,0x56,0x4d,0xe5,
+0xe0,0xe, 0x3f,0x9d,0xe8,0x30,0x77,0x48,0x3e,0x68,0xe8,0x56,0x4f,0x64,0x3c,0x6f,
+0x3f,0x1b,0xe8,0x30,0x77,0x4c,0xc4,0x20,0xe8,0x56,0x4f,0x66,0x34,0x21,0x3c,0x1c,
+0xe0,0x56,0x16,0x6a,0x27,0x1c,0x17,0x0, 0xe8,0x30,0x76,0xc9,0xe8,0x30,0x77,0xca,
+0xe8,0x30,0x74,0x4d,0xe8,0x30,0x76,0x4e,0xe8,0x30,0x77,0xcf,0xe8,0x30,0x77,0x50,
+0xe8,0x30,0x77,0xd1,0xe8,0x30,0x77,0x52,0xe8,0xc, 0x4f,0xf0,0x2f,0x99,0xe8,0x56,
+0x4f,0xaf,0x37,0xa6,0xc7,0xff,0xe8,0x30,0x77,0xcb,0x8, 0xe1,0xe8,0x30,0x77,0xc9,
+0xe8,0x30,0x76,0xca,0xe8,0x30,0x76,0x4d,0xe8,0x30,0x74,0x4e,0xe8,0x30,0x77,0x4f,
+0xe8,0x30,0x77,0xd0,0xe8,0x30,0x77,0x51,0xe8,0x30,0x77,0xd2,0x0, 0xe6,0xe8,0x56,
+0x4f,0xae,0x0, 0xe8,0x8, 0xb3,0xe0,0xa, 0x11,0xa4,0xe0,0x91,0x11,0x18,0x3d,0x63,
+0xe0,0xba,0x14,0x28,0x14,0x80,0xe8,0x72,0x71,0x70,0xe8,0x72,0x74,0x6f,0xe0,0x4,
+0xdb,0x30,0x3d,0x63,0x14,0x80,0x3c,0x62,0xe0,0x4, 0xdb,0x2b,0x17,0x80,0xe8,0xe8,
+0x6f,0xa4,0x9, 0xe1,0x8, 0xb4,0xe8,0xb, 0x4f,0xf3,0xe0,0xf4,0x11,0x8, 0xe0,0xe,
+0x37,0xa8,0xe8,0xb, 0x4f,0xf4,0x11,0x80,0x3f,0xce,0xe6,0xa3,0xcf,0x8f,0xaf,0x82,
+0xe0,0x0, 0x15,0x69,0xe8,0xb, 0x4f,0xf5,0xe0,0xc, 0x14,0x87,0xe0,0xe, 0x37,0xa8,
+0xe8,0xb, 0x4f,0xf6,0xe0,0xf4,0x14,0xe, 0x3f,0xce,0xe6,0xa3,0xcf,0x8f,0xaf,0x92,
+0x12,0x2, 0xe8,0xb, 0x4f,0xf9,0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xfa,0x3f,0xce,
+0xe6,0xa3,0xcf,0x8f,0xaf,0xa2,0xe8,0xb, 0x4f,0xfb,0xe0,0xe, 0x37,0xa8,0xe8,0xb,
+0x4f,0xfc,0x3f,0xce,0xe6,0xa3,0xcf,0x8f,0xaf,0xb2,0xe8,0xc, 0x4f,0x83,0xa9,0xc2,
+0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x84,0x3f,0xce,0xe6,0xa3,0xcf,0x8f,0xaf,0xd2,
+0xe0,0x4, 0xda,0x9b,0xe0,0x0, 0x17,0xd5,0xe0,0x1, 0xaa,0x52,0xe0,0x6, 0xaf,0xc2,
+0xef,0xfe,0xdb,0x63,0xe0,0x3, 0xa9,0xa2,0x17,0x8e,0xe0,0x3, 0xa9,0xb2,0xe0,0x3,
+0xaa,0x42,0xe0,0x3, 0xaf,0xd2,0xe0,0x0, 0x17,0xf0,0xe0,0x3, 0xaf,0xe2,0xa, 0x61,
+0xe8,0xb, 0x4f,0xe9,0xe8,0xb, 0x4e,0xec,0xe8,0x52,0x6f,0x9a,0xe2,0x0, 0xce,0x93,
+0xe8,0xb, 0x4f,0xeb,0xe8,0x52,0x6e,0xaf,0xe8,0x52,0x6f,0x9b,0xe8,0xb, 0x4f,0xf3,
+0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xf4,0x3f,0xce,0xe8,0x29,0x77,0x8e,0xe8,0xb,
+0x4f,0xf5,0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xf6,0x3f,0xce,0xe8,0x29,0x77,0x8f,
+0xe8,0xb, 0x4f,0xf7,0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xf8,0x3f,0xce,0xe0,0x41,
+0x3f,0xcf,0xe8,0x29,0x77,0x90,0xe8,0xb, 0x4f,0xf9,0xe0,0xe, 0x37,0xa8,0xe8,0xb,
+0x4f,0xfa,0x3f,0xce,0xe8,0x29,0x77,0x91,0xe8,0xb, 0x4f,0xfb,0xe0,0xe, 0x37,0xa8,
+0xe8,0xb, 0x4f,0xfc,0x3f,0xce,0xe8,0x29,0x77,0x92,0xe8,0xb, 0x4f,0xfd,0xe0,0xe,
+0x37,0xa8,0xe8,0xb, 0x4f,0xfe,0x3f,0xce,0xe0,0x41,0x3f,0xcf,0xe8,0x29,0x77,0x93,
+0xe8,0xb, 0x4f,0xff,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x80,0x3f,0xce,0xe8,0x29,
+0x77,0x94,0xe8,0xc, 0x4f,0x81,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x82,0x3f,0xce,
+0xe0,0x41,0x3f,0xcf,0xe8,0x29,0x77,0x95,0xe8,0xc, 0x4f,0xb3,0xe8,0x52,0x6f,0xae,
+0xe8,0xb, 0x4f,0xed,0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xee,0x3f,0xce,0xe8,0x29,
+0x77,0x98,0x2, 0x84,0x17,0x94,0xe8,0x52,0x6f,0xaf,0xe8,0xc, 0x4f,0x83,0xe0,0xe,
+0x37,0xa8,0xe8,0xc, 0x4f,0x84,0x3f,0xce,0xe8,0x29,0x77,0x96,0xe0,0x2, 0x17,0x80,
+0xe8,0x29,0x77,0x99,0x38,0x82,0x8, 0xb1,0xe0,0x4, 0x15,0x38,0x14,0x80,0xe0,0x4d,
+0x14,0x62,0xe0,0x4, 0xda,0x4e,0xe8,0xb, 0x4d,0x6a,0xe0,0x1, 0x14,0xff,0xe4,0x0,
+0xc5,0xe, 0xe0,0x4e,0x14,0x5e,0x8, 0xa1,0xe0,0x94,0x0, 0xc3,0x8, 0xb3,0xe8,0xb,
+0x49,0x69,0xe0,0x1, 0x11,0xff,0xe4,0x0, 0xc1,0xe, 0x3c,0xe3,0x3d,0x62,0xe0,0x52,
+0x14,0x38,0xe0,0x4, 0xda,0x36,0x3d,0x62,0x3c,0xe3,0xe0,0x54,0x14,0x50,0xe0,0x4,
+0xda,0x30,0x3d,0x62,0x3c,0xe3,0xe0,0x53,0x14,0x44,0xe0,0x4, 0xda,0x2a,0xe0,0x55,
+0x14,0x5c,0xe0,0x3, 0xd1,0x81,0x15,0x12,0x14,0x80,0xe0,0x56,0x14,0x18,0x9, 0xa1,
+0xe0,0x94,0x0, 0x9f,0xe8,0xd, 0x4f,0x11,0xe0,0x61,0x17,0xac,0xe0,0xd, 0x37,0x28,
+0xe8,0xd, 0x4f,0x12,0x3f,0x4d,0xb7,0x1f,0xe8,0xd, 0x4f,0x13,0xe0,0xd, 0x37,0x28,
+0xe8,0xd, 0x4f,0x14,0x3f,0x4d,0xb7,0x2f,0xe8,0xd, 0x4f,0x15,0xe0,0xd, 0x37,0x28,
+0xe8,0xd, 0x4f,0x16,0x3f,0x4d,0xb7,0x3f,0xe8,0xd, 0x4f,0x17,0xe0,0x1, 0xaf,0xf,
+0xe8,0xd, 0x4f,0x18,0xe0,0x1, 0xaf,0x1f,0x17,0x0, 0xe8,0x30,0x57,0xdb,0xe7,0xb,
+0xcf,0x9e,0xe7,0xa, 0xcf,0x9e,0xe7,0x7, 0xcf,0x9e,0xe7,0x6, 0xcf,0x9e,0xe8,0x30,
+0x77,0xdb,0x38,0x82,0x8, 0xb1,0x15,0x15,0xe0,0xb, 0x14,0xd2,0xe0,0x4d,0x14,0x4a,
+0xe0,0x4, 0xd9,0x9b,0x14,0x0, 0xef,0xff,0xd7,0xdb,0x14,0x1, 0xef,0xff,0xd7,0xd8,
+0x14,0x2, 0x8, 0xa1,0xe7,0xef,0x0, 0xd4,0xe8,0xc, 0x4f,0xf5,0xe0,0xe, 0x37,0xa8,
+0xe8,0xc, 0x4f,0xf6,0x3f,0xce,0xc7,0xff,0xe8,0x12,0x77,0xea,0xe8,0xd, 0x4f,0x83,
+0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0x84,0x3f,0xce,0xc7,0xff,0xe0,0x56,0x17,0x2a,
+0xe8,0x12,0x77,0xe9,0x8f,0xce,0xc7,0xff,0xe8,0x25,0x6f,0xd1,0x8f,0xde,0xc7,0xff,
+0xe8,0x25,0x6f,0xd0,0x38,0x82,0x8, 0xb1,0xde,0x96,0xdd,0x7d,0xde,0x2a,0xde,0x7b,
+0xdf,0xca,0xdf,0x99,0xde,0xe6,0xdf,0x60,0xdf,0x72,0xe0,0x1, 0xdb,0x9c,0xd8,0x10,
+0xe0,0x1, 0xd3,0x6d,0x8, 0xa1,0x0, 0xd1,0xe8,0xb, 0x4f,0xf3,0xe0,0xe, 0x37,0xa8,
+0xe8,0xb, 0x4f,0xf4,0x3f,0xce,0xe0,0x2, 0x17,0x20,0xe1,0x2f,0x3f,0xde,0xe0,0x1,
+0x17,0x40,0xe1,0x2f,0x3f,0xee,0x37,0xc5,0xe8,0x32,0x6f,0x8e,0x38,0x82,0x8, 0xb7,
+0xc0,0x7e,0xe8,0x52,0x4f,0xb3,0xe0,0x5, 0x12,0x3c,0xe2,0x0, 0xcf,0x80,0xe0,0x7,
+0x17,0xe8,0xe0,0x64,0x39,0x2f,0xe8,0x52,0x4f,0xb6,0x11,0x80,0xe2,0x0, 0xcf,0x81,
+0xe0,0x1, 0x17,0xf0,0xe0,0x6f,0x39,0xa4,0xe0,0x4d,0x13,0x62,0xe8,0x29,0x52,0x84,
+0x3a,0x6f,0x39,0x63,0x3b,0xe6,0xe8,0x52,0x4f,0x82,0x3f,0xf2,0x2, 0x89,0xe8,0x52,
+0x6f,0x97,0xe8,0x56,0x69,0x98,0xe8,0x30,0x72,0xde,0xc0,0x2, 0xb, 0xe1,0x3c,0x62,
+0xe0,0x1, 0xdd,0xbf,0xe0,0xf, 0x31,0x21,0x3f,0x96,0x3f,0x68,0x8c,0xf, 0x77,0x1,
+0xe0,0x1, 0xdd,0xd8,0x57,0x1, 0x3c,0x7e,0x3, 0x18,0x3c,0x62,0xe0,0x1, 0xdd,0x8d,
+0x24,0x28,0x3c,0xe2,0x3f,0xe3,0xe4,0x0, 0xc4,0x8e,0xe4,0x0, 0xc7,0x8e,0xe0,0x0,
+0xc4,0xfc,0xe0,0x52,0x14,0x38,0x15,0xe, 0x3c,0x97,0x3c,0x1f,0xc1,0x81,0xe0,0x4,
+0xd9,0x4, 0xe2,0x1, 0xc1,0xff,0x0, 0x95,0xe8,0x52,0x4f,0x2, 0xe8,0x56,0x4f,0x99,
+0x3f,0x7f,0x1, 0x8f,0xe8,0x30,0x57,0xde,0x37,0xc1,0x3f,0xf5,0x3, 0x8a,0x14,0x81,
+0x3c,0x62,0xda,0xb7,0xe2,0x0, 0xcc,0x0, 0x2, 0x59,0x1, 0x83,0x3c,0xf4,0x2, 0xd6,
+0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe7,0xff,0x0, 0xb8,0xe7,0xff,0x0, 0x9a,0x8, 0xb3,
+0xe4,0x0, 0xc4,0xe, 0xe0,0x52,0x11,0x38,0x39,0x18,0x94,0x2, 0xe0,0x1, 0xda,0x2b,
+0x39,0xe8,0x94,0x12,0xe0,0x1, 0xda,0x7a,0xe8,0x12,0x57,0x69,0xe8,0x12,0x57,0xea,
+0xe1,0xfc,0xc7,0x70,0xe1,0x2e,0x3f,0x18,0x27,0x11,0xe0,0x3, 0x17,0x10,0xe1,0x28,
+0x3c,0x1e,0x24,0xc, 0x3c,0x6f,0xe1,0xfe,0xc4,0x38,0xe0,0x1, 0x17,0xc7,0xe1,0x28,
+0x39,0x98,0xe1,0x2f,0x3f,0xa3,0x3c,0x4f,0x9, 0xe1,0x14,0x0, 0x0, 0xfe,0x8, 0xb7,
+0xc0,0x70,0xe4,0x0, 0xc4,0xe, 0xe0,0x52,0x17,0xb8,0x3c,0x1f,0xe8,0x56,0x4f,0xb0,
+0x75,0x87,0xe0,0xe, 0x37,0xc1,0x8d,0xf8,0x74,0x85,0x3f,0x7b,0x75,0x6, 0xe0,0x1,
+0x8e,0x8, 0xe0,0x0, 0x2, 0xd1,0x3e,0xef,0x3f,0x6f,0xc6,0xff,0xc7,0x7e,0xc7,0xfd,
+0xe2,0x1, 0xc6,0xff,0xe2,0x1, 0xc7,0x7f,0xe2,0x1, 0xc7,0xff,0xe8,0x56,0x48,0xaf,
+0x39,0xec,0xe0,0xa3,0x3d,0x81,0xe8,0x72,0x51,0x70,0x3d,0xe3,0x35,0xa1,0x3d,0x92,
+0x95,0xb, 0x3f,0xb1,0x3e,0xb1,0x3f,0x31,0xe0,0xb, 0x35,0x1, 0xe0,0x9, 0x35,0x2,
+0xe0,0x43,0x3c,0xc, 0x3a,0x6f,0xe5,0xff,0xc2,0x7e,0x36,0xa1,0x37,0x21,0x3c,0x9b,
+0xe0,0xb, 0x3c,0x1f,0x35,0xa1,0x77,0x3, 0x17,0x0, 0x76,0x84,0x16,0x81,0x72,0x2,
+0xc5,0xa, 0x3d,0x92,0x39,0xed,0x3a,0xee,0x3b,0xee,0x3a,0x6e,0x76,0x81,0xe2,0x0,
+0xcc,0x0, 0x3, 0x1e,0xc6,0x1, 0xe0,0x43,0x3e,0xc, 0x3f,0x9c,0x16,0x81,0x37,0xa1,
+0xe8,0x56,0x43,0x31,0x39,0x1f,0x39,0xed,0x3d,0xed,0x14,0x0, 0x38,0xed,0x3b,0x7c,
+0xe0,0x0, 0x2, 0x5d,0x52,0x5, 0x53,0x6, 0xab,0x84,0x55,0x7, 0xaa,0x86,0xaf,0xa,
+0xc0,0x10,0xb, 0xe1,0x17,0x82,0x17,0x1, 0x16,0x80,0xe7,0xff,0x0, 0xb9,0x21,0x91,
+0x53,0x2, 0x50,0x84,0x3b,0x1b,0x3b,0x11,0x90,0x86,0xe0,0x26,0x38,0x99,0x23,0x3b,
+0xe0,0x21,0x3d,0x11,0x20,0xb8,0x38,0xe7,0xc0,0x81,0x3b,0xe1,0xe2,0x1, 0xc3,0xff,
+0x50,0x81,0xe2,0x0, 0xc8,0x81,0x1, 0xb1,0x50,0x82,0x53,0x3, 0x38,0x9b,0x38,0x96,
+0x90,0x81,0xe0,0x26,0x38,0x99,0x23,0x29,0xe0,0x21,0x3d,0x11,0x20,0xa6,0x38,0xe5,
+0xc0,0x81,0xe2,0x0, 0xce,0x81,0x3a,0xe1,0xe2,0x1, 0xc2,0xff,0xe0,0x0, 0x1, 0xf3,
+0x90,0x8b,0xe0,0x26,0x38,0x99,0x23,0x20,0xe0,0x21,0x3d,0x11,0x20,0x9d,0xc7,0x1,
+0xe2,0x1, 0xc7,0x7f,0x10,0x81,0xe0,0x6, 0x39,0xcd,0x3b,0x41,0xe2,0x1, 0xc3,0x7f,
+0xc5,0xfe,0xe7,0xff,0x23,0x29,0xc4,0x7f,0x76,0x81,0xe0,0x43,0x3c,0x8, 0x3e,0xe1,
+0xe7,0xff,0x0, 0x9f,0x39,0xe4,0x0, 0xcd,0xe2,0x0, 0xce,0x81,0x1, 0x83,0x3e,0xe4,
+0x0, 0xe0,0x38,0xed,0x0, 0xe9,0x38,0xe4,0x0, 0xe7,0x25,0x91,0x57,0x82,0x52,0x4,
+0x3f,0x92,0x3f,0x94,0x97,0x8f,0xe0,0x24,0x3f,0x99,0x22,0x39,0xe0,0x2f,0x3d,0x1f,
+0x27,0xb6,0x3f,0xe7,0xc7,0x81,0x3b,0xef,0xe2,0x1, 0xc3,0xff,0xe2,0x0, 0xc9,0x81,
+0x1, 0xb0,0x57,0x82,0x51,0x83,0x3f,0x92,0x3f,0x93,0x97,0x8f,0xe0,0x23,0x3f,0x99,
+0x21,0xa8,0xe0,0x2f,0x3d,0x1f,0x27,0xa5,0x3f,0xe5,0xc7,0x81,0xe2,0x0, 0xce,0x81,
+0x3a,0xef,0xe2,0x1, 0xc2,0xff,0x1, 0xab,0x97,0x82,0xe0,0x23,0x3f,0x99,0x21,0xa0,
+0xe0,0x2f,0x3d,0x1f,0x27,0x9d,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x3f,0xe1,0xe0,0x3,
+0x3d,0xcd,0x39,0xcf,0xe2,0x1, 0xc1,0xff,0xc1,0x2, 0xe7,0xfe,0x21,0xed,0xc6,0x1,
+0x39,0xed,0xe0,0x43,0x3e,0xc, 0x3e,0xef,0xe7,0xfe,0x0, 0xe3,0x3d,0xe8,0x0, 0xcf,
+0xe2,0x0, 0xce,0x81,0x1, 0x83,0x3e,0xe8,0x0, 0xe0,0x3f,0xed,0x0, 0xe9,0x3f,0xe8,
+0x0, 0xe7,0x38,0xed,0xc5,0xfe,0x16,0x81,0xe7,0xff,0x0, 0x9f,0x3f,0xed,0xc1,0x2,
+0x3e,0xe1,0x0, 0xe6,0x8, 0xb1,0xc0,0x7c,0x3d,0xe0,0x3d,0x60,0x3c,0xe0,0xc5,0x85,
+0xc5,0x4, 0xc4,0x83,0xde,0xed,0x4f,0x84,0x4c,0x3, 0x3c,0x1f,0x4f,0x85,0x3c,0x1f,
+0xe2,0x1, 0xc4,0x7f,0x17,0x85,0xe1,0x28,0x3c,0x1f,0xc0,0x4, 0x8, 0xe1,0x8, 0xb1,
+0xc0,0x7c,0x3d,0xe0,0x3d,0x60,0x3c,0xe0,0xc5,0x85,0xc5,0x4, 0xc4,0x83,0xde,0xd8,
+0x4f,0x3, 0x4c,0x4, 0x4e,0x85,0xe0,0xf, 0x3f,0x18,0x3f,0x9d,0xe2,0x1, 0xc7,0xff,
+0xe2,0x0, 0xcf,0x8c,0x5, 0x8d,0xe2,0x0, 0xcf,0x4, 0x5, 0x8a,0xe2,0x0, 0xcc,0x2,
+0x5, 0x87,0x3f,0x78,0x4, 0x85,0xe1,0x28,0x3c,0x2d,0xc0,0x4, 0x8, 0xe1,0x14,0x0,
+0x0, 0xfd,0x8, 0xb4,0xe0,0x66,0x11,0x4, 0xe0,0xf, 0x34,0xa1,0x39,0x1f,0x17,0x80,
+0xaf,0x82,0x3a,0x68,0xaf,0x92,0xde,0x8c,0xe2,0x0, 0xcc,0x1, 0x1, 0x4, 0x11,0x80,
+0x3c,0x63,0xa, 0x61,0x39,0xe8,0x3c,0x64,0xdf,0xb6,0x24,0x7a,0x17,0x8a,0xa9,0x82,
+0xaf,0x92,0x0, 0xf7,0xe0,0x66,0x17,0x84,0x34,0x21,0x3c,0x1f,0x8f,0x88,0xe2,0x0,
+0xcf,0x81,0x1, 0x8a,0xe8,0xf4,0x4f,0x80,0x14,0x4, 0xe2,0x0, 0xcf,0x80,0x17,0x88,
+0xe0,0x68,0x39,0xaf,0x38,0x82,0xe2,0x0, 0xcf,0x82,0x14,0x0, 0x17,0x88,0xe0,0x68,
+0x39,0x2f,0x0, 0xf9,0xe8,0x56,0x4e,0x18,0xe0,0x52,0x17,0x38,0x17,0x80,0x3e,0x7f,
+0x1, 0x83,0x14,0x0, 0x38,0x82,0x8e,0xce,0xc7,0xe, 0xe6,0xac,0xce,0xcd,0x3e,0xf8,
+0x1, 0x5, 0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x0, 0xf3,0x14,0x1, 0x0, 0xf4,0x8, 0xb3,
+0xe0,0x61,0x11,0xc0,0x11,0x0, 0x3c,0x62,0xdf,0xe6,0x2c,0x3, 0xe0,0x2, 0xac,0x53,
+0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe2,0x0, 0xc9,0xa, 0xc1,0xba,0x1, 0xf5,0x9, 0xe1,
+0xe0,0x61,0x17,0xc0,0xe0,0x66,0x16,0x84,0xe0,0x2, 0x8f,0x5f,0xe2,0x1, 0xcf,0x7f,
+0x1, 0x4, 0xc7,0x1, 0xe0,0x2, 0xaf,0x5f,0xc7,0xba,0x3f,0xfd,0x1, 0xf6,0x38,0x82,
+0x3f,0x68,0xe4,0x0, 0xc7,0xe, 0xe0,0x52,0x17,0xb8,0x3f,0x9e,0x8f,0x7f,0xe8,0x56,
+0x4e,0xb0,0x3e,0xfe,0x5, 0xa5,0xe0,0x1, 0x8f,0x8f,0xe8,0x56,0x4e,0xb1,0x3e,0xff,
+0x4, 0x9f,0xe8,0x56,0x4e,0xaf,0xe4,0x0, 0xc4,0x3a,0xe0,0xaf,0x3e,0x8e,0xe8,0x72,
+0x57,0x70,0x37,0xa1,0x3f,0x9e,0x96,0x8f,0xe0,0x61,0x17,0xc0,0xe0,0xe, 0x3f,0x98,
+0xe0,0x1, 0x96,0xe, 0x3e,0x7d,0x3, 0x3, 0xe0,0x1, 0xb6,0x8e,0x3c,0x1f,0xe8,0x29,
+0x57,0x4, 0xe0,0x1, 0x97,0x98,0x3f,0x7f,0x5, 0x3, 0xe0,0x1, 0xb7,0x18,0x38,0x82,
+0xe8,0xf4,0x4f,0x94,0xe0,0x0, 0x2f,0xc6,0x8, 0xb5,0x3f,0x68,0xe4,0x0, 0xc7,0x3a,
+0xe0,0x61,0x17,0xc0,0x3f,0x9e,0xe0,0x2, 0x89,0xcf,0x3a,0x68,0x21,0x83,0xa, 0xa1,
+0x0, 0xc0,0xe0,0x2, 0x8f,0x5f,0xe2,0x0, 0xcf,0x1d,0x2, 0x85,0x17,0x1, 0xe0,0x2,
+0xaf,0x4f,0x0, 0xf6,0x8f,0x1f,0xe2,0x0, 0xcf,0x1d,0x2, 0x8b,0x39,0x6f,0xe8,0x56,
+0x4a,0xb0,0xc1,0x14,0xe8,0x56,0x4f,0x18,0xe0,0x52,0x17,0xb8,0x3f,0x73,0x2, 0x82,
+0xa, 0xe1,0x3e,0xe3,0xe4,0x0, 0xc6,0x8e,0x3e,0x9f,0x8f,0x4d,0xe4,0x0, 0xc7,0x6,
+0x3f,0x9e,0xe0,0x3, 0xc7,0xa4,0x8e,0xf, 0x2e,0x10,0x3f,0xe5,0x8f,0x7d,0xc7,0xff,
+0xe2,0x1, 0xc7,0xff,0xe1,0x2f,0x3f,0x9e,0x27,0x88,0xe1,0x2e,0x3f,0xc, 0x27,0x5,
+0x17,0x82,0x3c,0x64,0xaf,0x82,0xdf,0x8d,0xc1,0x81,0xe2,0x1, 0xc1,0xff,0x0, 0xdb,
+0x38,0x82,0xe8,0xf4,0x4f,0x94,0xe0,0x61,0x17,0x40,0xe2,0x0, 0xcf,0x82,0xe4,0x0,
+0xc4,0x3a,0x1, 0x88,0x3f,0x18,0xe0,0x6, 0x8c,0x3e,0x17,0x87,0xe1,0x28,0x3c,0x1f,
+0x0, 0x8e,0xe8,0xf4,0x4f,0x94,0xe2,0x0, 0xcf,0x81,0x1, 0x8a,0xe8,0x56,0x4f,0xb0,
+0x3f,0x18,0xe0,0x6, 0x8c,0x3e,0xc7,0xf9,0xe0,0x28,0x3f,0x98,0x38,0x82,0x3f,0x18,
+0xe0,0x6, 0x8c,0x4e,0x17,0x84,0x0, 0xeb,0x8, 0xb2,0x39,0x68,0xdf,0xdb,0xe0,0x0,
+0x24,0x47,0xe4,0x0, 0xc1,0x3a,0xe0,0x61,0x14,0x40,0x3c,0x12,0x8e,0xb8,0xe2,0x1,
+0xce,0xb4,0x2, 0xbe,0x8f,0x48,0xe2,0x0, 0xcf,0xb, 0x2, 0xba,0x8f,0xd8,0xe2,0x1,
+0xcf,0xb4,0x2, 0xb6,0x8c,0x68,0xe2,0x0, 0xcc,0xb, 0x2, 0xb2,0xe2,0x0, 0xce,0xa8,
+0x5, 0x84,0xe2,0x0, 0xcf,0x9, 0x2, 0xac,0xe2,0x0, 0xcf,0xa8,0x5, 0x84,0xe2,0x0,
+0xcc,0x9, 0x2, 0xa6,0xe2,0x0, 0xce,0xd0,0x5, 0x84,0xe2,0x0, 0xcf,0x7, 0x2, 0xa0,
+0xe2,0x0, 0xcf,0xd0,0x5, 0x84,0xe2,0x0, 0xcc,0x7, 0x2, 0x9a,0xe2,0x1, 0xce,0x82,
+0x5, 0x84,0xe2,0x0, 0xcf,0x5, 0x2, 0x94,0xe2,0x1, 0xcf,0x82,0x5, 0x84,0xe2,0x0,
+0xcc,0x5, 0x2, 0x8e,0xe2,0x1, 0xce,0x96,0x5, 0x84,0xe2,0x0, 0xcf,0x3, 0x2, 0x88,
+0xe2,0x1, 0xcf,0x96,0x5, 0x87,0x17,0x83,0xe1,0x28,0x3c,0x1f,0x9, 0x61,0x14,0x1,
+0x0, 0xfe,0x14,0x0, 0x0, 0xfc,0x8, 0xb2,0x39,0x68,0xdf,0x8c,0x24,0x36,0x3f,0x62,
+0xe4,0x0, 0xc7,0x3a,0xe0,0x61,0x14,0x40,0xe0,0xd, 0x3c,0x1e,0xe0,0x1, 0x8f,0x8d,
+0xc7,0xff,0xe2,0x0, 0xcf,0x81,0x3f,0xe8,0x5, 0xb0,0x8e,0x3d,0xe2,0x0, 0xce,0x55,
+0x2, 0x8b,0x8e,0xcd,0xe2,0x0, 0xce,0x87,0x2, 0x87,0xe2,0x0, 0xce,0x37,0x5, 0x86,
+0xe2,0x0, 0xce,0x85,0x5, 0x8a,0x14,0x1, 0x0, 0x98,0xe2,0x0, 0xce,0x2d,0x5, 0x85,
+0xe2,0x0, 0xce,0x87,0x14,0x1, 0x1, 0x11,0xe0,0x8, 0x3f,0x9e,0x8f,0xd8,0xe2,0x0,
+0xcf,0xd5,0x2, 0xf2,0x8c,0x68,0xe2,0x0, 0xcc,0x7, 0x2, 0xee,0xe2,0x0, 0xcf,0xb7,
+0x5, 0x85,0x17,0x85,0xe1,0x28,0x3c,0x1f,0x9, 0x61,0xe2,0x0, 0xcf,0xad,0x5, 0x85,
+0x17,0x87,0xe0,0x28,0x3c,0xf, 0x0, 0xf9,0x14,0x0, 0x0, 0xf7,0x8, 0xb7,0xc0,0x7c,
+0xe8,0xf4,0x4f,0x94,0x3f,0x68,0xe4,0x0, 0xc7,0xe, 0xe0,0x52,0x13,0xb8,0xe2,0x0,
+0xcf,0x81,0xe0,0x6, 0x3b,0x9e,0x3a,0x69,0x39,0x6a,0x3a,0xeb,0xe0,0x61,0x11,0xc0,
+0xe4,0x0, 0xc2,0x3a,0x94,0x6, 0x1, 0x6, 0xe8,0xf4,0x4f,0x94,0xe2,0x0, 0xcf,0x82,
+0x1, 0xb1,0x77,0x2, 0xe0,0x1, 0xd7,0x17,0xe0,0xf, 0x39,0x94,0x3b,0x68,0xe0,0x2,
+0x94,0x6f,0x77,0x81,0xe0,0x1, 0xd7,0xf, 0x57,0x2, 0x3b,0x28,0x3b,0x9e,0x94,0x17,
+0xe0,0x1, 0xd7,0x5c,0x57,0x81,0x3b,0xe8,0xe0,0x2, 0x94,0x7f,0xe0,0x1, 0xd7,0x56,
+0x3b,0xa8,0xe0,0xf, 0x39,0x94,0xe0,0x1, 0x8e,0x9f,0xe0,0x41,0x3d,0x27,0xc6,0xfd,
+0xe2,0x0, 0xce,0x81,0xe0,0x41,0x3f,0x26,0x2, 0xa3,0x8f,0xef,0xe2,0x0, 0xc9,0xb,
+0x1, 0xa4,0xe0,0x8, 0x3f,0x1a,0xe0,0x1, 0x15,0x7a,0xe1,0x28,0x3c,0x1a,0xc0,0x4,
+0xb, 0xe1,0xe0,0x1, 0xd6,0xe8,0xe0,0xf, 0x39,0x94,0x3b,0xe8,0xe0,0x2, 0x94,0x6f,
+0x77,0x81,0xe0,0x1, 0xd6,0xe0,0x3b,0xa8,0x94,0x16,0xe0,0x1, 0xd7,0x2f,0x57,0x81,
+0x3b,0x68,0xe0,0x2, 0x94,0x7f,0xe0,0x1, 0xd7,0x29,0x3b,0x28,0x0, 0xd3,0x3e,0xee,
+0x8f,0xcf,0x3f,0x6a,0x3d,0x6d,0x0, 0xdb,0xe2,0x0, 0xc9,0x1, 0x1, 0xa0,0xe0,0xd,
+0x3f,0x1a,0xe2,0x2, 0xce,0xde,0x2, 0xbd,0x16,0x84,0xe1,0x2f,0x3e,0xaf,0x27,0xbc,
+0x2a,0xbb,0x39,0x94,0x8f,0xa3,0xe0,0x2d,0x3f,0x8d,0x2e,0x85,0x16,0x88,0xe0,0x2f,
+0x3f,0x8d,0x27,0x8b,0xe0,0x0, 0x17,0xe4,0xe0,0x0, 0x14,0x64,0xe1,0x28,0x3d,0x18,
+0xe1,0x2f,0x3f,0x1f,0x3c,0x4f,0x0, 0xc4,0x17,0xbc,0x0, 0xf7,0x3c,0x6f,0xe4,0x0,
+0xc4,0xa, 0xe0,0x0, 0x16,0xe3,0x15,0x81,0xe1,0x2c,0x3e,0xa8,0xe0,0x25,0x3a,0x8b,
+0x26,0x2, 0x2a,0x91,0x16,0x32,0xe1,0x28,0x3c,0x6c,0xe6,0xa7,0xcf,0x8f,0xc7,0x81,
+0xe4,0x0, 0xc7,0x8a,0xe1,0x2d,0x3e,0xaf,0x26,0x82,0x2a,0x88,0x16,0xb2,0xe1,0x2f,
+0x3f,0xed,0x0, 0xdd,0xe0,0x0, 0x14,0x64,0x0, 0xf1,0xe0,0x0, 0x17,0xe4,0x0, 0xd7,
+0x3c,0x62,0xe7,0xff,0x0, 0x9e,0x14,0x0, 0xe7,0xff,0x0, 0x9b,0x8, 0xb6,0xe0,0x66,
+0x11,0x4, 0xe0,0xf, 0x34,0xa1,0x39,0x1f,0x89,0x82,0xe2,0x0, 0xc9,0x81,0x1, 0x9b,
+0x8f,0x92,0x27,0x97,0xc7,0xff,0xaf,0x92,0x3b,0x68,0x3a,0xe9,0xdd,0x89,0x3a,0x68,
+0x24,0x4, 0x17,0x82,0xaf,0x82,0x0, 0x88,0x3d,0xe8,0x3d,0x63,0x3c,0xe5,0x3c,0x66,
+0xdf,0x36,0x2c,0x4, 0x11,0x81,0x3c,0x63,0xb, 0x61,0xaa,0x2, 0x11,0x82,0x0, 0xfc,
+0xaf,0x82,0x0, 0xfd,0xe2,0x0, 0xc9,0x82,0x1, 0x87,0x15,0x80,0x15,0xb, 0xdf,0x27,
+0x24,0x72,0x17,0x80,0x0, 0xe8,0x11,0x80,0x0, 0xef,0x3e,0xe9,0xe4,0x0, 0xc6,0xba,
+0xe0,0x61,0x17,0xc0,0xe0,0xe, 0x3f,0x9d,0xe0,0x1, 0x8e,0x1e,0xc6,0x7d,0xe2,0x0,
+0xce,0x1, 0x2, 0xb1,0x8d,0x5e,0x8d,0xee,0xe8,0xf4,0x4e,0x14,0x14,0x1, 0xe2,0x0,
+0xce,0x0, 0x17,0x3, 0x3e,0x68,0xe0,0x6c,0x39,0x2e,0x2d,0x23,0xe1,0x2e,0x3e,0x1b,
+0x27,0x20,0x3f,0x69,0xe4,0x0, 0xc7,0xe, 0xe0,0x52,0x14,0xb8,0x3c,0x9e,0xe0,0xc,
+0x3f,0x9d,0x8f,0x79,0xe0,0x6, 0x8d,0xbc,0x3f,0x2b,0xe0,0x41,0x3f,0x2e,0xe1,0x2e,
+0x3c,0x2e,0x27,0xb, 0xe0,0x1, 0x8f,0x9, 0xe0,0x6, 0x8e,0x4c,0x3f,0x2c,0xe0,0x41,
+0x3f,0x2e,0xe1,0x2e,0x3c,0x2e,0x2f,0x6, 0x3f,0x9d,0x17,0x1, 0xe0,0x4, 0xaf,0x6f,
+0x14,0x0, 0x38,0x82,0x8d,0x3e,0x8d,0xce,0x0, 0xd0,0x8, 0xb5,0x3f,0x69,0xe4,0x0,
+0xc7,0x3a,0xe0,0x61,0x17,0xc0,0x3f,0x9e,0x3a,0x68,0x39,0xe9,0xe0,0x1, 0x8a,0x8f,
+0xdf,0xb5,0x2c,0xb, 0x39,0x68,0xe1,0x2b,0x3a,0x88,0x15,0x1, 0x3c,0xe3,0x3c,0x64,
+0xde,0xce,0xe1,0x28,0x3c,0x2, 0xa, 0xe1,0x14,0x1, 0x0, 0xfe,0x8, 0xb7,0xc0,0x78,
+0xe8,0x61,0x49,0x3f,0x29,0x20,0xe8,0xd, 0x4a,0x3, 0xe0,0x52,0x16,0xb8,0xe0,0xf,
+0x32,0x28,0xe8,0xd, 0x4a,0x4, 0x3b,0xe8,0x3a,0x4f,0x32,0x41,0x3e,0x62,0x39,0xe2,
+0x3a,0xed,0x75,0x4, 0xe8,0x56,0x4f,0x98,0x3f,0xf3,0x2, 0x90,0x57,0x84,0xe2,0x0,
+0xcf,0x82,0xe0,0x1, 0x1, 0xa0,0xe0,0x8, 0x36,0x24,0x39,0x18,0xe8,0x61,0x69,0x3f,
+0xe8,0x61,0x49,0x3f,0x3c,0x62,0xc0,0x8, 0xb, 0xe1,0x3b,0xf3,0xe0,0x0, 0x1, 0x47,
+0x3f,0xe3,0xe4,0x0, 0xc7,0x8e,0xe0,0x6, 0x3e,0x9f,0x94,0x6, 0x76,0x81,0x76,0x2,
+0xe0,0x1, 0xd5,0xc9,0x3f,0x68,0x94,0x16,0x77,0x3, 0xe0,0x1, 0xd6,0x17,0xe8,0xf4,
+0x4d,0x94,0x8f,0xc6,0xe2,0x0, 0xcd,0x81,0x56,0x81,0x56,0x2, 0x57,0x3, 0x1, 0x6,
+0xe8,0xf4,0x4d,0x94,0xe2,0x0, 0xcd,0x82,0x1, 0xae,0x3d,0xef,0xe4,0x0, 0xc5,0x86,
+0x3d,0x95,0xe0,0x3, 0xc5,0xa4,0x8d,0xb, 0x15,0x82,0xe0,0x2b,0x3d,0xb, 0x3a,0x78,
+0x5, 0xaf,0x29,0x1c,0xe2,0x1, 0xcc,0x48,0x5, 0xa0,0xe2,0x0, 0xcf,0x2d,0x5, 0x96,
+0xe8,0x12,0x55,0x6a,0xc5,0x53,0x3f,0x7a,0x3, 0x91,0xe4,0x0, 0xc7,0x86,0x3f,0x95,
+0xe0,0x3, 0xc7,0xa4,0x8f,0xf, 0xe1,0x22,0x3f,0x2, 0x21,0x5, 0xe6,0xaf,0xcf,0xfb,
+0xe0,0x0, 0x2f,0xcb,0x11,0x0, 0xe0,0x22,0x3f,0x2, 0xc1,0x81,0xe2,0x1, 0xc1,0xff,
+0xe7,0xff,0x0, 0xa2,0x15,0x80,0x0, 0xdc,0xe2,0x0, 0xcc,0x2d,0x5, 0xf7,0xe2,0x1,
+0xcf,0x48,0x5, 0xf4,0xe8,0x12,0x55,0x6a,0xe1,0xfe,0xc5,0x38,0x0, 0xdd,0x2e,0x6e,
+0xe8,0x12,0x55,0x69,0x3c,0xea,0xe1,0xfe,0xc4,0xb8,0x3c,0x79,0x3, 0x9a,0xe2,0x0,
+0xcf,0x2d,0x5, 0xe4,0xe8,0x12,0x55,0x6a,0xc5,0x53,0x3f,0x7a,0x3, 0xdf,0x3f,0x6f,
+0xe4,0x0, 0xc7,0x6, 0x3f,0x15,0xe0,0x3, 0xc7,0x24,0x8f,0xe, 0xe1,0x28,0x3f,0xc,
+0x24,0x4, 0xe6,0xaf,0xcf,0xfb,0x2f,0x9b,0x14,0x0, 0xe0,0x2c,0x3f,0x8, 0x0, 0xce,
+0xc5,0x53,0x3c,0x7a,0x3, 0xcb,0xe2,0x1, 0xcf,0x48,0x5, 0xc8,0xe8,0x12,0x55,0x6a,
+0xe1,0xfe,0xc5,0x38,0x3f,0x7a,0x3, 0xc2,0xe4,0x0, 0xc7,0x86,0x3f,0x95,0xe0,0x3,
+0xc7,0xa4,0x8f,0xf, 0x0, 0xe4,0x11,0x1, 0xe7,0xff,0x0, 0xb9,0x16,0x1, 0xe7,0xff,
+0x0, 0xb6,0xe0,0x8, 0x31,0x24,0x3c,0x1c,0xe8,0x61,0x6c,0x3f,0xe7,0xfe,0x0, 0xe2,
+0x8, 0xb7,0xc0,0x78,0xe8,0x56,0x4a,0xb1,0xe8,0x56,0x4b,0x2f,0xc2,0xff,0x3f,0xeb,
+0xe2,0x1, 0xc2,0xff,0xe0,0xaf,0x3d,0x6, 0x72,0x83,0x37,0xa1,0xe8,0x72,0x52,0xf0,
+0xe0,0x43,0x39,0xb, 0x3f,0x95,0x97,0x8f,0x3b,0x3c,0xe0,0x4, 0x37,0xcf,0x3a,0x1f,
+0xe0,0x43,0x3b,0x88,0x11,0x80,0x16,0x10,0x74,0x84,0x32,0x1, 0x3f,0xe2,0x3f,0xf7,
+0x3, 0xf, 0x57,0x84,0x16,0x90,0xe0,0x43,0x3b,0x8f,0x39,0x77,0x5, 0x2e,0xe0,0x1,
+0x14,0x7f,0xe1,0x28,0x39,0xd8,0xe2,0x1, 0xc4,0x7f,0xc0,0x8, 0xb, 0xe1,0xe2,0x0,
+0xcf,0x80,0x5, 0x1f,0xe0,0xb, 0x3f,0x96,0x35,0xa1,0x3d,0x95,0x94,0x8b,0xe0,0x40,
+0x95,0x9b,0xe0,0x2a,0x3c,0x94,0x25,0x15,0xe0,0x2a,0x3d,0x9c,0x25,0x12,0xe0,0x8,
+0x34,0x8f,0xe0,0x1, 0x34,0xcc,0x34,0x24,0xe0,0xa, 0x35,0x8f,0x3c,0x41,0x34,0xa4,
+0x76,0x1, 0x77,0x82,0xe0,0x4, 0xd3,0x7f,0x56,0x1, 0x57,0x82,0xe1,0x23,0x39,0xe9,
+0xc7,0xff,0xe0,0x43,0x3f,0x8f,0x0, 0xcc,0x57,0x83,0x39,0x7f,0x3, 0x1c,0xe0,0xf,
+0x39,0x16,0x37,0xa1,0x3f,0x95,0x94,0x8f,0x95,0x9f,0xe0,0x2f,0x3c,0x94,0x27,0x93,
+0xe0,0x2f,0x3d,0x9d,0x27,0x90,0xe0,0xf, 0x34,0x8f,0xe0,0x8, 0x34,0xcc,0x37,0xa4,
+0xe0,0xa, 0x35,0x8f,0x3c,0x4f,0x34,0xa4,0x76,0x82,0xe0,0x4, 0xd3,0x5c,0x56,0x82,
+0xe1,0x23,0x39,0xe9,0xc1,0x1, 0xe0,0x43,0x39,0x2, 0xe7,0xff,0x0, 0xb0,0xe6,0xa9,
+0xcc,0x8, 0xe0,0xf, 0x3c,0x29,0xe0,0x43,0x3f,0x8f,0x3f,0xfc,0x2, 0x2, 0x3f,0xea,
+0x3c,0x2a,0xe0,0x43,0x3c,0x8, 0x3c,0x7b,0x4, 0x2, 0x3c,0x69,0xc7,0x81,0xe0,0x8,
+0x3f,0xa8,0xe2,0x1, 0xc4,0x7f,0x38,0x82,0x8, 0xb7,0xc0,0x7e,0x3e,0xe8,0x3a,0x6a,
+0xe0,0x0, 0x2d,0xe9,0xe8,0x56,0x4f,0x31,0x3f,0xee,0xc7,0xff,0xc7,0x7e,0xe0,0x43,
+0x3f,0x8f,0xe0,0x43,0x3f,0xe, 0xe8,0x56,0x4a,0xaf,0xe0,0x43,0x3c,0xd, 0xe0,0xb,
+0x3c,0x35,0x3d,0x65,0xe5,0xff,0xc5,0x7e,0xe0,0x6, 0x3d,0x9f,0x16,0x0, 0x3d,0x9e,
+0xe8,0x72,0x50,0xf0,0x75,0x1, 0x33,0x21,0x35,0xa1,0x3c,0xed,0x39,0xec,0x39,0x6c,
+0x3d,0x68,0xe2,0x0, 0xcd,0x0, 0xe0,0x0, 0x3, 0x4a,0x3b,0x6d,0xc3,0x1, 0xe0,0x43,
+0x3b,0x6, 0xe0,0xa, 0x32,0xa1,0x3a,0xb6,0xe8,0x56,0x4e,0x30,0x3f,0x95,0x3a,0x9e,
+0xe0,0x43,0x3d,0x8c,0x37,0xa1,0x32,0xa1,0x13,0x0, 0x3f,0x6d,0xc7,0x1, 0xe2,0x1,
+0xc7,0x7f,0xe0,0x43,0x3b,0x8e,0x3d,0xf7,0xe0,0x0, 0x2, 0x4d,0xc6,0x7f,0xe0,0x43,
+0x3e,0xc, 0x15,0x80,0xe0,0x43,0x3d,0xd, 0xe0,0x43,0x3c,0x89,0xdf,0xa1,0xe4,0x0,
+0xc2,0x3a,0xe0,0x61,0x17,0xc0,0xe0,0xe, 0x3f,0x94,0x39,0x73,0xac,0x6e,0x3a,0xef,
+0xe0,0x0, 0x5, 0xce,0x3d,0xe3,0x15,0x0, 0xc5,0x81,0xe0,0x8, 0x31,0x4c,0xe0,0x9,
+0x31,0x24,0xe0,0x4, 0xd2,0xe0,0x21,0x9, 0x21,0x86,0x39,0x69,0x2c,0x4, 0xe2,0x1,
+0xcc,0xff,0x5, 0x83,0xe0,0x1, 0x11,0x7f,0xe0,0xf, 0x3a,0x94,0xa9,0x5f,0xc0,0x2,
+0xb, 0xe1,0x17,0x1, 0x17,0x80,0xe7,0xff,0x0, 0xa0,0xe0,0x7, 0x3e,0x16,0x3b,0x91,
+0x93,0x87,0xe2,0x0, 0xcb,0xe4,0xe7,0xff,0x5, 0x32,0x3c,0xea,0xe0,0xa, 0x3e,0x1b,
+0x3d,0x11,0x95,0xa, 0xe2,0x1, 0xc4,0xff,0xe2,0x0, 0xcd,0x0, 0x39,0x17,0x5, 0x2,
+0x39,0x9a,0x55,0x1, 0x3e,0x1a,0x3d,0x69,0xc5,0x7f,0xe0,0x43,0x3d,0xa, 0xe7,0xff,
+0x0, 0x9a,0xe0,0x7, 0x3b,0x1f,0x3b,0x91,0x93,0x87,0xe2,0x0, 0xcb,0xe4,0xe7,0xff,
+0x5, 0x2f,0xe0,0xd, 0x3b,0x15,0x3e,0x91,0x96,0x8d,0x39,0x17,0xe2,0x0, 0xce,0x80,
+0x5, 0x2, 0x39,0x9d,0x3b,0x1a,0x3e,0xee,0xe7,0xff,0x0, 0x99,0x14,0x0, 0x3c,0xe8,
+0xe7,0xff,0x0, 0xbb,0x8, 0xb7,0xc0,0x7c,0x3a,0x6a,0xe0,0x0, 0x2d,0xfa,0xe8,0x56,
+0x4d,0xb0,0x3e,0x6b,0xc6,0x7f,0xc5,0xfe,0xe0,0x43,0x3e,0xc, 0xe0,0x43,0x3d,0x8b,
+0xe8,0x56,0x4f,0xaf,0xe0,0x43,0x3e,0x89,0x3d,0xbf,0xe8,0x72,0x55,0x70,0xe0,0xe,
+0x3e,0x9b,0x38,0xeb,0x3f,0xbc,0x37,0x21,0x11,0x80,0xe5,0xff,0xc0,0xfe,0x3f,0x1a,
+0x37,0xa1,0x3a,0xe9,0x3b,0x6d,0x39,0x63,0xe2,0x0, 0xcb,0x0, 0xe0,0x0, 0x3, 0x5d,
+0xe8,0x56,0x4f,0x31,0x3b,0x69,0xe0,0x43,0x3b,0x8e,0x77,0x2, 0x3f,0x69,0xc7,0x1,
+0xe0,0x43,0x3f,0xe, 0x3d,0x9e,0x35,0xa1,0xe0,0xe, 0x3d,0x1b,0x3d,0xe6,0xc5,0x81,
+0xe2,0x1, 0xc5,0xff,0xe0,0x43,0x3d,0xb, 0x3d,0x77,0xe0,0x0, 0x4, 0x5e,0x3d,0xe9,
+0xe2,0x1, 0xc6,0x7f,0x3d,0x68,0x3b,0xe4,0x3c,0xe6,0x3c,0x65,0x76,0x81,0xe4,0x0,
+0xc3,0xba,0xde,0x87,0xe0,0x61,0x16,0x40,0xe0,0xe, 0x3e,0x17,0xe0,0x1, 0x8d,0xde,
+0xe0,0x1, 0xac,0x3e,0x3d,0xf8,0x3a,0x6c,0x56,0x81,0x3, 0x83,0xe0,0x1, 0xac,0x5e,
+0x15,0x80,0x56,0x2, 0xe0,0x43,0x3d,0x6, 0xc6,0x7f,0xe0,0x43,0x3c,0x85,0x3c,0x6d,
+0xe0,0x43,0x3e,0xc, 0xde,0xe5,0xe0,0xe, 0x3a,0x17,0x39,0x73,0xac,0x4e,0xe0,0x0,
+0x5, 0xc6,0x3d,0xe3,0x15,0x0, 0xc5,0x81,0xe0,0x8, 0x31,0x4c,0xe0,0x9, 0x31,0x24,
+0xe0,0x4, 0xd2,0x29,0x21,0x9, 0x21,0x86,0x39,0x69,0x2c,0x4, 0xe2,0x1, 0xcc,0xff,
+0x5, 0x83,0xe0,0x1, 0x11,0x7f,0x3a,0x17,0xa9,0x34,0xc0,0x4, 0xb, 0xe1,0x15,0x81,
+0x16,0x0, 0xe7,0xff,0x0, 0x8f,0xe0,0x7, 0x3f,0x11,0x3b,0x9f,0x93,0x87,0xe2,0x0,
+0xcb,0xe4,0xe7,0xff,0x5, 0x1f,0x3a,0xe6,0xe1,0xc0,0x93,0x1e,0xe2,0x1, 0xc2,0xff,
+0xe2,0x0, 0xcb,0x0, 0x39,0x17,0x5, 0x2, 0x39,0x96,0x3b,0x65,0xc3,0x7f,0xe0,0x43,
+0x3b,0x6, 0xe7,0xff,0x0, 0x8b,0xe0,0xa, 0x3f,0x11,0x3d,0x1f,0x95,0xa, 0xe2,0x0,
+0xcd,0x64,0xe7,0xff,0x5, 0x1e,0x39,0x1a,0xe1,0x80,0x95,0x1e,0xe2,0x0, 0xcd,0x0,
+0x5, 0x2, 0x39,0x9a,0x3b,0x6b,0xe7,0xff,0x0, 0x8b,0x14,0x0, 0x3c,0xe8,0x0, 0xc3,
+0x8, 0xb7,0x3a,0x6c,0xe4,0x0, 0xc2,0x3a,0xe0,0x61,0x17,0xc0,0xe0,0xe, 0x3f,0x94,
+0x16,0x80,0xae,0xbe,0x3a,0xe8,0xae,0xce,0x3b,0x69,0xae,0xde,0x3b,0xea,0xae,0xee,
+0x39,0xec,0xe8,0xd, 0x4f,0x3, 0x39,0x6f,0xe0,0xd, 0x37,0x28,0xe8,0xd, 0x4f,0x4,
+0x3f,0x4d,0xe0,0xd, 0x37,0x42,0x3e,0xfb,0x4, 0xb0,0x15,0x81,0x3d,0x63,0xde,0x8d,
+0xe8,0xc, 0x4f,0xf5,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0xf6,0x3f,0xce,0xe0,0xe,
+0x37,0xc2,0x3f,0x77,0x5, 0xac,0x15,0x81,0x3d,0x63,0x3c,0xe6,0x3c,0x65,0xdf,0x23,
+0xe8,0xf4,0x4f,0x94,0xe2,0x0, 0xcf,0x81,0x1, 0x6, 0xe8,0xf4,0x4f,0x94,0xe2,0x0,
+0xcf,0x82,0x1, 0x8b,0xe0,0xf, 0x39,0x14,0x8f,0x3f,0x8e,0xdf,0xaf,0x5f,0xae,0xbf,
+0x8f,0x6f,0x8e,0xcf,0xaf,0x4f,0xae,0xef,0xe0,0xf, 0x39,0x14,0x8f,0x6f,0x8e,0xcf,
+0x37,0x41,0x3f,0x1d,0xaf,0x4f,0xb, 0xe1,0x3f,0xee,0xe4,0x0, 0xc7,0x83,0x37,0xc2,
+0x3f,0xfb,0x2, 0xcf,0x3f,0x7b,0x4, 0xcd,0x15,0x80,0x0, 0xc9,0x3f,0x6f,0xe4,0x0,
+0xc7,0x3, 0x37,0x42,0x3f,0x77,0x3, 0xd5,0x3f,0xf7,0x4, 0xd3,0x15,0x80,0x0, 0xcd,
+0x8, 0xb7,0xc0,0x76,0xe4,0x0, 0xc4,0xe, 0xe0,0x52,0x11,0x38,0x39,0x18,0x94,0x2,
+0x3a,0x69,0xe8,0xf4,0x4b,0x24,0xe0,0x1, 0xd2,0xee,0x3a,0xe8,0x94,0x12,0xe4,0x0,
+0xc2,0x3a,0xe0,0x1, 0xd3,0x3b,0xe0,0x61,0x11,0xc0,0xe0,0xf, 0x39,0x94,0x16,0x80,
+0xe0,0x61,0x16,0x48,0x17,0x0, 0x3e,0x14,0xae,0x8f,0xe0,0x4, 0xae,0xef,0xb7,0xc,
+0xe0,0x1, 0xaf,0x2f,0xe0,0x1, 0xb7,0xf, 0xe0,0x1, 0xb7,0x1f,0xe8,0xf4,0x4f,0x14,
+0xe0,0x2, 0xb2,0xcf,0xe2,0x0, 0xcf,0x1, 0xe8,0x12,0x55,0x69,0xe0,0x2, 0xae,0xcf,
+0x3b,0xea,0xe0,0x2, 0xb4,0x5f,0xe1,0x22,0x3d,0x58,0xe8,0x12,0x57,0xea,0x3e,0x6f,
+0xe1,0x25,0x3f,0xd5,0x1, 0x6, 0xe8,0xf4,0x4f,0x14,0xe2,0x0, 0xcf,0x2, 0x1, 0xa8,
+0xe8,0xf4,0x4f,0x14,0xe2,0x0, 0xcf,0x1, 0x1, 0x90,0xe0,0x5, 0x3f,0xa5,0xe2,0x0,
+0xcb,0x1, 0xe0,0x1, 0x1, 0x5, 0x4, 0x91,0xe2,0x0, 0xcb,0x3, 0x1, 0x14,0xe0,0x1,
+0x13,0x2a,0xe0,0x0, 0x17,0x64,0x0, 0x8b,0xe8,0xf4,0x4f,0x14,0xe2,0x0, 0xcf,0x2,
+0x1, 0xef,0xe0,0x2, 0x3d,0x22,0x0, 0xec,0x13,0x0, 0x3f,0x66,0x3c,0xe6,0x15,0xb2,
+0x16,0x8f,0x0, 0x92,0xe0,0x1, 0x13,0x7a,0xe0,0x1, 0x17,0x16,0x0, 0xf8,0x3f,0x62,
+0x3b,0xef,0x39,0x65,0x3e,0x6a,0x3a,0xee,0xe0,0x0, 0x13,0x64,0x17,0x32,0xe0,0x1,
+0x14,0xc8,0x15,0xad,0x16,0x9e,0xe8,0xf4,0x4c,0x14,0x2c,0x1c,0x3c,0x6a,0x35,0x41,
+0x3d,0x75,0xe1,0xfe,0xc4,0x38,0xe0,0x0, 0x3, 0xd9,0x3a,0xf8,0xe0,0x0, 0x3, 0xd6,
+0xe2,0x0, 0xc9,0x2d,0x5, 0x8f,0xc7,0xd3,0x3f,0xf2,0x5, 0x8c,0x77,0x1, 0x74,0x82,
+0x75,0x83,0x76,0x84,0x76,0x5, 0xd9,0xec,0x57,0x1, 0x54,0x82,0x55,0x83,0x56,0x84,
+0x56,0x5, 0xe0,0x9, 0x3e,0x29,0x3c,0xf5,0xe0,0xf, 0x33,0x81,0x3, 0x90,0x3f,0xf2,
+0xe0,0xa, 0x39,0x94,0xe0,0x0, 0x5, 0xc5,0x14,0x81,0x3b,0xf2,0xe0,0x1, 0xac,0x8a,
+0xe0,0x0, 0x3, 0xc2,0xe0,0xe, 0x39,0x94,0x15,0x4, 0xad,0xe, 0xe0,0xe, 0x39,0x94,
+0x8d,0xe, 0x2d,0xe, 0x3f,0xf2,0xe0,0x0, 0x5, 0xd2,0x17,0x81,0x3b,0xf2,0xe0,0x1,
+0xaf,0x9e,0xe0,0x0, 0x3, 0xcf,0xe0,0xf, 0x39,0x94,0x17,0x1, 0xaf,0xf, 0xe0,0xf,
+0x39,0x94,0x8f,0xf, 0x2f,0x10,0xe0,0xe, 0x36,0x1, 0x3f,0x75,0xe0,0x0, 0x5, 0xdc,
+0x17,0x3, 0x3e,0x75,0xe0,0x1, 0xaf,0x1f,0xe0,0xf, 0x39,0x94,0xe0,0x0, 0x3, 0xd7,
+0x17,0x1, 0xaf,0xf, 0x39,0x94,0x8c,0x3, 0xc0,0xa, 0xb, 0xe1,0xe0,0x0, 0x13,0x64,
+0xe0,0x0, 0x17,0x50,0xe7,0xff,0x0, 0x8c,0x3a,0xf8,0xe7,0xff,0x5, 0xbc,0xe2,0x0,
+0xc9,0x64,0xe7,0xff,0x5, 0xb8,0xe1,0xff,0xc7,0x9c,0xe7,0xff,0x0, 0xa7,0x14,0x82,
+0xe7,0xff,0x0, 0xbd,0x3f,0x72,0x2, 0x85,0xe0,0xe, 0x3b,0xae,0x3f,0x72,0x3, 0x86,
+0xe0,0xe, 0x39,0x94,0x15,0x5, 0xe7,0xff,0x0, 0xba,0x3b,0x72,0xe0,0xe, 0x39,0x94,
+0x2, 0x85,0xe0,0x6, 0x3b,0xa6,0x3b,0x72,0x3, 0x84,0x15,0x6, 0xe7,0xff,0x0, 0xaf,
+0x15,0x0, 0xe0,0x1, 0xad,0xe, 0xe7,0xff,0x0, 0xab,0x17,0x82,0xe7,0xff,0x0, 0xb0,
+0x3e,0xf2,0x2, 0x85,0xe0,0xf, 0x3b,0xad,0x3f,0xf2,0x3, 0x86,0xe0,0xf, 0x39,0x94,
+0x17,0x2, 0xe7,0xff,0x0, 0xad,0x3d,0xf2,0xe0,0xf, 0x39,0x94,0x2, 0x84,0x3b,0xab,
+0x3b,0xf2,0x3, 0x84,0x17,0x3, 0xe7,0xff,0x0, 0xa3,0x17,0x0, 0xe0,0x1, 0xaf,0x1f,
+0xe7,0xff,0x0, 0x9f,0x17,0x4, 0xe7,0xff,0x0, 0xa6,0x17,0x0, 0xe0,0x1, 0xaf,0x1f,
+0xe7,0xff,0x0, 0xaa,0x8, 0xb5,0x3a,0x69,0x3a,0xe8,0x39,0xe4,0xde,0xda,0xe4,0x0,
+0xc1,0xba,0xe4,0x0, 0xc2,0x8e,0x39,0x68,0xe0,0x52,0x14,0xb8,0xe0,0x61,0x14,0x6c,
+0x15,0xe, 0x3c,0x95,0x3c,0x13,0xe0,0x4, 0xd0,0x78,0x29,0x4, 0x11,0x0, 0x3c,0x62,
+0xa, 0xe1,0x3c,0x64,0xd9,0x8e,0x3c,0x64,0xd9,0xf8,0x24,0x7, 0xe0,0x61,0x11,0x40,
+0x39,0x13,0x17,0x84,0xaf,0xa2,0x0, 0x90,0xe2,0x0, 0xc9,0x1, 0x1, 0x86,0xe0,0x61,
+0x17,0xc0,0x39,0x9f,0xa9,0x23,0x0, 0xec,0xe2,0x0, 0xc9,0x2, 0x1, 0x87,0xe0,0x61,
+0x17,0xc0,0x39,0x9f,0xa9,0x23,0x11,0x1, 0x0, 0xe3,0xe2,0x0, 0xc9,0x3, 0x1, 0x8b,
+0x3c,0x64,0xda,0x2a,0x24,0x5c,0xe0,0x61,0x17,0xc0,0x39,0x9f,0x17,0x82,0xa9,0x23,
+0xaf,0xf3,0x0, 0xf2,0xe2,0x0, 0xc9,0x4, 0x1, 0x86,0xe0,0x61,0x11,0x40,0x39,0x13,
+0x17,0x85,0x0, 0xd9,0xe2,0x0, 0xc9,0x5, 0x1, 0x90,0xe0,0x61,0x11,0x40,0x17,0x86,
+0x39,0x13,0xaf,0xa2,0xe8,0xf4,0x4f,0x94,0x27,0xdf,0xe8,0x25,0x4f,0x92,0xe2,0x0,
+0xcf,0x9d,0x2, 0xda,0x17,0x88,0x0, 0xc7,0xe2,0x0, 0xc9,0x6, 0xe7,0xff,0x1, 0xb8,
+0xe8,0xf4,0x4f,0x94,0xe0,0x61,0x11,0x40,0x27,0x88,0xe8,0x25,0x4f,0x92,0xe2,0x0,
+0xcf,0x9d,0x2, 0x83,0x39,0x13,0x0, 0xef,0x3c,0x64,0xd9,0xf6,0x17,0x87,0x39,0x13,
+0xaf,0xa2,0x24,0x5, 0x17,0x84,0xaf,0xf2,0xe7,0xff,0x0, 0xbf,0x17,0x82,0x0, 0xfc,
+0x8, 0xb5,0x3a,0xe8,0x3c,0x69,0x39,0x69,0x3a,0x6a,0xd9,0x97,0x24,0xd, 0xe4,0x0,
+0xc1,0x3a,0xe0,0x61,0x17,0xc0,0x39,0x1f,0x22,0x5, 0x17,0x88,0xaf,0xa2,0x14,0x1,
+0x0, 0x91,0x17,0x84,0x0, 0xfc,0x39,0xe8,0x3d,0x68,0x3d,0xe4,0x3c,0xe2,0x3c,0x65,
+0xda,0x16,0x24,0x76,0xe4,0x0, 0xc1,0x3a,0xe0,0x61,0x17,0xc0,0x39,0x1f,0x14,0x2,
+0xa9,0xa2,0xa, 0xe1,0x8, 0xb5,0x3a,0xe8,0x3c,0x69,0x39,0x69,0x3a,0x6a,0xd9,0x75,
+0x24,0xd, 0xe4,0x0, 0xc1,0x3a,0xe0,0x61,0x17,0xc0,0x39,0x1f,0x22,0x5, 0x17,0x88,
+0xaf,0xa2,0x14,0x1, 0x0, 0x91,0x17,0x84,0x0, 0xfc,0x39,0xe8,0x3d,0x68,0x3d,0xe4,
+0x3c,0xe2,0x3c,0x65,0xd9,0xf4,0x24,0x76,0xe4,0x0, 0xc1,0x3a,0xe0,0x61,0x17,0xc0,
+0x39,0x1f,0x14,0x2, 0xa9,0xa2,0xa, 0xe1,0x8, 0xb7,0x3a,0x69,0x3b,0xe8,0x3c,0x69,
+0x3b,0x6a,0x39,0xe4,0xd9,0x52,0xe0,0x61,0x11,0x40,0xe4,0x0, 0xc1,0xba,0x24,0x9,
+0x39,0x13,0x23,0x5, 0x17,0x88,0xaf,0xa2,0x14,0x1, 0xb, 0xe1,0x17,0x84,0x0, 0xfc,
+0x3c,0x64,0xd9,0x92,0x3a,0xe8,0x24,0x5, 0x39,0x13,0x17,0x82,0xaf,0xf2,0x0, 0xf5,
+0x3d,0x68,0x3d,0xe6,0x3c,0xe4,0x3c,0x67,0xd9,0xca,0x39,0x13,0x24,0x4, 0xaa,0xa2,
+0x14,0x2, 0x0, 0xec,0x8f,0xf2,0x27,0x83,0xc7,0xff,0x0, 0xf1,0xaf,0xa2,0x0, 0xf9,
+0x8, 0xb2,0x3c,0x69,0x39,0x69,0xd9,0x29,0x24,0x8, 0xe4,0x0, 0xc1,0x3a,0xe0,0x61,
+0x14,0xc0,0x39,0x19,0x17,0x88,0xaf,0xa2,0x14,0x1, 0x9, 0x61,0x8, 0xb7,0xc0,0x7e,
+0x3b,0xe9,0xe4,0x0, 0xc3,0xba,0xe0,0x61,0x11,0xc0,0xe0,0xf, 0x39,0x97,0x8f,0xaf,
+0x3a,0x68,0xc7,0xff,0x3f,0x6f,0xe2,0x1, 0xc7,0x7f,0xe2,0x0, 0xcf,0x8, 0x3a,0xe9,
+0x2, 0x88,0x37,0xa8,0x37,0xc7,0xe0,0x23,0x17,0x42,0x3f,0x9e,0x97,0x8f,0x3f,0x82,
+0x11,0x0, 0xe0,0xe, 0x39,0x97,0xe0,0x1, 0x8f,0x8e,0xc7,0xff,0xe2,0x0, 0xcf,0x81,
+0xe0,0x0, 0x2, 0xeb,0x8f,0xae,0xe2,0x0, 0xcf,0x88,0xe0,0x0, 0x1, 0x66,0xe0,0x1,
+0x8f,0x2e,0x27,0x5, 0xe2,0x0, 0xcf,0x89,0xe0,0x0, 0x1, 0xdf,0xe0,0x6, 0x39,0x97,
+0x17,0x1, 0xe0,0x1, 0xaf,0x26,0x16,0x9e,0xe8,0xf4,0x4f,0x14,0xe2,0x0, 0xcf,0x0,
+0x17,0x30,0xe0,0x6e,0x39,0xad,0x8e,0x96,0x3e,0xfe,0xe0,0x0, 0x3, 0xf5,0xe8,0xf4,
+0x4d,0x14,0x3c,0xe5,0x3c,0x64,0xda,0xa3,0xe8,0xf4,0x4f,0x14,0x3f,0xe8,0x2f,0x2e,
+0x24,0x20,0x17,0x88,0xaf,0xa6,0xe0,0x0, 0x0, 0xd7,0x15,0x0, 0x3c,0xe5,0x3c,0x64,
+0xdf,0x30,0x0, 0x85,0x15,0x0, 0x3c,0xe5,0x3c,0x64,0xdf,0x4d,0x39,0x68,0x0, 0xc2,
+0x15,0x0, 0x3c,0xe5,0x3c,0x64,0xdf,0x69,0x0, 0xfa,0x15,0x1, 0x0, 0xf0,0x15,0x1,
+0x0, 0xf3,0x15,0x1, 0x0, 0xf7,0xdf,0x8d,0x0, 0xf2,0x11,0x1, 0xe7,0xff,0x0, 0xb3,
+0x3d,0x68,0x15,0x81,0x3c,0xe5,0x3c,0x64,0x77,0x81,0xd9,0x41,0x57,0x81,0x24,0x4,
+0xaf,0xa6,0x11,0x2, 0x0, 0x99,0x17,0x89,0x0, 0xd6,0xe8,0xf4,0x4f,0x14,0xe2,0x0,
+0xcf,0x1, 0x1, 0x6, 0xe8,0xf4,0x4f,0x14,0xe2,0x0, 0xcf,0x2, 0x1, 0x8d,0xe0,0xe,
+0x39,0x97,0xe0,0x1, 0x89,0xe, 0xe2,0x0, 0xc9,0x1, 0x1, 0x95,0xe2,0x1, 0xc7,0xf0,
+0x27,0x9c,0x17,0x88,0xaf,0xae,0x39,0x97,0x8f,0xa3,0x27,0xb9,0x3c,0x65,0xd8,0x21,
+0x3c,0xe5,0x3c,0x64,0xda,0x3b,0x24,0x4, 0x17,0x80,0x11,0x2, 0xaf,0xa3,0x3c,0x62,
+0xc0,0x2, 0xb, 0xe1,0xe2,0x0, 0xc9,0x2, 0x1, 0x88,0xe6,0xac,0xcf,0xcf,0x27,0x85,
+0x17,0x88,0xaf,0xae,0x11,0x1, 0x0, 0xe8,0x15,0x81,0x15,0x0, 0x3c,0xe5,0x3c,0x64,
+0xd9,0x6, 0xe0,0xf, 0x39,0x97,0x24,0x4, 0x17,0x0, 0xaf,0x2f,0x0, 0xc3,0x17,0x9,
+0xaf,0x2f,0x0, 0xf1,0xe2,0x0, 0xcf,0x89,0x1, 0xd7,0x8f,0x86,0xe2,0x0, 0xcf,0x86,
+0x1, 0x85,0x17,0x80,0x11,0x3, 0xaf,0xa6,0x0, 0xcf,0xe2,0x0, 0xcf,0x85,0x1, 0x7a,
+0xe2,0x0, 0xcf,0x84,0x1, 0xc9,0x17,0x85,0xe7,0xff,0x0, 0x86,0xe4,0x0, 0xc2,0xe,
+0xe0,0x52,0x17,0xb8,0x3a,0x1f,0x94,0x4, 0xe0,0x1, 0xd0,0x15,0xe0,0x2, 0xb4,0x43,
+0x94,0x14,0xe0,0x1, 0xd0,0x63,0xe0,0x2, 0xb4,0x53,0x0, 0xc2,0xe4,0x0, 0xc4,0x3a,
+0xe8,0xf4,0x4f,0x94,0xe0,0x61,0x17,0x40,0x3c,0x1e,0x2f,0x9b,0xe0,0x1, 0x8f,0x58,
+0xe2,0x0, 0xcf,0x33,0x5, 0x9c,0xe0,0x1, 0x96,0x88,0xe0,0x1, 0x97,0x18,0xe0,0x2c,
+0x3e,0x9f,0x26,0x17,0xe0,0x2c,0x3f,0x1f,0x26,0x14,0x37,0x21,0x16,0x3, 0xe0,0x2e,
+0x3f,0x3c,0x3e,0xfe,0x3, 0x10,0x8c,0x38,0x17,0x9d,0xe1,0x28,0x3c,0x1f,0x38,0x82,
+0xe0,0x1, 0x8f,0xe8,0x14,0x27,0xe1,0x28,0x3c,0x2f,0x0, 0xfa,0x14,0x1, 0x0, 0xf8,
+0x14,0x0, 0x0, 0xf6,0x3c,0x6f,0x0, 0xf4,0x8, 0xb7,0xc0,0x7e,0xe8,0xf4,0x4f,0x94,
+0x2f,0x85,0x11,0x0, 0x3c,0x62,0xc0,0x2, 0xb, 0xe1,0xe8,0xd, 0x49,0x83,0x3a,0x68,
+0xe0,0xf, 0x31,0xa8,0xe8,0xd, 0x49,0x84,0x11,0x0, 0x39,0xcf,0x31,0xc1,0xe0,0x52,
+0x13,0xb8,0xe0,0x1, 0x17,0x16,0xe8,0x56,0x4f,0x98,0x3f,0xf2,0x2, 0xa3,0x11,0x0,
+0xe4,0x0, 0xc2,0x3a,0xe0,0x61,0x17,0xc0,0x3a,0x1f,0xe0,0x2, 0x94,0x64,0xe0,0x0,
+0xdf,0xba,0x39,0xe8,0xe0,0x2, 0x94,0x74,0xe0,0x1, 0xd0,0x8, 0xe8,0xf4,0x4f,0x94,
+0xe2,0x0, 0xcf,0x81,0xe0,0x0, 0x1, 0xd7,0xe2,0x0, 0xc9,0x1, 0xe0,0x0, 0x1, 0xc2,
+0xe0,0x1, 0x17,0x95,0xe1,0x23,0x3f,0xa3,0xe1,0x2f,0x3f,0xa8,0xe0,0x2, 0x39,0xdf,
+0x0, 0xca,0x3b,0x62,0xe4,0x0, 0xc3,0xe, 0x3b,0x17,0x94,0x6, 0x77,0x1, 0xe0,0x0,
+0xdf,0x9a,0x3a,0xe8,0x94,0x16,0xe0,0x0, 0xdf,0xe9,0x57,0x1, 0xe1,0x2f,0x3c,0x1e,
+0x27,0x8f,0xe1,0x2f,0x39,0xa8,0x27,0x8c,0xe2,0x1, 0xca,0x96,0x5, 0x9a,0xe8,0x12,
+0x57,0xea,0xe1,0xfe,0xc7,0xea,0x3a,0xff,0x3, 0x94,0x11,0x1, 0x0, 0xc2,0x39,0xf8,
+0x3, 0x90,0xe8,0x12,0x57,0xe9,0xe1,0xfe,0xc7,0xea,0x3c,0x7f,0x3, 0x8a,0xe2,0x1,
+0xca,0x96,0x5, 0x87,0xe8,0x12,0x57,0xea,0xe1,0xfe,0xc7,0xea,0x3a,0xff,0x4, 0x86,
+0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe7,0xff,0x0, 0xa8,0x11,0x2, 0xe7,0xff,0x0, 0xaa,
+0xe2,0x0, 0xc9,0x2, 0xe7,0xff,0x1, 0x8f,0xe2,0x1, 0xc9,0x95,0xe7,0xff,0x2, 0x8b,
+0xe8,0x12,0x57,0xe9,0xe1,0xfe,0xc7,0xea,0x3c,0x7f,0xe7,0xff,0x5, 0x84,0xe7,0xff,
+0x0, 0x83,0xe8,0xf4,0x4f,0x94,0xe2,0x0, 0xcf,0x82,0xe7,0xfe,0x1, 0xfc,0xe2,0x0,
+0xc9,0x1, 0x1, 0x8f,0xe8,0x12,0x57,0xea,0xe1,0xfe,0xc7,0xea,0x39,0xff,0xe7,0xfe,
+0x5, 0xf2,0xe2,0x1, 0xcc,0x15,0xe7,0xfe,0x2, 0xee,0x11,0x3, 0xe7,0xfe,0x0, 0xec,
+0xe2,0x0, 0xc9,0x2, 0xe7,0xfe,0x1, 0xe7,0xe8,0x12,0x57,0xea,0xe1,0xfe,0xc7,0xea,
+0x39,0xff,0xe7,0xfe,0x5, 0xe0,0xe8,0x12,0x57,0xe9,0xe1,0xfe,0xc7,0xea,0x3c,0x7f,
+0xe7,0xfe,0x5, 0xd9,0x11,0x4, 0xe7,0xfe,0x0, 0xd7,0x8, 0xb5,0x3a,0xe8,0xe4,0x0,
+0xc2,0xba,0xe0,0x61,0x17,0xc0,0xe0,0xe, 0x3f,0x95,0x8e,0xae,0x39,0xef,0x3e,0x6d,
+0xe2,0x1, 0xc6,0x7b,0xe2,0x0, 0xce,0x1, 0x1, 0x2a,0xe2,0x0, 0xce,0x2, 0x3a,0x68,
+0x1, 0xb4,0x8f,0x9e,0xe2,0x0, 0xcf,0xbb,0x2, 0xa2,0xe0,0x2, 0x94,0x6e,0xe0,0x0,
+0xdf,0x12,0xe2,0x0, 0xcc,0xe, 0x5, 0x8b,0xe8,0xc, 0x4f,0xf5,0xe0,0xe, 0x37,0xa8,
+0xe8,0xc, 0x4f,0xf6,0x3f,0xce,0xc7,0xf0,0x3f,0xf8,0x3, 0x86,0x3c,0x64,0xde,0xf7,
+0xe2,0x0, 0xcc,0x1, 0x1, 0xc, 0xe8,0xf4,0x4f,0x80,0x11,0x4, 0xe2,0x0, 0xcf,0x80,
+0x17,0x88,0xe0,0x62,0x39,0xaf,0x3c,0x64,0xdf,0x18,0x24,0x2, 0x11,0x8, 0xe0,0xf,
+0x39,0x95,0x17,0x0, 0x3c,0x62,0xaf,0x1f,0xaf,0x2f,0xe0,0x1, 0xaf,0x5f,0xe0,0x1,
+0xaf,0x6f,0xe0,0x4, 0xaf,0x6f,0xa, 0xe1,0xe2,0x0, 0xce,0x3, 0x1, 0x8a,0xe8,0xf4,
+0x4f,0x80,0x11,0x4, 0xe2,0x0, 0xcf,0x80,0x17,0x88,0xe0,0x62,0x39,0xaf,0x0, 0xe5,
+0x11,0x4, 0xe0,0x2f,0x3e,0x82,0x2f,0xe3,0x17,0x88,0xe0,0x2c,0x3e,0x8f,0x2e,0x5f,
+0xe2,0x0, 0xce,0x89,0x1, 0xa7,0xe8,0xf4,0x4e,0x80,0xe2,0x0, 0xce,0x80,0xe0,0x62,
+0x39,0xaf,0x8f,0x9e,0xe2,0x0, 0xcf,0xbb,0x2, 0xcf,0xe0,0x2, 0x94,0x6e,0xe0,0x0,
+0xde,0xc2,0xe2,0x0, 0xcc,0xe, 0x5, 0x8c,0xe8,0xc, 0x4f,0xf5,0xe0,0xe, 0x37,0xa8,
+0xe8,0xc, 0x4f,0xf6,0x3f,0xce,0xc7,0xf0,0x3f,0xf8,0xe7,0xff,0x3, 0xbe,0x3c,0x64,
+0xde,0xa6,0xe2,0x0, 0xcc,0x1, 0x17,0x88,0xe0,0x6f,0x39,0xa2,0x39,0x6f,0xe7,0xff,
+0x0, 0xb4,0xe8,0xf4,0x49,0x14,0xe7,0xff,0x21,0x34,0xe8,0xf4,0x4f,0x94,0xe2,0x0,
+0xcf,0x81,0x1, 0x99,0xe0,0x2, 0x97,0xce,0xe2,0x1, 0xcf,0xfa,0x5, 0x87,0x17,0x80,
+0xe8,0x25,0x6f,0x92,0x11,0x0, 0xe7,0xff,0x0, 0xa4,0xe0,0x2, 0x97,0x5e,0xe2,0x1,
+0xcf,0x7a,0x5, 0x87,0xe8,0x12,0x57,0xe9,0xe1,0xfe,0xc7,0x86,0x3f,0x7f,0x4, 0xf0,
+0x17,0xff,0x0, 0xef,0xe8,0xf4,0x4f,0x94,0xe2,0x0, 0xcf,0x82,0x1, 0x8e,0xe8,0x12,
+0x57,0xea,0xe0,0x2, 0x97,0x4e,0xe1,0xfe,0xc7,0x86,0x3f,0x7f,0x4, 0xe1,0xe0,0xf,
+0x39,0x95,0xe0,0x2, 0x97,0x5f,0x0, 0xe4,0x39,0x6c,0xe7,0xff,0x0, 0x82,0xe8,0x56,
+0x4e,0x98,0x26,0x9e,0x8, 0xb1,0x3f,0xe8,0xe4,0x0, 0xc7,0x8e,0xc6,0xff,0xe0,0x52,
+0x17,0x38,0x3f,0x9e,0xe8,0x56,0x6e,0x98,0x16,0xff,0xae,0xcf,0x3f,0xe9,0xe4,0x0,
+0xc7,0x86,0x3c,0x69,0x3f,0x1f,0xe0,0x3, 0xc7,0x24,0x17,0x83,0xaf,0x8e,0xe0,0x2,
+0xd5,0x50,0xe8,0x61,0x4f,0xbe,0xc7,0x81,0xe8,0x61,0x6f,0xbe,0x8, 0xe1,0x38,0x82,
+0xe0,0x52,0x16,0xb8,0xe8,0xb, 0x4d,0xe9,0x17,0x0, 0x3f,0xed,0x3e,0x6e,0xe2,0x1,
+0xc6,0x7f,0x3d,0xfc,0x2, 0x82,0x38,0x82,0x8d,0x4d,0x3e,0x6e,0x3d,0x78,0xc7,0x1,
+0xc6,0x8e,0x1, 0xf5,0x8, 0xb2,0x3f,0x6c,0xe4,0x0, 0xc7,0xe, 0xe0,0x61,0x14,0xec,
+0x3f,0x9e,0x3f,0x68,0xe4,0x0, 0xc7,0x3a,0x39,0x68,0x3c,0x9e,0x15,0xe, 0x3c,0x6f,
+0xe0,0x3, 0xdc,0xe3,0x3f,0xe8,0x16,0x81,0xe0,0xf, 0xd, 0x8c,0x3d,0x62,0x14,0x80,
+0x3c,0x6d,0xe0,0x2, 0xd4,0xce,0xe8,0x56,0x4f,0x98,0x3c,0x62,0xc7,0x81,0xe8,0x56,
+0x6f,0x98,0x9, 0x21,0xe0,0x4a,0x0, 0x95,0x3e,0x68,0xe4,0x0, 0xc6,0x6, 0xe0,0x52,
+0x17,0xb8,0xe0,0xe, 0x3f,0x9c,0xe0,0x3, 0xc7,0x24,0x8f,0xe, 0xe2,0x0, 0xcf,0x1,
+0x1, 0x90,0xe8,0x56,0x4f,0x18,0x15,0xff,0x3e,0xee,0xe4,0x0, 0xc6,0x8e,0x3e,0x9f,
+0xe2,0x0, 0xcf,0x9, 0x5, 0x87,0x3f,0x9c,0xe0,0x3, 0xc7,0xa4,0x17,0x3, 0xaf,0xf,
+0x38,0x82,0x8d,0x4d,0x3d,0x78,0x1, 0x82,0xad,0xcd,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,
+0xc6,0x8e,0x0, 0xef,0x8, 0xb7,0xe1,0xfe,0xc0,0x72,0x39,0x60,0xe0,0x52,0x12,0x38,
+0xc1,0x4, 0xe0,0x53,0x12,0xc4,0x3f,0xe2,0x39,0xe4,0x13,0xe, 0x3c,0xe4,0x3c,0x6f,
+0x3d,0x66,0xe0,0x3, 0xdc,0x9a,0xc2,0xe, 0x3a,0x75,0x3f,0xe8,0xc7,0x8e,0x1, 0xf7,
+0xe0,0x1, 0x15,0xc, 0xe0,0x1, 0x14,0xff,0xe0,0x52,0x14,0x38,0xe0,0x3, 0xdc,0xd9,
+0x3a,0xe2,0x13,0x0, 0xe0,0x1, 0xc2,0x8c,0x3b,0xe6,0x17,0x7d,0x12,0xe, 0x8f,0xc2,
+0xe2,0x1, 0xcf,0xff,0x1, 0x17,0xe4,0x0, 0xc7,0x86,0x3f,0x93,0xe0,0x3, 0xc7,0xa4,
+0x8f,0x8f,0xe0,0xd, 0x3f,0xde,0x2e,0x94,0x3c,0x67,0xe4,0x0, 0xc4,0xe, 0xc3,0x81,
+0x3d,0x64,0x3c,0xe2,0x3c,0x13,0xe2,0x1, 0xc3,0xff,0x77,0x1, 0xe0,0x3, 0xdc,0x6d,
+0x57,0x1, 0xc1,0xe, 0x39,0x75,0x1, 0xe4,0xe0,0x1, 0xc0,0xe, 0xb, 0xe1,0xe2,0x0,
+0xcf,0x81,0x1, 0xf8,0xe8,0x56,0x4c,0x18,0x3d,0x64,0x3c,0x16,0xe4,0x0, 0xc4,0xe,
+0xc3,0x1, 0x3c,0xe2,0x3c,0x13,0xe2,0x1, 0xc3,0x7f,0x77,0x1, 0xe0,0x3, 0xdc,0x55,
+0x0, 0xe8,0x8, 0xb4,0x39,0xe8,0xc1,0xff,0x3a,0x63,0x11,0x0, 0xe0,0x80,0x8f,0x94,
+0xe2,0x0, 0xcf,0x84,0x1, 0x83,0x3c,0x62,0xdf,0x44,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,
+0xe2,0x0, 0xc9,0xa, 0x1, 0xf4,0x11,0x0, 0xe0,0x80,0x8f,0x93,0xe2,0x0, 0xcf,0x88,
+0x1, 0x83,0x3c,0x62,0xdf,0x6a,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe2,0x0, 0xc9,0xa,
+0x1, 0xf4,0xa, 0x21,0xe7,0xff,0x0, 0x88,0x8, 0xb7,0x3d,0x69,0xe4,0x0, 0xc5,0x3a,
+0xe0,0x61,0x17,0xc0,0xe0,0x1, 0x3f,0x9a,0xe4,0x0, 0xc4,0xe, 0xe0,0x1, 0x92,0xf1,
+0xe0,0x2, 0x95,0x91,0xe0,0x52,0x16,0x38,0xe0,0xe, 0x3e,0x18,0xe0,0x41,0x3b,0x25,
+0xe0,0x41,0x39,0x2b,0x92,0xe, 0x91,0x9e,0xe0,0x1, 0x96,0xd1,0xe0,0x1, 0x97,0x61,
+0x3b,0x72,0xe0,0xd, 0x3a,0x2d,0xe0,0xe, 0x39,0xae,0xe0,0x1, 0x4, 0x0, 0xe0,0xc,
+0x36,0xcf,0x3e,0x1d,0x36,0x1, 0xe0,0x41,0x3b,0xac,0x39,0x77,0xe0,0x6c,0x3b,0x2b,
+0x3d,0xec,0xe0,0x41,0x3e,0x2c,0x3b,0x7c,0x3e,0x65,0xe0,0x6c,0x3b,0x2b,0x3a,0xac,
+0x3d,0xec,0xe0,0x1, 0xb2,0xf1,0x3d,0x1f,0xe0,0x2, 0x90,0x8a,0xe0,0x2, 0x96,0x2a,
+0xe0,0x41,0x3b,0x21,0xe0,0x41,0x3a,0xac,0x3b,0x75,0xe0,0x0, 0x4, 0x63,0xe0,0xa,
+0x37,0x4f,0x3d,0x1e,0x35,0x1, 0xe0,0x41,0x3b,0xaa,0x3a,0xf7,0xe0,0x6a,0x3b,0x2c,
+0x3e,0x6a,0xe0,0x41,0x3d,0x2a,0x3b,0x7a,0x3d,0x61,0x3b,0x69,0xe0,0x6a,0x3b,0x2c,
+0xe4,0x0, 0xc3,0x3a,0x3e,0x6a,0xe0,0x61,0x15,0x40,0x3d,0x16,0x38,0xac,0xe0,0x2,
+0xb0,0x8a,0xe4,0x0, 0xc4,0xba,0xe0,0xa, 0x3f,0x99,0xe0,0x1, 0x90,0xba,0x3e,0x91,
+0x3d,0x9d,0xe0,0x1, 0x96,0xca,0x3f,0x1d,0xe8,0xc, 0x4e,0xf5,0x3f,0x1c,0xe0,0xa,
+0x36,0xa8,0xe8,0xc, 0x4e,0xf6,0x16,0x0, 0xe0,0x2b,0x3d,0xec,0x3e,0xca,0x3e,0xfb,
+0x2, 0x83,0xe8,0x12,0x55,0xea,0xe0,0x2c,0x3f,0x6c,0xe8,0xd, 0x4f,0x3, 0xe0,0xd,
+0x37,0x28,0xe8,0xd, 0x4f,0x4, 0x3f,0x4d,0x3f,0x7c,0x2, 0x83,0xe8,0x12,0x56,0x69,
+0x3f,0x99,0xe0,0x52,0x17,0x38,0x3c,0x1e,0xe0,0x1, 0x97,0x7f,0xe0,0x8, 0xd, 0x9c,
+0xe0,0x41,0x3f,0x2e,0x39,0x7e,0xe0,0x1, 0xb5,0xbf,0xe0,0x1, 0xb6,0x4f,0xe0,0x1,
+0xb2,0x5f,0xe0,0x1, 0xb1,0xef,0x5, 0x9, 0xe0,0x2, 0x97,0xf, 0xe0,0x41,0x3f,0x2e,
+0x3a,0xfe,0x5, 0x3, 0x17,0x0, 0xaf,0x2f,0xb, 0xe1,0x15,0x80,0xe7,0xff,0x0, 0x95,
+0x16,0x0, 0xe7,0xff,0x0, 0xb8,0x8, 0xb5,0xe4,0x0, 0xc4,0xe, 0xe0,0x52,0x17,0xb8,
+0x3a,0x69,0xe0,0xd, 0x3f,0x98,0xe4,0x0, 0xc2,0x3a,0x97,0xd, 0x96,0x1d,0xe0,0x61,
+0x11,0x40,0xe0,0xb, 0x39,0x14,0xe8,0xf4,0x4e,0x94,0xe0,0x1, 0xb7,0x5b,0x3a,0xe9,
+0xe0,0x1, 0xb6,0x6b,0xe0,0x2, 0x91,0xfb,0x2e,0x83,0x39,0x9c,0x31,0xc1,0xe0,0xd,
+0x39,0x14,0xe0,0x2, 0x95,0xed,0x3e,0x23,0x3f,0x2b,0x15,0x8c,0xe0,0x2b,0x3f,0x3b,
+0xe0,0x1, 0xb7,0x7d,0xe0,0x2, 0xb6,0xd, 0x25,0xb4,0xe0,0xe, 0x39,0x14,0xe0,0x2,
+0xb5,0x9e,0xe0,0xd, 0x39,0x14,0xe0,0x2, 0x97,0x1d,0xe2,0x0, 0xcf,0x0, 0x5, 0x33,
+0xe2,0x0, 0xcf,0x2, 0x2, 0x4, 0x17,0x3, 0xe0,0x2, 0xb7,0x1d,0x17,0xc, 0xe0,0x2e,
+0x3e,0x3e,0x27,0x2f,0xe0,0xd, 0x39,0x14,0xe0,0x2, 0xb7,0x2d,0x3f,0x98,0xe0,0x61,
+0x14,0xec,0x3c,0x94,0x15,0xe, 0x3c,0x6f,0xe0,0x3, 0xdb,0x3f,0x3c,0xe5,0xe4,0x0,
+0xc4,0x86,0xe0,0x55,0x17,0x5c,0x3c,0x9e,0xb1,0x98,0x17,0x0, 0xb7,0x9, 0x39,0x14,
+0x97,0x88,0x17,0xa, 0xe0,0x1, 0xb1,0xc2,0xaf,0x22,0xe0,0x1, 0xb7,0xb2,0xa, 0xe1,
+0xe2,0x0, 0xcf,0x0, 0x5, 0x5, 0x17,0x1, 0xe0,0x2, 0xb7,0x1d,0x0, 0xcb,0x27,0x46,
+0x17,0x7f,0x0, 0xfb,0x27,0x54,0xe3,0xff,0xcf,0x7e,0x4, 0x51,0x17,0x7d,0x0, 0xcd,
+0xe2,0x0, 0xce,0x0, 0x5, 0x7, 0xe0,0xe, 0x39,0x14,0x16,0x81,0xe0,0x2, 0xb6,0xae,
+0x0, 0xce,0x26,0x49,0xe0,0xe, 0x39,0x14,0x16,0xff,0x0, 0xf9,0x8, 0xb7,0x13,0x0,
+0x39,0x68,0xe8,0x56,0x49,0x98,0xe0,0x52,0x13,0xb8,0xc1,0x7f,0xe0,0x55,0x12,0x5c,
+0x3a,0xe6,0x3b,0x73,0x1, 0x82,0xb, 0xe1,0xe0,0x80,0x8f,0x92,0x8c,0xc7,0xe2,0x0,
+0xcf,0x81,0xe6,0xac,0xcc,0xc9,0x1, 0x88,0x3c,0x66,0xdd,0xd2,0xc3,0x1, 0xe2,0x1,
+0xc3,0x7f,0xc3,0x8e,0x0, 0xef,0xe2,0x0, 0xcf,0x82,0x1, 0x84,0x3c,0x66,0xdf,0x64,
+0x0, 0xf6,0xe2,0x0, 0xcf,0x83,0x1, 0xf3,0xe4,0x0, 0xc4,0x86,0x3c,0x94,0xb2,0x89,
+0x0, 0xee,0xe8,0xf4,0x4f,0xd8,0x17,0x0, 0xe2,0x0, 0xcf,0x81,0xe8,0x61,0x6f,0x3e,
+0xe0,0x1, 0x1, 0x1e,0x8, 0xb7,0xc0,0x66,0xe8,0x25,0x4f,0x92,0xe8,0x61,0x6f,0x3f,
+0xe2,0x1, 0xcf,0xff,0x1, 0x4, 0xc7,0x81,0xe8,0x25,0x6f,0x92,0xe0,0x52,0x12,0xb8,
+0xef,0xff,0xd3,0xa8,0x11,0x0, 0x3b,0xe5,0xe8,0x56,0x4f,0x98,0x3f,0xf2,0x2, 0xb1,
+0x3c,0x60,0xc4,0x12,0x3a,0x60,0x11,0x0, 0xdf,0xb2,0xc2,0x8, 0x3a,0xe2,0xe0,0x66,
+0x11,0x84,0x3f,0xe2,0xe4,0x0, 0xc7,0x86,0x3b,0x62,0xe0,0x3, 0xc7,0xa4,0x3f,0x97,
+0x8f,0x8f,0xe1,0x80,0xaa,0x94,0xe2,0x0, 0xcf,0x81,0xe2,0x1, 0xc3,0x7f,0x1, 0x90,
+0x3c,0x66,0xdc,0xcc,0xe0,0x40,0xac,0x14,0x2c,0x6, 0x3c,0x66,0xef,0xff,0xd3,0x44,
+0xe0,0x40,0xac,0x14,0xe0,0xf, 0x31,0x21,0x3f,0x93,0xaa,0x8f,0xaa,0x9f,0xc1,0x1,
+0xe2,0x0, 0xc9,0xa, 0x1, 0xdf,0x3c,0x60,0xc4,0x8, 0xde,0x44,0xc0,0x1a,0xb, 0xe1,
+0x3a,0x62,0xe4,0x0, 0xc2,0xe, 0x3a,0x15,0x89,0xc4,0xe0,0x1, 0x8c,0x84,0xe6,0xac,
+0xc9,0xc3,0x3f,0xe3,0xe4,0x0, 0xc7,0x86,0x94,0x4, 0x3f,0x95,0xe0,0x3, 0xc7,0xa4,
+0x8f,0x8f,0x8b,0x74,0x77,0x81,0x74,0x82,0xe0,0x0, 0xdb,0xcd,0x3d,0x68,0x94,0x14,
+0x75,0x3, 0xe0,0x0, 0xdc,0x1b,0x54,0x82,0x55,0x3, 0x3d,0xe8,0x3e,0x63,0x3c,0x66,
+0xd8,0x68,0x57,0x81,0x3b,0x63,0xe0,0x61,0x12,0x40,0xe4,0x0, 0xc3,0x3a,0x2f,0x9a,
+0x3c,0xe3,0x3c,0x62,0xd9,0xe0,0x2c,0x5, 0x3c,0xe3,0x3c,0x62,0xef,0xff,0xd2,0xeb,
+0x3f,0xe0,0xc7,0x9a,0x3f,0x92,0x3a,0x16,0xe0,0x41,0xac,0xf, 0x8f,0x94,0xe2,0x1,
+0xcf,0xff,0x1, 0x3, 0xc7,0x81,0xaf,0x94,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe7,0xff,
+0x0, 0x8d,0xe2,0x0, 0xcf,0x82,0x1, 0x8a,0xe0,0xf, 0x3a,0x16,0x8f,0xaf,0x3c,0xe3,
+0xe2,0x0, 0xcf,0x8a,0x3c,0x62,0x1, 0x84,0xde,0x18,0x14,0x0, 0x0, 0xe2,0xda,0xaf,
+0x2c,0x60,0x3c,0xe3,0x3c,0x62,0xef,0xff,0xd5,0xb, 0x0, 0xdb,0x38,0x82,0x8, 0xb7,
+0xc0,0x7c,0xe8,0x30,0x57,0xdb,0x11,0x0, 0xe7,0xf, 0xcf,0x92,0xe8,0x30,0x77,0xdb,
+0x3c,0x60,0xe8,0x56,0x4f,0xae,0xc4,0x4, 0xe1,0xc0,0xaf,0xa8,0xe8,0x56,0x4f,0xaf,
+0x71,0x1, 0xaf,0xb8,0xe8,0x52,0x4f,0x82,0x27,0x91,0xe8,0x29,0x52,0xf, 0xe8,0x29,
+0x52,0x92,0xe0,0x4d,0x13,0x62,0x39,0xe8,0xe8,0x52,0x4f,0x82,0xe8,0x72,0x57,0x70,
+0x3f,0xf2,0xe8,0x56,0x4e,0xaf,0xe0,0x0, 0x2, 0xf5,0x17,0x0, 0xe8,0x30,0x57,0xdb,
+0xe8,0x29,0x54,0x82,0xe8,0x29,0x55,0x3, 0xe8,0x30,0x56,0xd8,0xe7,0xf, 0xcf,0x9e,
+0xe0,0xe, 0x3c,0x9a,0xe1,0x2e,0x3f,0x1d,0xe7,0xa, 0xcf,0x9e,0xe0,0x66,0x16,0x54,
+0xe0,0x66,0x17,0x18,0xe8,0x56,0x4c,0x2f,0xe8,0x25,0x49,0xd8,0xe8,0x72,0x50,0xf0,
+0xe8,0x30,0x52,0x57,0xe8,0x30,0x77,0xdb,0x39,0x6c,0x3d,0xee,0x16,0x80,0x3e,0xf3,
+0xe0,0x0, 0x1, 0xeb,0x17,0x1, 0xe8,0x52,0x4e,0x82,0x2e,0x83,0xe8,0x25,0x6e,0xd8,
+0xe8,0x30,0x57,0xdb,0xe7,0x9, 0xcf,0x9e,0x17,0x0, 0xe7,0xe, 0xcf,0x9e,0xe8,0x52,
+0x4f,0x3, 0xe8,0x30,0x77,0xdb,0x27,0x15,0xe8,0x29,0x57,0x90,0xe4,0x0, 0xc7,0x86,
+0xe2,0x0, 0xcf,0x80,0x3, 0x2, 0xc7,0x83,0xe8,0x29,0x56,0x6, 0x37,0x82,0x3e,0x7f,
+0x3, 0x8, 0xe8,0x30,0x57,0xdb,0x16,0x1, 0xe7,0xe, 0xcf,0x9c,0xe8,0x30,0x77,0xdb,
+0xe8,0x30,0x57,0xdb,0x3e,0x6f,0xe2,0x80,0xc6,0x0, 0x26,0xd, 0xc7,0x7f,0xe2,0x0,
+0xcf,0x1, 0x2, 0x89,0xe2,0x0, 0xce,0x81,0x1, 0x86,0x17,0x0, 0xe7,0xe, 0xcf,0x9e,
+0xe8,0x30,0x77,0xdb,0x16,0x80,0xe8,0x30,0x57,0x48,0xe8,0x30,0x57,0xdb,0x37,0x42,
+0xe7,0xb, 0xcf,0x9d,0x3f,0x79,0xe8,0x30,0x77,0xdb,0xe0,0x0, 0x4, 0xde,0x3f,0x7a,
+0xe0,0x0, 0x4, 0xdb,0xe7,0x8, 0xcf,0x9d,0xe8,0x30,0x77,0xdb,0xc0,0x4, 0xb, 0xe1,
+0xe0,0xf, 0x31,0x21,0x3f,0x96,0x8d,0x1f,0x8c,0x8f,0x3f,0xea,0xe0,0xaf,0x3c,0x8d,
+0x3c,0x63,0x37,0xa1,0x3f,0x1f,0x93,0x8e,0xef,0xfe,0xda,0xe8,0x24,0x8, 0x3a,0x77,
+0x4, 0x8, 0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0xe7,0xfe,0x0, 0xf0,0x3a,0xf7,0x0, 0xf9,
+0x17,0x1, 0xe7,0xfe,0x0, 0xf5,0x3f,0xeb,0x8b,0xf, 0x8f,0x9f,0xe1,0x80,0x92,0x92,
+0xe0,0xaf,0x3b,0x8, 0xc5,0x82,0x37,0xa1,0x3f,0x91,0x97,0x8f,0xe0,0x5, 0x3f,0xa5,
+0xe0,0x41,0x3a,0xa5,0x3a,0xf4,0x5, 0x8f,0xe8,0x52,0x4a,0x2, 0xe0,0x4d,0x15,0xe2,
+0x17,0x80,0x3f,0xf4,0xc5,0x82,0xc7,0x2, 0x1, 0x8b,0xe8,0x25,0x6f,0xd8,0x17,0x0,
+0xe7,0xfe,0x0, 0xfb,0xc6,0x81,0xe2,0x1, 0xc6,0xff,0xe7,0xfe,0x0, 0xf2,0xe0,0x40,
+0x89,0x1b,0xe0,0x40,0x89,0xab,0x3e,0xe2,0xe0,0xad,0x39,0x88,0xc7,0x81,0x36,0xa1,
+0x3e,0x91,0x96,0x8d,0xe2,0x1, 0xc7,0xff,0xe1,0x80,0xb6,0x9c,0xe0,0x40,0xa9,0xae,
+0xe0,0x40,0xa9,0x1e,0x0, 0xdf,0xe8,0x30,0x57,0xdb,0x17,0x1, 0xe7,0x8, 0xcf,0x9e,
+0xe7,0xff,0x0, 0xa4,0xe0,0x52,0x17,0x9a,0xb5,0xff,0xe0,0x41,0x3d,0xcb,0xac,0x1f,
+0xb4,0x9f,0xe6,0xa3,0xcc,0x89,0xb5,0x2f,0xe6,0xa3,0xcd,0xa, 0xe0,0x1, 0xb5,0x8f,
+0xe0,0xf4,0x17,0x88,0xac,0x8f,0xad,0x1f,0x38,0x82,0x8, 0xb4,0xe8,0xb, 0x49,0x6b,
+0xe0,0x1, 0x17,0x52,0x17,0x81,0xe8,0x29,0x77,0xe, 0xe0,0x3, 0x31,0x41,0xe0,0x1,
+0x17,0x34,0xe8,0x25,0x4a,0x1b,0xe8,0x67,0x6f,0x90,0xe8,0x25,0x6f,0x9b,0xe8,0x52,
+0x69,0x9b,0xe8,0x29,0x77,0xf, 0xe0,0x3, 0xd7,0xf2,0xe8,0x52,0x4f,0x82,0xe8,0x25,
+0x6a,0x1b,0xe2,0x0, 0xcf,0x84,0x2, 0xb6,0x14,0x1, 0xef,0xfe,0xda,0xef,0xe8,0x52,
+0x4f,0x82,0xe0,0x1, 0x27,0x95,0xe8,0x25,0x4f,0x41,0xe0,0x1, 0x27,0x11,0xe2,0x0,
+0xcf,0x88,0x5, 0xab,0xe8,0x29,0x57,0x4, 0xe2,0x5, 0xcf,0x6d,0x2, 0x29,0xe0,0x1,
+0x15,0xc8,0xe0,0x1, 0x15,0x34,0xe0,0x1, 0x14,0xd2,0x3c,0x63,0xdf,0xb4,0xe8,0x67,
+0x4f,0x90,0xe0,0x1, 0x2f,0x82,0xe8,0xb, 0x4e,0xff,0xe8,0xb, 0x4f,0x75,0xe8,0xb,
+0x4f,0xf3,0xe8,0xc, 0x4d,0x80,0xe8,0xb, 0x4d,0x76,0xe8,0xb, 0x4c,0xf4,0x36,0xa8,
+0x37,0x28,0x37,0xa8,0x3d,0xcd,0x3d,0x4e,0x3c,0xcf,0x3c,0x62,0xa, 0x21,0xe7,0xff,
+0x0, 0x9b,0xe0,0x0, 0x14,0x64,0x0, 0xcc,0xe2,0x0, 0xcf,0x85,0x5, 0x8d,0xe8,0x29,
+0x57,0x4, 0xe2,0x6, 0xcf,0x51,0x2, 0xb, 0xe0,0x1, 0x15,0xc8,0x3d,0x6b,0xe0,0x1,
+0x14,0xe6,0x3c,0x62,0x0, 0xd4,0xe2,0x0, 0xcf,0x83,0x5, 0x90,0xe8,0x29,0x57,0x4,
+0xe2,0x7, 0xcf,0x35,0x2, 0xc, 0xe2,0x0, 0xcc,0x1, 0x5, 0x89,0xe0,0x2, 0x15,0xac,
+0xe0,0x1, 0x15,0x7a,0xe0,0x2, 0x14,0x98,0x0, 0xed,0x1, 0x90,0xe8,0x29,0x57,0x4,
+0xe2,0x8, 0xcf,0x4b,0x2, 0xe, 0xe2,0x0, 0xcc,0x1, 0x5, 0x8b,0xe0,0x2, 0x15,0xac,
+0xe0,0x2, 0x15,0x18,0xe0,0x2, 0x14,0xca,0x0, 0xdd,0xe2,0x0, 0xcf,0x82,0x1, 0xaf,
+0xe8,0x29,0x57,0x4, 0xe2,0xa, 0xcf,0x13,0x2, 0x2a,0xe2,0x0, 0xcc,0x1, 0x5, 0xa7,
+0xe8,0x56,0x4f,0x23,0xe2,0x0, 0xcf,0x2, 0x1, 0xc, 0xe2,0x0, 0xcf,0x1, 0x1, 0x98,
+0xe2,0x0, 0xcf,0x82,0x1, 0x95,0xe8,0x56,0x4f,0x99,0xe2,0x0, 0xcf,0x82,0x1, 0x90,
+0xe8,0x52,0x4f,0xbd,0xe2,0x0, 0xcf,0xc6,0x2, 0x86,0xe8,0x52,0x4f,0xcb,0xe2,0x0,
+0xcf,0xc6,0x5, 0x86,0xe0,0x2, 0x15,0xac,0xe0,0x1, 0x15,0x48,0x0, 0xc4,0xe0,0x2,
+0x15,0xac,0x3d,0x6b,0xe0,0x2, 0x14,0xfc,0xe7,0xff,0x0, 0xad,0x17,0x80,0xe8,0x67,
+0x6f,0x90,0xe7,0xfe,0x0, 0xfe,0x17,0x81,0xe8,0x25,0x6f,0xeb,0xa, 0x61,0x8, 0xb1,
+0xe8,0xf4,0x4f,0xd8,0xe0,0x1, 0x27,0x8c,0xe8,0xb, 0x4f,0x73,0xe0,0xf, 0x37,0x28,
+0xe8,0xb, 0x4f,0x74,0x3f,0x4f,0xe8,0xb, 0x4f,0xeb,0xe8,0x29,0x77,0xe, 0xe6,0xa3,
+0xcf,0xe, 0xe8,0x52,0x6f,0x9b,0xe8,0xb, 0x4f,0xf5,0xe8,0xf4,0x6f,0x8, 0xe0,0xd,
+0x37,0xa8,0xe8,0xb, 0x4f,0xf6,0x3f,0xcd,0xe8,0xb, 0x4e,0xff,0xe8,0x29,0x77,0x8f,
+0xe0,0xc, 0x36,0xa8,0xe8,0xc, 0x4e,0x80,0xe6,0xa3,0xcf,0x8f,0x3e,0xcc,0xe8,0x29,
+0x76,0x94,0xe8,0xc, 0x4e,0x81,0xe8,0xf4,0x6f,0x89,0xe0,0xc, 0x36,0xa8,0xe8,0xc,
+0x4e,0x82,0x17,0x80,0x3e,0xcc,0xe0,0x41,0x3e,0xcd,0xe8,0x29,0x76,0x95,0xe8,0x67,
+0x6f,0x90,0xe8,0xf4,0x4f,0x94,0x27,0x97,0xe8,0xf4,0x4f,0xa5,0xe2,0x0, 0xcf,0x8e,
+0x1, 0x12,0x3f,0x6f,0xc7,0x78,0xe2,0x0, 0xcf,0x11,0x2, 0x8d,0x37,0xa5,0x3f,0x6f,
+0xc7,0x4e,0xe8,0x29,0x77,0xf, 0x17,0x32,0xe8,0x29,0x77,0x8e,0xe0,0xf, 0x3f,0x2f,
+0xe8,0x29,0x77,0x90,0xe8,0xf4,0x4f,0x93,0x27,0xa2,0xe8,0x29,0x56,0x8e,0xe8,0x29,
+0x57,0xf, 0xe4,0x0, 0xc6,0x8a,0xe4,0x0, 0xc7,0xa, 0xe0,0xf, 0x36,0xc3,0xe8,0x29,
+0x77,0x8e,0xe0,0xf, 0x37,0x3, 0xe8,0x29,0x77,0x8f,0x36,0xc8,0xe8,0x29,0x57,0x94,
+0xe8,0xf4,0x6e,0x88,0xe4,0x0, 0xc7,0x8a,0x37,0x48,0x37,0x83,0xe8,0x29,0x77,0x94,
+0xe0,0x41,0x3f,0xcf,0xe8,0x29,0x77,0x95,0xe8,0xf4,0x6f,0x9, 0xe8,0xf4,0x4f,0x8c,
+0xe2,0x1, 0xcf,0xaa,0x1, 0x13,0xe8,0xb, 0x4f,0xf9,0xe0,0xe, 0x37,0xa8,0xe8,0xb,
+0x4f,0xfa,0x3f,0xce,0xe8,0x29,0x77,0x91,0xe8,0xb, 0x4f,0xfb,0xe0,0xe, 0x37,0xa8,
+0xe8,0xb, 0x4f,0xfc,0x3f,0xce,0xe8,0x29,0x77,0x92,0x8, 0xe1,0xde,0xaf,0xe8,0xb,
+0x4f,0xf7,0xe0,0xe, 0x37,0xa8,0xe8,0xb, 0x4f,0xf8,0x3f,0xce,0xe0,0x41,0x3f,0xcf,
+0xe8,0x29,0x77,0x90,0xe8,0x52,0x4f,0xb6,0xe7,0xff,0x2f,0x9d,0xe8,0x67,0x4f,0x90,
+0xe7,0xff,0x2f,0x99,0xe8,0x56,0x4f,0x99,0xe7,0xff,0x2f,0x95,0xe8,0xc, 0x4f,0x85,
+0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0x86,0x3f,0xce,0xe8,0x29,0x77,0x8e,0xe7,0xff,
+0x0, 0x8a,0x15,0x12,0x14,0x80,0xe0,0x67,0x14,0x20,0xe0,0x70,0x0, 0x8a,0x8, 0xb1,
+0x17,0x80,0xaf,0x89,0xef,0xfe,0xd6,0xac,0x24,0x2, 0x14,0x2, 0x8, 0xe1,0x8, 0xb6,
+0xc0,0x7e,0x3a,0xe8,0x3c,0x69,0x39,0xe9,0xef,0xfe,0xd6,0xa2,0x3c,0xe0,0x3b,0x68,
+0xc4,0x83,0x3c,0x63,0xdf,0xed,0x3c,0x75,0xe0,0x67,0x11,0x20,0x1, 0x11,0x3c,0xe3,
+0x3c,0x65,0xef,0xfd,0xd2,0x8f,0xc4,0x3, 0x34,0x21,0x39,0x18,0xe8,0x33,0x57,0x51,
+0x97,0x82,0x3f,0x7f,0x3, 0x83,0xe8,0x33,0x77,0xd1,0xc0,0x2, 0xb, 0x61,0x2b,0x1d,
+0x3c,0xe3,0xef,0xfd,0xd2,0x7f,0xc4,0x3, 0x34,0x21,0x39,0x18,0x97,0x82,0xe8,0x33,
+0x77,0xd1,0xe8,0xd, 0x4f,0xc4,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xc5,0x3f,0xce,
+0xe8,0x33,0x57,0x51,0x3f,0x7f,0xe8,0x30,0x57,0xdb,0x5, 0x9e,0x17,0x1, 0xe7,0x5,
+0xcf,0x9e,0xe8,0x30,0x77,0xdb,0x0, 0xe2,0x3c,0xe3,0x3a,0x68,0xef,0xfd,0xd2,0x62,
+0xc4,0x3, 0x34,0x21,0x3c,0x12,0x92,0x88,0x4c,0x3, 0x3c,0xe3,0xef,0xfd,0xd2,0x5a,
+0xc4,0x3, 0x34,0x21,0x3c,0x12,0x97,0x88,0x3c,0xe3,0x3a,0xff,0x5, 0x83,0x3c,0x64,
+0x0, 0xd1,0x4c,0x3, 0x0, 0xcf,0x17,0x0, 0x0, 0xe3,0x8, 0xb5,0x39,0xe9,0xe0,0xe,
+0x34,0xa1,0xe0,0x4d,0x17,0xc4,0xe4,0x0, 0xc1,0x87,0x3f,0x9e,0xe0,0x4d,0x11,0x4a,
+0x8d,0x9f,0xe0,0xf, 0x39,0x13,0x8f,0x5f,0xe2,0x0, 0xcf,0x3, 0x1, 0x23,0xc5,0x81,
+0x35,0xc1,0x3a,0x68,0xc2,0x3, 0xe0,0xf, 0x32,0x21,0xe4,0x0, 0xc4,0x6, 0xe0,0x67,
+0x12,0x20,0x3a,0x1f,0xe1,0x2, 0x17,0xe4,0x3c,0x1f,0x15,0x0, 0x92,0xa8,0xe0,0x80,
+0x14,0x80,0x3c,0x6a,0xe0,0x3, 0xd7,0x17,0xe0,0x8e,0x3a,0xd9,0x39,0x13,0xe0,0xae,
+0x3c,0x5, 0x37,0xcc,0x37,0x24,0x3f,0xce,0xb7,0x84,0x8f,0x82,0xe8,0x67,0x6f,0x9e,
+0xa, 0xe1,0x8d,0xef,0x0, 0xdf,0xe8,0xd, 0x4f,0xb6,0x3f,0xf8,0x1, 0xb, 0xe8,0xd,
+0x4f,0xb7,0x3f,0xf8,0x1, 0x9, 0xe8,0xd, 0x4f,0xb8,0xe0,0x28,0x3f,0x88,0x34,0x21,
+0x38,0x82,0x14,0x0, 0x0, 0xfe,0x14,0x1, 0x0, 0xfc,0xe8,0x12,0x57,0xb0,0xe0,0x6,
+0x97,0xcf,0xe6,0xaf,0xcf,0xff,0x27,0x96,0x8, 0xb3,0x39,0x68,0xe8,0x67,0x4c,0x1e,
+0x39,0xe9,0xdf,0xe2,0xe4,0x0, 0xc4,0x18,0xe0,0x67,0x17,0xb6,0x3f,0x98,0xe2,0x0,
+0xc9,0x80,0x97,0x4f,0x94,0xdf,0x3c,0x62,0xe0,0x69,0x39,0x2e,0x9, 0xa1,0xe7,0x99,
+0x0, 0x88,0x38,0x82,0xe8,0x61,0x4f,0xa7,0xe8,0x25,0x4d,0xdd,0xe0,0x8, 0x37,0xd8,
+0x17,0x80,0xe6,0xaf,0xcc,0x78,0xe0,0x67,0x17,0x36,0x16,0x81,0x3e,0x6f,0x3d,0xff,
+0x1, 0x8d,0xe0,0x2, 0xae,0x2e,0xe0,0x2, 0xae,0x3e,0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0xe2,0x0, 0xcf,0x83,0xc7,0x18,0x1, 0xf4,0x38,0x82,0x24,0x78,0xe0,0x2, 0xae,0xae,
+0xe0,0x2, 0xae,0xbe,0x0, 0xf3,0xe8,0x61,0x4f,0xa8,0xe8,0x61,0x4e,0xa7,0xe8,0x25,
+0x4d,0xdd,0x36,0xd8,0xe0,0x8, 0x37,0xd8,0x17,0x80,0xe6,0xaf,0xce,0xfd,0xe6,0xaf,
+0xcc,0x78,0xe0,0x67,0x17,0x36,0x16,0x1, 0x3d,0x6f,0x3d,0xff,0x1, 0x8b,0xe0,0x2,
+0xad,0x3e,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0x83,0xc7,0x18,0x1, 0xf6,
+0x38,0x82,0x26,0x83,0xe0,0x2, 0xae,0x3e,0x24,0x75,0xe0,0x2, 0xae,0x3e,0x0, 0xf2,
+0x8, 0xb1,0xdf,0xb9,0xe0,0x67,0x17,0xb6,0x17,0x0, 0x14,0x1, 0xe0,0x2, 0xaf,0x2f,
+0xe0,0x5, 0xaf,0x2f,0xe0,0x8, 0xaf,0x2f,0x8, 0xe1,0x8, 0xb7,0x3b,0x68,0xef,0xfe,
+0xd5,0x97,0x3a,0xe8,0xe0,0x67,0x11,0x36,0xe0,0x67,0x12,0x7e,0x11,0x81,0x13,0x80,
+0xe0,0x2, 0x8f,0xb2,0x27,0x97,0xe2,0x0, 0xcb,0x2, 0x1, 0x98,0xe0,0x1, 0x94,0xd2,
+0x3d,0xe3,0xe0,0xba,0x15,0x28,0x3c,0x69,0xef,0xfe,0xd8,0xc9,0x22,0x89,0xe0,0x1,
+0x94,0xc2,0x3d,0xe3,0xe0,0xc4,0x15,0x4c,0x3c,0x69,0xef,0xfe,0xd8,0xc0,0xe0,0x2,
+0xab,0xb2,0xc1,0x18,0x39,0x74,0x1, 0xe5,0xb, 0xe1,0xe0,0x1, 0x94,0xb2,0x0, 0xe9,
+0xe8,0x61,0x4f,0xa6,0x27,0xb8,0x8, 0xb3,0x39,0x68,0xe8,0x67,0x4c,0x1e,0x39,0xe9,
+0xdf,0x4b,0xe8,0x25,0x4f,0xdd,0x3f,0xf8,0x1, 0x2d,0x29,0x14,0xe4,0x0, 0xc4,0x18,
+0xe0,0x67,0x17,0xb6,0xe2,0x0, 0xc9,0x82,0x3c,0x1f,0xe0,0x1, 0x95,0x38,0x1, 0x83,
+0xe0,0x1, 0x95,0x58,0xe8,0x72,0x54,0xf0,0x15,0x80,0x3c,0x69,0x9, 0xa1,0xe7,0xd1,
+0x0, 0x96,0xe2,0x0, 0xc9,0x2, 0x1, 0x89,0xc4,0x1, 0xe4,0x0, 0xc4,0x18,0xe0,0x67,
+0x17,0xb6,0x3c,0x1f,0x95,0x8, 0x0, 0xef,0xe2,0x0, 0xc9,0x1, 0x1, 0x89,0xe4,0x0,
+0xc4,0x18,0xe0,0x67,0x17,0xb6,0x3c,0x1f,0xe0,0x1, 0x95,0x68,0x0, 0xe4,0x15,0x0,
+0x0, 0xe2,0x9, 0xe1,0x38,0x82,0x8, 0xb3,0xe4,0x0, 0xc4,0x98,0xe0,0x67,0x11,0x36,
+0x39,0x19,0x39,0xe8,0x8c,0x62,0x17,0x81,0xe8,0x25,0x6f,0xdc,0xef,0xfc,0xd5,0xf4,
+0x8c,0xf2,0x3c,0x63,0x9, 0xa1,0xe7,0x8c,0x0, 0xd5,0x8, 0xb2,0xe8,0x67,0x4f,0xb9,
+0x39,0x68,0x27,0x86,0xe8,0x25,0x4c,0x43,0xe8,0x67,0x4c,0xb6,0xdf,0xe5,0xe0,0x67,
+0x17,0x12,0xe0,0x67,0x16,0x9e,0x17,0x80,0xe1,0x80,0xaf,0x9e,0x3e,0xfe,0x1, 0xfd,
+0x17,0x7f,0xe8,0x67,0x6f,0x3b,0x17,0x0, 0xe8,0x67,0x6f,0xb7,0xe8,0x67,0x6f,0xb8,
+0xe8,0x67,0x6f,0xba,0xe8,0x67,0x6f,0xb9,0xe8,0x33,0x77,0x62,0xe8,0x33,0x77,0x63,
+0xe8,0x67,0x6f,0xc2,0xe8,0x33,0x77,0x6e,0xe8,0x33,0x77,0x6f,0xe8,0x67,0x6f,0xda,
+0xe8,0x33,0x77,0x7a,0xe8,0x33,0x77,0x7b,0xe8,0x67,0x6f,0xf2,0x21,0x6, 0x17,0x87,
+0xe8,0x61,0x6f,0xa7,0xe8,0x61,0x6f,0xa8,0x9, 0x61,0x8, 0xb5,0x14,0x1, 0xdf,0xc6,
+0xe0,0x67,0x17,0xb6,0x15,0x0, 0xe0,0x4d,0x11,0x4a,0xe8,0x67,0x4c,0xb6,0xe0,0xd,
+0x14,0x36,0x3e,0x6f,0x3e,0xea,0x3a,0x62,0x10,0x81,0x11,0x83,0xe8,0x25,0x4a,0xc3,
+0xe1,0x80,0x8f,0x18,0xb0,0xcc,0x3d,0xee,0x3f,0x65,0xe4,0x0, 0xc7,0x7, 0x3a,0xed,
+0x3f,0x12,0x8f,0xe, 0xc6,0x81,0x3f,0x7b,0xe2,0x1, 0xc6,0xff,0xe0,0x65,0x39,0xa9,
+0x3f,0x7b,0x3f,0x61,0xe0,0x6e,0x39,0xaa,0x3d,0x6e,0x8f,0x38,0xe2,0x0, 0xce,0x83,
+0xaf,0x7c,0x3c,0xe5,0xe8,0x25,0x4f,0x43,0xad,0xec,0xe4,0x0, 0xc7,0x7, 0xc6,0x18,
+0x3f,0x14,0x8f,0x1e,0x3f,0x1b,0xe4,0x0, 0xc7,0x19,0xe0,0x2e,0x3f,0x33,0xe0,0x40,
+0xb7,0x7c,0x1, 0xd5,0x25,0x3, 0xe8,0x67,0x6a,0xb6,0xe8,0x67,0x4f,0x36,0xe2,0x0,
+0xcf,0x2, 0x5, 0x84,0x17,0x0, 0xe8,0x67,0x6f,0x36,0x16,0x80,0xe8,0x67,0x4d,0x36,
+0xe0,0x3c,0x14,0xc0,0xe0,0x1, 0x35,0x22,0xe0,0x23,0x11,0x54,0xe0,0x68,0x16,0x4,
+0xe0,0xba,0x14,0x28,0xe0,0xc4,0x11,0xcc,0xe0,0xd9,0x12,0x16,0x3f,0x6d,0xe2,0x1,
+0xc7,0x7f,0x3d,0x7e,0x1, 0x95,0xe0,0x1, 0xb4,0xaf,0xe0,0x1, 0xb4,0x3f,0xe0,0x1,
+0xb1,0xcf,0xe0,0x1, 0xb4,0x5f,0xe0,0x1, 0xb2,0x6f,0xc6,0x81,0xe2,0x0, 0xce,0x83,
+0xc7,0x98,0x1, 0xed,0xe8,0x67,0x4f,0xb6,0xe8,0x25,0x6f,0xdd,0xa, 0xe1,0xe0,0xe,
+0x3e,0x91,0x3f,0x12,0x8f,0xe, 0xe0,0x1, 0xb4,0xaf,0xe4,0x14,0xc7,0x4a,0x3d,0xee,
+0xe0,0x5, 0x3f,0x1c,0xe0,0xa, 0xc5,0xa4,0xe0,0x14,0xc7,0x48,0x3d,0x9c,0x3f,0x1c,
+0xe0,0x1, 0xb2,0xbf,0xe0,0x1, 0xb5,0xcf,0xe0,0x1, 0xb2,0xdf,0xe0,0x1, 0xb7,0x6f,
+0x0, 0xdd,0x8, 0xb6,0x11,0x0, 0x3a,0xe8,0xe0,0x67,0x11,0xb6,0xde,0x8d,0x3a,0x62,
+0x13,0x1, 0xe0,0x2, 0x8f,0xb3,0x27,0x94,0x3c,0x66,0xef,0xfc,0xdf,0xfe,0x3c,0xe4,
+0x3c,0x65,0xdf,0x1a,0xe2,0x0, 0xca,0x82,0x1, 0x95,0xe0,0x1, 0x94,0x53,0xe0,0x1,
+0x94,0xc3,0xe0,0x1, 0x95,0x63,0x3d,0xe5,0x39,0x66,0xe0,0x2, 0xdf,0xe, 0xef,0xfe,
+0xd4,0x45,0x24,0xb, 0x21,0x5, 0xe8,0x67,0x4c,0xb6,0x3c,0x65,0xdf,0x5, 0x14,0x0,
+0xb, 0x61,0xe0,0x1, 0x94,0x33,0x0, 0xec,0xc2,0x1, 0xe2,0x1, 0xc2,0x7f,0xe2,0x0,
+0xca,0x3, 0xc1,0x98,0x1, 0xd7,0x21,0x5, 0xe8,0x67,0x4c,0xb6,0x3c,0x65,0xde,0xf4,
+0x14,0x1, 0x0, 0xef,0x17,0x2, 0xe1,0x2d,0x3c,0x9e,0x2e,0x8d,0xe1,0x2a,0x3d,0x1e,
+0x2d,0xa, 0x8, 0xb2,0x39,0x69,0xde,0xe8,0x17,0x81,0xe8,0x67,0x69,0x36,0xe8,0x25,
+0x6f,0xdb,0x9, 0x61,0x38,0x82,0x17,0x80,0xe8,0x25,0x6f,0xdc,0xe8,0x67,0x4f,0xb9,
+0x27,0x95,0xe8,0x67,0x4c,0xb7,0xc4,0x81,0xe2,0x1, 0xc4,0xff,0xe2,0x0, 0xcc,0x82,
+0x5, 0x82,0x14,0x80,0xe8,0x67,0x4f,0xb6,0x3f,0xf9,0x1, 0x86,0xe8,0x67,0x4f,0xb8,
+0xc7,0x81,0xe8,0x67,0x6f,0xb8,0xe7,0xfd,0x0, 0xc8,0x38,0x82,0xe8,0xd, 0x4f,0xc4,
+0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xc5,0x3f,0xce,0xe8,0x33,0x77,0xd9,0xe0,0xb,
+0x17,0xdc,0xe8,0x33,0x77,0xda,0x38,0x82,0xe8,0x67,0x4c,0x3a,0x38,0x82,0xe8,0xf4,
+0x4f,0xd8,0xe0,0x2, 0x2f,0xa8,0xe8,0x61,0x4f,0xa6,0xe0,0x2, 0x27,0xa4,0xe8,0xf4,
+0x4f,0xad,0xe2,0x0, 0xcf,0x81,0xe0,0x2, 0x1, 0x1e,0x8, 0xb4,0xc0,0x7e,0x3a,0x69,
+0x3c,0xe0,0xc4,0x82,0x39,0x68,0xdd,0x24,0x3c,0x74,0x39,0xe8,0xe0,0x0, 0x1, 0xd5,
+0xdf,0xd6,0x3c,0xe0,0xc4,0x83,0x3c,0x62,0xe8,0x33,0x52,0x51,0xdd,0x19,0x39,0xf8,
+0xe0,0x0, 0x1, 0xc1,0xe8,0x67,0x4e,0xb9,0x2e,0xbd,0xe8,0x25,0x4f,0xd9,0xe8,0x25,
+0x4f,0x5a,0xc7,0x81,0xc7,0x1, 0xe2,0x1, 0xc7,0xff,0xe2,0x1, 0xc7,0x7f,0xe2,0x0,
+0xcf,0x8b,0xe8,0x25,0x6f,0x5a,0x2, 0xba,0xe8,0x25,0x6f,0xd9,0xe8,0x33,0x56,0x59,
+0xe8,0x25,0x4e,0xd9,0xe0,0xf, 0x36,0x21,0x3a,0x7f,0xe0,0x67,0x17,0x92,0x3f,0x9d,
+0x5, 0xb0,0x16,0x82,0xae,0x8f,0xe0,0x67,0x16,0x1e,0xe0,0x67,0x16,0x92,0x17,0x80,
+0xe1,0x80,0x8d,0x9d,0x3e,0x7d,0x3f,0x9b,0x1, 0xfc,0xe2,0x0, 0xcf,0x87,0x5, 0xa7,
+0x17,0x80,0xe8,0x25,0x6f,0xda,0x15,0xc, 0xe8,0x67,0x4f,0xba,0x14,0x80,0xcf,0x81,
+0xe8,0x67,0x6f,0xba,0xe0,0x67,0x14,0x12,0x17,0x81,0xe8,0x67,0x6f,0xb9,0xe0,0x3,
+0xd4,0xe0,0xe8,0x67,0x4f,0xb9,0xe0,0x67,0x12,0x36,0xe2,0x0, 0xcf,0x81,0x1, 0x19,
+0xe2,0x0, 0xcf,0x82,0x1, 0x34,0xc0,0x2, 0xa, 0x61,0xe8,0x25,0x6e,0xd9,0x0, 0xc7,
+0x3a,0x7c,0x5, 0x83,0x16,0x81,0x0, 0xcf,0x16,0x80,0x0, 0xcd,0xe2,0x0, 0xcf,0x1f,
+0x5, 0xe9,0x17,0xa0,0xe8,0x25,0x6f,0xda,0x17,0x80,0xe8,0x67,0x6f,0xba,0x0, 0xe2,
+0xe8,0x67,0x4f,0xb6,0xe8,0x67,0x6f,0xb7,0x17,0xff,0xe8,0x67,0x6f,0xbb,0x17,0x80,
+0xe8,0x33,0x77,0xe2,0xe8,0x33,0x77,0xe3,0xe8,0x67,0x6f,0xc2,0xe8,0x33,0x77,0xee,
+0xe8,0x33,0x77,0xef,0xe8,0x67,0x6f,0xda,0xe8,0x33,0x77,0xfa,0xe8,0x33,0x77,0xfb,
+0xe8,0x67,0x6f,0xf2,0x17,0x82,0xe8,0x33,0x77,0xdc,0x0, 0xce,0xe8,0x67,0x4f,0xb7,
+0xe8,0x33,0x56,0xd1,0xe4,0x0, 0xc7,0x98,0xe0,0xc, 0x3a,0x1f,0x97,0x7c,0x3f,0x1d,
+0xe2,0xff,0xcf,0x7e,0xe0,0x0, 0x2, 0xe5,0x3f,0x94,0xb7,0x7c,0xe0,0x1, 0x97,0xf,
+0x3e,0xfe,0x5, 0x83,0xe0,0x1, 0xb6,0x8f,0x3c,0xe0,0xc4,0x82,0x3c,0x62,0xdc,0x80,
+0x39,0xf8,0x1, 0x8a,0xe8,0x67,0x4f,0xb7,0xe2,0x0, 0xcf,0x81,0xe0,0x0, 0x2, 0xd5,
+0xc7,0x81,0xe8,0x67,0x6f,0xb7,0xe8,0x67,0x4f,0x38,0xe8,0xd, 0x4f,0xb9,0x3f,0x7f,
+0xe7,0xff,0x4, 0xa3,0xe8,0x33,0x57,0xe2,0xe3,0xff,0xcf,0xff,0xe0,0x0, 0x1, 0x48,
+0xe8,0x33,0x55,0x63,0xe8,0x33,0x57,0x6e,0x3f,0xfe,0xe0,0x0, 0x5, 0xc4,0xe8,0x33,
+0x55,0x6f,0x3f,0xee,0x11,0x81,0xe8,0x33,0x57,0x7a,0x3f,0x7f,0x3, 0x85,0xe8,0x33,
+0x55,0x7b,0x3f,0xee,0x11,0x82,0xe8,0x67,0x4f,0x36,0x3f,0x73,0x1, 0x24,0xe4,0x0,
+0xc7,0x18,0xe0,0xd, 0x3a,0x1e,0x96,0xfd,0xe0,0xc, 0x36,0xc2,0xe4,0x0, 0xc6,0x3,
+0x3e,0x7f,0x5, 0x8a,0xe8,0xd, 0x4e,0x3e,0xe0,0xb, 0x36,0x28,0xe8,0xd, 0x4e,0x3f,
+0x3e,0x4b,0x3e,0x7a,0x2, 0xa1,0x36,0xc1,0x3e,0xff,0x5, 0x8d,0xe8,0xd, 0x4f,0xbe,
+0x3a,0x1e,0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xbf,0x3f,0xce,0xe0,0x1, 0x97,0x4,
+0x3f,0x7f,0x2, 0x92,0x17,0x80,0xe8,0x67,0x6f,0xb9,0xe7,0xfe,0x0, 0xde,0xe0,0xff,
+0x17,0x7f,0xe7,0xff,0x0, 0x9b,0x17,0x80,0xe7,0xff,0x0, 0xad,0x15,0x0, 0xe7,0xff,
+0x0, 0xbb,0x11,0x80,0x0, 0xc1,0x14,0x1, 0xef,0xfc,0xde,0x77,0xe8,0x67,0x4d,0x36,
+0x3c,0xe3,0x3c,0x62,0xde,0xa0,0xef,0xfc,0xde,0x43,0x17,0x80,0xe8,0x67,0x6f,0xba,
+0x0, 0xe2,0x38,0x82,0xe2,0x0, 0xcc,0x81,0x1, 0x91,0xe8,0x67,0x4f,0xbc,0x3f,0xf8,
+0x1, 0xf, 0xe8,0x67,0x4f,0xd4,0x3f,0xf8,0x1, 0xb, 0xe8,0x67,0x4f,0xec,0x3f,0xf8,
+0x1, 0x7, 0xe8,0x67,0x6c,0x3c,0x3c,0x69,0x38,0x82,0x14,0x81,0x0, 0xfd,0x14,0x80,
+0x0, 0xfb,0x8, 0xb2,0xe2,0x1, 0xcc,0x80,0x1, 0x9b,0xe8,0x67,0x4f,0xbc,0xe8,0x67,
+0x4f,0x54,0x3f,0xfe,0x4, 0x93,0x3f,0xee,0x11,0x1, 0xe8,0x67,0x4f,0x6c,0x3f,0x7f,
+0x17,0x82,0xe0,0x6f,0x3a,0xa2,0x39,0x6f,0xe8,0x67,0x4d,0x36,0x3d,0x72,0x1, 0x3,
+0x3c,0xe2,0xde,0x69,0xe8,0xf3,0x69,0x2a,0x9, 0x61,0x11,0x0, 0x0, 0xef,0xe2,0x1,
+0xcc,0x81,0x39,0x69,0x1, 0x92,0xe8,0x67,0x4f,0xbc,0xe8,0x67,0x4f,0x54,0x3f,0xfe,
+0x2, 0x8a,0x3f,0xee,0x11,0x1, 0xe8,0x67,0x4f,0x6c,0x3f,0x7f,0x17,0x82,0xe0,0x6f,
+0x3c,0xa2,0x0, 0xe2,0x11,0x0, 0x0, 0xf8,0xe2,0x0, 0xcc,0x82,0x5, 0xde,0x11,0x0,
+0x0, 0xdc,0x8, 0xb3,0xc0,0x6c,0x39,0x68,0x3c,0x60,0x39,0xe9,0x15,0x14,0xe0,0x23,
+0x14,0xe4,0xc4,0x2, 0xe0,0x3, 0xd3,0x71,0x17,0x80,0x39,0xff,0xe0,0x17,0x17,0x38,
+0x3d,0x6f,0xe0,0x6a,0x39,0xae,0x3d,0xe0,0xc5,0x92,0x17,0x0, 0x3d,0x9f,0x3e,0xee,
+0xe1,0x80,0x8e,0x1b,0x36,0x21,0x3e,0x12,0x96,0xc, 0x3e,0x2a,0xe0,0x41,0x3e,0x2c,
+0xe2,0x1, 0xce,0x48,0x5, 0x4, 0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0xc6,0x81,0xe2,0x1,
+0xc6,0xff,0xe2,0x0, 0xce,0x84,0x1, 0xed,0xe2,0x0, 0xcf,0x2, 0x2, 0x87,0xc7,0xfc,
+0xe3,0xff,0xcf,0xec,0x1, 0xe1,0x14,0x0, 0x0, 0x82,0x14,0x1, 0xc0,0x14,0x9, 0xe1,
+0x8, 0xb7,0xe1,0xfe,0xc0,0x6a,0x3c,0x60,0x15,0x24,0xe0,0x23,0x14,0xf8,0xc4,0x4,
+0xe0,0x3, 0xd3,0x3b,0x3c,0x60,0x15,0x24,0xe0,0x24,0x14,0x9c,0xc4,0x28,0xe0,0x3,
+0xd3,0x34,0xe8,0x56,0x4f,0x30,0xe8,0x56,0x49,0x19,0x77,0x1, 0xe8,0x56,0x4a,0x31,
+0x21,0x6, 0xe8,0x25,0x49,0x5e,0x17,0x80,0xe1,0x22,0x39,0xf, 0xe8,0x72,0x54,0xf0,
+0x15,0x2, 0x97,0x99,0x3f,0x69,0xb7,0x89,0xe0,0x9, 0xc7,0x46,0x3f,0xe9,0x97,0xe,
+0xe0,0x9, 0xc7,0xc8,0xe0,0xe3,0x14,0x3c,0xb7,0xf, 0x11,0x80,0xe8,0x56,0x4a,0xae,
+0xef,0xfe,0xd5,0xf8,0x3e,0xe0,0x3e,0x60,0x3d,0xe0,0x3d,0x60,0xc6,0x84,0xe0,0xe4,
+0x17,0xca,0xc6,0x28,0xe0,0x0, 0xc5,0xce,0xe0,0x0, 0xc5,0x74,0xe0,0x9, 0x32,0xa1,
+0xe0,0x17,0x14,0x38,0xe7,0xe8,0x10,0xc8,0x39,0xf5,0xe0,0x0, 0x1, 0xd8,0x21,0xa,
+0xe8,0x72,0x54,0xf0,0x3d,0x60,0x15,0x80,0xe0,0x0, 0xc5,0x74,0x3c,0x69,0xef,0xfe,
+0xd5,0xb2,0xe8,0x72,0x54,0xf0,0x16,0x0, 0x15,0x82,0xe0,0xe4,0x15,0x4c,0xe0,0xe4,
+0x14,0x4, 0xef,0xfe,0xd5,0x7f,0xe0,0xe4,0x17,0x4c,0xe0,0xc, 0x31,0xa1,0x17,0x80,
+0x39,0xff,0xe0,0x0, 0x1, 0xd2,0xe8,0x72,0x54,0xf0,0x16,0x1, 0x15,0x80,0xe0,0xe4,
+0x15,0x4c,0xe0,0xe4,0x14,0x4, 0xef,0xfe,0xd5,0x6d,0x3c,0xe2,0xe0,0xe4,0x14,0x4,
+0xdf,0x59,0xe0,0x91,0x12,0x98,0xe8,0x25,0x6c,0x5e,0xe0,0x6, 0x32,0x21,0xe0,0xe4,
+0x17,0x84,0x3e,0xe5,0x16,0x0, 0xe0,0x3, 0x13,0x90,0x57,0x1, 0x3e,0x7e,0xe0,0x0,
+0x1, 0xc4,0x21,0xa, 0xe8,0x72,0x54,0xf0,0x3d,0x60,0x15,0x80,0xe0,0x0, 0xc5,0x4e,
+0x3c,0x69,0xef,0xfe,0xd5,0x78,0xe8,0x25,0x4f,0x5e,0xe8,0x72,0x57,0xf0,0x27,0x6,
+0x3e,0x6f,0x17,0x0, 0x39,0xfe,0xe0,0x1, 0x1, 0xd3,0x17,0x0, 0xb7,0xf, 0xe0,0x9,
+0xc7,0xc8,0xb7,0xf, 0xe0,0x1, 0xc0,0x16,0xb, 0xe1,0xe1,0x80,0x97,0x1d,0xc1,0x81,
+0xe0,0x17,0xc7,0x38,0xe0,0x80,0xb7,0x1f,0xe0,0x6, 0x3f,0x99,0xe1,0x80,0x97,0x1c,
+0xe1,0x80,0xb4,0x1b,0xe0,0x17,0xc7,0x38,0xe1,0x80,0xb0,0x9a,0xe2,0x1, 0xc1,0xff,
+0xb7,0x6, 0xe7,0xff,0x0, 0x93,0xe0,0x44,0x96,0xce,0x15,0x81,0x3d,0x9d,0xb5,0x8e,
+0xc7,0x81,0xe0,0xb, 0x3f,0x1c,0xe0,0x41,0x3e,0x8d,0xe2,0x1, 0xc7,0xff,0xc7,0x2,
+0xb6,0x8b,0xe7,0xff,0x0, 0x9f,0xe0,0x44,0x95,0xcf,0xe2,0x0, 0xcd,0x93,0x2, 0x12,
+0xe8,0xf4,0x4f,0x2f,0xe2,0x0, 0xcf,0x1, 0x1, 0x8d,0x21,0x5, 0x97,0xf, 0xe1,0xe8,
+0xc7,0x48,0xb7,0xf, 0xc6,0x1, 0xe2,0x1, 0xc6,0x7f,0x3e,0x96,0xc7,0x82,0xe7,0xff,
+0x0, 0xa6,0xe8,0x25,0x4f,0x41,0xe0,0x3, 0x10,0xf4,0xe2,0x0, 0xcf,0x2, 0xe0,0x2,
+0x15,0x2c,0xe0,0x6a,0x39,0x21,0x3c,0xe7,0xe0,0x4, 0x10,0xd8,0xe0,0x69,0x39,0x21,
+0xe0,0x3, 0x17,0x74,0xe0,0x5, 0x10,0xbc,0xe0,0x6e,0x39,0x21,0xe2,0xf, 0xcd,0xd0,
+0x5, 0x19,0xe0,0x44,0xb7,0x4f,0xe8,0x25,0x4f,0x41,0x2f,0x3, 0xe0,0x44,0xb3,0xcf,
+0x24,0x5, 0xe0,0x7, 0x14,0xe8,0xe0,0x44,0xb4,0xcf,0x21,0x5, 0x97,0xf, 0xe1,0xe8,
+0xc7,0x48,0xb7,0xf, 0xe0,0x44,0x97,0x4f,0x95,0x8f,0x3f,0x7b,0x3, 0xf, 0xb7,0xf,
+0x0, 0x91,0xe2,0x7, 0xcd,0xe8,0x5, 0x4, 0xe0,0x44,0xb4,0xcf,0x0, 0xe5,0xe2,0x0,
+0xcd,0x80,0x5, 0x41,0xe0,0x44,0xb5,0x4f,0x0, 0xdf,0xe0,0x41,0x3f,0x4e,0x3d,0xfe,
+0x4, 0x6f,0x94,0x8f,0xe2,0x0, 0xcc,0x80,0xe0,0xa, 0x34,0x81,0x4, 0x24,0x38,0xed,
+0xc0,0xfe,0x29,0xf, 0x3f,0x62,0x3f,0x74,0xe7,0xff,0x1, 0x2e,0xe0,0x80,0x95,0x91,
+0x3d,0x7b,0x3, 0x3, 0x3d,0xa9,0xb5,0x81,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x0, 0xf4,
+0x15,0x80,0x3d,0xf4,0xe7,0xff,0x1, 0x20,0xe0,0x80,0x97,0x11,0xe1,0xe8,0xc7,0x48,
+0x3d,0x7e,0x3, 0x5, 0x3f,0x29,0xe0,0x17,0xc7,0x38,0xb7,0x1, 0xc5,0x81,0xe2,0x1,
+0xc5,0xff,0x0, 0xf0,0x3c,0xed,0xc4,0xfe,0x29,0x10,0x3f,0x62,0x3f,0x74,0xe7,0xff,
+0x1, 0xb, 0xe0,0x80,0x95,0x99,0x3d,0xfa,0x3, 0x4, 0x90,0x8f,0x3d,0xa1,0xb5,0x89,
+0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x0, 0xf3,0x17,0x0, 0x3f,0x74,0xe7,0xfe,0x1, 0x7c,
+0xe0,0x80,0x95,0x99,0x38,0xeb,0xe1,0xe8,0xc0,0xc9,0x38,0xfa,0x2, 0x4, 0x90,0x8f,
+0x3d,0xa1,0xb5,0x89,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x0, 0xf0,0x3e,0xe5,0xe0,0xa,
+0xc6,0xa4,0x95,0x8d,0xe2,0x0, 0xcd,0x80,0x2, 0xc, 0x96,0x8c,0xe2,0x0, 0xce,0x80,
+0x5, 0x8, 0xe0,0x41,0x3d,0xcb,0x3e,0xfb,0x3, 0x4, 0xe6,0xac,0xce,0xcd,0xb6,0x8c,
+0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x3e,0x16,0x3a,0x96,0xe7,0xfe,0x0, 0x95,0x8, 0xb5,
+0xe1,0xfe,0xc0,0x22,0xe8,0x56,0x4f,0x2f,0x3f,0xe0,0xe0,0x0, 0xc7,0xcc,0xe0,0xd,
+0x37,0x21,0x11,0x0, 0xe0,0x7, 0x16,0x68,0xe7,0xf8,0x15,0x98,0x39,0x7e,0xc7,0x82,
+0xe0,0x0, 0x1, 0xc3,0x15,0x84,0x3c,0x6b,0x3d,0x60,0xe8,0x72,0x54,0xf0,0x16,0x0,
+0xe0,0x0, 0xc5,0x4e,0x3c,0x10,0xef,0xfe,0xd4,0x3d,0x57,0x3, 0x57,0x82,0x3a,0xe0,
+0x3f,0x9e,0x37,0x81,0xe8,0x74,0x77,0x94,0x3f,0xe2,0xe0,0xff,0xc7,0xff,0x3f,0x60,
+0x37,0xa1,0xe0,0x1, 0xc2,0xde,0xc7,0x2, 0x3f,0x1f,0x3f,0x95,0x3d,0x62,0x97,0xe,
+0xe0,0x4d,0x97,0xdf,0xc5,0x7f,0xe0,0xe8,0x16,0x28,0xe0,0xd, 0x35,0x21,0x3f,0x9e,
+0x37,0x81,0x3e,0x9c,0xb7,0x8d,0x14,0x0, 0x10,0x83,0x17,0x81,0x3d,0x7f,0x2, 0x1d,
+0x17,0x80,0xe0,0xe8,0x17,0x28,0x3e,0x6f,0xe0,0x7, 0x15,0xe8,0x39,0x7f,0x1, 0xb8,
+0xe8,0x72,0x54,0xf0,0x15,0x84,0xe0,0xe8,0x15,0x28,0x3c,0x69,0xef,0xfe,0xd4,0x33,
+0xe0,0x1, 0xc0,0x5e,0xa, 0xe1,0xe0,0xa, 0x3f,0x9d,0xc1,0x1, 0xb6,0xf, 0xe2,0x1,
+0xc1,0x7f,0xb5,0x8a,0xe7,0xff,0x0, 0xb4,0xe0,0xd, 0x37,0xa1,0x3f,0x6f,0x3e,0x9c,
+0xc7,0x7f,0x3a,0x6f,0xe2,0x1, 0xc7,0x7f,0x39,0xed,0xc2,0x1, 0xb4,0xd, 0x3f,0x74,
+0x95,0x83,0x5, 0x8, 0xe0,0x2b,0x3d,0xb1,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xb5,0x8d,
+0x0, 0xce,0x3a,0xe0,0xe0,0x9, 0x37,0x21,0xe0,0x1, 0xc2,0xe0,0x3c,0x95,0xe0,0x4d,
+0x94,0xe9,0xc7,0x1, 0x3d,0x99,0xe2,0x1, 0xc7,0x7f,0xb5,0x83,0x0, 0xe9,0x96,0x8e,
+0xe2,0x7, 0xce,0xe7,0x5, 0x8, 0xb5,0x8e,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xc7,0x2,
+0xe7,0xff,0x0, 0xbe,0xe2,0x0, 0xce,0x80,0x3, 0x78,0xb6,0xe, 0x0, 0xf6,0xe8,0x72,
+0x54,0xf0,0xe0,0x9b,0x14,0x3c,0xe7,0xc7,0x0, 0x8b,0x8, 0xb1,0xdf,0xf9,0xdd,0xe9,
+0x17,0x81,0xe8,0x25,0x6f,0x9b,0x8, 0xe1,0x8, 0xb7,0xc0,0x7e,0xe8,0x52,0x4a,0x2,
+0xe8,0xd, 0x4f,0xa5,0xe8,0x29,0x53,0x4, 0x3f,0xf4,0xe8,0xd, 0x49,0xa4,0xe0,0x0,
+0x5, 0xd0,0xc1,0xff,0x39,0xbf,0xe8,0xd, 0x49,0x22,0xe8,0xd, 0x4c,0xa1,0xe0,0xf,
+0x31,0x28,0xe8,0xd, 0x49,0x23,0xe8,0x72,0x54,0x70,0x39,0x4f,0xe8,0xd, 0x4f,0xa0,
+0x3d,0x62,0x37,0xa8,0x3c,0xcf,0xef,0xfe,0xd4,0x19,0xe8,0x12,0x74,0x71,0x3d,0x62,
+0xe8,0x72,0x54,0x70,0xe0,0x0, 0x14,0xd0,0xef,0xfe,0xd4,0x10,0x11,0x0, 0xe8,0xd,
+0x4b,0xa9,0xe8,0xd, 0x4f,0x2a,0xe8,0x12,0x74,0x70,0x3a,0xe2,0xe8,0x52,0x4f,0x82,
+0x3f,0xf5,0x2, 0xa9,0xe8,0x12,0x57,0xf1,0xe8,0x79,0x57,0x4b,0x3f,0xf3,0xe0,0x0,
+0x5, 0xcd,0xe8,0xd, 0x4f,0xab,0xe0,0xd, 0x37,0xa8,0xe8,0xd, 0x4f,0xac,0x3f,0xcd,
+0x3f,0xf6,0x3, 0x4, 0xe2,0x0, 0xca,0x1, 0x2, 0x86,0x3f,0xe4,0x31,0x21,0xc7,0xff,
+0x39,0x7f,0x4, 0x25,0x17,0x81,0xe8,0xf3,0x6f,0x98,0xe8,0xd, 0x4f,0xa7,0xe0,0xe,
+0x37,0xa8,0xe8,0xd, 0x4f,0xa8,0x3f,0xce,0xe8,0x79,0x77,0xcb,0x0, 0x9c,0x39,0xb4,
+0xe7,0xff,0x0, 0xb3,0x3c,0x65,0x77,0x1, 0xd5,0x63,0xe0,0xf, 0x34,0x21,0x3f,0xf6,
+0x57,0x1, 0x4, 0x6, 0xe0,0xf, 0x33,0xa8,0x3f,0xce,0x3f,0xf8,0x5, 0x4, 0xc1,0x1,
+0xe2,0x1, 0xc1,0x7f,0xc2,0x81,0xe2,0x1, 0xc2,0xff,0x0, 0xc1,0x17,0x80,0xe8,0xf3,
+0x6f,0x98,0x2f,0x5c,0xe8,0xd, 0x4f,0xad,0xe8,0x79,0x54,0x4b,0xe0,0xe, 0x37,0xa8,
+0xe8,0xd, 0x4f,0xae,0x16,0x80,0x3f,0xce,0x3f,0xf6,0xe1,0x28,0x3c,0xd, 0x3, 0x3,
+0xe8,0x52,0x6e,0x82,0xc0,0x2, 0xb, 0xe1,0x17,0x80,0xe8,0xf3,0x6f,0x98,0x27,0x6b,
+0xc7,0x7f,0xe8,0x79,0x77,0x4b,0x0, 0xe7,0x8, 0xb7,0xc0,0x6e,0xe8,0x56,0x4f,0xaf,
+0xe8,0x56,0x45,0xb0,0x77,0x83,0x3f,0xe9,0x75,0x86,0xe6,0xa9,0xc9,0x89,0x55,0x83,
+0xe8,0x72,0x57,0x70,0xe0,0xaf,0x3d,0x88,0xe8,0x56,0x46,0x31,0x37,0xa1,0x3f,0x9e,
+0x97,0x8f,0x77,0x2, 0x3f,0x68,0x76,0x7, 0x3e,0x69,0xc7,0x7e,0x3b,0xe8,0x3b,0x69,
+0x39,0xa9,0xc6,0x7e,0x77,0x88,0x17,0x80,0x39,0x68,0xc3,0x82,0xc3,0x2, 0xc1,0x82,
+0xe0,0x43,0x3e,0x8e,0x76,0x4, 0x38,0xef,0x77,0x9, 0x3e,0xf7,0x5, 0x16,0x30,0x83,
+0xe0,0x8, 0x37,0x84,0xe0,0x8, 0x38,0xa8,0xe2,0x0, 0xcc,0x5a,0xe0,0x0, 0x2, 0x5f,
+0x57,0x88,0x3f,0xa1,0xe2,0x0, 0xcf,0xf7,0xe0,0x0, 0x5, 0x5c,0x17,0xbc,0xe0,0x28,
+0x3c,0x1f,0xb0,0x8a,0xc0,0x12,0xb, 0xe1,0xe2,0x0, 0xce,0x80,0x3, 0x24,0x3d,0xe2,
+0xc5,0x82,0xe0,0x43,0x3d,0x8b,0x57,0x6, 0x3e,0xfe,0x4, 0x5, 0x3d,0xe2,0xc5,0x82,
+0xe0,0x43,0x3d,0x8b,0x57,0x3, 0x56,0x4, 0x3f,0x3b,0xe2,0x1, 0xc6,0x7f,0x12,0x80,
+0x77,0x1, 0x76,0x5, 0x3a,0x65,0x56,0x5, 0xe2,0x1, 0xc2,0x7f,0x3e,0x14,0xe0,0x43,
+0x3e,0xc, 0x3e,0x76,0x5, 0xa, 0xc6,0x81,0xc1,0x7f,0xe0,0x43,0x3e,0x8d,0xe2,0x1,
+0xc1,0x7f,0x0, 0xc4,0x3d,0xed,0x0, 0xe0,0xe2,0x0, 0xce,0x0, 0x3, 0x1f,0xe0,0xe,
+0x39,0xa4,0xe0,0x43,0x3f,0xe, 0x55,0x87,0x3d,0xfc,0x2, 0x5, 0xe0,0xe, 0x39,0xa4,
+0xe0,0x43,0x3f,0xe, 0x55,0x81,0x3f,0x1b,0x55,0x82,0x37,0x21,0x3f,0x1b,0x55,0x89,
+0x97,0xe, 0x3d,0xfd,0x1, 0x8, 0x3e,0xf7,0x1, 0x6, 0x55,0x84,0x3d,0xfc,0x1, 0x3,
+0x3e,0x76,0x1, 0x86,0x3f,0x9e,0xc2,0x81,0x0, 0xce,0x3f,0x6c,0x0, 0xe5,0x3c,0x7d,
+0x1, 0x83,0x3e,0x79,0x1, 0x79,0x38,0x9e,0x0, 0xf7,0x14,0x1, 0xe7,0xff,0x0, 0xab,
+0x14,0x0, 0xe7,0xff,0x0, 0xa8,0x8, 0xb7,0xc0,0x74,0xe8,0x29,0x57,0x84,0xe8,0x52,
+0x4a,0x82,0xe2,0x1, 0xcf,0xc7,0x2, 0xb, 0x17,0x80,0xe8,0x25,0x6f,0xe6,0xe8,0x25,
+0x4f,0xe4,0x27,0x8f,0xc7,0xff,0xe8,0x25,0x6f,0xe4,0x0, 0x8b,0xe2,0x7, 0xcf,0xe8,
+0x5, 0x77,0xe0,0x0, 0x17,0xd0,0xe8,0x25,0x6f,0xe4,0x17,0x80,0xe8,0x52,0x6f,0xb3,
+0xe8,0x25,0x4f,0xe5,0x27,0x84,0xc7,0xff,0xe8,0x25,0x6f,0xe5,0xde,0xb6,0xe8,0x25,
+0x6c,0x67,0x22,0xb6,0x2c,0xb, 0xe8,0x12,0x57,0xf1,0xe2,0x0, 0xcf,0xbc,0x5, 0xb0,
+0xe8,0x12,0x57,0xf0,0xe2,0x0, 0xcf,0xd0,0x5, 0xab,0xe8,0x56,0x4f,0xb0,0xc7,0xff,
+0xe2,0x1, 0xc7,0xff,0x77,0x83,0xe8,0x56,0x4f,0xb1,0xc7,0xff,0xe2,0x1, 0xc7,0xff,
+0x77,0x84,0x24,0x20,0xe8,0x29,0x51,0x84,0x17,0x83,0xe0,0x23,0x39,0xbf,0xe0,0x6,
+0x17,0xa0,0xe1,0x23,0x39,0xef,0xe0,0x0, 0x17,0xf8,0xe8,0x25,0x6f,0xe5,0x17,0x80,
+0xe8,0x52,0x6f,0xb3,0x13,0x3, 0x12,0x0, 0xe1,0x2e,0x3a,0x96,0x3b,0xe4,0x77,0x5,
+0x39,0x64,0xe2,0x1, 0xc1,0x7f,0x39,0x75,0x4, 0x88,0x23,0x82,0xd4,0x6c,0xc0,0xc,
+0xb, 0xe1,0xe0,0x3, 0x11,0xf4,0x0, 0xef,0x3c,0x62,0xd4,0x16,0x24,0x36,0xe0,0xf,
+0x32,0x21,0xe0,0x4d,0x16,0xe2,0x3f,0x9d,0x8c,0xf, 0x24,0x28,0x57,0x3, 0xe1,0x2d,
+0x3f,0x18,0x26,0xa4,0x8f,0x9f,0x16,0x82,0xe1,0x2d,0x3f,0x9d,0x26,0x9f,0x57,0x4,
+0xe1,0x2d,0x3f,0x1f,0x26,0x9b,0xe8,0x56,0x4e,0xaf,0x3f,0x6f,0xe0,0xae,0x3e,0x88,
+0xe8,0x72,0x56,0xf0,0xe0,0xc, 0x37,0x21,0x3e,0x9c,0x96,0xd, 0x3e,0x73,0x3, 0x8e,
+0x3d,0x60,0x3c,0xef,0xc5,0xc, 0x76,0x1, 0x77,0x82,0xde,0xdf,0x3c,0xe8,0x56,0x1,
+0x57,0x82,0x2c,0xe, 0x3c,0x62,0xd3,0xf7,0x13,0x81,0x3c,0x62,0xd4,0x19,0x24,0x5,
+0x23,0x84,0x17,0x81,0xe8,0x25,0x6f,0xe6,0xc2,0x1, 0xe7,0xff,0x0, 0xbb,0x57,0x5,
+0xe8,0x29,0x56,0x84,0x2f,0x5, 0x15,0x9c,0xe1,0x2f,0x3f,0x9b,0x27,0x89,0xe0,0xf,
+0x36,0xcf,0x3e,0x9f,0x36,0x81,0x3e,0xfc,0x5, 0x69,0x14,0x80,0x0, 0xe4,0xe0,0x2d,
+0x3e,0xb6,0x0, 0xfa,0xe8,0xf3,0x6c,0x20,0xe8,0xf3,0x4f,0xa0,0xe6,0xa9,0xcf,0xdf,
+0xe2,0x0, 0xcf,0x84,0x1, 0x83,0x17,0x83,0x0, 0x85,0xe2,0x0, 0xcf,0x81,0x2, 0x85,
+0x17,0x81,0xe8,0xf4,0x6f,0xaf,0x38,0x82,0xe2,0x0, 0xcf,0x82,0x1, 0x75,0x17,0x81,
+0xe8,0xf4,0x6f,0xaf,0x17,0x80,0xe8,0xf3,0x6f,0xa0,0x0, 0xf6,0x8, 0xb1,0xe2,0x1,
+0xcc,0x1a,0x3f,0xe8,0x1, 0x95,0x17,0x0, 0x16,0x82,0xe8,0xf3,0x6c,0xfc,0xe8,0xf3,
+0x6f,0x7d,0xe8,0xf4,0x6f,0x23,0xe8,0xf3,0x6e,0xfe,0xe8,0xf3,0x6f,0x7f,0x3c,0x6f,
+0xe4,0x1, 0xcc,0x0, 0xe2,0x0, 0xcc,0x6f,0x2, 0x8a,0xd3,0x80,0x0, 0x84,0x2c,0x78,
+0x3c,0x69,0xdf,0xc9,0x17,0x81,0xe8,0x24,0x6f,0xd1,0x8, 0xe1,0xe2,0x1, 0xcf,0xfd,
+0x1, 0x84,0xe8,0x25,0x6c,0xe8,0x0, 0xf7,0xe2,0x1, 0xcf,0xfc,0x1, 0xf4,0x3c,0x69,
+0x8, 0xa1,0xe7,0x86,0x0, 0xb1,0x2c,0x4, 0xe8,0xf3,0x4c,0x20,0x38,0x82,0xe2,0x0,
+0xcc,0x3, 0x5, 0x84,0xe0,0x1, 0x14,0x7f,0x38,0x82,0x17,0x80,0xe2,0x0, 0xcc,0x1,
+0xe8,0x31,0x6f,0xf8,0x1, 0xf8,0x8, 0xb2,0x39,0x68,0xe0,0x1, 0xdc,0x99,0xe8,0x12,
+0x57,0xba,0xe0,0x1, 0x14,0x7f,0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x12,0xe0,0x2,
+0xb7,0x2f,0x9, 0x61,0xe8,0xf3,0x4f,0xa0,0xe6,0xa9,0xcf,0xdf,0x2f,0x82,0x0, 0xdc,
+0xe2,0x0, 0xcf,0x84,0x1, 0x83,0xe7,0x79,0x0, 0xb4,0x14,0x0, 0x38,0x82,0xe8,0xf3,
+0x4f,0xa0,0xe6,0xa9,0xcf,0xdf,0x2f,0x83,0xe7,0xff,0x0, 0xa2,0xe2,0x0, 0xcf,0x84,
+0x1, 0x83,0xe7,0x75,0x0, 0xce,0x38,0x82,0x8, 0xb3,0xe0,0x1, 0x11,0xff,0x11,0x0,
+0x3c,0xe3,0x15,0x3e,0xe1,0x0, 0x14,0x58,0xe8,0xf3,0x69,0x20,0xe0,0x2, 0xdf,0x11,
+0x15,0x3e,0x3c,0xe3,0xe0,0xff,0x14,0x74,0xe0,0x2, 0xdf,0xb, 0xe1,0x0, 0x17,0xd8,
+0xe8,0x25,0x69,0x69,0xe8,0x81,0x77,0xa5,0xe8,0xf3,0x69,0x1e,0x9, 0xa1,0xe7,0x98,
+0x0, 0x8e,0xe8,0xc, 0x4d,0x79,0x3d,0x78,0x5, 0xa2,0xe8,0xc, 0x4f,0xfb,0xe0,0x8,
+0x3d,0x28,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0xfc,0x3d,0xea,0x3f,0xce,0x3c,0x3f,
+0xc5,0xff,0xe0,0xd, 0x34,0x48,0x3d,0x7d,0x3f,0xeb,0x35,0x8f,0x16,0x0, 0x3f,0x6b,
+0x2, 0x83,0x3e,0x6b,0x3e,0xef,0x3f,0xad,0xe1,0x2e,0x3f,0x7c,0x2f,0x4, 0xe2,0x8,
+0xcf,0xb6,0x5, 0x83,0xe0,0x8, 0x17,0xb8,0x3c,0x6f,0x38,0x82,0xe8,0x12,0x57,0xea,
+0xe8,0xc, 0x4d,0xfa,0xe0,0xe, 0x3f,0xab,0x3f,0x78,0x3, 0xa4,0xe8,0xc, 0x4d,0x75,
+0xe0,0xf, 0x3d,0xaf,0xe0,0xe, 0x35,0x28,0x3c,0x1f,0xe8,0xc, 0x4d,0x76,0xe8,0xc,
+0x4f,0xfd,0x3d,0x4e,0xe0,0xe, 0x37,0xa8,0xe8,0xc, 0x4f,0xfe,0x16,0x0, 0x3f,0xce,
+0x3c,0x3f,0xe0,0xd, 0x34,0x48,0x3d,0xfd,0x2, 0x86,0x3f,0xeb,0xc7,0xff,0x3e,0xef,
+0xe0,0xc, 0x37,0x8f,0xe0,0xf, 0x3d,0x2b,0x17,0x0, 0x3f,0x9d,0xe0,0x2e,0x3f,0x7c,
+0x0, 0xce,0x17,0x0, 0x3f,0xe8,0x0, 0xcb,0xe8,0xd, 0x4d,0x87,0x3d,0xf8,0x5, 0xa4,
+0xe0,0xf, 0x3d,0xa8,0xe8,0xd, 0x4c,0x9, 0x15,0x0, 0xe0,0xe, 0x34,0x28,0xe8,0xd,
+0x4c,0xa, 0x3e,0x6a,0x3c,0x4e,0x3f,0xb8,0x3f,0x6a,0xe0,0xd, 0x37,0xc8,0x3d,0xfd,
+0x3f,0xeb,0x2, 0x85,0xc5,0xff,0x3e,0xeb,0xe0,0xc, 0x35,0x8f,0x3f,0xad,0xe1,0x2e,
+0x3f,0x7c,0xe2,0x0, 0xcf,0x0, 0x2, 0x3c,0x2f,0x4, 0xe2,0x0, 0xcf,0x81,0x2, 0xb8,
+0x17,0x0, 0x3f,0xee,0x0, 0xb5,0xe8,0xd, 0x4f,0x83,0xe0,0xe, 0x37,0xa8,0xe8,0xd,
+0x4f,0x84,0x3f,0xce,0xe8,0xd, 0x4f,0x8, 0xe0,0xb, 0x3f,0xae,0x3d,0xf8,0x3, 0xaa,
+0x3f,0xf8,0x4, 0xef,0xe0,0xf, 0x3f,0x2f,0x3f,0x98,0xe8,0xd, 0x4c,0xb, 0x16,0x0,
+0xe0,0xd, 0x34,0x28,0xe8,0xd, 0x4c,0xc, 0x3c,0x4d,0x3f,0xb8,0xe0,0xd, 0x37,0xc8,
+0x3f,0x7d,0x2, 0x85,0xc7,0x7f,0x3e,0xee,0xe0,0xc, 0x37,0xf, 0x3f,0xeb,0x17,0x0,
+0x3f,0x9d,0xe0,0x2e,0x3f,0x7c,0xe2,0x0, 0xcf,0x0, 0x2, 0x8, 0x2f,0x52,0xe2,0x0,
+0xcf,0x81,0x5, 0xcf,0xe2,0x12,0xcf,0xde,0x5, 0x83,0xe0,0x12,0x17,0xe0,0x3c,0x6f,
+0x38,0x82,0x17,0x0, 0x3f,0xe8,0x0, 0xf0,0x8, 0xb4,0xe8,0x56,0x4f,0x98,0xe8,0x56,
+0x4f,0x19,0x2f,0x9b,0xe8,0x56,0x6f,0xa1,0x27,0x6, 0x17,0x1, 0xe8,0x56,0x6f,0x1d,
+0xe8,0x56,0x6f,0xa0,0xe0,0x52,0x14,0xb8,0xe8,0xb, 0x4a,0x69,0xe0,0x53,0x14,0x44,
+0x3d,0x64,0xe4,0x0, 0xc5,0xe, 0xe0,0x52,0x11,0x38,0xe0,0x2, 0xdd,0xe6,0x11,0x80,
+0x3a,0x73,0xc1,0xe, 0x1, 0x89,0xa, 0x61,0x17,0x81,0xe8,0x56,0x6f,0xa1,0x2f,0x6b,
+0xe8,0x56,0x6f,0x9c,0x0, 0xe8,0xe0,0x40,0x94,0x72,0xc1,0x81,0xdf,0x23,0xe0,0x7,
+0xb4,0x72,0xe2,0x1, 0xc1,0xff,0xe0,0x40,0x94,0x62,0xdf,0x6f,0xe0,0x8, 0xb4,0x2,
+0x0, 0xe8,0xe0,0xf4,0x17,0x80,0x17,0x0, 0xb7,0xf, 0xb7,0x1f,0xaf,0x4f,0xb7,0x3f,
+0x38,0x82,0xe8,0x7a,0x57,0x83,0x27,0x85,0xc7,0xff,0xe8,0x7a,0x77,0x83,0x38,0x82,
+0xe8,0xf3,0x4f,0x7c,0xe8,0x7a,0x77,0x80,0xe8,0xf4,0x6f,0x82,0x27,0x79,0xe8,0xf3,
+0x4f,0x7d,0x27,0xd, 0xe8,0x12,0x57,0x3a,0xe8,0xf3,0x6f,0xfd,0xe8,0xf4,0x6f,0xa3,
+0xe0,0x2, 0x96,0xae,0xe7,0x6, 0xce,0x9f,0xe0,0x2, 0xb6,0xae,0x17,0x82,0xe8,0xf3,
+0x6f,0xfe,0x17,0x80,0xe8,0xf3,0x6f,0xff,0x0, 0xe3,0xe8,0xf3,0x4f,0xfc,0x27,0x8d,
+0xe8,0xf3,0x4f,0xfd,0x2f,0x8a,0xe8,0xf3,0x4f,0xff,0x2f,0x87,0x17,0x81,0xe8,0xf3,
+0x6f,0xff,0x17,0x82,0xe8,0xf3,0x6f,0xfe,0x38,0x82,0xe8,0xf3,0x4f,0xfc,0x27,0x9d,
+0xe8,0xf3,0x4f,0xfd,0x2f,0x9a,0xe8,0xf3,0x4f,0x7f,0xe2,0x0, 0xcf,0x1, 0x1, 0x95,
+0xe8,0xf3,0x4f,0xfe,0xc7,0xff,0xe2,0x1, 0xc7,0xff,0xe8,0xf3,0x6f,0xfe,0x2f,0x8d,
+0xe8,0xf3,0x6f,0x7d,0xe8,0xf4,0x6f,0x23,0xe8,0x12,0x57,0x3a,0xe0,0x2, 0x96,0xae,
+0xe7,0x6, 0xce,0x9f,0xe0,0x2, 0xb6,0xae,0x38,0x82,0x8, 0xb7,0xc0,0x52,0xdf,0xde,
+0xe8,0x52,0x48,0x82,0x70,0x8b,0x28,0x85,0xc0,0x2e,0xb, 0xa1,0xe7,0xff,0x0, 0xa3,
+0xe8,0xf3,0x4a,0xfc,0xe8,0x29,0x57,0x84,0xe2,0x0, 0xca,0x80,0x37,0x81,0xe8,0xd,
+0x4f,0x2f,0xe8,0xf4,0x4e,0x82,0x77,0x90,0x17,0xb2,0xe0,0x6f,0x39,0x2e,0xe2,0x0,
+0xce,0x80,0xe8,0x56,0x4e,0x2f,0xe0,0xe, 0x37,0xc1,0xe0,0x6e,0x39,0x2f,0xe8,0x56,
+0x49,0x2e,0x77,0x12,0x3f,0x6c,0xe8,0x72,0x51,0xf0,0xe8,0x25,0x4c,0x51,0xe8,0x25,
+0x4c,0xd0,0xe5,0xff,0xc7,0x7e,0xe0,0x4d,0x15,0x62,0x10,0x80,0x71,0x7, 0xe0,0xf,
+0x36,0x21,0xc1,0x7e,0x71,0x85,0x75,0x8, 0x70,0x8a,0x72,0x8c,0x74,0xd, 0x74,0x91,
+0x77,0x8e,0x71,0x17,0x77,0xf, 0x51,0x8, 0x52,0x85,0x89,0x92,0x8e,0x82,0x3f,0xe3,
+0xe0,0xaf,0x3e,0x8c,0x54,0x10,0x37,0xa1,0x3f,0x95,0x93,0x8f,0x71,0x83,0x3c,0x77,
+0xe0,0x2, 0x2, 0x4a,0x54,0x87,0xe1,0x2f,0x3e,0xa9,0xe0,0x2, 0x2f,0xc5,0xe1,0x2f,
+0x39,0xac,0xe0,0x2, 0x2f,0xc1,0x55,0xc, 0x25,0x31,0xe2,0x0, 0xce,0x81,0xe0,0x2,
+0x5, 0xbb,0x57,0x17,0x3e,0xfe,0xe0,0x2, 0x3, 0x37,0xe0,0x2, 0x17,0xac,0x77,0x86,
+0xe0,0x43,0x3d,0xd, 0x3f,0xed,0xe0,0x2, 0x3e,0x3a,0xc7,0x81,0x50,0x83,0xe2,0x1,
+0xc7,0xff,0xe0,0x43,0x3c,0x81,0x77,0x84,0x3f,0xe2,0x51,0x85,0x3f,0x99,0x37,0xa1,
+0x39,0x9f,0x71,0x95,0x11,0x80,0x3f,0x6d,0x3b,0x6a,0x71,0x9, 0x3f,0xed,0x75,0x13,
+0x3d,0xe3,0x74,0x94,0xe2,0x0, 0xcc,0x80,0x4, 0x3e,0x52,0x95,0xe0,0x2, 0x31,0xa1,
+0x3a,0xa2,0x3c,0x6a,0x10,0x80,0x72,0x81,0x0, 0xa5,0xe0,0xf, 0x33,0x82,0xe0,0xe,
+0x33,0x81,0xe0,0xe, 0x3f,0x9e,0x77,0x6, 0x0, 0xd4,0x52,0x81,0x51,0x6, 0x92,0x85,
+0xe0,0x22,0x3a,0xa2,0x72,0x82,0x21,0x21,0xe0,0x25,0x3b,0xa5,0x22,0x9e,0x3c,0x7e,
+0xc0,0x81,0x3a,0xe8,0xc5,0x81,0xe2,0x1, 0xc0,0xff,0xe2,0x1, 0xc2,0xff,0x3, 0x2,
+0x3f,0x65,0x3c,0x7f,0x2, 0x16,0x52,0x81,0x51,0xf, 0xc4,0x7f,0x3a,0x92,0x3b,0x64,
+0x72,0x81,0xe0,0x43,0x3a,0x8, 0xe2,0x0, 0xca,0x0, 0x3, 0x60,0xc1,0x81,0x20,0x8b,
+0xc4,0xff,0xe0,0x43,0x3c,0x89,0x0, 0xc7,0x3a,0x76,0x5, 0x79,0x3a,0x66,0x0, 0xec,
+0x3f,0xe5,0x0, 0xea,0x54,0xd, 0x3e,0xf8,0x3, 0xbc,0x54,0x84,0x54,0x14,0x50,0x85,
+0xe0,0xa8,0x3c,0x8c,0x11,0x80,0x34,0x21,0x38,0x98,0x3a,0xe9,0x70,0x94,0x54,0x83,
+0x3c,0xa3,0xe0,0x43,0x3c,0x89,0xe2,0x0, 0xcc,0x80,0x4, 0x2b,0x54,0x94,0xe0,0x2,
+0x31,0xa1,0xe0,0x2, 0x3c,0xa2,0x10,0x80,0x54,0x84,0x0, 0x9b,0x54,0x6, 0x92,0x2,
+0xe0,0x26,0x3a,0x28,0x23,0x1a,0xe0,0x24,0x3b,0xa4,0x22,0x17,0xc0,0x81,0xe1,0x2e,
+0x3c,0xde,0xe1,0x2f,0x3c,0xef,0xc5,0x81,0xe2,0x1, 0xc0,0xff,0xe2,0x1, 0xc7,0x7f,
+0xe2,0x1, 0xc7,0xff,0x3a,0xe9,0x54,0xe, 0xc4,0x81,0xe2,0x1, 0xc4,0xff,0x39,0x18,
+0x54,0x7, 0x3c,0x79,0x2, 0xe4,0x0, 0x83,0x3c,0xf5,0x4, 0xf6,0xc1,0x81,0x28,0xd0,
+0x50,0x83,0x51,0x11,0x38,0xf2,0xe0,0x0, 0x3, 0xf7,0x3c,0x61,0xc4,0x1, 0x51,0x89,
+0xe2,0x1, 0xc4,0x7f,0x39,0x98,0x12,0x0, 0x71,0x94,0xe0,0x9, 0x3c,0x14,0xe2,0x1,
+0xc4,0xff,0x3e,0x79,0x5, 0xa8,0x54,0x94,0x50,0x85,0x3c,0x94,0x34,0xa1,0x3c,0x91,
+0x11,0x0, 0x50,0x93,0x0, 0x99,0x51,0x86,0x93,0x9, 0xe0,0x23,0x3b,0x23,0x21,0xb3,
+0xe0,0x26,0x3b,0xa6,0x23,0x30,0x38,0xfe,0xc1,0x1, 0x3d,0x61,0xc5,0x81,0xe2,0x1,
+0xc1,0x7f,0xe2,0x1, 0xc5,0x7f,0x3, 0x2, 0x3f,0x6a,0x38,0xff,0x2, 0x28,0x55,0xf,
+0xc0,0xff,0x3c,0x9a,0x3d,0x65,0xe0,0x43,0x3a,0x81,0xe2,0x0, 0xca,0x80,0x3, 0x64,
+0xc2,0x1, 0x29,0x54,0x51,0xd, 0x3e,0xf2,0x3, 0xbe,0x52,0x84,0x39,0xe8,0xe0,0xa3,
+0x3a,0x8c,0x11,0x0, 0x3a,0x65,0x71,0x89,0xe0,0xa, 0x3c,0x12,0xe2,0x1, 0xc5,0x7f,
+0x3e,0x7a,0x5, 0xb1,0x54,0x89,0x55,0x5, 0x3c,0x92,0x34,0xa1,0x3c,0x9a,0x10,0x80,
+0x55,0x4, 0x0, 0xa1,0x3a,0xfa,0x5, 0x65,0x3a,0xea,0x0, 0xda,0x3f,0xea,0x0, 0xd8,
+0x52,0x86,0x91,0x89,0xe0,0x26,0x39,0xa5,0x23,0x1a,0xe0,0x23,0x3b,0xa3,0x21,0x97,
+0xc0,0x81,0xe1,0x2e,0x3d,0x5e,0xe1,0x2f,0x3d,0x6f,0xc5,0x81,0xe2,0x1, 0xc0,0xff,
+0xe2,0x1, 0xc7,0x7f,0xe2,0x1, 0xc7,0xff,0x3a,0x6a,0x51,0x8e,0xc5,0x1, 0xe2,0x1,
+0xc5,0x7f,0x3c,0x93,0x52,0x87,0x3a,0xfa,0x2, 0xe4,0x0, 0x83,0x3d,0x74,0x4, 0xf6,
+0xc1,0x1, 0x28,0xcb,0x50,0x92,0x3d,0xf1,0x4, 0x9e,0x3f,0xae,0xe2,0x0, 0xcf,0x83,
+0x5, 0x1a,0xe8,0xd, 0x4f,0xb4,0x51,0x3, 0xe0,0xe, 0x37,0xa8,0xe8,0xd, 0x4f,0xb5,
+0xe8,0xf4,0x6e,0x83,0x3f,0xce,0xe8,0x7a,0x77,0x83,0x17,0x81,0xe8,0xf4,0x6f,0x82,
+0xe8,0xf4,0x6f,0x80,0xe8,0xf4,0x69,0x4, 0xde,0x41,0xe8,0xf4,0x4f,0x82,0x2f,0x9b,
+0xc0,0x2e,0xb, 0xe1,0x57,0x8a,0x51,0x88,0x52,0x8b,0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0xc1,0x82,0x3a,0xff,0x71,0x88,0x77,0x8a,0xe7,0xfd,0x1, 0x9f,0x0, 0xef,0x3c,0x62,
+0x3c,0xe3,0xc1,0x1, 0xd0,0x50,0xe2,0x1, 0xc1,0x7f,0xe8,0x52,0x4f,0x82,0x3f,0xf2,
+0x2, 0xf7,0x0, 0xe7,0x11,0x0, 0x39,0xe2,0x0, 0xf9,0xe8,0x25,0x4f,0xeb,0x27,0x9d,
+0x17,0x80,0xe8,0x25,0x6f,0xeb,0xe8,0xf4,0x4f,0x88,0x37,0xa5,0xe8,0x29,0x77,0x8e,
+0xe8,0xf4,0x4f,0x89,0x37,0xa5,0xe8,0x29,0x77,0x8f,0xe8,0xf4,0x4f,0x8a,0x37,0xa5,
+0xe8,0x29,0x77,0x91,0xe8,0xf4,0x4f,0x8b,0x37,0xa5,0xe8,0x29,0x77,0x92,0xe8,0xf4,
+0x4f,0x8d,0x37,0xa5,0xe8,0x29,0x77,0x96,0x38,0x82,0x3f,0xe8,0xc7,0xdd,0x3f,0x6f,
+0xe2,0x1, 0xc7,0x7f,0xe2,0x0, 0xcf,0xc, 0x2, 0x86,0x17,0x81,0x37,0xbe,0xe2,0x30,
+0xc7,0xa9,0x2f,0x89,0x17,0x81,0xe2,0x0, 0xcc,0x25,0xe8,0x25,0x6f,0xeb,0x1, 0x83,
+0xe8,0x25,0x6f,0xea,0x38,0x82,0xe0,0xf, 0x34,0x43,0xe0,0x4d,0x17,0x62,0x3f,0x1f,
+0xe6,0xad,0xcc,0x58,0xe0,0x24,0x17,0xc0,0x3c,0x1f,0xe0,0xf, 0x8f,0xe, 0x8c,0x8,
+0x3c,0x5e,0x38,0x82,0xe6,0xad,0xcf,0x58,0xe0,0x24,0x17,0xc0,0x3f,0x9e,0xe0,0xe,
+0x34,0x43,0xe0,0x4d,0x14,0x62,0x3c,0x1e,0x8f,0x8f,0xe0,0xf, 0x8f,0x8, 0x24,0x85,
+0x3f,0xce,0xe0,0xf, 0xaf,0x88,0x38,0x82,0xe3,0xf, 0x3f,0x5f,0x0, 0xfb,0xe0,0x4d,
+0x17,0xe2,0x34,0x21,0x3c,0x1f,0x8e,0x88,0xe8,0x56,0x4f,0x2f,0x8f,0x98,0xe0,0xaf,
+0x3e,0x8e,0xe8,0x72,0x57,0x70,0x37,0xa1,0x3f,0x9e,0x94,0xf, 0x38,0x82,0x34,0x21,
+0xe0,0x4d,0x17,0xe2,0x3f,0x98,0xe8,0x52,0x4e,0x8a,0x8f,0xf, 0x3e,0xfe,0x1, 0x87,
+0xe8,0x52,0x4c,0xb, 0x8f,0x9f,0xe0,0x28,0x3c,0xf, 0x38,0x82,0x14,0x0, 0x0, 0xfe,
+0xe8,0x56,0x4f,0x30,0xe8,0x29,0x57,0x8e,0x3f,0x78,0x2, 0x83,0xe8,0x29,0x57,0x91,
+0x3c,0x6f,0x38,0x82,0x8, 0xb5,0x11,0x0, 0x39,0xe2,0xe0,0x4d,0x12,0x62,0x12,0x81,
+0xe8,0x52,0x4f,0x82,0x3f,0xf3,0x2, 0x84,0xe8,0x52,0x69,0x2, 0xa, 0xe1,0x3c,0x63,
+0xdf,0xa3,0x24,0x11,0xe0,0xe, 0x31,0xa1,0x3f,0x14,0x8e,0x8e,0xe0,0xf, 0x31,0x21,
+0x3f,0x94,0xae,0x8f,0x3c,0x62,0x8f,0x1e,0xc1,0x1, 0x3c,0xe5,0xe2,0x1, 0xc1,0x7f,
+0xaf,0x1f,0xdf,0xa1,0xc1,0x81,0xe2,0x1, 0xc1,0xff,0x0, 0xe3,0x8, 0xb7,0xe1,0xfe,
+0xc0,0x76,0xe8,0x52,0x4a,0x2, 0x39,0xe0,0xc1,0x94,0xe0,0xa, 0x32,0x21,0xe0,0x4d,
+0x14,0xe2,0x3c,0x63,0xe0,0x2, 0xdb,0x9, 0xe8,0x72,0x57,0xf0,0xe0,0x25,0x13,0xee,
+0x77,0x86,0x11,0x0, 0xe8,0x25,0x4f,0xec,0xe8,0x56,0x4b,0x2f,0x37,0xa1,0x3f,0x97,
+0x3a,0xe2,0x77,0x89,0x57,0x89,0x3f,0xf7,0xe0,0x0, 0x1, 0xfc,0xe8,0xb, 0x49,0xe9,
+0xe0,0x1, 0x15,0x7f,0x14,0xff,0x39,0xf5,0xe0,0x1, 0x2, 0xc0,0xe8,0xb, 0x4d,0x6a,
+0x3c,0xe0,0x3c,0x60,0x35,0x21,0xe0,0x0, 0xc4,0xd0,0xc4,0x14,0xe0,0x2, 0xda,0xe5,
+0xe0,0xa, 0x31,0xa1,0xe0,0x1, 0x14,0xff,0xe0,0x25,0x14,0x6e,0xe0,0x2, 0xdb,0x29,
+0xe0,0x1, 0x29,0x30,0x39,0xf2,0xe8,0x25,0x69,0x6c,0xe0,0x1, 0x4, 0xc7,0xe8,0x52,
+0x69,0x2, 0xe0,0x1, 0xc0,0xa, 0xb, 0xe1,0x3c,0x6a,0x75,0x81,0x77,0x2, 0x75,0x3,
+0x74,0x84,0xdf,0x42,0x55,0x81,0x57,0x2, 0x55,0x3, 0x54,0x84,0x24,0x17,0xe0,0x1,
+0x35,0xa1,0x38,0x93,0x8c,0x1, 0xe2,0x1, 0xcc,0x7f,0x1, 0x10,0x88,0x91,0x8e,0x97,
+0x3e,0xa1,0x88,0x87,0xe0,0x41,0x3e,0xad,0xe0,0x8, 0x38,0xa8,0xe0,0x41,0x3c,0x28,
+0x3c,0x1d,0x3c,0xf8,0x5, 0x83,0x3c,0xe8,0x3f,0x6a,0xc5,0x81,0x3d,0x6b,0xe2,0x1,
+0xc5,0x7f,0x3d,0x74,0x4, 0xda,0xe2,0x1, 0xcf,0x7f,0x1, 0x28,0x37,0x21,0x3f,0x13,
+0x8d,0x8e,0x8d,0x1e,0x3c,0x6b,0x75,0x81,0x77,0x2, 0x75,0x3, 0xdf,0x5a,0x55,0x3,
+0x55,0x81,0x3e,0xea,0xe0,0xad,0x3d,0x86,0x57,0x86,0x36,0xa1,0x3e,0x9f,0x96,0x8d,
+0x57,0x2, 0x3e,0xf8,0x4, 0x13,0x3f,0xe0,0xe0,0xd, 0x31,0x21,0xe0,0x0, 0xc7,0xd0,
+0x3e,0x9f,0x17,0xff,0xaf,0x8e,0x3f,0xe5,0xc7,0x81,0xc1,0x1, 0x3a,0xef,0xe2,0x1,
+0xc1,0x7f,0xad,0x8d,0xe2,0x1, 0xc2,0xff,0xad,0x1d,0xc3,0x82,0xe7,0xff,0x0, 0x84,
+0x15,0x80,0xe0,0x7, 0x14,0xff,0xe0,0x1, 0x17,0x7f,0x0, 0xc9,0x3c,0x6c,0x75,0x81,
+0x77,0x2, 0x75,0x3, 0x74,0x84,0x76,0x5, 0xde,0xe7,0x55,0x81,0x57,0x2, 0x55,0x3,
+0x54,0x84,0x56,0x5, 0x24,0x18,0x3f,0xe0,0xe0,0xd, 0x37,0x21,0xc7,0x94,0x3e,0x9f,
+0x8c,0xd, 0xe2,0x1, 0xcc,0x7f,0x1, 0xf, 0x88,0x9d,0x57,0x86,0x3e,0xe1,0xe0,0xad,
+0x3c,0x6, 0x36,0xa1,0x3e,0x9f,0x96,0x8d,0x3d,0xfd,0x3, 0x5, 0x3b,0xec,0x3d,0xed,
+0x74,0x7, 0x70,0x88,0xc7,0x1, 0x3e,0x6e,0xe2,0x1, 0xc6,0x7f,0x3e,0x74,0x4, 0xd7,
+0xe2,0x1, 0xcb,0xff,0x1, 0x13,0x3f,0xe0,0xe0,0xe, 0x31,0x21,0xe0,0x0, 0xc7,0xd0,
+0x3f,0x1f,0x57,0x87,0x33,0xa1,0xaf,0x8e,0xc1,0x1, 0x57,0x88,0xe2,0x1, 0xc1,0x7f,
+0xaf,0x9e,0x3f,0xe0,0xc7,0x94,0x3b,0x9f,0xac,0x87,0x3f,0xe5,0xc7,0x81,0x3a,0xef,
+0xe2,0x1, 0xc2,0xff,0xe7,0xfe,0x0, 0xc1,0x17,0x0, 0x3b,0xea,0x3d,0xee,0x0, 0xdc,
+0xe0,0x4, 0x31,0x21,0x3c,0xe0,0x3d,0x64,0xc4,0x94,0xe0,0x4d,0x14,0x62,0xe0,0x2,
+0xda,0x24,0x3c,0xe0,0x3d,0x64,0xc4,0x94,0xe0,0x25,0x14,0x6e,0xe0,0x2, 0xda,0x1d,
+0x12,0x0, 0x12,0x81,0x3c,0x64,0x3c,0xe5,0xc2,0x1, 0xde,0x9d,0xe2,0x1, 0xc2,0x7f,
+0x39,0x74,0x1, 0xf9,0xe7,0xfe,0x0, 0xb8,0xe8,0x52,0x69,0x82,0xe7,0xfe,0x0, 0xbb,
+0x8, 0xb7,0xe8,0x52,0x4a,0x82,0xe2,0x0, 0xca,0x83,0xe0,0x0, 0x5, 0xfb,0x15,0x80,
+0xe8,0x0, 0x4b,0x70,0xe0,0x4d,0x11,0xe2,0x39,0x6b,0xe7,0xff,0x12,0x1c,0x8f,0x93,
+0x3f,0x6f,0xc7,0x7e,0xe2,0x0, 0xcf,0x1f,0xe0,0x0, 0x5, 0xd8,0x8f,0x3, 0xe8,0x56,
+0x4d,0x2f,0xe8,0x72,0x56,0xf0,0xe0,0x9, 0x3f,0x3a,0xe0,0xc, 0x3c,0x9f,0x36,0x21,
+0x3e,0x1d,0x96,0xc, 0xe2,0x2, 0xce,0x22,0xe0,0x0, 0x2, 0x48,0xe0,0x0, 0x27,0x51,
+0x3e,0x6e,0xc6,0x7f,0xe2,0x1, 0xc6,0x7f,0x3c,0x6f,0xe0,0xa8,0x3e,0xa, 0x3e,0x68,
+0x36,0x21,0x3e,0x1d,0x96,0xc, 0x3c,0x66,0xc4,0x7f,0x3f,0x78,0xe0,0x0, 0x3, 0x44,
+0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x3c,0x6f,0xe0,0xa8,0x3f,0xa, 0x3f,0x68,0x37,0x21,
+0x3f,0x1d,0x97,0xe, 0x27,0xba,0x3d,0x6f,0xc5,0x7f,0xe2,0x1, 0xc5,0x7f,0x3d,0x19,
+0x35,0x21,0x3d,0x1d,0x95,0xa, 0xe8,0x0, 0x4c,0x71,0xc4,0x7f,0x3f,0xf8,0x3, 0x2f,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3f,0x99,0x37,0xa1,0x3f,0x9d,0x97,0x8f,0xe8,0x25,
+0x4b,0xe7,0xe2,0x0, 0xcb,0x81,0x1, 0x91,0xe0,0x2a,0x3a,0x1a,0x2d,0xa, 0xe0,0x2e,
+0x3a,0x1e,0x2f,0x7, 0xe0,0x2c,0x3a,0x1c,0x2e,0x4, 0xe0,0x2f,0x3a,0x1f,0x27,0x85,
+0x14,0x80,0x3c,0x62,0xde,0x28,0x3d,0xe7,0xc1,0x1, 0xe2,0x1, 0xc1,0x7f,0x3a,0xf2,
+0xc1,0x82,0xe7,0xff,0x1, 0x9e,0x25,0x8d,0xb, 0xa1,0xe7,0xfc,0x0, 0xdd,0x3e,0x6e,
+0xe7,0xff,0x0, 0xbb,0x17,0x0, 0x0, 0xc7,0x3d,0x6f,0x0, 0xce,0x17,0x80,0x0, 0xd8,
+0xb, 0xe1,0x8, 0xb1,0xd9,0x89,0xdc,0x1a,0xde,0x4e,0xd3,0x64,0xde,0x4c,0xde,0x4b,
+0xde,0x4a,0xdf,0x77,0x8, 0xa1,0xe7,0xfc,0x0, 0xeb,0x8, 0xb7,0xc0,0x6c,0x3d,0x78,
+0x76,0x4, 0x39,0xe8,0x39,0x69,0x3b,0xea,0x3a,0x6b,0x2, 0x98,0xe1,0x25,0x3c,0x1a,
+0xe0,0x41,0x3a,0xc5,0x3a,0x72,0x2, 0x94,0xe1,0x26,0x39,0x14,0xe0,0x41,0x3b,0x46,
+0xe0,0xff,0x16,0x7f,0xe7,0xb1,0x15,0xf0,0xe1,0x2f,0x39,0x87,0x2f,0x8b,0xe1,0x2f,
+0x39,0x4, 0x2f,0x88,0x3c,0x6c,0xc0,0x14,0xb, 0xe1,0x12,0x81,0x0, 0xec,0x13,0x1,
+0x0, 0xf0,0x3c,0x60,0x15,0xc, 0xe0,0x1, 0x14,0xff,0xc4,0xa, 0x75,0x81,0x76,0x82,
+0x76,0x3, 0xe0,0x2, 0xd9,0x9e,0x39,0xf7,0x69,0xb, 0x69,0x8e,0x55,0x81,0x56,0x82,
+0x56,0x3, 0x1, 0xb7,0x39,0x16,0xe2,0x1, 0xc1,0x7f,0x69,0xf, 0x69,0x13,0x3c,0x60,
+0xe8,0x72,0x51,0x70,0xe8,0x56,0x49,0xaf,0xc4,0xa, 0xe0,0x1, 0x17,0x7f,0x3c,0xeb,
+0x15,0x0, 0x88,0x88,0xe2,0x1, 0xc8,0xff,0x1, 0xe, 0x8f,0x98,0xe2,0x1, 0xcf,0xff,
+0x1, 0xa, 0xe0,0xaf,0x38,0x83,0x37,0xa1,0x3f,0x92,0x97,0x8f,0x3f,0xf9,0x5, 0x3,
+0x3f,0x6a,0x3c,0xef,0xc5,0x1, 0xe2,0x1, 0xc5,0x7f,0xe2,0x0, 0xcd,0x3, 0xc4,0x4,
+0x1, 0xe9,0x3f,0xe0,0x37,0x22,0xc7,0x8a,0x3e,0x79,0x3f,0x1f,0x89,0x8e,0x89,0x1e,
+0xe7,0xff,0x5, 0x34,0x57,0x84,0x3e,0x69,0xa9,0x8f,0xa9,0xd, 0xe7,0xff,0x0, 0xae,
+0x39,0x95,0xe2,0x1, 0xc1,0xff,0x39,0x74,0x69,0x8a,0x69,0x92,0x1, 0x49,0x0, 0xc3,
+0x8, 0xb7,0xc0,0x70,0xe8,0x56,0x43,0xb0,0xe8,0x56,0x45,0xb1,0xe8,0x52,0x4f,0x82,
+0x73,0x84,0xe0,0xf4,0x11,0x7a,0x75,0x85,0xe0,0x4d,0x14,0x62,0xe8,0x72,0x53,0xf0,
+0xe8,0x56,0x4d,0xaf,0x14,0x80,0x77,0x83,0x73,0x81,0x75,0x82,0x57,0x83,0x3f,0xf9,
+0x1, 0x83,0xc0,0x10,0xb, 0xe1,0x8f,0x98,0x8e,0x88,0x3d,0xef,0xe0,0x43,0x39,0x8d,
+0xe0,0x43,0x3a,0xf, 0x3f,0x6d,0xe6,0xa9,0xce,0xf, 0x3b,0xe3,0xc5,0xff,0xc7,0x7f,
+0xc3,0x81,0xe0,0x43,0x3d,0x8b,0x3e,0x2f,0x3a,0xe4,0xe0,0x43,0x3f,0xe, 0xe7,0x0,
+0x10,0x81,0xc2,0x81,0x73,0x86,0x75,0x87,0x76,0x8, 0x55,0x86,0x3f,0x7b,0x5, 0x8,
+0xc4,0x81,0xe1,0x80,0xb0,0x92,0xe2,0x1, 0xc4,0xff,0xc4,0x2, 0x0, 0xd8,0xe2,0x0,
+0xcf,0x0, 0x3, 0x1d,0x3e,0x6d,0xc6,0x1, 0xe0,0x43,0x3e,0xc, 0x55,0x84,0x3f,0x7b,
+0x4, 0x5, 0x3e,0x6d,0xc6,0x1, 0xe0,0x43,0x3e,0xc, 0x53,0x2, 0x55,0x8, 0x55,0x87,
+0x3b,0x3c,0xe2,0x1, 0xc5,0x7f,0xe0,0x2c,0x3e,0x3, 0x3d,0xf5,0x5, 0xa, 0xc7,0x1,
+0xc6,0xff,0xe0,0x43,0x3f,0xe, 0xe2,0x1, 0xc6,0xff,0x0, 0xd8,0x3e,0x6e,0x0, 0xe7,
+0xe2,0x0, 0xcd,0x80,0x3, 0x1e,0x3f,0xea,0xc7,0x81,0xe0,0x43,0x3f,0x8f,0x53,0x85,
+0x3d,0xf7,0x4, 0x5, 0x3f,0xea,0xc7,0x81,0xe0,0x43,0x3f,0x8f,0x26,0x4, 0xe0,0x27,
+0x3f,0x84,0x2b,0x88,0x3f,0x96,0x53,0x81,0x37,0xa1,0x3f,0x97,0x97,0x8f,0xe0,0x21,
+0x38,0xef,0xc5,0x81,0xc5,0x7f,0xe0,0x43,0x3d,0x8b,0xe2,0x1, 0xc5,0x7f,0x0, 0xd6,
+0x3f,0xeb,0x0, 0xe6,0xe0,0xf4,0x17,0xfa,0x34,0x21,0x34,0xa1,0x3c,0x1f,0x3f,0x99,
+0x94,0x8, 0x97,0x8f,0x3f,0x98,0xe0,0x8, 0x37,0xcf,0x3c,0x1f,0x34,0x1, 0xe0,0x8,
+0x3e,0x28,0xe0,0x41,0x3c,0x28,0x3e,0x2b,0xe0,0x41,0x3e,0x2c,0xe0,0xf, 0x34,0x22,
+0x3f,0xfc,0x3, 0x9, 0xe0,0x0, 0x17,0xe4,0xe0,0x2c,0x3e,0x1f,0xe0,0x28,0x3c,0x1f,
+0x3c,0x5c,0x38,0x82,0x14,0x0, 0x0, 0xfe,0xe8,0x52,0x4d,0x82,0xe2,0x0, 0xcd,0x82,
+0x5, 0xa0,0xe0,0x4d,0x17,0x64,0x17,0x80,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3e,0x6e,
+0x3e,0xef,0x3d,0xfd,0x2, 0x86,0x3d,0xff,0xc7,0x2, 0x1, 0xf7,0x14,0x1, 0x38,0x82,
+0xe0,0x40,0x8c,0xae,0x8d,0xc, 0x3c,0xfa,0x1, 0xc, 0xc6,0x2, 0xe0,0x40,0x8c,0x9e,
+0xe0,0x40,0x8d,0x1c,0x3c,0xfa,0x1, 0x5, 0xc6,0x81,0xe2,0x1, 0xc6,0xff,0x0, 0xea,
+0x14,0x0, 0x0, 0xee,0x8, 0xb7,0xc0,0x6a,0xe8,0xb, 0x49,0x6a,0xe8,0x52,0x4f,0x2,
+0x17,0x80,0x3d,0x62,0x14,0x80,0x74,0x8, 0xe0,0xf5,0x14,0x7a,0xe8,0xf5,0x6f,0xf7,
+0xe8,0xf5,0x6f,0xf8,0xe8,0xf5,0x6f,0xb7,0xe8,0xf5,0x6f,0xb6,0x77,0x4, 0xe0,0x2,
+0xd8,0x78,0xe0,0xa, 0x31,0x21,0x14,0x80,0xe0,0xf5,0x14,0x3a,0xe0,0x2, 0xd8,0x71,
+0x57,0x84,0xe2,0x0, 0xcf,0x81,0x5, 0xa7,0xdf,0x14,0xe0,0xf5,0x11,0xfa,0x11,0x0,
+0x3f,0x62,0xe2,0x1, 0xc7,0x7f,0xe0,0xf, 0x31,0x21,0x77,0x7, 0xe0,0x4d,0x17,0x62,
+0x3f,0x9e,0x8f,0xf, 0x8f,0x9f,0x77,0x5, 0x77,0x86,0x21,0x3, 0x8f,0x83,0x2f,0x84,
+0x57,0x87,0xc7,0x81,0xaf,0x83,0xc1,0x1, 0x71,0x2, 0x57,0x82,0x57,0x4, 0xe2,0x1,
+0xc7,0xff,0x3f,0xfe,0x77,0x83,0x4, 0x89,0x3f,0xe2,0xe2,0x1, 0xc7,0xff,0x3f,0x7f,
+0xc1,0x81,0x2, 0xdf,0xc0,0x16,0xb, 0xe1,0x57,0x2, 0xe0,0x4d,0x17,0xe2,0x37,0x21,
+0x3f,0x1f,0x8d,0xe, 0x57,0x85,0xe8,0x25,0x4e,0x96,0x3f,0xaa,0xe0,0x41,0x3f,0xaf,
+0xe2,0x1, 0xc7,0xff,0x3e,0xff,0xe0,0x1, 0x5, 0xb7,0x8d,0x9e,0x57,0x6, 0x3f,0x2b,
+0xe0,0x41,0x3f,0x2e,0xe2,0x1, 0xc7,0x7f,0x3e,0xfe,0xe0,0x1, 0x5, 0xad,0x16,0x81,
+0xe1,0x2c,0x3e,0xaf,0x26,0x1d,0xe1,0x2d,0x3e,0xae,0x26,0x9a,0x56,0x88,0xe6,0xaf,
+0xce,0xfd,0x26,0x96,0xe8,0xf5,0x4f,0xb7,0xc7,0x81,0xe8,0xf5,0x6f,0xb7,0xe8,0xf5,
+0x4f,0xf7,0xc7,0x81,0xe8,0xf5,0x6f,0xf7,0xe0,0xf5,0x17,0x7a,0x57,0x82,0x8e,0x83,
+0x3f,0x1f,0x8f,0x8e,0xe0,0x1, 0x2f,0x97,0xae,0x8e,0xe0,0x1, 0x0, 0x8d,0x56,0x88,
+0xe2,0x0, 0xc6,0x82,0xe0,0x1, 0x26,0x88,0xe8,0x56,0x4c,0xaf,0x54,0x5, 0x56,0x86,
+0xe8,0x72,0x56,0x70,0xe0,0xad,0x3c,0x9, 0x36,0xa1,0x3e,0x9c,0x92,0x8d,0x3e,0xeb,
+0xe0,0xad,0x3d,0x9, 0x54,0x86,0x36,0xa1,0x3e,0x1d,0x16,0x82,0xe1,0x2f,0x3e,0xaf,
+0x93,0xc, 0xe1,0x2e,0x3e,0xae,0x3e,0x60,0x3e,0xe0,0xe0,0xe, 0x3f,0xde,0xc6,0x16,
+0xc6,0x97,0x77,0x9, 0xde,0x1b,0xe0,0xc, 0x3a,0x96,0xe0,0x4, 0x34,0xf, 0x3b,0xe8,
+0x36,0x1, 0x2a,0x5, 0xe2,0xff,0xcc,0x7f,0x1, 0x82,0x3b,0xe4,0x54,0x83,0x54,0x7,
+0xe0,0x2e,0x3a,0xe6,0x3d,0x64,0x3d,0xe7,0x77,0x1, 0xde,0xfd,0x74,0xa, 0xdf,0x1d,
+0xe0,0x2c,0x3a,0xd6,0xe0,0xd, 0x36,0xf, 0x76,0x83,0x3a,0xec,0x57,0x1, 0x24,0x5,
+0xe0,0xf, 0x37,0xf, 0x3a,0xee,0x77,0x83,0xe0,0x0, 0x14,0x5a,0xe8,0xf4,0x4e,0xd8,
+0xe0,0x0, 0x13,0x52,0xe2,0x0, 0xce,0x81,0x16,0xbc,0xe0,0x66,0x39,0x2d,0xe0,0x8c,
+0x3e,0x48,0x15,0x0, 0xe0,0x0, 0x15,0xe4,0x3c,0x6c,0x3c,0xed,0x77,0x1, 0xe0,0x2,
+0xd7,0x9, 0x3a,0x78,0x57,0x1, 0x2, 0x34,0x1, 0x83,0x3b,0xf9,0x2, 0xb1,0xe0,0x0,
+0x16,0x5a,0xe0,0x8e,0x3f,0x4c,0x15,0x0, 0xe0,0x0, 0x15,0xe4,0x3c,0x6e,0x3c,0xef,
+0xe0,0x2, 0xd6,0xf8,0x3a,0x78,0x2, 0x24,0x1, 0x83,0x3b,0xf9,0x2, 0xa1,0xe0,0x8c,
+0x3b,0x55,0x57,0x3, 0x3c,0x6c,0xe0,0xa8,0x3f,0x6, 0x15,0x0, 0xe0,0x0, 0x15,0xe4,
+0x3c,0xed,0xe0,0x2, 0xd6,0xe7,0x3a,0x78,0x17,0x1, 0x2, 0x5, 0x1, 0x83,0x3b,0xf9,
+0x2, 0x82,0x17,0x0, 0xe6,0xaf,0xcf,0xfe,0x56,0xa, 0x26,0x3, 0x57,0x9, 0x27,0x3,
+0xe7,0xfe,0x2f,0xec,0x57,0x2, 0xc7,0x1, 0x77,0x2, 0xe7,0xfe,0x0, 0xa8,0x17,0x81,
+0x0, 0xf4,0xe1,0x2d,0x3f,0xdd,0xe0,0xf5,0x15,0xf9,0x17,0x80,0xe0,0x80,0x8e,0x1b,
+0x8d,0xe, 0x3d,0x7c,0x1, 0x4, 0x8d,0x3, 0x3d,0x7c,0x1, 0x82,0xae,0x8b,0xc7,0x81,
+0x54,0x4, 0xe2,0x1, 0xc7,0xff,0x3c,0x7f,0x1, 0xf2,0x0, 0xe5,0xe8,0x52,0x4e,0x98,
+0xe0,0x4d,0x17,0x62,0x17,0x80,0x3e,0xff,0x1, 0x83,0x14,0x0, 0x38,0x82,0xc7,0xe,
+0xe0,0xe, 0x8e,0x4e,0xe2,0x0, 0xce,0x10,0x2, 0x85,0xc7,0x81,0xe2,0x1, 0xc7,0xff,
+0x0, 0xf3,0x14,0x1, 0x0, 0xf4,0x8, 0xb5,0x16,0x80,0xe0,0x1, 0x17,0xff,0xe8,0x52,
+0x4a,0x82,0xe8,0x72,0x51,0xf0,0xe8,0x56,0x4a,0x2f,0xe0,0x4d,0x11,0x62,0xe0,0xff,
+0x14,0x7f,0x3e,0x6d,0x3f,0x6f,0x38,0xed,0x3a,0xf1,0xe0,0x0, 0x1, 0xce,0x3f,0xfd,
+0x34,0x21,0x15,0x83,0xe0,0x28,0x3c,0x3b,0xe0,0x0, 0x1, 0xfc,0xe0,0x0, 0x27,0xf7,
+0x3d,0xef,0xc5,0xff,0xe2,0x1, 0xc5,0xff,0xe8,0x56,0x4d,0x31,0xc5,0x7f,0x3e,0xfa,
+0x3, 0x5, 0x3f,0xed,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3f,0x7c,0xe0,0x0, 0x1, 0xf1,
+0xe0,0x0, 0x27,0x6c,0x3c,0xee,0xc4,0xff,0xe2,0x1, 0xc4,0xff,0xe8,0x56,0x4e,0xb0,
+0xc6,0xff,0x3e,0x7d,0x3, 0x5, 0x3f,0x6c,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x16,0x80,
+0x3d,0x6d,0x3d,0xff,0xe0,0x0, 0x5, 0xfa,0xe8,0x56,0x4f,0x99,0xe2,0x0, 0xcf,0x82,
+0xe0,0x0, 0x5, 0xf8,0xe8,0x7a,0x57,0xdc,0xe2,0x7, 0xcf,0xe7,0x2, 0x84,0xc7,0x81,
+0xe8,0x7a,0x77,0xdc,0x20,0xbd,0xe4,0x0, 0xc5,0x3, 0x36,0xa1,0x3d,0x7d,0x17,0x0,
+0xe0,0x0, 0x5, 0x7d,0xe8,0x7a,0x57,0xbc,0xe8,0x7a,0x77,0x5c,0xe2,0x3, 0xcf,0xf3,
+0x2, 0xaf,0xc7,0x81,0x0, 0xab,0x8d,0x92,0x8d,0x2, 0x3c,0xeb,0xe0,0xa9,0x3d,0x4,
+0xe1,0x2e,0x3f,0x5a,0xe1,0x2c,0x3e,0x6a,0x34,0xa1,0xe2,0x1, 0xc7,0x7f,0xe2,0x1,
+0xc6,0x7f,0xe1,0x2f,0x3f,0xdb,0xe1,0x2d,0x3e,0xeb,0x3c,0x93,0xe0,0xb, 0x3e,0x2e,
+0x94,0x89,0xe2,0x0, 0xcd,0x87,0xe2,0x1, 0xc7,0xff,0xe2,0x1, 0xc6,0xff,0xe0,0x28,
+0x3c,0x59,0x2, 0x7, 0xe0,0xb, 0x3e,0xaf,0xe2,0x0, 0xcd,0x87,0xc1,0x2, 0x5, 0x9,
+0xe0,0x3, 0x17,0xf4,0xe8,0x7a,0x77,0xdc,0x17,0x80,0xe8,0x7a,0x77,0xbc,0xa, 0xe1,
+0xc0,0x81,0xe2,0x1, 0xc0,0xff,0xe7,0xff,0x0, 0x81,0x3d,0xef,0xe7,0xff,0x0, 0x8e,
+0x3d,0xef,0x3f,0xed,0xe7,0xff,0x0, 0x93,0x3c,0xee,0xe7,0xff,0x0, 0x99,0x3c,0xee,
+0x3f,0x6c,0xe7,0xff,0x0, 0x9e,0x39,0x6b,0xe0,0xa2,0x3e,0x4, 0x31,0x21,0x39,0x13,
+0x96,0x82,0x3e,0xf8,0x5, 0x4, 0xc5,0x1, 0xe2,0x1, 0xc5,0x7f,0xc6,0x1, 0xe2,0x1,
+0xc6,0x7f,0x3e,0x7e,0xe0,0xd, 0x3e,0x15,0xe2,0x1, 0xc6,0xff,0x5, 0xed,0xc5,0x81,
+0xe2,0x1, 0xc5,0xff,0xe7,0xff,0x0, 0x87,0x3e,0x69,0xe0,0x5, 0x3e,0xa9,0x0, 0xf2,
+0xe7,0xff,0x1, 0x12,0xe8,0x7a,0x57,0xdc,0xe2,0x0, 0xcf,0x82,0x5, 0x84,0xc7,0xfe,
+0xe8,0x7a,0x77,0xdc,0xe8,0x7a,0x57,0xbc,0xe2,0x3, 0xcf,0xf3,0xe7,0xff,0x2, 0x84,
+0xc7,0x81,0xe8,0x7a,0x77,0xbc,0xe7,0xfe,0x0, 0xff,0xe8,0x7a,0x57,0xdc,0xe2,0x7,
+0xcf,0xe7,0x2, 0x84,0xc7,0x82,0xe8,0x7a,0x77,0xdc,0xe8,0x7a,0x77,0x3c,0xe7,0xff,
+0x0, 0xb0,0x8, 0xb7,0xc0,0x78,0x17,0x80,0xe8,0xf5,0x6f,0xf6,0x17,0x86,0xe8,0x25,
+0x6f,0x96,0xe8,0x56,0x4a,0x23,0xdf,0x18,0xe8,0x52,0x4f,0x82,0xe2,0x0, 0xcf,0x81,
+0xe0,0x1, 0x5, 0xda,0x14,0x3, 0xdd,0xcf,0x22,0x17,0xe2,0x0, 0xca,0x1, 0x5, 0x87,
+0xe8,0x25,0x4f,0x13,0xe8,0x25,0x4f,0x96,0x3f,0x7f,0x2, 0x8e,0xe8,0x52,0x4f,0x82,
+0x3f,0xf4,0xe0,0x0, 0x1, 0xc7,0xde,0xeb,0xe2,0x0, 0xcc,0x0, 0x17,0x81,0x14,0x3,
+0xe0,0x68,0x39,0x2f,0xdd,0xb8,0x17,0x0, 0xe8,0x52,0x4e,0x2, 0xe0,0xf5,0x16,0xfa,
+0x38,0xee,0x3e,0x7e,0xe0,0x0, 0x1, 0xcc,0xe8,0x72,0x52,0x70,0xe8,0x56,0x4d,0xaf,
+0xe8,0x25,0x4e,0x94,0xe8,0x25,0x4a,0x95,0xe0,0x1, 0x13,0x7f,0x15,0x0, 0x14,0x1,
+0x76,0x82,0x72,0x3, 0x75,0x84,0x38,0xf8,0xe0,0x1, 0x3, 0x9d,0xe2,0x0, 0xcd,0x1,
+0xe0,0x1, 0x1, 0x9d,0xe8,0xf5,0x4f,0xba,0xe8,0x25,0x6f,0x95,0xe8,0xf5,0x4f,0xbb,
+0xe8,0xf5,0x6d,0x76,0xe0,0xf5,0x14,0xba,0xe8,0x52,0x6d,0x2, 0xe0,0x4d,0x14,0x62,
+0x35,0x21,0xe8,0x25,0x6f,0x94,0xe0,0x2, 0xd5,0xc8,0xe8,0x52,0x4f,0x82,0x14,0x0,
+0xe8,0x26,0x6f,0xaa,0xef,0xfd,0xd7,0x9a,0xe8,0x25,0x6c,0x13,0xc0,0x8, 0xb, 0xe1,
+0xe8,0xf5,0x4f,0x77,0xe0,0xe, 0x3f,0xae,0xc7,0x1, 0x3a,0x7e,0x1, 0xd, 0xe8,0xf5,
+0x4e,0xb7,0xe8,0x26,0x4f,0x2a,0x3f,0xad,0xc7,0x81,0x3f,0x7f,0xe7,0xff,0x1, 0xb5,
+0x14,0x3, 0xe7,0xff,0x0, 0xb1,0x14,0x1, 0xe7,0xff,0x0, 0xae,0xe1,0x80,0x8f,0x9d,
+0xc7,0x1, 0xe1,0x21,0x38,0xef,0xe2,0x1, 0xc0,0xff,0xe2,0x1, 0xc7,0x7f,0xe7,0xff,
+0x0, 0xaa,0xe0,0xf5,0x17,0xfa,0x3f,0x9c,0x8f,0x8f,0x3f,0xf8,0x1, 0xab,0xe0,0x4d,
+0x12,0x62,0xe0,0xf, 0x36,0x21,0x3f,0x94,0xc6,0x81,0x8d,0x8f,0x8c,0x9f,0xe2,0x1,
+0xc6,0xff,0xe2,0x0, 0xce,0x81,0x3f,0xe9,0x3a,0x6b,0xe0,0x6f,0x39,0xa3,0xe0,0x64,
+0x39,0xa2,0xe2,0x0, 0xc8,0x81,0x39,0xef,0x39,0x64,0x1, 0xae,0xe2,0x1, 0xca,0xff,
+0x1, 0x2b,0xe0,0xf, 0x3d,0xa5,0xe0,0x41,0x3f,0xaf,0x77,0x81,0x57,0x82,0xe0,0x4,
+0x3c,0xaf,0x57,0x81,0xe0,0x41,0x3a,0x24,0x3f,0x94,0xe2,0x1, 0xc7,0xff,0x3f,0xf6,
+0x4, 0xa7,0x3c,0xe3,0x3d,0xe2,0xc6,0x1, 0x39,0xe9,0x39,0x6b,0x3f,0xec,0xe2,0x1,
+0xc7,0xff,0x3f,0x7f,0x2, 0xc7,0x26,0x8b,0xe0,0xf, 0x35,0x21,0xe0,0xf5,0x15,0xba,
+0x3f,0x9b,0xc5,0x1, 0xe2,0x1, 0xc5,0x7f,0xa9,0xf, 0xa9,0x9f,0xc4,0x1, 0xe2,0x1,
+0xc4,0x7f,0xe7,0xfe,0x0, 0xf2,0x52,0x4, 0x3f,0xe9,0xe0,0xaf,0x3d,0x84,0x52,0x3,
+0x37,0xa1,0x3f,0x94,0x97,0x8f,0x3f,0xf7,0x5, 0x5d,0x3b,0xef,0x0, 0xdd,0x3b,0x6f,
+0x0, 0xdb,0x16,0x0, 0x3e,0xec,0x3b,0xec,0x0, 0xda,0x17,0xff,0xe8,0x25,0x6f,0x95,
+0xe7,0xfe,0x0, 0xe8,0xe0,0x0, 0x17,0x64,0xe8,0x26,0x6f,0xaa,0x17,0xff,0xe8,0x25,
+0x6f,0x13,0xe8,0x25,0x6f,0x95,0xe8,0x25,0x6f,0x94,0xe7,0xfe,0x0, 0xf1,0x8, 0xb6,
+0x39,0x69,0xe4,0x0, 0xc1,0xe, 0xe0,0x52,0x16,0xb8,0xe8,0xb, 0x49,0xe9,0xe0,0x54,
+0x16,0x50,0x39,0x1d,0x12,0x0, 0x3f,0xe4,0xe2,0x1, 0xc7,0xff,0x39,0xff,0x2, 0xb7,
+0xb, 0x61,0xc7,0x81,0xc2,0x8e,0x3f,0x6f,0xe2,0x1, 0xc7,0x7f,0x3d,0x7e,0x5, 0xac,
+0x8b,0x45,0x8f,0x4c,0x38,0xec,0x3f,0x76,0x1, 0xf5,0xe2,0x1, 0xcf,0x7f,0x1, 0x72,
+0xe4,0x0, 0xc7,0x6, 0xe4,0x0, 0xc7,0x8e,0x3f,0x1d,0xe0,0x3, 0xc7,0x24,0x8f,0xe,
+0x2f,0x3, 0xe0,0x1, 0x3e,0x9f,0x3f,0x68,0xe4,0x0, 0xc7,0xe, 0x8a,0xc1,0x3f,0x1b,
+0xaa,0xce,0x3f,0x9d,0x92,0x81,0x90,0x91,0xb2,0x8e,0xc4,0x1, 0xb0,0x9e,0xe2,0x1,
+0xc4,0x7f,0x88,0xdf,0xa8,0xde,0x88,0xef,0xa8,0xee,0x88,0xff,0xa8,0xfe,0xe0,0x1,
+0x8f,0x8f,0xe0,0x1, 0xaf,0x8e,0xc2,0x1, 0xc6,0xe, 0x0, 0xc6,0x3a,0xe2,0x3f,0xe9,
+0x0, 0xcb,0xe8,0x31,0x4f,0xc8,0xe2,0x1, 0xcf,0xf9,0x2, 0x84,0xc7,0x81,0xe8,0x31,
+0x6f,0xc8,0x38,0x82,0xe0,0x3, 0x15,0x28,0x14,0x80,0xe0,0xf9,0x14,0x54,0xe0,0x4a,
+0x0, 0xa0,0x8, 0xb5,0xe8,0xf9,0x4f,0xd4,0xe0,0xf9,0x15,0x54,0xe0,0xe, 0x3d,0x1f,
+0x39,0x6f,0x16,0x80,0x3c,0xee,0xe0,0x52,0x16,0x38,0xe8,0x56,0x4c,0x18,0xe4,0x0,
+0xc1,0xa, 0xae,0xbe,0x15,0x80,0xe0,0x1, 0xae,0xde,0x38,0xec,0xc4,0x83,0xc7,0xd,
+0x3c,0x7b,0x1, 0xa4,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0x8a,0x17,0x0,
+0x1, 0x3e,0xe8,0xf9,0x6f,0xd4,0x17,0x80,0xe8,0xf9,0x6f,0x56,0xe0,0xf9,0x16,0xd7,
+0xe0,0xf9,0x16,0x61,0x3f,0x6f,0xe1,0x80,0x8d,0x9d,0xe1,0x2e,0x3f,0x6b,0xe0,0x1,
+0x8d,0x9d,0x3e,0x7d,0x3f,0x9b,0xe2,0x1, 0xc7,0x7f,0xe2,0x1, 0xc7,0xff,0x1, 0xf4,
+0xe8,0xf9,0x6f,0xd6,0xe8,0xf9,0x6f,0x55,0xa, 0xe1,0x8a,0x9, 0x92,0x8c,0xe0,0xd,
+0x39,0x14,0x39,0xed,0xc1,0x86,0x31,0xa2,0x39,0x9a,0xb2,0x83,0x36,0xa2,0x91,0x9c,
+0x3e,0x9a,0xe0,0x1, 0xb1,0xdd,0xc2,0x1, 0x8e,0xcc,0xaa,0x9, 0xe4,0x0, 0xc6,0x86,
+0x3e,0x91,0xe0,0x3, 0xc6,0xa4,0x8e,0x8d,0x2e,0x84,0x8e,0x8e,0xc6,0x81,0xae,0x8e,
+0xc5,0x81,0xe2,0x1, 0xc5,0xff,0xc6,0xe, 0xe7,0xff,0x0, 0xbc,0xe8,0xf9,0x6f,0x54,
+0x0, 0xc3,0x8, 0xb3,0xe0,0xf9,0x15,0x57,0xe0,0xf9,0x16,0xd4,0xe0,0xfc,0x11,0x64,
+0xe0,0x0, 0x10,0xe3,0xe1,0x80,0x8d,0x9a,0x3e,0x6d,0x17,0x0, 0x0, 0x98,0x39,0xec,
+0xe0,0x1, 0x97,0xc3,0xc6,0x4, 0xe0,0xf, 0x3c,0x2f,0xe0,0x41,0x3f,0xaf,0xe1,0x2f,
+0x38,0xaf,0x27,0x8a,0xe0,0x1, 0x97,0xd3,0xe0,0xf, 0x3c,0xaf,0xe0,0x41,0x3f,0xaf,
+0xe1,0x2f,0x38,0xaf,0x2f,0x8b,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x3d,0xfe,0x1, 0xe8,
+0xc6,0xa8,0x39,0x7d,0x1, 0xe0,0x14,0x0, 0x0, 0x82,0x14,0x1, 0x9, 0xe1,0x8, 0xb7,
+0xe1,0xfb,0xc0,0x70,0xe8,0x56,0x4f,0x18,0x77,0x7, 0xe0,0x1, 0x27,0x52,0xe8,0x18,
+0x57,0xba,0xc7,0x81,0xe2,0x0, 0xcf,0xe4,0xe0,0x1, 0x2, 0xc7,0xe8,0x18,0x77,0xba,
+0xe8,0xf4,0x4f,0xad,0xe2,0x0, 0xcf,0x81,0xe0,0x1, 0x1, 0xc6,0x17,0x83,0xe8,0x30,
+0x6f,0xf2,0xe8,0x7b,0x57,0x8d,0xe8,0x24,0x56,0xc8,0x3f,0x6f,0xe8,0x24,0x57,0xc8,
+0xe2,0x1, 0xc7,0x7f,0x3f,0xae,0xe2,0x1, 0xc7,0xff,0x77,0x84,0xe8,0x24,0x57,0xc8,
+0xe8,0x56,0x49,0x9f,0xe8,0x7b,0x77,0x8d,0xe0,0x8, 0x29,0xf1,0x3c,0x60,0x15,0xa,
+0x3c,0xe3,0xc4,0x2a,0xe8,0x30,0x69,0xf6,0xe0,0x2, 0xd4,0x5b,0x57,0x84,0x57,0x4,
+0xe4,0x0, 0xc7,0x86,0xe4,0x0, 0xc7,0x1e,0xc7,0x94,0x77,0x93,0x77,0x14,0x57,0x84,
+0x57,0x4, 0xe4,0x0, 0xc7,0x8e,0xe4,0x1, 0xc7,0x16,0xe8,0xf6,0x69,0x98,0x71,0x8b,
+0x71,0x8c,0x77,0x8d,0x77,0xe, 0xe0,0x52,0x17,0xb8,0x52,0x8c,0xe4,0x0, 0xc2,0x8e,
+0x3a,0x9f,0x89,0x45,0xe2,0x0, 0xc9,0x9, 0xe0,0x6, 0x2, 0xf9,0x3f,0x62,0xe4,0x0,
+0xc7,0x6, 0x3f,0x9e,0xe0,0x3, 0xc7,0xa4,0x8f,0x8f,0xe2,0x0, 0xcf,0x82,0xe0,0x9,
+0x1, 0x89,0xe0,0x7, 0x31,0x21,0xe0,0x30,0x17,0xde,0x3f,0x97,0x97,0xf, 0x3a,0x62,
+0xc7,0x1, 0xe4,0x0, 0xc2,0x78,0xe0,0x5, 0xc, 0x9, 0xb7,0xf, 0xe0,0x27,0x17,0xae,
+0x3a,0x1f,0xe0,0x27,0x17,0x6, 0xe0,0xf, 0x31,0x22,0x3f,0x1f,0xe0,0xe, 0xd, 0xb,
+0x77,0x81,0xef,0xfd,0xd6,0xf6,0x57,0x81,0xe0,0x26,0x17,0x5e,0x3f,0x9e,0x3b,0x68,
+0xe0,0xf, 0xd, 0xb, 0xe0,0x5, 0xc, 0x9, 0xef,0xfd,0xd6,0xeb,0xe0,0x26,0x17,0xca,
+0x3f,0x97,0x97,0xf, 0x74,0xf, 0x3f,0x16,0xe2,0x1f,0xcf,0x20,0xe0,0x0, 0x2, 0xd3,
+0xb7,0xf, 0xe0,0xd, 0x31,0x21,0x8f,0xe5,0x97,0x5, 0x77,0x85,0x97,0x95,0x77,0x8,
+0xe0,0x30,0x17,0x5e,0x77,0x89,0xe0,0x26,0x17,0xca,0x3f,0x9d,0x97,0x8f,0x3f,0x1d,
+0x77,0x90,0xe0,0x27,0x17,0x86,0x93,0x8e,0xe0,0xe, 0x31,0x22,0x3f,0x9e,0xe0,0xf,
+0xf, 0xf, 0x54,0x88,0x3c,0xae,0x57,0x9, 0x74,0x91,0x3f,0x2f,0xe0,0x26,0x17,0xc0,
+0x3f,0x92,0x8f,0x8f,0x77,0x12,0x27,0xb2,0x3f,0x6f,0xe4,0x0, 0xc7,0x18,0x3c,0x60,
+0x3f,0x14,0x3c,0xee,0x15,0x18,0xc4,0xe8,0xc4,0x3e,0x77,0x81,0x77,0x2, 0xe0,0x2,
+0xd3,0x84,0x57,0x81,0x57,0x2, 0xe2,0x0, 0xcf,0x81,0x56,0xa4,0x2, 0xa9,0x3c,0x60,
+0x15,0x18,0x14,0x80,0xe0,0x0, 0xc4,0x56,0x77,0x81,0x76,0x83,0xe0,0x2, 0xd3,0xc1,
+0x57,0x81,0x56,0x83,0x0, 0xa9,0xe0,0x0, 0x17,0xe4,0xe7,0xfe,0x0, 0xb9,0x57,0x87,
+0xe7,0xfe,0x0, 0xb6,0xe8,0x30,0x4f,0xf2,0xe7,0xfe,0x27,0xbd,0xc7,0xff,0xe7,0xfe,
+0x0, 0xb8,0xe0,0x1f,0x17,0x20,0xe7,0xff,0x0, 0xad,0x3c,0x60,0x3c,0xef,0x15,0x18,
+0xc4,0x3e,0x77,0x81,0xe0,0x2, 0xd3,0xa5,0x57,0x81,0x3e,0xef,0x0, 0xd9,0x3c,0xee,
+0x3c,0x60,0x15,0x18,0xc4,0xd0,0xe0,0x0, 0xc4,0x56,0x77,0x81,0x76,0x83,0xe0,0x2,
+0xd3,0x4c,0x57,0x81,0x56,0x83,0x3e,0x64,0x14,0x80,0xc6,0xa, 0x3f,0x63,0x74,0x86,
+0x3f,0xfe,0xc6,0x18,0x1, 0xa8,0x27,0x85,0x57,0x6, 0xe1,0x2e,0x3f,0x3f,0x77,0x6,
+0xe0,0x26,0x17,0xb6,0x3f,0x92,0x8f,0xf, 0xe0,0x2, 0x2f,0x37,0x57,0x93,0x3f,0xfd,
+0x3, 0x86,0x3f,0xf6,0x3, 0x84,0x17,0x81,0xe8,0x30,0x6f,0xf6,0x4f,0xbe,0x57,0x24,
+0xe4,0x0, 0xc7,0x86,0x3f,0x7f,0x5, 0x98,0xe0,0x0, 0x4f,0xd6,0x57,0x30,0xe4,0x0,
+0xc7,0x86,0x3f,0x7f,0xe0,0x1, 0x5, 0xfc,0x57,0x29,0x17,0x94,0xe1,0x2f,0x3f,0x1f,
+0x77,0x8a,0x0, 0x8c,0x55,0x6, 0xe0,0x41,0x95,0xcc,0xc7,0x1, 0x3d,0x1b,0xe2,0x1,
+0xc7,0x7f,0x75,0x6, 0x0, 0xce,0x17,0x0, 0x77,0xa, 0x57,0x94,0x3f,0x9d,0x3f,0xf6,
+0xe0,0x1, 0x4, 0xe9,0x3f,0xed,0xe4,0x0, 0xc7,0x83,0x3f,0xf6,0xe0,0x1, 0x3, 0xf3,
+0xe2,0x0, 0xcb,0x6e,0xe0,0x1, 0x5, 0xef,0x57,0xa, 0xe0,0x1, 0x2f,0x70,0xe0,0x1,
+0x17,0x48,0x57,0x86,0xe2,0x0, 0xcf,0x8a,0xe0,0x1, 0x5, 0xeb,0x57,0xa9,0xe2,0x0,
+0xcf,0x8a,0xe0,0x1, 0x5, 0xe6,0x57,0xb5,0xe2,0x0, 0xcf,0x8a,0xe0,0x1, 0x5, 0xe1,
+0x55,0x22,0x56,0x23,0x57,0xa6,0x55,0xa7,0x3f,0x9a,0x3d,0x9c,0x15,0x0, 0x54,0x8,
+0x54,0x89,0xe0,0x2b,0x3d,0xea,0xe0,0x2a,0x3f,0xea,0x77,0x2, 0x76,0x83,0xef,0xfd,
+0xd6,0x8, 0x57,0xaa,0x57,0x2, 0xe2,0x1f,0xcf,0x9f,0x56,0x83,0x56,0x29,0xe0,0x1,
+0x5, 0xb6,0xe4,0x0, 0xc6,0xa, 0x3c,0x7c,0xe1,0x2f,0x3c,0x2c,0x16,0x28,0xe0,0x6c,
+0x3b,0xae,0x3f,0x6c,0xe8,0xf6,0x4e,0x18,0xe2,0x0, 0xce,0x1, 0xe0,0x1, 0x1, 0xbc,
+0xe0,0x26,0x17,0xac,0x17,0x0, 0x3f,0x92,0xaf,0xf, 0x57,0xd, 0xe2,0x1, 0xcf,0x48,
+0xe0,0x1, 0x2, 0xc5,0xe0,0x0, 0x17,0x6e,0x17,0x80,0x55,0x8d,0xe0,0x26,0x16,0x2c,
+0x3e,0x12,0x8d,0xc, 0xe0,0x1, 0x2d,0x55,0xe1,0x2b,0x3b,0x1b,0x25,0x87,0x27,0x86,
+0xe0,0x26,0x16,0xac,0x3e,0x92,0x16,0x1, 0xae,0xd, 0x3e,0xe7,0xc6,0xfc,0xe2,0x0,
+0xce,0x8f,0xe0,0x1, 0x2, 0xba,0xe2,0x1, 0xcb,0x7a,0xe0,0x1, 0x2, 0xaf,0x16,0x80,
+0x55,0xe, 0xe2,0xa, 0xcd,0x0, 0xe0,0x3, 0x5, 0x30,0xe8,0x30,0x4e,0x72,0xe2,0x0,
+0xce,0x0, 0xe0,0xa, 0x16,0x0, 0xe0,0x6c,0x39,0xaa,0x3e,0x76,0x3, 0x84,0xe2,0x0,
+0xcb,0x82,0x2, 0x83,0xe0,0x0, 0x26,0xc9,0xe0,0x26,0x16,0xac,0x3e,0x92,0x16,0x0,
+0xae,0xd, 0x16,0x81,0xe0,0xff,0x16,0x7f,0x3d,0xec,0x3c,0xed,0x3d,0x62,0x14,0x2,
+0x77,0x2, 0x77,0x81,0xe0,0x0, 0xda,0x6d,0x15,0xe, 0x3c,0x6a,0x3c,0x32,0x3d,0xe0,
+0xe0,0x3, 0xc5,0x86,0x3c,0xe5,0x3c,0x1b,0xe0,0x2, 0xd2,0x6f,0x3e,0xe0,0xc6,0xaa,
+0x16,0x2, 0x3e,0x92,0xae,0xd, 0xe0,0x52,0x15,0x38,0xe8,0xb, 0x4c,0xe9,0x57,0x81,
+0x57,0x2, 0x16,0x0, 0x3e,0xec,0xe2,0x1, 0xc6,0xff,0x3c,0xfd,0x5, 0x93,0x3e,0xec,
+0xc6,0x1, 0x3d,0xec,0xe4,0x0, 0xc5,0x8e,0xe0,0x2, 0xc5,0x8e,0x3d,0x9a,0x8d,0x8b,
+0x3d,0xf2,0x1, 0xf1,0xe4,0x0, 0xc6,0x8e,0x16,0x7f,0x3e,0x9a,0xe0,0x2, 0xc6,0x9c,
+0xae,0xd, 0x56,0x7, 0xe0,0x2, 0x26,0x64,0x3e,0xec,0xc6,0xff,0xe2,0x1, 0xc6,0xff,
+0x76,0x87,0x16,0x81,0x76,0x8b,0xe0,0x26,0x16,0xac,0x3e,0x92,0x8e,0x8d,0xe0,0x5,
+0xd, 0xb, 0xe0,0x5, 0x26,0xb2,0xe2,0x0, 0xce,0x81,0xe0,0x5, 0x1, 0x93,0xe2,0x0,
+0xcb,0x82,0xe0,0x2, 0x1, 0xd1,0xe0,0xc, 0x31,0x22,0xe0,0x27,0x16,0x86,0x3e,0x9c,
+0xe0,0xd, 0xc, 0x9, 0x16,0x80,0x3e,0x6d,0xe0,0x2, 0x0, 0xca,0x17,0x80,0xe7,0xfe,
+0x0, 0x89,0xe0,0x0, 0x17,0x64,0xe7,0xfe,0x0, 0xa6,0x57,0x85,0xe2,0x0, 0xcf,0x8a,
+0x5, 0x85,0xe4,0x0, 0xc6,0x6, 0xe7,0xfe,0x0, 0xc8,0xe4,0x0, 0xc6,0x3, 0xe7,0xfe,
+0x0, 0xc4,0x17,0x14,0x17,0x80,0xe7,0xfe,0x0, 0xc7,0x17,0xa, 0x0, 0xfc,0x17,0x81,
+0xe7,0xfe,0x0, 0xc2,0x54,0x8d,0xe2,0x1, 0xcc,0xc8,0xe7,0xfe,0x5, 0xd0,0xe0,0x1,
+0x15,0xc8,0xe7,0xfe,0x0, 0xcd,0xc7,0x7f,0xaf,0xf, 0xe0,0x1, 0x15,0xb4,0x71,0x8a,
+0xe0,0x0, 0x17,0x78,0x17,0x81,0xe7,0xfe,0x0, 0xc3,0x17,0x80,0xe0,0x0, 0x17,0x6e,
+0xe0,0x1, 0x15,0xc8,0xe7,0xfe,0x0, 0xc2,0x56,0xa4,0xe4,0x0, 0xc6,0x94,0xe1,0x2d,
+0x3b,0x1d,0xe7,0xfe,0x0, 0xcf,0xe2,0x0, 0xcb,0x83,0xe7,0xfe,0x1, 0xca,0xe2,0x1,
+0xcb,0x7a,0xe7,0xfe,0x5, 0xc6,0x56,0xa4,0xe4,0x0, 0xc6,0x9e,0x0, 0xf1,0xe2,0x0,
+0xcd,0x1, 0xe0,0x1, 0x1, 0xe3,0x55,0x35,0xe2,0x0, 0xcd,0x2, 0x2, 0x90,0x56,0x24,
+0xe2,0x0, 0xce,0x4f,0x2, 0x8c,0xe2,0x0, 0xcb,0x93,0x2, 0x94,0x56,0x31,0xe2,0x0,
+0xce,0x1d,0x2, 0x85,0x56,0x25,0xe2,0x0, 0xce,0x4f,0x5, 0xab,0xe2,0x0, 0xcb,0x89,
+0x56,0x29,0x2, 0x88,0xe2,0x0, 0xce,0x8, 0x5, 0x85,0x56,0x5, 0xe2,0x0, 0xce,0xe,
+0x5, 0x8f,0x56,0x29,0xe2,0x0, 0xce,0xf, 0xe0,0x0, 0x5, 0xd5,0xe2,0x0, 0xcd,0xf,
+0xe0,0x0, 0x5, 0xd1,0x54,0x85,0xe2,0x0, 0xcc,0x89,0xe0,0x0, 0x2, 0xcc,0x4e,0x3e,
+0x55,0x4, 0xe1,0x2d,0x3e,0xbc,0x36,0xc2,0x3e,0xba,0xe2,0x0, 0xce,0xf8,0xe0,0x0,
+0x2, 0xec,0xe2,0x0, 0xce,0xa, 0x5, 0x85,0xe0,0x0, 0x16,0x50,0xe1,0x2d,0x3e,0xec,
+0x3e,0xf6,0xe0,0x1, 0x2, 0x96,0xe1,0x2b,0x3b,0x1b,0xe0,0x5, 0x25,0xde,0xe0,0x5,
+0x27,0xdc,0xe0,0x26,0x16,0xac,0x3e,0x92,0x16,0x3, 0xe2,0x0, 0xcb,0x9d,0xae,0xd,
+0x16,0x80,0xe0,0x1, 0x2, 0x8c,0xe8,0xf9,0x4e,0x55,0x56,0xb1,0xe2,0x0, 0xce,0x2,
+0xe0,0x0, 0x5, 0xcf,0xe0,0x0, 0x4e,0x41,0xe0,0x0, 0x2e,0x4b,0xe2,0x0, 0xce,0xb1,
+0x2, 0x97,0x54,0x8, 0x54,0x89,0x77,0x81,0x77,0x2, 0x76,0x3, 0xdd,0x3, 0x3e,0xe8,
+0x57,0x81,0x57,0x2, 0xe0,0x0, 0x24,0x4a,0xe8,0xf9,0x4e,0xd6,0xe2,0x0, 0xce,0x82,
+0xe0,0x0, 0x2, 0xe5,0xe0,0x26,0x16,0xac,0x3e,0x92,0x15,0x82,0xad,0x8d,0x16,0x80,
+0x0, 0xbc,0x4d,0x3e,0x56,0xa4,0x54,0x84,0xe1,0x2d,0x3e,0xba,0xe0,0x0, 0x4d,0x40,
+0x36,0xc1,0x3e,0xb9,0x54,0x85,0x35,0x21,0x3c,0xfa,0x5, 0x11,0xe2,0x0, 0xce,0x1d,
+0x2, 0x8e,0xe0,0x0, 0x4e,0x58,0xe0,0xc, 0x3c,0xac,0xe0,0x41,0x3e,0x2c,0xe2,0x0,
+0xce,0x5, 0x5, 0x5, 0xe0,0x1, 0x16,0x48,0xe7,0xff,0x0, 0xaa,0x55,0x5, 0xe2,0x0,
+0xcd,0xf, 0x5, 0x87,0xe0,0x1, 0x16,0x48,0xe1,0x2d,0x3e,0xdc,0xe7,0xff,0x0, 0xa2,
+0xe0,0x0, 0x16,0x78,0x0, 0xfa,0xe0,0x0, 0x16,0xf8,0xe7,0xff,0x0, 0x9b,0xe2,0x0,
+0xce,0x9d,0x2, 0xce,0x55,0x8f,0xe2,0x0, 0xcd,0x9d,0x2, 0xca,0xe8,0x18,0x56,0xba,
+0xe0,0x0, 0x16,0x77,0xe1,0x2d,0x3e,0x2d,0xe0,0x26,0x16,0x2c,0x3e,0x12,0x8e,0xc,
+0xe2,0x0, 0xce,0x1, 0x1, 0x9f,0x54,0x8, 0x54,0x89,0x55,0x32,0x55,0xb3,0x77,0x81,
+0x77,0x2, 0x76,0x83,0xef,0xfd,0xd4,0x45,0xe2,0x0, 0xcc,0x3b,0x57,0x81,0x57,0x2,
+0x56,0x83,0x2, 0x87,0xe0,0x26,0x16,0xc0,0x3e,0x92,0x16,0x0, 0xae,0xd, 0x16,0x80,
+0xe0,0x26,0x16,0x2c,0x3e,0x12,0x15,0x80,0x0, 0x8d,0x16,0x81,0x0, 0xde,0x16,0x81,
+0x0, 0xe3,0xe2,0x0, 0xce,0x3, 0xe7,0xfc,0x1, 0xe5,0xe0,0x26,0x16,0x2c,0x3e,0x12,
+0x15,0x81,0xad,0x8c,0xe7,0xfc,0x0, 0xde,0xe2,0x0, 0xcd,0x2, 0xe7,0xfc,0x1, 0xd9,
+0xe0,0x0, 0x4d,0xd6,0x56,0xb0,0x54,0x84,0xe1,0x2d,0x3e,0xbb,0x36,0xc1,0x3e,0xb9,
+0xe1,0x2d,0x3e,0x96,0x0, 0xe1,0x56,0xe, 0xe7,0xfc,0x0, 0xd9,0x16,0x1, 0x76,0xb,
+0xe7,0xfd,0x0, 0xa3,0x56,0x22,0x56,0xa3,0x54,0x26,0x54,0xa7,0x3e,0x18,0xe8,0xc,
+0x4c,0x75,0x3e,0x99,0xe8,0xc, 0x4c,0xf6,0x34,0x28,0x3c,0x49,0xe8,0xd, 0x4c,0x83,
+0xe8,0xd, 0x48,0x84,0xe2,0x0, 0xce,0x0, 0x34,0xa8,0x3c,0xc1,0xe0,0x2, 0x4, 0x3f,
+0xc4,0x7f,0xe0,0x2c,0x3c,0x5c,0xe2,0x0, 0xce,0x80,0xe0,0x2, 0x4, 0x3b,0xc4,0xff,
+0xe0,0x2d,0x3c,0xdd,0xe0,0x8, 0x31,0x22,0xe0,0x27,0x14,0x86,0x3c,0x98,0xe0,0x5,
+0xe, 0x1d,0xe0,0x9, 0xd, 0x1b,0xe0,0x26,0x16,0xc0,0x39,0x1d,0x8e,0x2, 0xe2,0x0,
+0xce,0x5, 0xe0,0x2, 0x1, 0xb3,0x3a,0xe4,0x3c,0x64,0xe0,0x0, 0xc2,0xe0,0x16,0x98,
+0x39,0x68,0xc1,0x18,0x3d,0x6d,0x3c,0xe2,0x77,0x81,0x77,0x2, 0x76,0x83,0xe0,0x2,
+0xd0,0xa4,0x3a,0xf2,0x3c,0x62,0x57,0x81,0x57,0x2, 0x56,0x83,0x1, 0xf2,0xe0,0xc,
+0xaf,0x14,0x57,0x5, 0xe0,0xc, 0xaf,0xc4,0xe0,0xc, 0xaf,0x24,0x57,0x91,0x57,0xa,
+0xe0,0x6, 0xb7,0xb4,0xe0,0xc, 0xaf,0x34,0x57,0x8f,0x57,0x12,0xe0,0x6, 0xb7,0xe4,
+0xe0,0x6, 0xb7,0x44,0x57,0x89,0x57,0x8, 0x56,0x84,0xe0,0x7, 0xb7,0x84,0xe0,0x6,
+0xb7,0x74,0x57,0x90,0x57,0x6, 0xe0,0xc, 0xae,0x84,0xe0,0x6, 0xb3,0x54,0xe0,0x7,
+0xb3,0x94,0xe0,0x7, 0xb7,0xb4,0xe0,0x7, 0xb7,0x24,0x57,0xc, 0xc7,0x1, 0xe2,0x0,
+0xcf,0xa, 0x77,0xc, 0xe7,0xf8,0x1, 0xf9,0xe8,0x56,0x4f,0x98,0x57,0x7, 0x3f,0xfe,
+0x5, 0x85,0xe8,0x56,0x6f,0x18,0xef,0xfe,0xd3,0xbf,0x57,0x8b,0xe0,0x1, 0x27,0xbc,
+0x3a,0xe0,0xc2,0xb4,0x15,0xa, 0x14,0x80,0x3c,0x65,0xe0,0x2, 0xd0,0xaa,0x3c,0x60,
+0xe0,0x52,0x12,0x38,0xe0,0x1, 0x15,0xc, 0xe0,0x1, 0x14,0xff,0xe0,0x0, 0xc4,0x6e,
+0xe0,0x2, 0xd0,0x9f,0x3b,0x64,0x39,0x63,0x3b,0xe4,0x8f,0xc6,0xe2,0x0, 0xcf,0x89,
+0x2, 0x9e,0xe0,0xd, 0x3a,0x9f,0xe4,0x0, 0xc7,0x86,0x16,0x1, 0x3f,0x97,0xe0,0x3,
+0xc7,0xa4,0x8f,0x8f,0xae,0xd, 0x3e,0xef,0xe2,0x1, 0xc6,0xfd,0xe0,0x2, 0x2e,0xcf,
+0x3c,0x63,0xe4,0x0, 0xc4,0xe, 0x3d,0xe0,0xe0,0x0, 0xc5,0xee,0x15,0xe, 0x3c,0xe6,
+0x3c,0x1b,0xc1,0x81,0xe0,0x2, 0xd0,0x31,0xe2,0x1, 0xc1,0xff,0xc3,0xe, 0xe0,0x53,
+0x16,0xc4,0x3e,0xf6,0x1, 0xdb,0x3b,0xe0,0xc3,0xaa,0x13,0x0, 0xe1,0x80,0x8e,0x97,
+0xe0,0x0, 0x26,0xd9,0x3e,0x60,0xc6,0x34,0x12,0x80,0xe1,0x80,0x8f,0x9c,0x3f,0x65,
+0xe2,0x1, 0xc7,0x7f,0xe0,0x2, 0x2f,0xc7,0x3e,0x60,0xc6,0x34,0x3e,0x15,0x15,0x81,
+0xad,0x8c,0x3e,0x63,0x3c,0xe0,0xe4,0x0, 0xc6,0xe, 0x15,0xe, 0xe0,0x0, 0xc4,0xee,
+0x3e,0x19,0x3c,0xea,0x3c,0xb6,0x3d,0xe0,0xe0,0x3, 0xc5,0x86,0x3c,0x9b,0x3c,0x6c,
+0x76,0x83,0x77,0x2, 0x77,0x81,0xe0,0x2, 0xd0,0x0, 0x57,0x2, 0x3e,0x68,0x95,0x8c,
+0xe0,0x8, 0x32,0xa2,0xaf,0x4c,0xe0,0x27,0x15,0x6, 0x96,0x1c,0x3d,0x18,0x57,0x81,
+0xb5,0x8a,0xe0,0x26,0x14,0xde,0xb6,0x1a,0xe0,0x26,0x15,0x40,0x3d,0x15,0xaf,0x8a,
+0xe0,0x26,0x15,0x2c,0x3c,0x98,0x3d,0x15,0xe0,0x8, 0x32,0xa1,0xaf,0x8a,0xe0,0x30,
+0x15,0x5e,0xb5,0x89,0x3d,0x18,0xb6,0x19,0xe0,0x26,0x14,0xca,0x3c,0x98,0x14,0x1,
+0xb4,0xa, 0xe0,0x26,0x15,0x36,0x3a,0x9a,0xac,0x5, 0x56,0x83,0xb7,0x89,0x3e,0xf8,
+0xe0,0x1, 0x1, 0xf8,0x3d,0x6e,0x3c,0xef,0x3c,0x6d,0xd7,0xc2,0xc1,0x81,0xe2,0x1,
+0xc1,0xff,0xc3,0x1, 0xe2,0x0, 0xcb,0xa, 0xe7,0xff,0x1, 0xa2,0x3b,0x63,0xe4,0x0,
+0xc3,0xe, 0x12,0x80,0x3f,0xe5,0xe2,0x1, 0xc7,0xff,0x3f,0xf2,0xe0,0x1, 0x4, 0xf2,
+0x39,0x60,0x3a,0xe0,0xe0,0x0, 0xc1,0x6e,0xe0,0x1, 0xc2,0xfa,0x13,0xe, 0x3c,0xe2,
+0x3c,0x64,0x3d,0x66,0xe0,0x1, 0xdf,0xb1,0xc1,0xe, 0x3a,0xf2,0xc2,0xe, 0x1, 0xf8,
+0xe8,0x56,0x69,0x98,0x17,0x80,0xe8,0x31,0x6f,0xc8,0xe0,0x4, 0xc0,0x10,0xb, 0xe1,
+0xe2,0x0, 0xce,0x82,0x1, 0x8d,0xe2,0x0, 0xcb,0x83,0xe7,0xfa,0x5, 0xee,0x56,0x2e,
+0x56,0xaf,0x54,0x32,0x54,0xb3,0x36,0x21,0x36,0xa1,0xe7,0xfd,0x0, 0xb9,0x14,0x80,
+0x3c,0x69,0x3e,0xe9,0x3e,0x69,0xe7,0xfd,0x0, 0xb3,0x16,0x0, 0xe7,0xfd,0x0, 0xc5,
+0x16,0x80,0xe7,0xfd,0x0, 0xc9,0xe0,0xc, 0x31,0x22,0xe0,0x27,0x16,0x86,0x3e,0x9c,
+0xe0,0xd, 0xd, 0x1b,0xe7,0xfd,0x0, 0xc9,0x3e,0xec,0xe4,0x0, 0xc6,0x98,0x54,0x84,
+0x3a,0x1d,0xaf,0x14,0xc6,0x1, 0x57,0x5, 0xaf,0xc4,0xaf,0x24,0x57,0x91,0x57,0xa,
+0xb7,0xb4,0xaf,0x34,0x57,0x8f,0x57,0x12,0xb7,0xe4,0xb7,0x44,0x57,0x89,0x57,0x8,
+0xe0,0x1, 0xb7,0x84,0xb7,0x74,0x57,0x90,0x57,0x6, 0xae,0x2, 0xac,0x84,0xb3,0x54,
+0xe0,0x1, 0xb3,0x94,0xe0,0x1, 0xb7,0xb4,0xe0,0x1, 0xb7,0x24,0xe7,0xfd,0x0, 0xe7,
+0x2f,0xa9,0xe0,0x5, 0xd, 0x8c,0xe0,0xa, 0x31,0x22,0xe0,0x26,0x16,0xde,0x3e,0x9a,
+0xe0,0x27,0x17,0x6, 0x54,0x8c,0x3f,0x1a,0xe0,0xd, 0xd, 0x9c,0xe0,0xd, 0x31,0x21,
+0xe0,0xe, 0xd, 0x9c,0xe0,0x26,0x17,0x4a,0x3f,0x1d,0xb7,0x8e,0xe0,0x26,0x17,0x40,
+0x3f,0x12,0xaf,0x8e,0xe0,0x26,0x17,0x2c,0x39,0x1e,0xaf,0x82,0xe0,0x30,0x17,0xde,
+0x17,0x1, 0x3f,0x9d,0xb7,0xf, 0xe0,0x26,0x17,0xb6,0x3f,0x99,0xaf,0xf, 0xe7,0xfd,
+0x0, 0xbe,0xe2,0x0, 0xcf,0x81,0xe7,0xfd,0x1, 0xba,0xe0,0x26,0x17,0xac,0x3f,0x92,
+0x8f,0x8f,0xe2,0x0, 0xcf,0x81,0xe7,0xfd,0x1, 0xb2,0xe8,0x56,0x4f,0x99,0xe2,0x0,
+0xcf,0x81,0xe7,0xfd,0x5, 0xac,0xe0,0x26,0x17,0xc0,0x3f,0x92,0x8c,0x8f,0x2c,0x9a,
+0xe0,0xd, 0x31,0x22,0x3f,0xe2,0xe0,0x27,0x17,0x6, 0xe4,0x0, 0xc7,0x8e,0x3d,0x60,
+0x3f,0x1d,0xe0,0xe, 0xe, 0x8e,0xe0,0x3, 0xc5,0x6, 0x3d,0xe0,0x16,0x1, 0x3f,0x9a,
+0xc5,0xaa,0x76,0xb, 0x39,0x1b,0xe0,0xf, 0xe, 0x9e,0x17,0x81,0xaf,0x82,0xe7,0xfd,
+0x0, 0x8e,0x3f,0xe2,0xe4,0x0, 0xc7,0xf8,0xe4,0x0, 0xc4,0x98,0x3c,0x60,0x3c,0x9f,
+0xe0,0x27,0x17,0x96,0x3c,0x9f,0x15,0x18,0xc4,0x3e,0xe0,0x1, 0xde,0xf6,0x57,0xa4,
+0xe2,0x7, 0xcf,0xe7,0x5, 0xd6,0xe7,0xfc,0x0, 0xfa,0x3f,0xfc,0xe7,0xfd,0x1, 0xc0,
+0x3c,0x62,0xe4,0x0, 0xc4,0xe, 0x3e,0x60,0xe0,0x1, 0xc6,0x7a,0x15,0xe, 0x3c,0xe6,
+0x3c,0x1c,0xc1,0x1, 0xe0,0x1, 0xde,0xe1,0xe2,0x1, 0xc1,0x7f,0xe7,0xfd,0x0, 0xb0,
+0xe2,0x0, 0xce,0x82,0xe7,0xfe,0x1, 0x8c,0x3e,0xef,0x3d,0x6e,0x3c,0xef,0xe7,0xfe,
+0x0, 0x86,0xc2,0x81,0xe2,0x0, 0xca,0x8a,0xe7,0xfd,0x1, 0xb1,0xe7,0xfe,0x0, 0x83,
+0x3c,0xe5,0xe4,0x0, 0xc4,0x8e,0x3e,0x60,0x3e,0xe0,0xe0,0x8, 0x3b,0x19,0xe0,0x1,
+0xc6,0x7a,0xe0,0x0, 0xc6,0xee,0x15,0xe, 0x3c,0x9c,0x3c,0x1d,0xe0,0x1, 0xde,0xbd,
+0xc2,0x81,0xe7,0xfd,0x0, 0xf9,0xe2,0x0, 0xcb,0x9d,0xe7,0xfa,0x5, 0xae,0x16,0x80,
+0xe7,0xfb,0x0, 0x93,0x8, 0xb2,0xe8,0xb, 0x49,0x69,0x14,0x80,0x31,0x21,0x3d,0x62,
+0xe0,0x31,0x14,0x20,0xe0,0x1, 0xde,0xf5,0x3d,0x62,0x14,0x80,0xe0,0x31,0x14,0x34,
+0x9, 0x21,0xe0,0x3d,0x0, 0xee,0x8, 0xb7,0xe1,0xfe,0xc0,0x5c,0xe8,0x56,0x4e,0x18,
+0xe8,0x56,0x49,0x99,0x76,0x5, 0xe0,0x52,0x13,0x38,0xe8,0xb, 0x4a,0xe9,0x2e,0x26,
+0x21,0x83,0xe8,0x56,0x6e,0x1f,0xdf,0xdf,0x3b,0xe5,0xe4,0x0, 0xc3,0x8e,0x3a,0x60,
+0xc2,0x1a,0x3d,0x67,0xe0,0x1, 0x14,0xff,0x3c,0x64,0xe0,0x1, 0xde,0xd2,0x14,0x80,
+0x55,0x5, 0x3d,0xe4,0x3c,0x69,0xd9,0x54,0x54,0x85,0x3d,0xe4,0x3d,0x65,0xd9,0x50,
+0xe0,0x52,0x17,0xb8,0x11,0x0, 0x3e,0xe8,0x3e,0x6f,0x15,0x8e,0x39,0x75,0xe0,0x0,
+0x1, 0x55,0x3c,0xe0,0xc4,0x9a,0x15,0x0, 0x0, 0xb3,0x21,0x93,0xe0,0x52,0x17,0xb8,
+0x17,0x0, 0x0, 0x9f,0x3f,0xee,0xe4,0x0, 0xc7,0x8e,0xc7,0x1, 0xe0,0x2, 0xc7,0x9c,
+0x3f,0x96,0xae,0x8f,0x3f,0xee,0xe2,0x1, 0xc7,0xff,0x3f,0xf5,0x4, 0xf4,0x0, 0xef,
+0x3f,0x63,0x16,0xff,0x0, 0xf8,0xe0,0x40,0x96,0xff,0xc7,0x1, 0x36,0xa4,0xe0,0x40,
+0xb6,0xff,0xe2,0x1, 0xc7,0x7f,0xe0,0x40,0x96,0xef,0x36,0xa4,0xe0,0x40,0xb6,0xef,
+0xc7,0x8e,0x56,0x85,0x3e,0xfe,0x1, 0xf0,0xe7,0xff,0x0, 0xb8,0xc4,0x8e,0x88,0xcc,
+0xe0,0x41,0x8c,0x29,0x38,0xf8,0x1, 0x19,0xc5,0x1, 0xe2,0x1, 0xc5,0x7f,0x3d,0x7d,
+0x1, 0xf6,0x3c,0x6d,0xe4,0x0, 0xc4,0xe, 0x3d,0x6b,0x3c,0xec,0x3c,0x14,0x77,0x81,
+0x76,0x2, 0x76,0x83,0x75,0x84,0xe0,0x1, 0xde,0x30,0x56,0x83,0x57,0x81,0xc6,0x81,
+0x56,0x2, 0x55,0x84,0xe2,0x1, 0xc6,0xff,0x3f,0x62,0xc7,0x1, 0x39,0x6e,0xe2,0x1,
+0xc1,0x7f,0xc6,0xe, 0xe7,0xff,0x0, 0xac,0x3c,0xe0,0x3d,0x67,0xc4,0x9a,0xe0,0x54,
+0x14,0x50,0x77,0x81,0xe0,0x1, 0xde,0x19,0x57,0x81,0x29,0x98,0x3d,0x67,0xe0,0x52,
+0x14,0xb8,0xe0,0x54,0x14,0x50,0xe0,0x1, 0xde,0x10,0x15,0x14,0x3c,0xe3,0xe0,0x31,
+0x14,0xc, 0xe0,0x1, 0xde,0x56,0x15,0x14,0x3c,0xe3,0xe0,0x30,0x14,0x78,0xe0,0x1,
+0xde,0x50,0x57,0x81,0x16,0x80,0xe0,0x2, 0x0, 0xd4,0xe8,0x56,0x4e,0x1f,0x2e,0x7b,
+0xe0,0x31,0x14,0xb4,0x3d,0x6c,0xe0,0x31,0x14,0x20,0xe0,0x31,0x10,0x8c,0xe0,0x30,
+0x11,0xf8,0x0, 0xa1,0x3e,0xec,0xe4,0x0, 0xc6,0x8e,0xe0,0x2, 0xc6,0x9c,0x3e,0x96,
+0x8e,0x8d,0x39,0x7d,0x5, 0x97,0x3d,0xed,0xe4,0x0, 0xc5,0x86,0x3d,0x96,0xe0,0x3,
+0xc5,0xa4,0x8d,0x8b,0xe2,0x0, 0xcd,0x81,0x1, 0x8d,0x36,0xa1,0xe0,0xb, 0x3c,0x9d,
+0xb5,0xb, 0xe0,0xb, 0x3c,0x1d,0xb5,0xb, 0xe0,0xb, 0x38,0x9d,0x3e,0x93,0xb5,0xb,
+0xb5,0xd, 0xc6,0x1, 0x3e,0xec,0xe2,0x1, 0xc6,0xff,0x39,0x7d,0x2, 0xdc,0xe8,0x56,
+0x4e,0xae,0xe8,0x56,0x4f,0x18,0xc6,0xff,0xe2,0x1, 0xc6,0xff,0xc6,0xff,0x76,0x8b,
+0xe0,0x52,0x13,0xb8,0xe8,0x56,0x4e,0xaf,0x77,0xa, 0xc6,0xff,0xe2,0x1, 0xc6,0xff,
+0xc6,0xff,0x3b,0x67,0x17,0x0, 0x76,0x8c,0x3e,0xee,0x56,0x5, 0xe2,0x1, 0xc6,0xff,
+0x3e,0x7d,0xe7,0xff,0x5, 0xb1,0x16,0x80,0x3e,0x6d,0xe2,0x1, 0xc6,0x7f,0x39,0x7c,
+0xe7,0xff,0x5, 0xaa,0x3e,0x6d,0xe4,0x0, 0xc6,0xe, 0x76,0x87,0x3e,0xec,0xe0,0x2,
+0xc6,0x9c,0x3e,0x96,0x8d,0x8d,0x8d,0x47,0x56,0x87,0x3d,0x7b,0xc6,0x81,0x1, 0xed,
+0xe0,0x52,0x15,0x38,0x3d,0xee,0x3e,0x1a,0xe4,0x0, 0xc5,0x8e,0x3e,0xec,0x3d,0x9a,
+0xe0,0x2, 0xc6,0x9c,0x8a,0x8d,0x96,0x8b,0x95,0x9b,0x76,0x88,0x39,0xeb,0xe0,0x11,
+0x96,0xcc,0x75,0x89,0xe0,0x3, 0x15,0x7e,0xe0,0x11,0x96,0x5c,0xe8,0xf4,0x4d,0xa6,
+0x52,0x8, 0x39,0xac,0x35,0xa5,0x3a,0x2d,0xe1,0x2b,0x3d,0xea,0xe0,0x41,0x3a,0x24,
+0xe0,0x23,0x15,0x68,0xe0,0x41,0x39,0xa3,0xe1,0x2b,0x3d,0xda,0x76,0x6, 0xe0,0xc,
+0x3a,0x13,0x3e,0x7b,0xe0,0x1, 0x3, 0x83,0xe0,0x8, 0x36,0x48,0xe0,0x9, 0x36,0x28,
+0x15,0x0, 0x77,0x81,0x76,0x2, 0x76,0x83,0x77,0x4, 0xe0,0x1, 0xdd,0x44,0x15,0x90,
+0x57,0x81,0x56,0x2, 0x56,0x83,0x57,0x4, 0xe1,0x29,0x3c,0xeb,0x32,0xa1,0xe0,0x31,
+0x15,0xa0,0x3d,0x95,0x95,0x8b,0x3e,0x7b,0xe0,0x31,0x15,0xb4,0x3d,0x95,0xe0,0x0,
+0x3, 0xea,0x94,0x8b,0xe0,0x31,0x15,0x20,0x3a,0x9a,0xb6,0x5, 0xe0,0x2, 0x15,0x80,
+0x56,0xa, 0xe1,0x29,0x3c,0xdb,0xe2,0x0, 0xce,0x5, 0x5, 0x82,0x34,0xc2,0x3e,0x6e,
+0xe4,0x0, 0xc6,0xe, 0x3e,0x16,0x8d,0xfc,0xe0,0x1, 0x8e,0xc, 0xe2,0x0, 0xcd,0x81,
+0xe0,0x0, 0x5, 0xd4,0x55,0xb, 0x3d,0x7b,0xe0,0x0, 0x5, 0x50,0xe2,0x0, 0xce,0x1,
+0xe0,0x0, 0x5, 0xcc,0x55,0x8c,0x3d,0xfc,0xe0,0x0, 0x5, 0x48,0xe2,0x1, 0xcc,0x80,
+0xe0,0x0, 0x2, 0xcb,0x16,0x10,0xe1,0x28,0x3c,0xec,0x56,0xa, 0xe2,0x0, 0xce,0x1,
+0x1, 0x85,0xe2,0x0, 0xcc,0xed,0x2, 0x82,0x34,0x21,0xe0,0xc, 0x32,0xf, 0xe0,0x84,
+0x3a,0x58,0xe0,0xa4,0x3e,0x8, 0xe0,0xc, 0x32,0xc8,0xe0,0xb, 0x32,0x28,0x3e,0x4b,
+0x15,0xfc,0x3d,0xdc,0x56,0x8, 0x3e,0x7d,0x56,0x7, 0xe4,0x0, 0xc6,0xe, 0xe0,0xa,
+0x3b,0x1c,0x5, 0xad,0x3e,0x9b,0xe0,0x11,0xb6,0xca,0xe0,0x8a,0x39,0xd8,0xe0,0xd,
+0x31,0x8f,0xe0,0xaa,0x3e,0x88,0xe0,0xd, 0x35,0xc8,0x35,0x28,0x3e,0xca,0x55,0x86,
+0x55,0x9, 0x3e,0x16,0x3d,0x7b,0xe3,0xff,0xc6,0xfc,0x5, 0x9b,0x3e,0x9b,0xc7,0x1,
+0xc3,0x8e,0xe0,0x11,0xb6,0xdc,0xe7,0xfe,0x0, 0xb9,0xe0,0x2, 0x14,0x80,0xe7,0xff,
+0x0, 0x8f,0xb4,0x8b,0xe7,0xff,0x0, 0x98,0xe2,0x1, 0xcc,0x9c,0xe7,0xff,0x5, 0xbc,
+0xe0,0x1, 0x14,0x1c,0x0, 0xc3,0xe0,0x1, 0x14,0x0, 0x0, 0xc0,0x3e,0xab,0x0, 0xd4,
+0x55,0x6, 0xe0,0xd, 0x3d,0x2d,0x0, 0xe4,0xe0,0x10,0x96,0x5f,0xc6,0x81,0x36,0x44,
+0xe0,0x40,0xb6,0x7f,0xe2,0x1, 0xc6,0xff,0xe0,0x10,0x96,0x6f,0x36,0x44,0xe0,0x40,
+0xb6,0x6f,0x3e,0x6f,0xe0,0x2, 0xc6,0xe, 0x8e,0xc, 0xe0,0x41,0xae,0x2f,0x3e,0x6f,
+0xe0,0x2, 0xc6,0xf, 0x8e,0xc, 0xe0,0x41,0xae,0x1f,0x3e,0x6f,0xe0,0x2, 0xc6,0x10,
+0x8e,0xc, 0xe0,0x41,0xae,0xf, 0x3e,0x6f,0xe0,0x2, 0xc6,0x11,0x8e,0xc, 0xe0,0x40,
+0xae,0x7f,0x3e,0x6f,0xe0,0x2, 0xc6,0x12,0x8e,0xc, 0xe0,0x40,0xae,0x6f,0x39,0x7d,
+0xc7,0x8e,0x1, 0xd3,0xe0,0x1, 0xc0,0x24,0xb, 0xe1,0xe8,0x12,0x56,0xea,0xe8,0x12,
+0x56,0x69,0x14,0x0, 0xe8,0x56,0x4c,0x98,0xc6,0xdd,0xc6,0x6a,0xe0,0x52,0x17,0x38,
+0x3f,0xe8,0x3c,0xff,0x1, 0x82,0x38,0x82,0xe0,0xe, 0xd, 0xb, 0xe2,0x0, 0xcd,0x23,
+0x5, 0x8b,0x3e,0xfa,0x5, 0x89,0xe2,0x0, 0xcd,0x96,0x5, 0x86,0x3e,0x7b,0x5, 0x84,
+0xc4,0x1, 0xe2,0x1, 0xc4,0x7f,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xc7,0xe, 0x0, 0xea,
+0xe4,0x0, 0xc4,0x2c,0xe0,0xf6,0x17,0x9c,0x3f,0x98,0xe0,0x28,0x17,0x0, 0xb7,0xf,
+0xe0,0xf6,0x17,0x1e,0x3c,0x1e,0xe0,0x2, 0x17,0x0, 0xb7,0x8, 0x16,0x0, 0xae,0x4f,
+0x8f,0x59,0xaf,0x5f,0x8f,0x69,0xae,0x7f,0xaf,0x6f,0xe0,0xff,0x17,0x7f,0x96,0x89,
+0xb7,0x4f,0x97,0x19,0xe0,0x4, 0xae,0x7f,0xb7,0x6f,0xe0,0x1, 0xb7,0xf, 0xe0,0x1,
+0xb7,0x2f,0xe0,0x1, 0xb7,0x4f,0x17,0x0, 0xe0,0x1, 0xb7,0x5f,0xe0,0x1, 0xb7,0x6f,
+0xe0,0x2, 0xb7,0x1f,0xe0,0x2, 0xb7,0x2f,0x97,0x59,0xb6,0xdf,0xe0,0x2, 0xb7,0x4f,
+0x97,0x69,0xb6,0xff,0xe0,0x1, 0xb6,0x9f,0xe0,0x1, 0xb6,0xbf,0x16,0x81,0xe0,0x1,
+0xb6,0xff,0xe0,0x2, 0xb6,0x8f,0xe0,0x2, 0xb7,0x5f,0x38,0x82,0x8, 0xb7,0xc0,0x4e,
+0xe8,0x12,0x53,0xea,0xe8,0x12,0x55,0x69,0xe8,0x56,0x4b,0x23,0x15,0x94,0x16,0x0,
+0x73,0x91,0xc3,0xce,0x75,0x12,0xc5,0x4e,0xe0,0xf6,0x11,0x9c,0x76,0xf, 0x73,0x10,
+0x75,0x95,0x73,0x98,0x75,0x19,0xe8,0xb, 0x4f,0xe9,0x53,0x8f,0x3f,0xf7,0x2, 0x83,
+0xc0,0x32,0xb, 0xe1,0x57,0x8f,0xe0,0x52,0x14,0xb8,0xe4,0x0, 0xc7,0x8e,0xe0,0x5,
+0x3f,0x99,0x89,0x45,0xe2,0x0, 0xc9,0x9, 0xe0,0x5, 0x2, 0x8d,0x93,0x85,0xe0,0x0,
+0x23,0xf8,0x56,0x91,0xe1,0x2d,0x3b,0xad,0x76,0x93,0x97,0x95,0xe0,0x0, 0x27,0xf5,
+0x53,0x12,0xe1,0x26,0x3f,0xa6,0x73,0x14,0x3e,0xe2,0xe4,0x0, 0xc6,0x86,0xe0,0x55,
+0x17,0x5c,0x3f,0x1d,0x8f,0xe, 0xe2,0x0, 0xcf,0x2, 0xe0,0x7, 0x1, 0x91,0x3f,0x62,
+0xe4,0x0, 0xc7,0x2c,0x3f,0x13,0xe0,0x4, 0x8e,0xfe,0xe0,0x0, 0x26,0xe2,0xe0,0x1,
+0x93,0x1e,0xe0,0x1, 0x92,0x2e,0xe0,0x6, 0x3b,0xa6,0x3e,0xe2,0xe0,0x41,0x3b,0x26,
+0x8f,0x55,0xe4,0x0, 0xc6,0xac,0x73,0xe, 0xe0,0xa, 0x39,0x9d,0x93,0x55,0x77,0x1,
+0xe0,0x4, 0x3f,0xa4,0x8c,0xda,0x73,0xc, 0xe0,0x41,0x3a,0x24,0x53,0x1, 0x94,0x65,
+0x3c,0xf6,0x74,0xd, 0x95,0xfa,0xe0,0x1, 0x96,0xa, 0x8f,0x65,0x3, 0x82,0xab,0x5a,
+0x3e,0x93,0x8d,0x6d,0x3d,0x7e,0x3, 0x82,0xaf,0x6d,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,
+0xe0,0x9, 0x39,0x9d,0x8d,0x19,0xe2,0x1, 0xcd,0x79,0x2, 0x83,0xc5,0x1, 0xad,0x19,
+0x3c,0x62,0x76,0x87,0x77,0x8, 0x76,0x9, 0x75,0x8a,0x77,0x8b,0xd4,0x10,0x56,0x87,
+0x57,0x8, 0x56,0x9, 0x55,0x8a,0x57,0x8b,0x24,0x5, 0xe0,0xa, 0x39,0x9d,0x8d,0xa,
+0x75,0x15,0x3e,0x93,0x88,0xbd,0xe0,0x2, 0x28,0xf4,0x55,0x10,0x3b,0xab,0x3f,0xac,
+0xe2,0x0, 0xcd,0x7, 0xe0,0x41,0x3b,0xa7,0xe0,0x41,0x3f,0xaf,0x3b,0x9f,0x5, 0x96,
+0xe2,0x0, 0xcb,0xd0,0x16,0x9e,0x17,0x8f,0xe0,0x6f,0x3c,0x2d,0x0, 0x99,0x17,0x1,
+0x77,0x13,0xe7,0xff,0x0, 0x8c,0x14,0x81,0x74,0x94,0xe7,0xff,0x0, 0x8f,0x93,0x5e,
+0x92,0x6e,0xe0,0x6, 0x3b,0xa6,0xe7,0xff,0x0, 0xa2,0x55,0x90,0xe2,0x0, 0xcd,0x84,
+0x5, 0x9c,0xe2,0x0, 0xcb,0xbb,0x16,0x8a,0x17,0x94,0xe0,0x6f,0x3a,0x2d,0x3e,0xe2,
+0xe4,0x0, 0xc6,0xac,0x3e,0x93,0x8e,0x1d,0xe2,0x0, 0xce,0x11,0x5, 0x98,0x55,0x1,
+0xe2,0x0, 0xcd,0x78,0xe0,0x2, 0x5, 0x92,0xe2,0x0, 0xcb,0xf7,0xe0,0x2, 0x2, 0x2c,
+0x17,0x32,0xaf,0xd, 0xe0,0x0, 0x0, 0xcc,0x56,0x10,0xe2,0x0, 0xce,0x2, 0xe0,0x6,
+0x5, 0x86,0xe2,0x0, 0xcb,0xb2,0x16,0x8f,0x17,0x87,0x0, 0xc7,0x8e,0xd, 0x55,0x81,
+0xe4,0x0, 0xc6,0x3, 0x35,0xa1,0x3e,0x7b,0xe0,0x1, 0x3, 0x65,0x53,0x1, 0xe2,0x0,
+0xcb,0x28,0xe0,0x1, 0x5, 0xe0,0x3e,0x66,0x36,0x41,0xae,0xd, 0x3e,0xe2,0x53,0x81,
+0xe4,0x0, 0xc6,0xac,0xe2,0x0, 0xcb,0xcf,0x3e,0x93,0xe0,0x1, 0x2, 0xe0,0x8e,0x7d,
+0xc6,0x1, 0xae,0x7d,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0x3e,0x93,0x8e,0x5d,0xe2,0x0,
+0xce,0x50,0x5, 0x9d,0x8d,0xfd,0xe2,0x0, 0xcd,0x82,0x2, 0x99,0x55,0x81,0xc5,0x94,
+0x3d,0xfc,0x4, 0x5, 0x8e,0xed,0x37,0x21,0x3f,0x7d,0x3, 0x11,0x57,0xe, 0x3f,0x14,
+0xe2,0x0, 0xcf,0x63,0xe0,0x1, 0x5, 0xc6,0x54,0x8e,0x32,0x42,0x34,0xc2,0x74,0x8e,
+0x3f,0x62,0xe4,0x0, 0xc7,0x2c,0x16,0x82,0x3f,0x13,0xae,0xce,0x57,0xe, 0x3f,0x14,
+0xe2,0x0, 0xcf,0x3, 0xe0,0x1, 0x5, 0xe8,0x93,0x5, 0xe2,0x0, 0xcb,0x31,0x73,0x6,
+0xe0,0x1, 0x5, 0xe6,0x53,0x98,0x3b,0x77,0xe0,0x1, 0x2, 0xe2,0x97,0x15,0xe2,0x0,
+0xcf,0x31,0xe0,0x1, 0x5, 0xdd,0x55,0x19,0xe1,0x2e,0x3f,0x1a,0x53,0xd, 0x16,0x3,
+0xe0,0x88,0x3b,0x5c,0x3d,0x60,0xc5,0x8, 0xb4,0x9a,0x55,0x8c,0x3d,0xbc,0x3c,0x1b,
+0x3d,0xe2,0xe4,0x0, 0xc5,0xac,0x74,0x4, 0xe0,0xa, 0x39,0x9b,0x53,0x84,0xe0,0x2,
+0x94,0x4a,0xe0,0x2, 0x94,0xda,0x3c,0x77,0x2, 0x5, 0x1, 0x8a,0x55,0x5, 0x3c,0xfa,
+0x5, 0x87,0x3d,0x93,0x95,0xcb,0xe2,0x0, 0xcd,0xbb,0xe0,0x3, 0x5, 0x9d,0x3e,0x60,
+0xc6,0x18,0x3e,0xec,0xe0,0xd, 0xe, 0xd, 0x3d,0xe0,0xe0,0x7, 0x3e,0x9d,0xe0,0x26,
+0x3e,0x7c,0xc5,0x84,0x3c,0x76,0xe0,0xb, 0xb, 0x17,0x2, 0x4, 0x1, 0x8c,0x3c,0xf7,
+0x5, 0x8a,0x3d,0xe2,0xe4,0x0, 0xc5,0xac,0x3d,0x93,0x95,0xcb,0xe2,0x0, 0xcd,0xbb,
+0xe0,0x3, 0x5, 0x86,0xe0,0xb, 0x3c,0x99,0x56,0x4, 0xe0,0x2a,0x3c,0x78,0x3d,0x7c,
+0x2, 0x5, 0x1, 0x8d,0x56,0x85,0x3d,0xfd,0x5, 0x8a,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,
+0x3e,0x93,0x96,0xcd,0xe2,0x0, 0xce,0xbb,0xe0,0x2, 0x5, 0xf5,0x16,0x3, 0x3d,0xe8,
+0x3d,0xbc,0xe0,0x8c,0x3c,0xdc,0x55,0xd, 0x3e,0x1b,0x55,0x8c,0x35,0x4e,0x35,0xa2,
+0x3d,0xca,0x3e,0x7b,0x55,0xd, 0x35,0x22,0x2, 0x6, 0xe0,0x0, 0x1, 0xfc,0x3e,0xfa,
+0xe0,0x0, 0x5, 0xf9,0xe2,0x0, 0xc8,0x80,0x16,0x8a,0xe0,0x6d,0x39,0xaf,0x3f,0xed,
+0x56,0x8e,0x3e,0x94,0xe2,0x0, 0xce,0xe3,0x2, 0x90,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,
+0x3e,0x93,0x96,0xcd,0xe2,0x0, 0xce,0x9d,0x2, 0x88,0x53,0x1, 0x16,0xb2,0xe2,0x0,
+0xcb,0x51,0xe0,0x6d,0x3c,0xaf,0x3f,0xed,0x27,0xa, 0xe2,0x0, 0xc8,0x81,0x1, 0x87,
+0x3f,0xe2,0xe4,0x0, 0xc7,0xac,0x3f,0x93,0xa8,0x8f,0x17,0x80,0x3f,0x62,0xe4,0x0,
+0xc7,0x2c,0x3f,0x13,0x8e,0x8e,0xe0,0x0, 0x2e,0xe1,0x16,0x81,0xae,0x8e,0xe0,0x0,
+0x0, 0xdd,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0x3e,0x93,0x8e,0x5d,0xe2,0x0, 0xce,0x18,
+0xe7,0xfe,0x2, 0x9e,0x16,0xa, 0xe7,0xfe,0x0, 0x9a,0x16,0x0, 0xe7,0xfe,0x0, 0xa3,
+0x12,0x0, 0x72,0xe, 0xe7,0xfe,0x0, 0xbe,0x55,0x81,0xe2,0x0, 0xcd,0xee,0x5, 0x87,
+0xe2,0x0, 0xcb,0xed,0x2, 0x18,0x17,0x28,0xe7,0xfd,0x0, 0xed,0x56,0x1, 0xe2,0x0,
+0xce,0x64,0x5, 0x87,0xe2,0x0, 0xcb,0xe3,0x2, 0xe, 0x17,0x1e,0xe7,0xfd,0x0, 0xe3,
+0x57,0x1, 0xe2,0x0, 0xcf,0x50,0x5, 0x8c,0xe2,0x0, 0xcb,0xc5,0x2, 0x4, 0x17,0x14,
+0xe7,0xfd,0x0, 0xd9,0xe0,0xff,0x17,0x7f,0xb7,0x7d,0xe7,0xfe,0x0, 0xa1,0x8f,0xd,
+0xe2,0x0, 0xcf,0x14,0xe7,0xfe,0x5, 0x9c,0xc7,0x7e,0xe7,0xfd,0x0, 0xcc,0x17,0x80,
+0xe7,0xfe,0x0, 0x9c,0x12,0x0, 0x72,0xe, 0xe7,0xfe,0x0, 0x98,0x17,0x1, 0xe7,0xfe,
+0x0, 0xa7,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0xe8,0xf4,0x4e,0x14,0x3e,0x93,0x8d,0x8d,
+0xe0,0x1, 0x2e,0x30,0xe7,0xff,0x20,0xa4,0xe2,0x0, 0xcd,0x8a,0xe0,0x1, 0x5, 0xa2,
+0x16,0xa, 0xae,0xd, 0xe7,0xff,0x2f,0x13,0x3d,0xe0,0x3b,0x62,0xe0,0x1, 0x95,0x4b,
+0xe4,0x0, 0xc3,0x2c,0xc5,0x98,0x95,0x9b,0xe0,0xe, 0x39,0x96,0x3c,0x9b,0xe0,0x28,
+0x3c,0x7a,0xe0,0xb, 0x34,0x4f,0x16,0x0, 0x75,0x97,0x3d,0xe0,0x76,0x16,0xc5,0xac,
+0x95,0x9b,0x3c,0x9b,0xe0,0x28,0x3c,0x7c,0xe0,0xd, 0x34,0x2f,0xe0,0xc, 0x34,0xc1,
+0x3e,0x4d,0x56,0x8e,0x55,0x86,0x3e,0x94,0xb6,0xce,0x34,0x1, 0x96,0x95,0xe0,0x1,
+0xb5,0x9e,0xe0,0x1, 0xb6,0xae,0x8e,0x8e,0xe0,0x2, 0xb4,0x4e,0x3e,0xff,0xe0,0x2,
+0xb6,0x5e,0x3, 0x82,0xaf,0x8e,0x3c,0x62,0xd2,0x42,0x24,0x5, 0x56,0x15,0xe0,0xf,
+0x39,0x96,0xae,0xf, 0x3f,0xe2,0xe4,0x0, 0xc7,0xba,0xe0,0x61,0x17,0x40,0x3f,0x1f,
+0x8f,0xae,0xe2,0x0, 0xcf,0x8a,0x3f,0xe2,0xe4,0x0, 0xc7,0xac,0x1, 0x87,0x8f,0xe,
+0x27,0x5, 0xe0,0xe, 0x39,0x9f,0x16,0x81,0xae,0x8e,0x3f,0x93,0x8d,0xf, 0x56,0x8e,
+0x94,0x85,0x3d,0x7d,0x97,0x15,0xe0,0x1, 0x5, 0xaa,0x3d,0x74,0xe0,0x1, 0x5, 0xa7,
+0x8e,0xbf,0xe0,0x1, 0xb4,0xbf,0xe0,0x1, 0xb7,0x4f,0x2e,0xa5,0x96,0xdf,0x3c,0xad,
+0x96,0xef,0xe2,0x0, 0xcc,0x80,0x3f,0x2d,0xe0,0x1, 0xb4,0xdf,0x3e,0xe9,0xe0,0x1,
+0xb7,0x6f,0x3, 0x2, 0xc6,0x8f,0x3f,0xe2,0xe4,0x0, 0xc7,0xac,0x36,0x84,0x3f,0x93,
+0xe0,0x0, 0x26,0xec,0xe0,0x1, 0xb6,0xff,0xe2,0x0, 0xcf,0x0, 0x3e,0xee,0x3, 0x2,
+0xc6,0x8f,0x3f,0xe2,0x36,0x84,0xe4,0x0, 0xc7,0xac,0xe0,0x0, 0x26,0xf0,0x3f,0x93,
+0xe0,0x2, 0xb6,0x8f,0xe4,0x0, 0xc1,0x2c,0x57,0x13,0xe2,0x0, 0xcf,0x1, 0x1, 0x5,
+0xe0,0xf, 0x39,0x92,0x97,0xdf,0xb7,0x85,0x57,0x94,0xe2,0x0, 0xcf,0x81,0x1, 0x5,
+0xe0,0xf, 0x39,0x92,0x97,0xef,0xb7,0x95,0x39,0x13,0x8f,0xc2,0x2f,0x83,0x17,0x81,
+0xaf,0xc2,0x57,0x8f,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x77,0x8f,0xe7,0xfa,0x0, 0xdd,
+0xe2,0x0, 0xcd,0x81,0xe7,0xfd,0x5, 0xf2,0xc5,0xfe,0xad,0x8d,0xe7,0xfd,0x0, 0xee,
+0xe7,0xfd,0x20,0xf6,0xe0,0x4, 0x8e,0x7d,0x2e,0x16,0x96,0xcd,0xe2,0x0, 0xce,0x84,
+0x2, 0x92,0x3b,0xe0,0xe0,0x1, 0x93,0x47,0xc3,0x98,0x93,0x97,0xe0,0xd, 0x3c,0xa7,
+0xe1,0x2c,0x3c,0x76,0xe2,0x0, 0xce,0x0, 0x2, 0x5, 0x2e,0x5, 0xe2,0x3, 0xce,0x90,
+0x5, 0x82,0x17,0x9e,0xe2,0x0, 0xcd,0x9e,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,0x5, 0x85,
+0x3e,0x93,0x16,0x1e,0xe7,0xfe,0x0, 0xb7,0xe2,0x0, 0xcd,0x81,0xe7,0xfd,0x5, 0xc6,
+0x3e,0x93,0x0, 0xd3,0xe0,0x0, 0x17,0xe4,0xe7,0xfd,0x0, 0xc0,0x17,0xb2,0xe7,0xfd,
+0x0, 0xbd,0x17,0xa8,0xe7,0xfd,0x0, 0xba,0xe2,0x0, 0xcc,0x80,0x4, 0xd, 0x16,0x81,
+0xe0,0x1, 0xb6,0xff,0x3f,0xe2,0xe4,0x0, 0xc7,0xac,0x16,0x80,0x3f,0x93,0xe0,0x1,
+0xb6,0xdf,0xe7,0xff,0x0, 0x8b,0x16,0xff,0x0, 0xf4,0xe2,0x0, 0xcf,0x0, 0xe0,0xe,
+0x39,0x9f,0x4, 0xa, 0x16,0x81,0x3f,0x93,0xe0,0x2, 0xb6,0x8e,0x17,0x0, 0xe0,0x1,
+0xb7,0x6f,0xe7,0xff,0x0, 0x89,0x16,0xff,0x0, 0xf7,0x3e,0xe2,0xe4,0x0, 0xc6,0xac,
+0x3e,0x93,0xe0,0x1, 0x96,0x5d,0xe0,0x1, 0x90,0xfd,0xe0,0x1, 0x97,0xbd,0xe0,0x41,
+0x3b,0x21,0xe0,0x41,0x3c,0x2c,0xe0,0x1, 0x95,0xcd,0xe0,0xf, 0x3c,0xaf,0x3c,0x76,
+0x77,0x8e,0xe0,0xb, 0x3f,0x2b,0x73,0x13,0xe0,0x0, 0x4, 0x78,0xe0,0x0, 0x27,0xfa,
+0x3e,0x21,0x14,0x1, 0xe0,0x1, 0xb6,0x5d,0xe0,0x41,0x3e,0x2c,0xe0,0x4, 0xac,0x7d,
+0xe0,0x2c,0x3b,0x1c,0x3b,0x62,0xe4,0x0, 0xc3,0x2c,0x3b,0x13,0xe0,0x1, 0x97,0xe6,
+0xe0,0x2, 0x94,0x6, 0xe0,0x41,0x3b,0xaf,0xe0,0x41,0x3a,0x28,0x3b,0xf4,0xe0,0x0,
+0x4, 0x63,0xe0,0x0, 0x25,0xe5,0x3f,0xa8,0x13,0x81,0xe0,0x41,0x3e,0xaf,0xe0,0x2d,
+0x3a,0x1d,0xe0,0x1, 0xb7,0xe6,0xe0,0x4, 0xab,0xf6,0x3b,0x62,0xe4,0x0, 0xc3,0x2c,
+0x53,0x8e,0x3b,0x13,0x97,0xd6,0x3b,0x9f,0x97,0xe6,0x38,0x97,0x3d,0x9f,0x3c,0x1b,
+0x15,0x80,0xe0,0x21,0x38,0xeb,0xe0,0x28,0x3c,0x6b,0xe8,0x12,0x57,0xea,0xe8,0x12,
+0x55,0xe9,0xe1,0x21,0x38,0xdf,0xe1,0x28,0x3c,0x5b,0x26,0x5, 0xe0,0xc, 0x38,0xa9,
+0xe0,0x2, 0xb6,0x16,0x3e,0x62,0xe4,0x0, 0xc6,0x2c,0x26,0x87,0xe0,0xd, 0x39,0x9c,
+0xe0,0x6, 0x3c,0x2e,0xe0,0x2, 0xb3,0x2d,0x3e,0x13,0xe0,0x1, 0x96,0xdc,0x53,0x13,
+0xe0,0x41,0x3e,0xad,0x3b,0x7d,0xe0,0x1, 0xb4,0xbc,0xe0,0x1, 0xb7,0x4c,0x2, 0x2b,
+0xb0,0x85,0xe4,0x0, 0xc1,0x2c,0xe0,0xd, 0x39,0x92,0xe0,0x1, 0x97,0xed,0xe0,0x41,
+0x3f,0xaf,0x3a,0x7f,0x2, 0x2a,0xb4,0x15,0x39,0x13,0x17,0x81,0xaf,0xb2,0x17,0x80,
+0xaf,0xc2,0xe2,0x0, 0xcd,0x13,0x97,0x85,0xb7,0xd2,0x97,0x95,0xb7,0xe2,0x5, 0xa7,
+0x17,0x8a,0xaf,0x82,0xe7,0xfe,0x0, 0x8f,0x16,0x0, 0x38,0xec,0xe7,0xff,0x0, 0x94,
+0x56,0xe, 0x0, 0xfc,0x16,0x80,0x3c,0x6d,0xe7,0xff,0x0, 0xa9,0x3e,0xeb,0x3c,0x6b,
+0xe7,0xff,0x0, 0xa5,0xe0,0x2, 0x96,0x9c,0x3c,0x9d,0x16,0x80,0xe0,0x29,0x3c,0xed,
+0xe1,0x29,0x3c,0xdf,0xb4,0x85,0x0, 0xce,0xe0,0x2, 0x97,0xad,0x3f,0x1f,0x17,0x80,
+0xe0,0x2e,0x3f,0x6f,0xe1,0x2e,0x3f,0x5b,0xb7,0x15,0x0, 0xcf,0xe2,0x0, 0xcd,0x1,
+0xe7,0xfd,0x5, 0xe9,0xc5,0x7f,0xad,0x2, 0xe7,0xfd,0x0, 0xe5,0xe7,0xfd,0x2f,0x63,
+0x3c,0xe5,0x3c,0x62,0xdb,0xee,0xe7,0xfd,0x0, 0xde,0x3f,0xe1,0xe7,0xf9,0x0, 0xe1,
+0xe2,0x0, 0xcc,0x3, 0x1, 0x8f,0x8, 0xb1,0xef,0xff,0xd4,0x23,0xef,0xff,0xd3,0x93,
+0xdb,0xbd,0xe8,0x56,0x6c,0x23,0xdc,0x1b,0xef,0xfd,0xdd,0x7d,0x8, 0xa1,0xe7,0xf3,
+0x0, 0xbc,0x38,0x82,0x8, 0xb1,0xe8,0xb, 0x4e,0x69,0x17,0x80,0x17,0x3, 0xe0,0xff,
+0x16,0xff,0x3e,0x7f,0xc4,0x6, 0x1, 0xb7,0x15,0xa, 0x14,0x81,0xe0,0xfd,0x14,0x6,
+0xe0,0x1, 0xd8,0x97,0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0x10,0xe0,0x1, 0xd8,0x91,
+0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0x2e,0xe0,0x1, 0xd8,0x8b,0x15,0xa, 0x14,0x80,
+0xe0,0xfd,0x14,0x38,0xe0,0x1, 0xd8,0x85,0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0x1a,
+0xe0,0x1, 0xd8,0x7f,0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0x24,0xe0,0x1, 0xd8,0x79,
+0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0x42,0xe0,0x1, 0xd8,0x73,0xe0,0x1, 0x15,0xc,
+0xe0,0x1, 0x14,0xff,0xe0,0xfd,0x14,0x4e,0xe0,0x1, 0xd8,0x6b,0x17,0x80,0xe8,0x7e,
+0x77,0xe6,0x8, 0xe1,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe0,0x40,0xaf,0x68,0xe0,0x40,
+0xaf,0x58,0xe0,0x40,0xb6,0xa8,0xe0,0x40,0xb6,0x98,0xe7,0xff,0x0, 0xbc,0x3c,0x79,
+0x3f,0xea,0xe0,0x0, 0x1, 0x4c,0xe2,0x0, 0xcc,0x1, 0x1, 0xba,0x17,0x7d,0x3f,0x59,
+0xe0,0x0, 0x2f,0x45,0xe8,0x31,0x4f,0x72,0xc7,0x1, 0xe8,0x31,0x6f,0x72,0x26,0x87,
+0xe8,0x7e,0x57,0x66,0x34,0x3a,0x3c,0x4e,0xe8,0x7e,0x74,0x66,0xe4,0x0, 0xc7,0x86,
+0xe0,0x52,0x15,0x38,0xe0,0xd, 0x3d,0x1f,0x3c,0x6d,0x3f,0x69,0xe0,0x3, 0xc4,0x25,
+0xe2,0x1, 0xc7,0x7f,0xaf,0x8, 0x3c,0x6d,0xe0,0x3, 0xc4,0x24,0xe2,0xff,0xcd,0xff,
+0xaf,0x8, 0x1, 0x3, 0xe0,0x1a,0xb5,0xbd,0xe2,0xff,0xce,0x7f,0x1, 0x5, 0xe0,0xe,
+0x3d,0x1f,0xe0,0x1a,0xb6,0x4e,0xe2,0x0, 0xcc,0x81,0x1, 0x88,0x3d,0x1f,0xe0,0xff,
+0x17,0xff,0xe0,0x1a,0xb7,0xba,0xe0,0x1a,0xb7,0xca,0x14,0x1, 0x0, 0x90,0xe2,0x0,
+0xcc,0x2, 0x1, 0x8c,0x24,0xd4,0xe2,0x0, 0xcc,0x81,0x1, 0x88,0xe8,0x31,0x4f,0x72,
+0x27,0x4e,0xc7,0x7f,0xe8,0x31,0x6f,0x72,0x0, 0xca,0x14,0x0, 0x38,0x82,0xe0,0xfd,
+0x17,0x86,0x3c,0x1f,0x17,0x81,0xe0,0x6, 0xaf,0xa8,0x38,0x82,0xe0,0xfd,0x17,0x86,
+0x3c,0x1f,0xe0,0x5, 0x8c,0x8, 0x38,0x82,0x8, 0xb5,0x8e,0x78,0xe0,0x1, 0x8c,0x8,
+0x16,0x80,0x10,0x83,0x11,0x4, 0x11,0x85,0xe0,0x52,0x12,0x38,0x3e,0xfa,0x1, 0x83,
+0x14,0x0, 0xa, 0xe1,0x3e,0xfb,0x1, 0x22,0x8f,0x79,0xe0,0x1, 0x8f,0x89,0x3f,0x2c,
+0xe0,0x41,0x3f,0x2e,0x3f,0xa8,0xe2,0x1, 0xc7,0x7f,0xe0,0x41,0x3f,0xaf,0xe2,0x1,
+0xc7,0xff,0xe1,0x25,0x39,0x2e,0xe1,0x2f,0x38,0xaf,0x22,0x82,0x2f,0x94,0xe1,0x2e,
+0x39,0xae,0x27,0xc, 0x27,0x8b,0x8f,0xc9,0xe4,0x0, 0xc7,0x86,0x3f,0x94,0xe0,0x3,
+0xc7,0xa5,0x8f,0x8f,0xe2,0x0, 0xcf,0x83,0x1, 0x6, 0xc6,0x81,0xe2,0x1, 0xc6,0xff,
+0xc4,0x8e,0x0, 0xd5,0x14,0x1, 0x0, 0xd6,0x8, 0xb7,0xc0,0x7a,0xe8,0x25,0x4f,0x97,
+0xe0,0x0, 0x27,0xd3,0xe8,0x25,0x4f,0xc4,0xe0,0x0, 0x27,0xcf,0xe0,0xfd,0x13,0x86,
+0x3b,0x69,0x39,0xe8,0x3a,0xe9,0xc3,0x7f,0xc1,0x82,0xc2,0x89,0x3a,0x67,0x39,0x67,
+0xe0,0x52,0x17,0x38,0x16,0x81,0xe0,0x80,0x8e,0x16,0xe0,0xf, 0x39,0x27,0x26,0xd,
+0x17,0x80,0xe0,0x7, 0xaf,0xc2,0x3b,0x75,0xc1,0x1, 0xc2,0xe, 0xc1,0x86,0x1, 0xf4,
+0xe8,0x56,0x4c,0x18,0xc0,0x6, 0xb, 0xe1,0xe0,0x7, 0x8e,0x42,0x26,0x75,0xe8,0x56,
+0x4c,0x18,0x3c,0xe4,0x3e,0x68,0xe4,0x0, 0xc4,0xe, 0xc6,0x1, 0x3c,0x1e,0x15,0xe,
+0xe0,0x1, 0xc4,0xd4,0xe8,0x56,0x6e,0x18,0x76,0x81,0x77,0x2, 0x77,0x83,0xe0,0x1,
+0xd7,0x3c,0xe0,0xd, 0x96,0x24,0x56,0x81,0xb6,0x3, 0xe0,0xd, 0x96,0x34,0xb6,0x13,
+0xae,0x86,0x8e,0x2, 0xe0,0x2, 0xae,0x42,0xe0,0x7, 0x8e,0x42,0xc6,0x7f,0xe0,0x7,
+0xae,0x42,0x16,0x1, 0x57,0x83,0x57,0x2, 0x36,0x3f,0xe8,0x7e,0x57,0xe6,0x3f,0xcc,
+0xe8,0x7e,0x77,0xe6,0x0, 0xc9,0x15,0xa, 0x14,0x80,0xe0,0xfd,0x14,0x42,0xe0,0x1,
+0xd7,0x68,0x0, 0xc7,0x8, 0xb7,0xe1,0xfe,0xc0,0x46,0x3a,0xe8,0x3c,0x60,0x15,0xa,
+0x74,0x86,0xc4,0x1c,0x14,0x80,0xe0,0x1, 0xd7,0x5c,0x3c,0x60,0x15,0xa, 0x14,0x80,
+0xc4,0x26,0xe0,0x1, 0xd7,0x56,0x3c,0x60,0xe0,0x1, 0x15,0xc, 0xe0,0x1, 0x14,0xff,
+0xc4,0x30,0xe0,0x1, 0xd7,0x4e,0xe8,0x12,0x57,0xea,0x11,0x0, 0xc7,0xe2,0x77,0x84,
+0xe0,0xfc,0x13,0xfc,0xe8,0x12,0x57,0xe9,0xc7,0xe2,0x77,0x85,0xe8,0xb, 0x4a,0x69,
+0x3a,0x72,0xe0,0x0, 0x2, 0xc2,0x11,0x0, 0xe0,0x52,0x17,0x38,0x39,0xe2,0x3b,0x6e,
+0xe8,0x56,0x4f,0x98,0x3f,0xf3,0xe0,0x2, 0x2, 0xb3,0x3f,0x60,0x13,0x80,0xc7,0x26,
+0x39,0xe7,0xe0,0xfd,0x16,0xce,0x3d,0xe7,0xe2,0x1, 0xc5,0xff,0x3a,0x7b,0xe0,0x2,
+0x2, 0xc8,0x3f,0xe2,0x17,0x0, 0x3a,0x7e,0xe0,0x2, 0x1, 0xfd,0x3a,0xe0,0xc2,0xb0,
+0x12,0x0, 0xe0,0xfd,0x17,0x86,0x13,0x8e,0x3c,0x64,0xe0,0x0, 0xc4,0x48,0x3c,0xe5,
+0x3c,0x1f,0x3d,0x67,0x77,0x82,0xe0,0x1, 0xd6,0xc8,0x3c,0xe5,0xe0,0x8, 0x3b,0x14,
+0x3d,0x67,0xe0,0x1, 0xd6,0xc2,0xc2,0xe, 0xe2,0x1, 0xca,0xc, 0xc2,0x8e,0x57,0x82,
+0x1, 0xec,0xe8,0x31,0x4f,0xf2,0xe8,0x56,0x69,0x18,0x39,0x9f,0xe8,0x31,0x69,0xf2,
+0xe0,0x1, 0xc0,0x3a,0xb, 0xe1,0x57,0x6, 0x39,0xe2,0x3f,0x12,0x8f,0xe, 0xe4,0x0,
+0xc1,0x86,0xe2,0x0, 0xcf,0x1, 0x39,0x95,0x8f,0x93,0xe0,0x1, 0x1, 0x96,0xe2,0x0,
+0xcf,0x81,0x1, 0x83,0x17,0x83,0xaf,0x93,0x8f,0x93,0xe2,0x0, 0xcf,0x83,0xe0,0x1,
+0x1, 0x85,0xe0,0xfd,0x12,0x6, 0xe0,0xf, 0x3a,0x12,0xe0,0x2, 0x8f,0x4f,0x8f,0x8f,
+0x3f,0xfe,0xe0,0x0, 0x5, 0xf8,0xe8,0x25,0x4f,0xc2,0xe2,0x0, 0xcf,0x81,0xe0,0x0,
+0x1, 0xf2,0xe8,0x56,0x4d,0x18,0xe0,0x52,0x15,0xb8,0x16,0x0, 0x3f,0xec,0xe2,0x1,
+0xc7,0xff,0x3f,0xfa,0x3, 0x9e,0x8c,0xcb,0x3f,0xec,0x39,0x79,0xc6,0x1, 0xc5,0x8e,
+0x1, 0xf6,0xe4,0x0, 0xc7,0x8e,0xe0,0x52,0x16,0x38,0x3f,0x9c,0x56,0x85,0x96,0x1f,
+0x3e,0xfc,0xe0,0x0, 0x4, 0xd8,0xe2,0x0, 0xce,0x1d,0xe0,0x0, 0x5, 0xd4,0x56,0x4,
+0x97,0x8f,0x3e,0x7f,0xe0,0x0, 0x4, 0xcf,0xe2,0x0, 0xcf,0x9d,0xe0,0x0, 0x5, 0xcb,
+0x3f,0xe0,0x3a,0x12,0xc7,0x1, 0xe0,0x1, 0xc7,0xba,0xe0,0x2, 0xaf,0x44,0x3f,0x92,
+0x17,0x1, 0xe0,0x53,0xaf,0x6f,0x17,0x83,0x13,0x0, 0xc2,0x3c,0xaf,0x83,0xe8,0x56,
+0x4e,0x18,0x3e,0x76,0x2, 0x8b,0x8f,0x83,0xe0,0xe, 0x3b,0x92,0xaf,0x93,0xc1,0x1,
+0xe2,0x1, 0xc1,0x7f,0xaf,0x8e,0xe7,0xfe,0x0, 0xd3,0x3f,0x66,0xe4,0x0, 0xc7,0xe,
+0xe0,0x52,0x16,0xb8,0x3f,0x1d,0x8d,0xce,0x3d,0xf2,0x1, 0x9e,0x15,0xe, 0x3c,0x6a,
+0x3c,0xee,0x3c,0x10,0x77,0x1, 0x76,0x3, 0xe0,0x1, 0xd6,0x37,0x56,0x3, 0x3c,0x60,
+0x3d,0xe6,0xe0,0x52,0x14,0xb8,0xc4,0xe, 0x3d,0x6c,0xde,0x7f,0x57,0x1, 0x2c,0xc,
+0x15,0xe, 0x3c,0xee,0x3f,0x6a,0x3f,0x32,0xe0,0xfe,0x14,0x5a,0x16,0x2, 0x3c,0x1e,
+0xae,0x4, 0xe0,0x1, 0xd6,0x22,0x3f,0xe6,0xc7,0x81,0x3b,0x6f,0xe2,0x1, 0xc3,0x7f,
+0x0, 0xc7,0x17,0x80,0xaf,0x83,0x0, 0xc8,0x2f,0x83,0x17,0x82,0x0, 0xfc,0xe2,0x0,
+0xcf,0x82,0x1, 0xc2,0x0, 0xf8,0x3f,0x6f,0xe2,0x1, 0xc7,0x7d,0xe0,0xfd,0x17,0x86,
+0xe0,0x0, 0x2f,0x4a,0xe0,0xe, 0x3b,0x92,0x8f,0xe, 0x2f,0x6, 0xe0,0xe, 0x3f,0x92,
+0x16,0x1, 0xe0,0x1, 0xae,0x2e,0xe0,0xe, 0x3f,0x92,0xe0,0x3, 0x8e,0x6e,0xe0,0x1,
+0x8d,0xae,0x3d,0xfc,0x5, 0xa3,0xe0,0x6, 0x8d,0xae,0x2d,0xa0,0xc6,0x1, 0xe0,0x3,
+0xae,0x6e,0x3e,0x60,0x17,0x82,0xe0,0x1, 0xc6,0x3a,0xaf,0x83,0x3e,0x12,0x17,0x81,
+0xe0,0x52,0xaf,0xcc,0xe0,0x5, 0xaf,0x8e,0xe0,0xf, 0x3b,0x92,0x8f,0x8f,0xe0,0x1,
+0xad,0xae,0xe7,0xff,0x2f,0x92,0x17,0x81,0xe0,0xe, 0x37,0xb2,0xe8,0x7e,0x57,0xe6,
+0x3f,0xce,0xe8,0x7e,0x77,0xe6,0xe7,0xff,0x0, 0x88,0x17,0x1, 0xaf,0x3, 0x3f,0x92,
+0x17,0x0, 0xe0,0x1, 0xaf,0x2f,0xe0,0x2, 0xaf,0x4f,0xe0,0x3, 0xaf,0x6f,0xe0,0x5,
+0xaf,0xf, 0xe0,0x6, 0xaf,0x2f,0x17,0x81,0xe8,0x7e,0x57,0x66,0x37,0xb2,0xe3,0xf,
+0x3f,0x5f,0x0, 0xe8,0x17,0x3, 0xaf,0x3, 0x3f,0x92,0x17,0x0, 0xe0,0x2, 0xaf,0x4f,
+0xe0,0x3, 0xaf,0x6f,0xe0,0x5, 0xaf,0xf, 0xe7,0xfe,0x0, 0xe7,0x3c,0xe3,0xe4,0x0,
+0xc4,0x8e,0x3e,0x60,0x3c,0x9e,0x8f,0xc9,0xe0,0x1, 0xc6,0x3a,0x3f,0x9c,0xe0,0x53,
+0x8f,0xef,0x2f,0x91,0x3c,0x62,0xe4,0x0, 0xc4,0xe, 0x3e,0xe0,0xc6,0xb0,0x3b,0xe2,
+0x15,0xe, 0x3c,0x1d,0x77,0x1, 0xc3,0x81,0xe0,0x1, 0xd5,0x9f,0xe2,0x1, 0xc3,0xff,
+0x57,0x1, 0x39,0x67,0xc1,0x81,0xe2,0x1, 0xc1,0xff,0xe7,0xfd,0x0, 0xab,0xe1,0x80,
+0x8f,0x9e,0x27,0xaf,0xc1,0x81,0xe0,0xfd,0x17,0x86,0xe2,0x1, 0xc1,0xff,0x14,0x80,
+0x3e,0x6f,0xe0,0x9, 0x8d,0x4f,0x3d,0x7b,0x1, 0xa7,0xe4,0x0, 0xc4,0x8e,0x3c,0x62,
+0xe0,0xf, 0x3e,0x19,0x3e,0x67,0xe4,0x0, 0xc6,0x6, 0xe0,0x4, 0x95,0xcf,0x3e,0x15,
+0xb5,0x9c,0xe4,0x0, 0xc4,0xe, 0xe0,0x4, 0x97,0xdf,0x3c,0x9d,0xb7,0xac,0x3f,0xe2,
+0x3e,0x60,0xc6,0x30,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x15,0xe, 0x3c,0x1c,0x76,0x83,
+0x77,0x1, 0x77,0x82,0xe0,0x1, 0xd5,0x69,0x57,0x82,0x57,0x1, 0x56,0x83,0x39,0x6f,
+0xc3,0x81,0xe7,0xfd,0x0, 0x82,0xc4,0x81,0xe2,0x0, 0xcc,0x8a,0xc7,0x8e,0x1, 0xd2,
+0x0, 0xf8,0x8e,0x85,0xe2,0x0, 0xce,0x81,0x1, 0x8b,0x3e,0x9f,0x3e,0x60,0xe4,0x0,
+0xc7,0x8e,0xc6,0x30,0x3f,0x9c,0xaf,0x4f,0x3f,0xed,0xe2,0x1, 0xc7,0xff,0xc7,0x1,
+0xe2,0x1, 0xc7,0x7f,0xc2,0x86,0xe7,0xfc,0x0, 0xf0,0x8, 0xb7,0xc0,0x46,0x3d,0x60,
+0xe0,0x52,0x13,0x38,0xc5,0x24,0x3d,0xe0,0x3e,0x60,0x16,0x80,0xe8,0xb, 0x49,0x69,
+0xc5,0x9a,0xc6,0x10,0x3f,0x6a,0x3f,0xe6,0x3c,0x66,0x14,0xff,0x38,0xed,0x39,0x7d,
+0xc7,0x8e,0xe0,0x1, 0x1, 0x80,0xe8,0x56,0x4f,0x18,0xe8,0x31,0x4f,0xf2,0xe0,0x1,
+0x2f,0x14,0x27,0x8d,0xe0,0x31,0x15,0x5e,0xe0,0x31,0x15,0xca,0xe0,0x52,0x17,0xb8,
+0xe0,0xff,0x16,0x7f,0x3e,0xfe,0xc7,0x86,0xe0,0x0, 0x1, 0xfa,0xe8,0x7e,0x57,0xe6,
+0xe0,0x4, 0x27,0x94,0xe0,0x52,0x11,0xb8,0x3a,0xe0,0xc2,0x90,0x13,0x80,0x3a,0x63,
+0xe1,0x80,0x8f,0x95,0x3e,0x67,0xe2,0x1, 0xc6,0x7f,0xe0,0x4, 0x27,0x81,0xe8,0x7e,
+0x55,0x66,0x17,0x81,0x37,0xb7,0x3f,0xda,0xe0,0x3, 0x27,0xfa,0x3e,0xe0,0x3c,0xe3,
+0xc6,0x90,0x14,0x0, 0xe0,0x3, 0xc4,0xa5,0x10,0xfd,0x3d,0xed,0x3f,0x68,0xe2,0x1,
+0xc7,0x7f,0x8f,0x8b,0x77,0x2, 0xc6,0x81,0x2f,0x8b,0x11,0x1, 0x31,0x38,0x39,0x5a,
+0x29,0x7, 0x8f,0x89,0x3f,0xd1,0xe2,0x0, 0xcf,0x81,0xe0,0x3, 0x1, 0x37,0xc4,0x1,
+0xe2,0x0, 0xcc,0xa, 0x1, 0xeb,0xe8,0x56,0x49,0x18,0x3f,0xe6,0x16,0x80,0x3c,0x6d,
+0xe2,0x1, 0xc6,0xff,0x3e,0xf2,0x3, 0x8d,0x8d,0xcf,0x3e,0xe8,0x3d,0xfc,0xc6,0x81,
+0xc7,0x8e,0x1, 0xf6,0x3f,0xe8,0xe4,0x0, 0xc7,0x8e,0x16,0xff,0x3f,0x94,0xae,0xcf,
+0xe4,0x0, 0xc4,0xe, 0xc1,0x7f,0xe0,0xf, 0x3a,0x18,0x3c,0x60,0x3c,0xef,0xe2,0x1,
+0xc1,0x7f,0x15,0xe, 0xc4,0x2e,0x77,0x81,0xe8,0x56,0x69,0x18,0xe0,0x1, 0xd4,0xc5,
+0xe4,0x0, 0xc1,0xe, 0x57,0x81,0x39,0x14,0x3c,0xe2,0x15,0xe, 0x3c,0x6f,0xe0,0x1,
+0xd4,0xbc,0x3c,0xe0,0x15,0xe, 0xc4,0xae,0x3c,0x62,0xe0,0x1, 0xd4,0xb6,0xe0,0x3,
+0x0, 0x9e,0xc6,0x81,0xe1,0x80,0xac,0x9e,0xe2,0x1, 0xc6,0xff,0xe1,0x80,0xa8,0x9c,
+0xe1,0x80,0xa8,0x9b,0xe0,0x41,0xac,0xaf,0xe7,0xfe,0x0, 0xf3,0xc7,0x1, 0xe1,0x80,
+0xb6,0x1a,0xe2,0x1, 0xc7,0x7f,0xe1,0x80,0xb6,0x1b,0xe0,0x1a,0xb6,0xf, 0xe0,0x1a,
+0xb6,0x1f,0xe7,0xfe,0x0, 0xf9,0x2f,0x9e,0xe0,0x55,0x16,0x5c,0x15,0x81,0xe8,0x56,
+0x4f,0x18,0x3f,0x7f,0xe7,0xfe,0x5, 0xf4,0x3f,0x6f,0xe4,0x0, 0xc7,0xe, 0x3e,0xef,
+0x3f,0x18,0xe4,0x0, 0xc6,0x86,0x95,0xe, 0x3e,0x9c,0xb5,0x1d,0x95,0x1e,0xb5,0x2d,
+0x3e,0xe0,0xc6,0x90,0x3e,0x9f,0xaf,0xce,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xad,0x8d,
+0x0, 0xe7,0xe0,0xe5,0x16,0x62,0x15,0x80,0xe0,0xff,0x14,0xff,0x3e,0xfb,0xc6,0x4,
+0xe0,0x0, 0x1, 0xed,0x3f,0x7f,0xe0,0x0, 0x3, 0xf7,0x14,0x81,0xe1,0x29,0x3f,0x99,
+0xe8,0x12,0x54,0x6a,0xe8,0x12,0x56,0x69,0x15,0x80,0xe0,0x91,0x12,0x18,0xe0,0x31,
+0x13,0xde,0x74,0x2, 0x76,0x3, 0x3f,0x6b,0xe2,0x1, 0xc7,0x7f,0x3f,0xfe,0xe0,0x1,
+0x2, 0xbd,0xe0,0x52,0x17,0x38,0xe8,0xb, 0x4d,0xe9,0xe0,0x31,0x16,0xde,0xe0,0x31,
+0x16,0x4a,0x11,0x0, 0x39,0xee,0x3d,0xf2,0xc7,0x6, 0xe0,0x1, 0x1, 0xb3,0x16,0x80,
+0x14,0x81,0x39,0x7d,0xe0,0x1, 0x1, 0xbb,0xe0,0xe6,0x16,0x8a,0xe8,0x56,0x4d,0x18,
+0xe0,0x52,0x16,0x38,0x17,0x0, 0x3d,0xed,0x3d,0x7e,0xc6,0xe, 0xc6,0x84,0xe0,0x1,
+0x1, 0xcd,0xe0,0xe5,0x17,0x62,0x37,0x41,0x77,0x5, 0xe0,0xe, 0x35,0xc1,0x77,0x6,
+0x3c,0x60,0xe0,0xe6,0x17,0x32,0x37,0x41,0xc4,0x8, 0x6d,0x9, 0x77,0x7, 0x6f,0x88,
+0xe0,0x0, 0xda,0xdc,0x17,0x0, 0x15,0x81,0xe0,0x55,0x15,0x5c,0xe8,0x56,0x4f,0x98,
+0x3f,0xfe,0xe0,0x1, 0x5, 0xe3,0xe0,0xe6,0x16,0x32,0x17,0x80,0x3e,0xef,0xe2,0x1,
+0xc6,0xff,0x39,0x7d,0x5, 0x8f,0xe1,0x80,0x94,0x9c,0x3e,0xef,0x3f,0x79,0xc7,0x81,
+0x1, 0xf6,0x3f,0xe0,0xc7,0xa4,0x3f,0x9d,0x8f,0x8f,0xe2,0x1, 0xcf,0xff,0xe0,0x1,
+0x1, 0xaa,0xc7,0x1, 0xe2,0x1, 0xc7,0x7f,0x0, 0xe2,0xc5,0x81,0xe2,0x1, 0xc5,0xff,
+0xe0,0x40,0xb4,0xac,0xe0,0x40,0xb4,0x9c,0xe0,0x2, 0xb4,0xac,0xe0,0x2, 0xb4,0xbc,
+0xe7,0xff,0x0, 0x86,0x14,0x80,0xe7,0xff,0x0, 0x8d,0xe0,0xe, 0x35,0xa2,0x3f,0x14,
+0x38,0xee,0xe0,0x54,0xc0,0xca,0xe0,0x54,0xc7,0x4c,0xb4,0x1, 0xb1,0xe, 0xe0,0x0,
+0x0, 0xc1,0xc6,0x1, 0xc7,0x6, 0x3a,0xec,0xe2,0x1, 0xc2,0xff,0x3e,0xf5,0xe0,0x0,
+0x5, 0xc2,0xe0,0x1a,0x94,0x3e,0x38,0xee,0xe2,0xff,0xcc,0x7f,0xe0,0x3, 0xc0,0xa4,
+0x1, 0x71,0x39,0x60,0xc1,0x1a,0x39,0x1c,0x89,0x82,0x29,0xec,0xe2,0x0, 0xcc,0x81,
+0x91,0x21,0x1, 0xdc,0xe0,0x1, 0x36,0x21,0xe0,0xe, 0x3b,0x91,0x97,0xe, 0xe2,0xff,
+0xcf,0x7f,0x1, 0x54,0xe0,0xe, 0x3c,0x2e,0x3f,0x18,0xe0,0x31,0x14,0x4a,0x38,0x98,
+0x94,0x1, 0xe0,0x2e,0x3f,0x63,0xe0,0x8, 0x39,0x28,0x39,0x18,0x54,0x2, 0xe0,0x23,
+0x39,0x63,0xe1,0x2e,0x3f,0x58,0x54,0x3, 0xe0,0x54,0x10,0xca,0xe1,0x23,0x39,0xd8,
+0xe0,0x8, 0x35,0xa2,0x3c,0x14,0x38,0x98,0xb7,0x1, 0xe0,0x54,0xc4,0x4c,0xb1,0x88,
+0x3f,0x60,0xc7,0x24,0x3f,0x1b,0xaa,0x8e,0x3f,0x60,0xc7,0x1a,0x14,0x1, 0x3e,0x1e,
+0xac,0xc, 0xc5,0x81,0xe7,0xfe,0x0, 0xc1,0x3f,0x66,0x16,0x0, 0xe7,0xff,0x0, 0xb5,
+0xe0,0x1a,0x94,0x8e,0xc1,0x1, 0xe1,0x80,0xb4,0x9d,0xe2,0x1, 0xc1,0x7f,0xe0,0x1a,
+0x94,0x9e,0xe1,0x80,0xb4,0x9c,0xe7,0xfe,0x0, 0xc0,0x8f,0xa, 0xe2,0x1, 0xcf,0x7f,
+0x1, 0x8f,0x3d,0xe0,0xc5,0x9a,0x17,0x0, 0xe1,0x80,0x8e,0x1b,0x3c,0x6e,0xe2,0x1,
+0xc4,0x7f,0x2e,0xc, 0x3e,0x60,0xc6,0x1a,0x3f,0x1c,0xac,0xa, 0xac,0x8e,0xc6,0x81,
+0xe2,0x1, 0xc6,0xff,0xc5,0x1, 0xe7,0xfe,0x0, 0xae,0xc7,0x1, 0x3e,0x6e,0xe2,0x1,
+0xc6,0x7f,0x39,0x7c,0x2, 0xea,0x0, 0xf4,0xe0,0x40,0x94,0xfc,0xc7,0x1, 0xe0,0x40,
+0xb4,0xad,0xe2,0x1, 0xc7,0x7f,0xe0,0x40,0x94,0xec,0xe0,0x40,0xb4,0x9d,0xe7,0xfe,
+0x0, 0xa5,0x3e,0xee,0xe4,0x0, 0xc6,0x8e,0x3e,0x60,0xc6,0x10,0x3e,0x1f,0x3e,0x93,
+0xaf,0xcd,0xe4,0x0, 0xc7,0x86,0xad,0x8c,0x3f,0x9a,0xe0,0xd, 0xe, 0xd, 0xb6,0x1f,
+0xb6,0xaf,0xe7,0xfe,0x0, 0xc8,0xe1,0x80,0x8d,0x9d,0xe2,0x0, 0xcd,0x81,0x1, 0x5,
+0xe0,0x1a,0xb6,0x3e,0xe0,0x1a,0xb6,0x4e,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xc7,0x6,
+0x39,0x7f,0x1, 0xf2,0xe7,0xfc,0x0, 0xa4,0x3e,0xe0,0xe0,0x52,0x17,0x38,0xc6,0x90,
+0x17,0x80,0xe0,0xff,0x16,0x7f,0x0, 0xf5,0xe4,0x0, 0xc4,0x6, 0xaf,0x8b,0x3c,0xe3,
+0xe0,0x55,0x17,0xdc,0x15,0x6, 0xe0,0x3, 0xc4,0xa4,0x3c,0x1f,0x76,0x1, 0xe0,0x1,
+0xd3,0x2c,0xe8,0x56,0x4d,0x98,0x56,0x1, 0x3e,0xe6,0x3f,0xe2,0xe2,0x1, 0xc7,0xff,
+0x3d,0xff,0x5, 0x8c,0x8d,0x4d,0x3f,0xe2,0x3d,0x7c,0xc1,0x1, 0xc6,0x8e,0x1, 0xf6,
+0xe4,0x0, 0xc7,0x8e,0x56,0x2, 0x3f,0x94,0xae,0x4f,0xe0,0xff,0x17,0x7f,0x17,0x80,
+0xe0,0x1a,0xb7,0x33,0xe0,0x1a,0xb7,0x43,0xe0,0x40,0xaf,0x95,0xc3,0x81,0xe2,0x0,
+0xcb,0x8a,0xc1,0x86,0xe7,0xfb,0x1, 0xf6,0x3c,0xe0,0xc4,0x90,0xe0,0x55,0x14,0x5c,
+0xdb,0x8c,0x3c,0xe0,0xe8,0x31,0x6c,0x72,0xc4,0x90,0xe0,0x55,0x14,0x5c,0xdb,0xe3,
+0xc0,0x3a,0xb, 0xe1,0x8, 0xb3,0x3f,0x83,0x14,0x0, 0xef,0xfb,0xda,0xb7,0xef,0xfb,
+0xda,0xd1,0xef,0xfb,0xdc,0xdd,0xef,0xfb,0xd0,0x55,0xef,0xfb,0xda,0xea,0x17,0x80,
+0xe8,0x18,0x77,0xfb,0xe0,0x13,0x17,0xc4,0xe8,0x18,0x77,0xfa,0xef,0xfb,0xdb,0xee,
+0xef,0xfb,0xdb,0x5d,0xef,0xfb,0xdb,0x3a,0xef,0xfe,0xd4,0x10,0xef,0xfb,0xdb,0xd,
+0xef,0xfb,0xdc,0xe0,0xef,0xfb,0xdb,0x7e,0xef,0xfb,0xdb,0xa5,0xef,0xfb,0xdf,0xbb,
+0x3b,0x0, 0xe0,0x0, 0x17,0x80,0xe0,0xe, 0x89,0xf, 0xe0,0xe, 0x89,0x9f,0x3c,0x62,
+0x3c,0xe3,0xe7,0x2b,0x15,0x3d,0xe0,0x0, 0xd8,0x1a,0xe7,0x0, 0x15,0x39,0x3c,0xe3,
+0x3c,0x62,0x9, 0xa1,0xe0,0x10,0x0, 0xb8,0x17,0x80,0xe8,0x18,0x77,0xfb,0xe8,0x18,
+0x74,0x7a,0x38,0x82,0xe8,0x18,0x57,0xfb,0xe8,0x18,0x57,0x7a,0xc7,0x81,0x3f,0xfe,
+0xe8,0x18,0x77,0xfb,0x3, 0x83,0xe7,0x76,0x0, 0xa2,0x38,0x82,0x38,0x82,0x9, 0x33,
+0xe0,0x61,0x3f,0x82,0xe7,0xfd,0x17,0x7f,0x3f,0xde,0xe0,0x61,0x3f,0x92,0xe8,0x12,
+0x55,0x34,0xe8,0x12,0x54,0xba,0x97,0x8a,0x17,0x1, 0xe0,0x1, 0xcf,0x80,0xb7,0x8a,
+0x16,0x0, 0xe0,0x1, 0x97,0xa9,0x3e,0xe8,0xe7,0x3, 0xcf,0x9e,0xe0,0x1, 0xb7,0xa9,
+0x3e,0x9c,0x17,0xa, 0xe8,0x12,0x55,0xae,0x3f,0xec,0xe0,0x2c,0x3e,0x7e,0x3f,0x6c,
+0xb7,0x2b,0x11,0xa, 0xb6,0xbb,0x3e,0xe8,0xc6,0x81,0x3e,0x9f,0xe0,0x2c,0x3f,0xf2,
+0x3f,0x6c,0xb7,0x4b,0xb6,0xdb,0x3e,0xe8,0xc6,0x82,0x3e,0x9f,0xe0,0x2c,0x3f,0xf2,
+0xb6,0x6b,0xb6,0xfb,0xe0,0x1, 0x97,0x29,0xe7,0x3, 0xcf,0x1f,0xe0,0x1, 0xb7,0x29,
+0xe7,0xfe,0x17,0x7f,0x97,0x8a,0x3f,0xde,0xb7,0x8a,0xe0,0x61,0x3f,0x82,0xe0,0x2,
+0xcf,0x80,0xe0,0x61,0x3f,0x92,0x9, 0xe2,0xe9,0x1, 0x4f,0xb2,0xc7,0x81,0xe2,0x1,
+0xc7,0xff,0xe9,0x1, 0x6f,0xb2,0xe8,0xf4,0x6f,0x97,0x38,0x82,0xe9,0x1, 0x4f,0xb3,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0xe9,0x1, 0x6f,0xb3,0xe8,0xf4,0x6f,0x98,0x38,0x82,
+0x8f,0x89,0x8f,0x8, 0x2f,0x83,0xaf,0x9, 0x38,0x82,0xe0,0xd, 0x3f,0x2f,0xe0,0x41,
+0x3e,0xad,0x3e,0xfb,0x5, 0x5, 0x3f,0xfe,0x3, 0x86,0x3f,0x9a,0xaf,0x89,0x8f,0x89,
+0xaf,0x88,0x0, 0xf3,0x3f,0xaa,0x0, 0xfb,0x8, 0xb7,0xc0,0x7c,0x3b,0x6a,0xe4,0x0,
+0xc3,0xe, 0xe0,0x52,0x11,0xb8,0xe0,0xf, 0x39,0x96,0xe0,0x12,0x8e,0x9f,0xe0,0x12,
+0x89,0xf, 0x6e,0x84,0x3f,0x68,0xe0,0x12,0x8e,0xaf,0xe8,0x52,0x4f,0x9a,0x36,0xa3,
+0x3f,0xf2,0x6e,0x85,0x3b,0xe9,0x5, 0xa9,0xe8,0x56,0x4f,0x9f,0xe1,0x2, 0x12,0xc0,
+0xe1,0x0, 0x12,0x4e,0x2f,0xb7,0x3c,0x60,0x15,0x8f,0x15,0x1, 0xe0,0x9, 0x3a,0x92,
+0xc4,0x4, 0x77,0x1, 0xdf,0xc6,0x3c,0x60,0x15,0x90,0x15,0x8, 0xe0,0x9, 0x3a,0x12,
+0xc4,0x5, 0xdf,0xbf,0x57,0x1, 0x3f,0xe2,0xe4,0x0, 0xc7,0x86,0x3f,0x93,0xe0,0x3,
+0xc7,0xa4,0x8f,0x8f,0xe2,0x0, 0xcf,0x81,0x1, 0x88,0x17,0x80,0x3a,0x92,0x39,0x14,
+0x6f,0x84,0x6f,0x85,0xaf,0x82,0xaf,0x85,0xe8,0x52,0x4f,0xae,0xe2,0x1, 0xcf,0xff,
+0x1, 0x8b,0x17,0x80,0x39,0x96,0x6f,0x84,0xe0,0x12,0x8f,0x83,0xe2,0x1, 0xcf,0xff,
+0x1, 0x3, 0x17,0x81,0x6f,0x84,0x4f,0x84,0xaf,0x8e,0x4f,0x85,0xaf,0x87,0xc0,0x4,
+0xb, 0xe1,0xe0,0xf, 0x3a,0x92,0x8f,0x8f,0x6f,0x84,0xe0,0xf, 0x3a,0x12,0x8f,0x8f,
+0x6f,0x85,0x0, 0xd2,0x8, 0xb7,0xc0,0x76,0x17,0x80,0x6f,0x8a,0x6f,0x8b,0xe8,0xf4,
+0x4f,0xd8,0xe0,0x0, 0x2f,0xf5,0xe8,0x31,0x6f,0xf8,0xe8,0xb, 0x4e,0x69,0xe8,0x56,
+0x4f,0xa1,0x6e,0x9, 0x2f,0x88,0xe8,0x56,0x4f,0x9d,0x2f,0x85,0xe8,0x56,0x49,0x1e,
+0xe0,0x1, 0x21,0x67,0xe8,0x31,0x4f,0xf9,0xe0,0xff,0x11,0xf4,0xe2,0x0, 0xcf,0x80,
+0xe1,0x0, 0x17,0xd8,0xe0,0x63,0x39,0x2f,0x15,0x3e,0xe0,0x1, 0x14,0xff,0x3c,0x63,
+0xe0,0x1, 0xd2,0x7, 0x3c,0x63,0x15,0x1c,0x14,0x80,0xc4,0x3e,0x11,0x0, 0xe0,0x1,
+0xd2,0x0, 0x3f,0xe2,0x3b,0x62,0x3a,0xe2,0x4f,0x9, 0x38,0xee,0xe8,0x52,0x4f,0x1a,
+0x3f,0x75,0xe0,0x0, 0x2, 0xce,0x17,0x80,0xe0,0x7, 0xaf,0xe3,0xe8,0x56,0x4f,0x9a,
+0xab,0x13,0xe6,0xac,0xcf,0xcf,0xe1,0xff,0xc7,0x90,0xaf,0x83,0x21,0x1c,0xe8,0x31,
+0x4f,0xf9,0x12,0x0, 0xe0,0x2f,0x3f,0x84,0xe8,0x31,0x6f,0xf9,0x16,0x81,0xe8,0x12,
+0x57,0xba,0x3c,0x63,0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x1d,0xe0,0x2, 0xb7,0x2f,
+0xde,0xdf,0xe8,0x12,0x57,0xba,0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x14,0xe0,0x2,
+0xb7,0x2f,0xdf,0x1b,0x17,0x80,0xe8,0x56,0x6f,0xa1,0xe8,0x56,0x6f,0x9d,0xe8,0x56,
+0x6f,0x9e,0xe0,0x53,0x14,0xc4,0x49,0x89,0xe1,0x1, 0x14,0x34,0xe4,0x0, 0xc1,0x8e,
+0x3d,0x63,0xe0,0x1, 0xd1,0x72,0xe0,0x1, 0x29,0x17,0x3d,0x63,0xe0,0x1, 0x14,0xff,
+0xe1,0x1, 0x14,0x34,0xc0,0xa, 0xb, 0xa1,0xe0,0x23,0x0, 0xb3,0xe8,0x31,0x4f,0xf8,
+0xe7,0xff,0x27,0x8d,0x17,0x81,0xe8,0x56,0x6f,0x9e,0xe7,0xff,0x0, 0x88,0x3e,0xe5,
+0xe4,0x0, 0xc6,0x8e,0xe0,0x52,0x17,0x38,0x3f,0x1d,0xe0,0x12,0x8c,0x8e,0x3c,0xf1,
+0xe0,0x0, 0x3, 0xe7,0xe6,0xac,0xcd,0x49,0xe4,0x0, 0xc5,0x6, 0xe0,0x55,0x15,0xdc,
+0x3d,0x9a,0x8b,0x8b,0xe2,0x0, 0xcb,0x83,0xe0,0x0, 0x1, 0x5b,0xe2,0x0, 0xcb,0x81,
+0xe0,0x8, 0x92,0x6e,0xe0,0x8, 0x97,0x7e,0x1, 0x99,0xe1,0x1, 0x15,0x34,0x15,0x80,
+0x3c,0x6b,0xe2,0x1, 0xc4,0x7f,0x38,0xf8,0x5, 0x91,0x8c,0x4a,0x3e,0x6b,0xe6,0xac,
+0xcc,0x48,0x3c,0x79,0xc5,0x81,0xc5,0xe, 0x1, 0xf4,0x3d,0xec,0xe4,0x0, 0xc5,0x8e,
+0xe1,0x1, 0x17,0x34,0x3f,0x1b,0x92,0xe, 0x97,0x1e,0x3c,0xe0,0x3c,0x60,0x3d,0xe6,
+0x3d,0x65,0xc4,0x8b,0xc4,0xa, 0x76,0x81,0xe6,0x84,0xca,0x44,0x77,0x2, 0x77,0x83,
+0xde,0xdc,0x56,0x81,0xe0,0x52,0x16,0x38,0x3e,0x9c,0xe0,0x12,0x8e,0x8d,0x57,0x2,
+0xe2,0x1, 0xce,0xff,0xe6,0x84,0xcf,0x4e,0xe0,0xb, 0x36,0xac,0x57,0x83,0x3f,0x1b,
+0x1, 0x24,0xe2,0x0, 0xcb,0x81,0x1, 0x4, 0xc3,0x1, 0xe2,0x1, 0xc3,0x7f,0xc1,0x1,
+0x33,0xae,0xe2,0x1, 0xc1,0x7f,0x3a,0x17,0x3e,0xef,0xe4,0x0, 0xc6,0x86,0xe0,0xb,
+0x32,0x48,0x3e,0x93,0xad,0xad,0xe0,0xb, 0x37,0x48,0xaf,0x5d,0xc7,0x81,0x4f,0xa,
+0xe2,0x1, 0xc7,0xff,0xaf,0x6d,0x4f,0xb, 0xaa,0x3d,0xad,0xcd,0xaf,0x7d,0xc2,0x81,
+0xe2,0x1, 0xc2,0xff,0xe7,0xfe,0x0, 0xba,0xe1,0x80,0xc2,0x0, 0x0, 0xe6,0xe8,0x12,
+0x57,0xba,0x16,0x81,0xe0,0x2, 0x97,0x2f,0xe7,0x6, 0xcf,0x1d,0xe0,0x2, 0xb7,0x2f,
+0xe7,0xfe,0x0, 0xe1,0xc0,0xa, 0xb, 0xe1,0x8, 0xb4,0xe8,0x25,0x52,0x25,0xe8,0x25,
+0x57,0xa5,0x17,0x3, 0xe7,0x2, 0xcf,0xae,0xe8,0x25,0x77,0xa5,0x14,0x3f,0xe8,0x25,
+0x54,0xa5,0x11,0x71,0xd5,0xfa,0x17,0x81,0x14,0x1, 0xe9,0x2, 0x6f,0xcc,0xef,0xfa,
+0xdb,0x64,0xe7,0x8b,0x14,0x34,0xef,0xfb,0xd1,0x6c,0x39,0xe8,0x14,0x85,0xe0,0x1,
+0x14,0x7, 0xef,0xf9,0xdc,0x55,0x14,0x85,0xe0,0x1, 0x14,0x6, 0x39,0x53,0xef,0xf9,
+0xdc,0x4f,0xe0,0x43,0x39,0x2, 0x3c,0xe2,0xcc,0x8a,0xe2,0x1, 0xc4,0xfb,0xe7,0x8b,
+0x14,0x34,0xef,0xfb,0xd1,0x65,0x14,0x32,0xef,0xfb,0xdc,0xdd,0x17,0x87,0x14,0x1,
+0xe8,0x61,0x6f,0xa7,0xe8,0x61,0x6f,0xa8,0xef,0xfa,0xdd,0xd9,0x14,0x1, 0xef,0xfa,
+0xdb,0x3c,0xe8,0x30,0x56,0xc8,0xe0,0xa5,0x17,0x60,0x17,0x80,0x3e,0xff,0x1, 0xba,
+0x3c,0xe2,0xcc,0x88,0xe2,0x1, 0xc4,0xf9,0xe7,0x8b,0x14,0x34,0xef,0xfb,0xd1,0x48,
+0xef,0xfa,0xda,0xfe,0x14,0x1, 0xef,0xfa,0xdb,0x28,0xe0,0xd9,0x17,0x18,0xe8,0x30,
+0x55,0xc8,0x16,0x80,0x39,0x6e,0x3d,0xfd,0x1, 0xae,0x14,0x85,0xe0,0x1, 0x14,0x7,
+0xef,0xf9,0xdc,0x16,0x14,0x85,0xe0,0x1, 0x14,0x6, 0xef,0xf9,0xdc,0x11,0x3c,0xe3,
+0xe7,0x8b,0x14,0x34,0xef,0xfb,0xd1,0x2c,0x14,0x32,0xef,0xfb,0xdc,0xa4,0xe8,0x25,
+0x72,0x25,0x14,0x3f,0xe8,0x25,0x54,0xa5,0xd5,0x98,0x17,0x80,0xe8,0x81,0x77,0xa8,
+0xe9,0x2, 0x6f,0xcd,0xe7,0xff,0x17,0xaa,0xe8,0x12,0x71,0x4c,0xe9,0x2, 0x6f,0xcc,
+0xa, 0x61,0xe1,0x80,0x95,0x9e,0xc7,0x81,0x3e,0x6e,0xe0,0x33,0xc6,0x36,0xb5,0x8c,
+0xe7,0xff,0x0, 0xbe,0x3f,0xee,0xe1,0xcc,0xc7,0xc8,0x96,0xe, 0x97,0x8f,0xc6,0x81,
+0x3f,0xac,0xe0,0x41,0x3f,0xaf,0xe1,0x80,0xb7,0x9e,0x0, 0xc6,0x8, 0xb4,0xc0,0x7c,
+0x3f,0x68,0xe4,0x0, 0xc7,0x7, 0xe4,0x0, 0xc4,0x3, 0x39,0xe9,0xe0,0x4d,0x17,0xca,
+0xe0,0x25,0x14,0x88,0x3f,0x9e,0x3c,0x98,0x3c,0x60,0x8a,0x5f,0x15,0x3, 0xc4,0x2,
+0x89,0x4f,0xe0,0x1, 0xd0,0x32,0xe2,0x0, 0xca,0x1, 0x1, 0x22,0x4, 0x8a,0xe2,0x0,
+0xca,0x3, 0x2, 0x8b,0x17,0x80,0x6f,0x82,0x17,0x84,0x69,0x83,0x6f,0x84,0x0, 0x85,
+0x17,0x8b,0x77,0x81,0x17,0x80,0x6f,0x84,0x3c,0xe0,0xc4,0x82,0x3c,0x62,0xd3,0x4,
+0x3f,0x62,0xe4,0x0, 0xc7,0x14,0x3c,0x62,0xe0,0x4a,0x17,0xf8,0x3f,0x9e,0xe4,0x1,
+0xc4,0x4b,0x94,0xbf,0xe0,0x2, 0xc4,0x3, 0xd5,0x40,0xc0,0x4, 0xa, 0x61,0x17,0x87,
+0x0, 0xe9,0x8, 0xb7,0xc0,0x72,0x3f,0x69,0xe4,0x0, 0xc7,0x7, 0xe0,0x4d,0x12,0x4a,
+0x3a,0x1e,0x89,0xc4,0xe0,0x4a,0x11,0x78,0x3e,0x63,0xe4,0x1, 0xc6,0x4b,0x3b,0xe3,
+0x3f,0x6c,0xe0,0x2, 0xc7,0x6, 0xe4,0x0, 0xc3,0x94,0x77,0x3, 0x3f,0x6c,0xe0,0x2,
+0xc7,0x8, 0x3f,0xec,0xe0,0x2, 0xc7,0x82,0x77,0x5, 0x3f,0x67,0x77,0x84,0xc7,0x10,
+0x3f,0xec,0x3f,0x12,0xe0,0x2, 0xc7,0x80,0x77,0x87,0x3a,0xe9,0x77,0x6, 0x39,0x17,
+0xe0,0x1, 0x24,0x1e,0xe8,0x24,0x57,0xe6,0xe8,0x24,0x57,0x66,0xe8,0x18,0x77,0xfd,
+0x17,0x80,0xe7,0x7, 0xcf,0x1f,0xe8,0x24,0x77,0x66,0x3c,0x6f,0xe8,0x24,0x57,0x66,
+0x77,0x82,0xe7,0x6, 0xcf,0x1f,0xe8,0x24,0x77,0x66,0x13,0x2, 0xe8,0x24,0x57,0x66,
+0xe7,0x5, 0xcf,0x1f,0xe8,0x24,0x77,0x66,0xe8,0x24,0x57,0x66,0xe8,0x26,0x77,0xc,
+0xe8,0x24,0x54,0xe6,0xd4,0xf2,0xe0,0xd, 0x17,0x8, 0x54,0x7, 0xb7,0x2, 0xe0,0x8d,
+0x17,0x8, 0xb7,0x12,0xe0,0x4b,0x17,0x48,0x3b,0x9e,0xe0,0x0, 0x17,0x53,0xb7,0x7,
+0xe0,0x5, 0x17,0x1c,0x15,0x2, 0x3c,0xe2,0xb7,0x17,0xd4,0xee,0xe0,0x15,0x16,0xaa,
+0xe8,0x25,0x76,0xa4,0x15,0x5, 0xe8,0x25,0x57,0x24,0xe0,0x4a,0x14,0xc4,0xe8,0x25,
+0x77,0x25,0x14,0x3c,0xe8,0x25,0x76,0xa3,0xe8,0x25,0x76,0xa2,0xe8,0x25,0x76,0xa6,
+0xe8,0x25,0x57,0x24,0xe8,0x26,0x77,0x4a,0xe8,0x25,0x57,0x25,0xe8,0x26,0x77,0x4b,
+0xe8,0x25,0x57,0x23,0xe8,0x26,0x77,0x49,0xe8,0x25,0x57,0x22,0xe8,0x26,0x77,0x48,
+0xe8,0x25,0x57,0x26,0xe8,0x26,0x77,0x4c,0xd4,0xc7,0x57,0x82,0x3c,0x6f,0xef,0xfa,
+0xd5,0x6, 0x96,0x62,0x57,0x82,0xe7,0x0, 0xce,0x26,0xb6,0x62,0x3c,0xef,0x96,0x67,
+0x3c,0x63,0xe7,0x0, 0xce,0x26,0xb6,0x67,0xd2,0x8, 0x54,0x3, 0x94,0xe2,0xd4,0xa5,
+0x8d,0x54,0x14,0x81,0x3c,0x63,0xd2,0x14,0x54,0x4, 0x94,0xa2,0xd4,0x9e,0x14,0x8f,
+0x3c,0x65,0xdf,0x25,0xe0,0x1, 0x14,0xc0,0x3c,0x63,0xd2,0xc3,0x14,0xb0,0x3c,0x63,
+0xd2,0xd7,0x54,0x5, 0x54,0x86,0x3d,0x66,0xd4,0x9f,0xe8,0x25,0x57,0xaf,0x17,0x1,
+0xe7,0x6, 0xcf,0xae,0xe8,0x25,0x77,0xaf,0xe0,0x0, 0x14,0x49,0xe8,0x25,0x57,0xaf,
+0xe7,0x5, 0xcf,0x9e,0xe8,0x25,0x77,0xaf,0xe8,0x25,0x57,0xaf,0xe8,0x26,0x77,0xd5,
+0xe8,0x25,0x54,0xaf,0xc0,0xe, 0xb, 0xa1,0xe0,0x8, 0x0, 0xf8,0xe0,0x11,0x15,0x23,
+0xe8,0x25,0x75,0x24,0xe0,0x11,0x17,0x2f,0xe8,0x25,0x77,0x25,0xe0,0x1f,0x16,0xff,
+0xe8,0x25,0x76,0xa3,0x3b,0x68,0xe8,0x25,0x76,0xa2,0xe0,0x4a,0x14,0xc4,0xe8,0x25,
+0x76,0xa6,0x14,0x3c,0xe8,0x26,0x75,0x4a,0x15,0x5, 0xe8,0x26,0x77,0x4b,0xe8,0x26,
+0x76,0xc9,0xe8,0x26,0x76,0xc8,0x76,0x2, 0xe8,0x26,0x76,0xcc,0xd4,0x65,0x3c,0x66,
+0xef,0xfa,0xd4,0xa5,0x97,0x62,0xe0,0xb, 0x32,0xa1,0xe7,0x0, 0xcf,0x26,0xb7,0x62,
+0xe0,0x4b,0x17,0x48,0x3f,0x17,0x96,0xee,0x3c,0x63,0xe7,0x0, 0xce,0xa6,0xb6,0xee,
+0xe0,0x4d,0x16,0xc4,0x3e,0x9b,0x8c,0x8d,0x77,0x1, 0xd1,0x9f,0x54,0x3, 0x94,0xe2,
+0xe4,0x0, 0xc2,0x83,0xd4,0x3a,0x8d,0x54,0x8c,0xe4,0x3c,0x63,0xd1,0xa9,0x54,0x4,
+0x94,0xa2,0xd4,0x33,0xe0,0x25,0x14,0x88,0x3c,0x95,0x3c,0x63,0xd1,0xe5,0x56,0x2,
+0x94,0xb2,0xe0,0x2, 0x14,0x3, 0x3c,0x1c,0xd4,0x28,0x8c,0x84,0x3c,0x63,0x34,0xa3,
+0xd2,0x50,0x8c,0x94,0x3c,0x63,0x34,0xa3,0xd2,0x63,0x54,0x5, 0x54,0x86,0x15,0x2,
+0xd4,0x2b,0xe0,0x6e,0x16,0xc5,0xe8,0x25,0x76,0xaf,0xe0,0x0, 0x14,0x49,0xe8,0x26,
+0x76,0xd5,0xe8,0x25,0x56,0xaf,0xe7,0x5, 0xce,0x96,0xe8,0x25,0x76,0xaf,0xe8,0x26,
+0x56,0xd5,0xe7,0x5, 0xce,0x96,0xe8,0x26,0x76,0xd5,0xe8,0x25,0x54,0xaf,0xd4,0x5,
+0xe7,0x2d,0x16,0x88,0x57,0x1, 0x54,0x7, 0xe0,0x5, 0x17,0x9c,0xb6,0x82,0x3c,0xe2,
+0xb7,0x92,0xe0,0x21,0x17,0x9c,0xb6,0x8e,0x15,0x2, 0xb7,0x9e,0xd4,0x5, 0xe8,0x18,
+0x57,0x7d,0x3c,0x66,0xe8,0x24,0x77,0x66,0xe8,0x24,0x57,0xe6,0xe8,0x26,0x77,0x8c,
+0xe8,0x24,0x54,0xe6,0xe7,0xfe,0x0, 0xf0,0x8, 0xb7,0xe1,0xff,0xc0,0x6, 0xe8,0x56,
+0x4b,0xe6,0xe8,0x56,0x49,0xaa,0xe8,0x56,0x4a,0xab,0xe0,0x1, 0x2b,0xf1,0x3b,0x63,
+0x39,0xe5,0x3a,0xe6,0x14,0x1, 0xe8,0x56,0x49,0x2f,0xef,0xfa,0xd9,0x46,0x17,0x80,
+0xe8,0x30,0x56,0x48,0xe8,0x81,0x77,0xa8,0xe0,0xd9,0x16,0x98,0xe0,0x40,0x15,0x80,
+0x3e,0x7f,0xe0,0x1, 0x1, 0xe1,0xef,0xfb,0xdd,0xa2,0xe8,0x25,0x4c,0xc3,0x14,0x1,
+0xde,0x89,0x14,0x81,0xe0,0x1, 0x14,0x6, 0xef,0xf9,0xda,0x2a,0xe7,0x8b,0x14,0x34,
+0xef,0xfa,0xdf,0x37,0x14,0x85,0x74,0x3, 0xe0,0x1, 0x14,0x7, 0xef,0xf9,0xda,0x20,
+0x54,0x83,0xe7,0x8b,0x14,0x34,0xe2,0x1, 0xc4,0xf1,0xcc,0x8a,0xef,0xfa,0xdf,0x38,
+0x14,0x32,0xef,0xfb,0xda,0xb0,0xe8,0x25,0x4c,0xc3,0x14,0x6, 0xef,0xfa,0xd8,0x63,
+0xe8,0x25,0x4e,0xc3,0xe0,0x4d,0x17,0xca,0xe4,0x0, 0xc6,0x87,0xe0,0x13,0x14,0x44,
+0x3f,0x9d,0x8a,0x4f,0xdb,0xaa,0x14,0x1, 0x3f,0xe7,0x3f,0x66,0x31,0x38,0xe0,0xff,
+0xc7,0x7f,0xe0,0xff,0xc7,0xff,0xe4,0x1, 0xc2,0x4b,0x3f,0x32,0x3f,0xb2,0xe8,0x12,
+0x74,0x2a,0xe0,0x3, 0xc2,0x2f,0x13,0x80,0x77,0x4, 0x77,0x85,0x3b,0xf2,0xe0,0x0,
+0x1, 0x5b,0x17,0x80,0x3e,0xef,0x3c,0xe0,0xe0,0xe, 0x37,0xa1,0xc4,0x8c,0x3f,0x19,
+0xb6,0x8e,0x3f,0x6f,0xc7,0x1c,0x37,0x21,0xc7,0x81,0x3f,0x19,0xe2,0x0, 0xcf,0x9c,
+0xb6,0x8e,0x1, 0xf2,0xe8,0x30,0x56,0x4d,0x16,0x80,0x3e,0x17,0x15,0x8c,0x15,0x1,
+0x3e,0xf5,0xe0,0x1, 0x1, 0x86,0xe8,0x30,0x55,0xce,0x17,0x80,0x3d,0x97,0x15,0xc,
+0x14,0x81,0x3f,0xf3,0xe0,0x1, 0x1, 0x91,0x14,0x0, 0x77,0x81,0x76,0x82,0xef,0xfa,
+0xd3,0xae,0xe8,0x12,0x54,0x33,0x3d,0x60,0x15,0x9c,0xc5,0xc, 0x3c,0xe4,0xd3,0x25,
+0xe8,0x12,0x54,0x32,0x3d,0x60,0x15,0x9c,0xe0,0x0, 0xc5,0x44,0x3c,0xe4,0xd3,0x1d,
+0xef,0xfa,0xd8,0x8e,0x14,0x1, 0xef,0xfa,0xd8,0xb8,0xef,0xfb,0xdd,0xf, 0x57,0x81,
+0x56,0x82,0x2c,0x19,0x54,0x85,0xe0,0x91,0x17,0x18,0x3c,0x9e,0x3e,0x68,0x3d,0x68,
+0x3c,0x97,0x3e,0xfc,0x3d,0x12,0xe0,0x0, 0x1, 0xfd,0x56,0x4, 0x3f,0x1c,0x3f,0x17,
+0x16,0x0, 0x3f,0xf8,0x3e,0x12,0xe0,0x1, 0x1, 0x83,0xef,0xfb,0xdc,0xf7,0xc3,0x82,
+0xe7,0xff,0x24,0x26,0xe0,0x13,0x14,0x44,0xdb,0x38,0x11,0x0, 0xe7,0xff,0x16,0x2a,
+0xe8,0x81,0x71,0x28,0xe0,0xd9,0x14,0x98,0xe8,0xf3,0x6e,0x30,0xe8,0x12,0x74,0xcc,
+0xe8,0xf3,0x69,0x2f,0xef,0xfa,0xd4,0x0, 0xe8,0x25,0x4c,0xc3,0xe0,0x3c,0x14,0x40,
+0xef,0xfa,0xd3,0x8a,0x14,0x85,0xe0,0x1, 0x14,0x6, 0xef,0xf9,0xd9,0x79,0x14,0x85,
+0xe0,0x1, 0x14,0x7, 0xef,0xf9,0xd9,0x74,0x54,0x83,0xe7,0x8b,0x14,0x34,0xef,0xfa,
+0xde,0x8f,0x14,0x32,0xef,0xfb,0xda,0x7, 0xe8,0x25,0x4c,0xc3,0x3c,0x62,0xdd,0xc2,
+0x16,0x88,0xe8,0x12,0x76,0xaa,0xef,0xfb,0xdc,0xd2,0xe8,0x25,0x4c,0x41,0xef,0xfa,
+0xd7,0x8f,0xef,0xfa,0xd8,0x35,0xe0,0x0, 0xc0,0x7a,0xb, 0xe1,0x3b,0xe3,0x13,0x0,
+0xe7,0xfe,0x0, 0x92,0xe1,0x80,0xb5,0x9d,0xc7,0x81,0xe7,0xfe,0x0, 0x9b,0x97,0x8c,
+0x3c,0x60,0xe1,0x2e,0x3f,0xbb,0xc4,0xc, 0x37,0x21,0x3f,0x18,0xe1,0x2f,0x3f,0xcb,
+0x94,0x8e,0xe0,0xf, 0x35,0x3f,0xc6,0x81,0x3f,0xc9,0xe2,0x1, 0xc6,0xff,0x3e,0x12,
+0xb7,0x8e,0xe7,0xfe,0x0, 0xe7,0x96,0xb, 0x3c,0x60,0xe1,0x2e,0x3e,0x3a,0xc4,0xc,
+0xc7,0x1c,0x37,0x21,0x3f,0x18,0xe1,0x2c,0x3e,0x4a,0x94,0xe, 0xe0,0xc, 0x34,0xbc,
+0xc7,0x81,0x3e,0x48,0xe2,0x1, 0xc7,0xff,0x3d,0x92,0xb6,0xe, 0xe7,0xfe,0x0, 0xdb,
+0xe0,0xb, 0x3c,0x9a,0x38,0xeb,0xe0,0x14,0xc0,0xc8,0x90,0x81,0xe0,0x48,0xc5,0x80,
+0xc6,0x1, 0xe2,0x1, 0xc6,0x7f,0xb0,0x8b,0xe7,0xfe,0x0, 0xf5,0xe0,0xd, 0x3f,0x1c,
+0x3d,0xed,0xe0,0x14,0xc5,0xc8,0x95,0x8b,0xe0,0x48,0xc6,0x80,0xc4,0x1, 0xe2,0x1,
+0xc4,0x7f,0xb5,0x8d,0xe7,0xfe,0x0, 0xef,0xe4,0x0, 0xc4,0x14,0xe0,0x4a,0x17,0xf8,
+0x3f,0x98,0x97,0x6f,0xe6,0xad,0xcc,0xd9,0xe7,0x6, 0xcf,0x39,0xb7,0x6f,0xe0,0x4b,
+0x17,0xc8,0x3c,0x1f,0x97,0xe8,0xe7,0x6, 0xcf,0xb9,0xb7,0xe8,0x38,0x82,0xe4,0x0,
+0xc4,0x14,0xe0,0x4a,0x17,0xf8,0xe0,0xe, 0x3f,0x98,0x97,0x6e,0xe6,0xad,0xcf,0x5e,
+0x2f,0x4, 0xc4,0x81,0xe2,0x1, 0xc4,0xff,0x3f,0x98,0x97,0x2f,0xe6,0xad,0xcd,0x5a,
+0xe7,0x0, 0xcf,0x3a,0xb7,0x2f,0xe6,0xa9,0xcc,0x99,0x97,0x2f,0xe7,0x3, 0xcf,0x79,
+0xb7,0x2f,0xe0,0x4b,0x17,0xc8,0x3c,0x1f,0x97,0xa8,0xe7,0x0, 0xcf,0xba,0xb7,0xa8,
+0x97,0xa8,0xe7,0x3, 0xcf,0xf9,0xb7,0xa8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x4a,
+0x17,0xf8,0x3f,0x98,0x97,0x2f,0xe6,0xab,0xcc,0xb9,0xe7,0xa, 0xcf,0x59,0xb7,0x2f,
+0xe0,0x4b,0x17,0xc8,0x3c,0x1f,0x97,0xa8,0xe7,0xa, 0xcf,0xd9,0xb7,0xa8,0x38,0x82,
+0xe4,0x0, 0xc4,0x14,0xe0,0x4a,0x17,0xf8,0x3f,0x98,0xb4,0xff,0xe0,0x4b,0x17,0xc8,
+0x3c,0x1f,0xb4,0xf8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x4a,0x17,0xf8,0x3f,0x98,
+0x8e,0x9, 0x97,0x3f,0xe6,0xab,0xce,0x3c,0xe7,0x0, 0xcf,0x5c,0xb7,0x3f,0x8e,0x99,
+0x97,0x3f,0xe6,0xab,0xce,0xbd,0xe7,0x5, 0xcf,0x5d,0xb7,0x3f,0x8f,0x29,0x95,0xbf,
+0xe6,0xab,0xcf,0x3e,0xe7,0xa, 0xcd,0xde,0xb5,0xbf,0xe0,0x4b,0x17,0xc8,0x3c,0x1f,
+0x97,0xb8,0xe7,0x0, 0xcf,0xdc,0xb7,0xb8,0x97,0xb8,0xe7,0x5, 0xcf,0xdd,0xb7,0xb8,
+0x97,0xb8,0xe7,0xa, 0xcf,0xde,0xb7,0xb8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x4a,
+0x17,0xf8,0x3f,0x98,0x97,0x4f,0xe6,0xaf,0xcc,0xf9,0xe7,0x1, 0xcf,0x19,0xb7,0x4f,
+0xe6,0xaf,0xcd,0x7a,0x97,0x4f,0xe7,0x2, 0xcf,0x1a,0xb7,0x4f,0x97,0x4f,0xe7,0x23,
+0xcf,0xb, 0xb7,0x4f,0x97,0x4f,0xe7,0x0, 0xcf,0x19,0xb7,0x4f,0xe0,0x4b,0x17,0xc8,
+0x3c,0x1f,0x97,0xc8,0xe7,0x1, 0xcf,0x99,0xb7,0xc8,0x97,0xc8,0xe7,0x2, 0xcf,0x9a,
+0xb7,0xc8,0x97,0xc8,0xe7,0x23,0xcf,0x8b,0xb7,0xc8,0x97,0xc8,0xe7,0x0, 0xcf,0x99,
+0xb7,0xc8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x4a,0x17,0xf8,0x3f,0x98,0x97,0x4f,
+0xe6,0xaf,0xcc,0xf9,0xe7,0x0, 0xcf,0x19,0xb7,0x4f,0xe0,0x4b,0x17,0xc8,0x3c,0x1f,
+0x97,0xc8,0xe7,0x0, 0xcf,0x99,0xb7,0xc8,0x38,0x82,0xe4,0x0, 0xc4,0x14,0xe0,0x4a,
+0x17,0xf8,0x3f,0x98,0xb4,0xdf,0xe0,0x4b,0x17,0xc8,0x3c,0x1f,0xb4,0xd8,0x38,0x82,
+0xe4,0x0, 0xc4,0x14,0xe0,0x4a,0x17,0xf8,0x3f,0x98,0xe0,0x1, 0x97,0xf, 0xe6,0x85,
+0xcc,0xd9,0xe7,0x20,0xcf,0x39,0xe0,0x1, 0xb7,0xf, 0xe0,0x4b,0x17,0xc8,0x3c,0x1f,
+0xe0,0x1, 0x97,0x88,0xe7,0x20,0xcf,0xb9,0xe0,0x1, 0xb7,0x88,0x38,0x82,0xe4,0x0,
+0xc4,0x14,0xe0,0x4a,0x17,0xf8,0x3f,0x98,0xe0,0x1, 0x97,0x1f,0xe6,0x85,0xcc,0xd9,
+0xe7,0x20,0xcf,0x39,0xe0,0x1, 0xb7,0x1f,0xe0,0x4b,0x17,0xc8,0x3c,0x1f,0xe0,0x1,
+0x97,0x98,0xe7,0x20,0xcf,0xb9,0xe0,0x1, 0xb7,0x98,0x38,0x82,0xe4,0x0, 0xc4,0x14,
+0xe0,0x4a,0x17,0xf8,0x3f,0x98,0x97,0x6f,0xe6,0xad,0xcc,0xd9,0xe7,0x3, 0xcf,0x39,
+0xb7,0x6f,0xe0,0x4b,0x17,0xc8,0x3c,0x1f,0x97,0xe8,0xe7,0x3, 0xcf,0xb9,0xb7,0xe8,
+0x38,0x82,0xe0,0x49,0x17,0xcc,0xe0,0x2, 0x97,0x2f,0xe6,0xae,0xcc,0x68,0xe7,0x0,
+0xcf,0x28,0xe0,0x2, 0xb7,0x2f,0xe6,0xae,0xcc,0xe9,0xe0,0x2, 0x97,0x2f,0xe7,0x2,
+0xcf,0x29,0xe0,0x2, 0xb7,0x2f,0xe0,0x4c,0x17,0x98,0xe0,0x2, 0x97,0x2f,0xe7,0x0,
+0xcf,0x28,0xe0,0x2, 0xb7,0x2f,0xe0,0x2, 0x97,0x2f,0xe7,0x2, 0xcf,0x29,0xe0,0x2,
+0xb7,0x2f,0x38,0x82,0x97,0x8, 0xe0,0x49,0x17,0xcc,0xe0,0x7, 0xb7,0x6f,0x97,0x9,
+0xe0,0x7, 0xb7,0x7f,0xe0,0x4c,0x17,0x98,0x94,0x8, 0xe0,0x7, 0xb4,0x6f,0x94,0x89,
+0xe0,0x7, 0xb4,0xff,0x38,0x82,0x97,0x88,0xe8,0x25,0x77,0xa3,0x94,0x8, 0xe8,0x26,
+0x74,0x49,0x38,0x82,0x97,0x88,0xe8,0x25,0x77,0xa6,0x94,0x8, 0xe8,0x26,0x74,0x4c,
+0x38,0x82,0x97,0x88,0xe8,0x25,0x77,0xa2,0x94,0x8, 0xe8,0x26,0x74,0x48,0x38,0x82,
+0xe8,0x12,0x57,0xb0,0x16,0x0, 0xe0,0x4, 0x97,0x4f,0xe0,0x4, 0x96,0xcf,0x37,0x4f,
+0xe7,0xf, 0xce,0x9c,0xe0,0x4, 0xb6,0xcf,0x16,0x1, 0xe0,0x7, 0x96,0xaf,0xe7,0x0,
+0xce,0x9c,0xe0,0x7, 0xb6,0xaf,0xe0,0x4, 0x96,0xcf,0xe7,0xf, 0xce,0x9e,0xe0,0x4,
+0xb6,0xcf,0x38,0x82,0x8, 0xb6,0x14,0x80,0x3a,0x68,0x3c,0x69,0xe8,0x12,0x51,0xb0,
+0xdf,0x99,0xe8,0x24,0x54,0xf8,0x14,0x12,0xd1,0x28,0xe8,0x12,0x57,0xb0,0x8e,0x84,
+0x97,0xf, 0xc1,0x84,0xe7,0x0, 0xcf,0x3d,0xb7,0xf, 0x11,0x0, 0x8e,0x94,0x97,0xf,
+0xe0,0x4a,0x12,0xf8,0xe7,0x3, 0xcf,0x3d,0xe0,0x4b,0x13,0x48,0xb7,0xf, 0x8f,0x84,
+0x3f,0xf2,0x3, 0x82,0xb, 0x61,0x3f,0xe2,0xc7,0x82,0x37,0xa1,0x3f,0x94,0xe0,0xe,
+0x31,0x22,0x3f,0x13,0x94,0xf, 0x96,0x8e,0x34,0x4e,0xe7,0x6, 0xce,0xa8,0xb6,0x8e,
+0xc1,0x1, 0x96,0x8f,0x96,0xe, 0xe6,0xa2,0xce,0xad,0xe7,0x0, 0xce,0x6d,0xb6,0xe,
+0x3f,0x68,0xe4,0x0, 0xc7,0x14,0x97,0x8f,0xe0,0xd, 0x3a,0x9e,0x96,0x2d,0xe6,0xa8,
+0xcf,0xdf,0xe7,0x0, 0xce,0x3f,0xb6,0x2d,0x3f,0x16,0x96,0x2e,0xe4,0x1, 0xc4,0x4b,
+0xe7,0x0, 0xce,0x3f,0xb6,0x2e,0xe0,0x2, 0xc4,0x2, 0x94,0xad,0xe2,0x1, 0xc1,0x7f,
+0xd0,0xe4,0x0, 0xce,0x17,0x81,0xe8,0x31,0x6f,0xff,0xe8,0x25,0x6f,0x9a,0x24,0x5,
+0xe8,0x31,0x6f,0xfe,0xe0,0x9, 0x0, 0xc4,0xe8,0x12,0x57,0xb0,0x16,0x81,0x97,0xf,
+0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0x0, 0xf7,0xe8,0x12,0x57,0xb0,0x97,0xf, 0xe7,0xd,
+0xcf,0x18,0xb7,0xf, 0xe8,0x12,0x57,0xaf,0xe0,0x1, 0x97,0x2f,0xe7,0x0, 0xcf,0x19,
+0xe0,0x1, 0xb7,0x2f,0x38,0x82,0xe8,0x31,0x4c,0x7f,0xe8,0x31,0x4f,0xff,0x27,0x9a,
+0xe8,0x12,0x57,0x3a,0x17,0x80,0xe8,0x31,0x6f,0xfe,0x16,0x81,0xe0,0x1, 0x97,0xae,
+0xe7,0x2, 0xcf,0x9d,0xe0,0x1, 0xb7,0xae,0x17,0x80,0xe0,0x1, 0x96,0xae,0xe7,0x2,
+0xce,0x9f,0xe0,0x1, 0xb6,0xae,0xe8,0x31,0x6f,0xff,0xe8,0x25,0x6f,0x9a,0xe8,0x46,
+0x6f,0xe7,0x38,0x82,0xe8,0x12,0x57,0x30,0xe8,0x30,0x57,0xd1,0xe0,0x2, 0x96,0xee,
+0xc7,0x81,0xe6,0x86,0xcf,0xff,0xe7,0x20,0xce,0x9f,0xe0,0x2, 0xb6,0xee,0xe8,0x30,
+0x57,0xd2,0xe0,0x3, 0x96,0x8e,0xc7,0x81,0xe6,0x86,0xcf,0xff,0xe7,0x20,0xce,0x9f,
+0xe0,0x3, 0xb6,0x8e,0xe0,0x9, 0x0, 0x9c,0xe0,0x61,0x3e,0x2, 0xe8,0x12,0x57,0xbb,
+0x15,0x81,0x97,0x2f,0x96,0xaf,0xe6,0xa1,0xcf,0x7e,0xe7,0xe, 0xce,0x9b,0xb6,0xaf,
+0xe0,0x61,0x3e,0x82,0xe7,0xef,0x15,0xff,0x3e,0xdb,0xe0,0x61,0x3e,0x92,0xe1,0x0,
+0xc4,0x80,0xb4,0x88,0xe0,0x1, 0x96,0x88,0x26,0xfe,0xb5,0x8, 0xe0,0x1, 0x96,0x88,
+0x26,0xfe,0x16,0x81,0xb6,0xe8,0x96,0xe8,0x2e,0xff,0xe0,0x61,0x3e,0x12,0x96,0xaf,
+0xe7,0xe, 0xce,0x9e,0xb6,0xaf,0x38,0x82,0x8, 0xb1,0xe0,0x61,0x3e,0x2, 0xe8,0x12,
+0x57,0xbb,0x10,0x81,0x96,0xaf,0x97,0x2f,0xe6,0xa1,0xce,0xfd,0xe7,0xe, 0xcf,0x11,
+0xb7,0x2f,0xe0,0x61,0x3f,0x2, 0xe7,0xef,0x10,0xff,0x3f,0x51,0xe0,0x61,0x3f,0x12,
+0xb4,0x88,0xe0,0x1, 0x97,0x8, 0x27,0x7e,0x17,0x0, 0x3c,0xee,0x3f,0x7b,0x1, 0x8c,
+0x17,0x1, 0xb7,0x68,0x97,0x68,0x2f,0x7f,0xe0,0x61,0x3e,0x12,0x97,0x2f,0xe7,0xe,
+0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0xb4,0x88,0xe0,0x1, 0x90,0x88,0x20,0xfe,0x90,0xa8,
+0xc7,0x1, 0xe1,0x80,0xb0,0x9a,0x0, 0xeb,0x8, 0xb1,0xe0,0x61,0x3e,0x2, 0xe8,0x12,
+0x57,0xbb,0x10,0x81,0x97,0x2f,0x96,0xaf,0xe6,0xa1,0xcf,0x7e,0xe7,0xe, 0xce,0x91,
+0xb6,0xaf,0xe0,0x61,0x3e,0x82,0xe7,0xef,0x10,0xff,0x3e,0xd1,0xe0,0x61,0x3e,0x92,
+0xe1,0x0, 0xc4,0x80,0xb4,0x88,0xe0,0x1, 0x96,0x88,0x26,0xfe,0x16,0x80,0x3e,0xfb,
+0x1, 0x8c,0x16,0x81,0xb6,0xe8,0x96,0xe8,0x2e,0xff,0xe0,0x61,0x3e,0x12,0x96,0xaf,
+0xe7,0xe, 0xce,0x9e,0xb6,0xaf,0x8, 0xe1,0xe1,0x80,0x94,0x9a,0xb4,0x88,0xe0,0x1,
+0x94,0x88,0x24,0xfe,0xc6,0x81,0x0, 0xec,0x8, 0xb3,0x39,0x68,0x39,0xe9,0x3d,0x69,
+0x3c,0xe8,0xe8,0x12,0x54,0x33,0xdf,0x71,0xe8,0x12,0x54,0x32,0x3d,0x63,0x3c,0xe2,
+0x9, 0xa1,0xe7,0xfe,0x0, 0xeb,0x8, 0xb4,0x39,0x68,0x39,0xe9,0x3a,0x6a,0x3d,0xea,
+0x3d,0x69,0x3c,0xe8,0xe8,0x12,0x54,0x33,0xdf,0xb8,0xe8,0x12,0x54,0x32,0x3d,0xe4,
+0x3d,0x63,0x3c,0xe2,0xa, 0x21,0xe7,0xff,0x0, 0xb1,0xe8,0x12,0x57,0x3b,0x16,0x81,
+0x97,0xae,0xe6,0xa9,0xcc,0x18,0xe7,0xd, 0xcf,0x9d,0xb7,0xae,0xe6,0xa9,0xcc,0x99,
+0xe8,0x12,0x57,0xb5,0xe0,0x9, 0xb6,0xef,0xe0,0x8, 0xb6,0xaf,0xe0,0x1, 0x96,0x8f,
+0xe7,0x28,0xce,0x88,0xe0,0x1, 0xb6,0x8f,0xe0,0x1, 0x96,0x8f,0xe7,0x20,0xce,0x89,
+0xe0,0x1, 0xb6,0x8f,0x16,0x80,0xe0,0x9, 0xb5,0x2f,0x97,0xae,0xe7,0xd, 0xcf,0x9d,
+0xb7,0xae,0x38,0x82,0xe8,0x12,0x57,0x3b,0x16,0x81,0x97,0xae,0xe6,0x8a,0xcc,0x28,
+0xe7,0xd, 0xcf,0x9d,0xb7,0xae,0xe6,0xaa,0xcc,0xa9,0xe8,0x12,0x57,0xb5,0x3c,0x98,
+0xe0,0xa, 0xb6,0x8f,0xe0,0xf, 0xb6,0x8f,0x16,0x80,0xe0,0xd, 0xb4,0xcf,0xe0,0xd,
+0xb4,0xef,0xe0,0xe, 0xb4,0x8f,0xe0,0x9, 0xb5,0x4f,0x97,0xae,0xe7,0xd, 0xcf,0x9d,
+0xb7,0xae,0x38,0x82,0xe8,0x32,0x4f,0x0, 0xe8,0x12,0x57,0xb5,0x27,0x1e,0x17,0x0,
+0xe0,0x3, 0xb7,0x4f,0xe0,0x3, 0xb4,0x6f,0x17,0x1, 0xe0,0x4, 0xb7,0xf, 0xe0,0x3,
+0x96,0x8f,0xe6,0xaf,0xce,0xfd,0x26,0x96,0x17,0x0, 0xe8,0x32,0x6f,0x0, 0x16,0x81,
+0xe0,0x3, 0x97,0x2f,0xe0,0x3, 0x97,0x2f,0xe7,0x0, 0xcf,0x1d,0xe0,0x3, 0xb7,0x2f,
+0x17,0x0, 0xe0,0x4, 0xb7,0xf, 0x38,0x82,0xe0,0x3, 0xb4,0x4f,0xe0,0x3, 0xb7,0x6f,
+0x0, 0xe4,0xe0,0x8, 0x96,0xcf,0x26,0xe4,0xe0,0x9, 0xb7,0xf, 0x0, 0xe1,0x8, 0xb2,
+0xe8,0x12,0x57,0xbb,0x16,0x81,0x97,0x2f,0x39,0x68,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,
+0x97,0x38,0xe8,0x12,0x57,0xb5,0xb7,0x2f,0x97,0x48,0xb7,0x4f,0x97,0x58,0xb7,0x6f,
+0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,0x97,0x28,0xe0,0x2,
+0xb7,0x2f,0x8e,0xa8,0x97,0xf, 0xe7,0x0, 0xcf,0x5d,0xb7,0xf, 0x94,0x68,0x24,0x7,
+0xe2,0x0, 0xcc,0x2, 0x5, 0x93,0xe2,0x0, 0xcc,0x4, 0x1, 0x1a,0xdf,0xac,0xe8,0x12,
+0x57,0xb5,0x16,0x80,0xe0,0x4, 0x97,0xcf,0xe0,0x1, 0xb7,0x82,0xe8,0x12,0x57,0xbb,
+0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x9, 0x61,0x97,0xf, 0x16,0xdf,0x3f,0x5d,
+0xb7,0xf, 0x8f,0x32,0x96,0x8f,0x37,0x25,0x3f,0x4d,0xb7,0xf, 0x0, 0xe8,0x8e,0xb2,
+0x97,0xf, 0xe7,0xb, 0xcf,0x1d,0x0, 0xfa,0x8, 0xb1,0xe8,0x12,0x57,0xbb,0x16,0x81,
+0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xb5,0x97,0x38,0xb7,0x2f,
+0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,
+0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x8e,0xa8,0x97,0xf, 0x14,0x10,0xe7,0x0, 0xcf,0x5d,
+0xb7,0xf, 0xe0,0x1, 0xb4,0xcf,0xdf,0x6f,0xe8,0x12,0x57,0xbb,0x16,0x80,0x97,0x2f,
+0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0x8, 0xb3,0xe8,0x12,0x57,0xbb,0x16,0x81,
+0x97,0x2f,0x11,0x80,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x39,0x69,0xe8,0x12,0x57,0xb5,
+0x97,0x28,0xb7,0x2f,0x97,0x48,0xb7,0x4f,0x97,0x38,0xb7,0x6f,0x8f,0x18,0x8e,0x88,
+0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,0x8f,0x28,0xe0,0x2, 0xb7,0xf, 0x97,0x58,
+0xe0,0x2, 0xb1,0xaf,0xe0,0x1, 0xb7,0x4f,0x97,0x68,0xe0,0x1, 0xb7,0x6f,0x97,0x78,
+0xe0,0x2, 0xb7,0x4f,0xe0,0x1, 0x97,0x8, 0xe0,0x2, 0xb7,0x6f,0x8e,0xb8,0x97,0xf,
+0xe0,0x2, 0x14,0x0, 0xe7,0x7, 0xcf,0x1d,0xb7,0xf, 0xdf,0x35,0xe8,0x12,0x57,0xb5,
+0xe0,0x5, 0x97,0xf, 0x37,0x46,0xaf,0x2, 0xe0,0x5, 0x97,0xf, 0xe6,0xaa,0xcf,0x2e,
+0xaf,0x12,0xe0,0x5, 0x97,0x2f,0xb7,0x12,0xe0,0x5, 0x97,0x4f,0xb7,0x22,0xe0,0x6,
+0x97,0x2f,0xb7,0x32,0xe0,0x6, 0x97,0x4f,0xb7,0x42,0xe0,0x5, 0x97,0x6f,0xe0,0x6,
+0x97,0x8f,0xb7,0x52,0xb7,0xe2,0xe8,0x12,0x57,0xbb,0x97,0x2f,0xe7,0xd, 0xcf,0x13,
+0xb7,0x2f,0x9, 0xe1,0x8, 0xb2,0xe8,0x12,0x57,0xbb,0x16,0x81,0x91,0x2f,0x97,0x2f,
+0xe6,0xa2,0xc9,0x72,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xb5,0x97,0x18,
+0xb7,0x2f,0x97,0x28,0xb7,0x4f,0x97,0x38,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,
+0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,0x17,0x0, 0xe0,0x2, 0xb7,0x2f,0xe0,0x0, 0x14,0x40,
+0x97,0xf, 0xe7,0xe, 0xcf,0x19,0xb7,0xf, 0xde,0xee,0xe8,0x12,0x57,0xbb,0x97,0x2f,
+0xe7,0xd, 0xcf,0x12,0xb7,0x2f,0x9, 0x61,0x8, 0xb4,0x8f,0x88,0x39,0x68,0x89,0x98,
+0x94,0x38,0xe0,0x1, 0x15,0x72,0xe0,0x1, 0x14,0xff,0x34,0x21,0xe1,0x23,0x39,0xef,
+0xe0,0x0, 0xd9,0x8f,0xe8,0x12,0x57,0xbb,0x14,0x81,0x97,0x2f,0x16,0x8b,0xe7,0xd,
+0xcf,0x19,0xb7,0x2f,0x3c,0x62,0xe8,0x12,0x57,0xb5,0xe4,0x2, 0xc1,0x81,0xe0,0x1,
+0x92,0xf, 0xe0,0x1, 0x97,0xf, 0xe7,0x28,0xcf,0xd, 0xe0,0x1, 0xb7,0xf, 0xe0,0x1,
+0x97,0xf, 0xe7,0x20,0xcf,0xd, 0xe0,0x1, 0xb7,0xf, 0xdf,0xad,0xe8,0x12,0x57,0xb5,
+0x97,0x32,0xe0,0x1, 0xb2,0xf, 0xe0,0x8, 0x14,0x0, 0xb7,0x2f,0xe0,0x1, 0xb1,0xaf,
+0xde,0xb2,0xe8,0x12,0x56,0x35,0x17,0x80,0x97,0x32,0xe2,0x0, 0xcf,0x83,0x3e,0xef,
+0x3f,0x1f,0xe2,0x1, 0xc6,0xff,0x37,0x21,0x2, 0x95,0xe0,0x7, 0x96,0x8c,0xe0,0xb,
+0x37,0xa2,0x36,0xdb,0xc7,0x81,0xe6,0xac,0xce,0xcd,0xe2,0x0, 0xcf,0x8b,0xb6,0x8e,
+0x1, 0xec,0xe8,0x12,0x57,0xbb,0x16,0x80,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,
+0xa, 0x61,0xe2,0x0, 0xce,0x87,0x2, 0x84,0xe0,0x7, 0x96,0xac,0x0, 0xe9,0xe0,0x7,
+0x96,0xcc,0x0, 0xe6,0x8, 0xb2,0xe8,0x12,0x57,0xbb,0x16,0x81,0x97,0x2f,0xe7,0xd,
+0xcf,0x1d,0xb7,0x2f,0x97,0x38,0xe8,0x12,0x57,0xb5,0xb7,0x2f,0x97,0x48,0xb7,0x4f,
+0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,
+0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x8f,0x38,0x2f,0x1f,0x96,0x8f,0x34,0xa8,0xe7,0x7,
+0xce,0x9e,0x3d,0x49,0xb6,0x8f,0xe0,0x1, 0xb5,0x4f,0x11,0x0, 0x97,0xf, 0x14,0x8,
+0xe7,0x8, 0xcf,0x12,0xb7,0xf, 0xe0,0x2, 0x97,0xf, 0xe0,0x1, 0xcf,0x3, 0xe0,0x2,
+0xb7,0xf, 0xe0,0x1, 0xb1,0x6f,0xde,0x57,0xe8,0x12,0x57,0xbb,0x97,0x2f,0xe7,0xd,
+0xcf,0x12,0xb7,0x2f,0x9, 0x61,0xe2,0x0, 0xcf,0x1, 0x1, 0xe8,0x96,0x8f,0xe7,0x7,
+0xce,0x9e,0xb6,0x8f,0xe0,0x1, 0xb4,0xcf,0xe0,0x1, 0x8e,0xf8,0x97,0xf, 0xe7,0x6,
+0xcf,0x1d,0xb7,0xf, 0x0, 0xdb,0x8, 0xb1,0xe8,0x12,0x57,0xbb,0x16,0x81,0x97,0x2f,
+0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xb5,0x97,0x38,0xb7,0x2f,0x97,0x48,
+0xb7,0x4f,0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,0xe0,0x1,
+0xb7,0x2f,0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x97,0xf, 0xe7,0x7, 0xcf,0x19,0xb7,0xf,
+0x97,0xf, 0xe0,0x1, 0x8e,0xf8,0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0xe0,0x1, 0x8e,0xe8,
+0x97,0xf, 0xe7,0x9, 0xcf,0x1d,0xb7,0xf, 0x8e,0xb8,0x97,0xf, 0xe0,0x20,0x14,0x0,
+0xe7,0x5, 0xcf,0x1d,0xb7,0xf, 0xde,0xf, 0xe8,0x12,0x57,0xbb,0x16,0x80,0x97,0x2f,
+0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0x8, 0xb1,0xe8,0x12,0x57,0xbb,0x16,0x81,
+0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xb5,0x97,0x38,0xb7,0x2f,
+0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,
+0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x97,0xf, 0xe0,0x1, 0x8e,0xf8,0xe7,0x6, 0xcf,0x1d,
+0xb7,0xf, 0xe0,0x1, 0x8e,0xe8,0x97,0xf, 0xe7,0x9, 0xcf,0x1d,0xb7,0xf, 0x8e,0xb8,
+0x97,0xf, 0xe7,0x5, 0xcf,0x1d,0xb7,0xf, 0x94,0x68,0xdd,0xdd,0xe8,0x12,0x57,0xbb,
+0x16,0x80,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0x8, 0xb1,0xe8,0x12,
+0x57,0xbb,0x16,0x81,0x97,0x2f,0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0xe8,0x12,0x57,0xb5,
+0x97,0x38,0xb7,0x2f,0x97,0x48,0xb7,0x4f,0x97,0x58,0xb7,0x6f,0x8f,0x8, 0x8e,0x98,
+0x37,0x28,0x3f,0x1d,0xe0,0x1, 0xb7,0x2f,0x97,0x28,0xe0,0x2, 0xb7,0x2f,0x97,0xf,
+0xe0,0x1, 0x8e,0xf8,0xe7,0x6, 0xcf,0x1d,0xb7,0xf, 0xe0,0x1, 0x8e,0xe8,0x97,0xf,
+0xe7,0x9, 0xcf,0x1d,0xb7,0xf, 0x8e,0xb8,0x97,0xf, 0xe7,0x0, 0x14,0x0, 0xe7,0x5,
+0xcf,0x1d,0xb7,0xf, 0xdd,0xa8,0xe8,0x12,0x57,0xbb,0x16,0x80,0x97,0x2f,0xe7,0xd,
+0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0x8, 0xb1,0xe8,0x12,0x57,0xbb,0x3e,0xe8,0x97,0x2f,
+0x14,0x1, 0xe7,0xd, 0xcf,0x18,0xb7,0x2f,0x97,0x3d,0xe8,0x12,0x57,0xb5,0xb7,0x2f,
+0x8f,0xd, 0x8e,0x1d,0x37,0x28,0x96,0xad,0x3f,0x1c,0xe0,0x1, 0xb7,0x2f,0xe0,0x2,
+0xb6,0xaf,0xe0,0x1, 0xb5,0x4f,0xe0,0x1, 0xb4,0xef,0xe8,0x32,0x6c,0x0, 0xdd,0x83,
+0xe8,0x12,0x57,0xb5,0x16,0x80,0xe0,0x4, 0x94,0x6f,0xe8,0x12,0x57,0xbb,0x97,0x2f,
+0xe7,0xd, 0xcf,0x1d,0xb7,0x2f,0x8, 0xe1,0xe8,0x12,0x57,0x3b,0x15,0x81,0x96,0x2e,
+0x97,0xae,0x15,0x0, 0xe7,0xd, 0xcf,0x9b,0xb7,0xae,0xe6,0xa2,0xce,0x7c,0xe8,0x12,
+0x57,0xb5,0xe0,0xc, 0x96,0xaf,0xe7,0x1, 0xce,0x99,0xe0,0xc, 0xb6,0xaf,0xe0,0xc,
+0x96,0xaf,0xe7,0x3, 0xce,0x9a,0xe0,0xc, 0xb6,0xaf,0x96,0xe8,0xe0,0xc, 0xb6,0xcf,
+0x96,0xf8,0xe0,0xc, 0xb6,0xef,0xe0,0x1, 0x96,0x88,0xe0,0xd, 0xb6,0x8f,0xe0,0x1,
+0x96,0x98,0xe0,0xd, 0xb6,0xaf,0x8e,0xe8,0x8d,0x78,0x36,0xa8,0x3e,0x9a,0xe0,0xe,
+0xb6,0xaf,0xe0,0x1, 0x8e,0x88,0xe0,0x1, 0x8d,0x18,0x36,0xa8,0x3e,0x9a,0xe0,0xe,
+0xb6,0xcf,0xe0,0x1, 0x8e,0xa8,0xe0,0x1, 0x8d,0x38,0x36,0xa8,0xe0,0x1, 0x94,0x28,
+0x3e,0x9a,0xe0,0xe, 0xb6,0xef,0xe0,0x2, 0xb4,0x2f,0xe0,0xc, 0x96,0xaf,0xe7,0x0,
+0xce,0x9b,0xe0,0xc, 0xb6,0xaf,0xe0,0xc, 0xb5,0x8f,0xe0,0x3, 0x96,0x8f,0xe6,0xae,
+0xce,0xfd,0x26,0x90,0xe0,0x3, 0x96,0xaf,0x15,0x81,0xe7,0x1, 0xce,0x9b,0xe0,0x3,
+0xb6,0xaf,0x16,0x80,0xe0,0xc, 0xb6,0x8f,0x97,0xae,0xe7,0xd, 0xcf,0x9c,0xb7,0xae,
+0x38,0x82,0xe0,0xf, 0x96,0xaf,0x26,0xea,0xe0,0xf, 0x96,0xef,0xce,0x81,0xe0,0xf,
+0xb6,0xef,0x0, 0xe4,0x3f,0x83,0xe8,0x12,0x57,0xbb,0x16,0x81,0x97,0x2f,0xe7,0x4,
+0xcf,0x1d,0xb7,0x2f,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8,0x12,0x57,0xbb,
+0x16,0x80,0x97,0x2f,0xe7,0x4, 0xcf,0x1d,0xb7,0x2f,0x3b,0x0, 0x38,0x82,0xe8,0x12,
+0x57,0xbb,0x16,0x81,0x97,0x2f,0x14,0xa, 0xe7,0x4, 0xcf,0x1d,0xb7,0x2f,0xe7,0x67,
+0x0, 0x92,0xe8,0x12,0x57,0xbb,0x16,0x80,0x97,0x2f,0xe7,0x4, 0xcf,0x1d,0xb7,0x2f,
+0x0, 0x0, 0x0, 0xd9,0xc0,0x7e,0xe8,0x12,0x57,0xb1,0x16,0x80,0xb6,0x89,0x97,0x6f,
+0xe7,0x2, 0xcf,0x1d,0xb7,0x6f,0x17,0x20,0x6f,0x3, 0x97,0x4f,0xe6,0xae,0xcf,0x7e,
+0x2f,0x7, 0x4f,0x3, 0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0x6f,0x3, 0x2f,0x77,0x4f,0x3,
+0x2f,0x4, 0x14,0x1, 0xc0,0x2, 0x38,0x82,0x17,0x20,0xb4,0xf, 0x6f,0x3, 0x97,0x4f,
+0xe6,0xaf,0xcf,0x7e,0x2f,0x7, 0x4f,0x3, 0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0x6f,0x3,
+0x2f,0x77,0x4f,0x3, 0x27,0x6f,0x97,0xaf,0x14,0x0, 0xb7,0x89,0x0, 0xec,0x8, 0xb3,
+0xc0,0x7e,0x39,0xe8,0x39,0x69,0x14,0x7e,0x3c,0xe0,0xc4,0x82,0x3c,0x53,0xdf,0xcb,
+0xe2,0x0, 0xcc,0x1, 0x1, 0x7, 0xe6,0xaf,0xcc,0x73,0x57,0x81,0x24,0x5, 0x14,0x0,
+0xaf,0x82,0xc0,0x2, 0x9, 0xe1,0x37,0xc8,0xaf,0x82,0x0, 0xfc,0xe8,0x12,0x57,0xb1,
+0x16,0x81,0x97,0x6f,0xe7,0x2, 0xcf,0x1d,0xb7,0x6f,0x17,0x20,0x96,0xcf,0xe6,0xae,
+0xce,0xfd,0x2e,0x89,0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0x2f,0x79,0x14,0x1, 0x38,0x82,
+0x14,0x0, 0x0, 0xfe,0xb4,0xf, 0x17,0x20,0xb4,0xaf,0x96,0xcf,0xe6,0xad,0xce,0xfd,
+0x2e,0xf8,0xc7,0x7f,0xe2,0x1, 0xc7,0x7f,0x2f,0x79,0x0, 0xf1,0x8, 0xb3,0x39,0x68,
+0x39,0xe9,0x3c,0xe3,0x3c,0x62,0xdf,0xc4,0x2c,0x7d,0x9, 0xe1,0xe8,0x25,0x4f,0xad,
+0xe2,0x0, 0xcf,0x81,0x1, 0x88,0xe8,0x12,0x57,0x38,0x96,0x8e,0xe7,0x6, 0xce,0x9f,
+0xb6,0x8e,0x0, 0xfc,0xe8,0x25,0x4f,0xae,0xe2,0x1, 0xcf,0xb3,0x5, 0x97,0x8, 0xb1,
+0x17,0x80,0xe8,0x25,0x6f,0xae,0xdf,0x6c,0xe8,0xf4,0x4f,0xab,0xe2,0x1, 0xcf,0x86,
+0x1, 0x8a,0x14,0x82,0xe7,0x67,0x14,0x21,0xdf,0xba,0xe0,0x1, 0x14,0xd0,0xe7,0x67,
+0x14,0x22,0xdf,0xb5,0x8, 0xa1,0xe7,0xfe,0x0, 0xe6,0x38,0x82,0x8, 0xb2,0xe8,0x12,
+0x57,0xb0,0xe0,0x6, 0x91,0x4f,0xe6,0xad,0xc9,0x72,0x29,0x39,0x14,0x1, 0xef,0xfa,
+0xd7,0x7d,0xe0,0x32,0x14,0x82,0xe7,0xe9,0x14,0x30,0xdf,0xc1,0xe0,0x32,0x14,0x83,
+0xe7,0xe9,0x14,0x31,0xdf,0xbc,0xe0,0x32,0x14,0x84,0xe7,0xe9,0x14,0x32,0xdf,0xb7,
+0xe0,0x32,0x14,0x85,0xe7,0xe9,0x14,0x33,0xdf,0xb2,0xe0,0x32,0x14,0x86,0xe7,0xe9,
+0x14,0x34,0xdf,0xad,0xe0,0x32,0x14,0x87,0xe7,0xe9,0x14,0x35,0xdf,0xa8,0xe0,0x32,
+0x14,0x88,0xe7,0xe9,0x14,0x36,0xdf,0xa3,0xe0,0x32,0x14,0x89,0xe7,0xa4,0x14,0x2,
+0xdf,0x9e,0xe0,0x32,0x14,0x8a,0xe7,0xf0,0x14,0x1, 0xdf,0x99,0xe7,0xf0,0x14,0x3,
+0xe0,0x32,0x14,0x8b,0xdf,0x94,0x3c,0x62,0xef,0xfa,0xd7,0x48,0xe8,0x32,0x4f,0x8b,
+0x27,0x84,0x17,0x81,0xe8,0x25,0x6f,0xad,0xe8,0x32,0x4f,0x89,0xe2,0x1, 0xcf,0x86,
+0x1, 0x6, 0xe8,0x32,0x4f,0x8a,0xe2,0x1, 0xcf,0x86,0x1, 0x86,0xe7,0xff,0x17,0x86,
+0xe8,0xf4,0x6f,0xab,0x9, 0x61,0xe7,0xff,0x17,0x87,0x0, 0xfb,0x8, 0xb2,0xc0,0x5c,
+0x39,0x68,0x3c,0x60,0x15,0x24,0x14,0x80,0xc4,0x2, 0xd6,0xaa,0x29,0x1b,0xe8,0x56,
+0x4f,0xaf,0xe8,0x30,0x55,0x59,0x6f,0x83,0x3c,0x60,0xe8,0x56,0x4f,0xae,0xe8,0x30,
+0x54,0xd9,0x6f,0x82,0xe0,0x9b,0x17,0xbc,0x37,0xc1,0x77,0x84,0xe2,0x1, 0xc5,0x7f,
+0xe8,0x72,0x57,0xef,0xe2,0x1, 0xc4,0xff,0x37,0xc1,0xc4,0x2, 0x77,0x85,0x77,0x86,
+0xdd,0x52,0xc0,0x24,0x9, 0x61,0x8, 0xb7,0xc0,0x7e,0x3b,0x68,0x3c,0x6b,0x3a,0x69,
+0x39,0x6a,0x39,0xeb,0xe8,0x30,0x53,0xc8,0xef,0xfb,0xd5,0x2a,0x3a,0xe8,0xef,0xfa,
+0xd0,0xa7,0xe0,0xa, 0x15,0x24,0x14,0x80,0x3c,0x66,0xd6,0x7a,0x22,0x88,0xe0,0xa,
+0x15,0x24,0x14,0x80,0x3c,0x64,0xd6,0x74,0xe0,0xb0,0x11,0x4, 0xe8,0x12,0x57,0xb0,
+0xe0,0x6, 0x97,0xcf,0xe8,0x24,0x57,0x61,0xe6,0xa1,0xcf,0xff,0xe7,0x6, 0xcf,0x1f,
+0xe8,0x24,0x77,0x61,0x17,0x80,0x3c,0x6f,0x3c,0xe3,0x77,0x81,0xef,0xfa,0xd1,0xd,
+0x57,0x81,0x24,0x7a,0x3f,0x66,0xc7,0x7e,0x17,0x80,0xe0,0xa5,0x16,0x60,0x3f,0xf7,
+0x1, 0x99,0x14,0x1, 0x77,0x81,0xef,0xfa,0xd0,0xa8,0x57,0x81,0x22,0x87,0x3f,0x64,
+0x37,0xa1,0xc7,0x7e,0x3f,0x92,0x39,0x7f,0x1, 0x97,0x3c,0xe3,0x3c,0x66,0xef,0xfa,
+0xd1,0xc5,0x22,0x85,0x3c,0xe3,0x3c,0x64,0xef,0xfa,0xd1,0xc0,0x14,0x1, 0xc0,0x2,
+0xb, 0xe1,0xe0,0xd, 0x37,0xa1,0x3e,0x9c,0x95,0x8d,0xe0,0x80,0x96,0x9e,0xc7,0x81,
+0x3e,0x9b,0xb6,0x8e,0x0, 0xdd,0xe1,0x80,0x96,0x12,0xe0,0x80,0x96,0x9e,0x3e,0x9c,
+0xb6,0x8e,0x0, 0xe2,0xe8,0x72,0x54,0xef,0xe0,0x9b,0x15,0x3c,0x3c,0x69,0xe7,0x6f,
+0x0, 0xf7,0x8, 0xb7,0xe8,0x52,0x4a,0x82,0x3b,0x68,0xe0,0x1, 0x14,0x7f,0xe0,0x4d,
+0x10,0xe2,0x3e,0x68,0x16,0x80,0x11,0x81,0x12,0x2, 0x11,0x3, 0x3a,0xfd,0x1, 0x82,
+0xb, 0xe1,0x3e,0xfa,0x1, 0x28,0x8f,0x81,0x8f,0x11,0xe0,0xf, 0x3b,0x2f,0xe0,0x41,
+0x3f,0xaf,0xe2,0x1, 0xc7,0xff,0xe0,0xe, 0x3c,0xae,0xe0,0x41,0x3f,0x2e,0xe1,0x27,
+0x39,0xaf,0xe2,0x1, 0xc7,0x7f,0x23,0x84,0xe1,0x27,0x39,0xae,0x2b,0x9b,0xe1,0x27,
+0x3a,0x2f,0x23,0x84,0xe1,0x27,0x3a,0x2e,0x2b,0x93,0x25,0x89,0xe1,0x2f,0x39,0x2f,
+0x27,0x86,0x39,0x7e,0x3f,0xe2,0xe0,0x6f,0x3c,0xac,0x3e,0x6f,0xe1,0x28,0x3e,0x58,
+0xe2,0x1, 0xc4,0x7f,0xc6,0x81,0xe2,0x1, 0xc6,0xff,0xc0,0x82,0x0, 0xd0,0x16,0x2,
+0x0, 0xf6,0x14,0x1, 0x0, 0xce,0x3d,0x78,0x2, 0x91,0x3f,0x69,0xc7,0x7f,0x3f,0x2a,
+0x3c,0x7e,0xe0,0xf, 0x3c,0x2a,0xe2,0x1, 0xc7,0xff,0x2, 0xe, 0xe0,0x8, 0x35,0x29,
+0xe0,0x2, 0xc4,0x0, 0x34,0x48,0xaf,0x8b,0x38,0x82,0xc4,0x1, 0x3c,0x1a,0xe2,0x1,
+0xc4,0x7f,0x17,0x80,0x0, 0xf9,0xe0,0x8, 0x3d,0x28,0x3c,0x19,0xe2,0x1, 0xc4,0x7f,
+0x0, 0xf3,0x8, 0xb6,0xe8,0x56,0x4f,0xaf,0x3b,0x69,0xe0,0xa6,0x3f,0x88,0xe0,0x91,
+0x17,0x98,0x33,0x21,0x3f,0x96,0xe8,0x52,0x4f,0x1b,0x91,0x8f,0x39,0xae,0xe2,0x0,
+0xc9,0x80,0xe0,0x0, 0x5, 0x62,0xe8,0x19,0x51,0x6, 0x3a,0xe8,0x97,0xf2,0x3a,0x69,
+0x3f,0xf3,0x2, 0x6, 0xe0,0x1, 0x8f,0xa2,0xc7,0x81,0xe0,0x1, 0xaf,0xa2,0x16,0x81,
+0x8f,0x2, 0xe0,0xe, 0x3c,0x2e,0xe0,0x41,0x3f,0x2e,0xe2,0x1, 0xc7,0x7f,0xe1,0x2e,
+0x3f,0x1d,0x2f,0xb, 0x8f,0x92,0xe0,0xf, 0x3c,0xaf,0xe0,0x41,0x3f,0xaf,0xe2,0x1,
+0xc7,0xff,0xe1,0x2f,0x3f,0x9d,0x27,0x94,0x8f,0xc2,0x8d,0x22,0xe2,0x0, 0xcf,0x82,
+0x5, 0xbc,0x8f,0xd2,0xe2,0x0, 0xcf,0x82,0x5, 0xb8,0x15,0x81,0xdf,0x63,0x3f,0xe8,
+0xc7,0xfe,0xe2,0x1, 0xc7,0xff,0xe2,0x0, 0xcf,0x81,0x2, 0xb1,0x31,0x81,0x3d,0xe2,
+0xc5,0x92,0x97,0x9b,0xe0,0x1, 0x97,0x12,0x3f,0x93,0xe0,0xc, 0x31,0x8f,0xe0,0x2e,
+0x3f,0x7c,0xe0,0x1, 0xb7,0x12,0xb7,0x9b,0xe8,0x25,0x4f,0xd6,0x27,0x89,0xe8,0x81,
+0x57,0xc5,0x3f,0x96,0x92,0x8f,0xe8,0x81,0x57,0xc4,0x3b,0x1f,0x92,0x6, 0x3e,0xe2,
+0xc6,0x96,0x97,0x9d,0xe0,0x1, 0x97,0x32,0xe0,0x8e,0x39,0x85,0xe0,0x1, 0xb7,0x32,
+0xb7,0x9d,0x3e,0xe2,0xc6,0x9a,0xe0,0x1, 0x97,0x52,0x97,0x9d,0xe0,0x8e,0x39,0x84,
+0xe0,0x1, 0xb7,0x52,0xb7,0x9d,0xb, 0x61,0x15,0x80,0x0, 0xc9,0xe2,0x0, 0xcc,0x1,
+0x17,0x80,0xe0,0x6f,0x39,0xa3,0x39,0xef,0x0, 0xcb,0x8, 0xb7,0xc0,0x7e,0xe8,0x19,
+0x51,0x6, 0x3f,0x62,0xc7,0x12,0xe0,0x1, 0x97,0x92,0x96,0x9e,0x3f,0xcd,0x2f,0x85,
+0xe0,0x1, 0xb7,0x92,0x17,0x81,0xb7,0x9e,0xe8,0x25,0x4a,0xd6,0x2a,0x9b,0x3d,0x62,
+0xc5,0x16,0x96,0x1a,0xe0,0x1, 0x97,0x32,0x3d,0xe2,0xc5,0x9a,0x96,0x9b,0xe0,0x1,
+0x97,0xd2,0xe0,0x9, 0x36,0x4a,0x37,0x26,0x3f,0x49,0xe0,0x1, 0xb7,0x32,0x36,0x26,
+0xe0,0xe, 0x36,0xca,0x37,0xa6,0xb6,0x1a,0x3f,0xce,0x36,0xa6,0xe0,0x1, 0xb7,0xd2,
+0xb6,0x9b,0xe0,0x1, 0x91,0xa2,0xe0,0x1, 0x93,0x12,0xe0,0x1, 0x94,0x32,0xe0,0x1,
+0x94,0xc2,0x3d,0xe3,0x3d,0x66,0xd4,0x6d,0x3a,0x69,0xe0,0x1, 0x94,0x52,0xe0,0x1,
+0x94,0xe2,0x3d,0xe3,0x3d,0x66,0xd4,0x65,0x8f,0xb2,0xe0,0x4d,0x11,0xe2,0xe4,0x0,
+0xc7,0x8e,0xe0,0xe, 0x39,0x9f,0xe0,0x0, 0x22,0xf7,0x16,0x80,0xe0,0x24,0x3a,0x6d,
+0xe0,0x29,0x3c,0xed,0xe0,0x7, 0xb2,0x6e,0x3f,0x93,0xe0,0x7, 0xb4,0xfe,0xe0,0x1,
+0x8f,0x22,0xe2,0x0, 0xcf,0x20,0xe0,0x0, 0x2, 0xed,0xe0,0x10,0xaf,0x2f,0x13,0x1,
+0x8c,0x22,0xef,0xfd,0xd9,0x3e,0xe8,0x19,0x52,0x86,0xe0,0x26,0x3c,0x66,0x8d,0x95,
+0xe0,0x0, 0x25,0xe3,0xe8,0x56,0x4f,0xb1,0x3f,0x6f,0xc7,0x7f,0x3d,0xfe,0xe0,0x0,
+0x1, 0x5c,0xe2,0x0, 0xcd,0x81,0xe0,0x0, 0x1, 0x5b,0xc7,0xfe,0xe0,0x2b,0x3d,0x8f,
+0x35,0xa2,0x8f,0x5, 0x27,0x8, 0xe8,0x56,0x4f,0xb0,0x3e,0xef,0xc6,0xff,0x3f,0x7d,
+0xe0,0x0, 0x1, 0xd1,0xc5,0x86,0xe2,0x1, 0xc5,0xff,0xe8,0x52,0x4f,0xaf,0xe0,0x1,
+0x92,0x15,0xe0,0x1, 0x91,0x25,0xe0,0xb, 0x3f,0xab,0xe0,0xa, 0x35,0x8f,0x3c,0x64,
+0x3c,0xe2,0xd4,0x17,0x8f,0xb5,0xe0,0xa, 0x33,0xf, 0x13,0x8e,0x3b,0xbf,0x3d,0x78,
+0xe0,0xd, 0x39,0x97,0x3f,0xea,0x3f,0x66,0x2, 0x84,0x1, 0x85,0x3b,0x79,0x5, 0x83,
+0x3f,0xe8,0x3f,0x69,0x3c,0x6f,0xe0,0x0, 0x17,0xff,0xe0,0x8e,0x3f,0x5f,0xe4,0x0,
+0xc4,0x7f,0x3d,0xe6,0x3c,0x1e,0x3c,0xef,0x76,0x81,0xd4,0x34,0x56,0x81,0xe0,0xf,
+0x39,0x97,0xe0,0x10,0xac,0x9d,0x8f,0x25,0xe0,0x8, 0xb2,0x3f,0x37,0x21,0x39,0x9e,
+0x8f,0x3, 0xe0,0x8, 0xb1,0x4f,0xe0,0x10,0xaf,0x3f,0x8f,0x13,0xe0,0x10,0xaf,0x4f,
+0xc0,0x2, 0xb, 0xe1,0xc2,0x20,0xc4,0xa0,0xe0,0x7, 0xb2,0x6e,0xe7,0xff,0x0, 0x8e,
+0x17,0x20,0xe7,0xff,0x0, 0x94,0x15,0x86,0xe7,0xff,0x0, 0xad,0x15,0x84,0xe7,0xff,
+0x0, 0xaa,0xe2,0x0, 0xcf,0x1, 0x1, 0x5, 0xc7,0xfe,0x3f,0x7f,0xe7,0xff,0x1, 0xaf,
+0xc5,0x84,0xe7,0xff,0x0, 0xaa,0x8, 0xb6,0xc0,0x62,0x3b,0x68,0x3c,0x6a,0x39,0xe9,
+0x3a,0xea,0x3a,0x6b,0xef,0xfd,0xd8,0xbd,0x17,0x83,0xe0,0x28,0x3c,0x3f,0xe8,0x29,
+0x57,0x98,0x74,0x8, 0x3c,0x7f,0x3, 0x2, 0x77,0x88,0xe0,0xe, 0x32,0xa1,0xe0,0x4d,
+0x17,0xe2,0x3f,0x9e,0x39,0x60,0x8c,0xf, 0x8f,0x9f,0xc1,0x2, 0xe8,0x56,0x4c,0xae,
+0xaf,0x92,0x3d,0xe0,0x17,0x80,0xc5,0x88,0x3d,0x66,0xe0,0x1, 0xaf,0xa2,0x17,0x80,
+0x77,0x8a,0x77,0x8b,0x77,0x8c,0x77,0x8d,0x77,0x8e,0x77,0x8f,0xa9,0xd2,0x6c,0x2,
+0xaa,0xa2,0xaa,0x32,0xab,0x42,0xde,0x60,0xac,0x72,0x3d,0xe0,0xe8,0x56,0x4c,0xaf,
+0x8c,0x12,0x3d,0x63,0xc5,0x8a,0xde,0x58,0x8f,0xf2,0x89,0xe2,0xe8,0x19,0x71,0x6,
+0x3f,0x93,0xaf,0xf2,0xe0,0x1, 0x8f,0x82,0x3c,0x1f,0xe0,0x1, 0xac,0x12,0x8f,0xf2,
+0x3f,0xf3,0x2, 0x84,0xde,0xe3,0xc0,0x1e,0xb, 0x61,0xe0,0x1, 0x8a,0x2, 0xe0,0x1,
+0x8f,0x92,0x3f,0xf4,0x2, 0x85,0xc1,0x81,0xe2,0x1, 0xc1,0xff,0x0, 0xf1,0x3c,0xe4,
+0x3c,0x63,0xc2,0x1, 0xde,0x57,0xe2,0x1, 0xc2,0x7f,0x0, 0xf2,0x8, 0xb7,0xc0,0x70,
+0x3a,0x60,0x11,0x0, 0xe0,0x3, 0x17,0xff,0xc2,0x10,0x3b,0xe8,0x3f,0x69,0xe1,0xc0,
+0xb7,0xb4,0x3b,0x62,0x77,0x85,0x71,0x6, 0x71,0x7, 0x3f,0xe0,0xc7,0x8e,0x3f,0x92,
+0x39,0xe6,0xe0,0x5, 0x3a,0x12,0x77,0x84,0x0, 0x82,0x11,0x81,0xe0,0xf, 0x3a,0x93,
+0x8c,0xf, 0x57,0x84,0x3c,0x17,0x3f,0x93,0x8c,0x8f,0xe2,0x1, 0xc4,0x7f,0xe0,0x43,
+0x3e,0x8, 0x3c,0x9e,0xe2,0x1, 0xc4,0xff,0xe0,0x2d,0x3e,0xa, 0xe0,0x43,0x3f,0x89,
+0x26,0x84,0xe0,0x2d,0x3f,0x8b,0x2e,0xab,0xe8,0x19,0x56,0x86,0x80,0xed,0x38,0xfc,
+0x2, 0x26,0x80,0xfd,0x38,0xfc,0x5, 0x23,0xe0,0x1, 0x80,0x8d,0x38,0xff,0x2, 0x1f,
+0xe0,0x1, 0x80,0x9d,0x38,0xff,0x5, 0x1b,0xe8,0x56,0x48,0xaf,0xe0,0xaf,0x38,0x8c,
+0x96,0x6d,0x3e,0x1f,0x88,0x8c,0x28,0x93,0x37,0xa1,0xe0,0x91,0x10,0x98,0x3f,0x91,
+0xe0,0x1, 0x96,0x8d,0x97,0x8f,0x3f,0xfd,0x2, 0xa, 0x17,0x82,0xaf,0x8c,0x77,0x3,
+0x75,0x2, 0x75,0x81,0xdd,0xff,0x55,0x81,0x55,0x2, 0x57,0x3, 0xe7,0xff,0x21,0xbf,
+0xc1,0x2, 0xe2,0x0, 0xc9,0x4, 0xe7,0xff,0x1, 0xb2,0xc0,0x10,0xb, 0xe1,0x8, 0xb7,
+0x3b,0xe8,0x39,0xe8,0x39,0x69,0xc3,0xff,0xe8,0x56,0x4f,0xaf,0x3f,0x62,0xe0,0xae,
+0x3f,0x83,0xe8,0x19,0x57,0x86,0x97,0xef,0x3f,0x9e,0x8f,0xf, 0xe0,0x1, 0x2f,0x45,
+0x3a,0xe3,0x3a,0x62,0x16,0x81,0xe2,0x1, 0xc2,0xff,0xe2,0x1, 0xc2,0x7f,0xae,0x8f,
+0x3c,0xe4,0x3c,0x65,0xdd,0xd7,0xe8,0x19,0x56,0x6, 0x8f,0xec,0x39,0xff,0x5, 0x1d,
+0xe8,0x56,0x4f,0xaf,0x3f,0x62,0xe0,0xae,0x3b,0x8f,0x97,0xec,0x3f,0x9e,0x8e,0x8f,
+0x2e,0x94,0xe0,0x91,0x15,0x98,0x37,0x21,0x3f,0x1b,0x95,0x8e,0xe0,0x1, 0x97,0xc,
+0x3c,0x65,0xc4,0x7f,0x3d,0xfe,0xe2,0x1, 0xc4,0x7f,0xe0,0x43,0x3b,0x8, 0xe0,0x0,
+0x5, 0x7b,0x3c,0xe2,0x3c,0x66,0xdf,0xc4,0xe8,0x19,0x56,0x6, 0xe0,0x1, 0x8f,0x8c,
+0x39,0x7f,0x5, 0x1e,0xe8,0x56,0x4f,0x2f,0x3f,0xe2,0xc7,0xff,0xe0,0xaf,0x3f,0x3,
+0x96,0xec,0x3e,0x9f,0x8f,0xd, 0x2f,0x14,0xe0,0x91,0x15,0x98,0x37,0xa1,0x3f,0x9b,
+0x95,0x8f,0xe0,0x1, 0x97,0x8c,0x3c,0xe4,0xc4,0xff,0x3d,0xff,0xe2,0x1, 0xc4,0xff,
+0xe0,0x43,0x3b,0x9, 0xe0,0x0, 0x5, 0x63,0x3c,0xe6,0x3c,0x63,0xdf,0xa1,0xe8,0x19,
+0x56,0x6, 0x3f,0xe3,0x8f,0x7c,0xc7,0x81,0x3f,0xfe,0x3, 0x1e,0xe8,0x56,0x4f,0x2f,
+0x3e,0xe2,0xe0,0xad,0x3f,0xf, 0x97,0xec,0x3f,0x6d,0x3f,0x9d,0x8e,0x8f,0x2e,0x94,
+0xe0,0x91,0x15,0x98,0x37,0x21,0x3f,0x1b,0x95,0x8e,0xe0,0x1, 0x97,0xc, 0x3c,0x65,
+0xc4,0x1, 0x3d,0xfe,0xe2,0x1, 0xc4,0x7f,0xe0,0x43,0x3b,0x8, 0xe0,0x0, 0x5, 0x4a,
+0x3c,0xe2,0x3c,0x66,0xdf,0x7d,0xe8,0x19,0x56,0x86,0x3f,0xe2,0xe0,0x1, 0x8f,0x1d,
+0xc7,0x81,0x3f,0xfe,0xe0,0x0, 0x3, 0x49,0xe8,0x56,0x4f,0x2f,0xe0,0xaf,0x3f,0x3,
+0x97,0x6d,0x3f,0x1f,0x8e,0xe, 0xe0,0x0, 0x2e,0x40,0xe0,0x91,0x16,0x18,0x37,0xa1,
+0x3f,0x9c,0x96,0xf, 0xe0,0x1, 0x97,0x8d,0x3c,0xe4,0xc4,0x81,0x3e,0x7f,0xe2,0x1,
+0xc4,0xff,0xe0,0x43,0x3a,0x9, 0x2, 0xc, 0x17,0x82,0x3c,0x65,0xaf,0x8e,0xdd,0x4a,
+0x3d,0xe2,0x3d,0x63,0x3c,0xe4,0x3c,0x63,0xb, 0xa1,0xe7,0xfd,0x0, 0xf1,0x39,0x64,
+0xe7,0xfe,0x0, 0xd4,0x17,0x2, 0x3c,0xe4,0xaf,0xf, 0xdd,0x3c,0x3d,0xe2,0x3d,0x63,
+0x3c,0xe2,0x3c,0x66,0xde,0xe4,0xe7,0xff,0x0, 0x81,0x17,0x82,0x3c,0x65,0xaf,0x8d,
+0xdd,0x31,0x3d,0xe2,0x3d,0x63,0x3c,0xe6,0x3c,0x63,0xde,0xd9,0xe7,0xff,0x0, 0x99,
+0x17,0x2, 0x3c,0xe4,0xaf,0xf, 0xdd,0x26,0x3d,0xe2,0x3d,0x63,0x3c,0xe2,0x3c,0x66,
+0xde,0xce,0xe7,0xff,0x0, 0xb2,0xb, 0xe1,0x8, 0xb6,0xc0,0x7e,0xe8,0x52,0x4a,0x2,
+0xe2,0x0, 0xca,0x1, 0xe0,0x0, 0x5, 0xf0,0xe0,0x4d,0x16,0x62,0xe0,0xf, 0x34,0x21,
+0x3f,0x9c,0x3a,0xe8,0xe0,0x1, 0x15,0xff,0x8c,0xf, 0x8c,0x9f,0x3d,0x6c,0x38,0xeb,
+0x16,0x80,0x3a,0xfd,0x1, 0x19,0x8f,0x8a,0x8f,0x1a,0xe0,0xf, 0x3c,0x2f,0xe0,0xe,
+0x3c,0xae,0xe0,0x41,0x3f,0xaf,0xe0,0x41,0x3f,0x2e,0xe2,0x1, 0xc7,0xff,0xe2,0x1,
+0xc7,0x7f,0xe0,0x6, 0x3f,0x9e,0xe2,0x1, 0xc3,0x7f,0x3b,0x71,0x3, 0x85,0x39,0x6e,
+0x39,0xef,0x3d,0xed,0x38,0xe6,0xc6,0x81,0xe2,0x1, 0xc6,0xff,0x3a,0x7d,0xc5,0x2,
+0x1, 0xe1,0xe2,0x0, 0xc8,0x8f,0x2, 0xbf,0x35,0xa1,0xe0,0xf, 0x3e,0x1b,0x8d,0x9f,
+0x8d,0xf, 0x3e,0xe0,0x3e,0x60,0xc6,0x2, 0xc6,0x83,0xef,0xfd,0xd8,0xd8,0x39,0xf2,
+0x4f,0x83,0xe8,0x72,0x55,0xf0,0x4f,0x2, 0xe8,0x56,0x4e,0x2f,0x5, 0x98,0x3f,0x3c,
+0x27,0x8d,0xe0,0xd, 0x3f,0x9e,0xe0,0xff,0xc6,0xff,0x36,0xa1,0x3e,0x9b,0x96,0x8d,
+0xe2,0x0, 0xcf,0xa2,0xe0,0x28,0x3c,0x6d,0x2, 0x88,0x3f,0x9e,0xc7,0x81,0x37,0xa1,
+0x3f,0x9b,0x97,0x8f,0xe0,0x28,0x3c,0x6f,0xc0,0x2, 0xb, 0x61,0x27,0xf, 0x3e,0xee,
+0xc6,0xff,0x3d,0x6f,0xe0,0xaa,0x3e,0x8c,0xe2,0x0, 0xcf,0x10,0x3e,0xea,0x36,0xa1,
+0x3e,0x9b,0x96,0x8d,0xe0,0x28,0x3c,0x6d,0x2, 0xf0,0x3e,0xee,0xc6,0x81,0xe0,0xaf,
+0x3e,0x8c,0x0, 0xe6,0xe0,0xff,0x14,0x7f,0x0, 0xe8,0x8, 0xb7,0xe1,0xfa,0xc0,0x3e,
+0x3b,0x68,0x3c,0x6a,0x3a,0xe9,0x39,0xea,0x39,0x6b,0xe8,0x56,0x4a,0x2f,0xef,0xfd,
+0xd6,0xb0,0x17,0x83,0xe0,0x28,0x3c,0x3f,0xe8,0x29,0x57,0x98,0x74,0x11,0x3c,0x7f,
+0x3, 0x2, 0x77,0x91,0xe0,0xe, 0x31,0xa1,0xe0,0x4d,0x17,0xe2,0x3f,0x9e,0x8c,0xf,
+0x8f,0x9f,0x69,0x17,0x11,0x0, 0x6f,0x95,0x17,0x80,0x6f,0x9e,0x3f,0xe0,0xc7,0x94,
+0xe0,0x1, 0xb1,0x2f,0x3f,0xe0,0xc7,0x94,0xe8,0x56,0x4c,0xae,0xe0,0x1, 0xb1,0x4f,
+0x3d,0xe0,0x3f,0xe0,0xc7,0x94,0xc5,0x9a,0x3d,0x66,0xe0,0x1, 0xb1,0x6f,0x6a,0x99,
+0x6c,0x14,0x69,0x96,0x6b,0x18,0x71,0x13,0x71,0x15,0x71,0x17,0xdc,0x4d,0xe8,0x56,
+0x4c,0xaf,0x6c,0x1b,0x3d,0xe0,0x4c,0x15,0x3d,0x65,0xc5,0x9c,0xdc,0x45,0x4d,0x14,
+0x4e,0x95,0xe0,0x91,0x16,0x18,0xe0,0xad,0x3d,0x4, 0x4a,0x9c,0x36,0xa1,0x3e,0x9c,
+0x94,0x8d,0x16,0x86,0xc4,0x81,0xe0,0x2d,0x3c,0xbd,0x4f,0x9a,0x4f,0x1b,0x76,0x89,
+0x3e,0xe5,0xe0,0xad,0x3f,0x84,0x3f,0x1f,0x3c,0x15,0x3d,0xe0,0xc5,0xb2,0xe2,0x1,
+0xc4,0x7f,0xe0,0xa, 0x36,0xa1,0xe2,0x1, 0xc7,0x7f,0xe0,0x1, 0x32,0x21,0x75,0x90,
+0x3e,0x9b,0x70,0x81,0x3e,0x1a,0x74,0x83,0x3d,0xe2,0x74,0x4, 0x71,0x5, 0x71,0x6,
+0x6f,0x1b,0x6c,0x1d,0x71,0x12,0x3f,0x7f,0xe0,0x0, 0x2, 0xd4,0x25,0x86,0x54,0x5,
+0x54,0x86,0x15,0x0, 0xd1,0x87,0x74,0x92,0x3c,0x63,0xdf,0xf, 0xe2,0xff,0xcc,0x7f,
+0x1, 0x6, 0x57,0x92,0x3f,0xf8,0x2, 0x3, 0xc4,0x1, 0x74,0x12,0x3f,0xe0,0x44,0x95,
+0x44,0x14,0xc7,0x94,0xe8,0x19,0x77,0x86,0xde,0x2b,0xdc,0x98,0xe0,0x5, 0xc0,0x42,
+0xb, 0xe1,0x51,0x2, 0x53,0x2, 0x31,0x21,0x39,0x1c,0x54,0x9, 0x91,0x2, 0x3b,0x1d,
+0x13,0x80,0xab,0x86,0xe0,0x26,0x39,0x18,0x23,0x1b,0x54,0x83,0xe0,0x26,0x3c,0x92,
+0x23,0x17,0x38,0xe0,0x3c,0x60,0x71,0x8, 0xc0,0x8a,0xc4,0xe, 0x31,0xf, 0x71,0x7,
+0x3c,0xe8,0x39,0x61,0xe0,0x9, 0xc, 0x9, 0xe0,0x2, 0x8, 0x82,0xe0,0x7, 0x39,0x19,
+0xe0,0x26,0x38,0xf8,0x3c,0xe0,0xc4,0x8a,0xc5,0x81,0xe0,0x9, 0xb, 0x17,0xc5,0x1,
+0x50,0x82,0xe2,0x1, 0xc5,0x7f,0xc0,0x81,0x70,0x82,0x53,0x4, 0x3b,0x7a,0x2, 0xd2,
+0x53,0x81,0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3e,0x94,0x3e,0x17,0xe7,0xff,0x0, 0xad,
+0x11,0x0, 0x3d,0x65,0x71,0x2, 0x0, 0xf2,0x24,0xb, 0xe2,0x0, 0xcc,0x1, 0x1, 0x11,
+0xe0,0xb0,0x17,0x84,0xe8,0x72,0x77,0xee,0xe0,0xc4,0x17,0xcc,0x0, 0x87,0xe0,0xa5,
+0x17,0xe0,0xe8,0x72,0x77,0xee,0xe0,0xba,0x17,0xa8,0xe8,0x72,0x77,0xef,0x38,0x82,
+0xe0,0xd9,0x17,0x94,0xe8,0x72,0x77,0xee,0xe0,0xd9,0x17,0x96,0x0, 0xf7,0xe8,0x61,
+0x4f,0xa6,0xe8,0x72,0x54,0x70,0xe8,0x72,0x54,0xee,0x2f,0x83,0xe7,0x67,0x0, 0x90,
+0xe8,0x72,0x55,0x6f,0x15,0x81,0xe7,0x66,0x0, 0xea,0x8, 0xb3,0xe1,0xff,0xc0,0x22,
+0xe8,0xb, 0x4f,0x6a,0x17,0x80,0xe0,0xc, 0x37,0x43,0xe0,0x4e,0x16,0xda,0x3d,0xef,
+0xc7,0x81,0xe2,0x1, 0xc7,0xff,0x3e,0x7f,0xe1,0x80,0xad,0x9d,0x3, 0xfa,0x3f,0xe0,
+0xc7,0xa4,0x37,0xc1,0xe0,0xe6,0x11,0xb2,0x77,0x8c,0xe0,0xf, 0x31,0xc1,0x77,0x8b,
+0x3c,0xe0,0xe8,0x56,0x4f,0xae,0xe8,0x72,0x56,0xf0,0x6f,0x91,0x3c,0x60,0xe8,0x56,
+0x4f,0xaf,0x11,0x0, 0x6f,0x90,0x36,0xc1,0xe8,0x29,0x57,0x8f,0xc7,0x7f,0x77,0x8d,
+0xc4,0x82,0xe8,0x29,0x57,0x90,0xc4,0x10,0x77,0x8e,0xe8,0x29,0x57,0x94,0xe8,0x29,
+0x71,0x1, 0x77,0x8f,0xe8,0x29,0x57,0x95,0xe8,0x29,0x71,0x2, 0x77,0x90,0xe8,0x25,
+0x4f,0x9b,0xe8,0x29,0x71,0x3, 0x6f,0x93,0xe8,0x29,0x71,0x4, 0xe8,0x29,0x71,0x6,
+0x6f,0x12,0x76,0x8a,0xef,0xff,0xd7,0x1a,0x57,0x82,0x4d,0x82,0xe8,0x29,0x77,0x82,
+0x14,0x1, 0x57,0x83,0x4e,0x3, 0xe8,0x29,0x77,0x83,0x57,0x86,0xe8,0x52,0x6d,0x82,
+0xe8,0x29,0x77,0x84,0x57,0x87,0xe8,0x52,0x6e,0x3, 0xe8,0x52,0x6f,0x8a,0x37,0xc8,
+0xe8,0x52,0x6f,0x8b,0x57,0x84,0xe8,0x29,0x77,0x86,0x57,0x85,0xe8,0x52,0x6f,0x8e,
+0x37,0xc8,0xe8,0x52,0x6f,0x8f,0xe0,0x4d,0x17,0xe2,0x3d,0x6f,0x3c,0xef,0x3d,0xf2,
+0xc5,0x2, 0x1, 0x8a,0x3e,0xe0,0xc6,0xa2,0x17,0x0, 0x3e,0x7e,0xc7,0x82,0x1, 0x9c,
+0xe0,0x0, 0xc0,0x5e,0x9, 0xe1,0xe6,0xa5,0xce,0x82,0x3e,0x99,0xe0,0xf, 0x88,0x8d,
+0xe6,0xad,0xcf,0x52,0xe0,0xe, 0x34,0x3e,0x3f,0x41,0xe0,0xf, 0xaf,0xd, 0xc1,0x1,
+0xe1,0x80,0x97,0x13,0xe2,0x1, 0xc1,0x7f,0xe0,0xd, 0x37,0x48,0xe0,0x40,0xae,0xaa,
+0xe0,0x40,0xaf,0x1a,0x0, 0xdd,0xe0,0x80,0x95,0x9d,0xc7,0x1, 0xe0,0xa, 0x35,0xc8,
+0xe2,0x1, 0xc7,0x7f,0xe0,0x7, 0xad,0x2f,0xe0,0x7, 0xad,0xbf,0x0, 0xd7,0x8, 0xb1,
+0x17,0x80,0xe8,0x52,0x6f,0x97,0xdf,0x62,0xe8,0xe8,0x4f,0xa4,0xe2,0x0, 0xcf,0x81,
+0x1, 0x85,0xe8,0x52,0x4f,0x82,0xe8,0x52,0x6f,0x96,0x8, 0xe1,0x3f,0x6a,0xe2,0x0,
+0xc7,0x10,0xe0,0xf, 0x34,0xc1,0xe0,0x41,0x3e,0x8a,0xe2,0x0, 0xcf,0x0, 0x37,0xdd,
+0x34,0xba,0x34,0x3a,0x3c,0x4f,0x3f,0xe9,0xe0,0x6f,0x39,0x28,0x3c,0x6f,0x17,0x80,
+0xe0,0x69,0x39,0xaf,0x38,0x82,0x3f,0x6a,0xe2,0x0, 0xc7,0x10,0xe0,0xf, 0x34,0x21,
+0xe0,0x41,0x3e,0x8a,0xe2,0x0, 0xcf,0x0, 0x37,0xbd,0x34,0x5a,0x34,0xda,0x3c,0xcf,
+0x3f,0xe8,0xe0,0x6f,0x39,0x29,0x3c,0xef,0x17,0x80,0xe0,0x68,0x39,0xaf,0x38,0x82,
+0x8, 0xb3,0xe2,0x0, 0xcc,0x0, 0x3f,0x68,0x3f,0xe9,0x3e,0x6a,0x3e,0xeb,0x3, 0x2d,
+0x15,0x0, 0xe0,0x41,0x39,0xc9,0x3e,0x7a,0xe1,0x22,0x3d,0x78,0x3f,0x62,0x3f,0xe3,
+0x3, 0x19,0x11,0x1, 0xe0,0x41,0x3e,0xcd,0x15,0x80,0xe1,0x2c,0x3d,0xfc,0x3c,0x6e,
+0x3c,0xef,0x3d,0x6c,0x3d,0xed,0xd0,0x1e,0x3f,0x68,0x3f,0xe9,0x29,0x8, 0xe0,0x41,
+0x3e,0xcf,0x15,0x80,0xe1,0x2c,0x3d,0xfe,0x3f,0x6c,0x3f,0xed,0x3c,0x6e,0x3c,0xef,
+0x9, 0xe1,0x3d,0x6c,0x3c,0x62,0x3c,0xe3,0xd0,0xd, 0x3f,0x68,0x3f,0xe9,0x0, 0xf0,
+0x3d,0x6c,0x3c,0x6e,0x9, 0xa1,0x0, 0x86,0xe2,0x0, 0xcd,0x0, 0x3, 0x7a,0x11,0x0,
+0x0, 0xda,0x0, 0x81,0x16,0x0, 0x16,0x80,0x3e,0x1c,0x17,0x21,0x0, 0x92,0xe0,0x2d,
+0x3e,0xfd,0xe0,0x2c,0x3e,0x7c,0x17,0x80,0x3e,0x7a,0x4, 0x8b,0x1, 0x83,0x3e,0xfb,
+0x4, 0x88,0x3e,0xab,0xe1,0x2c,0x3e,0x7a,0xe0,0x60,0x3f,0x82,0xe4,0x0, 0xcf,0x90,
+0xc7,0x7f,0xe0,0x60,0x3f,0x92,0xe0,0x29,0x3c,0xf9,0xe0,0x28,0x3c,0x78,0xe2,0x0,
+0xcf,0x0, 0x1, 0xe6,0x38,0x82,0xe0,0xc, 0x3c,0xc8,0xe6,0xaf,0xce,0x7c,0x3d,0xea,
+0x3f,0xe9,0x3e,0xe8,0x26,0x18,0x3f,0xe8,0xc7,0xff,0x3d,0x19,0x3c,0xfa,0x1, 0xbb,
+0x38,0x82,0xe0,0x40,0x96,0x4f,0xe0,0x40,0x97,0x3f,0xe0,0x40,0xb6,0x4d,0xc5,0x78,
+0xe0,0x40,0xb7,0x3d,0xe0,0x40,0x96,0x2f,0xe0,0x40,0x97,0x1f,0xe0,0x40,0xb6,0x2d,
+0xe0,0x40,0xb7,0x1d,0xe2,0x0, 0xcd,0x7, 0xc6,0x88,0xc7,0x88,0x2, 0xeb,0xe0,0xe,
+0x35,0xc3,0xe0,0xd, 0x37,0x23,0xe5,0xff,0xc7,0x78,0xe0,0xf, 0x3c,0x1d,0x3c,0x9d,
+0x3f,0x1b,0x3e,0x6f,0xc6,0x7e,0x3e,0xe9,0xe0,0xa, 0x3c,0x9e,0xe0,0xb, 0x3d,0x2d,
+0xe2,0x0, 0xcd,0x81,0x2, 0xb, 0xe0,0xa, 0x37,0x41,0xe0,0xd, 0x35,0x21,0xe5,0xff,
+0xc5,0x7e,0x3f,0x9d,0x3c,0x9d,0x3d,0x1e,0x0, 0xc8,0xe1,0x80,0x95,0x9d,0xe0,0x80,
+0xb5,0x9c,0x0, 0xed,0xe1,0x80,0x8f,0x19,0xe0,0x80,0xaf,0x1f,0x0, 0xc0,0x3d,0x18,
+0x3f,0xe8,0x3f,0xfa,0x1, 0x82,0x38,0x82,0xe1,0x80,0xac,0x9f,0x0, 0xfb,0x2b,0x6a,
+0x1e,0x40,0x48,0x98,0x5, 0x5, 0x5, 0x1, 0x1, 0x4, 0x0, 0x8, 0x8, 0x0, 0x0, 0x20,
+0xb8,0x0, 0xc0,0x0, 0xfc,0x0, 0xfd,0x0, 0xfe,0x0, 0xfa,0x20,0xfa,0x0, 0xf7,0x0,
+0xf6,0x0, 0xf5,0x0, 0xf4,0x0, 0xf3,0x0, 0xf2,0x0, 0xf1,0x0, 0xf0,0x0, 0x8c,0x8f,
+0xff,0xff,0xff,0x8c,0x8f,0xff,0xff,0xff,0x8c,0x8f,0xff,0xff,0xff,0x0, 0x1, 0x0,
+0x3, 0x0, 0x1, 0x1, 0x1, 0x0, 0x3, 0x1, 0xff,0x64,0xff,0xff,0x6, 0x1, 0x6c,0x98,
+0x1, 0x1, 0xff,0xff,0x70,0x8f,0x0, 0xff,0xe0,0x1f,0x0, 0xff,0x48,0xb7,0x5a,0xa5,
+0xb, 0xf4,0x0, 0xff,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0xe0,0x1f,0x4a,0x36,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x58,0x4d,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
+0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1,
+0x9, 0x9, 0x24,0x24,0x12,0x24,0x12,0x24,0x0, 0x0, 0x1, 0x2, 0x64,0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x44,0x1, 0x44,
+0x0, 0x0, 0x0, 0x0, 0x1, 0x44,0x1, 0x44,0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x3, 0x0, 0x4, 0x0, 0x5, 0x0, 0x6, 0x0, 0x7,
+0x0, 0x8, 0x0, 0x9, 0x0, 0xa, 0x0, 0xb, 0x0, 0xc, 0x0, 0xd, 0x0, 0xe, 0x0, 0xf,
+0x0, 0x10,0x0, 0x11,0x0, 0x12,0x0, 0x13,0x0, 0x14,0x0, 0x15,0x0, 0x16,0x0, 0x17,
+0x0, 0x18,0x0, 0x19,0x0, 0x1a,0x0, 0x1b,0x0, 0x1c,0x0, 0x1d,0x0, 0x1e,0x0, 0x1f,
+0x0, 0x20,0x0, 0x21,0x0, 0x22,0x0, 0x23,0x0, 0x24,0x0, 0x25,0x0, 0x26,0x0, 0x27,
+0x0, 0x28,0x0, 0x29,0x0, 0x2a,0x0, 0x2b,0x0, 0x2c,0x0, 0x2d,0x0, 0x2e,0x0, 0x2f,
+0x0, 0x30,0x0, 0x31,0x0, 0x32,0x0, 0x33,0x0, 0x34,0x0, 0x35,0x0, 0x36,0x0, 0x37,
+0x0, 0x38,0x0, 0x39,0x0, 0x3a,0x0, 0x3b,0x0, 0x3c,0x0, 0x3d,0x0, 0x3e,0x0, 0x3f,
+0x0, 0x40,0x0, 0x41,0x0, 0x42,0x0, 0x43,0x0, 0x44,0x0, 0x45,0x0, 0x46,0x0, 0x47,
+0x0, 0x48,0x0, 0x49,0x0, 0x4a,0x0, 0x4b,0x0, 0x4c,0x0, 0x4d,0x0, 0x4e,0x0, 0x4f,
+0x0, 0x50,0x0, 0x51,0x0, 0x52,0x0, 0x53,0x0, 0x54,0x0, 0x55,0x0, 0x56,0x0, 0x57,
+0x0, 0x58,0x0, 0x59,0x0, 0x5a,0x0, 0x5b,0x0, 0x5c,0x0, 0x5d,0x0, 0x5e,0x0, 0x5f,
+0x0, 0x60,0x0, 0x61,0x0, 0x62,0x0, 0x63,0x0, 0x64,0x0, 0x65,0x0, 0x66,0x0, 0x67,
+0x0, 0x68,0x0, 0x69,0x0, 0x6a,0x0, 0x6b,0x0, 0x6c,0x0, 0x6d,0x0, 0x6e,0x0, 0x6f,
+0x0, 0x70,0x0, 0x71,0x0, 0x72,0x0, 0x73,0x0, 0x74,0x0, 0x75,0x0, 0x76,0x0, 0x77,
+0x0, 0x78,0x0, 0x79,0x0, 0x7a,0x0, 0x7b,0x0, 0x7c,0x0, 0x7d,0x0, 0x7e,0x0, 0x7f,
+0x0, 0x80,0x0, 0x81,0x0, 0x82,0x0, 0x83,0x0, 0x84,0x0, 0x85,0x0, 0x86,0x0, 0x87,
+0x0, 0x88,0x0, 0x89,0x0, 0x8a,0x0, 0x8b,0x0, 0x8c,0x0, 0x8d,0x0, 0x8e,0x0, 0x8f,
+0x0, 0x90,0x0, 0x91,0x0, 0x92,0x0, 0x93,0x0, 0x94,0x0, 0x95,0x0, 0x96,0x0, 0x97,
+0x0, 0x98,0x0, 0x99,0x0, 0x9a,0x0, 0x9b,0x0, 0x9c,0x0, 0x9d,0x0, 0x9e,0x0, 0x9f,
+0x0, 0xa0,0x0, 0xa1,0x0, 0xa2,0x0, 0xa3,0x0, 0xa4,0x0, 0xa5,0x0, 0xa6,0x0, 0xa7,
+0x0, 0xa8,0x0, 0xa9,0x0, 0xaa,0x0, 0xab,0x0, 0xac,0x0, 0xad,0x0, 0xae,0x0, 0xaf,
+0x0, 0xb0,0x0, 0xb1,0x0, 0xb2,0x0, 0xb3,0x0, 0xb4,0x0, 0xb5,0x0, 0xb6,0x0, 0xb7,
+0x0, 0xb8,0x0, 0xb9,0x0, 0xba,0x0, 0xbb,0x0, 0xbc,0x0, 0xbd,0x0, 0xbe,0x0, 0xbf,
+0x0, 0xc0,0x0, 0xc1,0x0, 0xc2,0x0, 0xc3,0x0, 0xc4,0x0, 0xc5,0x0, 0xc6,0x0, 0xc7,
+0x0, 0xc8,0x0, 0xc9,0x0, 0xca,0x0, 0xcb,0x0, 0xcc,0x0, 0xcd,0x0, 0xce,0x0, 0xcf,
+0x0, 0xd0,0x0, 0xd1,0x0, 0xd2,0x0, 0xd3,0x0, 0xd4,0x0, 0xd5,0x0, 0xd6,0x0, 0xd7,
+0x0, 0xd8,0x0, 0xd9,0x0, 0xda,0x0, 0xdb,0x0, 0xdc,0x0, 0xdd,0x0, 0xde,0x0, 0xdf,
+0x0, 0xe0,0x0, 0xe1,0x0, 0xe2,0x0, 0xe3,0x0, 0xe4,0x0, 0xe5,0x0, 0xe6,0x0, 0xe7,
+0x0, 0xe8,0x0, 0xe9,0x0, 0xea,0x0, 0xeb,0x0, 0xec,0x0, 0xed,0x0, 0xee,0x0, 0xef,
+0x0, 0xf0,0x0, 0xf1,0x0, 0xf2,0x0, 0xf3,0x0, 0xf4,0x0, 0xf5,0x0, 0xf6,0x0, 0xf7,
+0x0, 0xf8,0x0, 0xf9,0x0, 0xfa,0x0, 0xfb,0x0, 0xfc,0x0, 0xfd,0x0, 0xfe,0x0, 0xff,
+0x1, 0x0, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x4, 0x1, 0x5, 0x1, 0x6, 0x1, 0x7,
+0x1, 0x8, 0x1, 0x9, 0x1, 0xa, 0x1, 0xb, 0x1, 0xc, 0x1, 0xd, 0x1, 0xe, 0x1, 0xf,
+0x1, 0x10,0x1, 0x11,0x1, 0x12,0x1, 0x13,0x1, 0x14,0x1, 0x15,0x1, 0x16,0x1, 0x17,
+0x1, 0x18,0x1, 0x19,0x1, 0x1a,0x1, 0x1b,0x1, 0x1c,0x1, 0x1d,0x1, 0x1e,0x1, 0x1f,
+0x1, 0x20,0x1, 0x21,0x1, 0x22,0x1, 0x23,0x1, 0x24,0x1, 0x25,0x1, 0x26,0x1, 0x27,
+0x1, 0x28,0x1, 0x29,0x1, 0x2a,0x1, 0x2b,0x1, 0x2c,0x1, 0x2d,0x1, 0x2e,0x1, 0x2f,
+0x1, 0x30,0x1, 0x31,0x1, 0x32,0x1, 0x33,0x1, 0x34,0x1, 0x35,0x1, 0x36,0x1, 0x37,
+0x1, 0x38,0x1, 0x39,0x1, 0x3a,0x1, 0x3b,0x1, 0x3c,0x1, 0x3d,0x1, 0x3e,0x1, 0x3f,
+0x1, 0x40,0x1, 0x41,0x1, 0x42,0x1, 0x43,0x1, 0x20,0x1, 0x21,0x1, 0x22,0x1, 0x23,
+0x1, 0x24,0x1, 0x25,0x1, 0x26,0x1, 0x27,0x1, 0x28,0x1, 0x29,0x1, 0x2a,0x1, 0x2b,
+0x1, 0x2c,0x1, 0x2d,0x1, 0x2e,0x1, 0x2f,0x1, 0x30,0x1, 0x31,0x1, 0x32,0x1, 0x33,
+0x1, 0x34,0x1, 0x35,0x1, 0x36,0x1, 0x37,0x1, 0x38,0x1, 0x39,0x1, 0x3a,0x1, 0x3b,
+0x1, 0x3c,0x1, 0x3d,0x1, 0x3e,0x1, 0x3f,0x1, 0x40,0x1, 0x41,0x1, 0x42,0x1, 0x43,
+0x0, 0xfc,0x0, 0xfd,0x0, 0xfe,0x0, 0xff,0x1, 0x0, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3,
+0x1, 0x4, 0x1, 0x5, 0x1, 0x6, 0x1, 0x7, 0x1, 0x8, 0x1, 0x9, 0x1, 0xa, 0x1, 0xb,
+0x1, 0xc, 0x1, 0xd, 0x1, 0xe, 0x1, 0xf, 0x1, 0x10,0x1, 0x11,0x1, 0x12,0x1, 0x13,
+0x1, 0x14,0x1, 0x15,0x1, 0x16,0x1, 0x17,0x1, 0x18,0x1, 0x19,0x1, 0x1a,0x1, 0x1b,
+0x1, 0x1c,0x1, 0x1d,0x1, 0x1e,0x1, 0x1f,0x0, 0xd8,0x0, 0xd9,0x0, 0xda,0x0, 0xdb,
+0x0, 0xdc,0x0, 0xdd,0x0, 0xde,0x0, 0xdf,0x0, 0xe0,0x0, 0xe1,0x0, 0xe2,0x0, 0xe3,
+0x0, 0xe4,0x0, 0xe5,0x0, 0xe6,0x0, 0xe7,0x0, 0xe8,0x0, 0xe9,0x0, 0xea,0x0, 0xeb,
+0x0, 0xec,0x0, 0xed,0x0, 0xee,0x0, 0xef,0x0, 0xf0,0x0, 0xf1,0x0, 0xf2,0x0, 0xf3,
+0x0, 0xf4,0x0, 0xf5,0x0, 0xf6,0x0, 0xf7,0x0, 0xf8,0x0, 0xf9,0x0, 0xfa,0x0, 0xfb,
+0x0, 0xb4,0x0, 0xb5,0x0, 0xb6,0x0, 0xb7,0x0, 0xb8,0x0, 0xb9,0x0, 0xba,0x0, 0xbb,
+0x0, 0xbc,0x0, 0xbd,0x0, 0xbe,0x0, 0xbf,0x0, 0xc0,0x0, 0xc1,0x0, 0xc2,0x0, 0xc3,
+0x0, 0xc4,0x0, 0xc5,0x0, 0xc6,0x0, 0xc7,0x0, 0xc8,0x0, 0xc9,0x0, 0xca,0x0, 0xcb,
+0x0, 0xcc,0x0, 0xcd,0x0, 0xce,0x0, 0xcf,0x0, 0xd0,0x0, 0xd1,0x0, 0xd2,0x0, 0xd3,
+0x0, 0xd4,0x0, 0xd5,0x0, 0xd6,0x0, 0xd7,0x0, 0x90,0x0, 0x91,0x0, 0x92,0x0, 0x93,
+0x0, 0x94,0x0, 0x95,0x0, 0x96,0x0, 0x97,0x0, 0x98,0x0, 0x99,0x0, 0x9a,0x0, 0x9b,
+0x0, 0x9c,0x0, 0x9d,0x0, 0x9e,0x0, 0x9f,0x0, 0xa0,0x0, 0xa1,0x0, 0xa2,0x0, 0xa3,
+0x0, 0xa4,0x0, 0xa5,0x0, 0xa6,0x0, 0xa7,0x0, 0xa8,0x0, 0xa9,0x0, 0xaa,0x0, 0xab,
+0x0, 0xac,0x0, 0xad,0x0, 0xae,0x0, 0xaf,0x0, 0xb0,0x0, 0xb1,0x0, 0xb2,0x0, 0xb3,
+0x0, 0x6c,0x0, 0x6d,0x0, 0x6e,0x0, 0x6f,0x0, 0x70,0x0, 0x71,0x0, 0x72,0x0, 0x73,
+0x0, 0x74,0x0, 0x75,0x0, 0x76,0x0, 0x77,0x0, 0x78,0x0, 0x79,0x0, 0x7a,0x0, 0x7b,
+0x0, 0x7c,0x0, 0x7d,0x0, 0x7e,0x0, 0x7f,0x0, 0x80,0x0, 0x81,0x0, 0x82,0x0, 0x83,
+0x0, 0x84,0x0, 0x85,0x0, 0x86,0x0, 0x87,0x0, 0x88,0x0, 0x89,0x0, 0x8a,0x0, 0x8b,
+0x0, 0x8c,0x0, 0x8d,0x0, 0x8e,0x0, 0x8f,0x0, 0x48,0x0, 0x49,0x0, 0x4a,0x0, 0x4b,
+0x0, 0x4c,0x0, 0x4d,0x0, 0x4e,0x0, 0x4f,0x0, 0x50,0x0, 0x51,0x0, 0x52,0x0, 0x53,
+0x0, 0x54,0x0, 0x55,0x0, 0x56,0x0, 0x57,0x0, 0x58,0x0, 0x59,0x0, 0x5a,0x0, 0x5b,
+0x0, 0x5c,0x0, 0x5d,0x0, 0x5e,0x0, 0x5f,0x0, 0x60,0x0, 0x61,0x0, 0x62,0x0, 0x63,
+0x0, 0x64,0x0, 0x65,0x0, 0x66,0x0, 0x67,0x0, 0x68,0x0, 0x69,0x0, 0x6a,0x0, 0x6b,
+0x0, 0x24,0x0, 0x25,0x0, 0x26,0x0, 0x27,0x0, 0x28,0x0, 0x29,0x0, 0x2a,0x0, 0x2b,
+0x0, 0x2c,0x0, 0x2d,0x0, 0x2e,0x0, 0x2f,0x0, 0x30,0x0, 0x31,0x0, 0x32,0x0, 0x33,
+0x0, 0x34,0x0, 0x35,0x0, 0x36,0x0, 0x37,0x0, 0x38,0x0, 0x39,0x0, 0x3a,0x0, 0x3b,
+0x0, 0x3c,0x0, 0x3d,0x0, 0x3e,0x0, 0x3f,0x0, 0x40,0x0, 0x41,0x0, 0x42,0x0, 0x43,
+0x0, 0x44,0x0, 0x45,0x0, 0x46,0x0, 0x47,0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x3,
+0x0, 0x4, 0x0, 0x5, 0x0, 0x6, 0x0, 0x7, 0x0, 0x8, 0x0, 0x9, 0x0, 0xa, 0x0, 0xb,
+0x0, 0xc, 0x0, 0xd, 0x0, 0xe, 0x0, 0xf, 0x0, 0x10,0x0, 0x11,0x0, 0x12,0x0, 0x13,
+0x0, 0x14,0x0, 0x15,0x0, 0x16,0x0, 0x17,0x0, 0x18,0x0, 0x19,0x0, 0x1a,0x0, 0x1b,
+0x0, 0x1c,0x0, 0x1d,0x0, 0x1e,0x0, 0x1f,0x0, 0x20,0x0, 0x21,0x0, 0x22,0x0, 0x23,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f,0x6, 0x1, 0x7, 0x0, 0x2, 0x8, 0x1f,0x6, 0x1,
+0x7, 0x1, 0x0, 0x8, 0x1f,0x6, 0x1, 0x7, 0x2, 0x0, 0x8, 0x2, 0x1, 0xa, 0x1e,0x40,
+0x17,0x0, 0x64,0xd, 0xac,0x0, 0xc8,0x1, 0xc2,0x1, 0x7c,0x1, 0x90,0x9, 0xc4,0x7,
+0xd0,0x7, 0xd0,0x1, 0x90,0x1, 0x90,0xe, 0x10,0x1, 0xfa,0x1, 0x3, 0xc, 0x21,0x3c,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x56,0x1, 0x0, 0x1, 0x87,0x1, 0x0, 0xe, 0x1, 0xe0,0x0, 0x4,
+0x0, 0x37,0x0, 0x1, 0x1, 0x0, 0x1, 0x1, 0x0, 0xf1,0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x1e,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0,0x1, 0x8a,0x13,0x12,0x26,0x24,0x18,
+0xa6,0x0, 0x0, 0x0, 0x0, 0x2, 0x40,0x4, 0x80,0x4, 0x38,0x2, 0x1c,0x62,0x62,0x1,
+0xa6,0x1, 0xa6,0x1, 0x0, 0x1, 0x0, 0x9, 0x60,0x4, 0xb0,0x62,0x62,0x1, 0xe2,0x1,
+0xe2,0x1, 0x0, 0x1, 0x0, 0x1, 0x2c,0x0, 0x51,0x0, 0x2, 0x1, 0x5, 0x1, 0x2, 0x2,
+0x4, 0x4, 0x6, 0x80,0x0, 0x5a,0xb, 0xb8,0xf, 0x6, 0x6, 0x0, 0xb4,0x1, 0xf4,0x1,
+0xf4,0x1f,0x40,0x2d,0x2, 0x58,0x0, 0x64,0x0, 0x4, 0x1f,0x18,0x11,0x3, 0x8, 0xa,
+0xc, 0x0, 0x3, 0xe8,0x1, 0xc2,0x7, 0x8, 0x3, 0xe8,0xf, 0xf, 0x0, 0x50,0x3, 0xe8,
+0x0, 0x50,0x9, 0x10,0x0, 0x32,0x1, 0x9a,0x1, 0x9a,0x3, 0x20,0x0, 0xc8,0x0, 0x3c,
+0x0, 0x1e,0x0, 0x80,0x2, 0x1c,0x0, 0xdc,0x0, 0x3c,0x3, 0xe8,0x4, 0xb0,0x2, 0x1c,
+0x0, 0x3c,0x3, 0xe8,0x0, 0x20,0x4, 0x18,0x0, 0x0, 0x9, 0x60,0x0, 0x64,0x0, 0xa0,
+0x0, 0xa0,0x6, 0x40,0x1, 0x2c,0x0, 0x1e,0x0, 0x1f,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,
+0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,
+0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,
+0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,
+0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x1e,0x0, 0x24,0x0, 0x35,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,
+0x0, 0x5a,0x0, 0x5a,0x0, 0x5a,0x0, 0x75,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,
+0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,
+0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,
+0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,
+0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0x96,0x0, 0xb5,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,
+0x0, 0xd2,0x0, 0xd2,0x0, 0xd2,0x0, 0xf5,0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe,
+0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe,
+0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe,
+0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe,
+0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0xe, 0x1, 0x35,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,
+0x1, 0x4a,0x1, 0x4a,0x1, 0x4a,0x1, 0x75,0x1, 0x68,0x1, 0x86,0x1, 0x86,0x1, 0x86,
+0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,
+0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,
+0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,
+0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0x86,0x1, 0xb5,
+0x1, 0xbf,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,
+0x1, 0xc2,0x1, 0xc2,0x1, 0xc2,0x1, 0xf4,0x1, 0xf6,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,
+0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,
+0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,
+0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,
+0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x1, 0xfe,0x2, 0x45,
+0x2, 0x42,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,
+0x2, 0x3a,0x2, 0x3a,0x2, 0x3a,0x2, 0x83,0x2, 0x79,0x2, 0x76,0x2, 0x76,0x2, 0x76,
+0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,
+0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,
+0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,
+0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0x76,0x2, 0xc3,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,
+0x2, 0xb2,0x2, 0xb2,0x2, 0xb2,0x3, 0x3, 0x2, 0xd0,0x2, 0xee,0x2, 0xee,0x2, 0xee,
+0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,
+0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,
+0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,
+0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x2, 0xee,0x3, 0x43,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,
+0x3, 0x2a,0x3, 0x2a,0x3, 0x2a,0x3, 0x83,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,
+0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,
+0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,
+0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,
+0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0x66,0x3, 0xc3,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,
+0x3, 0xa2,0x3, 0xa2,0x3, 0xa2,0x4, 0x3, 0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,
+0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,
+0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,
+0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,
+0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x3, 0xde,0x4, 0x19,
+0x4, 0x19,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,
+0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,
+0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,
+0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,0x4, 0x1a,
+0x4, 0x1a,0x4, 0x1f,0x4, 0x14,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xf6,
+0x9, 0x2f,0x0, 0x28,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3e,0x0, 0x21,0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,
+0x9, 0x3e,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,
+0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,
+0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,
+0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,
+0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,
+0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,
+0x9, 0x3f,0x0, 0x21,0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3e,0x0, 0x28,0x0, 0x64,0x0, 0xa7,
+0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,
+0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,
+0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,
+0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,
+0x9, 0x3e,0x0, 0x0, 0x0, 0x64,0x0, 0xa7,0x0, 0xe9,0x1, 0x2c,0x1, 0x6f,0x1, 0xb1,
+0x1, 0xf4,0x2, 0x37,0x2, 0x79,0x2, 0xbc,0x2, 0xff,0x3, 0x41,0x3, 0x84,0x3, 0xc7,
+0x4, 0x9, 0x4, 0x4c,0x4, 0x8f,0x4, 0xd1,0x5, 0x14,0x5, 0x57,0x5, 0x99,0x5, 0xdc,
+0x6, 0x1f,0x6, 0x61,0x6, 0xa4,0x6, 0xe7,0x7, 0x29,0x7, 0x6c,0x7, 0xaf,0x7, 0xf1,
+0x8, 0x34,0x8, 0x77,0x8, 0xb9,0x8, 0xfc,0x9, 0x3e,0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
+0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x38,
+0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
+0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x5, 0x86,0x6, 0x6,
+0x5, 0x9e,0x6, 0x6, 0x5, 0xba,0x6, 0x6, 0x5, 0xe0,0x6, 0x6, 0x6, 0x6, 0x5, 0x3e,
+0x5, 0x3e,0x6, 0x6, 0x5, 0x3e,0x5, 0x3e,0x5, 0xf2,0x6, 0x6, 0x6, 0x6, 0x5, 0x5c,
+0x5, 0x5c,0x5, 0x5c,0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x5, 0x26,
+0x5, 0x66,0x5, 0x6e,0x5, 0x76,0x5, 0x7e,0x1d,0xc2,0x1d,0xc2,0x1e,0x76,0x1e,0x76,
+0x1d,0xc2,0x55,0x50,0x47,0x52,0x41,0x44,0x45,0x20,0x66,0xcc,0x99,0x33,0x46,0x4c,
+0x41,0x47,0x1, 0x0, 0x0, 0x1, 0x6c,0xaa,0x6c,0xb4,0x6c,0xc0,0x6c,0xda,0x6c,0xca,
+0x6c,0xce,0x6c,0xd2,0x6c,0xda,0x6c,0xd6,0xff,0x0, 0x1, 0x2, 0x0, 0xff,0x1, 0x2,
+0x0, 0x1, 0xff,0x2, 0x0, 0x1, 0x2, 0xff,0x0, 0x11,0x8, 0x9, 0x1, 0x10,0x7, 0xa,
+0x2, 0xf, 0x6, 0xb, 0x3, 0xe, 0x5, 0xc, 0x4, 0xd, 0x4, 0xd, 0xb, 0xb8,0xb, 0xb8,
+0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,
+0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,0xb, 0xb8,
+0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,
+0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,0xf4,0x48,
+0xf4,0x48,0xf4,0x48,0x1, 0x2, 0x4, 0x8, 0x10,0x20,0x40,0x80,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
+0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
diff --git a/drivers/input/touchscreen/ft8756_spi/include/firmware/fw_sample.i b/drivers/input/touchscreen/ft8756_spi/include/firmware/fw_sample.i
new file mode 100644
index 00000000000000..e69de29bb2d1d6
diff --git a/drivers/input/touchscreen/nt36xxx.h b/drivers/input/touchscreen/nt36xxx.h
new file mode 100644
index 00000000000000..23b481fa811028
--- /dev/null
+++ b/drivers/input/touchscreen/nt36xxx.h
@@ -0,0 +1,178 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Copyright (C) 2010 - 2017 Novatek, Inc.
+ * Copyright (C) 2020 AngeloGioacchino Del Regno <kholk11@gmail.com>
+ * Copyright (C) 2023-2024 George Chan <gchan9527@gmail.com>
+ */
+
+#ifndef NT36XXX_H
+#define NT36XXX_H
+
+#define NT36XXX_INPUT_DEVICE_NAME	"Novatek NT36XXX Touch Sensor"
+#define MAX_SPI_FREQ_HZ 5000000
+
+/* FW Param address */
+#define NT36XXX_FW_ADDR		0x01
+
+#define NT36XXX_TRANSFER_LEN	(63*1024)
+
+#define NT36XXX_READ_PREFIX_LEN     1
+#define NT36XXX_WRITE_PREFIX_LEN    1
+
+/* due to extra framework layer, the transfer trunk is as small as
+ * 128 otherwize dma error happened, all routed to spi_sync()
+ */
+
+/* Number of bytes for chip identification */
+#define NT36XXX_ID_LEN_MAX	6
+#define NT36XXX_ID_LIST_MAX	32
+
+/* Touch info */
+#define NT36XXX_TOUCH_DEFAULT_MAX_WIDTH  1080
+#define NT36XXX_TOUCH_DEFAULT_MAX_HEIGHT 2246
+#define NT36XXX_TOUCH_MAX_FINGER_NUM	 10
+#define NT36XXX_TOUCH_MAX_PRESSURE	 1000
+
+/* Point data length */
+#define NT36XXX_POINT_DATA_LEN		65
+
+/* Misc */
+#define NT36XXX_NUM_SUPPLIES	 2
+#define NT36XXX_MAX_RETRIES	 5
+#define NT36XXX_MAX_FW_RST_RETRY 50
+
+/* mapid */
+enum nt36xxx_chips {
+	NT_AUTO_DET_IC,
+	NT36525_IC = 0x1,
+	NT36672A_IC,
+	NT36676F_IC,
+	NT36772_IC,
+	NT36675_IC,
+
+	NT51900_IC,
+	NT51920_IC,
+	NT51923_IC,
+	NT51926_IC,
+
+	NT_NIL_IC,
+	/* below are not supported atm */
+	NT36526_IC,
+	NT36870_IC,
+
+	NTMAX_IC,
+};
+
+enum nt36xxx_cmds {
+	NT36XXX_CMD_ENTER_SLEEP = 0x11,
+	NT36XXX_CMD_BOOTLOADER_RESET = 0x69,
+	NT36XXX_CMD_SOFTWARE_RESET = 0xaa,
+};
+
+enum nt36xxx_events {
+	NT36XXX_EVT_REPORT = 0x00,
+	NT36XXX_EVT_CRC	= 0x35,
+	NT36XXX_EVT_HOST_CMD = 0x50,
+	NT36XXX_EVT_HS_OR_SUBCMD = 0x51, /* Handshake or subcommand byte */
+	NT36XXX_EVT_RESET_COMPLETE = 0x60,
+	NT36XXX_EVT_FWINFO = 0x78,
+	NT36XXX_EVT_READ_PID = 0x80,
+	NT36XXX_EVT_PROJECTID = 0x9a, /* Excess 0x80 write bit, messed trouble, ignored */
+};
+
+enum nt36xxx_fw_state {
+	NT36XXX_STATE_INIT = 0xa0,              /* IC Reset */
+	NT36XXX_STATE_REK = 0xa1,               /* ReK baseline */
+	NT36XXX_STATE_REK_FINISH = 0xa2,        /* Baseline is ready */
+	NT36XXX_STATE_NORMAL_RUN = 0xa3,        /* Firmware is running */
+	NT36XXX_STATE_MAX = 0xaf
+};
+
+struct nt36xxx_ts;
+struct nt36xxx_trim_data;
+
+struct nvt_fw_parse_data {
+	uint8_t partition;
+	uint8_t ilm_dlm_num;
+};
+
+struct nvt_ts_bin_map {
+	char name[12];
+	uint32_t bin_addr;
+	uint32_t sram_addr;
+	uint32_t size;
+	uint32_t crc;
+	uint32_t loaded;
+};
+
+struct nvt_ts_hw_info {
+	uint8_t carrier_system;
+	uint8_t hw_crc;
+};
+
+struct nt36xxx_abs_object {
+	u16 x;
+	u16 y;
+	u16 z;
+	u8 tm;
+};
+
+struct nt36xxx_fw_info {
+	u8 fw_ver;
+	u8 x_num;
+	u8 y_num;
+	u8 max_buttons;
+	u16 abs_x_max;
+	u16 abs_y_max;
+	u16 nvt_pid;
+};
+
+struct nt36xxx_chip_data {
+	const u32 *mmap;
+	const struct regmap_config *config;
+	const struct nt36xxx_trim_data *trim_data;
+
+	const char *fw_name;
+	unsigned int max_x;
+	unsigned int max_y;
+	unsigned int abs_x_max;
+	unsigned int abs_y_max;
+	unsigned int max_button;
+	const struct input_id *id;
+
+	unsigned int mapid;
+
+	/* defined as BIT(NT36675_IC) | BIT(NT36672C_IC)... */
+	unsigned int ic_fw_needed;
+};
+
+struct nt36xxx_trim_table {
+	u8 id[NT36XXX_ID_LEN_MAX];
+	u8 mask[NT36XXX_ID_LEN_MAX];
+	enum nt36xxx_chips mapid;
+	uint8_t carrier_system;
+	uint8_t hw_crc;
+};
+
+int nt36xxx_probe(struct device *dev, int irq, const struct input_id *id,
+			struct regmap *regmap);
+
+int nt36xxx_of_compatible(struct device *dev);
+
+extern const struct dev_pm_ops nt36xxx_pm_ops;
+
+extern const u32 nt36675_memory_maps[];
+extern const u32 nt36672a_memory_maps[];
+extern const u32 nt36772_memory_maps[];
+extern const u32 nt36676f_memory_maps[];
+extern const u32 nt36525_memory_maps[];
+extern const u32 nt51900_memory_maps[];
+
+extern const struct nt36xxx_trim_table nt36xxx_spi_trim_id_table[];
+extern const struct nt36xxx_trim_table nt36xxx_i2c_trim_id_table[];
+extern const struct nt36xxx_trim_table nt51xxx_trim_id_table[];
+
+extern const struct nt36xxx_trim_data nt36xxx_spi_trim_data;
+extern const struct nt36xxx_trim_data nt36xxx_i2c_trim_data;
+extern const struct nt36xxx_trim_data nt51xxx_i2c_trim_data;
+#endif
diff --git a/drivers/input/touchscreen/nt36xxx_core.c b/drivers/input/touchscreen/nt36xxx_core.c
new file mode 100644
index 00000000000000..154063969b3b04
--- /dev/null
+++ b/drivers/input/touchscreen/nt36xxx_core.c
@@ -0,0 +1,1765 @@
+//  SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Driver for Novatek NT36xxx series touchscreens
+ *
+ * Copyright (C) 2010 - 2018 Novatek, Inc.
+ * Copyright (C) 2020 XiaoMi, Inc.
+ * Copyright (C) 2020 AngeloGioacchino Del Regno <kholk11@gmail.com>
+ * Copyright (C) 2023-2024 George Chan <gchan9527@gmail.com>
+ *
+ * Based on nt36xxx.c i2c driver from AngeloGioacchino Del Regno
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/devm-helpers.h>
+#include <linux/firmware.h>
+#include <linux/gpio/consumer.h>
+#include <linux/input/mt.h>
+#include <linux/input/touchscreen.h>
+#include <linux/interrupt.h>
+#include <linux/irqnr.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/printk.h>
+#include <linux/regmap.h>
+#include <linux/regulator/consumer.h>
+#include <linux/unaligned.h>
+#include <drm/drm_panel.h>
+
+#include "nt36xxx.h"
+
+/* Main mmap to spi addr */
+enum {
+	MMAP_BASELINE_ADDR,
+	MMAP_BASELINE_BTN_ADDR,
+	MMAP_BLD_CRC_EN_ADDR,
+	MMAP_BLD_DES_ADDR,
+	MMAP_BLD_ILM_DLM_CRC_ADDR,
+	MMAP_BLD_LENGTH_ADDR,
+	MMAP_BLD_SPE_PUPS_ADDR,	/* added nt519xx */
+	MMAP_BOOT_RDY_ADDR,
+	MMAP_DIFF_BTN_PIPE0_ADDR,
+	MMAP_DIFF_BTN_PIPE1_ADDR,
+	MMAP_DIFF_PIPE0_ADDR,
+	MMAP_DIFF_PIPE1_ADDR,
+	MMAP_DLM_DES_ADDR,
+	MMAP_DLM_LENGTH_ADDR,
+	MMAP_DMA_CRC_EN_ADDR,
+	MMAP_DMA_CRC_FLAG_ADDR,
+	MMAP_ENG_RST_ADDR,
+	MMAP_SW_RST_ADDR,  /* added nt519xx, since need extra crc reset-idle */
+	MMAP_EVENT_BUF_ADDR,
+	MMAP_G_DLM_CHECKSUM_ADDR,
+	MMAP_G_ILM_CHECKSUM_ADDR,
+	MMAP_ILM_DES_ADDR,
+	MMAP_ILM_LENGTH_ADDR,
+	MMAP_IC_NUM_ADDR,	/* added nt519xx */
+	MMAP_POR_CD_ADDR,
+	MMAP_RAW_BTN_PIPE0_ADDR,
+	MMAP_RAW_BTN_PIPE1_ADDR,
+	MMAP_RAW_PIPE0_ADDR,
+	MMAP_RAW_PIPE1_ADDR,
+	MMAP_READ_FLASH_CHECKSUM_ADDR,
+	MMAP_RW_FLASH_DATA_ADDR,
+	MMAP_R_DLM_CHECKSUM_ADDR,
+	MMAP_R_ILM_CHECKSUM_ADDR,
+	MMAP_SPI_RD_FAST_ADDR,
+	MMAP_SWRST_N8_ADDR,
+
+	/* below are magic numbers in source code */
+	MMAP_MAGIC_NUMBER_PROBE_ADDR,
+
+	/* this addr is not specific to */
+	MMAP_TOP_ADDR,
+
+	/* for identical address with different naming put here */
+	MMAP_ENB_CASC_ADDR = MMAP_IC_NUM_ADDR,     /* added nt519xx */
+	MMAP_SDLOC_ADDR = MMAP_IC_NUM_ADDR,	/* added nt519xx */
+
+	MMAP_MAX_ADDR = MMAP_TOP_ADDR,
+} nt36xxx_ts_mem_map;
+
+static struct drm_panel_follower_funcs nt36xxx_panel_follower_funcs;
+
+struct nt36xxx_ts {
+	struct regmap *regmap;
+
+	struct input_dev *input;
+	struct regulator_bulk_data *supplies;
+	struct gpio_desc *reset_gpio;
+	struct gpio_desc *irq_gpio;
+	int irq;
+	struct device *dev;
+
+	struct mutex lock;
+
+#define NT36XXX_STATUS_SUSPEND			BIT(0)
+#define NT36XXX_STATUS_DOWNLOAD_COMPLETE	BIT(1)
+#define NT36XXX_STATUS_DOWNLOAD_RECOVER		BIT(2)
+#define NT36XXX_STATUS_PREPARE_FIRMWARE		BIT(3)
+#define NT36XXX_STATUS_NEED_FIRMWARE		BIT(4)
+
+	unsigned int status;
+
+	struct touchscreen_properties prop;
+	struct nt36xxx_fw_info fw_info;
+	struct nt36xxx_abs_object abs_obj;
+
+	struct drm_panel_follower panel_follower;
+
+	struct delayed_work work;
+
+	/* this is a duplicate with nt36xxx_chip_data and since the address might
+	 * change in boot/init/download stages so make it a copy of initial map and
+	 * update accordingly
+	 */
+	u32 *mmap;
+	u32 mmap_data[MMAP_MAX_ADDR];
+	int mapid;
+
+	struct nvt_fw_parse_data fw_data;
+	struct nvt_ts_bin_map *bin_map;
+
+	uint8_t hw_crc;
+
+	const char *fw_name;
+	struct firmware fw_entry; /* containing request fw data */
+	const struct nt36xxx_chip_data *data;
+};
+
+struct nt36xxx_trim_data {
+	const struct nt36xxx_trim_table *id_table;
+	int sz_id_table;
+};
+
+const struct nt36xxx_trim_table nt36xxx_spi_trim_id_table[] = {
+	/* TODO: port and test all related module */
+	{
+		.id = { 0x0A, 0xFF, 0xFF, 0x72, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x55, 0x00, 0xFF, 0x00, 0x00, 0x00 },
+		.mask = { 1, 1, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0x55, 0x72, 0xFF, 0x00, 0x00, 0x00 },
+		.mask = { 1, 1, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xAA, 0x00, 0xFF, 0x00, 0x00, 0x00 },
+		.mask = { 1, 1, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xAA, 0x72, 0xFF, 0x00, 0x00, 0x00 },
+		.mask = { 1, 1, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x72, 0x67, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x70, 0x66, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x70, 0x67, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x72, 0x66, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x25, 0x65, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x70, 0x68, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x76, 0x66, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36676F_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x75, 0x66, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36675_IC,
+		.hw_crc = 2,
+	},
+	{ },
+};
+
+
+/*
+ * below are extract from i2c vendor driver url:
+ * https://github.com/Rasenkai/caf-tsoft-Novatek-nt36xxx/blob/master/nt36xxx_mem_map.h
+ */
+const struct nt36xxx_trim_table nt36xxx_i2c_trim_id_table[] = {
+	{
+		.id = { 0x20, 0xFF, 0xFF, 0x72, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36675_IC,
+	},
+	{
+		.id = { 0x00, 0xFF, 0xFF, 0x80, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36675_IC,
+	},
+	{
+		.id = { 0x0C, 0xFF, 0xFF, 0x25, 0x65, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0E, 0xFF, 0xFF, 0x72, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36675_IC,
+	},
+	{
+		.id = { 0x0C, 0xFF, 0xFF, 0x72, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36675_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x26, 0x65, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36526_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x75, 0x66, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36675_IC,
+	},
+	{
+		.id = { 0x0B, 0xFF, 0xFF, 0x72, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0B, 0xFF, 0xFF, 0x82, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0B, 0xFF, 0xFF, 0x25, 0x65, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0A, 0xFF, 0xFF, 0x72, 0x65, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0A, 0xFF, 0xFF, 0x72, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0A, 0xFF, 0xFF, 0x82, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0A, 0xFF, 0xFF, 0x70, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0B, 0xFF, 0xFF, 0x70, 0x66, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x0A, 0xFF, 0xFF, 0x72, 0x67, 0x03 },
+		.mask = { 1, 0, 0, 1, 1, 1 },
+		.mapid = NT36672A_IC,
+	},
+	{
+		.id = { 0x55, 0x00, 0xFF, 0x00, 0x00, 0x00 },
+		.mask = { 1, 1, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0x55, 0x72, 0xFF, 0x00, 0x00, 0x00 },
+		.mask = { 1, 1, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xAA, 0x00, 0xFF, 0x00, 0x00, 0x00 },
+		.mask = { 1, 1, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xAA, 0x72, 0xFF, 0x00, 0x00, 0x00 },
+		.mask = { 1, 1, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x72, 0x67, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x70, 0x66, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x70, 0x67, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x72, 0x66, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36772_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x25, 0x65, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36525_IC,
+	},
+	{
+		.id = { 0xFF, 0xFF, 0xFF, 0x76, 0x66, 0x03 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT36676F_IC,
+	},
+	{ },
+};
+
+const struct __maybe_unused nt36xxx_trim_table nt51xxx_trim_id_table[] = {
+	/* TODO: below are from NT519XX driver, this is not supported  */
+	{
+		.id = { 0x00, 0x00, 0x00, 0x00, 0x19, 0x05 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT51900_IC,
+	},
+	{
+		.id = { 0x00, 0x00, 0x01, 0x20, 0x19, 0x05 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT51920_IC,
+	},
+	{
+		.id = { 0x00, 0x00, 0x00, 0x23, 0x19, 0x05 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT51923_IC,
+	},
+	{
+		.id = { 0x00, 0x00, 0x00, 0x26, 0x19, 0x05 },
+		.mask = { 0, 0, 0, 1, 1, 1 },
+		.mapid = NT51926_IC,
+	},
+	{ },
+};
+
+const struct nt36xxx_trim_data nt36xxx_spi_trim_data = {
+	.id_table = nt36xxx_spi_trim_id_table,
+	.sz_id_table = ARRAY_SIZE(nt36xxx_spi_trim_id_table),
+};
+
+const struct nt36xxx_trim_data nt36xxx_i2c_trim_data = {
+	.id_table = nt36xxx_i2c_trim_id_table,
+	.sz_id_table = ARRAY_SIZE(nt36xxx_i2c_trim_id_table),
+};
+
+const struct nt36xxx_trim_data nt51xxx_i2c_trim_data = {
+	.id_table = nt51xxx_trim_id_table,
+	.sz_id_table = ARRAY_SIZE(nt51xxx_trim_id_table),
+};
+
+const u32 nt36675_memory_maps[] = {
+	[MMAP_EVENT_BUF_ADDR] = 0x22D00,
+	[MMAP_RAW_PIPE0_ADDR] = 0x24000,
+	[MMAP_RAW_PIPE1_ADDR] = 0x24000,
+	[MMAP_BASELINE_ADDR] = 0x21B90,
+	[MMAP_DIFF_PIPE0_ADDR] = 0x20C60,
+	[MMAP_DIFF_PIPE1_ADDR] = 0x24C60,
+	[MMAP_READ_FLASH_CHECKSUM_ADDR] = 0x24000,
+	[MMAP_RW_FLASH_DATA_ADDR] = 0x24002,
+	[MMAP_BOOT_RDY_ADDR] = 0x3F10D,
+	[MMAP_BLD_LENGTH_ADDR] = 0x3F138,
+	[MMAP_ILM_LENGTH_ADDR] = 0x3F118,
+	[MMAP_DLM_LENGTH_ADDR] = 0x3F130,
+	[MMAP_BLD_DES_ADDR] = 0x3F114,
+	[MMAP_ILM_DES_ADDR] = 0x3F128,
+	[MMAP_DLM_DES_ADDR] = 0x3F12C,
+	[MMAP_G_ILM_CHECKSUM_ADDR] = 0x3F100,
+	[MMAP_G_DLM_CHECKSUM_ADDR] = 0x3F104,
+	[MMAP_R_ILM_CHECKSUM_ADDR] = 0x3F120,
+	[MMAP_R_DLM_CHECKSUM_ADDR] = 0x3F124,
+	[MMAP_BLD_CRC_EN_ADDR] = 0x3F30E,
+	[MMAP_DMA_CRC_EN_ADDR] = 0x3F136,
+	[MMAP_BLD_ILM_DLM_CRC_ADDR] = 0x3F133,
+	[MMAP_DMA_CRC_FLAG_ADDR] = 0x3F134,
+
+	/* below are specified by dts, so it might change by project-based */
+	[MMAP_SPI_RD_FAST_ADDR] = 0x03F310,
+	[MMAP_SWRST_N8_ADDR] = 0x03F0FE,
+
+	[MMAP_ENG_RST_ADDR] = 0x7FFF80,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0x1F64E,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+const u32 nt36672a_memory_maps[] = {
+	[MMAP_EVENT_BUF_ADDR] = 0x21C00,
+	[MMAP_RAW_PIPE0_ADDR] = 0x20000,
+	[MMAP_RAW_PIPE1_ADDR] = 0x23000,
+	[MMAP_BASELINE_ADDR] = 0x20BFC,
+	[MMAP_BASELINE_BTN_ADDR] = 0x23BFC,
+	[MMAP_DIFF_PIPE0_ADDR] = 0x206DC,
+	[MMAP_DIFF_PIPE1_ADDR] = 0x236DC,
+	[MMAP_RAW_BTN_PIPE0_ADDR] = 0x20510,
+	[MMAP_RAW_BTN_PIPE1_ADDR] = 0x23510,
+	[MMAP_DIFF_BTN_PIPE0_ADDR] = 0x20BF0,
+	[MMAP_DIFF_BTN_PIPE1_ADDR] = 0x23BF0,
+	[MMAP_READ_FLASH_CHECKSUM_ADDR] = 0x24000,
+	[MMAP_RW_FLASH_DATA_ADDR] = 0x24002,
+	/* Phase 2 Host Download */
+	[MMAP_BOOT_RDY_ADDR] = 0x3F10D,
+	/* BLD CRC */
+	[MMAP_BLD_LENGTH_ADDR] = 0x3F10E,    /* 0x3F10E ~ 0x3F10F     (2 bytes) */
+	[MMAP_ILM_LENGTH_ADDR] = 0x3F118,    /* 0x3F118 ~ 0x3F119     (2 bytes) */
+	[MMAP_DLM_LENGTH_ADDR] = 0x3F130,    /* 0x3F130 ~ 0x3F131     (2 bytes) */
+	[MMAP_BLD_DES_ADDR] = 0x3F114,    /* 0x3F114 ~ 0x3F116     (3 bytes) */
+	[MMAP_ILM_DES_ADDR] = 0x3F128,    /* 0x3F128 ~ 0x3F12A     (3 bytes) */
+	[MMAP_DLM_DES_ADDR] = 0x3F12C,    /* 0x3F12C ~ 0x3F12E     (3 bytes) */
+	[MMAP_G_ILM_CHECKSUM_ADDR] = 0x3F100,    /* 0x3F100 ~ 0x3F103     (4 bytes) */
+	[MMAP_G_DLM_CHECKSUM_ADDR] = 0x3F104,    /* 0x3F104 ~ 0x3F107     (4 bytes) */
+	[MMAP_R_ILM_CHECKSUM_ADDR] = 0x3F120,    /* 0x3F120 ~ 0x3F123 (4 bytes) */
+	[MMAP_R_DLM_CHECKSUM_ADDR] = 0x3F124,    /* 0x3F124 ~ 0x3F127 (4 bytes) */
+	[MMAP_BLD_CRC_EN_ADDR] = 0x3F30E,
+	[MMAP_DMA_CRC_EN_ADDR] = 0x3F132,
+	[MMAP_BLD_ILM_DLM_CRC_ADDR] = 0x3F133,
+	[MMAP_DMA_CRC_FLAG_ADDR] = 0x3F134,
+
+	/* below are specified by dts, so it might change by project-based */
+	[MMAP_SPI_RD_FAST_ADDR] = 0x03F310,
+	[MMAP_SWRST_N8_ADDR] = 0x03F0FE,
+
+	[MMAP_ENG_RST_ADDR] = 0x7FFF80,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0x1F64E,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+const u32 nt36676f_memory_maps[] = {
+	[MMAP_EVENT_BUF_ADDR] = 0x11A00,
+	[MMAP_RAW_PIPE0_ADDR] = 0x10000,
+	[MMAP_RAW_PIPE1_ADDR] = 0x12000,
+	[MMAP_BASELINE_ADDR] = 0x10B08,
+	[MMAP_BASELINE_BTN_ADDR] = 0x12B08,
+	[MMAP_DIFF_PIPE0_ADDR] = 0x1064C,
+	[MMAP_DIFF_PIPE1_ADDR] = 0x1264C,
+	[MMAP_RAW_BTN_PIPE0_ADDR] = 0x10634,
+	[MMAP_RAW_BTN_PIPE1_ADDR] = 0x12634,
+	[MMAP_DIFF_BTN_PIPE0_ADDR] = 0x10AFC,
+	[MMAP_DIFF_BTN_PIPE1_ADDR] = 0x12AFC,
+	[MMAP_READ_FLASH_CHECKSUM_ADDR] = 0x14000,
+	[MMAP_RW_FLASH_DATA_ADDR] = 0x14002,
+
+	/* below are specified by dts, so it might change by project-based */
+	[MMAP_SPI_RD_FAST_ADDR] = 0x03F310,
+	[MMAP_SWRST_N8_ADDR] = 0x03F0FE,
+
+	[MMAP_ENG_RST_ADDR] = 0x7FFF80,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0x1F64E,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+const u32 nt36772_memory_maps[] = {
+	[MMAP_EVENT_BUF_ADDR] = 0x11E00,
+	[MMAP_RAW_PIPE0_ADDR] = 0x10000,
+	[MMAP_RAW_PIPE1_ADDR] = 0x12000,
+	[MMAP_BASELINE_ADDR] = 0x10E70,
+	[MMAP_BASELINE_BTN_ADDR] = 0x12E70,
+	[MMAP_DIFF_PIPE0_ADDR] = 0x10830,
+	[MMAP_DIFF_PIPE1_ADDR] = 0x12830,
+	[MMAP_RAW_BTN_PIPE0_ADDR] = 0x10E60,
+	[MMAP_RAW_BTN_PIPE1_ADDR] = 0x12E60,
+	[MMAP_DIFF_BTN_PIPE0_ADDR] = 0x10E68,
+	[MMAP_DIFF_BTN_PIPE1_ADDR] = 0x12E68,
+	[MMAP_READ_FLASH_CHECKSUM_ADDR] = 0x14000,
+	[MMAP_RW_FLASH_DATA_ADDR] = 0x14002,
+	/* Phase 2 Host Download */
+	[MMAP_BOOT_RDY_ADDR] = 0x1F141,
+	[MMAP_POR_CD_ADDR] = 0x1F61C,
+	/* BLD CRC */
+	[MMAP_R_ILM_CHECKSUM_ADDR] = 0x1BF00,
+
+	/* below are specified by dts, so it might change by project-based */
+	[MMAP_SPI_RD_FAST_ADDR] = 0x03F310,
+	[MMAP_SWRST_N8_ADDR] = 0x03F0FE,
+
+	[MMAP_ENG_RST_ADDR] = 0x7FFF80,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0x1F64E,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+const u32 nt36525_memory_maps[] = {
+	[MMAP_EVENT_BUF_ADDR] = 0x11A00,
+	[MMAP_RAW_PIPE0_ADDR] = 0x10000,
+	[MMAP_RAW_PIPE1_ADDR] = 0x12000,
+	[MMAP_BASELINE_ADDR] = 0x10B08,
+	[MMAP_BASELINE_BTN_ADDR] = 0x12B08,
+	[MMAP_DIFF_PIPE0_ADDR] = 0x1064C,
+	[MMAP_DIFF_PIPE1_ADDR] = 0x1264C,
+	[MMAP_RAW_BTN_PIPE0_ADDR] = 0x10634,
+	[MMAP_RAW_BTN_PIPE1_ADDR] = 0x12634,
+	[MMAP_DIFF_BTN_PIPE0_ADDR] = 0x10AFC,
+	[MMAP_DIFF_BTN_PIPE1_ADDR] = 0x12AFC,
+	[MMAP_READ_FLASH_CHECKSUM_ADDR] = 0x14000,
+	[MMAP_RW_FLASH_DATA_ADDR] = 0x14002,
+
+	/* Phase 2 Host Download */
+	[MMAP_BOOT_RDY_ADDR] = 0x1F141,
+	[MMAP_POR_CD_ADDR] = 0x1F61C,
+	/* BLD CRC */
+	[MMAP_R_ILM_CHECKSUM_ADDR] = 0x1BF00,
+
+	/* below are specified by dts, so it might change by project-based */
+	[MMAP_SPI_RD_FAST_ADDR] = 0x03F310,
+	[MMAP_SWRST_N8_ADDR] = 0x03F0FE,
+
+	[MMAP_ENG_RST_ADDR] = 0x7FFF80,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0x1F64E,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+/* nt51xxx series use 8bit page shift */
+const u32 nt51900_memory_maps[] = {
+	[MMAP_BLD_SPE_PUPS_ADDR] = 0xFF135,
+	[MMAP_ENB_CASC_ADDR] = 0x3F02C,
+	[MMAP_EVENT_BUF_ADDR] = 0x2A800,
+
+	[MMAP_ENG_RST_ADDR] = 0xFF0FE,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0xFF004,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+const u32 nt51920_memory_maps[] = {
+	[MMAP_BLD_SPE_PUPS_ADDR] = 0xFF135,
+	[MMAP_ENB_CASC_ADDR] = 0x3F02C,
+	[MMAP_EVENT_BUF_ADDR] = 0x30500,
+
+	[MMAP_SW_RST_ADDR] = 0xFF0FE,
+	[MMAP_SWRST_N8_ADDR] = 0xFF0FE,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0xFF004,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+const u32 nt51923_memory_maps[] = {
+	[MMAP_BLD_SPE_PUPS_ADDR] = 0xFF135,
+	[MMAP_EVENT_BUF_ADDR] = 0x94000,
+
+	[MMAP_SDLOC_ADDR] = 0xFF02C,
+
+	[MMAP_SW_RST_ADDR] = 0xFF0FE,
+	[MMAP_SWRST_N8_ADDR] = 0xFF0FE,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0xFF004,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+const u32 nt51926_memory_maps[] = {
+	[MMAP_BLD_SPE_PUPS_ADDR] = 0xFF135,
+	[MMAP_EVENT_BUF_ADDR] = 0x94000,
+
+	[MMAP_IC_NUM_ADDR] = 0xFF02C,
+
+	[MMAP_SW_RST_ADDR] = 0xFF0FE,
+	[MMAP_SWRST_N8_ADDR] = 0xFF0FE,
+	[MMAP_MAGIC_NUMBER_PROBE_ADDR] = 0xFF004,
+
+	[MMAP_TOP_ADDR] = 0xffffff,
+};
+
+static const u32 *nt36xxx_mmap_table[] = {
+	[NT36525_IC] = nt36525_memory_maps,
+	[NT36672A_IC] = nt36672a_memory_maps,
+	[NT36675_IC] = nt36675_memory_maps,
+	[NT36676F_IC] = nt36676f_memory_maps,
+	[NT36772_IC] = nt36772_memory_maps,
+	[NT51900_IC] = nt51900_memory_maps,
+	[NT51920_IC] = nt51920_memory_maps,
+	[NT51923_IC] = nt51923_memory_maps,
+	[NT51926_IC] = nt51926_memory_maps,
+};
+
+void __maybe_unused _debug_irq(struct nt36xxx_ts *ts, int line)
+{
+	struct irq_desc *desc;
+
+	desc = irq_data_to_desc(irq_get_irq_data(ts->irq));
+	dev_info(ts->dev, "%d irq_desc depth=%d", line, desc->depth);
+}
+
+#define debug_irq(a) _debug_irq(a, __LINE__)
+
+static int nt36xxx_eng_reset_idle(struct nt36xxx_ts *ts)
+{
+	int ret;
+
+	if (!ts) {
+		dev_err(ts->dev, "%s %s empty", __func__, "nt36xxx_ts");
+		return -EINVAL;
+	}
+
+	if (!ts->mmap) {
+		dev_err(ts->dev, "%s %s empty", __func__, "ts->mmap");
+		return -EINVAL;
+	}
+
+	if (ts->mmap[MMAP_ENG_RST_ADDR] == 0)
+		return 0;
+
+	/* HACK to output something without read */
+	ret = regmap_write(ts->regmap, ts->mmap[MMAP_ENG_RST_ADDR], 0x5a);
+	if (ret) {
+		dev_err(ts->dev, "%s regmap write error\n", __func__);
+		return ret;
+	}
+
+	/* Wait until the MCU resets the fw state */
+	usleep_range(15000, 16000);
+
+	/* seemed not long enough */
+	msleep(30);
+	return ret;
+}
+
+/*
+ * nt36xxx_bootloader_reset - Reset MCU to bootloader
+ * @ts: Main driver structure
+ *
+ * Return: Always zero for success, negative number for error
+ */
+static int nt36xxx_bootloader_reset(struct nt36xxx_ts *ts)
+{
+	int ret = 0;
+
+	/* in spi version, need to set page to SWRST_N8_ADDR */
+	if (ts->mmap[MMAP_SWRST_N8_ADDR]) {
+		ret = regmap_write(ts->regmap, ts->mmap[MMAP_SWRST_N8_ADDR],
+			   NT36XXX_CMD_BOOTLOADER_RESET);
+		if (ret)
+			return ret;
+	} else {
+		pr_info("plz make sure MMAP_SWRST_N8_ADDR is set!\n");
+		return -EINVAL;
+	}
+
+	/* MCU has to reboot from bootloader: this is the typical boot time */
+	msleep(35);
+
+	if (ts->mmap[MMAP_SPI_RD_FAST_ADDR]) {
+		ret = regmap_write(ts->regmap, ts->mmap[MMAP_SPI_RD_FAST_ADDR], 0);
+		if (ret)
+			return ret;
+	}
+
+	return ret;
+}
+
+/**
+ * nt36xxx_check_reset_state - Check the boot state during reset
+ * @ts: Main driver structure
+ * @fw_state: Enumeration containing firmware states
+ *
+ * Return: Always zero for success, negative number for error
+ */
+static int nt36xxx_check_reset_state(struct nt36xxx_ts *ts,
+				     enum nt36xxx_fw_state fw_state)
+{
+	u8 buf[8] = { 0 };
+	int ret = 0, retry = NT36XXX_MAX_FW_RST_RETRY;
+
+	do {
+		ret = regmap_raw_read(ts->regmap, ts->mmap[MMAP_EVENT_BUF_ADDR]
+				 | NT36XXX_EVT_RESET_COMPLETE, buf, 6);
+		if (likely(ret == 0) &&
+		    (buf[1] >= fw_state) &&
+		    (buf[1] <= NT36XXX_STATE_MAX)) {
+			ret = 0;
+			break;
+		}
+		usleep_range(10000, 11000);
+	} while (--retry);
+
+	if (!retry) {
+		dev_err(ts->dev, "Firmware reset failed.\n");
+		ret = -EBUSY;
+	}
+
+	return ret;
+}
+
+/**
+ * nt36xxx_report - Report touch events
+ * @ts: Main driver structure
+ *
+ * Return: Always zero for success, negative number for error
+ */
+static void nt36xxx_report(struct nt36xxx_ts *ts)
+{
+	struct nt36xxx_abs_object *obj = &ts->abs_obj;
+	struct input_dev *input = ts->input;
+	u8 input_id = 0;
+	u8 point[NT36XXX_POINT_DATA_LEN + 1] = { 0 };
+	unsigned int ppos = 0;
+	int i, ret, finger_cnt = 0;
+	uint8_t press_id[NT36XXX_TOUCH_MAX_FINGER_NUM] = {0};
+
+	ret = regmap_raw_read(ts->regmap, ts->mmap[MMAP_EVENT_BUF_ADDR],
+				point, sizeof(point));
+	if (ret < 0) {
+		dev_err(ts->dev,
+			"Cannot read touch point data: %d\n", ret);
+		goto xfer_error;
+	}
+
+	/* wdt recovery and esd check */
+	for (i = 0; i < 7; i++) {
+		if ((point[i] != 0xFD) && (point[i] != 0xFE) && (point[i] != 0x77))
+			break;
+
+		mutex_lock(&ts->lock);
+		ts->status |= NT36XXX_STATUS_DOWNLOAD_RECOVER;
+		mutex_unlock(&ts->lock);
+		goto xfer_error;
+	}
+
+	for (i = 0; i < NT36XXX_TOUCH_MAX_FINGER_NUM; i++) {
+		ppos = 6 * i + 1;
+		input_id = point[ppos + 0] >> 3;
+
+		if ((input_id == 0) || (input_id > NT36XXX_TOUCH_MAX_FINGER_NUM))
+			continue;
+
+		if (((point[ppos] & 0x07) == 0x01) ||
+		    ((point[ppos] & 0x07) == 0x02)) {
+			obj->x = (point[ppos + 1] << 4) +
+				 (point[ppos + 3] >> 4);
+			obj->y = (point[ppos + 2] << 4) +
+				 (point[ppos + 3] & 0xf);
+
+			if ((obj->x > ts->prop.max_x) ||
+			    (obj->y > ts->prop.max_y))
+				continue;
+
+			obj->tm = point[ppos + 4];
+			if (obj->tm == 0)
+				obj->tm = 1;
+
+			obj->z = point[ppos + 5];
+			if (i < 2) {
+				obj->z += point[i + 63] << 8;
+				if (obj->z > NT36XXX_TOUCH_MAX_PRESSURE)
+					obj->z = NT36XXX_TOUCH_MAX_PRESSURE;
+			}
+
+			if (obj->z == 0)
+				obj->z = 1;
+
+			press_id[input_id - 1] = 1;
+
+			input_mt_slot(input, input_id - 1);
+			input_mt_report_slot_state(input,
+						   MT_TOOL_FINGER, true);
+			touchscreen_report_pos(input, &ts->prop,
+						obj->x,
+						obj->y, true);
+
+			input_report_abs(input, ABS_MT_TOUCH_MAJOR, obj->tm);
+			input_report_abs(input, ABS_MT_PRESSURE, obj->z);
+
+			finger_cnt++;
+		}
+	}
+
+	input_mt_sync_frame(input);
+
+	input_sync(input);
+
+xfer_error:
+	return;
+}
+
+static irqreturn_t nt36xxx_irq_handler(int irq, void *dev_id)
+{
+	struct nt36xxx_ts *ts = dev_id;
+
+	if (!ts->mmap)
+		goto exit;
+
+	disable_irq_nosync(ts->irq);
+
+	nt36xxx_report(ts);
+
+	enable_irq(ts->irq);
+
+exit:
+	if (ts->status & NT36XXX_STATUS_DOWNLOAD_RECOVER) {
+		mutex_lock(&ts->lock);
+		ts->status &= ~NT36XXX_STATUS_DOWNLOAD_RECOVER;
+		mutex_unlock(&ts->lock);
+		/* TODO: other builtin eeprom model might have another reset
+		 * approach other than download, might add here afterward
+		 */
+		if (ts->fw_name)
+			schedule_delayed_work(&ts->work, 40000);
+	}
+
+	return IRQ_HANDLED;
+}
+
+
+/**
+ * nt36xxx_chip_version_init - Detect Novatek NT36xxx family IC
+ * @ts: Main driver structure
+ *
+ * This function reads the ChipID from the IC and sets the right
+ * memory map for the detected chip.
+ *
+ * Return: Always zero for success, negative number for error
+ */
+static int nt36xxx_chip_version_init(struct nt36xxx_ts *ts)
+{
+	u8 buf[32] = { 0 };
+	int retry = NT36XXX_MAX_RETRIES;
+	int i, list, mapid, sz_id_table;
+	const struct nt36xxx_trim_table *trim_table;
+	int ret = -ENOENT;
+
+	if (!ts->data) {
+		dev_err(ts->dev, "ts->data empty!");
+		return -EIO;
+	}
+
+	if (!ts->data->trim_data) {
+		dev_err(ts->dev, "ts->data->trim_data empty!");
+		return -EIO;
+	}
+
+	trim_table = ts->data->trim_data->id_table;
+	sz_id_table =  ts->data->trim_data->sz_id_table;
+
+	ret = nt36xxx_bootloader_reset(ts);
+	if (ret) {
+		dev_err(ts->dev, "Can't reset the nvt IC\n");
+		return ret;
+	}
+
+	do {
+		if (ts->mmap[MMAP_SW_RST_ADDR]) {
+			ret = regmap_write(ts->regmap, ts->mmap[MMAP_SW_RST_ADDR],
+						NT36XXX_CMD_SOFTWARE_RESET);
+			if (ret) {
+				usleep_range(10000, 11000);
+				continue;
+			}
+		}
+
+		ret = regmap_raw_read(ts->regmap, ts->mmap[MMAP_MAGIC_NUMBER_PROBE_ADDR], buf, 7);
+		if (ret) {
+			usleep_range(10000, 11000);
+			continue;
+		}
+
+		dev_dbg(ts->dev, "%s buf[0..3-4..6]=%02X%02X%02X%02X-%02X%02X%02X\n",
+			__func__, buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6]);
+
+		if (ts->mmap[MMAP_SW_RST_ADDR]) {
+		/* Stop CRC check to prevent IC auto reboot */
+			if (((buf[1] == 0xFB) && (buf[2] == 0xFB) &&
+				(buf[3] == 0xFB)) ||
+				((buf[1] == 0xFC) && (buf[2] == 0xFC) &&
+				(buf[3] == 0xFC)) ||
+				((buf[1] == 0xFF) && (buf[2] == 0xFF) &&
+				(buf[3] == 0xFF))) {
+
+				usleep_range(10000, 11000);
+				ret = regmap_write(ts->regmap, ts->mmap[MMAP_BLD_SPE_PUPS_ADDR], 0xa5);
+				if (ret) {
+					usleep_range(10000, 11000);
+					continue;
+				}
+
+				ret = regmap_raw_read(ts->regmap, ts->mmap[MMAP_BLD_SPE_PUPS_ADDR], buf, 1);
+				if (ret) {
+					usleep_range(10000, 11000);
+					continue;
+				}
+
+				if (buf[0] != 0xa5) {
+					usleep_range(10000, 11000);
+					continue;
+				}
+			}
+		}
+
+		/* Compare read chip id with trim list */
+		for (list = 0; list < NT36XXX_ID_LIST_MAX; list++) {
+			if (!trim_table[list].mapid)
+				break;
+
+			if (trim_table[list].mapid > NTMAX_IC)
+				break;
+
+			if (list >= sz_id_table)
+				break;
+
+			/* Compare each not masked byte */
+			for (i = 0; i < NT36XXX_ID_LEN_MAX; i++) {
+				if (trim_table[list].mask[i] &&
+				    buf[i + 1] != trim_table[list].id[i])
+					break;
+			}
+
+			/* found and match with mask */
+			if (i == NT36XXX_ID_LEN_MAX) {
+				mapid = trim_table[list].mapid;
+				ret = 0;
+				ts->hw_crc = trim_table[list].hw_crc;
+
+				if (mapid == 0) {
+					dev_info(ts->dev, "NVT touch IC hw not found i=%d list=%d\n", i, list);
+					ret = -ENOENT;
+					goto exit;
+				}
+
+				WARN_ON(ts->hw_crc < 1);
+
+				dev_dbg(ts->dev, "hw crc support=%d\n", ts->hw_crc);
+
+				dev_info(ts->dev, "This is NVT touch IC, %06x, mapid %d", *(int *)&buf[4], mapid);
+
+				ts->mapid = mapid;
+
+				return 0;
+			}
+
+			ret = -ENOENT;
+		}
+
+		/* loop through the list and no match, print it */
+		if ((list >= sz_id_table) && retry == 1)
+	                dev_info(ts->dev, "%s buf[0..3-4..6]=%02X%02X%02X%02X-%02X%02X%02X not supported yet\n",
+	                        __func__, buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6]);
+
+		/* althrough it might be not match, but some case it need some reset */
+		usleep_range(10000, 11000);
+	} while (--retry);
+
+exit:
+	return ret;
+}
+
+/*
+ * this function is nearly direct copy from vendor source
+ */
+static int32_t nvt_bin_header_parser(struct device *dev, int hw_crc, const u8 *fwdata, size_t fwsize, struct nvt_ts_bin_map **bin_map_ptr, uint8_t *partition_ptr, uint8_t ilm_dlm_num)
+{
+	uint8_t list = 0;
+	uint32_t pos = 0x00;
+	uint32_t end = 0x00;
+	uint8_t info_sec_num = 0;
+	uint8_t ovly_sec_num = 0;
+	uint8_t ovly_info = 0;
+	uint8_t partition;
+	struct nvt_ts_bin_map *bin_map;
+
+	/* Find the header size */
+	end = fwdata[0] + (fwdata[1] << 8) + (fwdata[2] << 16) + (fwdata[3] << 24);
+	pos = 0x30;	/* info section start at 0x30 offset */
+	while (pos < end) {
+		info_sec_num++;
+		pos += 0x10;	/* each header info is 16 bytes */
+	}
+
+	/*
+	 * Find the DLM OVLY section
+	 * [0:3] Overlay Section Number
+	 * [4]   Overlay Info
+	 */
+	ovly_info = (fwdata[0x28] & 0x10) >> 4;
+	ovly_sec_num = (ovly_info) ? (fwdata[0x28] & 0x0F) : 0;
+
+	/*
+	 * calculate all partition number
+	 * ilm_dlm_num (ILM & DLM) + ovly_sec_num + info_sec_num
+	 */
+	*partition_ptr = partition = ilm_dlm_num + ovly_sec_num + info_sec_num;
+	dev_dbg(dev, "ovly_info = %d, ilm_dlm_num = %d, ovly_sec_num = %d, info_sec_num = %d, partition = %d\n",
+			ovly_info, ilm_dlm_num, ovly_sec_num, info_sec_num, partition);
+
+	/* allocated memory for header info */
+	*bin_map_ptr = bin_map = kzalloc((partition + 1) * sizeof(struct nvt_ts_bin_map), GFP_KERNEL);
+	if (bin_map == NULL) {
+		dev_err(dev, "kzalloc for bin_map failed!\n");
+		return -ENOMEM;
+	}
+
+	for (list = 0; list < partition; list++) {
+		/*
+		 * [1] parsing ILM & DLM header info
+		 * bin_addr : sram_addr : size (12-bytes)
+		 * crc located at 0x18 & 0x1C
+		 */
+		if (list < ilm_dlm_num) {
+			memcpy(&bin_map[list].bin_addr, &(fwdata[0 + list*12]), 4);
+			memcpy(&bin_map[list].sram_addr, &(fwdata[4 + list*12]), 4);
+			memcpy(&bin_map[list].size, &(fwdata[8 + list*12]), 4);
+			memcpy(&bin_map[list].crc, &(fwdata[0x18 + list*4]), 4);
+
+			if (!hw_crc) {
+				dev_err(dev, "%s %d sw-crc not support", __func__, __LINE__);
+				return -EINVAL;
+			}
+
+			if (list == 0)
+				sprintf(bin_map[list].name, "ILM");
+			else if (list == 1)
+				sprintf(bin_map[list].name, "DLM");
+		}
+
+		/*
+		 * [2] parsing others header info
+		 * sram_addr : size : bin_addr : crc (16-bytes)
+		 */
+		if ((list >= ilm_dlm_num) && (list < (ilm_dlm_num + info_sec_num))) {
+
+			/* others partition located at 0x30 offset */
+			pos = 0x30 + (0x10 * (list - ilm_dlm_num));
+
+			memcpy(&bin_map[list].sram_addr, &(fwdata[pos]), 4);
+			memcpy(&bin_map[list].size, &(fwdata[pos+4]), 4);
+			memcpy(&bin_map[list].bin_addr, &(fwdata[pos+8]), 4);
+			memcpy(&bin_map[list].crc, &(fwdata[pos+12]), 4);
+
+			if (!hw_crc) {
+				dev_info(dev, "ok, hw_crc not presents!");
+				return -EINVAL;
+			}
+
+			/* detect header end to protect parser function */
+			if ((bin_map[list].bin_addr == 0) && (bin_map[list].size != 0))
+				sprintf(bin_map[list].name, "Header");
+			else
+				sprintf(bin_map[list].name, "Info-%d", (list - ilm_dlm_num));
+		}
+
+		/*
+		 * [3] parsing overlay section header info
+		 * sram_addr : size : bin_addr : crc (16-bytes)
+		 */
+		if (list >= (ilm_dlm_num + info_sec_num)) {
+			/* overlay info located at DLM (list = 1) start addr */
+			pos = bin_map[1].bin_addr + (0x10 * (list - ilm_dlm_num - info_sec_num));
+
+			memcpy(&bin_map[list].sram_addr, &(fwdata[pos]), 4);
+			memcpy(&bin_map[list].size, &(fwdata[pos+4]), 4);
+			memcpy(&bin_map[list].bin_addr, &(fwdata[pos+8]), 4);
+			memcpy(&bin_map[list].crc, &(fwdata[pos+12]), 4);
+
+			if (!hw_crc) {
+				dev_err(dev, "%s %d sw_crc not support", __func__, __LINE__);
+				return -EINVAL;
+			}
+
+			sprintf(bin_map[list].name, "Overlay-%d", (list - ilm_dlm_num - info_sec_num));
+		}
+
+		/* BIN size error detect */
+		if ((bin_map[list].bin_addr + bin_map[list].size) > fwsize) {
+			dev_err(dev, "access range (0x%08X to 0x%08X) is larger than bin size!\n",
+					bin_map[list].bin_addr, bin_map[list].bin_addr + bin_map[list].size);
+			return -EINVAL;
+		}
+
+		dev_dbg(dev, "[%d][%s] SRAM (0x%08X), SIZE (0x%08X), BIN (0x%08X), CRC (0x%08X)\n",
+				list, bin_map[list].name, bin_map[list].sram_addr, bin_map[list].size,
+				bin_map[list].bin_addr, bin_map[list].crc);
+	}
+
+	return 0;
+}
+
+static int32_t nt36xxx_download_firmware_hw_crc(struct nt36xxx_ts *ts)
+{
+	uint32_t list = 0;
+	uint32_t bin_addr, sram_addr, size;
+	struct nvt_ts_bin_map *bin_map = ts->bin_map;
+	int max_write = min(regmap_get_raw_write_max(ts->regmap)
+			- NT36XXX_WRITE_PREFIX_LEN, NT36XXX_TRANSFER_LEN) >> 3 << 3;
+
+	nt36xxx_bootloader_reset(ts);
+
+	for (list = 0; list < ts->fw_data.partition; list++) {
+		int j;
+
+		/* initialize variable */
+		sram_addr = bin_map[list].sram_addr;
+		size = bin_map[list].size;
+		bin_addr = bin_map[list].bin_addr;
+
+		/* ignore reserved partition (Reserved Partition size is zero) */
+		if (!size) {
+			dev_dbg(ts->dev, "found empty part %d. skipping ", list);
+			continue;
+		} else {
+			size = size + 1;
+			dev_dbg(ts->dev, "found useful part %d. size 0x%x ", list, size);
+		}
+
+		bin_map[list].loaded = 1;
+
+		if (size / max_write)
+			dev_dbg(ts->dev, "%s %d paged write [%s] 0x%x, window 0x%x, residue 0x%x",
+					__func__, __LINE__, bin_map[list].name, size,
+					max_write, size % max_write);
+
+		for (j = 0; j < size; j += max_write) {
+			int window_size = ((size - j) / max_write) ? max_write :
+						((size - j) % max_write);
+
+			regmap_bulk_write(ts->regmap, sram_addr + j, &ts->fw_entry.data[bin_addr + j],
+							 window_size);
+		}
+
+	}
+
+	return 0;
+}
+
+static void nt36xxx_release_memory(void *data);
+static int _nt36xxx_boot_prepare_firmware(struct nt36xxx_ts *ts)
+{
+	int i, ret;
+	size_t fw_need_write_size = 0;
+	const struct firmware *fw_entry;
+	void *data;
+
+	WARN_ON(ts->hw_crc != 2);
+
+	/* add one more guard */
+	if (ts->status & NT36XXX_STATUS_PREPARE_FIRMWARE)
+		return 0;
+
+	/* supposed we need to load once and use many time */
+	if (ts->fw_entry.data)
+		return 0;
+
+	ret = request_firmware(&fw_entry, ts->fw_name, ts->dev);
+	if (ret) {
+		dev_err(ts->dev, "request fw fail name=%s\n", ts->fw_name);
+		return -ENOMEM;
+	}
+
+	/*
+	 * must allocate in DMA buffer otherwise fail spi tx DMA
+	 * so we need to manage our own fw struct
+	 * pm_resume need to re-upload fw for NT36675 IC
+	 *
+	 */
+	ts->fw_entry.data = data = kmemdup(fw_entry->data, fw_entry->size, GFP_KERNEL | GFP_DMA);
+
+	release_firmware(fw_entry);
+	if (!ts->fw_entry.data) {
+		dev_err(ts->dev, "memdup fw_data fail\n");
+		return -ENOMEM;
+	}
+	ts->fw_entry.size = fw_entry->size;
+
+	WARN_ON(ts->fw_entry.data[0] != fw_entry->data[0]);
+
+	for (i = (ts->fw_entry.size / 4096); i > 0; i--) {
+		if (strncmp(&ts->fw_entry.data[i * 4096 - 3], "NVT", 3) == 0) {
+			fw_need_write_size = i * 4096;
+			break;
+		}
+
+		if (strncmp(&ts->fw_entry.data[i * 4096 - 3], "MOD", 3) == 0) {
+			fw_need_write_size = i * 4096;
+			break;
+		}
+	}
+
+	if (fw_need_write_size == 0) {
+		dev_err(ts->dev, "fw parsing error\n");
+		kfree(data);
+		kfree(ts->bin_map);
+		ts->bin_map = NULL;
+		return -EIO;
+	}
+
+	if (*(ts->fw_entry.data + (fw_need_write_size - 4096)) + *(ts->fw_entry.data +
+						((fw_need_write_size - 4096) + 1)) != 0xFF) {
+		dev_err(ts->dev, "bin file FW_VER + FW_VER_BAR should be 0xFF!");
+		dev_err(ts->dev, "FW_VER=0x%02X, FW_VER_BAR=0x%02X\n",
+			*(ts->fw_entry.data+(fw_need_write_size - 4096)),
+			*(ts->fw_entry.data+(fw_need_write_size - 4096 + 1)));
+
+		kfree(data);
+		kfree(ts->bin_map);
+		ts->bin_map = NULL;
+		return -EIO;
+	}
+
+	ts->fw_data.ilm_dlm_num = 2;
+
+	ret = nvt_bin_header_parser(ts->dev, ts->hw_crc, ts->fw_entry.data, ts->fw_entry.size,
+			&ts->bin_map, &ts->fw_data.partition, ts->fw_data.ilm_dlm_num);
+	if (ret) {
+		kfree(data);
+		kfree(ts->bin_map);
+		ts->bin_map = NULL;
+
+		/* really dont let the tasklet re-enter since no needed for broken fw data */
+		ts->status |= NT36XXX_STATUS_DOWNLOAD_COMPLETE;
+		dev_err(ts->dev, "Parsing fw error, stop re-loading fw now on, ret=0x%x!", ret);
+		return ret;
+	}
+
+	ts->status |= NT36XXX_STATUS_PREPARE_FIRMWARE;
+
+	ret = devm_add_action_or_reset(ts->dev, nt36xxx_release_memory, ts);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static int _nt36xxx_boot_download_firmware(struct nt36xxx_ts *ts)
+{
+	int i, ret, retry = 0;
+	u8 val[8 * 4] = {0};
+
+	if (!(ts->status & NT36XXX_STATUS_PREPARE_FIRMWARE))
+		return -EIO;
+
+	if (ts->hw_crc) {
+		ret = nt36xxx_download_firmware_hw_crc(ts);
+		if (ret) {
+			dev_err(ts->dev, "nt36xxx_download_firmware_hw_crc fail!");
+			return ret;
+		}
+
+	} else {
+		dev_err(ts->dev, "non-hw_crc model is not support yet!");
+		return -EIO;
+	}
+
+	/* set ilm & dlm reg bank */
+	for (i = 0; i < ts->fw_data.partition; i++) {
+		if (strncmp(ts->bin_map[i].name, "ILM", 3) == 0) {
+			regmap_raw_write(ts->regmap, ts->mmap[MMAP_ILM_DES_ADDR], &ts->bin_map[i].sram_addr, 3);
+			regmap_raw_write(ts->regmap, ts->mmap[MMAP_ILM_LENGTH_ADDR], &ts->bin_map[i].size, 3);
+
+			/* crc > 1 then len = 4, crc = 1 then len = 3 */
+			regmap_raw_write(ts->regmap, ts->mmap[MMAP_G_ILM_CHECKSUM_ADDR], &ts->bin_map[i].crc,
+						sizeof(ts->bin_map[i].crc));
+		}
+		if (strncmp(ts->bin_map[i].name, "DLM", 3) == 0) {
+			regmap_raw_write(ts->regmap, ts->mmap[MMAP_DLM_DES_ADDR], &ts->bin_map[i].sram_addr, 3);
+			regmap_raw_write(ts->regmap, ts->mmap[MMAP_DLM_LENGTH_ADDR], &ts->bin_map[i].size, 3);
+
+			/* crc > 1 then len = 4, crc = 1 then len = 3 */
+			regmap_raw_write(ts->regmap, ts->mmap[MMAP_G_DLM_CHECKSUM_ADDR], &ts->bin_map[i].crc,
+						sizeof(ts->bin_map[i].crc));
+		}
+	}
+
+	/* nvt_bld_crc_enable() */
+	/* crc enable */
+	regmap_raw_read(ts->regmap, ts->mmap[MMAP_BLD_CRC_EN_ADDR], val, 1);
+
+	val[0] |= 1 << 7;
+	regmap_raw_write(ts->regmap, ts->mmap[MMAP_BLD_CRC_EN_ADDR], val, 1);
+
+	/* enable fw crc */
+	val[0] = 0;
+	regmap_raw_write(ts->regmap, ts->mmap[MMAP_EVENT_BUF_ADDR] | NT36XXX_EVT_RESET_COMPLETE, val, 1);
+
+	val[0] = 0xae;
+	regmap_raw_write(ts->regmap, ts->mmap[MMAP_EVENT_BUF_ADDR] | NT36XXX_EVT_HOST_CMD, val, 1);
+
+	/* nvt_boot_ready() */
+	/* Set Boot Ready Bit */
+	val[0] = 0x1;
+	regmap_raw_write(ts->regmap, ts->mmap[MMAP_BOOT_RDY_ADDR], val, 1);
+
+	/* old logic 5ms, retention to 10ms */
+	usleep_range(10000, 11000);
+
+	/* nvt_check_fw_reset_state() */
+	ret = nt36xxx_check_reset_state(ts, NT36XXX_STATE_INIT);
+	if (ret)
+		return ret;
+
+check_fw:
+	/* nvt_get_fw_info() */
+	ret = regmap_raw_read(ts->regmap, ts->mmap[MMAP_EVENT_BUF_ADDR] | NT36XXX_EVT_FWINFO, val, 16);
+	if (ret)
+		return ret;
+
+	dev_dbg(ts->dev, "Get default fw_ver=%d, max_x=%d, max_y=%d, by default max_x=%d max_y=%d\n",
+				val[2], ts->prop.max_x, ts->prop.max_y, ts->data->max_x, ts->data->max_y);
+
+	if (val[0] != 0xff && retry < 5) {
+		dev_err(ts->dev, "FW info is broken! fw_ver=0x%02X, ~fw_ver=0x%02X\n", val[1], val[2]);
+		retry++;
+		goto check_fw;
+	}
+
+	dev_info(ts->dev, "Touch IC fw loaded ok");
+
+	ts->status |= NT36XXX_STATUS_DOWNLOAD_COMPLETE;
+
+	return 0;
+}
+
+static void nt36xxx_download_firmware(struct work_struct *work)
+{
+	struct nt36xxx_ts *ts = container_of(work, struct nt36xxx_ts, work.work);
+	int ret;
+
+	cancel_delayed_work(&ts->work);
+
+	mutex_lock(&ts->lock);
+	_nt36xxx_boot_prepare_firmware(ts);
+	mutex_unlock(&ts->lock);
+
+	if (!(ts->status & NT36XXX_STATUS_PREPARE_FIRMWARE))
+		goto exit;
+
+	/* so the pm resume might have code to enable regulators. */
+	ret = pm_runtime_resume_and_get(ts->dev);
+	if (ret) {
+		dev_err(ts->dev, "%s resume fail 0x%x", __func__, ret);
+		goto exit;
+	}
+
+	disable_irq_nosync(ts->irq);
+
+	mutex_lock(&ts->lock);
+
+	ret = nt36xxx_eng_reset_idle(ts);
+	if (ret) {
+		dev_err(ts->dev, "Failed to reset chip\n");
+		goto unlock;
+	}
+
+	/* Set memory maps for the specific chip version */
+	ret = nt36xxx_chip_version_init(ts);
+	if (ret) {
+		dev_err(ts->dev, "Failed to check chip version\n");
+		goto unlock;
+	}
+
+	dev_dbg(ts->dev, "ts->status=0x%x", ts->status);
+
+	_nt36xxx_boot_download_firmware(ts);
+unlock:
+	mutex_unlock(&ts->lock);
+	enable_irq(ts->irq);
+
+	pm_runtime_put(ts->dev);
+exit:
+	if (!(ts->status & NT36XXX_STATUS_DOWNLOAD_COMPLETE))
+		schedule_delayed_work(&ts->work, 4000);
+}
+
+static void nt36xxx_release_memory(void *data)
+{
+	struct nt36xxx_ts *ts = data;
+
+	kfree(ts->bin_map);
+	kfree(ts->fw_entry.data);
+}
+
+static void nt36xxx_disable_regulators(void *data)
+{
+	struct nt36xxx_ts *ts = data;
+
+	regulator_bulk_disable(NT36XXX_NUM_SUPPLIES, ts->supplies);
+}
+
+static int nt36xxx_input_dev_config(struct nt36xxx_ts *ts, const struct input_id *id)
+{
+	struct device *dev = ts->dev;
+	int ret;
+
+	ts->input = devm_input_allocate_device(dev);
+	if (!ts->input)
+		return -ENOMEM;
+
+	input_set_drvdata(ts->input, ts);
+
+	ts->input->phys = devm_kasprintf(dev, GFP_KERNEL,
+				     "%s/input0", dev_name(dev));
+	if (!ts->input->phys)
+		return -ENOMEM;
+
+	ts->input->name = "nt36xxx_spi_0";
+	ts->input->dev.parent = dev;
+	ts->input->id = *id;
+
+	input_set_abs_params(ts->input, ABS_MT_PRESSURE, 0,
+						 NT36XXX_TOUCH_MAX_PRESSURE, 0, 0);
+	input_set_abs_params(ts->input, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+
+	input_set_abs_params(ts->input, ABS_MT_POSITION_X, 0,
+						 ts->data->abs_x_max - 1, 0, 0);
+	input_set_abs_params(ts->input, ABS_MT_POSITION_Y, 0,
+						 ts->data->abs_y_max - 1, 0, 0);
+
+	touchscreen_parse_properties(ts->input, true, &ts->prop);
+
+	WARN_ON(ts->prop.max_x < 1);
+
+	ret = input_mt_init_slots(ts->input, NT36XXX_TOUCH_MAX_FINGER_NUM,
+				  INPUT_MT_DIRECT | INPUT_MT_DROP_UNUSED);
+	if (ret) {
+		dev_err(dev, "Cannot init MT slots (%d)\n", ret);
+		return ret;
+	}
+
+	ret = input_register_device(ts->input);
+	if (ret) {
+		dev_err(dev, "Failed to register input device: %d\n",
+			ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+int nt36xxx_of_compatible(struct device *dev)
+{
+	struct device_node *np = dev->of_node;
+
+	if (!of_device_is_compatible(np, "novatek,NVT-default-spi")) {
+		const char *path = "/chosen";
+		struct device_node *dt_node;
+		const char *bootargs;
+
+		dt_node = of_find_node_by_path(path);
+		if (!dt_node) {
+			dev_err(dev, "Failed to find device-tree node: %s\n", path);
+			return -ENODEV;
+		}
+
+		if (!of_property_read_string(dt_node, "bootargs", &bootargs))
+			if (!strstr(bootargs, "tianma") && !strstr(bootargs, "nt36"))
+				return -ENODEV;
+
+		dev_info(dev, "Try to probe novatek/tianma panel as specified in chosen/bootargs.");
+	}
+	return 0;
+}
+
+int nt36xxx_probe(struct device *dev, int irq, const struct input_id *id,
+			struct regmap *regmap)
+{
+	const struct nt36xxx_chip_data *chip_data;
+	const char *signed_fwname = NULL;
+	int ret;
+	struct nt36xxx_ts *ts;
+
+	ts = devm_kzalloc(dev, sizeof(struct nt36xxx_ts), GFP_KERNEL);
+	if (!ts)
+		return -ENOMEM;
+
+	dev_set_drvdata(dev, ts);
+
+	chip_data = of_device_get_match_data(dev);
+	if (!chip_data)
+		return -EINVAL;
+
+	ts->dev = dev;
+	ts->regmap = regmap;
+	ts->irq = irq;
+
+	ts->data = chip_data;
+	memcpy(ts->mmap_data, chip_data->mmap, sizeof(ts->mmap_data));
+	ts->mmap = ts->mmap_data;
+
+	ts->supplies = devm_kcalloc(dev, NT36XXX_NUM_SUPPLIES,
+				    sizeof(*ts->supplies), GFP_KERNEL);
+	if (!ts->supplies)
+		return -ENOMEM;
+
+	ts->reset_gpio = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ts->reset_gpio))
+		return PTR_ERR(ts->reset_gpio);
+
+	gpiod_set_consumer_name(ts->reset_gpio, "nt36xxx_reset");
+
+	ts->irq_gpio = devm_gpiod_get_optional(dev, "irq", GPIOD_IN);
+	if (IS_ERR(ts->irq_gpio))
+		return PTR_ERR(ts->irq_gpio);
+
+	if (irq <= 0) {
+		ts->irq = gpiod_to_irq(ts->irq_gpio);
+		if (ts->irq <= 0) {
+			dev_err(dev, "either need irq or irq-gpio specified in devicetree node!\n");
+			return -EINVAL;
+		}
+
+		dev_info(ts->dev, "irq %d", ts->irq);
+	}
+
+	gpiod_set_consumer_name(ts->irq_gpio, "nt36xxx_irq");
+
+	if (drm_is_panel_follower(dev))
+		goto skip_regulators;
+
+	/* These supplies are optional, also shared with LCD panel */
+	ts->supplies[0].supply = "vdd";
+	ts->supplies[1].supply = "vio";
+	ret = devm_regulator_bulk_get(dev,
+				      NT36XXX_NUM_SUPPLIES,
+				      ts->supplies);
+	if (ret)
+		return dev_err_probe(dev, ret,
+				     "Cannot get supplies: %d\n", ret);
+
+	ret = regulator_bulk_enable(NT36XXX_NUM_SUPPLIES, ts->supplies);
+	if (ret)
+		return ret;
+
+	usleep_range(10000, 11000);
+
+	ret = devm_add_action_or_reset(dev, nt36xxx_disable_regulators, ts);
+	if (ret)
+		return ret;
+
+skip_regulators:
+	mutex_init(&ts->lock);
+
+	ret = nt36xxx_eng_reset_idle(ts);
+	if (ret) {
+		dev_err(dev, "Failed to check chip version\n");
+		return ret;
+	}
+
+	/* Set memory maps for the specific chip version */
+	ret = nt36xxx_chip_version_init(ts);
+	if (ret) {
+		dev_err(dev, "Failed to check chip version\n");
+		return ret;
+	}
+
+	/* enable auto-detect */
+	if  (chip_data->mapid > NT_NIL_IC) {
+		dev_info(dev, "Probe diag ended, please use approprate of compatible string. Exiting...");
+		return -ENODEV;
+	} else if (chip_data->mapid == 0) {
+		memcpy(ts->mmap_data, nt36xxx_mmap_table[ts->mapid], sizeof(ts->mmap_data));
+	} else {
+		memcpy(ts->mmap_data, ts->data->mmap, sizeof(ts->mmap_data));
+	}
+
+	ts->mmap = ts->mmap_data;
+
+	/* for nt519xx chip */
+	if (ts->mmap[MMAP_SW_RST_ADDR]) {
+		ret = nt36xxx_check_reset_state(ts, NT36XXX_STATE_INIT);
+		if (ret) {
+			dev_info(dev, "Autodetect and reset fail...\n");
+			return -ENODEV;
+		}
+	}
+
+	ret = nt36xxx_input_dev_config(ts, ts->data->id);
+	if (ret) {
+		dev_err(dev, "failed set input device: %d\n", ret);
+		return ret;
+	}
+
+	ret = devm_request_threaded_irq(dev, ts->irq, NULL, nt36xxx_irq_handler,
+			IRQ_TYPE_EDGE_RISING | IRQF_ONESHOT, dev_name(dev), ts);
+	if (ret) {
+		dev_err(dev, "request irq failed: %d\n", ret);
+		return ret;
+	}
+
+	/* init with default name */
+	if (ts->data->ic_fw_needed & BIT(ts->mapid))
+		ts->fw_name = ts->data->fw_name;
+
+	/* support overriding fw name */
+	of_property_read_string_index(ts->dev->of_node, "firmware-name", 0, &signed_fwname);
+	if (signed_fwname)
+		ts->fw_name = signed_fwname;
+
+	if (drm_is_panel_follower(dev)) {
+		ts->panel_follower.funcs = &nt36xxx_panel_follower_funcs;
+		devm_drm_panel_add_follower(dev, &ts->panel_follower);
+	}
+
+	pm_runtime_enable(dev);
+
+	/* have to make sure this is first time schedule work, if devm_drm_panel_add_follower
+	 * called into internal resume with schedule_delay_work, then block it over there
+	 */
+	if (ts->fw_name) {
+		ts->status |= NT36XXX_STATUS_NEED_FIRMWARE;
+
+		/* make the driver sleep while waiting tasklet fw download */
+		pm_runtime_suspend(dev);
+
+		devm_delayed_work_autocancel(dev, &ts->work, nt36xxx_download_firmware);
+		schedule_delayed_work(&ts->work, 0);
+	}
+
+	dev_info(dev, "probe ok!");
+	return 0;
+}
+EXPORT_SYMBOL_GPL(nt36xxx_probe);
+
+static int __maybe_unused nt36xxx_internal_pm_suspend(struct device *dev)
+{
+	struct nt36xxx_ts *ts = dev_get_drvdata(dev);
+	int ret = 0;
+
+	mutex_lock(&ts->lock);
+	ts->status |= NT36XXX_STATUS_SUSPEND;
+	mutex_unlock(&ts->lock);
+
+	cancel_delayed_work_sync(&ts->work);
+
+	/* adding the mutex is to protect concurrent with download_task */
+	mutex_lock(&ts->lock);
+	if (ts->mmap[MMAP_EVENT_BUF_ADDR])
+		ret = regmap_write(ts->regmap, ts->mmap[MMAP_EVENT_BUF_ADDR], NT36XXX_CMD_ENTER_SLEEP);
+
+	if (ret)
+		dev_err(ts->dev, "Cannot enter suspend!\n");
+	mutex_unlock(&ts->lock);
+
+	return 0;
+}
+
+static int __maybe_unused nt36xxx_pm_suspend(struct device *dev)
+{
+	struct nt36xxx_ts *ts = dev_get_drvdata(dev);
+	int ret=0;
+
+	if (drm_is_panel_follower(dev))
+		return 0;
+
+	disable_irq_nosync(ts->irq);
+
+	regulator_bulk_disable(NT36XXX_NUM_SUPPLIES, ts->supplies);
+
+	ret = nt36xxx_internal_pm_suspend(dev);
+	return ret;
+}
+
+static int __maybe_unused nt36xxx_internal_pm_resume(struct device *dev)
+{
+	struct nt36xxx_ts *ts = dev_get_drvdata(dev);
+	int ret;
+
+	mutex_lock(&ts->lock);
+	if(ts->status & (NT36XXX_STATUS_SUSPEND | NT36XXX_STATUS_DOWNLOAD_COMPLETE))
+                ts->status &= ~(NT36XXX_STATUS_SUSPEND | NT36XXX_STATUS_DOWNLOAD_COMPLETE);
+
+	if (!(ts->status & NT36XXX_STATUS_NEED_FIRMWARE)) {
+		ret = nt36xxx_bootloader_reset(ts);
+                if (ret)
+                        dev_err(ts->dev, "reset failed...\n");
+
+	        ret = nt36xxx_check_reset_state(ts, NT36XXX_STATE_NORMAL_RUN);
+		if (ret)
+			dev_err(ts->dev, "check state normal failed...\n");
+	}
+	mutex_unlock(&ts->lock);
+
+	if (ts->status & NT36XXX_STATUS_NEED_FIRMWARE)
+                schedule_delayed_work(&ts->work, 0);
+
+	return 0;
+}
+
+static int __maybe_unused nt36xxx_pm_resume(struct device *dev)
+{
+	struct nt36xxx_ts *ts = dev_get_drvdata(dev);
+	int ret=0;
+
+        if (drm_is_panel_follower(dev))
+                return 0;
+
+	enable_irq(ts->irq);
+
+	ret = regulator_bulk_enable(NT36XXX_NUM_SUPPLIES, ts->supplies);
+
+	ret = nt36xxx_internal_pm_resume(dev);
+	return ret;
+}
+
+EXPORT_GPL_SIMPLE_DEV_PM_OPS(nt36xxx_pm_ops,
+			     nt36xxx_pm_suspend,
+			     nt36xxx_pm_resume);
+
+static int panel_prepared(struct drm_panel_follower *follower)
+{
+	struct nt36xxx_ts *ts = container_of(follower, struct nt36xxx_ts, panel_follower);
+
+	if (ts->status & NT36XXX_STATUS_SUSPEND)
+		enable_irq(ts->irq);
+
+	/* supposed to clear the flag here, but leave to internal_pm_resume
+	 * for greater purpose, then clear flag as:
+	 * ts->status &= ~NT36XXX_STATUS_SUSPEND;
+	 */
+	return nt36xxx_internal_pm_resume(ts->dev);
+}
+
+static int panel_unpreparing(struct drm_panel_follower *follower)
+{
+	struct nt36xxx_ts *ts = container_of(follower, struct nt36xxx_ts, panel_follower);
+
+	mutex_lock(&ts->lock);
+	ts->status |= NT36XXX_STATUS_SUSPEND;
+	mutex_unlock(&ts->lock);
+
+	disable_irq_nosync(ts->irq);
+
+	return nt36xxx_internal_pm_suspend(ts->dev);
+}
+
+static struct drm_panel_follower_funcs nt36xxx_panel_follower_funcs = {
+	.panel_prepared = panel_prepared,
+	.panel_unpreparing = panel_unpreparing,
+};
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("NT36XXX Touchscreen driver");
+MODULE_AUTHOR("AngeloGioacchino Del Regno <kholk11@gmail.com>");
+MODULE_AUTHOR("George Chan <gchan9527@gmail.com>");
diff --git a/drivers/input/touchscreen/nt36xxx_i2c.c b/drivers/input/touchscreen/nt36xxx_i2c.c
new file mode 100644
index 00000000000000..311632169ea34a
--- /dev/null
+++ b/drivers/input/touchscreen/nt36xxx_i2c.c
@@ -0,0 +1,319 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * NT36XXX I2C Touchscreen Driver
+ *
+ * Copyright (C) 2020 - 2021 Goodix, Inc.
+ * Copyright (C) 2023 Linaro Ltd.
+ * Copyright (C) 2023-2024 George Chan <gchan9527@gmail.com>
+ *
+ * Based on goodix_ts_berlin driver.
+ */
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/input/touchscreen.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/regmap.h>
+#include <linux/unaligned.h>
+
+#include "nt36xxx.h"
+
+#define I2C_READ_PREFIX_LEN	1
+#define I2C_WRITE_PREFIX_LEN	1
+
+#define DEBUG 0
+
+/*
+ * there are two kinds of i2c read/write:
+ * 	(a)i2c_read()/i2c_write()/i2c_write_then_read(),
+ * 	(b)and the i2c_sync itself.
+ *
+ * we have to choose one and stick together, cross-use otherwise caused problem.
+ * the addressing mode is | 0xff 0xXX 0xYY | 0xZ1 ... data1...| 0xZ2 ...data2... | ...
+ * 	0xXX is bit[23..16]
+ * 	0xYY is bit[15..7]
+ * above describe a 'page select' ops
+ * 	0xZ1 is bit[7..0], addr for read ops
+ *	0xZ2 is bit[7..0] | 0x80, addr for write ops
+ * there is no restriction on the read write order.
+*/
+
+static int _nt36xxx_i2c_write(void *context, const void *data, size_t count)
+{
+        struct device *dev = context;
+        struct i2c_client *i2c = to_i2c_client(dev);
+        int ret;
+
+        ret = i2c_master_send(i2c, data, count);
+        if (ret == count)
+                return 0;
+        else if (ret < 0)
+                return ret;
+        else
+                return -EIO;
+}
+
+static int nt36xxx_i2c_write(void *dev, const void *data,
+                                   size_t len)
+{
+	int32_t ret;
+	void *data1 = kmemdup(data, len, GFP_KERNEL|GFP_DMA);
+	if (!data1)
+		return -ENOMEM;
+
+	u8 addr[4] = { 0xff, *(u32 *)data >> 15, *(u32 *)data >> 7,  (*(u32 *)data & 0x7f) | 0x80};
+	memcpy(data1, addr, 4);
+
+	dev_dbg(dev, "%s len=0x%lx", __func__, len);
+
+	_nt36xxx_i2c_write(dev, data1, 3);
+	ret = _nt36xxx_i2c_write(dev, data1 + 3, len - 3);
+	if (ret)
+		dev_err(dev, "transfer err %d\n ", ret);
+	else if (DEBUG) {
+
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, data, 3, true);
+
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, data + 3, (len - 3) > 0x20 ? 0x20 : len - 3 , true);
+	}
+
+	kfree(data1);
+	return ret;
+}
+
+static int nt519xx_i2c_write(void *dev, const void *data,
+                                   size_t len)
+{
+        int32_t ret;
+        void *data1 = kmemdup(data, len, GFP_KERNEL|GFP_DMA);
+        if (!data1)
+                return -ENOMEM;
+
+        u8 addr[4] = { 0xff, *(u32 *)data >> 15, *(u32 *)data >> 8,  (*(u32 *)data & 0x7f) | 0x80};
+        memcpy(data1, addr, 4);
+
+        dev_dbg(dev, "%s len=0x%lx", __func__, len);
+
+        _nt36xxx_i2c_write(dev, data1, 3);
+        ret = _nt36xxx_i2c_write(dev, data1 + 3, len - 3);
+        if (ret)
+                dev_err(dev, "transfer err %d\n ", ret);
+        else if (DEBUG) {
+
+                print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+                        16, 1, data, 3, true);
+
+                print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+                        16, 1, data + 3, (len - 3) > 0x20 ? 0x20 : len - 3 , true);
+        }
+
+        kfree(data1);
+        return ret;
+}
+
+static int _nt36xxx_i2c_read(void *context,
+                           const void *reg, size_t reg_size,
+                           void *val, size_t val_size)
+{
+        struct device *dev = context;
+        struct i2c_client *i2c = to_i2c_client(dev);
+        struct i2c_msg xfer[2];
+        int ret;
+
+        xfer[0].addr = i2c->addr;
+        xfer[0].flags = 0;
+        xfer[0].len = reg_size;
+        xfer[0].buf = (void *)reg;
+
+        xfer[1].addr = i2c->addr;
+        xfer[1].flags = I2C_M_RD;
+        xfer[1].len = val_size;
+        xfer[1].buf = val;
+
+        ret = i2c_transfer(i2c->adapter, xfer, 2);
+        if (ret == 2)
+                return 0;
+        else if (ret < 0)
+                return ret;
+        else
+                return -EIO;
+}
+
+static int nt36xxx_i2c_read(void *dev, const void *reg_buf,
+                                  size_t reg_size, void *val_buf,
+                                  size_t val_size)
+{
+	int ret;
+	u8 addr[4] = { 0xff, *(u32 *)reg_buf >> 15, *(u32 *)reg_buf >> 7,  *(u32 *)reg_buf & 0x7f };
+
+	ret = _nt36xxx_i2c_write(dev, addr, 3);
+	if (ret) {
+		dev_err(dev, "transfer0 err %s %d ret=%d", __func__, __LINE__, ret);
+		return ret;
+	}
+
+	ret = _nt36xxx_i2c_read(dev, &addr[3] , 1, val_buf, val_size);
+	if (ret) {
+		dev_err(dev, "transfer1 err %s %d ret=%d", __func__, __LINE__, ret);
+		return ret;
+	}
+
+	if (DEBUG) {
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, addr, 3, true);
+
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, addr, (val_size) > 0x20 ? 0x20 : val_size % 0x20 , true);
+
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, val_buf, (val_size > 0x20) ? 0x20 : val_size % 0x20 , true);
+	}
+
+	return ret;
+}
+
+static int nt519xx_i2c_read(void *dev, const void *reg_buf,
+                                  size_t reg_size, void *val_buf,
+                                  size_t val_size)
+{
+        int ret;
+        u8 addr[4] = { 0xff, *(u32 *)reg_buf >> 15, *(u32 *)reg_buf >> 8,  *(u32 *)reg_buf & 0x7f };
+
+        ret = _nt36xxx_i2c_write(dev, addr, 3);
+        if (ret) {
+                dev_err(dev, "transfer0 err %s %d ret=%d", __func__, __LINE__, ret);
+                return ret;
+        }
+
+        ret = _nt36xxx_i2c_read(dev, &addr[3] , 1, val_buf, val_size);
+        if (ret) {
+                dev_err(dev, "transfer1 err %s %d ret=%d", __func__, __LINE__, ret);
+                return ret;
+        }
+
+        if (DEBUG) {
+                print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+                        16, 1, addr, 3, true);
+
+                print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+                        16, 1, addr, (val_size) > 0x20 ? 0x20 : val_size % 0x20 , true);
+
+                print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+                        16, 1, val_buf, (val_size > 0x20) ? 0x20 : val_size % 0x20 , true);
+        }
+
+        return ret;
+}
+
+const struct regmap_config nt36xxx_regmap_config_32bit = {
+	.name = "nt36xxx_hw",
+	.reg_bits = 32,
+	.val_bits = 8,
+	.read = nt36xxx_i2c_read,
+	.write = nt36xxx_i2c_write,
+
+	.zero_flag_mask = true, /* this is needed to make sure addr is not write_masked */
+	.cache_type = REGCACHE_NONE,
+};
+
+const struct regmap_config nt519xx_regmap_config_32bit = {
+        .name = "nt36xxx_hw",
+        .reg_bits = 32,
+        .val_bits = 8,
+        .read = nt519xx_i2c_read,
+        .write = nt519xx_i2c_write,
+
+        .zero_flag_mask = true, /* this is needed to make sure addr is not write_masked */
+        .cache_type = REGCACHE_NONE,
+};
+
+static const struct input_id nt36xxx_i2c_input_id = {
+	.bustype = BUS_I2C,
+};
+
+static int nt36xxx_i2c_probe(struct i2c_client *i2c)
+{
+	struct regmap_config *regmap_config;
+	struct regmap *regmap;
+
+	regmap_config = devm_kmemdup(&i2c->dev, &nt36xxx_regmap_config_32bit,
+				     sizeof(*regmap_config), GFP_KERNEL);
+	if (!regmap_config) {
+		dev_err(&i2c->dev, "memdup regmap_config fail\n");
+		return -ENOMEM;
+	}
+
+	regmap = devm_regmap_init(&i2c->dev, NULL, i2c, regmap_config);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	return nt36xxx_probe(&i2c->dev, i2c->irq,
+				   &nt36xxx_i2c_input_id, regmap);
+}
+
+static const struct nt36xxx_chip_data nt36xxx_default_config = {
+	.config = &nt36xxx_regmap_config_32bit,
+	.mmap = nt36676f_memory_maps, /* by luck that magic addr are same */
+	.trim_data = &nt36xxx_i2c_trim_data,
+	.max_x = 1080,
+	.max_y = 2400,
+	.abs_x_max = 1080,
+	.abs_y_max = 2400,
+	.id = &nt36xxx_i2c_input_id,
+	.mapid = 0,
+	.fw_name = "novatek_ts_tianma_fw.bin",
+	.ic_fw_needed = BIT(NT36675_IC),
+};
+
+static const struct nt36xxx_chip_data nt519xx_default_config = {
+	.config = &nt519xx_regmap_config_32bit,
+	.mmap = nt51900_memory_maps, /* by luck that magic addr are same */
+	.trim_data = &nt51xxx_i2c_trim_data,
+	.max_x = 1080,
+	.max_y = 2400,
+	.abs_x_max = 1080,
+	.abs_y_max = 2400,
+	.id = &nt36xxx_i2c_input_id,
+	.mapid = 0,
+	.ic_fw_needed = 0,
+};
+
+static const struct i2c_device_id nt36xxx_i2c_ids[] = {
+	{ "nt36675-i2c", 0 },
+	{ "nt36xxx-i2c", 1 },
+	{ },
+};
+MODULE_DEVICE_TABLE(i2c, nt36xxx_i2c_ids);
+
+static const struct of_device_id nt36xxx_i2c_of_match[] = {
+	{
+		.compatible = "novatek,nt36xxx-i2c",
+		.data = &nt36xxx_default_config,
+	},
+	{
+		.compatible = "novatek,nt519xx-i2c",
+		.data = &nt519xx_default_config,
+	},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, nt36xxx_i2c_of_match);
+
+static struct i2c_driver nt36xxx_i2c_driver = {
+	.driver = {
+		.name = "nt36675-i2c",
+		.of_match_table = nt36xxx_i2c_of_match,
+		.pm = pm_sleep_ptr(&nt36xxx_pm_ops),
+	},
+	.probe = nt36xxx_i2c_probe,
+	.id_table = nt36xxx_i2c_ids,
+};
+module_i2c_driver(nt36xxx_i2c_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("NT36XXX I2C Touchscreen driver");
+MODULE_AUTHOR("Neil Armstrong <neil.armstrong@linaro.org>");
+MODULE_AUTHOR("George Chan <gchan9527@gmail.com>");
diff --git a/drivers/input/touchscreen/nt36xxx_spi.c b/drivers/input/touchscreen/nt36xxx_spi.c
new file mode 100644
index 00000000000000..f8c44ca3a5bdbb
--- /dev/null
+++ b/drivers/input/touchscreen/nt36xxx_spi.c
@@ -0,0 +1,230 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * NT36XXX SPI Touchscreen Driver
+ *
+ * Copyright (C) 2020 - 2021 Goodix, Inc.
+ * Copyright (C) 2023 Linaro Ltd.
+ * Copyright (C) 2023-2024 George Chan <gchan9527@gmail.com>
+ *
+ * Based on goodix_ts_berlin driver.
+ */
+#include <linux/input.h>
+#include <linux/input/touchscreen.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/regmap.h>
+#include <linux/spi/spi.h>
+#include <linux/unaligned.h>
+
+#include "nt36xxx.h"
+
+#define DEBUG 0
+
+/*
+ * there are two kinds of spi read/write:
+ * (a)spi_read()/spi_write()/spi_write_then_read(),
+ * (b)and the spi_sync itself.
+ *
+ * we have to choose one and stick together, cross-use otherwise caused problem.
+ * the addressing mode is | 0xff 0xXX 0xYY | 0xZ1 ... data1...| 0xZ2 ...data2... | ...
+ * - 0xXX is bit[23..16]
+ * - 0xYY is bit[15..7]
+ * above describe a 'page select' ops
+ * - 0xZ1 is bit[7..0], addr for read ops
+ * - 0xZ2 is bit[7..0] | 0x80, addr for write ops
+ * there is no restriction on the read write order.
+ */
+static int nt36xxx_spi_write(void *dev, const void *data, size_t len)
+{
+	struct spi_device *spi = to_spi_device((struct device *)dev);
+	int32_t ret;
+	void *data1;
+	u8 addr[4];
+
+	data1 = kmemdup(data, len, GFP_KERNEL|GFP_DMA);
+	if (!data1)
+		return -ENOMEM;
+
+	addr[0] = 0xff;
+	addr[1] = (u8)((*(u32 *)data & 0x7f) | 0x80);
+	addr[2] = (u8)((*(u32 *)data) >> 7);
+	addr[3] = (u8)((*(u32 *)data) >> 15);
+	memcpy(data1, addr, 4);
+
+	dev_dbg(dev, "%s len=0x%lx", __func__, len);
+
+	spi_write(spi, data1, 3);
+	ret = spi_write(spi, data1 + 3, len - 3);
+	if (ret)
+		dev_err(dev, "transfer err %d\n ", ret);
+	else if (DEBUG) {
+
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, data, 3, true);
+
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, data + 3, (len - 3) > 0x20 ? 0x20 : len - 3, true);
+	}
+
+	kfree(data1);
+	return ret;
+}
+
+static int nt36xxx_spi_read(void *dev, const void *reg_buf,
+				size_t reg_size, void *val_buf,
+				size_t val_size)
+{
+	struct spi_device *spi = to_spi_device(dev);
+	int ret;
+	u8 addr[4] = { 0xff, *(u32 *)reg_buf >> 15, *(u32 *)reg_buf >> 7,  *(u32 *)reg_buf & 0x7f };
+
+	ret = spi_write(spi, addr, 3);
+	if (ret) {
+		dev_err(dev, "transfer0 err %s %d ret=%d", __func__, __LINE__, ret);
+		return ret;
+	}
+
+	ret = spi_write_then_read(spi, &addr[3], 1, val_buf, val_size);
+	if (ret) {
+		dev_err(dev, "transfer1 err %s %d ret=%d", __func__, __LINE__, ret);
+		return ret;
+	}
+
+	if (DEBUG) {
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, addr, 3, true);
+
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, addr, (val_size) > 0x20 ? 0x20 : val_size % 0x20, true);
+
+		print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_OFFSET,
+			16, 1, val_buf, (val_size > 0x20) ? 0x20 : val_size % 0x20, true);
+	}
+
+	return ret;
+}
+
+static const struct regmap_config nt36xxx_regmap_config_32bit = {
+	.name = "nt36xxx_hw",
+	.reg_bits = 32,
+	.val_bits = 8,
+	.read = nt36xxx_spi_read,
+	.write = nt36xxx_spi_write,
+
+	.zero_flag_mask = true, /* this is needed to make sure addr is not write_masked */
+	.cache_type = REGCACHE_NONE,
+};
+
+static const struct input_id nt36xxx_spi_input_id = {
+	.bustype = BUS_SPI,
+};
+
+static int nt36xxx_spi_probe(struct spi_device *spi)
+{
+	struct regmap_config *regmap_config;
+	struct regmap *regmap;
+	size_t max_size;
+	int ret = 0;
+
+	ret = nt36xxx_of_compatible(&spi->dev);
+	if (ret)
+		return ret;
+
+	regmap_config = devm_kmemdup(&spi->dev, &nt36xxx_regmap_config_32bit,
+				     sizeof(*regmap_config), GFP_KERNEL);
+	if (!regmap_config) {
+		dev_err(&spi->dev, "memdup regmap_config fail\n");
+		return -ENOMEM;
+	}
+
+	spi->mode = SPI_MODE_0;
+	spi->bits_per_word = 8;
+	ret = spi_setup(spi);
+	if (ret) {
+		dev_err(&spi->dev, "SPI setup error %d\n", ret);
+		return ret;
+	}
+
+	/* don't exceed max specified SPI CLK frequency */
+	if (spi->max_speed_hz > MAX_SPI_FREQ_HZ) {
+		dev_err(&spi->dev, "SPI CLK %d Hz?\n", spi->max_speed_hz);
+		return -EINVAL;
+	}
+
+	max_size = spi_max_transfer_size(spi);
+	regmap_config->max_raw_read = max_size - NT36XXX_READ_PREFIX_LEN;
+	regmap_config->max_raw_write = max_size - NT36XXX_WRITE_PREFIX_LEN;
+
+	regmap = devm_regmap_init(&spi->dev, NULL, spi, regmap_config);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	return nt36xxx_probe(&spi->dev, spi->irq,
+				   &nt36xxx_spi_input_id, regmap);
+}
+
+static const struct nt36xxx_chip_data nt36xxx_default_config = {
+	.config = &nt36xxx_regmap_config_32bit,
+	.mmap = nt36675_memory_maps, /* by luck that magic addr are same */
+	.trim_data = &nt36xxx_spi_trim_data,
+	.max_x = 1080,
+	.max_y = 2400,
+	.abs_x_max = 1080,
+	.abs_y_max = 2400,
+	.id = &nt36xxx_spi_input_id,
+	.mapid = 0,
+	.fw_name = "novatek_ts_tianma_fw.bin",
+	.ic_fw_needed = BIT(NT36675_IC),
+};
+
+static const struct nt36xxx_chip_data nt36xxx_probe_default_config = {
+	.config = &nt36xxx_regmap_config_32bit,
+	.mmap = nt36675_memory_maps, /* by luck that magic addr are same */
+	.trim_data = &nt36xxx_spi_trim_data,
+	.max_x = 1080,
+	.max_y = 2400,
+	.abs_x_max = 1080,
+	.abs_y_max = 2400,
+	.id = &nt36xxx_spi_input_id,
+	.mapid = NT_NIL_IC,
+};
+
+static const struct spi_device_id nt36xxx_spi_ids[] = {
+	{ "nt36675-spi", 0 },
+	{ "nt36xxx-spi", 1 },
+	{ "NVT-default-spi", 2},
+	{ },
+};
+MODULE_DEVICE_TABLE(spi, nt36xxx_spi_ids);
+
+static const struct of_device_id nt36xxx_spi_of_match[] = {
+	{
+		.compatible = "novatek,nt36xxx-spi",
+		.data = &nt36xxx_default_config,
+	},
+	/* this is only for probe only, return -ENODEV in the end */
+	{
+		.compatible = "novatek,NVT-default-spi",
+		.data = &nt36xxx_probe_default_config,
+	},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, nt36xxx_spi_of_match);
+
+static struct spi_driver nt36xxx_spi_driver = {
+	.driver = {
+		.name = "nt36xxx-spi",
+		.of_match_table = nt36xxx_spi_of_match,
+		.pm = pm_sleep_ptr(&nt36xxx_pm_ops),
+	},
+	.probe = nt36xxx_spi_probe,
+	.id_table = nt36xxx_spi_ids,
+};
+module_spi_driver(nt36xxx_spi_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("NT36XXX SPI Touchscreen driver");
+MODULE_AUTHOR("Neil Armstrong <neil.armstrong@linaro.org>");
+MODULE_AUTHOR("George Chan <gchan9527@gmail.com>");
diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 8ba096b8ebca24..4a3c3cd412baaf 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -60,6 +60,25 @@ config VIDEO_AR0521
 	  To compile this driver as a module, choose M here: the
 	  module will be called ar0521.
 
+config VIDEO_GC02M1
+        tristate "Samsung gc02m1 support"
+        help
+          This is a Video4Linux2 sensor driver for the Samsung
+	  gc02m1 camera.
+
+          To compile this driver as a module, choose M here: the
+          module will be called gc02m1.
+
+config VIDEO_GC8034
+        tristate "GlaxyCore GC8034 sensor support"
+        select V4L2_CCI_I2C
+        help
+          This is a Video4Linux2 sensor driver for the GlaxyCore
+          GC8034 camera.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called gc8034.
+
 config VIDEO_GC0308
 	tristate "GalaxyCore GC0308 sensor support"
 	select V4L2_CCI_I2C
@@ -385,6 +404,13 @@ config VIDEO_OV13B10
 	  This is a Video4Linux2 sensor driver for the OmniVision
 	  OV13B10 camera.
 
+config VIDEO_OV16A1X
+        tristate "OmniVision OV16A1[0Q] sensor support"
+	default y
+        help
+          This is a Video4Linux2 sensor driver for the OmniVision
+          OV16A1[0Q] camera.
+
 config VIDEO_OV2640
 	tristate "OmniVision OV2640 sensor support"
 	help
@@ -684,6 +710,12 @@ config VIDEO_S5K5BAF
 	  This is a V4L2 sensor driver for Samsung S5K5BAF 2M
 	  camera sensor with an embedded SoC image signal processor.
 
+config VIDEO_S5K5E9
+        tristate "Samsung S5K5E9 sensor support"
+        help
+          This is a V4L2 sensor driver for Samsung S5K5E9 raw
+          camera sensor.
+
 config VIDEO_S5K6A3
 	tristate "Samsung S5K6A3 sensor support"
 	help
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index fbb988bd067a1b..bbf2ead1f4c943 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -157,3 +157,8 @@ obj-$(CONFIG_VIDEO_VP27SMPX) += vp27smpx.o
 obj-$(CONFIG_VIDEO_VPX3220) += vpx3220.o
 obj-$(CONFIG_VIDEO_WM8739) += wm8739.o
 obj-$(CONFIG_VIDEO_WM8775) += wm8775.o
+
+#obj-$(CONFIG_VIDEO_OV16A1X) += ov16a1q.o
+obj-$(CONFIG_VIDEO_S5K5E9) += s5k5e9.o
+#obj-$(CONFIG_VIDEO_GC8034) += gc8034.o
+#obj-$(CONFIG_VIDEO_GC02M1) += gc02m1.o
diff --git a/drivers/media/i2c/gc02m1.c b/drivers/media/i2c/gc02m1.c
new file mode 100644
index 00000000000000..e82d6285156052
--- /dev/null
+++ b/drivers/media/i2c/gc02m1.c
@@ -0,0 +1,1186 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * gc02m1.c - gc02m1 sensor driver based on imx214 sensor driver by below
+ *
+ * Copyright 2018 Qtechnology A/S
+ * Ricardo Ribalda <ribalda@kernel.org>
+ 
+ * Copyright 2023 99degree <https://github.com/99degree>
+ *
+ */
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <linux/regulator/consumer.h>
+#include <media/media-entity.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-fwnode.h>
+#include <media/v4l2-subdev.h>
+
+#define GC02M1_DEFAULT_CLK_FREQ	24000000
+#define GC02M1_DEFAULT_LINK_FREQ 480000000
+#define GC02M1_DEFAULT_PIXEL_RATE ((GC02M1_DEFAULT_LINK_FREQ * 8LL) / 10)
+#define GC02M1_FPS 30
+#define GC02M1_MBUS_CODE MEDIA_BUS_FMT_SRGGB10_1X10
+
+/*
+ * REGISTER BASE
+ */
+#define GC02M1_SENSOR_SHUTTER_H				0x03
+#define GC02M1_SENSOR_SHUTTER_H_MASK		GENMASK(5, 0) /* 0x3f */
+#define GC02M1_SENSOR_SHUTTER_L				0x04
+
+#define GC02M1_SENSOR_MIRROR				0x17
+#define GC02M1_SENSOR_MIRROR_NO_FLIP		0x80
+#define GC02M1_SENSOR_MIRROR_H_FLIP			0x81
+#define GC02M1_SENSOR_MIRROR_V_FLIP			0x82
+#define GC02M1_SENSOR_MIRROR_HV_FLIP		0x83
+
+#define GC02M1_SENSOR_TEST_PATTERN			0x8c
+#define GC02M1_SENSOR_TEST_PATTERN_ENABLE	0x11
+#define GC02M1_SENSOR_TEST_PATTERN_DISABLE	0x10
+		
+#define GC02M1_SENSOR_FRAME_LENGTH_H		0x41  //framelength
+#define GC02M1_SENSOR_FRAME_LENGTH_L		0x42  //framelegth
+	
+#define GC02M1_SENSOR_AGAIN_H				0xb1
+#define GC02M1_SENSOR_AGAIN_H_MASK			GENMASK(4, 0)  /* total [0x1f 0xff], 13 bits */
+#define GC02M1_SENSOR_AGAIN_H_BITS_SHIFT	0x03  // total 0x1fff, 13 bits 
+#define GC02M1_SENSOR_AGAIN_L				0xb2
+#define GC02M1_SENSOR_AGAIN_STEP			0xb6  // [0..16]
+#define GC02M1_SENSOR_AGAIN_STEP_BITS		0x12
+
+#define GC02M1_SENSOR_ID_H					0xf0
+#define GC02M1_SENSOR_ID_L					0xf1
+#define GC02M1_SENSOR_DUMMY_ENABLE			0xfe // write 0x01 then write 0x00
+#define GC02M1_SENSOR_STREAMING_BASE		0x100
+/* SENSOR PRIVATE INFO FOR GAIN SETTING */
+//#define GC02M1_SENSOR_GAIN_BASE             0x400
+//#define GC02M1_SENSOR_GAIN_MAX              (12 * GC02M1_SENSOR_GAIN_BASE)
+//#define GC02M1_SENSOR_GAIN_MAX_VALID_INDEX  16
+//#define GC02M1_SENSOR_GAIN_MAP_SIZE         16
+//#define GC02M1_SENSOR_DGAIN_BASE            0x400
+
+#if 0
+/*
+ * to simplify the transform scale, the uint16 a_gain should shift to 13 bit; 
+ * but the max a_gain is 10337(0x2861) which is between 13 bit 0x1fff to 14 bit (0x3fff)
+ * as simplified form, so grab AGAIN val = source_a_gain >> 3 bit, 
+ * again step val = source a_gain > 13.
+ * otherwise need to do a nlogm...which is not desired.
+ */
+uint16 GC02M1_AGC_Param[GC02M1_SENSOR_GAIN_MAX_VALID_INDEX][2] = {
+		{  1024,  0 },
+		{  1536,  1 },
+		{  2035,  2 },
+		{  2519,  3 },
+		{  3165,  4 },
+		{  3626,  5 },
+		{  4147,  6 },
+		{  4593,  7 },
+		{  5095,  8 },
+		{  5697,  9 },
+		{  6270, 10 },
+		{  6714, 11 },
+		{  7210, 12 },
+		{  7686, 13 },
+		{  8214, 14 },
+		{ 10337, 15 },
+};
+#endif
+
+static const char * const gc02m1_supply_name[] = {
+	"vdda",
+	"vddd",
+	"vdddo",
+};
+
+#define GC02M1_NUM_SUPPLIES ARRAY_SIZE(gc02m1_supply_name)
+
+struct gc02m1 {
+	struct device *dev;
+	struct clk *xclk;
+	struct regmap *regmap;
+
+	struct v4l2_subdev sd;
+	struct media_pad pad;
+	struct v4l2_mbus_framefmt fmt;
+	struct v4l2_rect crop;
+
+	struct v4l2_ctrl_handler ctrls;
+	struct v4l2_ctrl *pixel_rate;
+	struct v4l2_ctrl *link_freq;
+	struct v4l2_ctrl *exposure;
+	struct v4l2_ctrl *unit_size;
+
+	struct regulator_bulk_data	supplies[GC02M1_NUM_SUPPLIES];
+
+	struct gpio_desc *enable_gpio;
+
+	/*
+	 * Serialize control access, get/set format, get selection
+	 * and start streaming.
+	 */
+	struct mutex mutex;
+};
+
+struct reg_8 {
+	u16 addr;
+	u8 val;
+};
+
+enum {
+	GC02M1_TABLE_WAIT_MS = 0,
+	GC02M1_TABLE_END,
+	GC02M1_MAX_RETRIES,
+	GC02M1_WAIT_MS
+};
+
+static const struct reg_8 mode_table_common[] = {
+	/*system*/
+	{0xfc, 0x01},
+	{0xf4, 0x41},
+	{0xf5, 0xc0},
+	{0xf6, 0x44},
+	{0xf8, 0x38},
+	{0xf9, 0x82},
+	{0xfa, 0x00},
+	{0xfd, 0x80},
+	{0xfc, 0x81},
+	{0xfe, 0x03},
+	{0x01, 0x0b},
+	{0xf7, 0x01},
+	{0xfc, 0x80},
+	{0xfc, 0x80},
+	{0xfc, 0x80},
+	{0xfc, 0x8e},
+
+	/*CISCTL*/
+	{0xfe, 0x00},
+	{0x87, 0x09},
+	{0xee, 0x72},
+	{0xfe, 0x01},
+	{0x8c, 0x90},
+	{0xfe, 0x00},
+	{0x90, 0x00},
+	{0x03, 0x04},
+	{0x04, 0x7d},
+	{0x41, 0x04},
+	{0x42, 0xf4},
+	{0x05, 0x04},
+	{0x06, 0x48},
+	{0x07, 0x00},
+	{0x08, 0x18},
+	{0x9d, 0x18},
+	{0x09, 0x00},
+	{0x0a, 0x02},
+	{0x0d, 0x04},
+	{0x0e, 0xbc},
+	{0x17, 0x80}, /* use default 0x80, let ioctl to handle V_flip and H_flip */
+	{0x19, 0x04},
+	{0x24, 0x00},
+	{0x56, 0x20},
+	{0x5b, 0x00},
+	{0x5e, 0x01},
+
+	/*analog Register width*/
+	{0x21, 0x3c},
+	{0x44, 0x20},
+	{0xcc, 0x01},
+
+	/*analog mode*/
+	{0x1a, 0x04},
+	{0x1f, 0x11},
+	{0x27, 0x30},
+	{0x2b, 0x00},
+	{0x33, 0x00},
+	{0x53, 0x90},
+	{0xe6, 0x50},
+
+	/*analog voltage*/
+	{0x39, 0x07},
+	{0x43, 0x04},
+	{0x46, 0x2a},
+	{0x7c, 0xa0},
+	{0xd0, 0xbe},
+	{0xd1, 0x60},
+	{0xd2, 0x40},
+	{0xd3, 0xf3},
+	{0xde, 0x1d},
+
+	/*analog current*/
+	{0xcd, 0x05},
+	{0xce, 0x6f},
+
+	/*CISCTL RESET*/
+	{0xfc, 0x88},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+	{0xfc, 0x8e},
+	{0xfe, 0x00},
+	{0xfe, 0x00},
+	{0xfe, 0x00},
+	{0xfe, 0x00},
+	{0xfc, 0x88},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+	{0xfc, 0x8e},
+	{0xfe, 0x04},
+	{0xe0, 0x01},
+	{0xfe, 0x00},
+
+	/*ISP*/
+	{0xfe, 0x01},
+	{0x53, 0x44},
+	{0x87, 0x53},
+	{0x89, 0x03},
+
+	/*Gain*/
+	{0xfe, 0x00},
+	{0xb0, 0x74},
+	{0xb1, 0x04},
+	{0xb2, 0x00},
+	{0xb6, 0x00},
+	{0xfe, 0x04},
+	{0xd8, 0x00},
+	{0xc0, 0x40},
+	{0xc0, 0x00},
+	{0xc0, 0x00},
+	{0xc0, 0x00},
+	{0xc0, 0x60},
+	{0xc0, 0x00},
+	{0xc0, 0xc0},
+	{0xc0, 0x2a},
+	{0xc0, 0x80},
+	{0xc0, 0x00},
+	{0xc0, 0x00},
+	{0xc0, 0x40},
+	{0xc0, 0xa0},
+	{0xc0, 0x00},
+	{0xc0, 0x90},
+	{0xc0, 0x19},
+	{0xc0, 0xc0},
+	{0xc0, 0x00},
+	{0xc0, 0xD0},
+	{0xc0, 0x2F},
+	{0xc0, 0xe0},
+	{0xc0, 0x00},
+	{0xc0, 0x90},
+	{0xc0, 0x39},
+	{0xc0, 0x00},
+	{0xc0, 0x01},
+	{0xc0, 0x20},
+	{0xc0, 0x04},
+	{0xc0, 0x20},
+	{0xc0, 0x01},
+	{0xc0, 0xe0},
+	{0xc0, 0x0f},
+	{0xc0, 0x40},
+	{0xc0, 0x01},
+	{0xc0, 0xe0},
+	{0xc0, 0x1a},
+	{0xc0, 0x60},
+	{0xc0, 0x01},
+	{0xc0, 0x20},
+	{0xc0, 0x25},
+	{0xc0, 0x80},
+	{0xc0, 0x01},
+	{0xc0, 0xa0},
+	{0xc0, 0x2c},
+	{0xc0, 0xa0},
+	{0xc0, 0x01},
+	{0xc0, 0xe0},
+	{0xc0, 0x32},
+	{0xc0, 0xc0},
+	{0xc0, 0x01},
+	{0xc0, 0x20},
+	{0xc0, 0x38},
+	{0xc0, 0xe0},
+	{0xc0, 0x01},
+	{0xc0, 0x60},
+	{0xc0, 0x3c},
+	{0xc0, 0x00},
+	{0xc0, 0x02},
+	{0xc0, 0xa0},
+	{0xc0, 0x40},
+	{0xc0, 0x80},
+	{0xc0, 0x02},
+	{0xc0, 0x18},
+	{0xc0, 0x5c},
+	{0xfe, 0x00},
+	{0x9f, 0x10},
+
+	/*BLK*/
+	{0xfe, 0x00},
+	{0x26, 0x20},
+	{0xfe, 0x01},
+	{0x40, 0x22},
+	{0x46, 0x7f},
+	{0x49, 0x0f},
+	{0x4a, 0xf0},
+	{0xfe, 0x04},
+	{0x14, 0x80},
+	{0x15, 0x80},
+	{0x16, 0x80},
+	{0x17, 0x80},
+
+	/*ant _blooming*/
+	{0xfe, 0x01},
+	{0x41, 0x20},
+	{0x4c, 0x00},
+	{0x4d, 0x0c},
+	{0x44, 0x08},
+	{0x48, 0x03},
+
+	/*Window 1600X1200*/
+	{0xfe, 0x01},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x06},
+	{0x93, 0x00},
+	{0x94, 0x06},
+	{0x95, 0x04},
+	{0x96, 0xb0},
+	{0x97, 0x06},
+	{0x98, 0x40},
+
+	/*mipi*/
+	{0xfe, 0x03},
+	{0x01, 0x23},
+	{0x03, 0xce},
+	{0x04, 0x48},
+	{0x15, 0x00},
+	{0x21, 0x10},
+	{0x22, 0x05},
+	{0x23, 0x20},
+	{0x25, 0x20},
+	{0x26, 0x08},
+	{0x29, 0x06},
+	{0x2a, 0x0a},
+	{0x2b, 0x08},
+
+	/*out*/
+	{0xfe, 0x01},
+	{0x8c, 0x10},
+	{0xfe, 0x00},
+	{0x3e, 0x00},
+	{GC02M1_TABLE_WAIT_MS, 10},
+//	{0x0138, 0x01},
+	{GC02M1_TABLE_END, 0x00},
+};
+
+/*
+static void set_dummy(void)
+{
+	write_cmos_sensor(0xfe, 0x00);
+	write_cmos_sensor(0x41, (imgsensor.frame_length >> 8) & 0x3f);
+	write_cmos_sensor(0x42, imgsensor.frame_length & 0xff);
+}
+
+static kal_uint32 return_sensor_id(void)
+{
+	return ((read_cmos_sensor(0xf0) << 8) | read_cmos_sensor(0xf1));
+}
+*/
+
+static const struct reg_8 mode_1600x1200[] = {
+	/* mode */
+	{0xfe, 0x00},
+	{0x3e, 0x90},
+
+	/* TODO: change sub script */
+
+	{GC02M1_TABLE_WAIT_MS, 10},
+//	{0x0138, 0x01},
+	{GC02M1_TABLE_END, 0x00},
+};
+
+//https://github.com/MotorolaMobilityLLC/kernel-mtk/blob/6482b999eba3b7b23a3f21da5bc2b603d12353e4/drivers/misc/mediatek/imgsensor/src/common/v1_1/mot_devonn_gc02m1_mipi_raw/mot_devonn_gc02m1mipiraw_Sensor.c
+static const struct reg_8 mode_1600x1200_custom1[] = {
+	{0x41, 0x06},//30fps:0x04
+	{0x42, 0x3c},//30fps:0xf4
+	{0x07, 0x01},//30fps: 0x00
+	{0x08, 0x60},//30fps: 0x18
+	{0x3e, 0x90},
+	{0xfe, 0x00},
+	{0xfe, 0x00},
+	{0x80, 0x00},
+	{0x82, 0x08},
+	{0x83, 0x0a},
+	{0x88, 0x00},
+	{0x89, 0x04},
+	{0x8a, 0x00},
+	{0x8b, 0x12},
+	{0x7f, 0x29},
+	{0x85, 0x51},
+	{0xfe, 0x00},
+	{GC02M1_TABLE_WAIT_MS, 10},
+//	{0x0138, 0x01},
+	{GC02M1_TABLE_END, 0x00},
+};
+
+/*
+ * Declare modes in order, from biggest
+ * to smallest height.
+ */
+static const struct gc02m1_mode {
+	u32 width;
+	u32 height;
+	const struct reg_8 *reg_table;
+} gc02m1_modes[] = {
+	{
+		.width = 1600,
+		.height = 1200,
+		.reg_table = mode_1600x1200,
+	},
+	{
+		.width = 1600,
+		.height = 1200,
+		.reg_table = mode_1600x1200_custom1,
+	},
+};
+
+static inline struct gc02m1 *to_gc02m1(struct v4l2_subdev *sd)
+{
+	return container_of(sd, struct gc02m1, sd);
+}
+
+static int __maybe_unused gc02m1_power_on(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gc02m1 *gc02m1 = to_gc02m1(sd);
+	int ret;
+
+	ret = regulator_bulk_enable(GC02M1_NUM_SUPPLIES, gc02m1->supplies);
+	if (ret < 0) {
+		dev_err(gc02m1->dev, "failed to enable regulators: %d\n", ret);
+		return ret;
+	}
+
+	usleep_range(2000, 3000);
+
+	ret = clk_prepare_enable(gc02m1->xclk);
+	if (ret < 0) {
+		regulator_bulk_disable(GC02M1_NUM_SUPPLIES, gc02m1->supplies);
+		dev_err(gc02m1->dev, "clk prepare enable failed\n");
+		return ret;
+	}
+
+	gpiod_set_value_cansleep(gc02m1->enable_gpio, 1);
+	usleep_range(12000, 15000);
+
+	return 0;
+}
+
+static int __maybe_unused gc02m1_power_off(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gc02m1 *gc02m1 = to_gc02m1(sd);
+
+	gpiod_set_value_cansleep(gc02m1->enable_gpio, 0);
+
+	clk_disable_unprepare(gc02m1->xclk);
+
+	regulator_bulk_disable(GC02M1_NUM_SUPPLIES, gc02m1->supplies);
+	usleep_range(10, 20);
+
+	return 0;
+}
+
+static int gc02m1_enum_mbus_code(struct v4l2_subdev *sd,
+				 struct v4l2_subdev_state *sd_state,
+				 struct v4l2_subdev_mbus_code_enum *code)
+{
+	if (code->index > 0)
+		return -EINVAL;
+
+	code->code = GC02M1_MBUS_CODE;
+
+	return 0;
+}
+
+static int gc02m1_enum_frame_size(struct v4l2_subdev *subdev,
+				  struct v4l2_subdev_state *sd_state,
+				  struct v4l2_subdev_frame_size_enum *fse)
+{
+	if (fse->code != GC02M1_MBUS_CODE)
+		return -EINVAL;
+
+	if (fse->index >= ARRAY_SIZE(gc02m1_modes))
+		return -EINVAL;
+
+	fse->min_width = fse->max_width = gc02m1_modes[fse->index].width;
+	fse->min_height = fse->max_height = gc02m1_modes[fse->index].height;
+
+	return 0;
+}
+
+#ifdef CONFIG_VIDEO_ADV_DEBUG
+static int gc02m1_s_register(struct v4l2_subdev *subdev,
+			     const struct v4l2_dbg_register *reg)
+{
+	struct gc02m1 *gc02m1 = container_of(subdev, struct gc02m1, sd);
+
+	return regmap_write(gc02m1->regmap, reg->reg, reg->val);
+}
+
+static int gc02m1_g_register(struct v4l2_subdev *subdev,
+			     struct v4l2_dbg_register *reg)
+{
+	struct gc02m1 *gc02m1 = container_of(subdev, struct gc02m1, sd);
+	unsigned int aux;
+	int ret;
+
+	reg->size = 1;
+	ret = regmap_read(gc02m1->regmap, reg->reg, &aux);
+	reg->val = aux;
+
+	return ret;
+}
+#endif
+
+static const struct v4l2_subdev_core_ops gc02m1_core_ops = {
+#ifdef CONFIG_VIDEO_ADV_DEBUG
+	.g_register = gc02m1_g_register,
+	.s_register = gc02m1_s_register,
+#endif
+};
+
+static struct v4l2_mbus_framefmt *
+__gc02m1_get_pad_format(struct gc02m1 *gc02m1,
+			struct v4l2_subdev_state *sd_state,
+			unsigned int pad,
+			enum v4l2_subdev_format_whence which)
+{
+	switch (which) {
+	case V4L2_SUBDEV_FORMAT_TRY:
+		return v4l2_subdev_get_try_format(&gc02m1->sd, sd_state, pad);
+	case V4L2_SUBDEV_FORMAT_ACTIVE:
+		return &gc02m1->fmt;
+	default:
+		return NULL;
+	}
+}
+
+static int gc02m1_get_format(struct v4l2_subdev *sd,
+			     struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_format *format)
+{
+	struct gc02m1 *gc02m1 = to_gc02m1(sd);
+
+	mutex_lock(&gc02m1->mutex);
+	format->format = *__gc02m1_get_pad_format(gc02m1, sd_state,
+						  format->pad,
+						  format->which);
+	mutex_unlock(&gc02m1->mutex);
+
+	return 0;
+}
+
+static struct v4l2_rect *
+__gc02m1_get_pad_crop(struct gc02m1 *gc02m1,
+		      struct v4l2_subdev_state *sd_state,
+		      unsigned int pad, enum v4l2_subdev_format_whence which)
+{
+	switch (which) {
+	case V4L2_SUBDEV_FORMAT_TRY:
+		return v4l2_subdev_get_try_crop(&gc02m1->sd, sd_state, pad);
+	case V4L2_SUBDEV_FORMAT_ACTIVE:
+		return &gc02m1->crop;
+	default:
+		return NULL;
+	}
+}
+
+static int gc02m1_set_format(struct v4l2_subdev *sd,
+			     struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_format *format)
+{
+	struct gc02m1 *gc02m1 = to_gc02m1(sd);
+	struct v4l2_mbus_framefmt *__format;
+	struct v4l2_rect *__crop;
+	const struct gc02m1_mode *mode;
+
+	mutex_lock(&gc02m1->mutex);
+
+	__crop = __gc02m1_get_pad_crop(gc02m1, sd_state, format->pad,
+				       format->which);
+
+	mode = v4l2_find_nearest_size(gc02m1_modes,
+				      ARRAY_SIZE(gc02m1_modes), width, height,
+				      format->format.width,
+				      format->format.height);
+
+	__crop->width = mode->width;
+	__crop->height = mode->height;
+
+	__format = __gc02m1_get_pad_format(gc02m1, sd_state, format->pad,
+					   format->which);
+	__format->width = __crop->width;
+	__format->height = __crop->height;
+	__format->code = GC02M1_MBUS_CODE;
+	__format->field = V4L2_FIELD_NONE;
+	__format->colorspace = V4L2_COLORSPACE_SRGB;
+	__format->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(__format->colorspace);
+	__format->quantization = V4L2_MAP_QUANTIZATION_DEFAULT(true,
+				__format->colorspace, __format->ycbcr_enc);
+	__format->xfer_func = V4L2_MAP_XFER_FUNC_DEFAULT(__format->colorspace);
+
+	format->format = *__format;
+
+	mutex_unlock(&gc02m1->mutex);
+
+	return 0;
+}
+
+static int gc02m1_get_selection(struct v4l2_subdev *sd,
+				struct v4l2_subdev_state *sd_state,
+				struct v4l2_subdev_selection *sel)
+{
+	struct gc02m1 *gc02m1 = to_gc02m1(sd);
+
+	if (sel->target != V4L2_SEL_TGT_CROP)
+		return -EINVAL;
+
+	mutex_lock(&gc02m1->mutex);
+	sel->r = *__gc02m1_get_pad_crop(gc02m1, sd_state, sel->pad,
+					sel->which);
+	mutex_unlock(&gc02m1->mutex);
+	return 0;
+}
+
+static int gc02m1_entity_init_cfg(struct v4l2_subdev *subdev,
+				  struct v4l2_subdev_state *sd_state)
+{
+	struct v4l2_subdev_format fmt = { };
+
+	fmt.which = sd_state ? V4L2_SUBDEV_FORMAT_TRY : V4L2_SUBDEV_FORMAT_ACTIVE;
+	fmt.format.width = gc02m1_modes[0].width;
+	fmt.format.height = gc02m1_modes[0].height;
+
+	gc02m1_set_format(subdev, sd_state, &fmt);
+
+	return 0;
+}
+
+static int gc02m1_set_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct gc02m1 *gc02m1 = container_of(ctrl->handler,
+					     struct gc02m1, ctrls);
+	u8 vals[2];
+	int ret;
+
+	/*
+	 * Applying V4L2 control value only happens
+	 * when power is up for streaming
+	 */
+	if (!pm_runtime_get_if_in_use(gc02m1->dev))
+		return 0;
+
+	switch (ctrl->id) {
+	case V4L2_CID_EXPOSURE:
+#if 0
+		/* set framelength */
+		if(ctrl->val > 61053)
+			vals[1] = 0xff;
+			vals[0] = 0x70;			
+		} else /* long exposure */ {
+			vals[1] = 0x0b;
+			vals[0] = 0x9c;				
+		}
+		ret = regmap_bulk_write(gc02m1->regmap, 0x200, vals, 2);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+#endif
+		/* shutter */
+		vals[1] = ctrl->val;
+		vals[0] = (ctrl->val >> 8) & GC02M1_SENSOR_SHUTTER_H_MASK;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_SHUTTER_H, vals, 2);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+		ret = 0;
+		break;
+		
+	case V4L2_CID_GAIN:
+		vals[0] = 1;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_DUMMY_ENABLE, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);	
+	
+		//TODO: update framelength here
+	
+		vals[0] = 0;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_DUMMY_ENABLE, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+
+		vals[0] = (ctrl->val >> GC02M1_SENSOR_AGAIN_STEP_BITS);
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_AGAIN_STEP, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+		
+		vals[1] = (ctrl->val >> GC02M1_SENSOR_AGAIN_H_BITS_SHIFT) & 0xff; /* valid bits 0x1fff*/
+		vals[0] = (ctrl->val >> (8 + GC02M1_SENSOR_AGAIN_H_BITS_SHIFT)) & GC02M1_SENSOR_AGAIN_H_MASK;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_AGAIN_H, vals, 2);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+		ret = 0;		
+		break;
+		
+	/* todo check if oxfe is needed */
+	case V4L2_CID_VFLIP:
+		/* play safe, put 00 to 0xfe*/
+		vals[0] = 0;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_DUMMY_ENABLE, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+		
+		vals[0] = GC02M1_SENSOR_MIRROR_V_FLIP;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_MIRROR, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+		ret = 0;
+		break;
+		
+	case V4L2_CID_HFLIP:
+		/* play safe, put 00 to 0xfe*/
+		vals[0] = 0;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_DUMMY_ENABLE, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+		
+		vals[0] = GC02M1_SENSOR_MIRROR_H_FLIP;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_MIRROR, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+		ret = 0;
+		break;
+		
+	/* TODO: need to disable test pattern, in case, shutdown the sensor instead */
+	case V4L2_CID_TEST_PATTERN:
+		vals[0] = 1;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_DUMMY_ENABLE, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);		
+		
+		vals[0] = GC02M1_SENSOR_TEST_PATTERN_ENABLE;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_TEST_PATTERN, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);
+		
+		vals[0] = 0;
+		ret = regmap_bulk_write(gc02m1->regmap, GC02M1_SENSOR_DUMMY_ENABLE, vals, 1);
+		if (ret < 0)
+			dev_err(gc02m1->dev, "Error %d\n", ret);			
+		ret = 0;
+		break;
+		
+	default:
+		ret = -EINVAL;
+	}
+
+	pm_runtime_put(gc02m1->dev);
+
+	return ret;
+}
+
+static const struct v4l2_ctrl_ops gc02m1_ctrl_ops = {
+	.s_ctrl = gc02m1_set_ctrl,
+};
+
+#define MAX_CMD 4
+static int gc02m1_write_table(struct gc02m1 *gc02m1,
+			      const struct reg_8 table[])
+{
+	u8 vals[MAX_CMD];
+	int i;
+	int ret;
+
+	for (; table->addr != GC02M1_TABLE_END ; table++) {
+		if (table->addr == GC02M1_TABLE_WAIT_MS) {
+			usleep_range(table->val * 1000,
+				     table->val * 1000 + 500);
+			continue;
+		}
+
+		for (i = 0; i < MAX_CMD; i++) {
+			if (table[i].addr != (table[0].addr + i))
+				break;
+			vals[i] = table[i].val;
+		}
+
+		ret = regmap_bulk_write(gc02m1->regmap, table->addr, vals, i);
+
+		if (ret) {
+			dev_err(gc02m1->dev, "write_table error: %d\n", ret);
+			return ret;
+		}
+
+		table += i - 1;
+	}
+
+	return 0;
+}
+
+static int gc02m1_start_streaming(struct gc02m1 *gc02m1)
+{
+	const struct gc02m1_mode *mode;
+	int ret;
+
+	mutex_lock(&gc02m1->mutex);
+	ret = gc02m1_write_table(gc02m1, mode_table_common);
+	if (ret < 0) {
+		dev_err(gc02m1->dev, "could not sent common table %d\n", ret);
+		goto error;
+	}
+
+	mode = v4l2_find_nearest_size(gc02m1_modes,
+				ARRAY_SIZE(gc02m1_modes), width, height,
+				gc02m1->fmt.width, gc02m1->fmt.height);
+	ret = gc02m1_write_table(gc02m1, mode->reg_table);
+	if (ret < 0) {
+		dev_err(gc02m1->dev, "could not sent mode table %d\n", ret);
+		goto error;
+	}
+	ret = __v4l2_ctrl_handler_setup(&gc02m1->ctrls);
+	if (ret < 0) {
+		dev_err(gc02m1->dev, "could not sync v4l2 controls\n");
+		goto error;
+	}
+	ret = regmap_write(gc02m1->regmap, GC02M1_SENSOR_STREAMING_BASE, 1);
+	if (ret < 0) {
+		dev_err(gc02m1->dev, "could not sent start table %d\n", ret);
+		goto error;
+	}
+
+	mutex_unlock(&gc02m1->mutex);
+	return 0;
+
+error:
+	mutex_unlock(&gc02m1->mutex);
+	return ret;
+}
+
+static int gc02m1_stop_streaming(struct gc02m1 *gc02m1)
+{
+	int ret;
+
+	ret = regmap_write(gc02m1->regmap, GC02M1_SENSOR_STREAMING_BASE, 0);
+	if (ret < 0)
+		dev_err(gc02m1->dev, "could not sent stop table %d\n",	ret);
+
+	return ret;
+}
+
+static int gc02m1_s_stream(struct v4l2_subdev *subdev, int enable)
+{
+	struct gc02m1 *gc02m1 = to_gc02m1(subdev);
+	int ret;
+
+	if (enable) {
+		ret = pm_runtime_resume_and_get(gc02m1->dev);
+		if (ret < 0)
+			return ret;
+
+		ret = gc02m1_start_streaming(gc02m1);
+		if (ret < 0)
+			goto err_rpm_put;
+	} else {
+		ret = gc02m1_stop_streaming(gc02m1);
+		if (ret < 0)
+			goto err_rpm_put;
+		pm_runtime_put(gc02m1->dev);
+	}
+
+	return 0;
+
+err_rpm_put:
+	pm_runtime_put(gc02m1->dev);
+	return ret;
+}
+
+static int gc02m1_g_frame_interval(struct v4l2_subdev *subdev,
+				   struct v4l2_subdev_frame_interval *fival)
+{
+	fival->interval.numerator = 1;
+	fival->interval.denominator = GC02M1_FPS;
+
+	return 0;
+}
+
+static int gc02m1_enum_frame_interval(struct v4l2_subdev *subdev,
+				struct v4l2_subdev_state *sd_state,
+				struct v4l2_subdev_frame_interval_enum *fie)
+{
+	const struct gc02m1_mode *mode;
+
+	if (fie->index != 0)
+		return -EINVAL;
+
+	mode = v4l2_find_nearest_size(gc02m1_modes,
+				ARRAY_SIZE(gc02m1_modes), width, height,
+				fie->width, fie->height);
+
+	fie->code = GC02M1_MBUS_CODE;
+	fie->width = mode->width;
+	fie->height = mode->height;
+	fie->interval.numerator = 1;
+	fie->interval.denominator = GC02M1_FPS;
+
+	return 0;
+}
+
+static const struct v4l2_subdev_video_ops gc02m1_video_ops = {
+	.s_stream = gc02m1_s_stream,
+	.g_frame_interval = gc02m1_g_frame_interval,
+	.s_frame_interval = gc02m1_g_frame_interval,
+};
+
+static const struct v4l2_subdev_pad_ops gc02m1_subdev_pad_ops = {
+	.enum_mbus_code = gc02m1_enum_mbus_code,
+	.enum_frame_size = gc02m1_enum_frame_size,
+	.enum_frame_interval = gc02m1_enum_frame_interval,
+	.get_fmt = gc02m1_get_format,
+	.set_fmt = gc02m1_set_format,
+	.get_selection = gc02m1_get_selection,
+	.init_cfg = gc02m1_entity_init_cfg,
+};
+
+static const struct v4l2_subdev_ops gc02m1_subdev_ops = {
+	.core = &gc02m1_core_ops,
+	.video = &gc02m1_video_ops,
+	.pad = &gc02m1_subdev_pad_ops,
+};
+
+static const struct regmap_config sensor_regmap_config = {
+	.reg_bits = 16,
+	.val_bits = 8,
+	.cache_type = REGCACHE_RBTREE,
+};
+
+static int gc02m1_get_regulators(struct device *dev, struct gc02m1 *gc02m1)
+{
+	unsigned int i;
+
+	for (i = 0; i < GC02M1_NUM_SUPPLIES; i++)
+		gc02m1->supplies[i].supply = gc02m1_supply_name[i];
+
+	return devm_regulator_bulk_get(dev, GC02M1_NUM_SUPPLIES,
+				       gc02m1->supplies);
+}
+
+static int gc02m1_parse_fwnode(struct device *dev)
+{
+	struct fwnode_handle *endpoint;
+	struct v4l2_fwnode_endpoint bus_cfg = {
+		.bus_type = V4L2_MBUS_CSI2_DPHY,
+	};
+	unsigned int i;
+	int ret;
+
+	endpoint = fwnode_graph_get_next_endpoint(dev_fwnode(dev), NULL);
+	if (!endpoint) {
+		dev_err(dev, "endpoint node not found\n");
+		return -EINVAL;
+	}
+
+	ret = v4l2_fwnode_endpoint_alloc_parse(endpoint, &bus_cfg);
+	if (ret) {
+		dev_err(dev, "parsing endpoint node failed\n");
+		goto done;
+	}
+
+	for (i = 0; i < bus_cfg.nr_of_link_frequencies; i++)
+		if (bus_cfg.link_frequencies[i] == GC02M1_DEFAULT_LINK_FREQ)
+			break;
+
+	if (i == bus_cfg.nr_of_link_frequencies) {
+		dev_err(dev, "link-frequencies %d not supported, Please review your DT\n",
+			GC02M1_DEFAULT_LINK_FREQ);
+		ret = -EINVAL;
+		goto done;
+	}
+
+done:
+	v4l2_fwnode_endpoint_free(&bus_cfg);
+	fwnode_handle_put(endpoint);
+	return ret;
+}
+
+static int gc02m1_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct gc02m1 *gc02m1;
+	static const s64 link_freq[] = {
+		GC02M1_DEFAULT_LINK_FREQ,
+	};
+	static const struct v4l2_area unit_size = {
+		.width = 1120,
+		.height = 1120,
+	};
+	int ret;
+
+	ret = gc02m1_parse_fwnode(dev);
+	if (ret)
+		return ret;
+
+	gc02m1 = devm_kzalloc(dev, sizeof(*gc02m1), GFP_KERNEL);
+	if (!gc02m1)
+		return -ENOMEM;
+
+	gc02m1->dev = dev;
+
+	gc02m1->xclk = devm_clk_get(dev, NULL);
+	if (IS_ERR(gc02m1->xclk)) {
+		dev_err(dev, "could not get xclk");
+		return PTR_ERR(gc02m1->xclk);
+	}
+
+	ret = clk_set_rate(gc02m1->xclk, GC02M1_DEFAULT_CLK_FREQ);
+	if (ret) {
+		dev_err(dev, "could not set xclk frequency\n");
+		return ret;
+	}
+
+	ret = gc02m1_get_regulators(dev, gc02m1);
+	if (ret < 0) {
+		dev_err(dev, "cannot get regulators\n");
+		return ret;
+	}
+
+	/* TODO: is reset2 or enable gpio? */
+	gc02m1->enable_gpio = devm_gpiod_get(dev, "enable", GPIOD_OUT_LOW);
+	if (IS_ERR(gc02m1->enable_gpio)) {
+		dev_err(dev, "cannot get enable gpio\n");
+		return PTR_ERR(gc02m1->enable_gpio);
+	}
+
+	gc02m1->regmap = devm_regmap_init_i2c(client, &sensor_regmap_config);
+	if (IS_ERR(gc02m1->regmap)) {
+		dev_err(dev, "regmap init failed\n");
+		return PTR_ERR(gc02m1->regmap);
+	}
+
+	v4l2_i2c_subdev_init(&gc02m1->sd, client, &gc02m1_subdev_ops);
+
+	/*
+	 * Enable power initially, to avoid warnings
+	 * from clk_disable on power_off
+	 */
+	gc02m1_power_on(gc02m1->dev);
+
+	pm_runtime_set_active(gc02m1->dev);
+	pm_runtime_enable(gc02m1->dev);
+	pm_runtime_idle(gc02m1->dev);
+
+	v4l2_ctrl_handler_init(&gc02m1->ctrls, 3);
+
+	gc02m1->pixel_rate = v4l2_ctrl_new_std(&gc02m1->ctrls, NULL,
+					       V4L2_CID_PIXEL_RATE, 0,
+					       GC02M1_DEFAULT_PIXEL_RATE, 1,
+					       GC02M1_DEFAULT_PIXEL_RATE);
+	gc02m1->link_freq = v4l2_ctrl_new_int_menu(&gc02m1->ctrls, NULL,
+						   V4L2_CID_LINK_FREQ,
+						   ARRAY_SIZE(link_freq) - 1,
+						   0, link_freq);
+	if (gc02m1->link_freq)
+		gc02m1->link_freq->flags |= V4L2_CTRL_FLAG_READ_ONLY;
+
+/* TODO check!!! */
+	gc02m1->exposure = v4l2_ctrl_new_std(&gc02m1->ctrls, &gc02m1_ctrl_ops,
+					     V4L2_CID_EXPOSURE,
+					     0, 3184, 1, 0x0c70);
+
+	gc02m1->unit_size = v4l2_ctrl_new_std_compound(&gc02m1->ctrls,
+				NULL,
+				V4L2_CID_UNIT_CELL_SIZE,
+				v4l2_ctrl_ptr_create((void *)&unit_size));
+	ret = gc02m1->ctrls.error;
+	if (ret) {
+		dev_err(&client->dev, "%s control init failed (%d)\n",
+			__func__, ret);
+		goto free_ctrl;
+	}
+
+	gc02m1->sd.ctrl_handler = &gc02m1->ctrls;
+	mutex_init(&gc02m1->mutex);
+	gc02m1->ctrls.lock = &gc02m1->mutex;
+
+	gc02m1->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+	gc02m1->pad.flags = MEDIA_PAD_FL_SOURCE;
+	gc02m1->sd.dev = &client->dev;
+	gc02m1->sd.entity.function = MEDIA_ENT_F_CAM_SENSOR;
+
+	ret = media_entity_pads_init(&gc02m1->sd.entity, 1, &gc02m1->pad);
+	if (ret < 0) {
+		dev_err(dev, "could not register media entity\n");
+		goto free_ctrl;
+	}
+
+	gc02m1_entity_init_cfg(&gc02m1->sd, NULL);
+
+	ret = v4l2_async_register_subdev_sensor(&gc02m1->sd);
+	if (ret < 0) {
+		dev_err(dev, "could not register v4l2 device\n");
+		goto free_entity;
+	}
+
+	return 0;
+
+free_entity:
+	media_entity_cleanup(&gc02m1->sd.entity);
+free_ctrl:
+	mutex_destroy(&gc02m1->mutex);
+	v4l2_ctrl_handler_free(&gc02m1->ctrls);
+	pm_runtime_disable(gc02m1->dev);
+
+	return ret;
+}
+
+static void gc02m1_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gc02m1 *gc02m1 = to_gc02m1(sd);
+
+	v4l2_async_unregister_subdev(&gc02m1->sd);
+	media_entity_cleanup(&gc02m1->sd.entity);
+	v4l2_ctrl_handler_free(&gc02m1->ctrls);
+
+	pm_runtime_disable(&client->dev);
+	pm_runtime_set_suspended(&client->dev);
+
+	mutex_destroy(&gc02m1->mutex);
+}
+
+static const struct of_device_id gc02m1_of_match[] = {
+	{ .compatible = "samsung,gc02m1" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, gc02m1_of_match);
+
+static const struct dev_pm_ops gc02m1_pm_ops = {
+	SET_RUNTIME_PM_OPS(gc02m1_power_off, gc02m1_power_on, NULL)
+};
+
+static struct i2c_driver gc02m1_i2c_driver = {
+	.driver = {
+		.of_match_table = gc02m1_of_match,
+		.pm = &gc02m1_pm_ops,
+		.name  = "gc02m1",
+	},
+	.probe = gc02m1_probe,
+	.remove = gc02m1_remove,
+};
+
+module_i2c_driver(gc02m1_i2c_driver);
+
+MODULE_DESCRIPTION("samsung gc02m1 Camera driver");
+MODULE_AUTHOR("Ricardo Ribalda <ribalda@kernel.org>");
+MODULE_AUTHOR("99degree <https://github.com/99degree>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/i2c/gc8034.c b/drivers/media/i2c/gc8034.c
new file mode 100755
index 00000000000000..fca14e13880c45
--- /dev/null
+++ b/drivers/media/i2c/gc8034.c
@@ -0,0 +1,2260 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * gc8034 driver
+ *
+ * Copyright (C) 2017 Fuzhou Rockchip Electronics Co., Ltd.
+ *
+ * V0.0X01.0X01 add poweron function.
+ * V0.0X01.0X02 fix mclk issue when probe multiple camera.
+ * V0.0X01.0X03 add enum_frame_interval function.
+ * V0.0X01.0X04 add quick stream on/off
+ * V0.0X01.0X05 add function g_mbus_config
+ * V0.0X01.0X06
+ * 1. add 2lane support.
+ * 2. add some debug info.
+ * 3. adjust gc8034_g_mbus_config function.
+ * V0.0X01.0X07 support get channel info
+ * V0.0X01.0X08
+ * 1. default support 2lane full 30fps.
+ * 2. default support rk otp spec.
+ * V0.0X01.0X09 adjust supply sequence to suit spec
+ */
+//#define DEBUG
+#include <linux/clk.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/of.h>
+#include <linux/of_graph.h>
+#include <linux/regulator/consumer.h>
+#include <linux/sysfs.h>
+#include <linux/version.h>
+#include <media/media-entity.h>
+#include <media/v4l2-async.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-event.h>
+#include <media/v4l2-fwnode.h>
+#include <media/v4l2-image-sizes.h>
+#include <media/v4l2-mediabus.h>
+#include <media/v4l2-subdev.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/slab.h>
+#include <linux/of_graph.h>
+
+#define DRIVER_VERSION			KERNEL_VERSION(0, 0x01, 0x09)
+
+#ifndef V4L2_CID_DIGITAL_GAIN
+#define V4L2_CID_DIGITAL_GAIN		V4L2_CID_GAIN
+#endif
+
+#define GC8034_LANES			4
+#define GC8034_BITS_PER_SAMPLE		10
+#define GC8034_MIPI_FREQ_336MHZ		336000000U
+#define GC8034_MIPI_FREQ_634MHZ		634000000U
+
+/* pixel rate = link frequency * 2 * lanes / BITS_PER_SAMPLE */
+#define GC8034_PIXEL_RATE		288000000
+#define GC8034_XVCLK_FREQ		24000000
+
+#define CHIP_ID				0x8044
+#define GC8034_REG_CHIP_ID_H		0xf0
+#define GC8034_REG_CHIP_ID_L		0xf1
+
+#define GC8034_REG_SET_PAGE		0xfe
+#define GC8034_SET_PAGE_ZERO		0x00
+
+#define GC8034_REG_CTRL_MODE		0x3f
+#define GC8034_MODE_SW_STANDBY		0x00
+#define GC8034_MODE_STREAMING		0xd0
+
+#define GC8034_REG_EXPOSURE_H		0x03
+#define GC8034_REG_EXPOSURE_L		0x04
+#define GC8034_FETCH_HIGH_BYTE_EXP(VAL) (((VAL) >> 8) & 0x7F)	/* 4 Bits */
+#define GC8034_FETCH_LOW_BYTE_EXP(VAL)	((VAL) & 0xFF)	/* 8 Bits */
+#define	GC8034_EXPOSURE_MIN		4
+#define	GC8034_EXPOSURE_STEP		1
+#define GC8034_VTS_MAX			0x1fff
+
+#define GC8034_REG_AGAIN		0xb6
+#define GC8034_REG_DGAIN_INT		0xb1
+#define GC8034_REG_DGAIN_FRAC		0xb2
+#define GC8034_GAIN_MIN			64
+#define GC8034_GAIN_MAX			1092
+#define GC8034_GAIN_STEP		1
+#define GC8034_GAIN_DEFAULT		64
+
+#define GC8034_REG_VTS_H		0x07
+#define GC8034_REG_VTS_L		0x08
+
+#define REG_NULL			0xFF
+
+#define OF_CAMERA_PINCTRL_STATE_DEFAULT	"rockchip,camera_default"
+#define OF_CAMERA_PINCTRL_STATE_SLEEP	"rockchip,camera_sleep"
+
+#define GC8034_NAME			"gc8034_i2c"
+#define GC8034_MEDIA_BUS_FMT		MEDIA_BUS_FMT_SRGGB10_1X10
+
+/* choose 2lane support full 30fps or 15fps */
+#define GC8034_2LANE_30FPS
+
+static const char * const gc8034_supply_names[] = {
+	"dovdd",	/* Digital I/O power */
+	"dvdd",		/* Digital core power */
+	"avdd",		/* Analog power */
+};
+
+#define GC8034_NUM_SUPPLIES ARRAY_SIZE(gc8034_supply_names)
+
+
+struct gc8034_dd {
+	u16 x;
+	u16 y;
+	u16 t;
+};
+
+struct regval {
+	u8 addr;
+	u8 val;
+};
+
+struct gc8034_mode {
+	u32 width;
+	u32 height;
+	struct v4l2_fract max_fps;
+	u32 hts_def;
+	u32 vts_def;
+	u32 exp_def;
+	u32 mipi_freq_idx;
+	const struct regval *global_reg_list;
+	const struct regval *reg_list;
+//	u32 vc[PAD_MAX];
+};
+
+struct gc8034 {
+	struct i2c_client	*client;
+	struct clk		*xvclk;
+	struct gpio_desc	*power_gpio;
+	struct gpio_desc	*reset_gpio;
+	struct gpio_desc	*pwdn_gpio;
+	struct regulator_bulk_data supplies[GC8034_NUM_SUPPLIES];
+	struct pinctrl		*pinctrl;
+	struct pinctrl_state	*pins_default;
+	struct pinctrl_state	*pins_sleep;
+	struct v4l2_subdev	subdev;
+	struct media_pad	pad;
+	struct v4l2_ctrl_handler ctrl_handler;
+	struct v4l2_ctrl	*exposure;
+	struct v4l2_ctrl	*anal_gain;
+	struct v4l2_ctrl	*digi_gain;
+	struct v4l2_ctrl	*hblank;
+	struct v4l2_ctrl	*vblank;
+	struct v4l2_ctrl	*link_freq;
+	struct mutex		mutex;
+	bool			streaming;
+	unsigned int		lane_num;
+	unsigned int		cfg_num;
+	unsigned int		pixel_rate;
+	bool			power_on;
+	const struct gc8034_mode *cur_mode;
+	u32			module_index;
+	const char		*module_facing;
+	const char		*module_name;
+	const char		*len_name;
+	u32 Dgain_ratio;
+};
+
+#define to_gc8034(sd) container_of(sd, struct gc8034, subdev)
+
+#undef GC8034_MIRROR_NORMAL
+#undef GC8034_MIRROR_H
+#undef GC8034_MIRROR_V
+#undef GC8034_MIRROR_HV
+/* If you use the otp function, keep the otp_drv ->
+ * gc8034_common_otp_drv.h consistent.
+ */
+#define GC8034_MIRROR_NORMAL
+
+#if defined(GC8034_MIRROR_NORMAL)
+	#define GC8034_MIRROR	0xc0
+	#define BINNING_STARTY	0x04
+	#define BINNING_STARTX	0x05
+	#define FULL_STARTY	0x08
+	#define FULL_STARTX	0x09
+#elif defined(GC8034_MIRROR_H)
+	#define GC8034_MIRROR	0xc1
+	#define BINNING_STARTY	0x04
+	#define BINNING_STARTX	0x04
+	#define FULL_STARTY	0x08
+	#define FULL_STARTX	0x08
+#elif defined(GC8034_MIRROR_V)
+	#define GC8034_MIRROR	0xc2
+	#define BINNING_STARTY	0x05
+	#define BINNING_STARTX	0x05
+	#define FULL_STARTY	0x09
+	#define FULL_STARTX	0x09
+#elif defined(GC8034_MIRROR_HV)
+	#define GC8034_MIRROR	0xc3
+	#define BINNING_STARTY	0x05
+	#define BINNING_STARTX	0x04
+	#define FULL_STARTY	0x09
+	#define FULL_STARTX	0x08
+#else
+	#define GC8034_MIRROR	0xc0
+	#define BINNING_STARTY	0x04
+	#define BINNING_STARTX	0x05
+	#define FULL_STARTY	0x08
+	#define FULL_STARTX	0x09
+#endif
+
+/*
+ * Xclk 24Mhz
+ */
+static const struct regval gc8034_global_regs_2lane[] = {
+#ifdef GC8034_2LANE_30FPS
+	/* SYS */
+	{0xf2, 0x00},
+	{0xf4, 0x90},
+	{0xf5, 0x3d},
+	{0xf6, 0x44},
+	{0xf8, 0x63},
+	{0xfa, 0x42},
+	{0xf9, 0x00},
+	{0xf7, 0x95},
+	{0xfc, 0x00},
+	{0xfc, 0x00},
+	{0xfc, 0xea},
+	{0xfe, 0x03},
+	{0x03, 0x9a},
+	{0xfc, 0xee},
+	{0xfe, 0x00},
+	{0x88, 0x03},
+
+	/*Cisctl&Analog*/
+	{0xfe, 0x00},
+	{0x03, 0x08},
+	{0x04, 0xc6},
+	{0x05, 0x02},
+	{0x06, 0x16},
+	{0x07, 0x00},
+	{0x08, 0x10},
+	{0x0a, 0x3a}, //row start
+	{0x0b, 0x00},
+	{0x0c, 0x04}, //col start
+	{0x0d, 0x09},
+	{0x0e, 0xa0}, //win_height 2464
+	{0x0f, 0x0c},
+	{0x10, 0xd4}, //win_width 3284
+	{0x17, GC8034_MIRROR},
+	{0x18, 0x02},
+	{0x19, 0x17},
+	{0x1e, 0x50},
+	{0x1f, 0x80},
+	{0x21, 0x4c},
+	{0x25, 0x00},
+	{0x28, 0x4a},
+	{0x2d, 0x89},
+	{0xca, 0x02},
+	{0xcb, 0x00},
+	{0xcc, 0x39},
+	{0xce, 0xd0},
+	{0xcf, 0x93},
+	{0xd0, 0x1b},
+	{0xd1, 0xaa},
+	{0xd2, 0xcb},
+	{0xd8, 0x40},
+	{0xd9, 0xff},
+	{0xda, 0x0e},
+	{0xdb, 0xb0},
+	{0xdc, 0x0e},
+	{0xde, 0x08},
+	{0xe4, 0xc6},
+	{0xe5, 0x08},
+	{0xe6, 0x10},
+	{0xed, 0x2a},
+	{0xfe, 0x02},
+	{0x59, 0x02},
+	{0x5a, 0x04},
+	{0x5b, 0x08},
+	{0x5c, 0x20},
+	{0xfe, 0x00},
+	{0x1a, 0x09},
+	{0x1d, 0x13},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+
+	/* Gamma */
+	{0xfe, 0x00},
+	{0x20, 0x54},
+	{0x33, 0x82},
+	{0xfe, 0x01},
+	{0xdf, 0x06},
+	{0xe7, 0x18},
+	{0xe8, 0x20},
+	{0xe9, 0x16},
+	{0xea, 0x17},
+	{0xeb, 0x50},
+	{0xec, 0x6c},
+	{0xed, 0x9b},
+	{0xee, 0xd8},
+
+	/*ISP*/
+	{0xfe, 0x00},
+	{0x80, 0x13},
+	{0x84, 0x01},
+	{0x89, 0x03},
+	{0x8d, 0x03},
+	{0x8f, 0x14},
+	{0xad, 0x00},
+	{0x66, 0x0c},
+	{0xbc, 0x09},
+	{0xc2, 0x7f},
+	{0xc3, 0xff},
+
+	/*Crop window*/
+	{0x90, 0x01},
+	{0x92, FULL_STARTY},
+	{0x94, FULL_STARTX},
+	{0x95, 0x09},
+	{0x96, 0x90},
+	{0x97, 0x0c},
+	{0x98, 0xc0},
+
+	/*Gain*/
+	{0xb0, 0x90},
+	{0xb1, 0x01},
+	{0xb2, 0x00},
+	{0xb6, 0x00},
+
+	/*BLK*/
+	{0xfe, 0x00},
+	{0x40, 0x22},
+	{0x41, 0x20},
+	{0x42, 0x02},
+	{0x43, 0x08},
+	{0x4e, 0x0f},
+	{0x4f, 0xf0},
+	{0x58, 0x80},
+	{0x59, 0x80},
+	{0x5a, 0x80},
+	{0x5b, 0x80},
+	{0x5c, 0x00},
+	{0x5d, 0x00},
+	{0x5e, 0x00},
+	{0x5f, 0x00},
+	{0x6b, 0x01},
+	{0x6c, 0x00},
+	{0x6d, 0x0c},
+
+	/*WB offset*/
+	{0xfe, 0x01},
+	{0xbf, 0x40},
+
+	/*Dark Sun*/
+	{0xfe, 0x01},
+	{0x68, 0x77},
+
+	/*DPC*/
+	{0xfe, 0x01},
+	{0x60, 0x00},
+	{0x61, 0x10},
+	{0x62, 0x60},
+	{0x63, 0x30},
+	{0x64, 0x00},
+
+	/* LSC */
+	{0xfe, 0x01},
+	{0xa8, 0x60},
+	{0xa2, 0xd1},
+	{0xc8, 0x57},
+	{0xa1, 0xb8},
+	{0xa3, 0x91},
+	{0xc0, 0x50},
+	{0xd0, 0x05},
+	{0xd1, 0xb2},
+	{0xd2, 0x1f},
+	{0xd3, 0x00},
+	{0xd4, 0x00},
+	{0xd5, 0x00},
+	{0xd6, 0x00},
+	{0xd7, 0x00},
+	{0xd8, 0x00},
+	{0xd9, 0x00},
+	{0xa4, 0x10},
+	{0xa5, 0x20},
+	{0xa6, 0x60},
+	{0xa7, 0x80},
+	{0xab, 0x18},
+	{0xc7, 0xc0},
+
+	/*ABB*/
+	{0xfe, 0x01},
+	{0x20, 0x02},
+	{0x21, 0x02},
+	{0x23, 0x42},
+
+	/*MIPI*/
+	{0xfe, 0x03},
+	{0x01, 0x07},
+	{0x02, 0x04},
+	{0x04, 0x80},
+	{0x11, 0x2b},
+	{0x12, 0xf0}, //lwc 3264*5/4
+	{0x13, 0x0f},
+	{0x15, 0x10}, //LP
+	{0x16, 0x29},
+	{0x17, 0xff},
+	{0x18, 0x01},
+	{0x19, 0xaa},
+	{0x1a, 0x02},
+	{0x21, 0x0c},
+	{0x22, 0x0e},
+	{0x23, 0x45},
+	{0x24, 0x01},
+	{0x25, 0x1c},
+	{0x26, 0x0b},
+	{0x29, 0x0e},
+	{0x2a, 0x1d},
+	{0x2b, 0x0b},
+	{0xfe, 0x00},
+	//{0x3f, 0x91},
+	{0x3f, 0x00},
+#else
+	/*SYS*/
+	{0xf2, 0x00},
+	{0xf4, 0x80},
+	{0xf5, 0x19},
+	{0xf6, 0x44},
+	{0xf7, 0x95}, //pll enable
+	{0xf8, 0x63}, //pll mode
+	{0xf9, 0x00},
+	{0xfa, 0x45},
+	{0xfc, 0xfe},
+
+	/*Cisctl&Analog*/
+	{0xfe, 0x00},
+	{0x03, 0x08},
+	{0x04, 0xc6},
+	{0x05, 0x02},
+	{0x06, 0x16},
+	{0x07, 0x00},
+	{0x08, 0x10},
+	{0x0a, 0x3a}, //row start
+	{0x0b, 0x00},
+	{0x0c, 0x04}, //col start
+	{0x0d, 0x09},
+	{0x0e, 0xa0}, //win_height 2464
+	{0x0f, 0x0c},
+	{0x10, 0xd4}, //win_width 3284
+	{0x17, GC8034_MIRROR},
+	{0x18, 0x02},
+	{0x19, 0x17},
+	{0x1e, 0x50},
+	{0x1f, 0x80},
+	{0x21, 0x4c},
+	{0x25, 0x00},
+	{0x28, 0x4a},
+	{0x2d, 0x89},
+	{0xca, 0x02},
+	{0xcb, 0x00},
+	{0xcc, 0x39},
+	{0xce, 0xd0},
+	{0xcf, 0x93},
+	{0xd0, 0x1b},
+	{0xd1, 0xaa},
+	{0xd2, 0xcb},
+	{0xd8, 0x40},
+	{0xd9, 0xff},
+	{0xda, 0x0e},
+	{0xdb, 0xb0},
+	{0xdc, 0x0e},
+	{0xde, 0x08},
+	{0xe4, 0xc6},
+	{0xe5, 0x08},
+	{0xe6, 0x10},
+	{0xed, 0x2a},
+	{0xfe, 0x02},
+	{0x59, 0x02},
+	{0x5a, 0x04},
+	{0x5b, 0x08},
+	{0x5c, 0x20},
+	{0xfe, 0x00},
+	{0x1a, 0x09},
+	{0x1d, 0x13},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+
+	/* Gamma */
+	{0xfe, 0x00},
+	{0x20, 0x54},
+	{0x33, 0x82},
+	{0xfe, 0x01},
+	{0xdf, 0x06},
+	{0xe7, 0x18},
+	{0xe8, 0x20},
+	{0xe9, 0x16},
+	{0xea, 0x17},
+	{0xeb, 0x50},
+	{0xec, 0x6c},
+	{0xed, 0x9b},
+	{0xee, 0xd8},
+
+	/*ISP*/
+	{0xfe, 0x00},
+	{0x80, 0x13},
+	{0x84, 0x01},
+	{0x89, 0x03},
+	{0x8d, 0x03},
+	{0x8f, 0x14},
+	{0xad, 0x00},
+
+	/*Crop window*/
+	{0x90, 0x01},
+	{0x92, FULL_STARTY},
+	{0x94, FULL_STARTX},
+	{0x95, 0x09},
+	{0x96, 0x90},
+	{0x97, 0x0c},
+	{0x98, 0xc0},
+
+	/*Gain*/
+	{0xb0, 0x90},
+	{0xb1, 0x01},
+	{0xb2, 0x00},
+	{0xb6, 0x00},
+
+	/*BLK*/
+	{0xfe, 0x00},
+	{0x40, 0x22},
+	{0x43, 0x03}, //add_offset
+	{0x4e, 0x00}, //row_bits[15:8]
+	{0x4f, 0x3c}, //row_bits[7:0]
+	{0x58, 0x80}, //dark current ratio
+	{0x59, 0x80},
+	{0x5a, 0x80},
+	{0x5b, 0x80},
+	{0x5c, 0x00},
+	{0x5d, 0x00},
+	{0x5e, 0x00},
+	{0x5f, 0x00},
+
+	/*WB offset*/
+	{0xfe, 0x01},
+	{0xbf, 0x40},
+
+	/*Dark Sun*/
+	{0xfe, 0x01},
+	{0x68, 0x77},
+
+	/*DPC*/
+	{0xfe, 0x01},
+	{0x60, 0x15},
+	{0x61, 0x10},
+	{0x62, 0x60},
+	{0x63, 0x48},
+	{0x64, 0x02},
+
+	/*LSC*/
+	{0xfe, 0x01},
+	{0xa0, 0x10}, //[6]segment_width[8], 0x[5:4]segment_height[9:8]
+	{0xa8, 0x60}, //segment_height[7:0]
+	{0xa2, 0xd1}, //height_ratio[7:0]
+	{0xc8, 0x5b}, //[7:4]height_ratio[11:8]
+	{0xa1, 0xb8}, //segment_width[7:0]
+	{0xa3, 0x91}, //width_ratio[7:0]
+	{0xc0, 0x50}, //[7:4]width_ratio[11:8]
+	{0xd0, 0x05}, //segment_width_end[11:8]
+	{0xd1, 0xb2}, //segment_width_end[7:0]
+	{0xd2, 0x1f}, //col_segment
+	{0xd3, 0x00}, //row_num_start[7:0]
+	{0xd4, 0x00}, //[5:4]row_num_start[9:8] [3:0]col_seg_start
+	{0xd5, 0x00}, //[7:2]col_num_start[7:2]
+	{0xd6, 0x00}, //[2:0]col_num_start[10:8]
+	{0xd7, 0x00}, //row_seg_start
+	{0xd8, 0x00}, //col_cal_start[7:0]
+	{0xd9, 0x00}, //[2:0]col_cal_start[10:8]
+
+	/*ABB*/
+	{0xfe, 0x01},
+	{0x20, 0x02},
+	{0x21, 0x02},
+	{0x23, 0x43},
+
+	/*MIPI*/
+	{0xfe, 0x03},
+	{0x01, 0x07},
+	{0x02, 0x07},
+	{0x03, 0x92},
+	{0x04, 0x80},
+	{0x11, 0x2b},
+	{0x12, 0xf0}, //lwc 3264*5/4
+	{0x13, 0x0f},
+	{0x15, 0x10}, //LP
+	{0x16, 0x29},
+	{0x17, 0xff},
+	{0x18, 0x01},
+	{0x19, 0xaa},
+	{0x1a, 0x02},
+	{0x21, 0x05},
+	{0x22, 0x05},
+	{0x23, 0x16},
+	{0x24, 0x00},
+	{0x25, 0x12},
+	{0x26, 0x07},
+	{0x29, 0x07},
+	{0x2a, 0x08},
+	{0x2b, 0x07},
+	{0xfe, 0x00},
+	//{0x3f, 0x91},
+	{0x3f, 0x00},
+#endif
+	{REG_NULL, 0x00},
+};
+
+#ifndef GC8034_2LANE_30FPS
+/*
+ * Xclk 24Mhz
+ * max_framerate 30fps
+ * mipi_datarate per lane 672Mbps
+ */
+static const struct regval gc8034_1632x1224_regs_2lane[] = {
+	/*SYS*/
+	{0xf2, 0x00},
+	{0xf4, 0x80},
+	{0xf5, 0x19},
+	{0xf6, 0x44},
+	{0xf8, 0x63},
+	{0xfa, 0x45},
+	{0xf9, 0x00},
+	{0xf7, 0x95},
+	{0xfc, 0x00},
+	{0xfc, 0x00},
+	{0xfc, 0xea},
+	{0xfe, 0x03},
+	{0x03, 0x9a},
+	{0xfc, 0xee},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+
+	/*ISP*/
+	{0xfe, 0x00},
+	{0x80, 0x10},
+	{0xad, 0x30},
+	{0x66, 0x2c},
+	{0xbc, 0x49},
+
+	/*Crop window*/
+	{0x90, 0x01},
+	{0x92, BINNING_STARTY}, //crop y
+	{0x94, BINNING_STARTX}, //crop x
+	{0x95, 0x04},
+	{0x96, 0xc8},
+	{0x97, 0x06},
+	{0x98, 0x60},
+
+	/*MIPI*/
+	{0xfe, 0x03},
+	{0x01, 0x07},
+	{0x02, 0x03},
+	{0x04, 0x80},
+	{0x11, 0x2b},
+	{0x12, 0xf8},
+	{0x13, 0x07},
+	{0x15, 0x10}, //LP mode
+	{0x16, 0x29},
+	{0x17, 0xff},
+	{0x18, 0x01},
+	{0x19, 0xaa},
+	{0x1a, 0x02},
+	{0x21, 0x05},
+	{0x22, 0x06},
+	{0x23, 0x16},
+	{0x24, 0x00},
+	{0x25, 0x12},
+	{0x26, 0x07},
+	{0x29, 0x07},
+	{0x2a, 0x08},
+	{0x2b, 0x07},
+	{0xfe, 0x00},
+	{0x3f, 0x00},
+
+	{REG_NULL, 0x00},
+};
+#endif
+
+/*
+ * Xclk 24Mhz
+ * max_framerate 15fps
+ * mipi_datarate per lane 672Mbps
+ */
+static const struct regval gc8034_3264x2448_regs_2lane[] = {
+#ifdef GC8034_2LANE_30FPS
+	/* SYS */
+	{0xf2, 0x00},
+	{0xf4, 0x90},
+	{0xf5, 0x3d},
+	{0xf6, 0x44},
+	{0xf8, 0x63},
+	{0xfa, 0x42},
+	{0xf9, 0x00},
+	{0xf7, 0x95},
+	{0xfc, 0x00},
+	{0xfc, 0x00},
+	{0xfc, 0xea},
+	{0xfe, 0x03},
+	{0x03, 0x9a},
+	{0xfc, 0xee},
+	{0xfe, 0x00},
+	{0x3f, 0x00},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+
+	/* ISP */
+	{0xfe, 0x00},
+	{0x80, 0x13},
+	{0xad, 0x00},
+	{0x66, 0x0c},
+	{0xbc, 0x06},
+
+	/* Crop window */
+	{0x90, 0x01},
+	{0x92, FULL_STARTY},
+	{0x94, FULL_STARTX},
+	{0x95, 0x09},
+	{0x96, 0x90},
+	{0x97, 0x0c},
+	{0x98, 0xc0},
+
+	/* MIPI */
+	{0xfe, 0x03},
+	{0x01, 0x07},
+	{0x02, 0x04},
+	{0x04, 0x80},
+	{0x11, 0x2b},
+	{0x12, 0xf0}, //lwc 3264*5/4
+	{0x13, 0x0f},
+	{0x15, 0x10}, //LP
+	{0x16, 0x29},
+	{0x17, 0xff},
+	{0x18, 0x01},
+	{0x19, 0xaa},
+	{0x1a, 0x02},
+	{0x21, 0x0c},
+	{0x22, 0x0c},
+	{0x23, 0x56},
+	{0x24, 0x00},
+	{0x25, 0x1c},
+	{0x26, 0x0b},
+	{0x29, 0x0e},
+	{0x2a, 0x1d},
+	{0x2b, 0x0b},
+	{0xfe, 0x00},
+	//{0x3f, 0x91},
+	{0x3f, 0x00},
+#else
+	/*SYS*/
+	{0xf2, 0x00},
+	{0xf4, 0x80},
+	{0xf5, 0x19},
+	{0xf6, 0x44},
+	{0xf7, 0x95}, //pll enable
+	{0xf8, 0x63}, //pll mode
+	{0xf9, 0x00},
+	{0xfa, 0x45},
+	{0xfc, 0x00},
+	{0xfc, 0x00},
+	{0xfc, 0xfe},
+
+	/* ISP */
+	{0xfe, 0x00},
+	{0x80, 0x13},
+	{0xad, 0x00},
+	{0x66, 0x0c},
+	{0xbc, 0x09},
+
+	/* Crop window */
+	{0x90, 0x01},
+	{0x92, FULL_STARTY},
+	{0x94, FULL_STARTX},
+	{0x95, 0x09},
+	{0x96, 0x90},
+	{0x97, 0x0c},
+	{0x98, 0xc0},
+
+	/* MIPI */
+	{0xfe, 0x03},
+	{0x01, 0x07},
+	{0x02, 0x03},
+	{0x03, 0x92},
+	{0x04, 0x80},
+	{0x11, 0x2b},
+	{0x12, 0xf0}, //lwc 3264*5/4
+	{0x13, 0x0f},
+	{0x15, 0x10}, //LP
+	{0x16, 0x29},
+	{0x17, 0xff},
+	{0x18, 0x01},
+	{0x19, 0xaa},
+	{0x1a, 0x02},
+	{0x21, 0x05},
+	{0x22, 0x05},
+	{0x23, 0x16},
+	{0x24, 0x00},
+	{0x25, 0x12},
+	{0x26, 0x07},
+	{0x29, 0x07},
+	{0x2a, 0x08},
+	{0x2b, 0x07},
+	{0xfe, 0x00},
+	//{0x3f, 0x91},
+	{0x3f, 0x00},
+#endif
+	{REG_NULL, 0x00},
+};
+
+/*
+ * Xclk 24Mhz
+ */
+static const struct regval gc8034_global_regs_4lane[] = {
+	/*SYS*/
+	{0xf2, 0x00},
+	{0xf4, 0x80},
+	{0xf5, 0x19},
+	{0xf6, 0x44},
+	{0xf8, 0x63},
+	{0xfa, 0x45},
+	{0xf9, 0x00},
+	{0xf7, 0x9d},
+	{0xfc, 0x00},
+	{0xfc, 0x00},
+	{0xfc, 0xea},
+	{0xfe, 0x03},
+	{0x03, 0x9a},
+	{0x18, 0x07},
+	{0x01, 0x07},
+	{0xfc, 0xee},
+	/*Cisctl&Analog*/
+	{0xfe, 0x00},
+	{0x03, 0x08},
+	{0x04, 0xc6},
+	{0x05, 0x02},
+	{0x06, 0x16},
+	{0x07, 0x00},
+	{0x08, 0x10},
+	{0x0a, 0x3a},
+	{0x0b, 0x00},
+	{0x0c, 0x04},
+	{0x0d, 0x09},
+	{0x0e, 0xa0},
+	{0x0f, 0x0c},
+	{0x10, 0xd4},
+	{0x17, 0xc0},
+	{0x18, 0x02},
+	{0x19, 0x17},
+	{0x1e, 0x50},
+	{0x1f, 0x80},
+	{0x21, 0x4c},
+	{0x25, 0x00},
+	{0x28, 0x4a},
+	{0x2d, 0x89},
+	{0xca, 0x02},
+	{0xcb, 0x00},
+	{0xcc, 0x39},
+	{0xce, 0xd0},
+	{0xcf, 0x93},
+	{0xd0, 0x19},
+	{0xd1, 0xaa},
+	{0xd2, 0xcb},
+	{0xd8, 0x40},
+	{0xd9, 0xff},
+	{0xda, 0x0e},
+	{0xdb, 0xb0},
+	{0xdc, 0x0e},
+	{0xde, 0x08},
+	{0xe4, 0xc6},
+	{0xe5, 0x08},
+	{0xe6, 0x10},
+	{0xed, 0x2a},
+	{0xfe, 0x02},
+	{0x59, 0x02},
+	{0x5a, 0x04},
+	{0x5b, 0x08},
+	{0x5c, 0x20},
+	{0xfe, 0x00},
+	{0x1a, 0x09},
+	{0x1d, 0x13},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+	{0xfe, 0x10},
+	{0xfe, 0x00},
+	/*Gamma*/
+	{0xfe, 0x00},
+	{0x20, 0x55},
+	{0x33, 0x83},
+	{0xfe, 0x01},
+	{0xdf, 0x06},
+	{0xe7, 0x18},
+	{0xe8, 0x20},
+	{0xe9, 0x16},
+	{0xea, 0x17},
+	{0xeb, 0x50},
+	{0xec, 0x6c},
+	{0xed, 0x9b},
+	{0xee, 0xd8},
+	/*ISP*/
+	{0xfe, 0x00},
+	{0x80, 0x10},
+	{0x84, 0x01},
+	{0x88, 0x03},
+	{0x89, 0x03},
+	{0x8d, 0x03},
+	{0x8f, 0x14},
+	{0xad, 0x30},
+	{0x66, 0x2c},
+	{0xbc, 0x49},
+	{0xc2, 0x7f},
+	{0xc3, 0xff},
+	/*Crop window*/
+	{0x90, 0x01},
+	{0x92, 0x08},
+	{0x94, 0x09},
+	{0x95, 0x04},
+	{0x96, 0xc8},
+	{0x97, 0x06},
+	{0x98, 0x60},
+	/*Gain*/
+	{0xb0, 0x90},
+	{0xb1, 0x01},
+	{0xb2, 0x00},
+	{0xb6, 0x00},
+	/*BLK*/
+	{0xfe, 0x00},
+	{0x40, 0x22},
+	{0x41, 0x20},
+	{0x42, 0x02},
+	{0x43, 0x08},
+	{0x4e, 0x0f},
+	{0x4f, 0xf0},
+	{0x58, 0x80},
+	{0x59, 0x80},
+	{0x5a, 0x80},
+	{0x5b, 0x80},
+	{0x5c, 0x00},
+	{0x5d, 0x00},
+	{0x5e, 0x00},
+	{0x5f, 0x00},
+	{0x6b, 0x01},
+	{0x6c, 0x00},
+	{0x6d, 0x0c},
+	/*WB offset*/
+	{0xfe, 0x01},
+	{0xbf, 0x40},
+	/*Dark Sun*/
+	{0xfe, 0x01},
+	{0x68, 0x77},
+	/*DPC*/
+	{0xfe, 0x01},
+	{0x60, 0x00},
+	{0x61, 0x10},
+	{0x62, 0x28},
+	{0x63, 0x10},
+	{0x64, 0x02},
+	/*LSC*/
+	{0xfe, 0x01},
+	{0xa8, 0x60},
+	{0xa2, 0xd1},
+	{0xc8, 0x57},
+	{0xa1, 0xb8},
+	{0xa3, 0x91},
+	{0xc0, 0x50},
+	{0xd0, 0x05},
+	{0xd1, 0xb2},
+	{0xd2, 0x1f},
+	{0xd3, 0x00},
+	{0xd4, 0x00},
+	{0xd5, 0x00},
+	{0xd6, 0x00},
+	{0xd7, 0x00},
+	{0xd8, 0x00},
+	{0xd9, 0x00},
+	{0xa4, 0x10},
+	{0xa5, 0x20},
+	{0xa6, 0x60},
+	{0xa7, 0x80},
+	{0xab, 0x18},
+	{0xc7, 0xc0},
+	/*ABB*/
+	{0xfe, 0x01},
+	{0x20, 0x02},
+	{0x21, 0x02},
+	{0x23, 0x42},
+	/*MIPI*/
+	{0xfe, 0x03},
+	{0x02, 0x03},
+	{0x04, 0x80},
+	{0x11, 0x2b},
+	{0x12, 0xf8},
+	{0x13, 0x07},
+	{0x15, 0x10},
+	{0x16, 0x29},
+	{0x17, 0xff},
+	{0x19, 0xaa},
+	{0x1a, 0x02},
+	{0x21, 0x02},
+	{0x22, 0x03},
+	{0x23, 0x0a},
+	{0x24, 0x00},
+	{0x25, 0x12},
+	{0x26, 0x04},
+	{0x29, 0x04},
+	{0x2a, 0x02},
+	{0x2b, 0x04},
+	{0xfe, 0x00},
+	{0x3f, 0x00},
+
+	/*SYS*/
+	{0xf2, 0x00},
+	{0xf4, 0x80},
+	{0xf5, 0x19},
+	{0xf6, 0x44},
+	{0xf8, 0x63},
+	{0xfa, 0x45},
+	{0xf9, 0x00},
+	{0xf7, 0x95},
+	{0xfc, 0x00},
+	{0xfc, 0x00},
+	{0xfc, 0xea},
+	{0xfe, 0x03},
+	{0x03, 0x9a},
+	{0x18, 0x07},
+	{0x01, 0x07},
+	{0xfc, 0xee},
+	/*ISP*/
+	{0xfe, 0x00},
+	{0x80, 0x13},
+	{0xad, 0x00},
+	/*Crop window*/
+	{0x90, 0x01},
+	{0x92, 0x08},
+	{0x94, 0x09},
+	{0x95, 0x09},
+	{0x96, 0x90},
+	{0x97, 0x0c},
+	{0x98, 0xc0},
+	/*DPC*/
+	{0xfe, 0x01},
+	{0x62, 0x60},
+	{0x63, 0x48},
+	/*MIPI*/
+	{0xfe, 0x03},
+	{0x02, 0x03},
+	{0x04, 0x80},
+	{0x11, 0x2b},
+	{0x12, 0xf0},
+	{0x13, 0x0f},
+	{0x15, 0x10},
+	{0x16, 0x29},
+	{0x17, 0xff},
+	{0x19, 0xaa},
+	{0x1a, 0x02},
+	{0x21, 0x05},
+	{0x22, 0x06},
+	{0x23, 0x2b},
+	{0x24, 0x00},
+	{0x25, 0x12},
+	{0x26, 0x07},
+	{0x29, 0x07},
+	{0x2a, 0x12},
+	{0x2b, 0x07},
+	{0xfe, 0x00},
+	{0x3f, 0x00},
+
+	{REG_NULL, 0x00},
+};
+
+/*
+ * Xclk 24Mhz
+ * max_framerate 30fps
+ * mipi_datarate per lane 656Mbps
+ */
+static const struct regval gc8034_3264x2448_regs_4lane[] = {
+	{REG_NULL, 0x00},
+};
+
+static const struct gc8034_mode supported_modes_2lane[] = {
+#ifdef GC8034_2LANE_30FPS
+	{
+		.width = 3264,
+		.height = 2448,
+		.max_fps = {
+			.numerator = 10000,
+			.denominator = 300000,
+		},
+		.exp_def = 0x0900,
+		.hts_def = 0x0858 * 2,
+		.vts_def = 0x09c0,
+		.mipi_freq_idx = 1,
+		.global_reg_list = gc8034_global_regs_2lane,
+		.reg_list = gc8034_3264x2448_regs_2lane,
+	//	.vc[PAD0] = V4L2_MBUS_CSI2_CHANNEL_0,
+	},
+#else
+	{
+		.width = 3264,
+		.height = 2448,
+		.max_fps = {
+			.numerator = 10000,
+			.denominator = 150000,
+		},
+		.exp_def = 0x09a0,
+		.hts_def = 0x0858 * 2,
+		.vts_def = 0x09c4,
+		.mipi_freq_idx = 0,
+		.global_reg_list = gc8034_global_regs_2lane,
+		.reg_list = gc8034_3264x2448_regs_2lane,
+	//	.vc[PAD0] = V4L2_MBUS_CSI2_CHANNEL_0,
+	},
+	{
+		.width = 1632,
+		.height = 1224,
+		.max_fps = {
+			.numerator = 10000,
+			.denominator = 300000,
+		},
+		.exp_def = 0x09a0,
+		.hts_def = 0x0858 * 2,
+		.vts_def = 0x09c4,
+		.mipi_freq_idx = 0,
+		.global_reg_list = gc8034_global_regs_2lane,
+		.reg_list = gc8034_1632x1224_regs_2lane,
+	//	.vc[PAD0] = V4L2_MBUS_CSI2_CHANNEL_0,
+	},
+#endif
+};
+
+static const struct gc8034_mode supported_modes_4lane[] = {
+	{
+		.width = 3264,
+		.height = 2448,
+		.max_fps = {
+			.numerator = 10000,
+			.denominator = 300000,
+		},
+		.exp_def = 0x08c6,
+		.hts_def = 0x10b0,
+		.vts_def = 0x09c0,
+		.mipi_freq_idx = 0,
+		.global_reg_list = gc8034_global_regs_4lane,
+		.reg_list = gc8034_3264x2448_regs_4lane,
+	//	.vc[PAD0] = V4L2_MBUS_CSI2_CHANNEL_0,
+	},
+};
+
+static const struct gc8034_mode *supported_modes;
+
+static const s64 link_freq_menu_items[] = {
+	GC8034_MIPI_FREQ_336MHZ,
+	GC8034_MIPI_FREQ_634MHZ
+};
+
+/* Write registers up to 4 at a time */
+static int gc8034_write_reg(struct i2c_client *client, u8 reg, u8 val)
+{
+	struct i2c_msg msg;
+	u8 buf[2];
+	int ret;
+
+	buf[0] = reg & 0xFF;
+	buf[1] = val;
+
+	msg.addr = client->addr;
+	msg.flags = client->flags;
+	msg.buf = buf;
+	msg.len = sizeof(buf);
+
+	ret = i2c_transfer(client->adapter, &msg, 1);
+	if (ret >= 0)
+		return 0;
+
+	dev_err(&client->dev,
+		"gc8034 write reg(0x%x val:0x%x) failed !\n", reg, val);
+
+	return ret;
+}
+
+static int gc8034_write_array(struct i2c_client *client,
+	const struct regval *regs)
+{
+	u32 i = 0;
+	int ret = 0;
+
+	for (i = 0; ret == 0 && regs[i].addr != REG_NULL; i++)
+		ret = gc8034_write_reg(client, regs[i].addr, regs[i].val);
+
+	return ret;
+}
+
+/* Read registers up to 4 at a time */
+static int gc8034_read_reg(struct i2c_client *client, u8 reg, u8 *val)
+{
+	struct i2c_msg msg[2];
+	u8 buf[1];
+	int ret;
+
+	buf[0] = reg & 0xFF;
+
+	msg[0].addr = client->addr;
+	msg[0].flags = client->flags;
+	msg[0].buf = buf;
+	msg[0].len = sizeof(buf);
+
+	msg[1].addr = client->addr;
+	msg[1].flags = client->flags | I2C_M_RD;
+	msg[1].buf = buf;
+	msg[1].len = 1;
+
+	ret = i2c_transfer(client->adapter, msg, 2);
+	if (ret >= 0) {
+		*val = buf[0];
+		return 0;
+	}
+
+	dev_err(&client->dev,
+		"gc8034 read reg:0x%x failed !\n", reg);
+
+	return ret;
+}
+
+static int gc8034_get_reso_dist(const struct gc8034_mode *mode,
+				 struct v4l2_mbus_framefmt *framefmt)
+{
+	return abs(mode->width - framefmt->width) +
+		abs(mode->height - framefmt->height);
+}
+
+static const struct gc8034_mode *
+gc8034_find_best_fit(struct gc8034 *gc8034,
+		     struct v4l2_subdev_format *fmt)
+{
+	struct v4l2_mbus_framefmt *framefmt = &fmt->format;
+	int dist;
+	int cur_best_fit = 0;
+	int cur_best_fit_dist = -1;
+	unsigned int i;
+
+	for (i = 0; i < gc8034->cfg_num; i++) {
+		dist = gc8034_get_reso_dist(&supported_modes[i], framefmt);
+		if (cur_best_fit_dist == -1 || dist < cur_best_fit_dist) {
+			cur_best_fit_dist = dist;
+			cur_best_fit = i;
+		}
+	}
+
+	return &supported_modes[cur_best_fit];
+}
+
+static int gc8034_set_fmt(struct v4l2_subdev *sd,
+	struct v4l2_subdev_state *sd_state,
+	struct v4l2_subdev_format *fmt)
+{
+	struct gc8034 *gc8034 = to_gc8034(sd);
+	const struct gc8034_mode *mode;
+	s64 h_blank, vblank_def;
+
+	mutex_lock(&gc8034->mutex);
+
+	mode = gc8034_find_best_fit(gc8034, fmt);
+	fmt->format.code = GC8034_MEDIA_BUS_FMT;
+	fmt->format.width = mode->width;
+	fmt->format.height = mode->height;
+	fmt->format.field = V4L2_FIELD_NONE;
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		*v4l2_subdev_get_try_format(sd, sd_state, fmt->pad) = fmt->format;
+#else
+		mutex_unlock(&gc8034->mutex);
+		return -ENOTTY;
+#endif
+	} else {
+		gc8034->cur_mode = mode;
+		h_blank = mode->hts_def - mode->width;
+		__v4l2_ctrl_modify_range(gc8034->hblank, h_blank,
+					 h_blank, 1, h_blank);
+		vblank_def = mode->vts_def - mode->height;
+		__v4l2_ctrl_modify_range(gc8034->vblank, vblank_def,
+					 GC8034_VTS_MAX - mode->height,
+					 1, vblank_def);
+		__v4l2_ctrl_s_ctrl(gc8034->vblank, vblank_def);
+		__v4l2_ctrl_s_ctrl(gc8034->link_freq, mode->mipi_freq_idx);
+	}
+
+	mutex_unlock(&gc8034->mutex);
+
+	return 0;
+}
+
+static int gc8034_get_fmt(struct v4l2_subdev *sd,
+	struct v4l2_subdev_state *sd_state,
+	struct v4l2_subdev_format *fmt)
+{
+	struct gc8034 *gc8034 = to_gc8034(sd);
+	const struct gc8034_mode *mode = gc8034->cur_mode;
+
+	mutex_lock(&gc8034->mutex);
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		fmt->format = *v4l2_subdev_get_try_format(sd, sd_state, fmt->pad);
+#else
+		mutex_unlock(&gc8034->mutex);
+		return -ENOTTY;
+#endif
+	} else {
+		fmt->format.width = mode->width;
+		fmt->format.height = mode->height;
+		fmt->format.code = GC8034_MEDIA_BUS_FMT;
+		fmt->format.field = V4L2_FIELD_NONE;
+	}
+	mutex_unlock(&gc8034->mutex);
+
+	return 0;
+}
+
+static int gc8034_enum_mbus_code(struct v4l2_subdev *sd,
+	struct v4l2_subdev_state *sd_state,
+	struct v4l2_subdev_mbus_code_enum *code)
+{
+	if (code->index != 0)
+		return -EINVAL;
+	code->code = GC8034_MEDIA_BUS_FMT;
+
+	return 0;
+}
+
+static int gc8034_enum_frame_sizes(struct v4l2_subdev *sd,
+	struct v4l2_subdev_state *sd_state,
+	struct v4l2_subdev_frame_size_enum *fse)
+{
+	struct gc8034 *gc8034 = to_gc8034(sd);
+
+	if (fse->index >= gc8034->cfg_num)
+		return -EINVAL;
+
+	if (fse->code != GC8034_MEDIA_BUS_FMT)
+		return -EINVAL;
+
+	fse->min_width  = supported_modes[fse->index].width;
+	fse->max_width  = supported_modes[fse->index].width;
+	fse->max_height = supported_modes[fse->index].height;
+	fse->min_height = supported_modes[fse->index].height;
+
+	return 0;
+}
+
+static int gc8034_g_frame_interval(struct v4l2_subdev *sd,
+	struct v4l2_subdev_frame_interval *fi)
+{
+	struct gc8034 *gc8034 = to_gc8034(sd);
+	const struct gc8034_mode *mode = gc8034->cur_mode;
+
+	mutex_lock(&gc8034->mutex);
+	fi->interval = mode->max_fps;
+	mutex_unlock(&gc8034->mutex);
+
+	return 0;
+}
+
+static int __gc8034_start_stream(struct gc8034 *gc8034)
+{
+	int ret;
+
+	ret = gc8034_write_array(gc8034->client, gc8034->cur_mode->reg_list);
+	if (ret)
+		return ret;
+
+	/* In case these controls are set before streaming */
+	mutex_unlock(&gc8034->mutex);
+	ret = v4l2_ctrl_handler_setup(&gc8034->ctrl_handler);
+	mutex_lock(&gc8034->mutex);
+	ret |= gc8034_write_reg(gc8034->client,
+		GC8034_REG_SET_PAGE,
+		GC8034_SET_PAGE_ZERO);
+	if (2 == gc8034->lane_num) {
+		ret |= gc8034_write_reg(gc8034->client,
+			GC8034_REG_CTRL_MODE,
+			0x91);
+	} else {
+		ret |= gc8034_write_reg(gc8034->client,
+			GC8034_REG_CTRL_MODE,
+			GC8034_MODE_STREAMING);
+	}
+	return ret;
+}
+
+static int __gc8034_stop_stream(struct gc8034 *gc8034)
+{
+	int ret;
+
+	ret = gc8034_write_reg(gc8034->client,
+		GC8034_REG_SET_PAGE,
+		GC8034_SET_PAGE_ZERO);
+	ret |= gc8034_write_reg(gc8034->client,
+		GC8034_REG_CTRL_MODE,
+		GC8034_MODE_SW_STANDBY);
+
+	return ret;
+}
+
+static int gc8034_s_stream(struct v4l2_subdev *sd, int on)
+{
+	struct gc8034 *gc8034 = to_gc8034(sd);
+	struct i2c_client *client = gc8034->client;
+	int ret = 0;
+
+	dev_info(&client->dev, "%s: on: %d, %dx%d@%d\n", __func__, on,
+				gc8034->cur_mode->width,
+				gc8034->cur_mode->height,
+		DIV_ROUND_CLOSEST(gc8034->cur_mode->max_fps.denominator,
+		gc8034->cur_mode->max_fps.numerator));
+
+	mutex_lock(&gc8034->mutex);
+	on = !!on;
+	if (on == gc8034->streaming)
+		goto unlock_and_return;
+
+	if (on) {
+		ret = pm_runtime_get_sync(&client->dev);
+		if (ret < 0) {
+			pm_runtime_put_noidle(&client->dev);
+			goto unlock_and_return;
+		}
+
+		ret = __gc8034_start_stream(gc8034);
+		if (ret) {
+			v4l2_err(sd, "start stream failed while write regs\n");
+			pm_runtime_put(&client->dev);
+			goto unlock_and_return;
+		}
+	} else {
+		__gc8034_stop_stream(gc8034);
+		pm_runtime_put(&client->dev);
+	}
+
+	gc8034->streaming = on;
+
+unlock_and_return:
+	mutex_unlock(&gc8034->mutex);
+
+	return ret;
+}
+
+static int gc8034_s_power(struct v4l2_subdev *sd, int on)
+{
+	struct gc8034 *gc8034 = to_gc8034(sd);
+	struct i2c_client *client = gc8034->client;
+	const struct gc8034_mode *mode = gc8034->cur_mode;
+	int ret = 0;
+
+	dev_info(&client->dev, "%s(%d) on(%d)\n", __func__, __LINE__, on);
+	mutex_lock(&gc8034->mutex);
+
+	/* If the power state is not modified - no work to do. */
+	if (gc8034->power_on == !!on)
+		goto unlock_and_return;
+
+	if (on) {
+		ret = pm_runtime_get_sync(&client->dev);
+		if (ret < 0) {
+			pm_runtime_put_noidle(&client->dev);
+			goto unlock_and_return;
+		}
+
+		ret = gc8034_write_array(gc8034->client, mode->global_reg_list);
+		if (ret) {
+			v4l2_err(sd, "could not set init registers\n");
+			pm_runtime_put_noidle(&client->dev);
+			goto unlock_and_return;
+		}
+
+		gc8034->power_on = true;
+	} else {
+		pm_runtime_put(&client->dev);
+		gc8034->power_on = false;
+	}
+
+unlock_and_return:
+	mutex_unlock(&gc8034->mutex);
+
+	return ret;
+}
+
+/* Calculate the delay in us by clock rate and clock cycles */
+static inline u32 gc8034_cal_delay(u32 cycles)
+{
+	return DIV_ROUND_UP(cycles, GC8034_XVCLK_FREQ / 1000 / 1000);
+}
+
+static int gc8034_enable_regulators(struct gc8034 *gc8034,
+				    struct regulator_bulk_data *consumers)
+{
+	int i, j;
+	int ret = 0;
+	struct device *dev = &gc8034->client->dev;
+	int num_consumers = GC8034_NUM_SUPPLIES;
+
+	for (i = 0; i < num_consumers; i++) {
+
+		ret = regulator_enable(consumers[i].consumer);
+		if (ret < 0) {
+			dev_err(dev, "Failed to enable regulator: %s\n",
+				consumers[i].supply);
+			goto err;
+		}
+	}
+	return 0;
+err:
+	for (j = 0; j < i; j++)
+		regulator_disable(consumers[j].consumer);
+
+	return ret;
+}
+
+static int __gc8034_power_on(struct gc8034 *gc8034)
+{
+	int ret;
+	u32 delay_us;
+	struct device *dev = &gc8034->client->dev;
+
+	if (!IS_ERR(gc8034->power_gpio))
+		gpiod_set_value_cansleep(gc8034->power_gpio, 1);
+
+	usleep_range(1000, 2000);
+
+	if (!IS_ERR_OR_NULL(gc8034->pins_default)) {
+		ret = pinctrl_select_state(gc8034->pinctrl,
+					   gc8034->pins_default);
+		if (ret < 0)
+			dev_err(dev, "could not set pins\n");
+	}
+	ret = clk_set_rate(gc8034->xvclk, GC8034_XVCLK_FREQ);
+	if (ret < 0)
+		dev_warn(dev, "Failed to set xvclk rate (24MHz)\n");
+	if (clk_get_rate(gc8034->xvclk) != GC8034_XVCLK_FREQ)
+		dev_warn(dev, "xvclk mismatched, modes are based on 24MHz\n");
+
+	if (!IS_ERR(gc8034->reset_gpio))
+		gpiod_set_value_cansleep(gc8034->reset_gpio, 1);
+
+	ret = gc8034_enable_regulators(gc8034, gc8034->supplies);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enable regulators\n");
+		goto disable_clk;
+	}
+
+	usleep_range(100, 200);
+	ret = clk_prepare_enable(gc8034->xvclk);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enable xvclk\n");
+		return ret;
+	}
+
+	usleep_range(1000, 1100);
+	if (!IS_ERR(gc8034->pwdn_gpio))
+		gpiod_set_value_cansleep(gc8034->pwdn_gpio, 0);
+
+	usleep_range(500, 1000);
+	if (!IS_ERR(gc8034->reset_gpio))
+		gpiod_set_value_cansleep(gc8034->reset_gpio, 0);
+
+	/* 8192 cycles prior to first SCCB transaction */
+	delay_us = gc8034_cal_delay(8192);
+	usleep_range(delay_us, delay_us * 2);
+
+	return 0;
+
+disable_clk:
+	clk_disable_unprepare(gc8034->xvclk);
+
+	return ret;
+}
+
+static void __gc8034_power_off(struct gc8034 *gc8034)
+{
+	int ret;
+
+	if (!IS_ERR(gc8034->pwdn_gpio))
+		gpiod_set_value_cansleep(gc8034->pwdn_gpio, 1);
+
+	if (!IS_ERR(gc8034->reset_gpio))
+		gpiod_set_value_cansleep(gc8034->reset_gpio, 1);
+
+	clk_disable_unprepare(gc8034->xvclk);
+	if (!IS_ERR_OR_NULL(gc8034->pins_sleep)) {
+		ret = pinctrl_select_state(gc8034->pinctrl,
+					   gc8034->pins_sleep);
+		if (ret < 0)
+			dev_dbg(&gc8034->client->dev, "could not set pins\n");
+	}
+	if (!IS_ERR(gc8034->power_gpio))
+		gpiod_set_value_cansleep(gc8034->power_gpio, 0);
+
+	regulator_bulk_disable(GC8034_NUM_SUPPLIES, gc8034->supplies);
+}
+
+static int gc8034_runtime_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gc8034 *gc8034 = to_gc8034(sd);
+
+	return __gc8034_power_on(gc8034);
+}
+
+static int gc8034_runtime_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gc8034 *gc8034 = to_gc8034(sd);
+
+	__gc8034_power_off(gc8034);
+
+	return 0;
+}
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static int gc8034_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
+{
+	struct gc8034 *gc8034 = to_gc8034(sd);
+	struct v4l2_mbus_framefmt *try_fmt =
+			v4l2_subdev_get_try_format(sd, fh->state, 0);
+	const struct gc8034_mode *def_mode = &supported_modes[0];
+
+	mutex_lock(&gc8034->mutex);
+	/* Initialize try_fmt */
+	try_fmt->width = def_mode->width;
+	try_fmt->height = def_mode->height;
+	try_fmt->code = GC8034_MEDIA_BUS_FMT;
+	try_fmt->field = V4L2_FIELD_NONE;
+
+	mutex_unlock(&gc8034->mutex);
+	/* No crop or compose */
+
+	return 0;
+}
+#endif
+
+static int gc8034_enum_frame_interval(struct v4l2_subdev *sd,
+				struct v4l2_subdev_state *sd_state,
+				struct v4l2_subdev_frame_interval_enum *fie)
+{
+	struct gc8034 *gc8034 = to_gc8034(sd);
+
+	if (fie->index >= gc8034->cfg_num)
+		return -EINVAL;
+
+	if (fie->code != GC8034_MEDIA_BUS_FMT)
+		return -EINVAL;
+
+	fie->width = supported_modes[fie->index].width;
+	fie->height = supported_modes[fie->index].height;
+	fie->interval = supported_modes[fie->index].max_fps;
+	return 0;
+}
+
+#if 0
+static int gc8034_g_mbus_config(struct v4l2_subdev *sd, unsigned int pad_id,
+				struct v4l2_mbus_config *config)
+{
+	struct gc8034 *sensor = to_gc8034(sd);
+	struct device *dev = &sensor->client->dev;
+
+	dev_info(dev, "%s(%d) enter!\n", __func__, __LINE__);
+
+	if (2 == sensor->lane_num) {
+		config->type = V4L2_MBUS_CSI2_DPHY;
+		config->flags = V4L2_MBUS_CSI2_2_LANE |
+				V4L2_MBUS_CSI2_CHANNEL_0 |
+				V4L2_MBUS_CSI2_CONTINUOUS_CLOCK;
+	} else if (4 == sensor->lane_num) {
+		config->type = V4L2_MBUS_CSI2_DPHY;
+		config->flags = V4L2_MBUS_CSI2_4_LANE |
+				V4L2_MBUS_CSI2_CHANNEL_0 |
+				V4L2_MBUS_CSI2_CONTINUOUS_CLOCK;
+	} else {
+		dev_err(&sensor->client->dev,
+			"unsupported lane_num(%d)\n", sensor->lane_num);
+	}
+
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops gc8034_pm_ops = {
+	SET_RUNTIME_PM_OPS(gc8034_runtime_suspend,
+			gc8034_runtime_resume, NULL)
+};
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static const struct v4l2_subdev_internal_ops gc8034_internal_ops = {
+	.open = gc8034_open,
+};
+#endif
+
+static const struct v4l2_subdev_core_ops gc8034_core_ops = {
+	.s_power = gc8034_s_power,
+};
+
+static const struct v4l2_subdev_video_ops gc8034_video_ops = {
+	.s_stream = gc8034_s_stream,
+	.g_frame_interval = gc8034_g_frame_interval,
+};
+
+static const struct v4l2_subdev_pad_ops gc8034_pad_ops = {
+	.enum_mbus_code = gc8034_enum_mbus_code,
+	.enum_frame_size = gc8034_enum_frame_sizes,
+	.enum_frame_interval = gc8034_enum_frame_interval,
+	.get_fmt = gc8034_get_fmt,
+	.set_fmt = gc8034_set_fmt,
+//	.get_mbus_config = gc8034_g_mbus_config,
+};
+
+static const struct v4l2_subdev_ops gc8034_subdev_ops = {
+	.core	= &gc8034_core_ops,
+	.video	= &gc8034_video_ops,
+	.pad	= &gc8034_pad_ops,
+};
+
+static int gc8034_set_exposure_reg(struct gc8034 *gc8034, u32 exposure)
+{
+	int ret = 0;
+	u32 cal_shutter = 0;
+
+	cal_shutter = exposure >> 1;
+	cal_shutter = cal_shutter << 1;
+
+	gc8034->Dgain_ratio = 256 * exposure / cal_shutter;
+	ret = gc8034_write_reg(gc8034->client,
+		GC8034_REG_SET_PAGE, GC8034_SET_PAGE_ZERO);
+	ret |= gc8034_write_reg(gc8034->client,
+		GC8034_REG_EXPOSURE_H,
+		GC8034_FETCH_HIGH_BYTE_EXP(cal_shutter));
+	ret |= gc8034_write_reg(gc8034->client,
+		GC8034_REG_EXPOSURE_L,
+		GC8034_FETCH_LOW_BYTE_EXP(cal_shutter));
+	return ret;
+}
+
+#define MAX_AG_INDEX		9
+#define AGC_REG_NUM		14
+#define MEAG_INDEX		7
+
+u16 gain_level[MAX_AG_INDEX] = {
+		0x0040, /* 1.000*/
+		0x0058, /* 1.375*/
+		0x007d, /* 1.950*/
+		0x00ad, /* 2.700*/
+		0x00f3, /* 3.800*/
+		0x0159, /* 5.400*/
+		0x01ea, /* 7.660*/
+		0x02ac, /*10.688*/
+		0x03c2, /*15.030*/
+};
+
+u8 agc_register[MAX_AG_INDEX][AGC_REG_NUM] = {
+	/* fullsize */
+	{ 0x00, 0x55, 0x83, 0x01, 0x06, 0x18, 0x20,
+		0x16, 0x17, 0x50, 0x6c, 0x9b, 0xd8, 0x00 },
+	{ 0x00, 0x55, 0x83, 0x01, 0x06, 0x18, 0x20,
+		0x16, 0x17, 0x50, 0x6c, 0x9b, 0xd8, 0x00 },
+	{ 0x00, 0x4e, 0x84, 0x01, 0x0c, 0x2e, 0x2d,
+		0x15, 0x19, 0x47, 0x70, 0x9f, 0xd8, 0x00 },
+	{ 0x00, 0x51, 0x80, 0x01, 0x07, 0x28, 0x32,
+		0x22, 0x20, 0x49, 0x70, 0x91, 0xd9, 0x00 },
+	{ 0x00, 0x4d, 0x83, 0x01, 0x0f, 0x3b, 0x3b,
+		0x1c, 0x1f, 0x47, 0x6f, 0x9b, 0xd3, 0x00 },
+	{ 0x00, 0x50, 0x83, 0x01, 0x08, 0x35, 0x46,
+		0x1e, 0x22, 0x4c, 0x70, 0x9a, 0xd2, 0x00 },
+	{ 0x00, 0x52, 0x80, 0x01, 0x0c, 0x35, 0x3a,
+		0x2b, 0x2d, 0x4c, 0x67, 0x8d, 0xc0, 0x00 },
+	{ 0x00, 0x52, 0x80, 0x01, 0x0c, 0x35, 0x3a,
+		0x2b, 0x2d, 0x4c, 0x67, 0x8d, 0xc0, 0x00 },
+	{ 0x00, 0x52, 0x80, 0x01, 0x0c, 0x35, 0x3a,
+		0x2b, 0x2d, 0x4c, 0x67, 0x8d, 0xc0, 0x00 }
+};
+
+static int gc8034_set_gain_reg(struct gc8034 *gc8034, u32 a_gain)
+{
+	int ret = 0;
+	u32 temp_gain = 0;
+	int gain_index = 0;
+	u32 Dgain_ratio = 0;
+
+	Dgain_ratio = gc8034->Dgain_ratio;
+	for (gain_index = MEAG_INDEX - 1; gain_index >= 0; gain_index--) {
+		if (a_gain >= gain_level[gain_index]) {
+			ret = gc8034_write_reg(gc8034->client,
+				GC8034_REG_SET_PAGE, GC8034_SET_PAGE_ZERO);
+			ret |= gc8034_write_reg(gc8034->client,
+				0xb6, gain_index);
+			temp_gain = 256 * a_gain / gain_level[gain_index];
+			temp_gain = temp_gain * Dgain_ratio / 256;
+			ret |= gc8034_write_reg(gc8034->client,
+				0xb1, temp_gain >> 8);
+			ret |= gc8034_write_reg(gc8034->client,
+				0xb2, temp_gain & 0xff);
+
+			ret |= gc8034_write_reg(gc8034->client, 0xfe,
+				agc_register[gain_index][0]);
+			ret |= gc8034_write_reg(gc8034->client, 0x20,
+				agc_register[gain_index][1]);
+			ret |= gc8034_write_reg(gc8034->client, 0x33,
+				agc_register[gain_index][2]);
+			ret |= gc8034_write_reg(gc8034->client, 0xfe,
+				agc_register[gain_index][3]);
+			ret |= gc8034_write_reg(gc8034->client, 0xdf,
+				agc_register[gain_index][4]);
+			ret |= gc8034_write_reg(gc8034->client, 0xe7,
+				agc_register[gain_index][5]);
+			ret |= gc8034_write_reg(gc8034->client, 0xe8,
+				agc_register[gain_index][6]);
+			ret |= gc8034_write_reg(gc8034->client, 0xe9,
+				agc_register[gain_index][7]);
+			ret |= gc8034_write_reg(gc8034->client, 0xea,
+				agc_register[gain_index][8]);
+			ret |= gc8034_write_reg(gc8034->client, 0xeb,
+				agc_register[gain_index][9]);
+			ret |= gc8034_write_reg(gc8034->client, 0xec,
+				agc_register[gain_index][10]);
+			ret |= gc8034_write_reg(gc8034->client, 0xed,
+				agc_register[gain_index][11]);
+			ret |= gc8034_write_reg(gc8034->client, 0xee,
+				agc_register[gain_index][12]);
+			ret |= gc8034_write_reg(gc8034->client, 0xfe,
+				agc_register[gain_index][13]);
+			break;
+		}
+	}
+	return ret;
+}
+
+static const struct regval gc8034_global_regs_test_pattern[] = {
+	{0xfc, 0x00},
+	{0xf4, 0x80},
+	{0xf5, 0x19},
+	{0xf8, 0x63},
+	{0xfa, 0x45},
+	{0xfc, 0x00},
+	{0xfc, 0xfe},
+	{0xfe, 0x03},
+	{0x21, 0x05},
+	{0x22, 0x06},
+	{0x23, 0x16},
+	{0x25, 0x12},
+	{0x26, 0x07},
+	{0x29, 0x07},
+	{0x2a, 0x08},
+	{0x2b, 0x07},
+	{0xfe, 0x00},
+	{0x8c, 0x01},
+};
+
+static int gc8034_set_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct gc8034 *gc8034 = container_of(ctrl->handler,
+					struct gc8034, ctrl_handler);
+	struct i2c_client *client = gc8034->client;
+	s64 max;
+	int ret = 0;
+	s32 temp;
+
+	/* Propagate change of current control to all related controls */
+	switch (ctrl->id) {
+	case V4L2_CID_VBLANK:
+		/* Update max exposure while meeting expected vblanking */
+		max = gc8034->cur_mode->height + ctrl->val - 4;
+		__v4l2_ctrl_modify_range(gc8034->exposure,
+					 gc8034->exposure->minimum, max,
+					 gc8034->exposure->step,
+					 gc8034->exposure->default_value);
+		break;
+	}
+
+	if (!pm_runtime_get_if_in_use(&client->dev))
+		return 0;
+
+	switch (ctrl->id) {
+	case V4L2_CID_EXPOSURE:
+		/* 4 least significant bits of expsoure are fractional part */
+		dev_dbg(&client->dev, "set exposure value 0x%x\n", ctrl->val);
+		ret = gc8034_set_exposure_reg(gc8034, ctrl->val);
+		break;
+	case V4L2_CID_ANALOGUE_GAIN:
+		dev_dbg(&client->dev, "set analog gain value 0x%x\n", ctrl->val);
+		ret = gc8034_set_gain_reg(gc8034, ctrl->val);
+		break;
+	case V4L2_CID_VBLANK:
+		dev_dbg(&client->dev, "set vb value 0x%x\n", ctrl->val);
+		/* VB = VTS - 2448 -36, according android8.1 driver */
+		temp = ctrl->val + gc8034->cur_mode->height - 2448 - 36;
+		ret = gc8034_write_reg(gc8034->client,
+					GC8034_REG_SET_PAGE,
+					GC8034_SET_PAGE_ZERO);
+		ret |= gc8034_write_reg(gc8034->client,
+					GC8034_REG_VTS_H,
+					(temp >> 8) & 0xff);
+		ret |= gc8034_write_reg(gc8034->client,
+					GC8034_REG_VTS_L,
+					temp & 0xff);
+		break;
+	case V4L2_CID_TEST_PATTERN:
+		int i;
+		for (i = 0; i < ARRAY_SIZE(gc8034_global_regs_test_pattern); i++) {
+			ret = gc8034_write_reg(gc8034->client, gc8034_global_regs_test_pattern[i].addr,
+							gc8034_global_regs_test_pattern[i].val);
+		}
+		break;
+	default:
+		dev_warn(&client->dev, "%s Unhandled id:0x%x, val:0x%x\n",
+			 __func__, ctrl->id, ctrl->val);
+		break;
+	}
+
+	pm_runtime_put(&client->dev);
+
+	return ret;
+}
+
+static const struct v4l2_ctrl_ops gc8034_ctrl_ops = {
+	.s_ctrl = gc8034_set_ctrl,
+};
+
+static int gc8034_initialize_controls(struct gc8034 *gc8034)
+{
+	const struct gc8034_mode *mode;
+	struct v4l2_ctrl_handler *handler;
+	s64 exposure_max, vblank_def;
+	u32 h_blank;
+	int ret;
+
+	handler = &gc8034->ctrl_handler;
+	mode = gc8034->cur_mode;
+	ret = v4l2_ctrl_handler_init(handler, 8);
+	if (ret)
+		return ret;
+	handler->lock = &gc8034->mutex;
+
+	gc8034->link_freq = v4l2_ctrl_new_int_menu(handler, NULL,
+				V4L2_CID_LINK_FREQ,
+				ARRAY_SIZE(link_freq_menu_items) - 1, 0,
+				link_freq_menu_items);
+	v4l2_ctrl_s_ctrl(gc8034->link_freq, mode->mipi_freq_idx);
+
+	v4l2_ctrl_new_std(handler, NULL, V4L2_CID_PIXEL_RATE,
+			0, gc8034->pixel_rate, 1, gc8034->pixel_rate);
+
+	h_blank = mode->hts_def - mode->width;
+	gc8034->hblank = v4l2_ctrl_new_std(handler, NULL, V4L2_CID_HBLANK,
+				h_blank, h_blank, 1, h_blank);
+	if (gc8034->hblank)
+		gc8034->hblank->flags |= V4L2_CTRL_FLAG_READ_ONLY;
+
+	vblank_def = mode->vts_def - mode->height;
+	gc8034->vblank = v4l2_ctrl_new_std(handler, &gc8034_ctrl_ops,
+				V4L2_CID_VBLANK, vblank_def,
+				GC8034_VTS_MAX - mode->height,
+				1, vblank_def);
+
+	exposure_max = mode->vts_def - 4;
+	gc8034->exposure = v4l2_ctrl_new_std(handler, &gc8034_ctrl_ops,
+				V4L2_CID_EXPOSURE, GC8034_EXPOSURE_MIN,
+				exposure_max, GC8034_EXPOSURE_STEP,
+				mode->exp_def);
+
+	gc8034->anal_gain = v4l2_ctrl_new_std(handler, &gc8034_ctrl_ops,
+				V4L2_CID_ANALOGUE_GAIN, GC8034_GAIN_MIN,
+				GC8034_GAIN_MAX, GC8034_GAIN_STEP,
+				GC8034_GAIN_DEFAULT);
+	if (handler->error) {
+		ret = handler->error;
+		dev_err(&gc8034->client->dev,
+			"Failed to init controls(%d)\n", ret);
+		goto err_free_handler;
+	}
+
+	gc8034->subdev.ctrl_handler = handler;
+
+	return 0;
+
+err_free_handler:
+	v4l2_ctrl_handler_free(handler);
+
+	return ret;
+}
+
+static int gc8034_check_sensor_id(struct gc8034 *gc8034,
+				struct i2c_client *client)
+{
+	struct device *dev = &gc8034->client->dev;
+	u16 id = 0;
+	u8 reg_H = 0;
+	u8 reg_L = 0;
+	int ret;
+
+	ret = gc8034_read_reg(client, GC8034_REG_CHIP_ID_H, &reg_H);
+	ret |= gc8034_read_reg(client, GC8034_REG_CHIP_ID_L, &reg_L);
+	id = ((reg_H << 8) & 0xff00) | (reg_L & 0xff);
+	if (id != CHIP_ID) {
+		dev_err(dev, "Unexpected sensor id(%06x), ret(%d)\n", id, ret);
+		return -ENODEV;
+	}
+	dev_info(dev, "detected gc%04x sensor\n", id);
+	return ret;
+}
+
+static int gc8034_configure_regulators(struct gc8034 *gc8034)
+{
+	unsigned int i;
+
+	for (i = 0; i < GC8034_NUM_SUPPLIES; i++)
+		gc8034->supplies[i].supply = gc8034_supply_names[i];
+
+	return devm_regulator_bulk_get(&gc8034->client->dev,
+		GC8034_NUM_SUPPLIES,
+		gc8034->supplies);
+}
+
+static int gc8034_parse_of(struct gc8034 *gc8034)
+{
+	struct device *dev = &gc8034->client->dev;
+	struct device_node *endpoint;
+	struct fwnode_handle *fwnode;
+	int rval;
+	unsigned int fps;
+
+	endpoint = of_graph_get_next_endpoint(dev->of_node, NULL);
+	if (!endpoint) {
+		dev_err(dev, "Failed to get endpoint\n");
+		return -EINVAL;
+	}
+	fwnode = of_fwnode_handle(endpoint);
+	rval = fwnode_property_read_u32_array(fwnode, "data-lanes", NULL, 0);
+	if (rval <= 0) {
+		dev_warn(dev, " Get mipi lane num failed!\n");
+		return -1;
+	}
+
+	gc8034->lane_num = rval;
+	if (4 == gc8034->lane_num) {
+		gc8034->cur_mode = &supported_modes_4lane[0];
+		supported_modes = supported_modes_4lane;
+		gc8034->cfg_num = ARRAY_SIZE(supported_modes_4lane);
+		/* pixel rate = link frequency * 2 * lanes / BITS_PER_SAMPLE */
+		fps = DIV_ROUND_CLOSEST(gc8034->cur_mode->max_fps.denominator,
+					gc8034->cur_mode->max_fps.numerator);
+		gc8034->pixel_rate = gc8034->cur_mode->vts_def *
+				     gc8034->cur_mode->hts_def * fps;
+
+		dev_info(dev, "lane_num(%d)  pixel_rate(%u)\n",
+			 gc8034->lane_num, gc8034->pixel_rate);
+	} else if (2 == gc8034->lane_num) {
+		gc8034->cur_mode = &supported_modes_2lane[0];
+		supported_modes = supported_modes_2lane;
+		gc8034->cfg_num = ARRAY_SIZE(supported_modes_2lane);
+		/*pixel rate = link frequency * 2 * lanes / BITS_PER_SAMPLE */
+		fps = DIV_ROUND_CLOSEST(gc8034->cur_mode->max_fps.denominator,
+					gc8034->cur_mode->max_fps.numerator);
+		gc8034->pixel_rate = gc8034->cur_mode->vts_def *
+				     gc8034->cur_mode->hts_def * fps;
+		dev_info(dev, "lane_num(%d)  pixel_rate(%u)\n",
+			 gc8034->lane_num, gc8034->pixel_rate);
+	} else {
+		dev_err(dev, "unsupported lane_num(%d)\n", gc8034->lane_num);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int gc8034_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct gc8034 *gc8034;
+	struct v4l2_subdev *sd;
+	char facing[2];
+	int ret;
+
+	dev_info(dev, "driver version: %02x.%02x.%02x",
+		DRIVER_VERSION >> 16,
+		(DRIVER_VERSION & 0xff00) >> 8,
+		DRIVER_VERSION & 0x00ff);
+
+	gc8034 = devm_kzalloc(dev, sizeof(*gc8034), GFP_KERNEL);
+	if (!gc8034)
+		return -ENOMEM;
+
+	gc8034->client = client;
+
+	gc8034->xvclk = devm_clk_get(dev, "xvclk");
+	if (IS_ERR(gc8034->xvclk)) {
+		dev_err(dev, "Failed to get xvclk\n");
+		return -EINVAL;
+	}
+
+	gc8034->power_gpio = devm_gpiod_get(dev, "power", GPIOD_OUT_LOW);
+	if (IS_ERR(gc8034->power_gpio))
+		dev_warn(dev, "Failed to get power-gpios, maybe no use\n");
+	gc8034->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(gc8034->reset_gpio))
+		dev_warn(dev, "Failed to get reset-gpios\n");
+
+	gc8034->pwdn_gpio = devm_gpiod_get(dev, "pwdn", GPIOD_OUT_LOW);
+	if (IS_ERR(gc8034->pwdn_gpio))
+		dev_warn(dev, "Failed to get pwdn-gpios\n");
+
+	ret = gc8034_configure_regulators(gc8034);
+	if (ret) {
+		dev_err(dev, "Failed to get power regulators\n");
+		return ret;
+	}
+
+	ret = gc8034_parse_of(gc8034);
+	if (ret != 0)
+		return -EINVAL;
+
+	gc8034->pinctrl = devm_pinctrl_get(dev);
+	if (!IS_ERR(gc8034->pinctrl)) {
+		gc8034->pins_default =
+			pinctrl_lookup_state(gc8034->pinctrl,
+					     OF_CAMERA_PINCTRL_STATE_DEFAULT);
+		if (IS_ERR(gc8034->pins_default))
+			dev_err(dev, "could not get default pinstate\n");
+
+		gc8034->pins_sleep =
+			pinctrl_lookup_state(gc8034->pinctrl,
+					     OF_CAMERA_PINCTRL_STATE_SLEEP);
+		if (IS_ERR(gc8034->pins_sleep))
+			dev_err(dev, "could not get sleep pinstate\n");
+	}
+
+	mutex_init(&gc8034->mutex);
+
+	sd = &gc8034->subdev;
+	v4l2_i2c_subdev_init(sd, client, &gc8034_subdev_ops);
+	ret = gc8034_initialize_controls(gc8034);
+	if (ret)
+		goto err_destroy_mutex;
+
+	ret = __gc8034_power_on(gc8034);
+	if (ret)
+		goto err_free_handler;
+
+	ret = gc8034_check_sensor_id(gc8034, client);
+	if (ret)
+		goto err_power_off;
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+	sd->internal_ops = &gc8034_internal_ops;
+	sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE |
+		     V4L2_SUBDEV_FL_HAS_EVENTS;
+#endif
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	gc8034->pad.flags = MEDIA_PAD_FL_SOURCE;
+	sd->entity.function = MEDIA_ENT_F_CAM_SENSOR;
+	ret = media_entity_pads_init(&sd->entity, 1, &gc8034->pad);
+	if (ret < 0)
+		goto err_power_off;
+#endif
+
+	memset(facing, 0, sizeof(facing));
+	if (strcmp(gc8034->module_facing, "back") == 0)
+		facing[0] = 'b';
+	else
+		facing[0] = 'f';
+
+	snprintf(sd->name, sizeof(sd->name), "m%02d_%s_%s %s",
+		 gc8034->module_index, facing,
+		 GC8034_NAME, dev_name(sd->dev));
+	ret = v4l2_async_register_subdev_sensor(sd);
+	if (ret) {
+		dev_err(dev, "v4l2 async register subdev failed\n");
+		goto err_clean_entity;
+	}
+
+	pm_runtime_set_active(dev);
+	pm_runtime_enable(dev);
+	pm_runtime_idle(dev);
+
+	return 0;
+
+err_clean_entity:
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+err_power_off:
+	__gc8034_power_off(gc8034);
+err_free_handler:
+	v4l2_ctrl_handler_free(&gc8034->ctrl_handler);
+err_destroy_mutex:
+	mutex_destroy(&gc8034->mutex);
+
+	return ret;
+}
+
+static void gc8034_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gc8034 *gc8034 = to_gc8034(sd);
+
+	v4l2_async_unregister_subdev(sd);
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+	v4l2_ctrl_handler_free(&gc8034->ctrl_handler);
+	mutex_destroy(&gc8034->mutex);
+
+	pm_runtime_disable(&client->dev);
+	if (!pm_runtime_status_suspended(&client->dev))
+		__gc8034_power_off(gc8034);
+	pm_runtime_set_suspended(&client->dev);
+
+	return;
+}
+
+static const struct of_device_id gc8034_of_match[] = {
+	{ .compatible = "galaxycore,gc8034" },
+        { .compatible = "galaxycore,gc8034" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, gc8034_of_match);
+
+static const struct i2c_device_id gc8034_match_id[] = {
+	{ "galaxycore,gc8034", 0},
+	{ },
+};
+
+static struct i2c_driver gc8034_i2c_driver = {
+	.driver = {
+		.name = GC8034_NAME,
+		.pm = &gc8034_pm_ops,
+		.of_match_table = gc8034_of_match,
+	},
+	.probe		= &gc8034_probe,
+	.remove		= &gc8034_remove,
+	.id_table	= gc8034_match_id,
+};
+
+module_i2c_driver(gc8034_i2c_driver);
+
+MODULE_DESCRIPTION("GalaxyCore gc8034 sensor driver");
+MODULE_AUTHOR("99degree <https://github.com/99degree>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/i2c/ov16a1q.c b/drivers/media/i2c/ov16a1q.c
new file mode 100755
index 00000000000000..4f8095556335b4
--- /dev/null
+++ b/drivers/media/i2c/ov16a1q.c
@@ -0,0 +1,2296 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ov16a1q camera driver
+ *
+ * Copyright (C) 2023 Rockchip Electronics Co., Ltd.
+ *
+ * V0.0X01.0X00 first version.
+ *
+ */
+//#define DEBUG
+#include <linux/clk.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/regulator/consumer.h>
+#include <linux/sysfs.h>
+#include <linux/slab.h>
+#include <linux/version.h>
+#include <linux/compat.h>
+#include <media/media-entity.h>
+#include <media/v4l2-async.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-subdev.h>
+#include <linux/pinctrl/consumer.h>
+
+//#include "rk-camera-module.h"
+
+/* using for rk3588 dual isp unite */
+#define RKMOUDLE_UNITE_EXTEND_PIXEL     32
+/* using for rv1109 and rv1126 */
+#define RKMODULE_EXTEND_LINE            24
+
+#define RKMODULE_NAME_LEN               32
+#define RKMODULE_LSCDATA_LEN            289
+
+#define RKMODULE_MAX_VC_CH              4
+
+#define RKMODULE_PADF_GAINMAP_LEN       1024
+#define RKMODULE_PDAF_DCCMAP_LEN        256
+#define RKMODULE_AF_OTP_MAX_LEN         3
+
+#define RKMODULE_MAX_SENSOR_NUM         8
+
+//#define RKMODULE_CAMERA_MODULE_INDEX    "rockchip,camera-module-index"
+//#define RKMODULE_CAMERA_MODULE_FACING   "rockchip,camera-module-facing"
+//#define RKMODULE_CAMERA_MODULE_NAME     "rockchip,camera-module-name"
+//#define RKMODULE_CAMERA_LENS_NAME       "rockchip,camera-module-lens-name"
+
+#define RKMODULE_CAMERA_SYNC_MODE       "rockchip,camera-module-sync-mode"
+#define RKMODULE_INTERNAL_MASTER_MODE   "internal_master"
+#define RKMODULE_EXTERNAL_MASTER_MODE   "external_master"
+
+/*
+ * link to vicap
+ * linear mode: pad0~pad3 for id0~id3;
+ *
+ * HDR_X2: id0 fiexd to vc0 for long frame
+ *         id1 fixed to vc1 for short frame;
+ *         id2~id3 reserved, can config by PAD2~PAD3
+ *
+ * HDR_X3: id0 fiexd to vc0 for long frame
+ *         id1 fixed to vc1 for middle frame
+ *         id2 fixed to vc2 for short frame;
+ *         id3 reserved, can config by PAD3
+ *
+ * link to isp, the connection relationship is as follows
+ */
+enum rkmodule_max_pad {
+        PAD0, /* link to isp */
+        PAD1, /* link to csi wr0 | hdr x2:L x3:M */
+        PAD2, /* link to csi wr1 | hdr      x3:L */
+        PAD3, /* link to csi wr2 | hdr x2:M x3:S */
+        PAD_MAX,
+};
+
+/**
+ * NO_HDR: linear mode
+ * HDR_X2: hdr two frame or line mode
+ * HDR_X3: hdr three or line mode
+ * HDR_COMPR: linearised and compressed data for hdr
+ */
+enum rkmodule_hdr_mode {
+        NO_HDR = 0,
+        HDR_X2 = 5,
+        HDR_X3 = 6,
+        HDR_COMPR,
+};
+
+#define DRIVER_VERSION			KERNEL_VERSION(0, 0x01, 0x00)
+
+#ifndef V4L2_CID_DIGITAL_GAIN
+#define V4L2_CID_DIGITAL_GAIN		V4L2_CID_GAIN
+#endif
+
+#define OV16A1Q_LINK_FREQ_726MHZ	726000000U
+#define OV16A1Q_LINK_FREQ_378MHZ	378000000U
+
+/* pixel rate = link frequency * 2 * lanes / BITS_PER_SAMPLE */
+#define OV16A1Q_PIXEL_RATE		(OV16A1Q_LINK_FREQ_726MHZ * 2LL * 4LL / 10LL)
+#define OV16A1Q_XVCLK_FREQ		24000000
+
+#define CHIP_ID				0x561641
+#define OV16A1Q_REG_CHIP_ID		0x300a
+
+#define OV16A1Q_REG_CTRL_MODE		0x0100
+#define OV16A1Q_MODE_SW_STANDBY		0x0
+#define OV16A1Q_MODE_STREAMING		BIT(0)
+
+#define OV16A1Q_REG_EXPOSURE_H		0x3500
+#define OV16A1Q_REG_EXPOSURE_M		0x3501
+#define OV16A1Q_REG_EXPOSURE_L		0x3502
+#define	OV16A1Q_EXPOSURE_MIN		4
+#define	OV16A1Q_EXPOSURE_STEP		1
+#define OV16A1Q_VTS_MAX			0x7ff7
+
+#define OV16A1Q_REG_AGAIN_H		0x3508
+#define OV16A1Q_REG_AGAIN_L		0x3509
+#define OV16A1Q_REG_DAGAIN_H_B		0x350A
+#define OV16A1Q_REG_DAGAIN_M_B		0x350B
+#define OV16A1Q_REG_DAGAIN_L_B		0x350C
+#define OV16A1Q_GAIN_MIN		0x80
+#define OV16A1Q_GAIN_MAX		0x3df61
+#define OV16A1Q_GAIN_STEP		1
+#define OV16A1Q_GAIN_DEFAULT		0x80
+
+#define OV16A1Q_SOFTWARE_RESET_REG	0x0103
+#define OV16A1Q_REG_ISP_X_WIN		0x3810
+#define OV16A1Q_REG_ISP_Y_WIN		0x3812
+
+#define OV16A1Q_GROUP_UPDATE_ADDRESS	0x3208
+#define OV16A1Q_GROUP_UPDATE_START_DATA	0x00
+#define OV16A1Q_GROUP_UPDATE_END_DATA	0x10
+#define OV16A1Q_GROUP_UPDATE_LAUNCH	0xA0
+
+#define OV16A1Q_REG_TEST_PATTERN	0x5081
+#define	OV16A1Q_TEST_PATTERN_ENABLE	0x01
+#define	OV16A1Q_TEST_PATTERN_DISABLE	0x0
+
+#define OV16A1Q_REG_VTS_H		0x380e
+#define OV16A1Q_REG_VTS_L		0x380f
+
+#define OV16A1Q_FLIP_REG		0x3820
+#define OV16A1Q_MIRROR_REG		0x3821
+#define MIRROR_BIT_MASK			BIT(2)
+#define FLIP_BIT_MASK			BIT(2)
+
+#define OV16A1Q_FETCH_EXP_H(VAL)	(((VAL) >> 16) & 0x7F)
+#define OV16A1Q_FETCH_EXP_M(VAL)	(((VAL) >> 8) & 0xFF)
+#define OV16A1Q_FETCH_EXP_L(VAL)	((VAL) & 0xFF)
+
+#define OV16A1Q_FETCH_AGAIN_H(VAL)	(((VAL) >> 8) & 0x7F)
+#define OV16A1Q_FETCH_AGAIN_L(VAL)	((VAL) & 0xFE)
+
+#define OV16A1Q_FETCH_DGAIN_H(VAL)	(((VAL) >> 16) & 0x0F)
+#define OV16A1Q_FETCH_DGAIN_M(VAL)	(((VAL) >> 8) & 0xFF)
+#define OV16A1Q_FETCH_DGAIN_L(VAL)	((VAL) & 0xC0)
+
+#define OV16A1Q_FETCH_VTS_H(VAL)	(((VAL) >> 8) & 0x7F)
+#define OV16A1Q_FETCH_VTS_L(VAL)	((VAL) & 0xFF)
+
+#define REG_NULL			0xFFFF
+
+#define OV16A1Q_REG_VALUE_08BIT		1
+#define OV16A1Q_REG_VALUE_16BIT		2
+#define OV16A1Q_REG_VALUE_24BIT		3
+
+#define OV16A1Q_LANES			4
+#define OV16A1Q_BITS_PER_SAMPLE		10
+
+#define OF_CAMERA_PINCTRL_STATE_DEFAULT	"rockchip,camera_default"
+#define OF_CAMERA_PINCTRL_STATE_SLEEP	"rockchip,camera_sleep"
+#define OF_CAMERA_HDR_MODE		"rockchip,camera-hdr-mode"
+
+#define OV16A1Q_NAME			"ov16a1q"
+#define OV16A1Q_MEDIA_BUS_FMT		MEDIA_BUS_FMT_SBGGR10_1X10
+
+static const char * const ov16a1q_supply_names[] = {
+#if 0
+	"avdd",		/* Analog power */
+	"dovdd",	/* Digital I/O power */
+	"dvdd",		/* Digital core power */
+#endif
+"cam_vio",
+"cam_vana",
+"cam_vdig",
+"cam_v_custom1",
+"cam_v_custom2",
+"cam_clk",
+"cam_avdd",
+};
+
+//#define OV16A1Q_NUM_SUPPLIES ARRAY_SIZE(ov16a1q_supply_names)
+
+struct regval {
+	u16 addr;
+	u8 val;
+};
+
+struct ov16a1q_mode {
+	u32 width;
+	u32 height;
+	struct v4l2_fract max_fps;
+	u32 hts_def;
+	u32 vts_def;
+	u32 exp_def;
+	u32 link_freq_idx;
+	u32 bpp;
+	const struct regval *reg_list;
+	u32 hdr_mode;
+	u32 vc[PAD_MAX];
+};
+
+struct ov16a1q {
+	struct i2c_client	*client;
+	struct clk		*xvclk;
+	struct gpio_desc	*power_gpio;
+	struct gpio_desc	*reset_gpio;
+	struct gpio_desc	*pwdn_gpio;
+	struct regulator_bulk_data supplies[ARRAY_SIZE(ov16a1q_supply_names)];
+
+	struct pinctrl		*pinctrl;
+	struct pinctrl_state	*pins_default;
+	struct pinctrl_state	*pins_sleep;
+
+	struct v4l2_subdev	subdev;
+	struct media_pad	pad;
+	struct v4l2_ctrl_handler ctrl_handler;
+	struct v4l2_ctrl	*exposure;
+	struct v4l2_ctrl	*anal_gain;
+	struct v4l2_ctrl	*digi_gain;
+	struct v4l2_ctrl	*hblank;
+	struct v4l2_ctrl	*vblank;
+	struct v4l2_ctrl	*pixel_rate;
+	struct v4l2_ctrl	*link_freq;
+	struct v4l2_ctrl	*test_pattern;
+	struct v4l2_ctrl	*h_flip;
+	struct v4l2_ctrl	*v_flip;
+	struct mutex		mutex;
+	bool			streaming;
+	bool			power_on;
+	const struct ov16a1q_mode *cur_mode;
+	u32			cfg_num;
+	u32			module_index;
+	const char		*module_facing;
+	const char		*module_name;
+	const char		*len_name;
+};
+
+#define to_ov16a1q(sd) container_of(sd, struct ov16a1q, subdev)
+
+/*
+ * Xclk 24Mhz
+ */
+static const struct regval ov16a1q_global_regs[] = {
+	{0x0103, 0x01},
+	{0x0102, 0x00},
+	{0x0301, 0x48},
+	{0x0302, 0x31},
+	{0x0303, 0x04},
+	{0x0305, 0xc2},
+	{0x0306, 0x00},
+	{0x0320, 0x02},
+	{0x0323, 0x04},
+	{0x0326, 0xd8},
+	{0x0327, 0x0b},
+	{0x0329, 0x01},
+	{0x0343, 0x04},
+	{0x0344, 0x01},
+	{0x0345, 0x2c},
+	{0x0346, 0xc0},
+	{0x034a, 0x07},
+	{0x300e, 0x22},
+	{0x3012, 0x41},
+	{0x3016, 0xd2},
+	{0x3018, 0x70},
+	{0x301e, 0x98},
+	{0x3025, 0x03},
+	{0x3026, 0x10},
+	{0x3027, 0x08},
+	{0x3102, 0x00},
+	{0x3400, 0x04},
+	{0x3406, 0x04},
+	{0x3408, 0x04},
+	{0x3421, 0x09},
+	{0x3422, 0x20},
+	{0x3423, 0x15},
+	{0x3424, 0x40},
+	{0x3425, 0x14},
+	{0x3426, 0x04},
+	{0x3504, 0x08},
+	{0x3508, 0x01},
+	{0x3509, 0x00},
+	{0x350a, 0x01},
+	{0x350b, 0x00},
+	{0x350c, 0x00},
+	{0x3548, 0x01},
+	{0x3549, 0x00},
+	{0x354a, 0x01},
+	{0x354b, 0x00},
+	{0x354c, 0x00},
+	{0x3600, 0xff},
+	{0x3602, 0x42},
+	{0x3603, 0x7b},
+	{0x3608, 0x9b},
+	{0x360a, 0x69},
+	{0x360b, 0x53},
+	{0x3618, 0xc0},
+	{0x361a, 0x8b},
+	{0x361d, 0x20},
+	{0x361e, 0x30},
+	{0x361f, 0x01},
+	{0x3620, 0x89},
+	{0x3624, 0x8f},
+	{0x3629, 0x09},
+	{0x362e, 0x50},
+	{0x3631, 0xe2},
+	{0x3632, 0xe2},
+	{0x3634, 0x10},
+	{0x3635, 0x10},
+	{0x3636, 0x10},
+	{0x3639, 0xa6},
+	{0x363a, 0xaa},
+	{0x363b, 0x0c},
+	{0x363c, 0x16},
+	{0x363d, 0x29},
+	{0x363e, 0x4f},
+	{0x3642, 0xa8},
+	{0x3652, 0x00},
+	{0x3653, 0x00},
+	{0x3654, 0x8a},
+	{0x3656, 0x0c},
+	{0x3657, 0x8e},
+	{0x3660, 0x80},
+	{0x3663, 0x00},
+	{0x3664, 0x00},
+	{0x3668, 0x05},
+	{0x3669, 0x05},
+	{0x370d, 0x10},
+	{0x370e, 0x05},
+	{0x370f, 0x10},
+	{0x3711, 0x01},
+	{0x3712, 0x09},
+	{0x3713, 0x40},
+	{0x3714, 0xe4},
+	{0x3716, 0x04},
+	{0x3717, 0x01},
+	{0x3718, 0x02},
+	{0x3719, 0x01},
+	{0x371a, 0x02},
+	{0x371b, 0x02},
+	{0x371c, 0x01},
+	{0x371d, 0x02},
+	{0x371e, 0x12},
+	{0x371f, 0x02},
+	{0x3720, 0x14},
+	{0x3721, 0x12},
+	{0x3722, 0x44},
+	{0x3723, 0x60},
+	{0x372f, 0x34},
+	{0x3726, 0x21},
+	{0x37d0, 0x02},
+	{0x37d1, 0x10},
+	{0x37db, 0x08},
+	{0x3808, 0x12},
+	{0x3809, 0x30},
+	{0x380a, 0x0d},
+	{0x380b, 0xa8},
+	{0x380c, 0x03},
+	{0x380d, 0x52},
+	{0x380e, 0x0f},
+	{0x380f, 0x51},
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x3820, 0x00},
+	{0x3821, 0x06},
+	{0x3822, 0x00},
+	{0x3823, 0x04},
+	{0x3837, 0x10},
+	{0x383c, 0x34},
+	{0x383d, 0xff},
+	{0x383e, 0x0d},
+	{0x383f, 0x22},
+	{0x3857, 0x00},
+	{0x388f, 0x00},
+	{0x3890, 0x00},
+	{0x3891, 0x00},
+	{0x3d81, 0x10},
+	{0x3d83, 0x0c},
+	{0x3d84, 0x00},
+	{0x3d85, 0x1b},
+	{0x3d88, 0x00},
+	{0x3d89, 0x00},
+	{0x3d8a, 0x00},
+	{0x3d8b, 0x01},
+	{0x3d8c, 0x77},
+	{0x3d8d, 0xa0},
+	{0x3f00, 0x02},
+	{0x3f0c, 0x07},
+	{0x3f0d, 0x2f},
+	{0x4012, 0x0d},
+	{0x4015, 0x04},
+	{0x4016, 0x1b},
+	{0x4017, 0x04},
+	{0x4018, 0x0b},
+	{0x401b, 0x1f},
+	{0x401e, 0x01},
+	{0x401f, 0x38},
+	{0x4500, 0x20},
+	{0x4501, 0x6a},
+	{0x4502, 0xb4},
+	{0x4586, 0x00},
+	{0x4588, 0x02},
+	{0x4640, 0x01},
+	{0x4641, 0x04},
+	{0x4643, 0x00},
+	{0x4645, 0x03},
+	{0x4806, 0x40},
+	{0x480e, 0x00},
+	{0x4815, 0x2b},
+	{0x481b, 0x3c},
+	{0x4833, 0x18},
+	{0x4837, 0x08},
+	{0x484b, 0x07},
+	{0x4850, 0x41},
+	{0x4860, 0x00},
+	{0x4861, 0xec},
+	{0x4864, 0x00},
+	{0x4883, 0x00},
+	{0x4888, 0x10},
+	{0x4a00, 0x10},
+	{0x4e00, 0x00},
+	{0x4e01, 0x04},
+	{0x4e02, 0x01},
+	{0x4e03, 0x00},
+	{0x4e04, 0x08},
+	{0x4e05, 0x04},
+	{0x4e06, 0x00},
+	{0x4e07, 0x13},
+	{0x4e08, 0x01},
+	{0x4e09, 0x00},
+	{0x4e0a, 0x15},
+	{0x4e0b, 0x0e},
+	{0x4e0c, 0x00},
+	{0x4e0d, 0x17},
+	{0x4e0e, 0x07},
+	{0x4e0f, 0x00},
+	{0x4e10, 0x19},
+	{0x4e11, 0x06},
+	{0x4e12, 0x00},
+	{0x4e13, 0x1b},
+	{0x4e14, 0x08},
+	{0x4e15, 0x00},
+	{0x4e16, 0x1f},
+	{0x4e17, 0x08},
+	{0x4e18, 0x00},
+	{0x4e19, 0x21},
+	{0x4e1a, 0x0e},
+	{0x4e1b, 0x00},
+	{0x4e1c, 0x2d},
+	{0x4e1d, 0x30},
+	{0x4e1e, 0x00},
+	{0x4e1f, 0x6a},
+	{0x4e20, 0x05},
+	{0x4e21, 0x00},
+	{0x4e22, 0x6c},
+	{0x4e23, 0x05},
+	{0x4e24, 0x00},
+	{0x4e25, 0x6e},
+	{0x4e26, 0x39},
+	{0x4e27, 0x00},
+	{0x4e28, 0x7a},
+	{0x4e29, 0x6d},
+	{0x4e2a, 0x00},
+	{0x4e2b, 0x00},
+	{0x4e2c, 0x00},
+	{0x4e2d, 0x00},
+	{0x4e2e, 0x00},
+	{0x4e2f, 0x00},
+	{0x4e30, 0x00},
+	{0x4e31, 0x00},
+	{0x4e32, 0x00},
+	{0x4e33, 0x00},
+	{0x4e34, 0x00},
+	{0x4e35, 0x00},
+	{0x4e36, 0x00},
+	{0x4e37, 0x00},
+	{0x4e38, 0x00},
+	{0x4e39, 0x00},
+	{0x4e3a, 0x00},
+	{0x4e3b, 0x00},
+	{0x4e3c, 0x00},
+	{0x4e3d, 0x00},
+	{0x4e3e, 0x00},
+	{0x4e3f, 0x00},
+	{0x4e40, 0x00},
+	{0x4e41, 0x00},
+	{0x4e42, 0x00},
+	{0x4e43, 0x00},
+	{0x4e44, 0x00},
+	{0x4e45, 0x00},
+	{0x4e46, 0x00},
+	{0x4e47, 0x00},
+	{0x4e48, 0x00},
+	{0x4e49, 0x00},
+	{0x4e4a, 0x00},
+	{0x4e4b, 0x00},
+	{0x4e4c, 0x00},
+	{0x4e4d, 0x00},
+	{0x4e4e, 0x00},
+	{0x4e4f, 0x00},
+	{0x4e50, 0x00},
+	{0x4e51, 0x00},
+	{0x4e52, 0x00},
+	{0x4e53, 0x00},
+	{0x4e54, 0x00},
+	{0x4e55, 0x00},
+	{0x4e56, 0x00},
+	{0x4e57, 0x00},
+	{0x4e58, 0x00},
+	{0x4e59, 0x00},
+	{0x4e5a, 0x00},
+	{0x4e5b, 0x00},
+	{0x4e5c, 0x00},
+	{0x4e5d, 0x00},
+	{0x4e5e, 0x00},
+	{0x4e5f, 0x00},
+	{0x4e60, 0x00},
+	{0x4e61, 0x00},
+	{0x4e62, 0x00},
+	{0x4e63, 0x00},
+	{0x4e64, 0x00},
+	{0x4e65, 0x00},
+	{0x4e66, 0x00},
+	{0x4e67, 0x00},
+	{0x4e68, 0x00},
+	{0x4e69, 0x00},
+	{0x4e6a, 0x00},
+	{0x4e6b, 0x00},
+	{0x4e6c, 0x00},
+	{0x4e6d, 0x00},
+	{0x4e6e, 0x00},
+	{0x4e6f, 0x00},
+	{0x4e70, 0x00},
+	{0x4e71, 0x00},
+	{0x4e72, 0x00},
+	{0x4e73, 0x00},
+	{0x4e74, 0x00},
+	{0x4e75, 0x00},
+	{0x4e76, 0x00},
+	{0x4e77, 0x00},
+	{0x4e78, 0x1c},
+	{0x4e79, 0x1e},
+	{0x4e7a, 0x00},
+	{0x4e7b, 0x00},
+	{0x4e7c, 0x2c},
+	{0x4e7d, 0x2f},
+	{0x4e7e, 0x79},
+	{0x4e7f, 0x7b},
+	{0x4e80, 0x0a},
+	{0x4e81, 0x31},
+	{0x4e82, 0x66},
+	{0x4e83, 0x81},
+	{0x4e84, 0x03},
+	{0x4e85, 0x40},
+	{0x4e86, 0x02},
+	{0x4e87, 0x09},
+	{0x4e88, 0x43},
+	{0x4e89, 0x53},
+	{0x4e8a, 0x32},
+	{0x4e8b, 0x67},
+	{0x4e8c, 0x05},
+	{0x4e8d, 0x83},
+	{0x4e8e, 0x00},
+	{0x4e8f, 0x00},
+	{0x4e90, 0x00},
+	{0x4e91, 0x00},
+	{0x4e92, 0x00},
+	{0x4e93, 0x00},
+	{0x4e94, 0x00},
+	{0x4e95, 0x00},
+	{0x4e96, 0x00},
+	{0x4e97, 0x00},
+	{0x4e98, 0x00},
+	{0x4e99, 0x00},
+	{0x4e9a, 0x00},
+	{0x4e9b, 0x00},
+	{0x4e9c, 0x00},
+	{0x4e9d, 0x00},
+	{0x4e9e, 0x00},
+	{0x4e9f, 0x00},
+	{0x4ea0, 0x00},
+	{0x4ea1, 0x00},
+	{0x4ea2, 0x00},
+	{0x4ea3, 0x00},
+	{0x4ea4, 0x00},
+	{0x4ea5, 0x00},
+	{0x4ea6, 0x1e},
+	{0x4ea7, 0x20},
+	{0x4ea8, 0x32},
+	{0x4ea9, 0x6d},
+	{0x4eaa, 0x18},
+	{0x4eab, 0x7f},
+	{0x4eac, 0x00},
+	{0x4ead, 0x00},
+	{0x4eae, 0x7c},
+	{0x4eaf, 0x07},
+	{0x4eb0, 0x7c},
+	{0x4eb1, 0x07},
+	{0x4eb2, 0x07},
+	{0x4eb3, 0x1c},
+	{0x4eb4, 0x07},
+	{0x4eb5, 0x1c},
+	{0x4eb6, 0x07},
+	{0x4eb7, 0x1c},
+	{0x4eb8, 0x07},
+	{0x4eb9, 0x1c},
+	{0x4eba, 0x07},
+	{0x4ebb, 0x14},
+	{0x4ebc, 0x07},
+	{0x4ebd, 0x1c},
+	{0x4ebe, 0x07},
+	{0x4ebf, 0x1c},
+	{0x4ec0, 0x07},
+	{0x4ec1, 0x1c},
+	{0x4ec2, 0x07},
+	{0x4ec3, 0x1c},
+	{0x4ec4, 0x2c},
+	{0x4ec5, 0x2f},
+	{0x4ec6, 0x79},
+	{0x4ec7, 0x7b},
+	{0x4ec8, 0x7c},
+	{0x4ec9, 0x07},
+	{0x4eca, 0x7c},
+	{0x4ecb, 0x07},
+	{0x4ecc, 0x00},
+	{0x4ecd, 0x00},
+	{0x4ece, 0x07},
+	{0x4ecf, 0x31},
+	{0x4ed0, 0x69},
+	{0x4ed1, 0x7f},
+	{0x4ed2, 0x67},
+	{0x4ed3, 0x00},
+	{0x4ed4, 0x00},
+	{0x4ed5, 0x00},
+	{0x4ed6, 0x7c},
+	{0x4ed7, 0x07},
+	{0x4ed8, 0x7c},
+	{0x4ed9, 0x07},
+	{0x4eda, 0x33},
+	{0x4edb, 0x7f},
+	{0x4edc, 0x00},
+	{0x4edd, 0x16},
+	{0x4ede, 0x00},
+	{0x4edf, 0x00},
+	{0x4ee0, 0x32},
+	{0x4ee1, 0x70},
+	{0x4ee2, 0x01},
+	{0x4ee3, 0x30},
+	{0x4ee4, 0x22},
+	{0x4ee5, 0x28},
+	{0x4ee6, 0x6f},
+	{0x4ee7, 0x75},
+	{0x4ee8, 0x00},
+	{0x4ee9, 0x00},
+	{0x4eea, 0x30},
+	{0x4eeb, 0x7f},
+	{0x4eec, 0x00},
+	{0x4eed, 0x00},
+	{0x4eee, 0x00},
+	{0x4eef, 0x00},
+	{0x4ef0, 0x69},
+	{0x4ef1, 0x7f},
+	{0x4ef2, 0x07},
+	{0x4ef3, 0x30},
+	{0x4ef4, 0x32},
+	{0x4ef5, 0x09},
+	{0x4ef6, 0x7d},
+	{0x4ef7, 0x65},
+	{0x4ef8, 0x00},
+	{0x4ef9, 0x00},
+	{0x4efa, 0x00},
+	{0x4efb, 0x00},
+	{0x4efc, 0x7f},
+	{0x4efd, 0x09},
+	{0x4efe, 0x7f},
+	{0x4eff, 0x09},
+	{0x4f00, 0x1e},
+	{0x4f01, 0x7c},
+	{0x4f02, 0x7f},
+	{0x4f03, 0x09},
+	{0x4f04, 0x7f},
+	{0x4f05, 0x0b},
+	{0x4f06, 0x7c},
+	{0x4f07, 0x02},
+	{0x4f08, 0x7c},
+	{0x4f09, 0x02},
+	{0x4f0a, 0x32},
+	{0x4f0b, 0x64},
+	{0x4f0c, 0x32},
+	{0x4f0d, 0x64},
+	{0x4f0e, 0x32},
+	{0x4f0f, 0x64},
+	{0x4f10, 0x32},
+	{0x4f11, 0x64},
+	{0x4f12, 0x31},
+	{0x4f13, 0x4f},
+	{0x4f14, 0x83},
+	{0x4f15, 0x84},
+	{0x4f16, 0x63},
+	{0x4f17, 0x64},
+	{0x4f18, 0x83},
+	{0x4f19, 0x84},
+	{0x4f1a, 0x31},
+	{0x4f1b, 0x32},
+	{0x4f1c, 0x7b},
+	{0x4f1d, 0x7c},
+	{0x4f1e, 0x2f},
+	{0x4f1f, 0x30},
+	{0x4f20, 0x30},
+	{0x4f21, 0x69},
+	{0x4d06, 0x08},
+	{0x5000, 0x01},
+	{0x5001, 0x40},
+	{0x5002, 0x53},
+	{0x5003, 0x42},
+	{0x5004, 0x08},
+	{0x5005, 0x00},
+	{0x5012, 0x60},
+	{0x5038, 0x00},
+	{0x5081, 0x00},
+	{0x5180, 0x00},
+	{0x5181, 0x10},
+	{0x5182, 0x07},
+	{0x5183, 0x8f},
+	{0x5184, 0x03},
+	{0x5208, 0xC2},
+	{0x5820, 0xc5},
+	{0x5854, 0x00},
+	{0x58cb, 0x03},
+	{0x5bd0, 0x15},
+	{0x5bd1, 0x02},
+	{0x5c0e, 0x11},
+	{0x5c11, 0x00},
+	{0x5c16, 0x02},
+	{0x5c17, 0x01},
+	{0x5c1a, 0x04},
+	{0x5c1b, 0x03},
+	{0x5c21, 0x10},
+	{0x5c22, 0x10},
+	{0x5c23, 0x04},
+	{0x5c24, 0x0c},
+	{0x5c25, 0x04},
+	{0x5c26, 0x0c},
+	{0x5c27, 0x04},
+	{0x5c28, 0x0c},
+	{0x5c29, 0x04},
+	{0x5c2a, 0x0c},
+	{0x5c2b, 0x01},
+	{0x5c2c, 0x01},
+	{0x5c2e, 0x08},
+	{0x5c30, 0x04},
+	{0x5c35, 0x03},
+	{0x5c36, 0x03},
+	{0x5c37, 0x03},
+	{0x5c38, 0x03},
+	{0x5d00, 0xff},
+	{0x5d01, 0x0f},
+	{0x5d02, 0x80},
+	{0x5d03, 0x44},
+	{0x5d05, 0xfc},
+	{0x5d06, 0x0b},
+	{0x5d08, 0x10},
+	{0x5d09, 0x10},
+	{0x5d0a, 0x04},
+	{0x5d0b, 0x0c},
+	{0x5d0c, 0x04},
+	{0x5d0d, 0x0c},
+	{0x5d0e, 0x04},
+	{0x5d0f, 0x0c},
+	{0x5d10, 0x04},
+	{0x5d11, 0x0c},
+	{0x5d12, 0x01},
+	{0x5d13, 0x01},
+	{0x5d15, 0x10},
+	{0x5d16, 0x10},
+	{0x5d17, 0x10},
+	{0x5d18, 0x10},
+	{0x5d1a, 0x10},
+	{0x5d1b, 0x10},
+	{0x5d1c, 0x10},
+	{0x5d1d, 0x10},
+	{0x5d1e, 0x04},
+	{0x5d1f, 0x04},
+	{0x5d20, 0x04},
+	{0x5d27, 0x64},
+	{0x5d28, 0xc8},
+	{0x5d29, 0x96},
+	{0x5d2a, 0xff},
+	{0x5d2b, 0xc8},
+	{0x5d2c, 0xff},
+	{0x5d2d, 0x04},
+	{0x5d34, 0x00},
+	{0x5d35, 0x08},
+	{0x5d36, 0x00},
+	{0x5d37, 0x04},
+	{0x5d4a, 0x00},
+	{0x5d4c, 0x00},
+	{REG_NULL, 0x00},
+};
+
+/*
+ * Xclk 24Mhz
+ * max_framerate 30fps
+ */
+static const struct regval ov16a1q_4656x3496_30fps_regs[] = {
+	{0x0100, 0x00},
+	{0x0305, 0x6b},
+	{0x0307, 0x00},
+	{0x4837, 0x0b},
+	{0x0329, 0x01},
+	{0x0344, 0x01},
+	{0x0345, 0x2c},
+	{0x034a, 0x07},
+	{0x3608, 0x9b},
+	{0x360a, 0x69},
+	{0x361a, 0x8b},
+	{0x361e, 0x30},
+	{0x3639, 0xa6},
+	{0x363a, 0xaa},
+	{0x3642, 0xa8},
+	{0x3654, 0x8a},
+	{0x3656, 0x0c},
+	{0x3663, 0x00},
+	{0x370e, 0x05},
+	{0x3712, 0x09},
+	{0x3713, 0x40},
+	{0x3714, 0xe4},
+	{0x37d0, 0x02},
+	{0x37d1, 0x10},
+	{0x37db, 0x08},
+	{0x3808, 0x12},
+	{0x3809, 0x30},
+	{0x380a, 0x0d},
+	{0x380b, 0xa8},
+	{0x380c, 0x03},
+	{0x380d, 0x52},
+	{0x380e, 0x0f},
+	{0x380f, 0x50},
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x3820, 0x00},
+	{0x3821, 0x06},
+	{0x3822, 0x00},
+	{0x383c, 0x34},
+	{0x383f, 0x22},
+	{0x4015, 0x04},
+	{0x4016, 0x1b},
+	{0x4017, 0x04},
+	{0x4018, 0x0b},
+	{0x401b, 0x1f},
+	{0x401f, 0x38},
+	{0x4500, 0x20},
+	{0x4501, 0x6a},
+	{0x4502, 0xb4},
+	{0x4e05, 0x04},
+	{0x4e11, 0x06},
+	{0x4e1d, 0x30},
+	{0x4e26, 0x39},
+	{0x4e29, 0x6d},
+	{0x5000, 0x01},
+	{0x5001, 0x40},
+	{0x5003, 0x42},
+	{0x5820, 0xc5},
+	{0x5854, 0x00},
+	{0x5bd0, 0x15},
+	{0x5c0e, 0x11},
+	{0x5c11, 0x00},
+	{0x5c16, 0x02},
+	{0x5c17, 0x01},
+	{0x5c1a, 0x04},
+	{0x5c1b, 0x03},
+	{0x5c21, 0x10},
+	{0x5c22, 0x10},
+	{0x5c23, 0x04},
+	{0x5c24, 0x0c},
+	{0x5c25, 0x04},
+	{0x5c26, 0x0c},
+	{0x5c27, 0x04},
+	{0x5c28, 0x0c},
+	{0x5c29, 0x04},
+	{0x5c2a, 0x0c},
+	{0x5c2b, 0x01},
+	{0x5c2c, 0x01},
+	{0x5d01, 0x0f},
+	{0x5d08, 0x10},
+	{0x5d09, 0x10},
+	{0x5d0a, 0x04},
+	{0x5d0b, 0x0c},
+	{0x5d0c, 0x04},
+	{0x5d0d, 0x0c},
+	{0x5d0e, 0x04},
+	{0x5d0f, 0x0c},
+	{0x5d10, 0x04},
+	{0x5d11, 0x0c},
+	{0x5d12, 0x01},
+	{0x5d13, 0x01},
+	{0x3500, 0x00},
+	{0x3501, 0x0f},
+	{0x3502, 0x48},
+	{0x3508, 0x01},
+	{0x3509, 0x00},
+	{0x0100, 0x01},
+	{REG_NULL, 0x00},
+};
+
+static const struct regval ov16a1q_2328x1748_30fps_regs[] = {
+	{0x0100, 0x00},
+	{0x0305, 0x7a},
+	{0x0307, 0x01},
+	{0x4837, 0x15},
+	{0x0329, 0x01},
+	{0x0344, 0x01},
+	{0x0345, 0x2c},
+	{0x034a, 0x07},
+	{0x3608, 0x75},
+	{0x360a, 0x69},
+	{0x361a, 0x8b},
+	{0x361e, 0x30},
+	{0x3639, 0x93},
+	{0x363a, 0x99},
+	{0x3642, 0x98},
+	{0x3654, 0x8a},
+	{0x3656, 0x0c},
+	{0x3663, 0x00},
+	{0x370e, 0x05},
+	{0x3712, 0x08},
+	{0x3713, 0xc0},
+	{0x3714, 0xe2},
+	{0x37d0, 0x02},
+	{0x37d1, 0x10},
+	{0x37db, 0x04},
+	{0x3808, 0x09},
+	{0x3809, 0x18},
+	{0x380a, 0x06},
+	{0x380b, 0xd4},
+	{0x380c, 0x03},
+	{0x380d, 0x52},
+	{0x380e, 0x0f},
+	{0x380f, 0x50},
+	{0x3814, 0x22},
+	{0x3815, 0x22},
+	{0x3820, 0x01},
+	{0x3821, 0x0c},
+	{0x3822, 0x00},
+	{0x383c, 0x22},
+	{0x383f, 0x33},
+	{0x4015, 0x02},
+	{0x4016, 0x0d},
+	{0x4017, 0x00},
+	{0x4018, 0x07},
+	{0x401b, 0x1f},
+	{0x401f, 0xfe},
+	{0x4500, 0x20},
+	{0x4501, 0x6a},
+	{0x4502, 0xe4},
+	{0x4e05, 0x04},
+	{0x4e11, 0x06},
+	{0x4e1d, 0x25},
+	{0x4e26, 0x44},
+	{0x4e29, 0x6d},
+	{0x5000, 0x09},
+	{0x5001, 0x42},
+	{0x5003, 0x42},
+	{0x5820, 0xc5},
+	{0x5854, 0x00},
+	{0x5bd0, 0x19},
+	{0x5c0e, 0x13},
+	{0x5c11, 0x00},
+	{0x5c16, 0x01},
+	{0x5c17, 0x00},
+	{0x5c1a, 0x00},
+	{0x5c1b, 0x00},
+	{0x5c21, 0x08},
+	{0x5c22, 0x08},
+	{0x5c23, 0x02},
+	{0x5c24, 0x06},
+	{0x5c25, 0x02},
+	{0x5c26, 0x06},
+	{0x5c27, 0x02},
+	{0x5c28, 0x06},
+	{0x5c29, 0x02},
+	{0x5c2a, 0x06},
+	{0x5c2b, 0x00},
+	{0x5c2c, 0x00},
+	{0x5d01, 0x07},
+	{0x5d08, 0x08},
+	{0x5d09, 0x08},
+	{0x5d0a, 0x02},
+	{0x5d0b, 0x06},
+	{0x5d0c, 0x02},
+	{0x5d0d, 0x06},
+	{0x5d0e, 0x02},
+	{0x5d0f, 0x06},
+	{0x5d10, 0x02},
+	{0x5d11, 0x06},
+	{0x5d12, 0x00},
+	{0x5d13, 0x00},
+	{0x3500, 0x00},
+	{0x3501, 0x0f},
+	{0x3502, 0x48},
+	{0x3508, 0x01},
+	{0x3509, 0x00},
+	{0x0100, 0x01},
+	//{0x0100, 0x01},
+	{REG_NULL, 0x00},
+};
+
+static const struct ov16a1q_mode supported_modes[] = {
+	{
+		.width = 4656,
+		.height = 3496,
+		.max_fps = {
+			.numerator = 10000,
+			.denominator = 300000,
+		},
+		.exp_def = 0x0f4a,
+		.hts_def = 0x0352 * 6,
+		.vts_def = 0x0f51,
+		.bpp = 10,
+		.reg_list = ov16a1q_4656x3496_30fps_regs,
+		.link_freq_idx = 0,
+		.hdr_mode = NO_HDR,
+		.vc[PAD0] = 0,
+	},
+#if 0
+	{
+		.width = 2328,
+		.height = 1748,
+		.max_fps = {
+			.numerator = 10000,
+			.denominator = 300000,
+		},
+		.exp_def = 0x0f4a,
+		.hts_def = 0x0352 * 3,
+		.vts_def = 0x0f50,
+		.bpp = 10,
+		.reg_list = ov16a1q_2328x1748_30fps_regs,
+		.link_freq_idx = 1,
+		.hdr_mode = NO_HDR,
+		.vc[PAD0] = 0,
+	},
+#endif
+};
+
+static const s64 link_freq_items[] = {
+	OV16A1Q_LINK_FREQ_726MHZ,
+//	OV16A1Q_LINK_FREQ_378MHZ,
+};
+
+static const char * const ov16a1q_test_pattern_menu[] = {
+	"Disabled",
+	"Vertical Color Bar Type 1",
+	"Vertical Color Bar Type 2",
+	"Vertical Color Bar Type 3",
+	"Vertical Color Bar Type 4"
+};
+
+/* Write registers up to 4 at a time */
+static int ov16a1q_write_reg(struct i2c_client *client, u16 reg,
+			     u32 len, u32 val)
+{
+	u32 buf_i, val_i;
+	u8 buf[6];
+	u8 *val_p;
+	__be32 val_be;
+
+	dev_dbg(&client->dev, "write reg(0x%x val:0x%x)!\n", reg, val);
+
+	if (len > 4)
+		return -EINVAL;
+
+	buf[0] = reg >> 8;
+	buf[1] = reg & 0xff;
+
+	val_be = cpu_to_be32(val);
+	val_p = (u8 *)&val_be;
+	buf_i = 2;
+	val_i = 4 - len;
+
+	while (val_i < 4)
+		buf[buf_i++] = val_p[val_i++];
+
+	if (i2c_master_send(client, buf, len + 2) != len + 2)
+		return -EIO;
+
+	return 0;
+}
+
+static int ov16a1q_write_array(struct i2c_client *client,
+			       const struct regval *regs)
+{
+	u32 i;
+	int ret = 0;
+
+	for (i = 0; ret == 0 && regs[i].addr != REG_NULL; i++)
+		ret = ov16a1q_write_reg(client, regs[i].addr,
+					OV16A1Q_REG_VALUE_08BIT,
+					regs[i].val);
+
+	return ret;
+}
+
+/* Read registers up to 4 at a time */
+static int ov16a1q_read_reg(struct i2c_client *client, u16 reg,
+			    unsigned int len, u32 *val)
+{
+	struct i2c_msg msgs[2];
+	u8 *data_be_p;
+	__be32 data_be = 0;
+	__be16 reg_addr_be = cpu_to_be16(reg);
+	int ret;
+
+	if (len > 4 || !len)
+		return -EINVAL;
+
+	data_be_p = (u8 *)&data_be;
+	/* Write register address */
+	msgs[0].addr = client->addr;
+	msgs[0].flags = 0;
+	msgs[0].len = 2;
+	msgs[0].buf = (u8 *)&reg_addr_be;
+
+	/* Read data from register */
+	msgs[1].addr = client->addr;
+	msgs[1].flags = I2C_M_RD;
+	msgs[1].len = len;
+	msgs[1].buf = &data_be_p[4 - len];
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (ret != ARRAY_SIZE(msgs))
+		return -EIO;
+
+	*val = be32_to_cpu(data_be);
+
+	return 0;
+}
+
+static int ov16a1q_get_reso_dist(const struct ov16a1q_mode *mode,
+				 struct v4l2_mbus_framefmt *framefmt)
+{
+	return abs(mode->width - framefmt->width) +
+	       abs(mode->height - framefmt->height);
+}
+
+static const struct ov16a1q_mode *
+ov16a1q_find_best_fit(struct v4l2_subdev_format *fmt)
+{
+	struct v4l2_mbus_framefmt *framefmt = &fmt->format;
+	int dist;
+	int cur_best_fit = 0;
+	int cur_best_fit_dist = -1;
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(supported_modes); i++) {
+		dist = ov16a1q_get_reso_dist(&supported_modes[i], framefmt);
+		if (cur_best_fit_dist == -1 || dist < cur_best_fit_dist) {
+			cur_best_fit_dist = dist;
+			cur_best_fit = i;
+		}
+	}
+
+	return &supported_modes[cur_best_fit];
+}
+
+static int ov16a1q_set_fmt(struct v4l2_subdev *sd,
+			   struct v4l2_subdev_state *sd_state,
+			  struct v4l2_subdev_format *fmt)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+	const struct ov16a1q_mode *mode;
+	s64 h_blank, vblank_def;
+	u64 pixel_rate = 0;
+	u32 lane_num = OV16A1Q_LANES;
+
+	mutex_lock(&ov16a1q->mutex);
+
+	mode = ov16a1q_find_best_fit(fmt);
+	fmt->format.code = OV16A1Q_MEDIA_BUS_FMT;
+	fmt->format.width = mode->width;
+	fmt->format.height = mode->height;
+	fmt->format.field = V4L2_FIELD_NONE;
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		*v4l2_subdev_get_try_format(sd, sd_state, fmt->pad) = fmt->format;
+#else
+		mutex_unlock(&ov16a1q->mutex);
+		return -ENOTTY;
+#endif
+	} else {
+		ov16a1q->cur_mode = mode;
+		h_blank = mode->hts_def - mode->width;
+		__v4l2_ctrl_modify_range(ov16a1q->hblank, h_blank,
+					 h_blank, 1, h_blank);
+		vblank_def = mode->vts_def - mode->height;
+		__v4l2_ctrl_modify_range(ov16a1q->vblank, vblank_def,
+					 OV16A1Q_VTS_MAX - mode->height,
+					 1, vblank_def);
+		__v4l2_ctrl_s_ctrl(ov16a1q->vblank, vblank_def);
+		pixel_rate = (u32)link_freq_items[mode->link_freq_idx] / mode->bpp * 2 * lane_num;
+
+		__v4l2_ctrl_s_ctrl_int64(ov16a1q->pixel_rate,
+					 pixel_rate);
+		__v4l2_ctrl_s_ctrl(ov16a1q->link_freq,
+				   mode->link_freq_idx);
+	}
+	dev_info(&ov16a1q->client->dev, "%s: mode->link_freq_idx(%d)",
+		 __func__, mode->link_freq_idx);
+
+	mutex_unlock(&ov16a1q->mutex);
+
+	return 0;
+}
+
+static int ov16a1q_get_fmt(struct v4l2_subdev *sd,
+			   struct v4l2_subdev_state *sd_state,
+			   struct v4l2_subdev_format *fmt)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+	const struct ov16a1q_mode *mode = ov16a1q->cur_mode;
+
+	mutex_lock(&ov16a1q->mutex);
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		fmt->format = *v4l2_subdev_get_try_format(sd, sd_state, fmt->pad);
+#else
+		mutex_unlock(&ov16a1q->mutex);
+		return -ENOTTY;
+#endif
+	} else {
+		fmt->format.width = mode->width;
+		fmt->format.height = mode->height;
+		fmt->format.code = OV16A1Q_MEDIA_BUS_FMT;
+		fmt->format.field = V4L2_FIELD_NONE;
+		if (fmt->pad < PAD_MAX && mode->hdr_mode != NO_HDR)
+			fmt->reserved[0] = mode->vc[fmt->pad];
+		else
+			fmt->reserved[0] = mode->vc[PAD0];
+	}
+	mutex_unlock(&ov16a1q->mutex);
+
+	return 0;
+}
+
+static int ov16a1q_enum_mbus_code(struct v4l2_subdev *sd,
+				  struct v4l2_subdev_state *sd_state,
+				  struct v4l2_subdev_mbus_code_enum *code)
+{
+	if (code->index != 0)
+		return -EINVAL;
+	code->code = OV16A1Q_MEDIA_BUS_FMT;
+
+	return 0;
+}
+
+static int ov16a1q_enum_frame_sizes(struct v4l2_subdev *sd,
+				    struct v4l2_subdev_state *sd_state,
+				   struct v4l2_subdev_frame_size_enum *fse)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+
+	if (fse->index >= ov16a1q->cfg_num)
+		return -EINVAL;
+
+	if (fse->code != OV16A1Q_MEDIA_BUS_FMT)
+		return -EINVAL;
+
+	fse->min_width  = supported_modes[fse->index].width;
+	fse->max_width  = supported_modes[fse->index].width;
+	fse->max_height = supported_modes[fse->index].height;
+	fse->min_height = supported_modes[fse->index].height;
+
+	return 0;
+}
+
+static int ov16a1q_enable_test_pattern(struct ov16a1q *ov16a1q, u32 pattern)
+{
+	u32 val;
+
+	if (pattern)
+		val = ((pattern - 1) << 4) | OV16A1Q_TEST_PATTERN_ENABLE;
+	else
+		val = OV16A1Q_TEST_PATTERN_DISABLE;
+
+	return ov16a1q_write_reg(ov16a1q->client,
+				 OV16A1Q_REG_TEST_PATTERN,
+				 OV16A1Q_REG_VALUE_08BIT,
+				 val);
+}
+
+static int ov16a1q_g_frame_interval(struct v4l2_subdev *sd,
+				    struct v4l2_subdev_frame_interval *fi)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+	const struct ov16a1q_mode *mode = ov16a1q->cur_mode;
+
+	fi->interval = mode->max_fps;
+
+	return 0;
+}
+
+#if 0
+static void ov16a1q_get_module_inf(struct ov16a1q *ov16a1q,
+				   struct rkmodule_inf *inf)
+{
+	memset(inf, 0, sizeof(*inf));
+	strscpy(inf->base.sensor, OV16A1Q_NAME, sizeof(inf->base.sensor));
+	strscpy(inf->base.module, ov16a1q->module_name,
+		sizeof(inf->base.module));
+	strscpy(inf->base.lens, ov16a1q->len_name, sizeof(inf->base.lens));
+}
+
+static long ov16a1q_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+	struct rkmodule_hdr_cfg *hdr_cfg;
+	long ret = 0;
+	u32 i, h, w;
+	u32 stream = 0;
+
+	switch (cmd) {
+	case RKMODULE_SET_HDR_CFG:
+		hdr_cfg = (struct rkmodule_hdr_cfg *)arg;
+		w = ov16a1q->cur_mode->width;
+		h = ov16a1q->cur_mode->height;
+		for (i = 0; i < ov16a1q->cfg_num; i++) {
+			if (w == supported_modes[i].width &&
+			h == supported_modes[i].height &&
+			supported_modes[i].hdr_mode == hdr_cfg->hdr_mode) {
+				ov16a1q->cur_mode = &supported_modes[i];
+				break;
+			}
+		}
+		if (i == ov16a1q->cfg_num) {
+			dev_err(&ov16a1q->client->dev,
+				"not find hdr mode:%d %dx%d config\n",
+				hdr_cfg->hdr_mode, w, h);
+			ret = -EINVAL;
+		} else {
+			w = ov16a1q->cur_mode->hts_def - ov16a1q->cur_mode->width;
+			h = ov16a1q->cur_mode->vts_def - ov16a1q->cur_mode->height;
+			__v4l2_ctrl_modify_range(ov16a1q->hblank, w, w, 1, w);
+			__v4l2_ctrl_modify_range(ov16a1q->vblank, h,
+						 OV16A1Q_VTS_MAX - ov16a1q->cur_mode->height,
+						 1, h);
+			dev_info(&ov16a1q->client->dev,
+				"sensor mode: %d\n",
+				ov16a1q->cur_mode->hdr_mode);
+		}
+		break;
+	case RKMODULE_GET_HDR_CFG:
+		hdr_cfg = (struct rkmodule_hdr_cfg *)arg;
+		hdr_cfg->esp.mode = HDR_NORMAL_VC;
+		hdr_cfg->hdr_mode = ov16a1q->cur_mode->hdr_mode;
+		break;
+	case RKMODULE_GET_MODULE_INFO:
+		ov16a1q_get_module_inf(ov16a1q, (struct rkmodule_inf *)arg);
+		break;
+	case RKMODULE_SET_QUICK_STREAM:
+
+		stream = *((u32 *)arg);
+
+		if (stream)
+			ret = ov16a1q_write_reg(ov16a1q->client,
+				 OV16A1Q_REG_CTRL_MODE,
+				 OV16A1Q_REG_VALUE_08BIT,
+				 OV16A1Q_MODE_STREAMING);
+		else
+			ret = ov16a1q_write_reg(ov16a1q->client,
+				 OV16A1Q_REG_CTRL_MODE,
+				 OV16A1Q_REG_VALUE_08BIT,
+				 OV16A1Q_MODE_SW_STANDBY);
+		break;
+	default:
+		ret = -ENOIOCTLCMD;
+		break;
+	}
+
+	return ret;
+}
+#endif
+
+#undef CONFIG_COMPAT
+#ifdef CONFIG_COMPAT
+static long ov16a1q_compat_ioctl32(struct v4l2_subdev *sd,
+				   unsigned int cmd, unsigned long arg)
+{
+	void __user *up = compat_ptr(arg);
+	struct rkmodule_inf *inf;
+	struct rkmodule_awb_cfg *cfg;
+	struct rkmodule_hdr_cfg *hdr;
+	long ret = 0;
+	u32 stream = 0;
+
+	switch (cmd) {
+	case RKMODULE_GET_MODULE_INFO:
+		inf = kzalloc(sizeof(*inf), GFP_KERNEL);
+		if (!inf) {
+			ret = -ENOMEM;
+			return ret;
+		}
+
+		ret = ov16a1q_ioctl(sd, cmd, inf);
+		if (!ret) {
+			ret = copy_to_user(up, inf, sizeof(*inf));
+			if (ret)
+				ret = -EFAULT;
+		}
+		kfree(inf);
+		break;
+	case RKMODULE_AWB_CFG:
+		cfg = kzalloc(sizeof(*cfg), GFP_KERNEL);
+		if (!cfg) {
+			ret = -ENOMEM;
+			return ret;
+		}
+
+		ret = copy_from_user(cfg, up, sizeof(*cfg));
+		if (!ret)
+			ret = ov16a1q_ioctl(sd, cmd, cfg);
+		else
+			ret = -EFAULT;
+		kfree(cfg);
+		break;
+	case RKMODULE_GET_HDR_CFG:
+		hdr = kzalloc(sizeof(*hdr), GFP_KERNEL);
+		if (!hdr) {
+			ret = -ENOMEM;
+			return ret;
+		}
+
+		ret = ov16a1q_ioctl(sd, cmd, hdr);
+		if (!ret) {
+			if (copy_to_user(up, hdr, sizeof(*hdr))) {
+				kfree(hdr);
+				return -EFAULT;
+			}
+		}
+		kfree(hdr);
+		break;
+	case RKMODULE_SET_HDR_CFG:
+		hdr = kzalloc(sizeof(*hdr), GFP_KERNEL);
+		if (!hdr) {
+			ret = -ENOMEM;
+			return ret;
+		}
+
+		if (copy_from_user(hdr, up, sizeof(*hdr))) {
+			kfree(hdr);
+			return -EFAULT;
+		}
+		ret = ov16a1q_ioctl(sd, cmd, hdr);
+		kfree(hdr);
+		break;
+	case RKMODULE_SET_QUICK_STREAM:
+		ret = copy_from_user(&stream, up, sizeof(u32));
+		if (!ret)
+			ret = ov16a1q_ioctl(sd, cmd, &stream);
+		else
+			ret = -EFAULT;
+		break;
+	default:
+		ret = -ENOIOCTLCMD;
+		break;
+	}
+
+	return ret;
+}
+#endif
+
+static int __ov16a1q_start_stream(struct ov16a1q *ov16a1q)
+{
+	int ret;
+
+	ret = ov16a1q_write_array(ov16a1q->client, ov16a1q->cur_mode->reg_list);
+	if (ret)
+		return ret;
+
+	/* In case these controls are set before streaming */
+	mutex_unlock(&ov16a1q->mutex);
+	ret = v4l2_ctrl_handler_setup(&ov16a1q->ctrl_handler);
+	mutex_lock(&ov16a1q->mutex);
+	if (ret)
+		return ret;
+
+	return ov16a1q_write_reg(ov16a1q->client,
+				 OV16A1Q_REG_CTRL_MODE,
+				 OV16A1Q_REG_VALUE_08BIT,
+				 OV16A1Q_MODE_STREAMING);
+}
+
+static int __ov16a1q_stop_stream(struct ov16a1q *ov16a1q)
+{
+	return ov16a1q_write_reg(ov16a1q->client,
+				 OV16A1Q_REG_CTRL_MODE,
+				 OV16A1Q_REG_VALUE_08BIT,
+				 OV16A1Q_MODE_SW_STANDBY);
+}
+
+static int ov16a1q_s_stream(struct v4l2_subdev *sd, int on)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+	struct i2c_client *client = ov16a1q->client;
+	int ret = 0;
+
+	dev_info(&client->dev, "%s: on: %d, %dx%d@%d\n", __func__, on,
+				ov16a1q->cur_mode->width,
+				ov16a1q->cur_mode->height,
+		DIV_ROUND_CLOSEST(ov16a1q->cur_mode->max_fps.denominator,
+				  ov16a1q->cur_mode->max_fps.numerator));
+
+	mutex_lock(&ov16a1q->mutex);
+	on = !!on;
+	if (on == ov16a1q->streaming)
+		goto unlock_and_return;
+
+	if (on) {
+		ret = pm_runtime_get_sync(&client->dev);
+		if (ret < 0) {
+			pm_runtime_put_noidle(&client->dev);
+			goto unlock_and_return;
+		}
+
+		ret = __ov16a1q_start_stream(ov16a1q);
+		if (ret) {
+			v4l2_err(sd, "start stream failed while write regs\n");
+			pm_runtime_put(&client->dev);
+			goto unlock_and_return;
+		}
+	} else {
+		__ov16a1q_stop_stream(ov16a1q);
+		pm_runtime_put(&client->dev);
+	}
+
+	ov16a1q->streaming = on;
+
+unlock_and_return:
+	mutex_unlock(&ov16a1q->mutex);
+
+	return ret;
+}
+
+static int ov16a1q_s_power(struct v4l2_subdev *sd, int on)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+	struct i2c_client *client = ov16a1q->client;
+	int ret = 0;
+
+	mutex_lock(&ov16a1q->mutex);
+
+	/* If the power state is not modified - no work to do. */
+	if (ov16a1q->power_on == !!on)
+		goto unlock_and_return;
+
+	if (on) {
+		ret = pm_runtime_get_sync(&client->dev);
+		if (ret < 0) {
+			pm_runtime_put_noidle(&client->dev);
+			goto unlock_and_return;
+		}
+
+		ret = ov16a1q_write_array(ov16a1q->client, ov16a1q_global_regs);
+		if (ret) {
+			v4l2_err(sd, "could not set init registers\n");
+			pm_runtime_put_noidle(&client->dev);
+			goto unlock_and_return;
+		}
+
+		ov16a1q->power_on = true;
+	} else {
+		pm_runtime_put(&client->dev);
+		ov16a1q->power_on = false;
+	}
+
+unlock_and_return:
+	mutex_unlock(&ov16a1q->mutex);
+
+	return ret;
+}
+
+/* Calculate the delay in us by clock rate and clock cycles */
+static inline u32 ov16a1q_cal_delay(u32 cycles)
+{
+	return DIV_ROUND_UP(cycles, OV16A1Q_XVCLK_FREQ / 1000 / 1000);
+}
+
+static int __ov16a1q_power_on(struct ov16a1q *ov16a1q)
+{
+	int ret;
+	u32 delay_us;
+	struct device *dev = &ov16a1q->client->dev;
+
+	if (!IS_ERR(ov16a1q->power_gpio))
+		gpiod_set_value_cansleep(ov16a1q->power_gpio, 1);
+
+	usleep_range(1000, 2000);
+
+	if (!IS_ERR_OR_NULL(ov16a1q->pins_default)) {
+		ret = pinctrl_select_state(ov16a1q->pinctrl,
+					   ov16a1q->pins_default);
+		if (ret < 0)
+			dev_err(dev, "could not set pins\n");
+	}
+	ret = clk_set_rate(ov16a1q->xvclk, OV16A1Q_XVCLK_FREQ);
+	if (ret < 0)
+		dev_warn(dev, "Failed to set xvclk rate (24MHz)\n");
+	if (clk_get_rate(ov16a1q->xvclk) != OV16A1Q_XVCLK_FREQ)
+		dev_warn(dev, "xvclk mismatched, modes are based on 24MHz\n");
+	ret = clk_prepare_enable(ov16a1q->xvclk);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enable xvclk\n");
+		return ret;
+	}
+	if (!IS_ERR(ov16a1q->reset_gpio))
+		gpiod_set_value_cansleep(ov16a1q->reset_gpio, 0);
+
+	ret = regulator_bulk_enable(ARRAY_SIZE(ov16a1q_supply_names), ov16a1q->supplies);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enable regulators\n");
+		goto disable_clk;
+	}
+
+	if (!IS_ERR(ov16a1q->reset_gpio))
+		gpiod_set_value_cansleep(ov16a1q->reset_gpio, 1);
+
+	usleep_range(5000, 6000);
+	if (!IS_ERR(ov16a1q->pwdn_gpio))
+		gpiod_set_value_cansleep(ov16a1q->pwdn_gpio, 1);
+
+	/* 8192 cycles prior to first SCCB transaction */
+	delay_us = ov16a1q_cal_delay(8192);
+	usleep_range(delay_us * 2, delay_us * 3);
+
+	return 0;
+
+disable_clk:
+	clk_disable_unprepare(ov16a1q->xvclk);
+
+	return ret;
+}
+
+static void __ov16a1q_power_off(struct ov16a1q *ov16a1q)
+{
+	int ret;
+	struct device *dev = &ov16a1q->client->dev;
+
+	if (!IS_ERR(ov16a1q->pwdn_gpio))
+		gpiod_set_value_cansleep(ov16a1q->pwdn_gpio, 0);
+	clk_disable_unprepare(ov16a1q->xvclk);
+	if (!IS_ERR(ov16a1q->reset_gpio))
+		gpiod_set_value_cansleep(ov16a1q->reset_gpio, 0);
+
+	if (!IS_ERR_OR_NULL(ov16a1q->pins_sleep)) {
+		ret = pinctrl_select_state(ov16a1q->pinctrl,
+					   ov16a1q->pins_sleep);
+		if (ret < 0)
+			dev_dbg(dev, "could not set pins\n");
+	}
+	if (!IS_ERR(ov16a1q->power_gpio))
+		gpiod_set_value_cansleep(ov16a1q->power_gpio, 0);
+
+	regulator_bulk_disable(ARRAY_SIZE(ov16a1q_supply_names), ov16a1q->supplies);
+}
+
+static int ov16a1q_runtime_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+
+	return __ov16a1q_power_on(ov16a1q);
+}
+
+static int ov16a1q_runtime_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+
+	__ov16a1q_power_off(ov16a1q);
+
+	return 0;
+}
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static int ov16a1q_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+	struct v4l2_mbus_framefmt *try_fmt =
+				v4l2_subdev_get_try_format(sd, fh->state, 0);
+	const struct ov16a1q_mode *def_mode = &supported_modes[0];
+
+	mutex_lock(&ov16a1q->mutex);
+	/* Initialize try_fmt */
+	try_fmt->width = def_mode->width;
+	try_fmt->height = def_mode->height;
+	try_fmt->code = OV16A1Q_MEDIA_BUS_FMT;
+	try_fmt->field = V4L2_FIELD_NONE;
+
+	mutex_unlock(&ov16a1q->mutex);
+	/* No crop or compose */
+
+	return 0;
+}
+#endif
+
+static int ov16a1q_enum_frame_interval(struct v4l2_subdev *sd,
+				       struct v4l2_subdev_state *sd_state,
+				       struct v4l2_subdev_frame_interval_enum *fie)
+{
+	if (fie->index >= ARRAY_SIZE(supported_modes))
+		return -EINVAL;
+
+	fie->code = OV16A1Q_MEDIA_BUS_FMT;
+	fie->width = supported_modes[fie->index].width;
+	fie->height = supported_modes[fie->index].height;
+	fie->interval = supported_modes[fie->index].max_fps;
+	fie->reserved[0] = supported_modes[fie->index].hdr_mode;
+
+	return 0;
+}
+
+static int ov16a1q_g_mbus_config(struct v4l2_subdev *sd, unsigned int pad,
+				struct v4l2_mbus_config *config)
+{
+	config->type = V4L2_MBUS_CSI2_DPHY;
+	config->bus.mipi_csi2.num_data_lanes  = OV16A1Q_LANES;
+
+	return 0;
+}
+
+#define CROP_START(SRC, DST) (((SRC) - (DST)) / 2 / 4 * 4)
+#define DST_WIDTH_2320 2320
+#define DST_HEIGHT_1744 1744
+/*
+ * The resolution of the driver configuration needs to be exactly
+ * the same as the current output resolution of the sensor,
+ * the input width of the isp needs to be 16 aligned,
+ * the input height of the isp needs to be 8 aligned.
+ * Can be cropped to standard resolution by this function,
+ * otherwise it will crop out strange resolution according
+ * to the alignment rules.
+ */
+static int ov16a1q_get_selection(struct v4l2_subdev *sd,
+				struct v4l2_subdev_state *sd_state,
+				struct v4l2_subdev_selection *sel)
+{
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+
+	if (sel->target == V4L2_SEL_TGT_CROP_BOUNDS) {
+		if (ov16a1q->cur_mode->width == 2328) {
+			sel->r.left = CROP_START(ov16a1q->cur_mode->width, DST_WIDTH_2320);
+			sel->r.width = DST_WIDTH_2320;
+			sel->r.top = CROP_START(ov16a1q->cur_mode->height, DST_HEIGHT_1744);
+			sel->r.height = DST_HEIGHT_1744;
+		} else {
+			sel->r.left = 0;
+			sel->r.width = ov16a1q->cur_mode->width;
+			sel->r.top = 0;
+			sel->r.height = ov16a1q->cur_mode->height;
+		}
+		return 0;
+	}
+
+	return -EINVAL;
+}
+
+static const struct dev_pm_ops ov16a1q_pm_ops = {
+	SET_RUNTIME_PM_OPS(ov16a1q_runtime_suspend,
+			   ov16a1q_runtime_resume, NULL)
+};
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static const struct v4l2_subdev_internal_ops ov16a1q_internal_ops = {
+	.open = ov16a1q_open,
+};
+#endif
+
+static const struct v4l2_subdev_core_ops ov16a1q_core_ops = {
+	.s_power = ov16a1q_s_power,
+//	.ioctl = ov16a1q_ioctl,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl32 = ov16a1q_compat_ioctl32,
+#endif
+};
+
+static const struct v4l2_subdev_video_ops ov16a1q_video_ops = {
+	.s_stream = ov16a1q_s_stream,
+	.g_frame_interval = ov16a1q_g_frame_interval,
+};
+
+static const struct v4l2_subdev_pad_ops ov16a1q_pad_ops = {
+	.enum_mbus_code = ov16a1q_enum_mbus_code,
+	.enum_frame_size = ov16a1q_enum_frame_sizes,
+	.enum_frame_interval = ov16a1q_enum_frame_interval,
+	.get_fmt = ov16a1q_get_fmt,
+	.set_fmt = ov16a1q_set_fmt,
+	.get_selection = ov16a1q_get_selection,
+	.get_mbus_config = ov16a1q_g_mbus_config,
+};
+
+static const struct v4l2_subdev_ops ov16a1q_subdev_ops = {
+	.core	= &ov16a1q_core_ops,
+	.video	= &ov16a1q_video_ops,
+	.pad	= &ov16a1q_pad_ops,
+};
+
+static int ov16a1q_set_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct ov16a1q *ov16a1q = container_of(ctrl->handler,
+					     struct ov16a1q, ctrl_handler);
+	struct i2c_client *client = ov16a1q->client;
+	s64 max;
+	int ret = 0;
+	u32 again, dgain;
+	u32 val = 0, x_win = 0, y_win = 0;
+
+	/* Propagate change of current control to all related controls */
+	switch (ctrl->id) {
+	case V4L2_CID_VBLANK:
+		/* Update max exposure while meeting expected vblanking */
+		max = ov16a1q->cur_mode->height + ctrl->val - 4;
+		__v4l2_ctrl_modify_range(ov16a1q->exposure,
+					 ov16a1q->exposure->minimum, max,
+					 ov16a1q->exposure->step,
+					 ov16a1q->exposure->default_value);
+		break;
+	}
+
+	if (!pm_runtime_get_if_in_use(&client->dev))
+		return 0;
+
+	switch (ctrl->id) {
+	case V4L2_CID_EXPOSURE:
+		/* 4 least significant bits of expsoure are fractional part */
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					OV16A1Q_REG_EXPOSURE_H,
+					OV16A1Q_REG_VALUE_24BIT,
+					ctrl->val & 0x7fffff);
+		dev_dbg(&client->dev, "set exposure 0x%x\n",
+			ctrl->val);
+		break;
+	case V4L2_CID_ANALOGUE_GAIN:
+		if (ctrl->val > 1984) {// >15.5x
+			dgain = ctrl->val * 10 / 155;
+			again = 1984;
+		} else {
+			dgain = 1024;
+			again = ctrl->val;
+		}
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					 OV16A1Q_REG_AGAIN_H,
+					 OV16A1Q_REG_VALUE_16BIT,
+					 (again << 1) & 0x7ffe);
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					 OV16A1Q_REG_DAGAIN_H_B,
+					 OV16A1Q_REG_VALUE_24BIT,
+					 (dgain << 6) & 0xfffc0);
+
+		dev_dbg(&client->dev, "set gain 0x%x set analog gain 0x%x digital gain 0x%x\n",
+			ctrl->val, again, dgain);
+		break;
+	case V4L2_CID_VBLANK:
+		ret = ov16a1q_write_reg(ov16a1q->client,
+					OV16A1Q_REG_VTS_H,
+					OV16A1Q_REG_VALUE_16BIT,
+					ctrl->val + ov16a1q->cur_mode->height);
+		break;
+	case V4L2_CID_TEST_PATTERN:
+		ret = ov16a1q_enable_test_pattern(ov16a1q, ctrl->val);
+		break;
+	case V4L2_CID_HFLIP:
+		ret = ov16a1q_read_reg(ov16a1q->client, OV16A1Q_MIRROR_REG,
+				       OV16A1Q_REG_VALUE_08BIT,
+				       &val);
+		if (ctrl->val)
+			val |= MIRROR_BIT_MASK;
+		else
+			val &= ~MIRROR_BIT_MASK;
+
+		ret |= ov16a1q_read_reg(ov16a1q->client, OV16A1Q_REG_ISP_X_WIN,
+					OV16A1Q_REG_VALUE_16BIT,
+					&x_win);
+
+		if ((x_win == 0x0010) && (val & 0x04))
+			x_win = 0x0011;
+		else if ((x_win == 0x0011) && (!(val & 0x04)))
+			x_win = 0x0010;
+
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					 OV16A1Q_GROUP_UPDATE_ADDRESS,
+					 OV16A1Q_REG_VALUE_08BIT,
+					 OV16A1Q_GROUP_UPDATE_START_DATA);
+
+		ret |= ov16a1q_write_reg(ov16a1q->client, OV16A1Q_MIRROR_REG,
+					 OV16A1Q_REG_VALUE_08BIT,
+					 val);
+		ret |= ov16a1q_write_reg(ov16a1q->client, OV16A1Q_REG_ISP_X_WIN,
+					 OV16A1Q_REG_VALUE_16BIT,
+					 x_win);
+
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					 OV16A1Q_GROUP_UPDATE_ADDRESS,
+					 OV16A1Q_REG_VALUE_08BIT,
+					 OV16A1Q_GROUP_UPDATE_END_DATA);
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					 OV16A1Q_GROUP_UPDATE_ADDRESS,
+					 OV16A1Q_REG_VALUE_08BIT,
+					 OV16A1Q_GROUP_UPDATE_LAUNCH);
+		break;
+	case V4L2_CID_VFLIP:
+		ret = ov16a1q_read_reg(ov16a1q->client, OV16A1Q_FLIP_REG,
+				       OV16A1Q_REG_VALUE_08BIT,
+				       &val);
+		if (ctrl->val)
+			val |= FLIP_BIT_MASK;
+		else
+			val &= ~FLIP_BIT_MASK;
+
+		ret |= ov16a1q_read_reg(ov16a1q->client, OV16A1Q_REG_ISP_Y_WIN,
+					OV16A1Q_REG_VALUE_16BIT,
+					&y_win);
+
+		if ((y_win == 0x0004) && (val & 0x04))
+			y_win = 0x0005;
+		else if ((y_win == 0x0005) && (!(val & 0x04)))
+			y_win = 0x0004;
+
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					 OV16A1Q_GROUP_UPDATE_ADDRESS,
+					 OV16A1Q_REG_VALUE_08BIT,
+					 OV16A1Q_GROUP_UPDATE_START_DATA);
+
+		ret |= ov16a1q_write_reg(ov16a1q->client, OV16A1Q_FLIP_REG,
+					 OV16A1Q_REG_VALUE_08BIT,
+					 val);
+		ret |= ov16a1q_write_reg(ov16a1q->client, OV16A1Q_REG_ISP_Y_WIN,
+					 OV16A1Q_REG_VALUE_16BIT,
+					 y_win);
+
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					 OV16A1Q_GROUP_UPDATE_ADDRESS,
+					 OV16A1Q_REG_VALUE_08BIT,
+					 OV16A1Q_GROUP_UPDATE_END_DATA);
+		ret |= ov16a1q_write_reg(ov16a1q->client,
+					 OV16A1Q_GROUP_UPDATE_ADDRESS,
+					 OV16A1Q_REG_VALUE_08BIT,
+					 OV16A1Q_GROUP_UPDATE_LAUNCH);
+		break;
+	default:
+		dev_warn(&client->dev, "%s Unhandled id:0x%x, val:0x%x\n",
+			 __func__, ctrl->id, ctrl->val);
+		break;
+	}
+
+	pm_runtime_put(&client->dev);
+
+	return ret;
+}
+
+static const struct v4l2_ctrl_ops ov16a1q_ctrl_ops = {
+	.s_ctrl = ov16a1q_set_ctrl,
+};
+
+static int ov16a1q_initialize_controls(struct ov16a1q *ov16a1q)
+{
+	const struct ov16a1q_mode *mode;
+	struct v4l2_ctrl_handler *handler;
+	s64 exposure_max, vblank_def;
+	u32 h_blank;
+	int ret;
+	u64 dst_pixel_rate = 0;
+	u32 lane_num = OV16A1Q_LANES;
+
+	handler = &ov16a1q->ctrl_handler;
+	mode = ov16a1q->cur_mode;
+	ret = v4l2_ctrl_handler_init(handler, 9);
+	if (ret)
+		return ret;
+	handler->lock = &ov16a1q->mutex;
+
+	ov16a1q->link_freq = v4l2_ctrl_new_int_menu(handler, NULL,
+			V4L2_CID_LINK_FREQ,
+			0, 0, link_freq_items);
+
+	dst_pixel_rate = (u32)link_freq_items[mode->link_freq_idx] / mode->bpp * 2 * lane_num;
+
+	ov16a1q->pixel_rate = v4l2_ctrl_new_std(handler, NULL,
+			V4L2_CID_PIXEL_RATE,
+			0, OV16A1Q_PIXEL_RATE,
+			1, dst_pixel_rate);
+
+	if (!ov16a1q->link_freq || ov16a1q->link_freq == NULL) {
+		dev_err(&ov16a1q->client->dev, "error create link_freq");
+		return -EIO;
+	}
+
+	if (!mode->link_freq_idx)  {
+                dev_err(&ov16a1q->client->dev, "error create link_freq_idx");
+//                return -EIO;
+        }
+
+	__v4l2_ctrl_s_ctrl(ov16a1q->link_freq,
+			   mode->link_freq_idx);
+
+	h_blank = mode->hts_def - mode->width;
+	ov16a1q->hblank = v4l2_ctrl_new_std(handler, NULL, V4L2_CID_HBLANK,
+				h_blank, h_blank, 1, h_blank);
+	if (ov16a1q->hblank)
+		ov16a1q->hblank->flags |= V4L2_CTRL_FLAG_READ_ONLY;
+
+	vblank_def = mode->vts_def - mode->height;
+	ov16a1q->vblank = v4l2_ctrl_new_std(handler, &ov16a1q_ctrl_ops,
+				V4L2_CID_VBLANK, vblank_def,
+				OV16A1Q_VTS_MAX - mode->height,
+				1, vblank_def);
+
+	exposure_max = mode->vts_def - 4;
+	ov16a1q->exposure = v4l2_ctrl_new_std(handler, &ov16a1q_ctrl_ops,
+				V4L2_CID_EXPOSURE, OV16A1Q_EXPOSURE_MIN,
+				exposure_max, OV16A1Q_EXPOSURE_STEP,
+				mode->exp_def);
+
+	ov16a1q->anal_gain = v4l2_ctrl_new_std(handler, &ov16a1q_ctrl_ops,
+				V4L2_CID_ANALOGUE_GAIN, OV16A1Q_GAIN_MIN,
+				OV16A1Q_GAIN_MAX, OV16A1Q_GAIN_STEP,
+				OV16A1Q_GAIN_DEFAULT);
+
+	ov16a1q->test_pattern = v4l2_ctrl_new_std_menu_items(handler,
+				&ov16a1q_ctrl_ops, V4L2_CID_TEST_PATTERN,
+				ARRAY_SIZE(ov16a1q_test_pattern_menu) - 1,
+				0, 0, ov16a1q_test_pattern_menu);
+
+	ov16a1q->h_flip = v4l2_ctrl_new_std(handler, &ov16a1q_ctrl_ops,
+					    V4L2_CID_HFLIP, 0, 1, 1, 0);
+
+	ov16a1q->v_flip = v4l2_ctrl_new_std(handler, &ov16a1q_ctrl_ops,
+					    V4L2_CID_VFLIP, 0, 1, 1, 0);
+
+	if (handler->error) {
+		ret = handler->error;
+		dev_err(&ov16a1q->client->dev,
+			"Failed to init controls(%d)\n", ret);
+		goto err_free_handler;
+	}
+
+	ov16a1q->subdev.ctrl_handler = handler;
+
+	return 0;
+
+err_free_handler:
+	v4l2_ctrl_handler_free(handler);
+
+	return ret;
+}
+
+static int ov16a1q_check_sensor_id(struct ov16a1q *ov16a1q,
+				   struct i2c_client *client)
+{
+	struct device *dev = &ov16a1q->client->dev;
+	u32 id = 0;
+	int ret;
+
+	ret = ov16a1q_read_reg(client, OV16A1Q_REG_CHIP_ID,
+			       OV16A1Q_REG_VALUE_24BIT, &id);
+	if (id != CHIP_ID) {
+		dev_err(dev, "Unexpected sensor id(%06x), ret(%d)\n", id, ret);
+		return -ENODEV;
+	}
+
+	dev_info(dev, "Detected OV%06x sensor\n", CHIP_ID);
+
+	return 0;
+}
+
+static int ov16a1q_configure_regulators(struct ov16a1q *ov16a1q)
+{
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(ov16a1q_supply_names); i++)
+		ov16a1q->supplies[i].supply = ov16a1q_supply_names[i];
+
+	return devm_regulator_bulk_get(&ov16a1q->client->dev,
+				       ARRAY_SIZE(ov16a1q_supply_names),
+				       ov16a1q->supplies);
+}
+
+static int ov16a1q_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct device_node *node = dev->of_node;
+	struct ov16a1q *ov16a1q;
+	struct v4l2_subdev *sd;
+	char facing[2];
+	int ret;
+	u32 i, hdr_mode = 0;
+
+	dev_info(dev, "driver version: %02x.%02x.%02x",
+		DRIVER_VERSION >> 16,
+		(DRIVER_VERSION & 0xff00) >> 8,
+		DRIVER_VERSION & 0x00ff);
+
+	ov16a1q = devm_kzalloc(dev, sizeof(*ov16a1q), GFP_KERNEL);
+	if (!ov16a1q)
+		return -ENOMEM;
+
+//	ret = of_property_read_u32(node, RKMODULE_CAMERA_MODULE_INDEX,
+//				   &ov16a1q->module_index);
+//	ret |= of_property_read_string(node, RKMODULE_CAMERA_MODULE_FACING,
+//				       &ov16a1q->module_facing);
+//	ret |= of_property_read_string(node, RKMODULE_CAMERA_MODULE_NAME,
+//				       &ov16a1q->module_name);
+//	ret |= of_property_read_string(node, RKMODULE_CAMERA_LENS_NAME,
+//				       &ov16a1q->len_name);
+	if (ret) {
+		dev_err(dev, "could not get module information!\n");
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32(node, OF_CAMERA_HDR_MODE,
+			&hdr_mode);
+	if (ret) {
+		hdr_mode = NO_HDR;
+		dev_warn(dev, " Get hdr mode failed! no hdr default\n");
+	}
+	ov16a1q->cfg_num = ARRAY_SIZE(supported_modes);
+	for (i = 0; i < ov16a1q->cfg_num; i++) {
+		if (hdr_mode == supported_modes[i].hdr_mode) {
+			ov16a1q->cur_mode = &supported_modes[i];
+			break;
+		}
+	}
+
+	ov16a1q->client = client;
+
+	ov16a1q->xvclk = devm_clk_get(dev, "xvclk");
+	if (IS_ERR(ov16a1q->xvclk)) {
+		dev_err(dev, "Failed to get xvclk\n");
+		return -EINVAL;
+	}
+
+	ov16a1q->power_gpio = devm_gpiod_get_optional(dev, "power", GPIOD_OUT_LOW);
+	if (IS_ERR(ov16a1q->power_gpio))
+		dev_warn(dev, "Failed to get power-gpios, maybe no use\n");
+
+	ov16a1q->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ov16a1q->reset_gpio))
+		dev_warn(dev, "Failed to get reset-gpios\n");
+
+	ov16a1q->pwdn_gpio = devm_gpiod_get_optional(dev, "pwdn", GPIOD_OUT_LOW);
+	if (IS_ERR(ov16a1q->pwdn_gpio))
+		dev_warn(dev, "Failed to get pwdn-gpios\n");
+
+	ret = ov16a1q_configure_regulators(ov16a1q);
+	if (ret) {
+		dev_err(dev, "Failed to get power regulators, ret=0x%x\n", ret);
+		return ret;
+	}
+
+	ov16a1q->pinctrl = devm_pinctrl_get(dev);
+	if (!IS_ERR(ov16a1q->pinctrl)) {
+		ov16a1q->pins_default =
+			pinctrl_lookup_state(ov16a1q->pinctrl,
+					     OF_CAMERA_PINCTRL_STATE_DEFAULT);
+		if (IS_ERR(ov16a1q->pins_default))
+			dev_err(dev, "could not get default pinstate\n");
+
+		ov16a1q->pins_sleep =
+			pinctrl_lookup_state(ov16a1q->pinctrl,
+					     OF_CAMERA_PINCTRL_STATE_SLEEP);
+		if (IS_ERR(ov16a1q->pins_sleep))
+			dev_err(dev, "could not get sleep pinstate\n");
+	}
+
+	mutex_init(&ov16a1q->mutex);
+
+	sd = &ov16a1q->subdev;
+	v4l2_i2c_subdev_init(sd, client, &ov16a1q_subdev_ops);
+	ret = ov16a1q_initialize_controls(ov16a1q);
+	if (ret)
+		goto err_destroy_mutex;
+
+	ret = __ov16a1q_power_on(ov16a1q);
+	if (ret)
+		goto err_free_handler;
+
+	ret = ov16a1q_check_sensor_id(ov16a1q, client);
+	if (ret)
+		goto err_power_off;
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+	sd->internal_ops = &ov16a1q_internal_ops;
+	sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+#endif
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	ov16a1q->pad.flags = MEDIA_PAD_FL_SOURCE;
+	sd->entity.function = MEDIA_ENT_F_CAM_SENSOR;
+	ret = media_entity_pads_init(&sd->entity, 1, &ov16a1q->pad);
+	if (ret < 0)
+		goto err_power_off;
+#endif
+
+	memset(facing, 0, sizeof(facing));
+	if (strcmp(ov16a1q->module_facing, "back") == 0)
+		facing[0] = 'b';
+	else
+		facing[0] = 'f';
+
+	snprintf(sd->name, sizeof(sd->name), "m%02d_%s_%s %s",
+		 ov16a1q->module_index, facing,
+		 OV16A1Q_NAME, dev_name(sd->dev));
+	ret = v4l2_async_register_subdev_sensor(sd);
+	if (ret) {
+		dev_err(dev, "v4l2 async register subdev failed\n");
+		goto err_clean_entity;
+	}
+
+	pm_runtime_set_active(dev);
+	pm_runtime_enable(dev);
+	pm_runtime_idle(dev);
+
+	return 0;
+
+err_clean_entity:
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+err_power_off:
+	__ov16a1q_power_off(ov16a1q);
+err_free_handler:
+	v4l2_ctrl_handler_free(&ov16a1q->ctrl_handler);
+err_destroy_mutex:
+	mutex_destroy(&ov16a1q->mutex);
+
+	return ret;
+}
+
+static void ov16a1q_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov16a1q *ov16a1q = to_ov16a1q(sd);
+
+	v4l2_async_unregister_subdev(sd);
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+	v4l2_ctrl_handler_free(&ov16a1q->ctrl_handler);
+	mutex_destroy(&ov16a1q->mutex);
+
+	pm_runtime_disable(&client->dev);
+	if (!pm_runtime_status_suspended(&client->dev))
+		__ov16a1q_power_off(ov16a1q);
+	pm_runtime_set_suspended(&client->dev);
+}
+
+static const struct of_device_id ov16a1q_of_match[] = {
+	{ .compatible = "ovti,ov16a1q" },
+        { .compatible = "ovti,ov16a10" },
+        { .compatible = "ovti,ov16a1x" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, ov16a1q_of_match);
+
+static const struct i2c_device_id ov16a1q_match_id[] = {
+	{ "ovti,ov16a1q", 0 },
+	{},
+};
+
+static struct i2c_driver ov16a1q_i2c_driver = {
+	.driver = {
+		.name = OV16A1Q_NAME,
+		.pm = &ov16a1q_pm_ops,
+		.of_match_table = ov16a1q_of_match,
+	},
+	.probe		= &ov16a1q_probe,
+	.remove		= &ov16a1q_remove,
+	.id_table	= ov16a1q_match_id,
+};
+
+module_i2c_driver(ov16a1q_i2c_driver);
+
+MODULE_DESCRIPTION("OmniVision ov16a1q sensor driver");
+MODULE_AUTHOR("99degree <https://github.com/99degree>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/i2c/s5k5e9.c b/drivers/media/i2c/s5k5e9.c
new file mode 100644
index 00000000000000..73a6c018b76eeb
--- /dev/null
+++ b/drivers/media/i2c/s5k5e9.c
@@ -0,0 +1,1159 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+  * s5k5e9.c - s5k5e9 sensor driver
+  *
+  * Copyright 2018 Qtechnology A/S
+  * Ricardo Ribalda <ribalda@kernel.org>
+  * Copyright 2023 99degree <https://github.com/99degree>
+  *
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <linux/regulator/consumer.h>
+#include <media/media-entity.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-fwnode.h>
+#include <media/v4l2-subdev.h>
+
+#define S5K5E9_DEFAULT_CLK_FREQ	19200000
+#define S5K5E9_DEFAULT_LINK_FREQ 480000000
+#define S5K5E9_DEFAULT_PIXEL_RATE ((S5K5E9_DEFAULT_LINK_FREQ * 8LL) / 10)
+#define S5K5E9_FPS 30
+#define S5K5E9_MBUS_CODE MEDIA_BUS_FMT_SRGGB10_1X10
+
+/* it is an CAM0_RST_N gpio pin */
+#define S5K5E9_GPIO_ENABLE			0x0000
+
+/* register addr */
+#define S5K5E9_REG_SENSOR_ID			0x0000
+#define S5K5E9_SENSOR_ID_VAL			0x559b
+
+#define S5K5E9_REG_FRAMECNT			0x0005
+#define S5K5E9_FRAMECNT_IDLE		0xFF
+
+#define S5K5E9_REG_MODE_SELECT		0x0100
+#define S5K5E9_MODE_STANDBY			0x00
+#define S5K5E9_MODE_STREAMING		0x01
+
+#define S5K5E9_REG_MODE_FLIP		0x0101
+#define S5K5E9_MODE_FLIP_NONE		0x00
+#define S5K5E9_MODE_FLIP_H			0x01
+#define S5K5E9_MODE_FLIP_V			0x10
+#define S5K5E9_MODE_FLIP_HV			0x11
+
+#define S5K5E9_REG_HOLD				0x0104
+
+#define S5K5E9_REG_200				0x0200 /*unknown*/
+#define S5K5E9_REG_201				0x0201 /*unknown*/
+
+#define S5K5E9_REG_FRAME_LENGTH		0x0340
+#define S5K5E9_REG_LINE_LENGTH		0x0342
+/*		.linelength = 3112,
+		.framelength = 2030,
+*/
+
+#define S5K5E9_REG_UPDATE_DUMMY			0x3200
+#define S5K5E9_REG_UPDATE_DUMMY_VAL		0x00
+
+#define S5K5E9_REG_TEST_PATTERN			0x0601
+#define S5K5E9_REG_TEST_PATTERN_ENABLE		0x2
+#define S5K5E9_REG_TEST_PATTERN_DISABLE		0x0
+
+/* Exposure control */
+#define S5K5E9_REG_EXPOSURE		0x0202
+#define S5K5E9_EXPOSURE_MIN		0
+#define S5K5E9_EXPOSURE_MAX		3184
+#define S5K5E9_EXPOSURE_STEP		1
+#define S5K5E9_EXPOSURE_DEFAULT		3184
+
+#define S5K5E9_REG_ANA_GAIN				0x0204
+#define S5K5E9_ANA_GAIN_MIN             0
+#define S5K5E9_ANA_GAIN_MAX             232
+#define S5K5E9_ANA_GAIN_STEP            1
+#define S5K5E9_ANA_GAIN_DEFAULT         0x80
+
+/* S5K5E9 native and active pixel array size */
+#define S5K5E9_NATIVE_WIDTH		2592U
+#define S5K5E9_NATIVE_HEIGHT		1944U
+#define S5K5E9_PIXEL_ARRAY_LEFT		0U
+#define S5K5E9_PIXEL_ARRAY_TOP		2U
+#define S5K5E9_PIXEL_ARRAY_WIDTH	2592U
+#define S5K5E9_PIXEL_ARRAY_HEIGHT	1940U
+
+static const char * const s5k5e9_supply_name[] = {
+	"vdda",
+	"vddd",
+	"vdddo",
+};
+
+#define S5K5E9_NUM_SUPPLIES ARRAY_SIZE(s5k5e9_supply_name)
+
+struct s5k5e9 {
+	struct device *dev;
+	struct clk *xclk;
+	struct regmap *regmap;
+
+	struct v4l2_subdev sd;
+	struct media_pad pad;
+	struct v4l2_mbus_framefmt fmt;
+	struct v4l2_rect crop;
+
+	struct v4l2_ctrl_handler ctrls;
+	struct v4l2_ctrl *pixel_rate;
+	struct v4l2_ctrl *link_freq;
+	struct v4l2_ctrl *exposure;
+	struct v4l2_ctrl *unit_size;
+	struct v4l2_ctrl *a_gain;
+	struct v4l2_ctrl *h_blank;
+	struct v4l2_ctrl *v_blank;
+	struct v4l2_ctrl *test_pattern;
+
+	struct regulator_bulk_data	supplies[S5K5E9_NUM_SUPPLIES];
+
+	struct gpio_desc *enable_gpio;
+
+	/*
+	 * Serialize control access, get/set format, get selection
+	 * and start streaming.
+	 */
+	struct mutex mutex;
+};
+
+struct reg_8 {
+	u16 addr;
+	u8 val;
+};
+
+enum {
+	S5K5E9_TABLE_WAIT_MS = 0,
+	S5K5E9_TABLE_END,
+	S5K5E9_MAX_RETRIES,
+	S5K5E9_WAIT_MS
+};
+
+/*From s5k5e9_mode_tbls.h*/
+static const struct reg_8 mode_2592x1944[] = {
+	{0x0100, 0x00},
+	{0x0136, 0x13},
+	{0x0137, 0x33},
+	{0x0305, 0x03},
+	{0x0306, 0x00},
+	{0x0307, 0x59},
+	{0x030d, 0x03},
+	{0x030e, 0x00},
+	{0x030f, 0x89},
+	{0x3c1f, 0x00},
+	{0x3c17, 0x00},
+	{0x0112, 0x0a},
+	{0x0113, 0x0a},
+	{0x0114, 0x01},
+	{0x0820, 0x03},
+	{0x0821, 0x6c},
+	{0x0822, 0x00},
+	{0x0823, 0x00},
+	{0x3929, 0x0f},
+	{0x0344, 0x00},
+	{0x0345, 0x08},
+	{0x0346, 0x00},
+	{0x0347, 0x08},
+	{0x0348, 0x0a},
+	{0x0349, 0x27},
+	{0x034a, 0x07},
+	{0x034b, 0x9f},
+	{0x034c, 0x0a},
+	{0x034d, 0x20},
+	{0x034e, 0x07},
+	{0x034f, 0x98},
+	{0x0900, 0x00},
+	{0x0901, 0x00},
+	{0x0381, 0x01},
+	{0x0383, 0x01},
+	{0x0385, 0x01},
+	{0x0387, 0x01},
+	{0x0101, 0x00},
+	{0x0340, 0x07},
+	{0x0341, 0xee},
+	{0x0342, 0x0c},
+	{0x0343, 0x28},
+	{0x0200, 0x0b},
+	{0x0201, 0x9c},
+	{0x0202, 0x00},
+	{0x0203, 0x02},
+	{0x30b8, 0x2e},
+	{0x30ba, 0x36},
+	{0x0104, 0x00},
+	{0x0340, 0x07},
+	{0x0341, 0xee},
+	{0x0202, 0x00},
+	{0x0203, 0xa9},
+	{0x0204, 0x00},
+	{0x0205, 0x20},
+	{0x0104, 0x00},
+	{S5K5E9_TABLE_WAIT_MS, 10},
+//	{0x0138, 0x01},
+	{S5K5E9_TABLE_END, 0x00}
+};
+
+static const struct reg_8 mode_1920x1080[] = {
+
+	{S5K5E9_TABLE_WAIT_MS, 10},
+	{S5K5E9_TABLE_END, 0x00}
+};
+
+static const struct reg_8 mode_table_common[] = {
+	{0x0100, 0x00},
+	{0x3b45, 0x01},
+	{0x0b05, 0x01},
+	{0x392f, 0x01},
+	{0x3930, 0x00},
+	{0x3924, 0x7f},
+	{0x3925, 0xfd},
+	{0x3c08, 0xff},
+	{0x3c09, 0xff},
+	{0x3c0a, 0x05}, //allwinner init script do not have this
+	{0x3c31, 0xff},
+	{0x3c32, 0xff},
+	{0x3290, 0x10},
+	{0x3200, 0x01},
+	{0x3074, 0x06},
+	{0x3075, 0x2f},
+	{0x308a, 0x20},
+	{0x308b, 0x08},
+	{0x308c, 0x0b},
+	{0x3081, 0x07},
+	{0x307b, 0x85},
+	{0x307a, 0x0a},
+	{0x3079, 0x0a},
+	{0x306e, 0x71},
+	{0x306f, 0x28},
+	{0x301f, 0x20},
+	{0x3012, 0x4e},
+	{0x306b, 0x9a},
+	{0x3091, 0x16},
+	{0x30c4, 0x06},
+	{0x306a, 0x79},
+	{0x30b0, 0xff},
+	{0x306d, 0x08},
+	{0x3084, 0x16},
+	{0x3070, 0x0f},
+	{0x30c2, 0x05},
+	{0x3069, 0x87},
+	{0x3c0f, 0x00},
+	{0x0a02, 0x3f},
+	{0x3083, 0x14},
+	{0x3080, 0x08},
+	{0x3c34, 0xea},
+	{0x3c35, 0x5c},
+	{0x3931, 0x02},
+	{0x0601, 0x00}, /* disable test pattern */
+	{S5K5E9_TABLE_END, 0x00}
+};
+
+/*
+ * Declare modes in order, from biggest
+ * to smallest height.
+ */
+static const struct s5k5e9_mode {
+	u32 width;
+	u32 height;
+	const struct reg_8 *reg_table;
+} s5k5e9_modes[] = {
+	{
+		.width = 2592,
+		.height = 1944,
+		.reg_table = mode_2592x1944,
+	},
+	{
+		.width = 1920,
+		.height = 1080,
+		.reg_table = mode_1920x1080,
+	},
+};
+
+static inline struct s5k5e9 *to_s5k5e9(struct v4l2_subdev *sd)
+{
+	return container_of(sd, struct s5k5e9, sd);
+}
+
+static int __maybe_unused s5k5e9_power_on(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct s5k5e9 *s5k5e9 = to_s5k5e9(sd);
+	int ret;
+
+	ret = regulator_bulk_enable(S5K5E9_NUM_SUPPLIES, s5k5e9->supplies);
+	if (ret < 0) {
+		dev_err(s5k5e9->dev, "failed to enable regulators: %d\n", ret);
+		return ret;
+	}
+
+	usleep_range(2000, 3000);
+
+        ret = clk_set_rate(s5k5e9->xclk, S5K5E9_DEFAULT_CLK_FREQ);
+        if (ret) {
+                dev_err(dev, "could not set xclk frequency\n");
+                return ret;
+        }
+
+	ret = clk_prepare_enable(s5k5e9->xclk);
+	if (ret < 0) {
+		regulator_bulk_disable(S5K5E9_NUM_SUPPLIES, s5k5e9->supplies);
+		dev_err(s5k5e9->dev, "clk prepare enable failed\n");
+		return ret;
+	}
+
+	gpiod_set_value_cansleep(s5k5e9->enable_gpio, S5K5E9_GPIO_ENABLE);
+	usleep_range(12000, 15000);
+
+	return 0;
+}
+
+static int __maybe_unused s5k5e9_power_off(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct s5k5e9 *s5k5e9 = to_s5k5e9(sd);
+
+	gpiod_set_value_cansleep(s5k5e9->enable_gpio, !S5K5E9_GPIO_ENABLE);
+
+	clk_disable_unprepare(s5k5e9->xclk);
+
+	regulator_bulk_disable(S5K5E9_NUM_SUPPLIES, s5k5e9->supplies);
+	usleep_range(10, 20);
+
+	return 0;
+}
+
+static int s5k5e9_enum_mbus_code(struct v4l2_subdev *sd,
+				 struct v4l2_subdev_state *sd_state,
+				 struct v4l2_subdev_mbus_code_enum *code)
+{
+	if (code->index > 0)
+		return -EINVAL;
+
+	code->code = S5K5E9_MBUS_CODE;
+
+	return 0;
+}
+
+static int s5k5e9_enum_frame_size(struct v4l2_subdev *subdev,
+				  struct v4l2_subdev_state *sd_state,
+				  struct v4l2_subdev_frame_size_enum *fse)
+{
+	if (fse->code != S5K5E9_MBUS_CODE)
+		return -EINVAL;
+
+	if (fse->index >= ARRAY_SIZE(s5k5e9_modes))
+		return -EINVAL;
+
+	fse->min_width = fse->max_width = s5k5e9_modes[fse->index].width;
+	fse->min_height = fse->max_height = s5k5e9_modes[fse->index].height;
+
+	return 0;
+}
+
+#ifdef CONFIG_VIDEO_ADV_DEBUG
+static int s5k5e9_s_register(struct v4l2_subdev *subdev,
+			     const struct v4l2_dbg_register *reg)
+{
+	struct s5k5e9 *s5k5e9 = container_of(subdev, struct s5k5e9, sd);
+
+	return regmap_write(s5k5e9->regmap, reg->reg, reg->val);
+}
+
+static int s5k5e9_g_register(struct v4l2_subdev *subdev,
+			     struct v4l2_dbg_register *reg)
+{
+	struct s5k5e9 *s5k5e9 = container_of(subdev, struct s5k5e9, sd);
+	unsigned int aux;
+	int ret;
+
+	reg->size = 1;
+	ret = regmap_read(s5k5e9->regmap, reg->reg, &aux);
+	reg->val = aux;
+
+	return ret;
+}
+#endif
+
+static const struct v4l2_subdev_core_ops s5k5e9_core_ops = {
+#ifdef CONFIG_VIDEO_ADV_DEBUG
+	.g_register = s5k5e9_g_register,
+	.s_register = s5k5e9_s_register,
+#endif
+};
+
+static struct v4l2_mbus_framefmt *
+__s5k5e9_get_pad_format(struct s5k5e9 *s5k5e9,
+			struct v4l2_subdev_state *sd_state,
+			unsigned int pad,
+			enum v4l2_subdev_format_whence which)
+{
+	switch (which) {
+	case V4L2_SUBDEV_FORMAT_TRY:
+		return v4l2_subdev_state_get_format(sd_state, pad);
+	case V4L2_SUBDEV_FORMAT_ACTIVE:
+		return &s5k5e9->fmt;
+	default:
+		return NULL;
+	}
+}
+
+static int s5k5e9_get_format(struct v4l2_subdev *sd,
+			     struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_format *format)
+{
+	struct s5k5e9 *s5k5e9 = to_s5k5e9(sd);
+
+	mutex_lock(&s5k5e9->mutex);
+	format->format = *__s5k5e9_get_pad_format(s5k5e9, sd_state,
+						  format->pad,
+						  format->which);
+	mutex_unlock(&s5k5e9->mutex);
+
+	return 0;
+}
+
+static struct v4l2_rect *
+__s5k5e9_get_pad_crop(struct s5k5e9 *s5k5e9,
+		      struct v4l2_subdev_state *sd_state,
+		      unsigned int pad, enum v4l2_subdev_format_whence which)
+{
+	switch (which) {
+	case V4L2_SUBDEV_FORMAT_TRY:
+		return v4l2_subdev_state_get_crop(sd_state, pad);
+	case V4L2_SUBDEV_FORMAT_ACTIVE:
+		return &s5k5e9->crop;
+	default:
+		return NULL;
+	}
+}
+
+static int s5k5e9_set_format(struct v4l2_subdev *sd,
+			     struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_format *format)
+{
+	struct s5k5e9 *s5k5e9 = to_s5k5e9(sd);
+	struct v4l2_mbus_framefmt *__format;
+	struct v4l2_rect *__crop;
+	const struct s5k5e9_mode *mode;
+
+	mutex_lock(&s5k5e9->mutex);
+
+	__crop = __s5k5e9_get_pad_crop(s5k5e9, sd_state, format->pad,
+				       format->which);
+
+	mode = v4l2_find_nearest_size(s5k5e9_modes,
+				      ARRAY_SIZE(s5k5e9_modes), width, height,
+				      format->format.width,
+				      format->format.height);
+
+	__crop->width = mode->width;
+	__crop->height = mode->height;
+
+	__format = __s5k5e9_get_pad_format(s5k5e9, sd_state, format->pad,
+					   format->which);
+	__format->width = __crop->width;
+	__format->height = __crop->height;
+	__format->code = S5K5E9_MBUS_CODE;
+	__format->field = V4L2_FIELD_NONE;
+	__format->colorspace = V4L2_COLORSPACE_SRGB;
+	__format->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(__format->colorspace);
+	__format->quantization = V4L2_MAP_QUANTIZATION_DEFAULT(true,
+				__format->colorspace, __format->ycbcr_enc);
+	__format->xfer_func = V4L2_MAP_XFER_FUNC_DEFAULT(__format->colorspace);
+
+	format->format = *__format;
+
+	mutex_unlock(&s5k5e9->mutex);
+
+	return 0;
+}
+
+static int s5k5e9_get_selection(struct v4l2_subdev *sd,
+				struct v4l2_subdev_state *sd_state,
+				struct v4l2_subdev_selection *sel)
+{
+	struct s5k5e9 *s5k5e9 = to_s5k5e9(sd);
+
+	switch (sel->target) {
+	case V4L2_SEL_TGT_CROP:
+		mutex_lock(&s5k5e9->mutex);
+		sel->r = *__s5k5e9_get_pad_crop(s5k5e9, sd_state, sel->pad,
+						sel->which);
+		mutex_unlock(&s5k5e9->mutex);
+		return 0;
+
+	case V4L2_SEL_TGT_NATIVE_SIZE:
+		sel->r.top = 0;
+		sel->r.left = 0;
+		sel->r.width = S5K5E9_NATIVE_WIDTH;
+		sel->r.height = S5K5E9_NATIVE_HEIGHT;
+		return 0;
+
+	case V4L2_SEL_TGT_CROP_DEFAULT:
+	case V4L2_SEL_TGT_CROP_BOUNDS:
+		sel->r.top = S5K5E9_PIXEL_ARRAY_TOP;
+		sel->r.left = S5K5E9_PIXEL_ARRAY_LEFT;
+		sel->r.width = S5K5E9_PIXEL_ARRAY_WIDTH;
+		sel->r.height = S5K5E9_PIXEL_ARRAY_HEIGHT;
+		return 0;
+	}
+
+	return -EINVAL;
+}
+
+static int s5k5e9_entity_init_state(struct v4l2_subdev *subdev,
+				    struct v4l2_subdev_state *sd_state)
+{
+	struct v4l2_subdev_format fmt = { };
+
+	fmt.which = sd_state ? V4L2_SUBDEV_FORMAT_TRY : V4L2_SUBDEV_FORMAT_ACTIVE;
+	fmt.format.width = s5k5e9_modes[0].width;
+	fmt.format.height = s5k5e9_modes[0].height;
+
+	s5k5e9_set_format(subdev, sd_state, &fmt);
+
+	return 0;
+}
+
+static int s5k5e9_set_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct s5k5e9 *s5k5e9 = container_of(ctrl->handler,
+					     struct s5k5e9, ctrls);
+	u8 vals[2];
+	int ret;
+
+	/*
+	 * Applying V4L2 control value only happens
+	 * when power is up for streaming
+	 */
+	if (!pm_runtime_get_if_in_use(s5k5e9->dev))
+		return 0;
+
+	switch (ctrl->id) {
+	case V4L2_CID_EXPOSURE:
+		ret = regmap_write(s5k5e9->regmap, S5K5E9_REG_HOLD, 1);
+
+		vals[1] = ctrl->val;
+		vals[0] = ctrl->val >> 8;
+		ret = regmap_bulk_write(s5k5e9->regmap, S5K5E9_REG_EXPOSURE, vals, 2);
+		if (ret < 0)
+			dev_err(s5k5e9->dev, "Error %d\n", ret);
+
+		ret = regmap_write(s5k5e9->regmap, S5K5E9_REG_HOLD, 0);
+		/* dont let it fail */
+		ret = 0;
+		break;
+	case V4L2_CID_ANALOGUE_GAIN:
+		ret = regmap_write(s5k5e9->regmap, S5K5E9_REG_HOLD, 1);
+
+		vals[0] = ((ctrl->val * 2) >> 8) & 0xff;
+		vals[1] = (ctrl->val * 2) & 0xff;
+		ret = regmap_bulk_write(s5k5e9->regmap, S5K5E9_REG_ANA_GAIN, vals, 2);
+		if (ret < 0)
+			dev_err(s5k5e9->dev, "Error %d\n", ret);
+
+		ret = regmap_write(s5k5e9->regmap, S5K5E9_REG_HOLD, 0);
+		/* dont let it fail */
+		ret = 0;
+		break;
+	case V4L2_CID_TEST_PATTERN:
+		dev_info(s5k5e9->dev, "test pattern set %s", (ctrl->val > 0)? "on": "off");
+		if (ctrl->val > 0)
+			ret = regmap_write(s5k5e9->regmap, S5K5E9_REG_TEST_PATTERN, S5K5E9_REG_TEST_PATTERN_ENABLE);
+		else
+			ret = regmap_write(s5k5e9->regmap, S5K5E9_REG_TEST_PATTERN, S5K5E9_REG_TEST_PATTERN_DISABLE);
+		if (ret < 0)
+			dev_err(s5k5e9->dev, "Error %d\n", ret);
+
+		vals[0] = 0;
+		ret = regmap_bulk_write(s5k5e9->regmap, S5K5E9_REG_UPDATE_DUMMY, vals, 1);
+		if (ret < 0)
+			dev_err(s5k5e9->dev, "Error %d\n", ret);
+
+		ret = 0;
+		break;
+	default:
+		dev_info(s5k5e9->dev, "%s ctrl not handled 0x%x", __func__, ctrl->id);
+		ret = -EINVAL;
+		/* dont let it fail */
+		ret = 0;
+	}
+
+	pm_runtime_put(s5k5e9->dev);
+
+	return ret;
+}
+
+static const struct v4l2_ctrl_ops s5k5e9_ctrl_ops = {
+	.s_ctrl = s5k5e9_set_ctrl,
+};
+
+static const char * const s5k5e9_test_pattern_menu[] = {
+	"Disabled",
+	"Vertical Color Bar Type 1",
+};
+
+static int s5k5e9_ctrls_init(struct s5k5e9 *s5k5e9)
+{
+	static const s64 link_freq[] = {
+		S5K5E9_DEFAULT_LINK_FREQ
+	};
+	static const struct v4l2_area unit_size = {
+		.width = 1120,
+		.height = 1120,
+	};
+	struct v4l2_fwnode_device_properties props;
+	struct v4l2_ctrl_handler *ctrl_hdlr;
+	int ret;
+
+	ret = v4l2_fwnode_device_parse(s5k5e9->dev, &props);
+	if (ret < 0)
+		return ret;
+
+	ctrl_hdlr = &s5k5e9->ctrls;
+	ret = v4l2_ctrl_handler_init(&s5k5e9->ctrls, 8);
+	if (ret)
+		return ret;
+
+	ctrl_hdlr->lock = &s5k5e9->mutex;
+
+/*
+        // Mandatory control by libcamera
+                V4L2_CID_ANALOGUE_GAIN, //missing
+                V4L2_CID_EXPOSURE,
+                V4L2_CID_HBLANK,      //missing
+                V4L2_CID_PIXEL_RATE,
+                V4L2_CID_VBLANK,        //missing
+*/
+
+	s5k5e9->pixel_rate = v4l2_ctrl_new_std(ctrl_hdlr, &s5k5e9_ctrl_ops,
+					       V4L2_CID_PIXEL_RATE, 0,
+					       S5K5E9_DEFAULT_PIXEL_RATE, 1,
+					       S5K5E9_DEFAULT_PIXEL_RATE);
+
+	if (!s5k5e9->pixel_rate)
+		dev_err(s5k5e9->dev, "%s ctrl fail", "pixel_rate");
+
+	s5k5e9->link_freq = v4l2_ctrl_new_int_menu(ctrl_hdlr, &s5k5e9_ctrl_ops,
+						   V4L2_CID_LINK_FREQ,
+						   ARRAY_SIZE(link_freq) - 1,
+						   0, link_freq);
+	if (s5k5e9->link_freq)
+		s5k5e9->link_freq->flags |= V4L2_CTRL_FLAG_READ_ONLY;
+
+	if (!s5k5e9->link_freq)
+		dev_err(s5k5e9->dev, "%s ctrl fail", "link_freq");
+
+	/*
+	 * WARNING!
+	 * Values obtained reverse engineering blobs and/or devices.
+	 * Ranges and functionality might be wrong.
+	 *
+	 * Sony, please release some register set documentation for the
+	 * device.
+	 *
+	 * Yours sincerely, Ricardo.
+	 */
+	s5k5e9->exposure = v4l2_ctrl_new_std(ctrl_hdlr, &s5k5e9_ctrl_ops,
+					     V4L2_CID_EXPOSURE,
+					     S5K5E9_EXPOSURE_MIN,
+					     S5K5E9_EXPOSURE_MAX,
+					     S5K5E9_EXPOSURE_STEP,
+					     S5K5E9_EXPOSURE_DEFAULT);
+
+	if (!s5k5e9->exposure)
+		dev_err(s5k5e9->dev, "%s ctrl fail", "exposure");
+
+	s5k5e9->test_pattern = v4l2_ctrl_new_std_menu_items(ctrl_hdlr, &s5k5e9_ctrl_ops,
+					V4L2_CID_TEST_PATTERN,
+					ARRAY_SIZE(s5k5e9_test_pattern_menu) - 1,
+					0, 0, s5k5e9_test_pattern_menu);
+
+	if (!s5k5e9->test_pattern)
+		dev_err(s5k5e9->dev, "%s ctrl fail", "test_pattern");
+
+#define ANALOG_GAIN_MIN                 0x10
+#define ANALOG_GAIN_MAX                 0xf8
+#define ANALOG_GAIN_STEP                1
+#define ANALOG_GAIN_DEFAULT             0xf8
+
+	s5k5e9->a_gain = v4l2_ctrl_new_std(ctrl_hdlr, &s5k5e9_ctrl_ops,
+                                V4L2_CID_ANALOGUE_GAIN, ANALOG_GAIN_MIN,
+                                ANALOG_GAIN_MAX, ANALOG_GAIN_STEP,
+                                ANALOG_GAIN_DEFAULT);
+
+	if (!s5k5e9->a_gain)
+		dev_err(s5k5e9->dev, "%s ctrl fail", "a_gain");
+
+	s5k5e9->h_blank = v4l2_ctrl_new_std(ctrl_hdlr, &s5k5e9_ctrl_ops,
+					V4L2_CID_HBLANK,
+					0, 0xffff, 1, 0); /* not impl atm */
+	if (s5k5e9->h_blank)
+			s5k5e9->h_blank->flags |= V4L2_CTRL_FLAG_READ_ONLY;
+
+	if (!s5k5e9->h_blank)
+		dev_err(s5k5e9->dev, "%s ctrl fail", "h_blank");
+
+	s5k5e9->v_blank = v4l2_ctrl_new_std(ctrl_hdlr, &s5k5e9_ctrl_ops,
+									   V4L2_CID_VBLANK, 0x0808 /* 30fps */,
+									   0xffff, 1, 0x0808);
+	if (s5k5e9->v_blank)
+			s5k5e9->v_blank->flags |= V4L2_CTRL_FLAG_READ_ONLY;
+
+	if (!s5k5e9->v_blank)
+		dev_err(s5k5e9->dev, "%s ctrl fail", "v_blank");
+
+	s5k5e9->unit_size = v4l2_ctrl_new_std_compound(ctrl_hdlr,
+				&s5k5e9_ctrl_ops,
+				V4L2_CID_UNIT_CELL_SIZE,
+				v4l2_ctrl_ptr_create((void *)&unit_size));
+
+	if (!s5k5e9->unit_size)
+		dev_err(s5k5e9->dev, "%s ctrl fail", "unit_size");
+
+	v4l2_ctrl_new_fwnode_properties(ctrl_hdlr, &s5k5e9_ctrl_ops, &props);
+
+	ret = ctrl_hdlr->error;
+	if (ret) {
+		v4l2_ctrl_handler_free(ctrl_hdlr);
+		dev_err(s5k5e9->dev, "failed to add controls: %d\n", ret);
+		return ret;
+	}
+
+	s5k5e9->sd.ctrl_handler = ctrl_hdlr;
+
+	return 0;
+};
+
+#if 0
+static void framelength() {
+	dummy_line = frame_length - imgsensor.frame_length;
+	imgsensor.frame_length = imgsensor.frame_length + dummy_line;
+	imgsensor.min_frame_length = imgsensor.frame_length;
+
+	if (shutter > imgsensor.min_frame_length - imgsensor_info.margin)
+		imgsensor.frame_length = shutter + imgsensor_info.margin;
+	else
+		imgsensor.frame_length = imgsensor.min_frame_length;
+	if (imgsensor.frame_length > imgsensor_info.max_frame_length)
+		imgsensor.frame_length = imgsensor_info.max_frame_length;
+	spin_unlock(&imgsensor_drv_lock);
+	shutter = (shutter < imgsensor_info.min_shutter) ?
+		imgsensor_info.min_shutter : shutter;
+	shutter = (shutter > (imgsensor_info.max_frame_length -
+		imgsensor_info.margin)) ? (imgsensor_info.max_frame_length -
+		imgsensor_info.margin) : shutter;
+
+	if (imgsensor.autoflicker_en) {
+		realtime_fps = imgsensor.pclk /
+			imgsensor.line_length * 10 / imgsensor.frame_length;
+		if (realtime_fps >= 297 && realtime_fps <= 305)
+			set_max_framerate(296, 0);
+		else if (realtime_fps >= 147 && realtime_fps <= 150)
+			set_max_framerate(146, 0);
+		else {
+			// Extend frame length
+			write_cmos_sensor_8(0x0340, imgsensor.frame_length >> 8);
+			write_cmos_sensor_8(0x0341, imgsensor.frame_length & 0xFF);
+		}
+	} else {
+		// Extend frame length
+		write_cmos_sensor_8(0x0340, imgsensor.frame_length >> 8);
+		write_cmos_sensor_8(0x0341, imgsensor.frame_length & 0xFF);
+	}
+
+	// Update Shutter
+	write_cmos_sensor_8(0x0202, (shutter >> 8) & 0xFF);
+	write_cmos_sensor_8(0x0203, shutter & 0xFF);
+
+}
+#endif
+
+#define MAX_CMD 4
+static int s5k5e9_write_table(struct s5k5e9 *s5k5e9,
+			      const struct reg_8 table[])
+{
+	u8 vals[MAX_CMD];
+	int i;
+	int ret;
+
+	for (; table->addr != S5K5E9_TABLE_END ; table++) {
+		if (table->addr == S5K5E9_TABLE_WAIT_MS) {
+			usleep_range(table->val * 1000,
+				     table->val * 1000 + 500);
+			continue;
+		}
+
+		for (i = 0; i < MAX_CMD; i++) {
+			if (table[i].addr != (table[0].addr + i))
+				break;
+			vals[i] = table[i].val;
+		}
+
+		ret = regmap_bulk_write(s5k5e9->regmap, table->addr, vals, i);
+
+		if (ret) {
+			dev_err(s5k5e9->dev, "write_table error: %d\n", ret);
+			return ret;
+		}
+
+		table += i - 1;
+	}
+
+	return 0;
+}
+
+static int s5k5e9_start_streaming(struct s5k5e9 *s5k5e9)
+{
+	const struct s5k5e9_mode *mode;
+	int ret;
+
+	mutex_lock(&s5k5e9->mutex);
+	ret = s5k5e9_write_table(s5k5e9, mode_table_common);
+	if (ret < 0) {
+		dev_err(s5k5e9->dev, "could not sent common table %d\n", ret);
+		goto error;
+	}
+
+	mode = v4l2_find_nearest_size(s5k5e9_modes,
+				ARRAY_SIZE(s5k5e9_modes), width, height,
+				s5k5e9->fmt.width, s5k5e9->fmt.height);
+	ret = s5k5e9_write_table(s5k5e9, mode->reg_table);
+	if (ret < 0) {
+		dev_err(s5k5e9->dev, "could not sent mode table %d\n", ret);
+		goto error;
+	}
+	ret = __v4l2_ctrl_handler_setup(&s5k5e9->ctrls);
+	if (ret < 0) {
+		dev_err(s5k5e9->dev, "could not sync v4l2 controls\n");
+		goto error;
+	}
+
+/*
+	write_cmos_sensor_8(0x0202, (shutter >> 8) & 0xFF);
+	write_cmos_sensor_8(0x0203, shutter & 0xFF);
+
+	write_cmos_sensor_8(0x0340, imgsensor.frame_length >> 8);
+	write_cmos_sensor_8(0x0341, imgsensor.frame_length & 0xFF);
+	write_cmos_sensor_8(0x0342, imgsensor.line_length >> 8);
+	write_cmos_sensor_8(0x0343, imgsensor.line_length & 0xFF);
+*/
+	ret = regmap_write(s5k5e9->regmap, S5K5E9_REG_MODE_SELECT, S5K5E9_MODE_STREAMING);
+	if (ret < 0) {
+		dev_err(s5k5e9->dev, "could not sent start table %d\n", ret);
+		goto error;
+	}
+
+	mutex_unlock(&s5k5e9->mutex);
+	return 0;
+
+error:
+	mutex_unlock(&s5k5e9->mutex);
+	return ret;
+}
+
+static int s5k5e9_stop_streaming(struct s5k5e9 *s5k5e9)
+{
+	int ret;
+
+	ret = regmap_write(s5k5e9->regmap, S5K5E9_REG_MODE_SELECT, S5K5E9_MODE_STANDBY);
+	if (ret < 0)
+		dev_err(s5k5e9->dev, "could not sent stop table %d\n",	ret);
+
+	return ret;
+}
+
+static int s5k5e9_s_stream(struct v4l2_subdev *subdev, int enable)
+{
+	struct s5k5e9 *s5k5e9 = to_s5k5e9(subdev);
+	int ret;
+
+	if (enable) {
+		ret = pm_runtime_resume_and_get(s5k5e9->dev);
+		if (ret < 0)
+			return ret;
+
+		ret = s5k5e9_start_streaming(s5k5e9);
+		if (ret < 0)
+			goto err_rpm_put;
+	} else {
+		ret = s5k5e9_stop_streaming(s5k5e9);
+		if (ret < 0)
+			goto err_rpm_put;
+		pm_runtime_put(s5k5e9->dev);
+	}
+
+	return 0;
+
+err_rpm_put:
+	pm_runtime_put(s5k5e9->dev);
+	return ret;
+}
+
+static int s5k5e9_get_frame_interval(struct v4l2_subdev *subdev,
+				     struct v4l2_subdev_state *sd_state,
+				     struct v4l2_subdev_frame_interval *fival)
+{
+	/*
+	 * FIXME: Implement support for V4L2_SUBDEV_FORMAT_TRY, using the V4L2
+	 * subdev active state API.
+	 */
+	if (fival->which != V4L2_SUBDEV_FORMAT_ACTIVE)
+		return -EINVAL;
+
+	fival->interval.numerator = 1;
+	fival->interval.denominator = S5K5E9_FPS;
+
+	return 0;
+}
+
+static int s5k5e9_enum_frame_interval(struct v4l2_subdev *subdev,
+				struct v4l2_subdev_state *sd_state,
+				struct v4l2_subdev_frame_interval_enum *fie)
+{
+	const struct s5k5e9_mode *mode;
+
+	if (fie->index != 0)
+		return -EINVAL;
+
+	mode = v4l2_find_nearest_size(s5k5e9_modes,
+				ARRAY_SIZE(s5k5e9_modes), width, height,
+				fie->width, fie->height);
+
+	fie->code = S5K5E9_MBUS_CODE;
+	fie->width = mode->width;
+	fie->height = mode->height;
+	fie->interval.numerator = 1;
+	fie->interval.denominator = S5K5E9_FPS;
+
+	return 0;
+}
+
+static const struct v4l2_subdev_video_ops s5k5e9_video_ops = {
+	.s_stream = s5k5e9_s_stream,
+};
+
+static const struct v4l2_subdev_pad_ops s5k5e9_subdev_pad_ops = {
+	.enum_mbus_code = s5k5e9_enum_mbus_code,
+	.enum_frame_size = s5k5e9_enum_frame_size,
+	.enum_frame_interval = s5k5e9_enum_frame_interval,
+	.get_fmt = s5k5e9_get_format,
+	.set_fmt = s5k5e9_set_format,
+	.get_selection = s5k5e9_get_selection,
+	.get_frame_interval = s5k5e9_get_frame_interval,
+	.set_frame_interval = s5k5e9_get_frame_interval,
+};
+
+static const struct v4l2_subdev_ops s5k5e9_subdev_ops = {
+	.core = &s5k5e9_core_ops,
+	.video = &s5k5e9_video_ops,
+	.pad = &s5k5e9_subdev_pad_ops,
+};
+
+static const struct v4l2_subdev_internal_ops s5k5e9_internal_ops = {
+	.init_state = s5k5e9_entity_init_state,
+};
+
+static const struct regmap_config sensor_regmap_config = {
+	.reg_bits = 16,
+	.val_bits = 8,
+	.cache_type = REGCACHE_MAPLE,
+};
+
+static int s5k5e9_get_regulators(struct device *dev, struct s5k5e9 *s5k5e9)
+{
+	unsigned int i;
+
+	for (i = 0; i < S5K5E9_NUM_SUPPLIES; i++)
+		s5k5e9->supplies[i].supply = s5k5e9_supply_name[i];
+
+	return devm_regulator_bulk_get(dev, S5K5E9_NUM_SUPPLIES,
+				       s5k5e9->supplies);
+}
+
+static int s5k5e9_parse_fwnode(struct device *dev)
+{
+	struct fwnode_handle *endpoint;
+	struct v4l2_fwnode_endpoint bus_cfg = {
+		.bus_type = V4L2_MBUS_CSI2_DPHY,
+	};
+	unsigned int i;
+	int ret;
+
+	endpoint = fwnode_graph_get_next_endpoint(dev_fwnode(dev), NULL);
+	if (!endpoint) {
+		dev_err(dev, "endpoint node not found\n");
+		return -EINVAL;
+	}
+
+	ret = v4l2_fwnode_endpoint_alloc_parse(endpoint, &bus_cfg);
+	if (ret) {
+		dev_err(dev, "parsing endpoint node failed\n");
+		goto done;
+	}
+
+	for (i = 0; i < bus_cfg.nr_of_link_frequencies; i++)
+		if (bus_cfg.link_frequencies[i] == S5K5E9_DEFAULT_LINK_FREQ)
+			break;
+
+	if (i == bus_cfg.nr_of_link_frequencies) {
+		dev_err(dev, "link-frequencies %d not supported, Please review your DT\n",
+			S5K5E9_DEFAULT_LINK_FREQ);
+		ret = -EINVAL;
+		goto done;
+	}
+
+done:
+	v4l2_fwnode_endpoint_free(&bus_cfg);
+	fwnode_handle_put(endpoint);
+	return ret;
+}
+
+static int s5k5e9_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct s5k5e9 *s5k5e9;
+	int ret;
+
+	ret = s5k5e9_parse_fwnode(dev);
+	if (ret)
+		return ret;
+
+	s5k5e9 = devm_kzalloc(dev, sizeof(*s5k5e9), GFP_KERNEL);
+	if (!s5k5e9)
+		return -ENOMEM;
+
+	s5k5e9->dev = dev;
+
+	s5k5e9->xclk = devm_clk_get(dev, NULL);
+	if (IS_ERR(s5k5e9->xclk)) {
+		dev_err(dev, "could not get xclk");
+		return PTR_ERR(s5k5e9->xclk);
+	}
+
+	ret = clk_set_rate(s5k5e9->xclk, S5K5E9_DEFAULT_CLK_FREQ);
+	if (ret) {
+		dev_err(dev, "could not set xclk frequency\n");
+		return ret;
+	}
+
+	ret = s5k5e9_get_regulators(dev, s5k5e9);
+	if (ret < 0) {
+		dev_err(dev, "cannot get regulators\n");
+		return ret;
+	}
+
+	s5k5e9->enable_gpio = devm_gpiod_get(dev, "enable", GPIOD_OUT_LOW);
+	if (IS_ERR(s5k5e9->enable_gpio)) {
+		dev_err(dev, "cannot get enable gpio\n");
+		return PTR_ERR(s5k5e9->enable_gpio);
+	}
+
+	s5k5e9->regmap = devm_regmap_init_i2c(client, &sensor_regmap_config);
+	if (IS_ERR(s5k5e9->regmap)) {
+		dev_err(dev, "regmap init failed\n");
+		return PTR_ERR(s5k5e9->regmap);
+	}
+
+	v4l2_i2c_subdev_init(&s5k5e9->sd, client, &s5k5e9_subdev_ops);
+	s5k5e9->sd.internal_ops = &s5k5e9_internal_ops;
+
+	/*
+	 * Enable power initially, to avoid warnings
+	 * from clk_disable on power_off
+	 */
+	s5k5e9_power_on(s5k5e9->dev);
+
+	pm_runtime_set_active(s5k5e9->dev);
+	pm_runtime_enable(s5k5e9->dev);
+	pm_runtime_idle(s5k5e9->dev);
+
+	mutex_init(&s5k5e9->mutex);
+	
+	ret = s5k5e9_ctrls_init(s5k5e9);
+	if (ret < 0)
+		goto error_power_off;
+
+	s5k5e9->ctrls.lock = &s5k5e9->mutex;
+
+	s5k5e9->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+	s5k5e9->pad.flags = MEDIA_PAD_FL_SOURCE;
+	s5k5e9->sd.dev = &client->dev;
+	s5k5e9->sd.entity.function = MEDIA_ENT_F_CAM_SENSOR;
+
+	ret = media_entity_pads_init(&s5k5e9->sd.entity, 1, &s5k5e9->pad);
+	if (ret < 0) {
+		dev_err(dev, "could not register media entity\n");
+		goto free_ctrl;
+	}
+
+	s5k5e9_entity_init_state(&s5k5e9->sd, NULL);
+
+	ret = v4l2_async_register_subdev_sensor(&s5k5e9->sd);
+	if (ret < 0) {
+		dev_err(dev, "could not register v4l2 device\n");
+		goto free_entity;
+	}
+
+	return 0;
+
+free_entity:
+	media_entity_cleanup(&s5k5e9->sd.entity);
+free_ctrl:
+	mutex_destroy(&s5k5e9->mutex);
+	v4l2_ctrl_handler_free(&s5k5e9->ctrls);
+error_power_off:
+	pm_runtime_disable(s5k5e9->dev);
+
+	return ret;
+}
+
+static void s5k5e9_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct s5k5e9 *s5k5e9 = to_s5k5e9(sd);
+
+	v4l2_async_unregister_subdev(&s5k5e9->sd);
+	media_entity_cleanup(&s5k5e9->sd.entity);
+	v4l2_ctrl_handler_free(&s5k5e9->ctrls);
+
+	pm_runtime_disable(&client->dev);
+	pm_runtime_set_suspended(&client->dev);
+
+	mutex_destroy(&s5k5e9->mutex);
+}
+
+static const struct of_device_id s5k5e9_of_match[] = {
+	{ .compatible = "sony,s5k5e9" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, s5k5e9_of_match);
+
+static const struct dev_pm_ops s5k5e9_pm_ops = {
+	SET_RUNTIME_PM_OPS(s5k5e9_power_off, s5k5e9_power_on, NULL)
+};
+
+static struct i2c_driver s5k5e9_i2c_driver = {
+	.driver = {
+		.of_match_table = s5k5e9_of_match,
+		.pm = &s5k5e9_pm_ops,
+		.name  = "s5k5e9",
+	},
+	.probe = s5k5e9_probe,
+	.remove = s5k5e9_remove,
+};
+
+module_i2c_driver(s5k5e9_i2c_driver);
+
+MODULE_DESCRIPTION("Sony S5K5E9 Camera driver");
+MODULE_AUTHOR("Ricardo Ribalda <ribalda@kernel.org>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/platform/qcom/camss/camss-csiphy-3ph-1-0.c b/drivers/media/platform/qcom/camss/camss-csiphy-3ph-1-0.c
index df7e93a5a4f6e2..6782f57565ebe9 100644
--- a/drivers/media/platform/qcom/camss/camss-csiphy-3ph-1-0.c
+++ b/drivers/media/platform/qcom/camss/camss-csiphy-3ph-1-0.c
@@ -348,6 +348,136 @@ csiphy_reg_t lane_regs_sm8250[5][20] = {
 	},
 };
 
+/* GEN2 1.2.2 2PH */
+static const struct
+csiphy_reg_t lane_regs_sc7180[5][23] = {
+	{
+		{0x0030, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0904, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0910, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0900, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0908, 0x06, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0904, 0x07, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x002c, 0x01, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0034, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0010, 0x50, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x001c, 0x0a, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0014, 0x60, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0028, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x003c, 0xb8, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0000, 0x91, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0004, 0x0c, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0020, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0008, 0x10, 0x00, CSIPHY_SETTLE_CNT_LOWER_BYTE},
+		{0x0010, 0x52, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0038, 0xfe, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x005c, 0xc0, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0060, 0x0d, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0800, 0x02, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0000, 0x00, 0x00, CSIPHY_DNP_PARAMS},
+	},
+	{
+		{0x0730, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c84, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c90, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c80, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c88, 0x06, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c84, 0x07, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x072c, 0x01, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0734, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0710, 0x50, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x071c, 0x0a, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0714, 0x60, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0728, 0x04, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x073c, 0xb8, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0700, 0x80, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0704, 0x0c, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0720, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0708, 0x04, 0x00, CSIPHY_SETTLE_CNT_LOWER_BYTE},
+		{0x070c, 0xff, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0710, 0x52, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0738, 0x1f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0800, 0x02, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0000, 0x00, 0x00, CSIPHY_DNP_PARAMS},
+		{0x0000, 0x00, 0x00, CSIPHY_DNP_PARAMS},
+	},
+	{
+		{0x0230, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0a04, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0a10, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0a00, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0a08, 0x06, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0a04, 0x07, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x022c, 0x01, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0234, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0210, 0x50, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x021c, 0x0a, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0214, 0x60, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0228, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x023c, 0xb8, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0200, 0x91, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0204, 0x0c, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0220, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0208, 0x04, 0x00, CSIPHY_SETTLE_CNT_LOWER_BYTE},
+		{0x0210, 0x52, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0238, 0xfe, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x025c, 0xc0, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0260, 0x0d, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0800, 0x02, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0000, 0x00, 0x00, CSIPHY_DNP_PARAMS},
+	},
+	{
+		{0x0430, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0b04, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0b10, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0b00, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0b08, 0x06, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0b04, 0x07, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x042c, 0x01, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0434, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0410, 0x50, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x041c, 0x0a, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0414, 0x60, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0428, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x043c, 0xb8, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0400, 0x91, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0404, 0x0c, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0420, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0408, 0x04, 0x00, CSIPHY_SETTLE_CNT_LOWER_BYTE},
+		{0x0410, 0x52, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0438, 0xfe, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x045c, 0xc0, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0460, 0x0d, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0800, 0x02, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0000, 0x00, 0x00, CSIPHY_DNP_PARAMS},
+	},
+	{
+		{0x0630, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c04, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c10, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c00, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c08, 0x06, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0c04, 0x07, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x062c, 0x01, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0634, 0x0f, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0610, 0x50, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x061c, 0x0a, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0614, 0x60, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0628, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x063c, 0xb8, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0600, 0x91, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0604, 0x0c, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0620, 0x00, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0608, 0x04, 0x00, CSIPHY_SETTLE_CNT_LOWER_BYTE},
+		{0x0610, 0x52, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0638, 0xfe, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x065c, 0xc0, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0660, 0x0d, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0800, 0x02, 0x00, CSIPHY_DEFAULT_PARAMS},
+		{0x0000, 0x00, 0x00, CSIPHY_DNP_PARAMS},
+	},
+};
+
 static void csiphy_hw_version_read(struct csiphy_device *csiphy,
 				   struct device *dev)
 {
@@ -509,6 +639,10 @@ static void csiphy_gen2_config_lanes(struct csiphy_device *csiphy,
 		r = &lane_regs_sdm845[0][0];
 		array_size = ARRAY_SIZE(lane_regs_sdm845[0]);
 		break;
+	case CAMSS_7180:
+		r = &lane_regs_sc7180[0][0];
+		array_size = ARRAY_SIZE(lane_regs_sc7180[0]);
+		break;
 	case CAMSS_8250:
 		r = &lane_regs_sm8250[0][0];
 		array_size = ARRAY_SIZE(lane_regs_sm8250[0]);
@@ -558,6 +692,7 @@ static bool csiphy_is_gen2(u32 version)
 
 	switch (version) {
 	case CAMSS_845:
+	case CAMSS_7180:
 	case CAMSS_8250:
 	case CAMSS_8280XP:
 		ret = true;
diff --git a/drivers/media/platform/qcom/camss/camss-vfe.c b/drivers/media/platform/qcom/camss/camss-vfe.c
index 83c5a36d071fcc..05191cc2c2f936 100644
--- a/drivers/media/platform/qcom/camss/camss-vfe.c
+++ b/drivers/media/platform/qcom/camss/camss-vfe.c
@@ -336,6 +336,7 @@ static u32 vfe_src_pad_code(struct vfe_line *line, u32 sink_code,
 	case CAMSS_8x96:
 	case CAMSS_660:
 	case CAMSS_845:
+	case CAMSS_7180:
 	case CAMSS_8250:
 	case CAMSS_8280XP:
 		switch (sink_code) {
@@ -1693,6 +1694,7 @@ static int vfe_bpl_align(struct vfe_device *vfe)
 
 	switch (vfe->camss->res->version) {
 	case CAMSS_845:
+	case CAMSS_7180:
 	case CAMSS_8250:
 	case CAMSS_8280XP:
 		ret = 16;
diff --git a/drivers/media/platform/qcom/camss/camss.c b/drivers/media/platform/qcom/camss/camss.c
index d64985ca6e884f..abf3dddf927bc7 100644
--- a/drivers/media/platform/qcom/camss/camss.c
+++ b/drivers/media/platform/qcom/camss/camss.c
@@ -834,6 +834,244 @@ static const struct camss_subdev_resources vfe_res_845[] = {
 	}
 };
 
+static const struct camss_subdev_resources csiphy_res_7180[] = {
+	/* CSIPHY0 */
+	{
+		.regulators = {},
+		.clock = {
+			"csiphy0",
+			"csiphy0_timer"
+		},
+		.clock_rate = {
+			{ 150000000, 270000000, 360000000 },
+			{ 300000000 },
+		},
+		.reg = { "csiphy0" },
+		.interrupt = { "csiphy0" },
+		.csiphy = {
+			.hw_ops = &csiphy_ops_3ph_1_0,
+			.formats = &csiphy_formats_sdm845
+		}
+	},
+	/* CSIPHY1 */
+	{
+		.regulators = {},
+		.clock = {
+			"csiphy1",
+			"csiphy1_timer"
+		},
+		.clock_rate = {
+			{ 150000000, 270000000, 360000000 },
+			{ 300000000 },
+		},
+		.reg = { "csiphy1" },
+		.interrupt = { "csiphy1" },
+		.csiphy = {
+			.hw_ops = &csiphy_ops_3ph_1_0,
+			.formats = &csiphy_formats_sdm845
+		}
+	},
+	/* CSIPHY2 */
+	{
+		.regulators = {},
+		.clock = {
+			"csiphy2",
+			"csiphy2_timer"
+		},
+		.clock_rate = {
+			{ 150000000, 270000000, 360000000 },
+			{ 300000000 },
+		},
+		.reg = { "csiphy2" },
+		.interrupt = { "csiphy2" },
+		.csiphy = {
+			.hw_ops = &csiphy_ops_3ph_1_0,
+			.formats = &csiphy_formats_sdm845
+		}
+	},
+	/* CSIPHY3 */
+	{
+		.regulators = {},
+		.clock = {
+			"csiphy3",
+			"csiphy3_timer"
+		},
+		.clock_rate = {
+			{ 150000000, 270000000, 360000000 },
+			{ 300000000 },
+		},
+		.reg = { "csiphy3" },
+		.interrupt = { "csiphy3" },
+		.csiphy = {
+			.hw_ops = &csiphy_ops_3ph_1_0,
+			.formats = &csiphy_formats_sdm845
+		}
+	}
+};
+
+static const struct camss_subdev_resources csid_res_7180[] = {
+	/* CSID0 */
+	{
+		.regulators = { "vdda-phy", "vdda-pll" },
+		.clock = {
+			"soc_ahb",
+			"vfe0",
+			"vfe0_cphy_rx",
+			"csi0"
+		},
+		.clock_rate = {
+			{ 0 },
+			{ 240000000, 360000000, 432000000, 600000000 },
+			{ 150000000, 270000000, 360000000 },
+			{ 150000000, 270000000, 360000000, 480000000 },
+		},
+		.reg = { "csid0" },
+		.interrupt = { "csid0" },
+		.csid = {
+			.hw_ops = &csid_ops_gen2,
+			.parent_dev_ops = &vfe_parent_dev_ops,
+			.formats = &csid_formats_gen2
+		}
+	},
+	/* CSID1 */
+	{
+		.regulators = { "vdda-phy", "vdda-pll" },
+		.clock = {
+			"soc_ahb",
+			"vfe1",
+			"vfe1_cphy_rx",
+			"csi1",
+		},
+		.clock_rate = {
+			{ 0 },
+			{ 240000000, 360000000, 432000000, 600000000 },
+			{ 150000000, 270000000, 360000000 },
+			{ 150000000, 270000000, 360000000, 480000000 },
+		},
+		.reg = { "csid1" },
+		.interrupt = { "csid1" },
+		.csid = {
+			.hw_ops = &csid_ops_gen2,
+			.parent_dev_ops = &vfe_parent_dev_ops,
+			.formats = &csid_formats_gen2
+		}
+	},
+	/* CSID2 */
+	{
+		.regulators = { "vdda-phy", "vdda-pll" },
+		.clock = {
+			"soc_ahb",
+			"vfe_lite",
+			"vfe_lite_cphy_rx",
+			"csi2",
+		},
+		.clock_rate = {
+			{ 0 },
+			{ 240000000, 360000000, 432000000, 600000000 },
+			{ 150000000, 270000000, 360000000 },
+			{ 150000000, 270000000, 360000000, 480000000 },
+		},
+		.reg = { "csid2" },
+		.interrupt = { "csid2" },
+		.csid = {
+			.is_lite = true,
+			.hw_ops = &csid_ops_gen2,
+			.parent_dev_ops = &vfe_parent_dev_ops,
+			.formats = &csid_formats_gen2
+		}
+	}
+};
+
+static const struct camss_subdev_resources vfe_res_7180[] = {
+	/* VFE0 */
+	{
+		.regulators = {},
+		.clock = {
+			"camnoc_axi",
+			"cpas_ahb",
+			"soc_ahb",
+			"vfe0",
+			"vfe0_axi",
+			"csi0",
+		},
+		.clock_rate = {
+			{ 0 },
+			{ 0 },
+			{ 0 },
+			{ 19200000, 240000000, 360000000, 432000000, 600000000 },
+			{ 0 },
+			{ 150000000, 270000000, 360000000, 480000000 },
+		},
+		.reg = { "vfe0" },
+		.interrupt = { "vfe0" },
+		.vfe = {
+			.line_num = 4,
+			.has_pd = true,
+			.pd_name = "ife0",
+			.hw_ops = &vfe_ops_170,
+			.formats_rdi = &vfe_formats_rdi_845,
+			.formats_pix = &vfe_formats_pix_845
+		}
+	},
+	/* VFE1 */
+	{
+		.regulators = {},
+		.clock = {
+			"camnoc_axi",
+			"cpas_ahb",
+			"soc_ahb",
+			"vfe1",
+			"vfe1_axi",
+			"csi1",
+		},
+		.clock_rate = {
+			{ 0 },
+			{ 0 },
+			{ 0 },
+			{ 19200000, 240000000, 360000000, 432000000, 600000000 },
+			{ 0 },
+			{ 150000000, 270000000, 360000000, 480000000 },
+		},
+		.reg = { "vfe1" },
+		.interrupt = { "vfe1" },
+		.vfe = {
+			.line_num = 4,
+			.has_pd = true,
+			.pd_name = "ife1",
+			.hw_ops = &vfe_ops_170,
+			.formats_rdi = &vfe_formats_rdi_845,
+			.formats_pix = &vfe_formats_pix_845
+		}
+	},
+	/* VFE-lite */
+	{
+		.regulators = {},
+		.clock = {
+			"camnoc_axi",
+			"cpas_ahb",
+			"soc_ahb",
+			"vfe_lite",
+			"csi2",
+		},
+		.clock_rate = {
+			{ 0 },
+			{ 0 },
+			{ 0 },
+			{ 19200000, 240000000, 360000000, 432000000, 600000000 },
+			{ 150000000, 270000000, 360000000, 480000000 },
+		},
+		.reg = { "vfe_lite" },
+		.interrupt = { "vfe_lite" },
+		.vfe = {
+			.is_lite = true,
+			.line_num = 4,
+			.hw_ops = &vfe_ops_170,
+			.formats_rdi = &vfe_formats_rdi_845,
+			.formats_pix = &vfe_formats_pix_845
+		}
+	}
+};
+
 static const struct camss_subdev_resources csiphy_res_8250[] = {
 	/* CSIPHY0 */
 	{
@@ -2415,6 +2653,18 @@ static const struct camss_resources sdm845_resources = {
 	.link_entities = camss_link_entities
 };
 
+static const struct camss_resources sc7180_resources = {
+	.version = CAMSS_7180,
+	.pd_name = "top",
+	.csiphy_res = csiphy_res_7180,
+	.csid_res = csid_res_7180,
+	.vfe_res = vfe_res_7180,
+	.csiphy_num = ARRAY_SIZE(csiphy_res_7180),
+	.csid_num = ARRAY_SIZE(csid_res_7180),
+	.vfe_num = ARRAY_SIZE(vfe_res_7180),
+	.link_entities = camss_link_entities
+};
+
 static const struct camss_resources sm8250_resources = {
 	.version = CAMSS_8250,
 	.pd_name = "top",
@@ -2449,6 +2699,7 @@ static const struct of_device_id camss_dt_match[] = {
 	{ .compatible = "qcom,msm8996-camss", .data = &msm8996_resources },
 	{ .compatible = "qcom,sdm660-camss", .data = &sdm660_resources },
 	{ .compatible = "qcom,sdm845-camss", .data = &sdm845_resources },
+	{ .compatible = "qcom,sc7180-camss", .data = &sc7180_resources },
 	{ .compatible = "qcom,sm8250-camss", .data = &sm8250_resources },
 	{ .compatible = "qcom,sc8280xp-camss", .data = &sc8280xp_resources },
 	{ }
diff --git a/drivers/media/platform/qcom/camss/camss.h b/drivers/media/platform/qcom/camss/camss.h
index 73c47c07fc30c5..867e275db4bec8 100644
--- a/drivers/media/platform/qcom/camss/camss.h
+++ b/drivers/media/platform/qcom/camss/camss.h
@@ -77,6 +77,7 @@ enum camss_version {
 	CAMSS_8x96,
 	CAMSS_660,
 	CAMSS_845,
+	CAMSS_7180,
 	CAMSS_8250,
 	CAMSS_8280XP,
 };
diff --git a/drivers/media/platform/qcom/venus/hfi_msgs.c b/drivers/media/platform/qcom/venus/hfi_msgs.c
index 0a041b4db9efc5..cc789578e97597 100644
--- a/drivers/media/platform/qcom/venus/hfi_msgs.c
+++ b/drivers/media/platform/qcom/venus/hfi_msgs.c
@@ -283,6 +283,11 @@ sys_get_prop_image_version(struct venus_core *core,
 	if (ret)
 		goto done;
 
+	ret = sscanf(img_ver, "14:VIDEO.IR.%u.%u-%u",
+			&core->venus_ver.major, &core->venus_ver.minor, &core->venus_ver.rev);
+	if (ret)
+		goto done;
+
 	dev_err(dev, VDBGL "error reading F/W version\n");
 	return;
 
diff --git a/drivers/power/reset/qcom-pon.c b/drivers/power/reset/qcom-pon.c
index 1344b361a47514..6807b61cb09ccd 100644
--- a/drivers/power/reset/qcom-pon.c
+++ b/drivers/power/reset/qcom-pon.c
@@ -48,7 +48,7 @@ static int pm8916_pon_probe(struct platform_device *pdev)
 {
 	struct pm8916_pon *pon;
 	long reason_shift;
-	int error;
+	int error, ret;
 
 	pon = devm_kzalloc(&pdev->dev, sizeof(*pon), GFP_KERNEL);
 	if (!pon)
@@ -82,7 +82,11 @@ static int pm8916_pon_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, pon);
 
-	return devm_of_platform_populate(&pdev->dev);
+	ret = devm_of_platform_populate(&pdev->dev);
+
+	pm8916_reboot_mode_write(&pon->reboot_mode, 2);
+
+	return ret;
 }
 
 static const struct of_device_id pm8916_pon_id_table[] = {
diff --git a/drivers/power/supply/Kconfig b/drivers/power/supply/Kconfig
index bcfa63fb9f1e20..56b6adec51876c 100644
--- a/drivers/power/supply/Kconfig
+++ b/drivers/power/supply/Kconfig
@@ -192,6 +192,16 @@ config BATTERY_QCOM_BATTMGR
 	  which is used on modern Qualcomm platforms to provide battery and
 	  power supply information.
 
+config BATTERY_QCOM_QG
+	tristate "Qualcomm PMIC QGauge driver"
+	depends on MFD_SPMI_PMIC
+	depends on IIO
+	help
+	  Say Y here to enable the Qualcomm Technologies, Inc. QGauge driver
+	  which uses the periodic sampling of the battery voltage and current
+	  to determine the battery state-of-charge (SOC) and supports other
+	  battery management features.
+
 config BATTERY_OLPC
 	tristate "One Laptop Per Child battery"
 	depends on OLPC_EC
@@ -636,6 +646,19 @@ config CHARGER_MT6370
 	  This driver can also be built as a module. If so, the module
 	  will be called "mt6370-charger".
 
+config CHARGER_QCOM_SMB5
+	tristate "Qualcomm Switch-Mode Battery Charger and Boost"
+	depends on MFD_SPMI_PMIC || COMPILE_TEST
+	help
+	  Say Y to enables support for the SMB5 charging peripheral.
+	  The QPNP SMB5 charger driver supports the charger peripheral
+	  present in the chip.
+	  The power supply framework is used to communicate battery and
+	  usb properties to userspace and other driver consumers such
+	  as fuel gauge, USB, and USB-PD.
+	  VBUS and VCONN regulators are registered for supporting OTG,
+	  and powered Type-C cables respectively.
+
 config CHARGER_QCOM_SMBB
 	tristate "Qualcomm Switch-Mode Battery Charger and Boost"
 	depends on MFD_SPMI_PMIC || COMPILE_TEST
diff --git a/drivers/power/supply/Makefile b/drivers/power/supply/Makefile
index 8dcb4154531718..380f70446a9a6b 100644
--- a/drivers/power/supply/Makefile
+++ b/drivers/power/supply/Makefile
@@ -35,6 +35,7 @@ obj-$(CONFIG_BATTERY_LEGO_EV3)	+= lego_ev3_battery.o
 obj-$(CONFIG_BATTERY_LENOVO_YOGA_C630) += lenovo_yoga_c630_battery.o
 obj-$(CONFIG_BATTERY_PMU)	+= pmu_battery.o
 obj-$(CONFIG_BATTERY_QCOM_BATTMGR)	+= qcom_battmgr.o
+obj-$(CONFIG_BATTERY_QCOM_QG)	+= qcom_qg.o
 obj-$(CONFIG_BATTERY_OLPC)	+= olpc_battery.o
 obj-$(CONFIG_BATTERY_SAMSUNG_SDI)	+= samsung-sdi-battery.o
 obj-$(CONFIG_BATTERY_COLLIE)	+= collie_battery.o
@@ -85,6 +86,7 @@ obj-$(CONFIG_CHARGER_MAX8998)	+= max8998_charger.o
 obj-$(CONFIG_CHARGER_MP2629)	+= mp2629_charger.o
 obj-$(CONFIG_CHARGER_MT6360)	+= mt6360_charger.o
 obj-$(CONFIG_CHARGER_MT6370)	+= mt6370-charger.o
+obj-$(CONFIG_CHARGER_QCOM_SMB5)	+= qcom_smb5.o
 obj-$(CONFIG_CHARGER_QCOM_SMBB)	+= qcom_smbb.o
 obj-$(CONFIG_BATTERY_PM8916_BMS_VM)	+= pm8916_bms_vm.o
 obj-$(CONFIG_CHARGER_PM8916_LBC)	+= pm8916_lbc.o
diff --git a/drivers/power/supply/qcom_qg.c b/drivers/power/supply/qcom_qg.c
new file mode 100644
index 00000000000000..b3d6a870ab67a5
--- /dev/null
+++ b/drivers/power/supply/qcom_qg.c
@@ -0,0 +1,252 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2024, Danila Tikhonov <danila@jiaxyga.com>
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/power_supply.h>
+#include <linux/iio/consumer.h>
+#include <linux/regmap.h>
+
+/* SRAM */
+#define QG_SRAM_BASE	0xb600
+
+/* BATT offsets */
+#define QG_S2_NORMAL_AVG_V_DATA0_REG	0x80 /* 2-byte 0x80-0x81 */
+#define QG_S2_NORMAL_AVG_I_DATA0_REG	0x82 /* 2-byte 0x82-0x83 */
+#define QG_LAST_ADC_V_DATA0_REG		0xc0 /* 2-byte 0xc0-0xc1 */
+#define QG_LAST_ADC_I_DATA0_REG		0xc2 /* 2-byte 0xc2-0xc3 */
+
+/* SRAM offsets */
+#define QG_SDAM_OCV_OFFSET		0x4c /* 4-byte 0x4c-0x4f */
+#define QG_SDAM_LEARNED_CAPACITY_OFFSET	0x68 /* 2-byte 0x68-0x69 */
+
+struct qcom_qg_chip {
+	struct device *dev;
+	struct regmap *regmap;
+	unsigned int base;
+
+	struct iio_channel *batt_therm_chan;
+	struct iio_channel *batt_id_chan;
+
+	struct power_supply *batt_psy;
+	struct power_supply_battery_info *batt_info;
+};
+
+static int qcom_qg_get_current(struct qcom_qg_chip *chip, u8 offset, int *val)
+{
+	s16 temp;
+	u8 readval[2];
+	int ret;
+
+	ret = regmap_bulk_read(chip->regmap, chip->base + offset, readval, 2);
+	if (ret) {
+		dev_err(chip->dev, "Failed to read current: %d\n", ret);
+		return ret;
+	}
+
+	temp = (s16)(readval[1] << 8 | readval[0]);
+	*val = div_s64((s64)temp * 152588, 1000);
+
+	return 0;
+}
+
+static int qcom_qg_get_voltage(struct qcom_qg_chip *chip, u8 offset, int *val)
+{
+	int ret, temp;
+	u8 readval[2];
+
+	ret = regmap_bulk_read(chip->regmap, chip->base + offset, readval, 2);
+	if (ret) {
+		dev_err(chip->dev, "Failed to read voltage: %d\n", ret);
+		return ret;
+	}
+
+	temp = readval[1] << 8 | readval[0];
+	*val = div_u64((u64)temp * 194637, 1000);
+
+	return 0;
+}
+
+static int qcom_qg_get_capacity(struct qcom_qg_chip *chip, int *val)
+{
+	int ret, temp, ocv;
+
+	ret = regmap_raw_read(chip->regmap,
+			QG_SRAM_BASE + QG_SDAM_OCV_OFFSET, &ocv, 4);
+	if (ret) {
+		dev_err(chip->dev,
+			"Failed to get open-circuit voltage: %d\n", ret);
+		return ret;
+	}
+
+	ret = iio_read_channel_processed(chip->batt_therm_chan, &temp);
+	if (ret)
+		dev_dbg(chip->dev, "Failed to get temperature: %d\n", ret);
+
+	*val = power_supply_batinfo_ocv2cap(chip->batt_info, ocv, temp /= 1000);
+
+	return 0;
+}
+
+static enum power_supply_property qcom_qg_props[] = {
+	POWER_SUPPLY_PROP_STATUS,
+	POWER_SUPPLY_PROP_TECHNOLOGY,
+	POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN,
+	POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN,
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
+	POWER_SUPPLY_PROP_VOLTAGE_AVG,
+	POWER_SUPPLY_PROP_VOLTAGE_OCV,
+	POWER_SUPPLY_PROP_CURRENT_NOW,
+	POWER_SUPPLY_PROP_CURRENT_AVG,
+	POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
+	POWER_SUPPLY_PROP_CHARGE_FULL,
+	POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_TEMP,
+};
+
+static int qcom_qg_get_property(struct power_supply *psy,
+				enum power_supply_property psp,
+				union power_supply_propval *val)
+{
+	struct qcom_qg_chip *chip = power_supply_get_drvdata(psy);
+	int ret;
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_STATUS:
+		val->intval = POWER_SUPPLY_STATUS_UNKNOWN;
+		break;
+	case POWER_SUPPLY_PROP_TECHNOLOGY:
+		val->intval = POWER_SUPPLY_TECHNOLOGY_LIPO;
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN:
+		val->intval = chip->batt_info->voltage_max_design_uv;
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN:
+		val->intval = chip->batt_info->voltage_min_design_uv;
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+		ret = qcom_qg_get_voltage(chip,
+				QG_LAST_ADC_V_DATA0_REG, &val->intval);
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_AVG:
+		ret = qcom_qg_get_voltage(chip,
+				QG_S2_NORMAL_AVG_V_DATA0_REG, &val->intval);
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_OCV:
+		ret = regmap_raw_read(chip->regmap,
+			QG_SRAM_BASE + QG_SDAM_OCV_OFFSET, &val->intval, 4);
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_NOW:
+		ret = qcom_qg_get_current(chip,
+				QG_LAST_ADC_I_DATA0_REG, &val->intval);
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_AVG:
+		ret = qcom_qg_get_current(chip,
+				QG_S2_NORMAL_AVG_I_DATA0_REG, &val->intval);
+		break;
+	case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN:
+		val->intval = chip->batt_info->charge_full_design_uah;
+		break;
+	case POWER_SUPPLY_PROP_CHARGE_FULL:
+		ret = regmap_raw_read(chip->regmap, QG_SRAM_BASE +
+				QG_SDAM_LEARNED_CAPACITY_OFFSET, &val->intval, 2);
+		if (!ret) val->intval *= 1000; /* mah to uah */
+		break;
+	case POWER_SUPPLY_PROP_CAPACITY:
+		ret = qcom_qg_get_capacity(chip, &val->intval);
+		break;
+	case POWER_SUPPLY_PROP_TEMP:
+		ret = iio_read_channel_processed
+					(chip->batt_therm_chan, &val->intval);
+		break;
+	default:
+		dev_err(chip->dev, "invalid property: %d\n", psp);
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static struct power_supply_desc batt_psy_desc = {
+	.name = "qcom_qg",
+	.type = POWER_SUPPLY_TYPE_BATTERY,
+	.properties = qcom_qg_props,
+	.num_properties = ARRAY_SIZE(qcom_qg_props),
+	.get_property = qcom_qg_get_property,
+};
+
+static int qcom_qg_probe(struct platform_device *pdev)
+{
+	struct qcom_qg_chip *chip;
+	struct power_supply_config psy_cfg = {};
+	int ret;
+
+	chip = devm_kzalloc(&pdev->dev, sizeof(*chip), GFP_KERNEL);
+	if (!chip)
+		return -ENOMEM;
+
+	chip->dev = &pdev->dev;
+
+	/* Regmap */
+	chip->regmap = dev_get_regmap(pdev->dev.parent, NULL);
+	if (!chip->regmap)
+		return dev_err_probe(chip->dev, -ENODEV,
+				     "Failed to locate the regmap\n");
+
+	/* Get base address */
+	ret = device_property_read_u32(chip->dev, "reg", &chip->base);
+	if (ret < 0)
+		return dev_err_probe(chip->dev, ret,
+				     "Couldn't read base address\n");
+
+	/* ADC for thermal channel */
+	chip->batt_therm_chan = devm_iio_channel_get(&pdev->dev, "batt-therm");
+	if (IS_ERR(chip->batt_therm_chan))
+		return dev_err_probe(chip->dev, PTR_ERR(chip->batt_therm_chan),
+				     "Couldn't get batt-therm IIO channel\n");
+
+	psy_cfg.drv_data = chip;
+	psy_cfg.of_node = pdev->dev.of_node;
+
+	/* Power supply */
+	chip->batt_psy =
+		devm_power_supply_register(chip->dev, &batt_psy_desc, &psy_cfg);
+	if (IS_ERR(chip->batt_psy))
+		return dev_err_probe(chip->dev, PTR_ERR(chip->batt_psy),
+				     "Failed to register power supply\n");
+
+	/* Battery info */
+	ret = power_supply_get_battery_info(chip->batt_psy, &chip->batt_info);
+	if (ret)
+		return dev_err_probe(chip->dev, ret,
+				     "Failed to get battery info\n");
+
+	platform_set_drvdata(pdev, chip);
+
+	return 0;
+}
+
+static const struct of_device_id qcom_qg_of_match[] = {
+	{ .compatible = "qcom,pm6150-qg", },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, qcom_qg_of_match);
+
+static struct platform_driver qcom_qg_driver = {
+	.driver = {
+		.name = "qcom,qcom_qg",
+		.of_match_table = qcom_qg_of_match,
+	},
+	.probe = qcom_qg_probe,
+};
+
+module_platform_driver(qcom_qg_driver);
+
+MODULE_AUTHOR("Danila Tikhonov <danila@jiaxyga.com>");
+MODULE_DESCRIPTION("Qualcomm PMIC QGauge (QG) driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/power/supply/qcom_smb5.c b/drivers/power/supply/qcom_smb5.c
new file mode 100644
index 00000000000000..af3b890fa1e4fc
--- /dev/null
+++ b/drivers/power/supply/qcom_smb5.c
@@ -0,0 +1,118 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2024, Danila Tikhonov <danila@jiaxyga.com>
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/power_supply.h>
+#include <linux/iio/consumer.h>
+#include <linux/regmap.h>
+
+struct smb5_chip {
+	struct device *dev;
+	const char *name;
+	unsigned int base;
+	struct regmap *regmap;
+
+	struct power_supply *chg_psy;
+	struct power_supply_battery_info *batt_info;
+};
+
+static enum power_supply_property smb5_props[] = {
+	POWER_SUPPLY_PROP_MANUFACTURER,
+};
+
+static int smb5_get_property(struct power_supply *psy,
+			     enum power_supply_property psp,
+			     union power_supply_propval *val)
+{
+	struct smb5_chip *chip = power_supply_get_drvdata(psy);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_MANUFACTURER:
+		val->strval = "Qualcomm";
+		return 0;
+	default:
+		dev_err(chip->dev, "invalid property: %d\n", psp);
+		return -EINVAL;
+	}
+}
+
+static const struct power_supply_desc smb5_psy_desc = {
+	.name = "smb5_charger",
+	.type = POWER_SUPPLY_TYPE_USB,
+	.properties = smb5_props,
+	.num_properties = ARRAY_SIZE(smb5_props),
+	.get_property = smb5_get_property,
+};
+
+static int smb5_probe(struct platform_device *pdev)
+{
+	struct power_supply_config psy_cfg = {};
+	struct smb5_chip *chip;
+	int ret;
+
+	chip = devm_kzalloc(&pdev->dev, sizeof(*chip), GFP_KERNEL);
+	if (!chip)
+		return -ENOMEM;
+
+	chip->dev = &pdev->dev;
+	chip->name = pdev->name;
+
+	/* Regmap */
+	chip->regmap = dev_get_regmap(pdev->dev.parent, NULL);
+	if (!chip->regmap)
+		return dev_err_probe(chip->dev, -ENODEV,
+				     "Failed to locate the regmap\n");
+
+	/* Get base address */
+	ret = device_property_read_u32(chip->dev, "reg", &chip->base);
+	if (ret < 0)
+		return dev_err_probe(chip->dev, ret,
+				     "Couldn't read base address\n");
+
+	psy_cfg.drv_data = chip;
+	psy_cfg.of_node = pdev->dev.of_node;
+
+	/* Charger power supply */
+	chip->chg_psy =
+		devm_power_supply_register(chip->dev, &smb5_psy_desc, &psy_cfg);
+	if (IS_ERR(chip->chg_psy))
+		return dev_err_probe(chip->dev, PTR_ERR(chip->chg_psy),
+				     "Failed to register power supply\n");
+
+	/* Battery info */
+	ret = power_supply_get_battery_info(chip->chg_psy, &chip->batt_info);
+	if (ret)
+		return dev_err_probe(chip->dev, ret,
+				     "Failed to get battery info\n");
+
+	platform_set_drvdata(pdev, chip);
+
+	return 0;
+}
+
+static const struct of_device_id smb5_of_match[] = {
+	{ .compatible = "qcom,pm6150-charger", },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, smb5_of_match);
+
+static struct platform_driver smb5_driver = {
+	.driver = {
+		.name = "qcom,smb5",
+		.of_match_table = smb5_of_match,
+	},
+	.probe = smb5_probe,
+};
+
+module_platform_driver(smb5_driver);
+
+MODULE_AUTHOR("Danila Tikhonov <danila@jiaxyga.com>");
+MODULE_DESCRIPTION("Qualcomm PMIC smb5 Charger Driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/soc/qcom/qcom_pd_mapper.c b/drivers/soc/qcom/qcom_pd_mapper.c
index c940f4da28ed5c..c909f837c45bca 100644
--- a/drivers/soc/qcom/qcom_pd_mapper.c
+++ b/drivers/soc/qcom/qcom_pd_mapper.c
@@ -552,6 +552,7 @@ static const struct of_device_id qcom_pdm_domains[] __maybe_unused = {
 	{ .compatible = "qcom,sm4250", .data = sm6115_domains, },
 	{ .compatible = "qcom,sm6115", .data = sm6115_domains, },
 	{ .compatible = "qcom,sm6350", .data = sm6350_domains, },
+	{ .compatible = "qcom,sm7125", .data = sc7180_domains, },
 	{ .compatible = "qcom,sm7325", .data = sc7280_domains, },
 	{ .compatible = "qcom,sm8150", .data = sm8150_domains, },
 	{ .compatible = "qcom,sm8250", .data = sm8250_domains, },
diff --git a/drivers/usb/gadget/Kconfig b/drivers/usb/gadget/Kconfig
index 566ff0b1282a82..3ce0f547719d26 100644
--- a/drivers/usb/gadget/Kconfig
+++ b/drivers/usb/gadget/Kconfig
@@ -235,6 +235,17 @@ config USB_CONFIGFS
 	  appropriate symbolic links.
 	  For more information see Documentation/usb/gadget_configfs.rst.
 
+config ANDROID_USB_CONFIGFS_UEVENT
+	bool "Uevent notification of Gadget State"
+	depends on USB_CONFIGFS
+	help
+	  Enable uevent notifications to userspace when gadget state changes.
+	  The gadget can be in any of the following three states:
+	  "CONNECTED", "DISCONNECTED" or "CONFIGURED".
+	  Additionally, selecting this will create the android_usb class of
+	  devices, including a "state" attribute for the android_device which
+	  shows the gadget state.
+
 config USB_CONFIGFS_SERIAL
 	bool "Generic serial bulk in/out"
 	depends on USB_CONFIGFS
diff --git a/drivers/usb/gadget/Makefile b/drivers/usb/gadget/Makefile
index 33f1ef91b0464f..370b393032f419 100644
--- a/drivers/usb/gadget/Makefile
+++ b/drivers/usb/gadget/Makefile
@@ -8,5 +8,6 @@ subdir-ccflags-$(CONFIG_USB_GADGET_VERBOSE)	+= -DVERBOSE_DEBUG
 obj-$(CONFIG_USB_LIBCOMPOSITE)	+= libcomposite.o
 libcomposite-y			:= usbstring.o config.o epautoconf.o
 libcomposite-y			+= composite.o functions.o configfs.o u_f.o
+libcomposite-$(CONFIG_ANDROID_USB_CONFIGFS_UEVENT) += android_configfs_uevent.o
 
 obj-$(CONFIG_USB_GADGET)	+= udc/ function/ legacy/
diff --git a/drivers/usb/gadget/android_configfs_uevent.c b/drivers/usb/gadget/android_configfs_uevent.c
new file mode 100644
index 00000000000000..5cd2de61000f42
--- /dev/null
+++ b/drivers/usb/gadget/android_configfs_uevent.c
@@ -0,0 +1,328 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright 2011-2024 Google LLC
+ */
+#include "android_configfs_uevent.h"
+#include <linux/device.h>
+#include <linux/device/class.h>
+#include <linux/err.h>
+#include <linux/kdev_t.h>
+#include <linux/spinlock.h>
+
+static struct android_uevent_opts *android_opts;
+
+static DEFINE_SPINLOCK(opts_lock);
+static DEFINE_IDA(android_ida);
+
+static void android_work(struct work_struct *data)
+{
+	struct android_uevent_opts *opts = container_of(data,
+			struct android_uevent_opts, work);
+
+	char *disconnected_strs[2] = { "USB_STATE=DISCONNECTED", NULL };
+	char *connected_strs[2] = { "USB_STATE=CONNECTED", NULL };
+	char *configured_strs[2] = { "USB_STATE=CONFIGURED", NULL };
+	unsigned long flags;
+	bool disconnected = false;
+	bool connected = false;
+	bool configured = false;
+	bool uevent_sent = false;
+	struct device *dev;
+
+	/*
+	 * I believe locking is important due to the fact that we are checking
+	 * several conditions here, and if the state changes after checking one
+	 * we could potentially drop a uevent to userspace. Additionally, we
+	 * want to prevent teardown until after events are sent.
+	 */
+	spin_lock_irqsave(&opts_lock, flags);
+
+	/*
+	 * If the device does not exist, it means we were torn down after
+	 * scheduling this work, but before the work ran, so return to prevent
+	 * use after free.
+	 */
+	if (!opts->dev) {
+		spin_unlock_irqrestore(&opts_lock, flags);
+		return;
+	}
+
+	/*
+	 * Cache the dev pointer in the locked area incase it gets cleared by
+	 * android_device_destroy() after we release the lock. The call to
+	 * flush_work in the cleanup path ensures we finish our work prior to
+	 * destroying the dev which we have cached the pointer to. Ideally,
+	 * this would be handled differently (using reference counting), but
+	 * for now this should work.
+	 */
+	dev = opts->dev;
+
+	if (opts->connected != opts->sw_connected) {
+		if (opts->connected)
+			connected = true;
+		else
+			disconnected = true;
+		opts->sw_connected = opts->connected;
+	}
+	if (opts->configured)
+		configured = true;
+
+	spin_unlock_irqrestore(&opts_lock, flags);
+
+	/*
+	 * This is an abuse of uevents, however the android userspace parses
+	 * the uevent string for information instead of reading the state from
+	 * sysfs entries. This is one of several things about this driver which
+	 * would need to change to upstream it. In an attempt to keep the
+	 * exising userspace api unmodified until either an upstream solution
+	 * is implemented or this functionality is otherwise replaced, leave
+	 * the pre-existing logic in place.
+	 */
+	if (connected) {
+		if (kobject_uevent_env(&dev->kobj, KOBJ_CHANGE,
+				       connected_strs)) {
+			dev_err(dev, "Failed to send connected uevent\n");
+		} else {
+			dev_dbg(dev, "sent uevent %s\n", connected_strs[0]);
+			uevent_sent = true;
+		}
+	}
+
+	if (configured) {
+		if (kobject_uevent_env(&dev->kobj, KOBJ_CHANGE,
+					configured_strs)) {
+			dev_err(dev, "Failed to send configured uevent\n");
+		} else {
+			dev_dbg(dev, "sent uevent %s\n", configured_strs[0]);
+			uevent_sent = true;
+		}
+	}
+
+	if (disconnected) {
+		if (kobject_uevent_env(&dev->kobj, KOBJ_CHANGE,
+					disconnected_strs)) {
+			dev_err(dev, "Failed to send disconnected uevent\n");
+		} else {
+			dev_dbg(dev, "sent uevent %s\n", disconnected_strs[0]);
+			uevent_sent = true;
+		}
+	}
+
+	if (!uevent_sent) {
+		/*
+		 * This is an odd case, but not necessarily an error- the state
+		 * of the device may have changed since the work was scheduled,
+		 * and if the state changed, there is likely another scheduled
+		 *  work which will send a uevent.
+		 */
+		dev_dbg(dev, "did not send uevent\n");
+	}
+}
+
+static ssize_t state_show(struct device *pdev,
+		struct device_attribute *attr,
+		char *buf)
+{
+	struct android_uevent_opts *opts = dev_get_drvdata(pdev);
+	char *state = "DISCONNECTED";
+
+	if (opts->configured)
+		state = "CONFIGURED";
+	else if (opts->connected)
+		state = "CONNECTED";
+
+	return sysfs_emit(buf, "%s\n", state);
+}
+static DEVICE_ATTR_RO(state);
+
+static struct attribute *android_usb_attrs[] = {
+	&dev_attr_state.attr,
+	NULL,
+};
+
+ATTRIBUTE_GROUPS(android_usb);
+
+static struct class android_usb_class = {
+	.name = "android_usb",
+	.dev_groups = android_usb_groups,
+};
+
+int android_class_create(void)
+{
+	return class_register(&android_usb_class);
+}
+EXPORT_SYMBOL_GPL(android_class_create);
+
+void android_class_destroy(void)
+{
+	class_unregister(&android_usb_class);
+}
+EXPORT_SYMBOL_GPL(android_class_destroy);
+
+int android_device_create(struct android_uevent_opts *opts)
+{
+	unsigned long flags;
+	struct device *dev;
+
+	spin_lock_irqsave(&opts_lock, flags);
+	INIT_WORK(&opts->work, android_work);
+
+	opts->device_id = ida_alloc(&android_ida, GFP_ATOMIC);
+	//Unlock prior to calling device_create() since it may sleep
+	spin_unlock_irqrestore(&opts_lock, flags);
+	if (opts->device_id < 0)
+		return opts->device_id;
+
+	dev = device_create(&android_usb_class, NULL, MKDEV(0, 0),
+			       opts, "android%d", opts->device_id);
+
+	spin_lock_irqsave(&opts_lock, flags);
+	if (IS_ERR(dev)) {
+		ida_free(&android_ida, opts->device_id);
+		opts->device_id = -1;
+		spin_unlock_irqrestore(&opts_lock, flags);
+		return PTR_ERR(dev);
+	}
+	opts->dev = dev;
+	ida_init(&opts->function_ida);
+	if (!android_opts)
+		android_opts = opts;
+	spin_unlock_irqrestore(&opts_lock, flags);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(android_device_create);
+
+void android_device_destroy(struct android_uevent_opts *opts)
+{
+	unsigned long flags;
+	struct device *dev;
+
+	/*
+	 * This scheme is used to safely cleanup any remaining work. Once
+	 * opts->dev is set to NULL, any newly scheduled work will return
+	 * after getting the lock and checking for NULL. Any currently
+	 * running work finishes with the flush_work (the worker caches
+	 * opts->dev so it can continue), before we free the device.
+	 *
+	 * Ideally, this cleanup would be handled via reference counting, but
+	 * there are nuances around device destroy (or the fact that we are
+	 * currently statically allocating opts) which prevent this from
+	 * being implemented without a significant refactor.
+	 */
+	spin_lock_irqsave(&opts_lock, flags);
+	dev = opts->dev;
+	opts->dev = NULL;
+	spin_unlock_irqrestore(&opts_lock, flags);
+
+	flush_work(&opts->work);
+
+	spin_lock_irqsave(&opts_lock, flags);
+	if (opts->device_id >= 0)
+		ida_free(&android_ida, opts->device_id);
+
+	android_opts = NULL;
+	ida_destroy(&opts->function_ida);
+	device_destroy(dev->class, dev->devt);
+	spin_unlock_irqrestore(&opts_lock, flags);
+}
+EXPORT_SYMBOL_GPL(android_device_destroy);
+
+void __android_set_connected(struct android_uevent_opts *opts,
+		bool connected)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&opts_lock, flags);
+	// Don't send the uevent if connected state is not changed
+	if (opts->connected != connected) {
+		opts->connected = connected;
+		schedule_work(&opts->work);
+	}
+	spin_unlock_irqrestore(&opts_lock, flags);
+}
+
+void __android_set_configured(struct android_uevent_opts *opts,
+		bool configured)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&opts_lock, flags);
+	// Don't send the uevent if configure state is not changed
+	if (opts->configured != configured) {
+		opts->configured = configured;
+		schedule_work(&opts->work);
+	}
+	spin_unlock_irqrestore(&opts_lock, flags);
+}
+
+void android_set_connected(struct android_uevent_opts *opts)
+{
+	__android_set_connected(opts, true);
+}
+EXPORT_SYMBOL_GPL(android_set_connected);
+
+void android_set_disconnected(struct android_uevent_opts *opts)
+{
+	__android_set_connected(opts, false);
+}
+EXPORT_SYMBOL_GPL(android_set_disconnected);
+
+void android_set_configured(struct android_uevent_opts *opts)
+{
+	__android_set_configured(opts, true);
+}
+EXPORT_SYMBOL_GPL(android_set_configured);
+
+void android_set_unconfigured(struct android_uevent_opts *opts)
+{
+	__android_set_configured(opts, false);
+}
+EXPORT_SYMBOL_GPL(android_set_unconfigured);
+
+struct device *android_create_function_device(char *name, void *drvdata,
+	       const struct attribute_group **groups)
+{
+	struct android_uevent_opts *opts;
+	struct device *dev;
+	unsigned long flags;
+	int id;
+
+	spin_lock_irqsave(&opts_lock, flags);
+	opts = android_opts;
+	if (IS_ERR_OR_NULL(opts) || IS_ERR_OR_NULL(opts->dev)) {
+		spin_unlock_irqrestore(&opts_lock, flags);
+		return ERR_PTR(-ENODEV);
+	}
+
+	id = ida_alloc(&opts->function_ida, GFP_ATOMIC);
+	if (id < 0) {
+		spin_unlock_irqrestore(&opts_lock, flags);
+		return ERR_PTR(id);
+	}
+	// device_create_with_groups can sleep, so we must unlock first
+	spin_unlock_irqrestore(&opts_lock, flags);
+	dev = device_create_with_groups(&android_usb_class, opts->dev,
+	       MKDEV(0, id), drvdata, groups, name);
+	return dev;
+}
+EXPORT_SYMBOL_GPL(android_create_function_device);
+
+void android_remove_function_device(struct device *dev)
+{
+	struct android_uevent_opts *opts;
+	unsigned long flags;
+
+	device_destroy(&android_usb_class, dev->devt);
+
+	spin_lock_irqsave(&opts_lock, flags);
+	opts = android_opts;
+	if (IS_ERR_OR_NULL(opts)) {
+		spin_unlock_irqrestore(&opts_lock, flags);
+		return;
+	}
+
+	ida_free(&opts->function_ida, MINOR(dev->devt));
+	spin_unlock_irqrestore(&opts_lock, flags);
+}
+EXPORT_SYMBOL_GPL(android_remove_function_device);
diff --git a/drivers/usb/gadget/android_configfs_uevent.h b/drivers/usb/gadget/android_configfs_uevent.h
new file mode 100644
index 00000000000000..6a56efd748880e
--- /dev/null
+++ b/drivers/usb/gadget/android_configfs_uevent.h
@@ -0,0 +1,150 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright 2024 Google LLC
+ */
+#ifndef __ANDROID_CONFIGFS_UEVENT_H
+#define __ANDROID_CONFIGFS_UEVENT_H
+
+#ifdef CONFIG_ANDROID_USB_CONFIGFS_UEVENT
+#include <linux/usb/android_configfs_uevent.h>
+
+/**
+ * android_class_create - essentially the __init() function for the
+ * configfs_uevent library, since it is not a standalone driver.
+ *
+ * Creates the android_usb class of device
+ *
+ * Returns: the result of class_register (0 for success, err otherwise)
+ */
+int android_class_create(void);
+
+/**
+ * android_class_destroy - essentially the __exit() function for the
+ * configfs_uevent library, since it is not a standalone driver.
+ *
+ * Removes the android_usb class of devices and performs any necessary
+ * cleanup.
+ */
+void android_class_destroy(void);
+
+/**
+ * android_device_create - Creates an android device instance and
+ * a state attribute file which can be read to determine the state of the
+ * usb gadget.
+ * @opts: contextual data for the configfs_uevent library.
+ *
+ * Note: the state file created by this function mimics the functionaltiy
+ * of the UDC driver and is likely redundant, but maintained for legacy
+ * support.
+ *
+ * The state can be one of "DISCONNECTED", "CONNECTED", or "CONFIGURED"
+ *
+ * Returns: 0 for success, or if an error is encountered during ida_allocation
+ * or device_creation, that error is returned.
+ */
+int android_device_create(struct android_uevent_opts *opts);
+
+/**
+ * android_device_destroy - Removes the android device instance and performs
+ * any necessary cleanup.
+ * @opts: contextual data for the configfs_uevent library.
+ */
+void android_device_destroy(struct android_uevent_opts *opts);
+
+/**
+ * android_set_connected - set the internal state of android_uevent_opts to
+ * connected and schedule the work to emit a uevent with this status update.
+ * @opts: contextual data for the configfs_uevent library
+ *
+ * This should be called by the gadget composite driver when a usb_ctrlrequest
+ * is received by the gadget driver.
+ *
+ * This function locks the android specific android_uevent_opts->lock and
+ * therefore should not require locking the containing composite device
+ * structure as the internal lock is also used in the teardown path of the
+ * composite driver in android_device_destroy().
+ */
+void android_set_connected(struct android_uevent_opts *opts);
+
+/**
+ * android_set_disconnected - reset the internal state of android_uevent_opts to
+ * disconnected and schedule the work to emit a uevent with this status update.
+ * @opts: contextual data for the configfs_uevent library
+ *
+ * This should be called by the gadget composite driver when the link is
+ * disconnected.
+ *
+ * This function locks the android specific android_uevent_opts->lock and
+ * therefore should not require locking the containing composite device
+ * structure as the internal lock is also used in the teardown path of the
+ * composite driver in android_device_destroy().
+ */
+void android_set_disconnected(struct android_uevent_opts *opts);
+
+/**
+ * android_set_configured - set the internal state of android_uevent_opts to
+ * configured and schedule the work to emit a uevent with this status update.
+ * @opts: contextual data for the configfs_uevent library
+ *
+ * This should be called by the gadget composite driver when the configuration
+ * is applied to the gadget composite device
+ *
+ * This function locks the android specific android_uevent_opts->lock and
+ * therefore should not require locking the containing composite device
+ * structure as the internal lock is also used in the teardown path of the
+ * composite driver in android_device_destroy().
+ */
+void android_set_configured(struct android_uevent_opts *opts);
+
+/**
+ * android_set_unconfigured - reset the internal state of android_uevent_opts to
+ * unconfigured and schedule the work to emit a uevent with this status update.
+ * @opts: contextual data for the configfs_uevent library
+ *
+ * This should be called by the gadget composite driver when the gadget
+ * configuration is torn down.
+ *
+ * This function locks the android specific android_uevent_opts->lock and
+ * therefore should not require locking the containing composite device
+ * structure as the internal lock is also used in the teardown path of the
+ * composite driver in android_device_destroy().
+ */
+void android_set_unconfigured(struct android_uevent_opts *opts);
+
+#else
+
+static inline int android_class_create(void)
+{
+	return 0;
+}
+
+static inline void android_class_destroy(void)
+{
+}
+
+static inline int android_device_create(struct android_uevent_opts *opts)
+{
+	return 0;
+}
+
+static inline void android_device_destroy(struct android_uevent_opts *opts)
+{
+}
+
+static inline void android_set_connected(struct android_uevent_opts *opts)
+{
+}
+
+static inline void android_set_disconnected(struct android_uevent_opts *opts)
+{
+}
+
+static inline void android_set_configured(struct android_uevent_opts *opts)
+{
+}
+
+static inline void android_set_unconfigured(struct android_uevent_opts *opts)
+{
+}
+#endif /* CONFIG_ANDROID_USB_CONFIGFS_UEVENT */
+#endif /* __ANDROID_CONFIGFS_UEVENT_H */
diff --git a/drivers/usb/gadget/composite.c b/drivers/usb/gadget/composite.c
index f25dd2cb5d03b1..7bde851d2a6879 100644
--- a/drivers/usb/gadget/composite.c
+++ b/drivers/usb/gadget/composite.c
@@ -22,6 +22,7 @@
 #include <linux/unaligned.h>
 
 #include "u_os_desc.h"
+#include "android_configfs_uevent.h"
 
 /**
  * struct usb_os_string - represents OS String to be reported by a gadget
@@ -941,6 +942,7 @@ static void reset_config(struct usb_composite_dev *cdev)
 		bitmap_zero(f->endpoints, 32);
 	}
 	cdev->config = NULL;
+	android_set_unconfigured(&cdev->android_opts);
 	cdev->delayed_status = 0;
 }
 
@@ -1788,6 +1790,8 @@ composite_setup(struct usb_gadget *gadget, const struct usb_ctrlrequest *ctrl)
 	struct usb_function		*iter;
 	u8				endp;
 
+	android_set_connected(&cdev->android_opts);
+
 	if (w_length > USB_COMP_EP0_BUFSIZ) {
 		if (ctrl->bRequestType & USB_DIR_IN) {
 			/* Cast away the const, we are going to overwrite on purpose. */
@@ -1922,6 +1926,7 @@ composite_setup(struct usb_gadget *gadget, const struct usb_ctrlrequest *ctrl)
 		spin_lock(&cdev->lock);
 		value = set_config(cdev, ctrl, w_value);
 		spin_unlock(&cdev->lock);
+		android_set_configured(&cdev->android_opts);
 		break;
 	case USB_REQ_GET_CONFIGURATION:
 		if (ctrl->bRequestType != USB_DIR_IN)
@@ -2299,6 +2304,8 @@ static void __composite_disconnect(struct usb_gadget *gadget)
 	struct usb_composite_dev	*cdev = get_gadget_data(gadget);
 	unsigned long			flags;
 
+	android_set_disconnected(&cdev->android_opts);
+
 	/* REVISIT:  should we have config and device level
 	 * disconnect callbacks?
 	 */
diff --git a/drivers/usb/gadget/configfs.c b/drivers/usb/gadget/configfs.c
index c82a6a0fba93dd..e138c4bdb99963 100644
--- a/drivers/usb/gadget/configfs.c
+++ b/drivers/usb/gadget/configfs.c
@@ -12,6 +12,8 @@
 #include "configfs.h"
 #include "u_os_desc.h"
 
+#include "android_configfs_uevent.h"
+
 static int check_user_usb_string(const char *name,
 		struct usb_gadget_strings *stringtab_dev)
 {
@@ -286,7 +288,11 @@ static ssize_t gadget_dev_desc_UDC_store(struct config_item *item,
 
 	mutex_lock(&gi->lock);
 
-	if (!strlen(name)) {
+	/*
+	 * ANDROID: Not exactly sure why we need this "none", but worried it
+	 * would break something if removed.
+	 */
+	if (!strlen(name) || strcmp(name, "none") == 0) {
 		ret = unregister_gadget(gi);
 		if (ret)
 			goto err;
@@ -2037,10 +2043,16 @@ static struct config_group *gadgets_make(
 	if (!gi->composite.gadget_driver.function)
 		goto out_free_driver_name;
 
+	if (android_device_create(&gi->cdev.android_opts))
+		goto out_free_driver_name_and_function;
+
 	return &gi->group;
 
 out_free_driver_name:
 	kfree(gi->composite.gadget_driver.driver.name);
+out_free_driver_name_and_function:
+	kfree(gi->composite.gadget_driver.driver.name);
+	kfree(gi->composite.gadget_driver.function);
 err:
 	kfree(gi);
 	return ERR_PTR(-ENOMEM);
@@ -2048,6 +2060,10 @@ static struct config_group *gadgets_make(
 
 static void gadgets_drop(struct config_group *group, struct config_item *item)
 {
+	struct gadget_info *gi;
+
+	gi = container_of(to_config_group(item), struct gadget_info, group);
+	android_device_destroy(&gi->cdev.android_opts);
 	config_item_put(item);
 }
 
@@ -2087,7 +2103,13 @@ static int __init gadget_cfs_init(void)
 
 	config_group_init(&gadget_subsys.su_group);
 
+	ret = android_class_create();
+	if (ret)
+		return ret;
+
 	ret = configfs_register_subsystem(&gadget_subsys);
+	if (ret)
+		android_class_destroy();
 	return ret;
 }
 module_init(gadget_cfs_init);
@@ -2095,5 +2117,6 @@ module_init(gadget_cfs_init);
 static void __exit gadget_cfs_exit(void)
 {
 	configfs_unregister_subsystem(&gadget_subsys);
+	android_class_destroy();
 }
 module_exit(gadget_cfs_exit);
diff --git a/drivers/video/backlight/qcom-wled.c b/drivers/video/backlight/qcom-wled.c
index 10129095a4c178..39203bb4d3c2d0 100644
--- a/drivers/video/backlight/qcom-wled.c
+++ b/drivers/video/backlight/qcom-wled.c
@@ -2,11 +2,12 @@
 /* Copyright (c) 2015, Sony Mobile Communications, AB.
  */
 
+#include <linux/backlight.h>
 #include <linux/delay.h>
+#include <linux/devm-helpers.h>
 #include <linux/interrupt.h>
 #include <linux/ktime.h>
 #include <linux/kernel.h>
-#include <linux/backlight.h>
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
@@ -202,6 +203,7 @@ struct wled {
 
 	struct wled_config cfg;
 	struct delayed_work ovp_work;
+	struct delayed_work fault_work;
 
 	/* Configures the brightness. Applicable for wled3, wled4 and wled5 */
 	int (*wled_set_brightness)(struct wled *wled, u16 brightness);
@@ -294,6 +296,17 @@ static void wled_ovp_work(struct work_struct *work)
 {
 	struct wled *wled = container_of(work,
 					 struct wled, ovp_work.work);
+
+	disable_irq(wled->ovp_irq);
+
+	/* move it here is due to a known issue of spurious irq storm for 10ms */
+	regmap_update_bits(wled->regmap, wled->ctrl_addr +
+                                WLED3_CTRL_REG_MOD_EN,
+                                WLED3_CTRL_REG_MOD_EN_MASK,
+                                1 << WLED3_CTRL_REG_MOD_EN_SHIFT);
+
+	msleep(50);
+
 	enable_irq(wled->ovp_irq);
 }
 
@@ -304,13 +317,6 @@ static int wled_module_enable(struct wled *wled, int val)
 	if (wled->disabled_by_short)
 		return -ENXIO;
 
-	rc = regmap_update_bits(wled->regmap, wled->ctrl_addr +
-				WLED3_CTRL_REG_MOD_EN,
-				WLED3_CTRL_REG_MOD_EN_MASK,
-				val << WLED3_CTRL_REG_MOD_EN_SHIFT);
-	if (rc < 0)
-		return rc;
-
 	if (wled->ovp_irq > 0) {
 		if (val) {
 			/*
@@ -319,13 +325,18 @@ static int wled_module_enable(struct wled *wled, int val)
 			 * enabling the IRQ for 10ms to ensure that the
 			 * soft start is complete.
 			 */
-			schedule_delayed_work(&wled->ovp_work, HZ / 100);
-		} else {
-			if (!cancel_delayed_work_sync(&wled->ovp_work))
-				disable_irq(wled->ovp_irq);
+			schedule_delayed_work(&wled->ovp_work, 0);
 		}
 	}
 
+	/* the only case is to switch it off. safe to do it here */
+	rc = regmap_update_bits(wled->regmap, wled->ctrl_addr +
+                                WLED3_CTRL_REG_MOD_EN,
+                                WLED3_CTRL_REG_MOD_EN_MASK,
+                                val << WLED3_CTRL_REG_MOD_EN_SHIFT);
+	if (rc < 0)
+		return rc;
+
 	return 0;
 }
 
@@ -524,7 +535,6 @@ static int wled5_cabc_config(struct wled *wled, bool enable)
 	return 0;
 }
 
-#define WLED_SHORT_DLY_MS			20
 #define WLED_SHORT_CNT_MAX			5
 #define WLED_SHORT_RESET_CNT_DLY_US		USEC_PER_SEC
 
@@ -556,7 +566,7 @@ static irqreturn_t wled_short_irq_handler(int irq, void *_wled)
 
 	wled->last_short_event = ktime_get();
 
-	msleep(WLED_SHORT_DLY_MS);
+	/* no more need to sleep 20ms in irq handler, put it in a tasklet for 50ms */
 	rc = wled_module_enable(wled, true);
 	if (rc < 0)
 		dev_err(wled->dev, "wled enable failed rc:%d\n", rc);
@@ -838,12 +848,14 @@ static irqreturn_t wled_ovp_irq_handler(int irq, void *_wled)
 	int rc;
 	u32 int_sts, fault_sts;
 
+	disable_irq(wled->ovp_irq);
+
 	rc = regmap_read(wled->regmap,
 			 wled->ctrl_addr + WLED3_CTRL_REG_INT_RT_STS, &int_sts);
 	if (rc < 0) {
 		dev_err(wled->dev, "Error in reading WLED3_INT_RT_STS rc=%d\n",
 			rc);
-		return IRQ_HANDLED;
+		goto exit;
 	}
 
 	rc = regmap_read(wled->regmap, wled->ctrl_addr +
@@ -851,7 +863,7 @@ static irqreturn_t wled_ovp_irq_handler(int irq, void *_wled)
 	if (rc < 0) {
 		dev_err(wled->dev, "Error in reading WLED_FAULT_STATUS rc=%d\n",
 			rc);
-		return IRQ_HANDLED;
+		goto exit;
 	}
 
 	if (fault_sts & (WLED3_CTRL_REG_OVP_FAULT_BIT |
@@ -861,15 +873,28 @@ static irqreturn_t wled_ovp_irq_handler(int irq, void *_wled)
 
 	if (fault_sts & WLED3_CTRL_REG_OVP_FAULT_BIT) {
 		if (wled->wled_auto_detection_required(wled)) {
-			mutex_lock(&wled->lock);
-			wled_auto_string_detection(wled);
-			mutex_unlock(&wled->lock);
+			cancel_delayed_work(&wled->fault_work);
+			schedule_delayed_work(&wled->fault_work, 0);
 		}
 	}
 
+exit:
+        enable_irq(wled->ovp_irq);
+
 	return IRQ_HANDLED;
 }
 
+static void wled_fault_ovp_work(struct work_struct *work) {
+	struct wled *wled = container_of(work,
+                                         struct wled, fault_work.work);
+
+	mutex_lock(&wled->lock);
+
+	wled_auto_string_detection(wled);
+
+	mutex_unlock(&wled->lock);
+}
+
 static int wled3_setup(struct wled *wled)
 {
 	u16 addr;
@@ -1596,7 +1621,7 @@ static int wled_configure_ovp_irq(struct wled *wled,
 	}
 
 	rc = devm_request_threaded_irq(wled->dev, wled->ovp_irq, NULL,
-				       wled_ovp_irq_handler, IRQF_ONESHOT,
+				       wled_ovp_irq_handler, IRQF_ONESHOT | IRQ_TYPE_EDGE_RISING,
 				       "wled_ovp_irq", wled);
 	if (rc < 0) {
 		dev_err(wled->dev, "Unable to request ovp_irq (err:%d)\n",
@@ -1605,14 +1630,15 @@ static int wled_configure_ovp_irq(struct wled *wled,
 		return 0;
 	}
 
+	devm_delayed_work_autocancel(wled->dev, &wled->ovp_work, wled_ovp_work);
+
+	devm_delayed_work_autocancel(wled->dev, &wled->fault_work, wled_fault_ovp_work);
+
 	rc = regmap_read(wled->regmap, wled->ctrl_addr +
 			 WLED3_CTRL_REG_MOD_EN, &val);
 	if (rc < 0)
 		return rc;
 
-	/* Keep OVP irq disabled until module is enabled */
-	if (!(val & WLED3_CTRL_REG_MOD_EN_MASK))
-		disable_irq(wled->ovp_irq);
 
 	return 0;
 }
@@ -1694,8 +1720,6 @@ static int wled_probe(struct platform_device *pdev)
 		break;
 	}
 
-	INIT_DELAYED_WORK(&wled->ovp_work, wled_ovp_work);
-
 	rc = wled_configure_short_irq(wled, pdev);
 	if (rc < 0)
 		return rc;
diff --git a/include/linux/usb/android_configfs_uevent.h b/include/linux/usb/android_configfs_uevent.h
new file mode 100644
index 00000000000000..07b82dda420b14
--- /dev/null
+++ b/include/linux/usb/android_configfs_uevent.h
@@ -0,0 +1,58 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright 2024 Google LLC
+ */
+#ifndef _ANDROID_USB_CONFIGFS_UEVENT_H
+#define _ANDROID_USB_CONFIGFS_UEVENT_H
+
+#ifdef CONFIG_ANDROID_USB_CONFIGFS_UEVENT
+#include <linux/device.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+
+struct android_uevent_opts {
+	struct device *dev;
+	int device_id;
+	bool connected;
+	bool configured;
+	bool sw_connected;
+	struct work_struct work;
+	struct ida function_ida;
+};
+
+/**
+ * android_create_function_device - creates a device within the android_usb
+ * class with a new minor number.
+ * @name: the name for the device which is to be created
+ * @drvdata: the data to be added to the device for callbacks, can be NULL
+ * @groups: NULL-terminated list of attribute groups to be created, can be NULL
+ *
+ * This should be called by function drivers which wish to register a device
+ * within the android_usb class.
+ *
+ * Returns: a pointer to the newly created device upon success, or an ERR_PTR
+ * for the encountered error.
+ */
+struct device *android_create_function_device(char *name, void *drvdata,
+		const struct attribute_group **groups);
+
+/**
+ * android_remove_function_device - destroys a device which was created by
+ * calling android_create_function_device, and performs any necessary cleanup.
+ * @dev: the device to be destroyed
+ */
+void android_remove_function_device(struct device *dev);
+#else
+
+struct android_uevent_opts {};
+
+static inline struct device *android_create_function_device(char *name)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+static inline void android_remove_function_device(struct device *dev)
+{
+}
+#endif /* CONFIG_ANDROID_USB_CONFIGFS_UEVENT */
+#endif /* _ANDROID_USB_CONFIGFS_UEVENT_H */
diff --git a/include/linux/usb/composite.h b/include/linux/usb/composite.h
index 6e38fb9d21174a..27d10cea0bd745 100644
--- a/include/linux/usb/composite.h
+++ b/include/linux/usb/composite.h
@@ -28,6 +28,7 @@
 #include <linux/usb/webusb.h>
 #include <linux/log2.h>
 #include <linux/configfs.h>
+#include <linux/usb/android_configfs_uevent.h>
 
 /*
  * USB function drivers should return USB_GADGET_DELAYED_STATUS if they
@@ -502,6 +503,8 @@ struct usb_composite_dev {
 	/* protects deactivations and delayed_status counts*/
 	spinlock_t			lock;
 
+	struct android_uevent_opts	android_opts;
+
 	/* public: */
 	unsigned int			setup_pending:1;
 	unsigned int			os_desc_pending:1;
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 7092842480ef17..f614c90b9e9e41 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -1992,6 +1992,11 @@ config SND_SOC_TDA7419
 	depends on I2C
 	select REGMAP_I2C
 
+config SND_SOC_TFA9872
+	tristate "NXP Semiconductors TFA9872 amplifier"
+	depends on I2C
+	select REGMAP_I2C
+
 config SND_SOC_TFA9879
 	tristate "NXP Semiconductors TFA9879 amplifier"
 	depends on I2C
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index 54cbc3feae3277..e956b582782451 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -297,6 +297,7 @@ snd-soc-tas2770-y := tas2770.o
 snd-soc-tas2781-comlib-y := tas2781-comlib.o
 snd-soc-tas2781-fmwlib-y := tas2781-fmwlib.o
 snd-soc-tas2781-i2c-y := tas2781-i2c.o
+snd-soc-tfa9872-y := tfa9872.o
 snd-soc-tfa9879-y := tfa9879.o
 snd-soc-tfa989x-y := tfa989x.o
 snd-soc-tlv320adc3xxx-y := tlv320adc3xxx.o
@@ -701,6 +702,7 @@ obj-$(CONFIG_SND_SOC_TAS5805M)	+= snd-soc-tas5805m.o
 obj-$(CONFIG_SND_SOC_TAS6424)	+= snd-soc-tas6424.o
 obj-$(CONFIG_SND_SOC_TDA7419)	+= snd-soc-tda7419.o
 obj-$(CONFIG_SND_SOC_TAS2770) += snd-soc-tas2770.o
+obj-$(CONFIG_SND_SOC_TFA9872)	+= snd-soc-tfa9872.o
 obj-$(CONFIG_SND_SOC_TFA9879)	+= snd-soc-tfa9879.o
 obj-$(CONFIG_SND_SOC_TFA989X)	+= snd-soc-tfa989x.o
 obj-$(CONFIG_SND_SOC_TLV320ADC3XXX)	+= snd-soc-tlv320adc3xxx.o
diff --git a/sound/soc/codecs/tas2562.c b/sound/soc/codecs/tas2562.c
index 54561ae598b87a..ceab1bb143bdd7 100644
--- a/sound/soc/codecs/tas2562.c
+++ b/sound/soc/codecs/tas2562.c
@@ -471,6 +471,8 @@ static int tas2562_volume_control_put(struct snd_kcontrol *kcontrol,
 {
 	struct snd_soc_component *component = snd_soc_kcontrol_component(kcontrol);
 	struct tas2562_data *tas2562 = snd_soc_component_get_drvdata(component);
+//Sometimes doesn't work with "amixer -c0 cset" command. Maybe it has to do something with 'page' switching
+#if 0
 	int ret;
 	u32 reg_val;
 
@@ -491,7 +493,7 @@ static int tas2562_volume_control_put(struct snd_kcontrol *kcontrol,
 				      ((reg_val >> 24) & 0xff));
 	if (ret)
 		return ret;
-
+#endif
 	tas2562->volume_lvl = ucontrol->value.integer.value[0];
 
 	return 0;
diff --git a/sound/soc/codecs/tfa9872.c b/sound/soc/codecs/tfa9872.c
new file mode 100755
index 00000000000000..26bed430599419
--- /dev/null
+++ b/sound/soc/codecs/tfa9872.c
@@ -0,0 +1,317 @@
+/* SPDX-License-Identifier: GPL-2.0-only
+ *
+ * Based of tfa9895.c
+ * Register definitions taken from tfa98xx kernel driver:
+ * Copyright (C) 2014-2020 NXP Semiconductors, All Rights Reserved.
+ */
+
+#include <linux/bitfield.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/regmap.h>
+#include <sound/soc.h>
+
+#define TFA987X_SYS_CTRL0		0x00
+#define TFA987X_SYS_CTRL0_PWDN_MSK	BIT(0)
+#define TFA987X_SYS_CTRL0_I2CR_MSK	BIT(1)
+#define TFA987X_SYS_CTRL0_AMPE_MSK	BIT(3)
+#define TFA987X_SYS_CTRL0_DCDC_MSK	BIT(4)
+
+#define TFA987X_SYS_CTRL1		0x01
+#define TFA987X_SYS_CTRL1_MANSCONF_MSK	BIT(2)
+#define TFA987X_SYS_CTRL1_MANSAOOSC_MSK	BIT(4)
+
+#define TFA987X_SYS_CTRL2		0x02
+#define TFA987X_SYS_CTRL2_AUDFS_MSK	GENMASK(3, 0)
+#define TFA987X_SYS_CTRL2_FRACTDEL_MSK	GENMASK(10, 5)
+
+#define TFA987X_REV			0x03
+#define TFA987X_CLK_GATING_CTRL		0x05
+
+#define TFA987X_TDM_CFG0		0x20
+#define TFA987X_TDM_CFG0_FSBCLKS_MSK	GENMASK(15, 12)
+#define TFA987X_TDM_CFG1		0x21
+#define TFA987X_TDM_CFG1_NSLOTS_MSK	GENMASK(3,  0)
+#define TFA987X_TDM_CFG1_SLOTBITS_MSK	GENMASK(8,  4)
+#define TFA987X_TDM_CFG2		0x22
+#define TFA987X_TDM_CFG2_SWIDTH_MSK	GENMASK(6,  2)
+#define TFA987X_TDM_CFG3		0x23
+#define TFA987X_TDM_CFG3_SPKE_MSK	BIT(0)
+#define TFA987X_TDM_CFG3_DCE_MSK	BIT(1)
+#define TFA987X_TDM_CFG3_CSE_MSK	BIT(3)
+#define TFA987X_TDM_CFG3_VSE_MSK	BIT(4)
+#define TFA987X_TDM_CFG6		0x26
+#define TFA987X_TDM_CFG6_SPKS_MSK	GENMASK(3,  0)
+#define TFA987X_TDM_CFG6_DCS_MSK	GENMASK(4,  7)
+#define TFA987X_TDM_CFG6_CSS_MSK	GENMASK(15, 12)
+#define TFA987X_TDM_CFG7		0x27
+#define TFA987X_TDM_CFG7_VSS_MSK	GENMASK(3,  0)
+
+#define TFA987X_AUDIO_CTRL		0x51
+#define TFA987X_AUDIO_CTRL_BSSS_MSK	BIT(0)
+#define TFA9872_AUDIO_CTRL_INTSMUTE_MSK	BIT(1)
+#define TFA987X_AUDIO_CTRL_HPFBYP_MSK	BIT(5)
+#define TFA987X_AUDIO_CTRL_DPSA_MSK     BIT(7)
+
+#define TFA987X_AMP_CFG			0x52
+#define TFA987X_AMP_CFG_CLIPCTRL_MSK	GENMASK(4, 2)
+#define TFA987X_AMP_CFG_GAIN_MSK	GENMASK(12, 5)
+#define TFA987X_AMP_CFG_SLOPEE_MSK	BIT(13)
+#define TFA987X_AMP_CFG_SLOPESET_MSK	BIT(14)
+
+#define TFA987X_KEY1_PWM_CFG		0x58
+#define TFA987X_TDM_CFG8		0x61
+#define TFA987X_TDM_CFG8_DCG_MSK	GENMASK(5, 2)
+#define TFA987X_TDM_CFG8_SPKG_MSK	GENMASK(9, 6)
+
+#define TFA987X_LOW_NOISE_GAIN1		0x62
+#define TFA987X_LOW_NOISE_GAIN2		0x63
+#define TFA987X_MODE1_DET1		0x64
+#define TFA987X_MODE1_DET1_LPM1MODE_MSK	GENMASK(15, 14)
+#define TFA987X_MODE1_DETECTOR2		0x65
+#define TFA987X_TDM_SRC			0x68
+#define TFA987X_CURSENSE_COMP		0x6f
+#define TFA987X_DCDC_CTRL0		0x70
+#define TFA9872_DCDC_CTRL0_DCVOS_MSK	GENMASK(2,  0)
+#define TFA987X_DCDC_CTRL0_MCC_MSK	GENMASK(6,  3)
+#define TFA987X_DCDC_CTRL0_DCIE_MSK	BIT(9)
+#define TFA987X_DCDC_CTRL1		0x71
+#define TFA987X_DCDC_CTRL4		0x74
+#define TFA9872_DCDC_CTRL4_DCVOF_MSK	GENMASK(2,  0)
+#define TFA987X_DCDC_CTRL4_DCTRIP_MSK	GENMASK(8,  4)
+#define TFA987X_DCDC_CTRL5		0x75
+#define TFA987X_DCDC_CTRL5_DCTRIP2_MSK	GENMASK(7,  3)
+#define TFA987X_DCDC_CTRL6		0x76
+#define TFA9874_DCDC_CTRL6_DCVOF_MSK	GENMASK(8,  3)
+#define TFA9874_DCDC_CTRL6_DCVOS_MSK	GENMASK(14,  9)
+
+static int tfa987x_digital_mute(struct snd_soc_dai *codec_dai, int mute, int stream)
+{
+	struct snd_soc_component *component = codec_dai->component;
+	int val = mute ? 0 : TFA987X_SYS_CTRL0_AMPE_MSK;
+
+	if (stream != SNDRV_PCM_STREAM_PLAYBACK)
+		return 0;
+
+	snd_soc_component_update_bits(component, TFA987X_SYS_CTRL0,
+						 TFA987X_SYS_CTRL0_AMPE_MSK, val);
+
+	return 0;
+}
+
+static const struct snd_soc_dapm_widget tfa987x_dapm_widgets[] = {
+	SND_SOC_DAPM_OUTPUT("Speaker"),
+	SND_SOC_DAPM_OUT_DRV_E("PWUP", TFA987X_SYS_CTRL0, 0, 1, NULL, 0, NULL, 0),
+};
+
+static const struct snd_soc_dapm_route tfa987x_dapm_routes[] = {
+	{"PWUP", NULL, "HiFi Playback"},
+	{"Speaker", NULL, "PWUP"},
+};
+
+static const struct snd_soc_component_driver tfa987x_component = {
+	.dapm_widgets		= tfa987x_dapm_widgets,
+	.num_dapm_widgets	= ARRAY_SIZE(tfa987x_dapm_widgets),
+	.dapm_routes		= tfa987x_dapm_routes,
+	.num_dapm_routes	= ARRAY_SIZE(tfa987x_dapm_routes),
+	.idle_bias_on		= 1,
+	.use_pmdown_time	= 1,
+	.endianness		= 1,
+};
+
+static const struct snd_soc_dai_ops tfa987x_dai_ops = {
+	.mute_stream = tfa987x_digital_mute,
+};
+
+static struct snd_soc_dai_driver tfa987x_dai = {
+	.name = "tfa987x-hifi",
+	.playback = {
+		.stream_name	= "HiFi Playback",
+		.formats	= SNDRV_PCM_FMTBIT_S16_LE,
+		.rates		= SNDRV_PCM_RATE_48000,
+		.rate_min	= 48000,
+		.rate_max	= 48000,
+		.channels_min	= 1,
+		.channels_max	= 2,
+	},
+	.ops = &tfa987x_dai_ops,
+};
+
+static const struct regmap_config tfa987x_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 16,
+	.max_register = 0xff,
+};
+
+static bool tfa987x_setup_dcdc(struct device *dev, struct regmap *rmap, u16 rev)
+{
+	u32 mcc, dcvof, dcvos, dctrip, dctrip2 = 0;
+	int i;
+	u32 *dest[] = { &mcc, &dcvof, &dcvos, &dctrip, &dctrip2 };
+	const char *props[] = { "max-coil-current",
+	      "first-boost-voltage", "second-boost-voltage",
+	      "first-boost-trip-lvl", "second-boost-trip-lvl" };
+
+	for (i = 0; i < ARRAY_SIZE(props); i++) {
+		int ret;
+		ret = of_property_read_u32(dev->of_node, props[i], dest[i]);
+		if (ret < 0 && ret != -EINVAL)
+			return false;
+	}
+
+	if (!FIELD_FIT(TFA987X_DCDC_CTRL0_MCC_MSK, mcc) ||
+	    !FIELD_FIT(TFA987X_DCDC_CTRL4_DCTRIP_MSK, dctrip) ||
+	    !FIELD_FIT(TFA987X_DCDC_CTRL5_DCTRIP2_MSK, dctrip2))
+		return false;
+
+	switch (rev & 0xff) {
+	case 0x72:
+		if (!FIELD_FIT(TFA9872_DCDC_CTRL4_DCVOF_MSK, dcvof) ||
+		    !FIELD_FIT(TFA9872_DCDC_CTRL0_DCVOS_MSK, dcvos))
+			return false;
+
+		if (dcvof)
+			regmap_update_bits(rmap, TFA987X_DCDC_CTRL4,
+					TFA9872_DCDC_CTRL4_DCVOF_MSK,
+					FIELD_PREP(TFA9872_DCDC_CTRL4_DCVOF_MSK, dcvof));
+		if (dcvos)
+			regmap_update_bits(rmap, TFA987X_DCDC_CTRL0,
+					TFA9872_DCDC_CTRL0_DCVOS_MSK,
+					FIELD_PREP(TFA9872_DCDC_CTRL0_DCVOS_MSK, dcvos));
+		break;
+	case 0x74:
+		if (!FIELD_FIT(TFA9874_DCDC_CTRL6_DCVOF_MSK, dcvof) ||
+		    !FIELD_FIT(TFA9874_DCDC_CTRL6_DCVOS_MSK, dcvos))
+			return false;
+
+		if (dcvof)
+			regmap_update_bits(rmap, TFA987X_DCDC_CTRL6,
+					TFA9874_DCDC_CTRL6_DCVOF_MSK,
+					FIELD_PREP(TFA9874_DCDC_CTRL6_DCVOF_MSK, dcvof));
+
+		if (dcvos)
+			regmap_update_bits(rmap, TFA987X_DCDC_CTRL0,
+					TFA9874_DCDC_CTRL6_DCVOS_MSK,
+					FIELD_PREP(TFA9874_DCDC_CTRL6_DCVOS_MSK, dcvos));
+		break;
+	default:
+		return false;
+	}
+
+	if (dctrip)
+		regmap_update_bits(rmap, TFA987X_DCDC_CTRL4,
+					 TFA987X_DCDC_CTRL4_DCTRIP_MSK,
+					 FIELD_PREP(TFA987X_DCDC_CTRL4_DCTRIP_MSK, dctrip));
+	if (dctrip2)
+		regmap_update_bits(rmap, TFA987X_DCDC_CTRL5,
+					 TFA987X_DCDC_CTRL5_DCTRIP2_MSK,
+					 FIELD_PREP(TFA987X_DCDC_CTRL5_DCTRIP2_MSK, dctrip2));
+	if (mcc)
+		regmap_update_bits(rmap, TFA987X_DCDC_CTRL0,
+					 TFA987X_DCDC_CTRL0_MCC_MSK |
+					 TFA987X_DCDC_CTRL0_DCIE_MSK,
+					 FIELD_PREP(TFA987X_DCDC_CTRL0_MCC_MSK, mcc) |
+					 TFA987X_DCDC_CTRL0_DCIE_MSK);
+	return true;
+}
+
+static int tfa987x_i2c_probe(struct i2c_client *i2c)
+{
+	struct device *dev = &i2c->dev;
+	struct regmap *rmap;
+	unsigned int rev;
+	int ret;
+
+	rmap = devm_regmap_init_i2c(i2c, &tfa987x_regmap_config);
+	if (IS_ERR(rmap))
+		return PTR_ERR(rmap);
+
+	ret = regmap_read(rmap, TFA987X_REV, &rev);
+	if (ret < 0) {
+		dev_err(dev, "Failed to read revision register: %d\n", ret);
+		return ret;
+	}
+
+	switch (rev) {
+		case 0x1b72:
+		case 0x2b72:
+		case 0x3b72:
+		case 0x0c74:
+			dev_info(dev, "Chip revision: 0x%04x\n", rev);
+			break;
+		default:
+			dev_err(dev, "Unsupported chip revision: 0x%04x\n", rev);
+			return -ENODEV;
+	}
+
+	/* Perform soft reset */
+	regmap_write(rmap, TFA987X_SYS_CTRL0, TFA987X_SYS_CTRL0_I2CR_MSK);
+
+	/* Setup DC-DC Converter if we have configuration */
+	regmap_update_bits(rmap, TFA987X_SYS_CTRL0, TFA987X_SYS_CTRL0_DCDC_MSK,
+			   FIELD_PREP(TFA987X_SYS_CTRL0_DCDC_MSK,
+				   (u16) tfa987x_setup_dcdc(dev, rmap, rev)));
+
+	/* Disable DPSA */
+	regmap_update_bits(rmap, TFA987X_AUDIO_CTRL,
+				 TFA987X_AUDIO_CTRL_DPSA_MSK, 0);
+
+	/* Setup TDM 16 bit 1 slot config */
+	regmap_update_bits(rmap, TFA987X_TDM_CFG0,
+				 TFA987X_TDM_CFG0_FSBCLKS_MSK,
+				 FIELD_PREP(TFA987X_TDM_CFG0_FSBCLKS_MSK, 0));
+	regmap_update_bits(rmap, TFA987X_TDM_CFG1,
+				 TFA987X_TDM_CFG1_NSLOTS_MSK |
+				 TFA987X_TDM_CFG1_SLOTBITS_MSK,
+				 FIELD_PREP(TFA987X_TDM_CFG1_NSLOTS_MSK, 1) |
+				 FIELD_PREP(TFA987X_TDM_CFG1_SLOTBITS_MSK, 15));
+	regmap_update_bits(rmap, TFA987X_TDM_CFG2,
+				 TFA987X_TDM_CFG2_SWIDTH_MSK,
+				 FIELD_PREP(TFA987X_TDM_CFG2_SWIDTH_MSK, 15));
+
+	/* No current/voltage sense over TDM */
+	regmap_update_bits(rmap, TFA987X_TDM_CFG3,
+				 TFA987X_TDM_CFG3_SPKE_MSK |
+				 TFA987X_TDM_CFG3_DCE_MSK |
+				 TFA987X_TDM_CFG3_CSE_MSK |
+				 TFA987X_TDM_CFG3_VSE_MSK,
+				 TFA987X_TDM_CFG3_SPKE_MSK);
+	regmap_update_bits(rmap, TFA987X_TDM_CFG6,
+				 TFA987X_TDM_CFG6_SPKS_MSK,
+				 FIELD_PREP(TFA987X_TDM_CFG6_SPKS_MSK, 0));
+
+	if ((rev & 0xff) == 0x72)
+		regmap_update_bits(rmap, TFA987X_MODE1_DET1,
+				 TFA987X_MODE1_DET1_LPM1MODE_MSK,
+				 FIELD_PREP(TFA987X_MODE1_DET1_LPM1MODE_MSK, 1));
+
+	/* Turn on this thing */
+	regmap_update_bits(rmap, TFA987X_SYS_CTRL0,
+				 TFA987X_SYS_CTRL0_PWDN_MSK, 0);
+
+	regmap_update_bits(rmap, TFA987X_SYS_CTRL1,
+				 TFA987X_SYS_CTRL1_MANSCONF_MSK,
+				 TFA987X_SYS_CTRL1_MANSCONF_MSK);
+
+	return devm_snd_soc_register_component(dev, &tfa987x_component,
+						    &tfa987x_dai, 1);
+}
+
+static const struct of_device_id tfa987x_of_match[] = {
+	{ .compatible = "nxp,tfa9872" },
+	{ .compatible = "nxp,tfa9874" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, tfa987x_of_match);
+
+static struct i2c_driver tfa987x_i2c_driver = {
+	.driver = {
+		.name = "tfa987x",
+		.of_match_table = tfa987x_of_match,
+	},
+	.probe = tfa987x_i2c_probe,
+};
+module_i2c_driver(tfa987x_i2c_driver);
+
+MODULE_DESCRIPTION("ASoC NXP Semiconductors TFA9872/TFA9874 driver");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/qcom/sm8250.c b/sound/soc/qcom/sm8250.c
index 19adadedc88a2a..644c95cfc31e73 100644
--- a/sound/soc/qcom/sm8250.c
+++ b/sound/soc/qcom/sm8250.c
@@ -71,6 +71,14 @@ static int sm8250_snd_startup(struct snd_pcm_substream *substream)
 		snd_soc_dai_set_fmt(cpu_dai, fmt);
 		snd_soc_dai_set_fmt(codec_dai, codec_dai_fmt);
 		break;
+	case QUINARY_MI2S_RX:
+		codec_dai_fmt |= SND_SOC_DAIFMT_NB_NF | SND_SOC_DAIFMT_I2S;
+		snd_soc_dai_set_sysclk(cpu_dai,
+			Q6AFE_LPASS_CLK_ID_QUI_MI2S_IBIT,
+			MI2S_BCLK_RATE, SNDRV_PCM_STREAM_PLAYBACK);
+		snd_soc_dai_set_fmt(cpu_dai, fmt);
+		snd_soc_dai_set_fmt(codec_dai, codec_dai_fmt);
+		break;
 	default:
 		break;
 	}
